<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-08-28T14:04:01.831Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>高明辉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java设计模式--简单工厂-工厂方法-抽象工厂模式</title>
    <link href="http://example.com/2024/08/28/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2024/08/28/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-08-28T12:55:49.000Z</published>
    <updated>2024-08-28T14:04:01.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4，创建型模式"><a href="#4，创建型模式" class="headerlink" title="4，创建型模式"></a>4，创建型模式</h1><h2 id="4-2-工厂模式"><a href="#4-2-工厂模式" class="headerlink" title="4.2 工厂模式"></a>4.2 工厂模式</h2><h3 id="4-2-1-概述"><a href="#4-2-1-概述" class="headerlink" title="4.2.1 概述"></a>4.2.1 概述</h3><p>需求：设计一个咖啡店点餐系统。  </p><p>设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。</p><p>具体类的设计如下：</p><img src="/img/java/java设计模式/工厂模式/工厂设计模式引入.png" style="zoom:80%;" /><p>在java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象，就会对该对象耦合严重，假如我们要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：<strong>解耦</strong>。</p><p>在本教程中会介绍三种工厂的使用</p><ul><li>简单工厂模式（不属于GOF的23种经典设计模式）</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul><h3 id="4-2-2-简单工厂模式"><a href="#4-2-2-简单工厂模式" class="headerlink" title="4.2.2 简单工厂模式"></a>4.2.2 简单工厂模式</h3><p>简单工厂不是一种设计模式，反而比较像是一种编程习惯。</p><h4 id="4-2-2-1-结构"><a href="#4-2-2-1-结构" class="headerlink" title="4.2.2.1 结构"></a>4.2.2.1 结构</h4><p>简单工厂包含如下角色：</p><ul><li>抽象产品 ：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品 ：实现或者继承抽象产品的子类</li><li>具体工厂 ：提供了创建产品的方法，调用者通过该方法来获取产品。</li></ul><h4 id="4-2-2-2-实现"><a href="#4-2-2-2-实现" class="headerlink" title="4.2.2.2 实现"></a>4.2.2.2 实现</h4><p>现在使用简单工厂对上面案例进行改进，类图如下：</p><img src="/img/java/java设计模式/工厂模式/简单工厂模式.png" style="zoom:70%;" /><p>工厂类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCoffeeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Coffee coffee = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;americano&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> AmericanoCoffee();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;latte&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂（factory）处理创建对象的细节，一旦有了SimpleCoffeeFactory，CoffeeStore类中的orderCoffee()就变成此对象的客户，后期如果需要Coffee对象直接从工厂中获取即可。这样也就解除了和Coffee实现类的耦合，同时又产生了新的耦合，CoffeeStore对象和SimpleCoffeeFactory工厂对象的耦合，工厂对象和商品对象的耦合。</p><p>后期如果再加新品种的咖啡，我们势必要需求修改SimpleCoffeeFactory的代码，违反了开闭原则。工厂类的客户端可能有很多，比如创建美团外卖等，这样只需要修改工厂类的代码，省去其他的修改操作。</p><h4 id="4-2-2-4-优缺点"><a href="#4-2-2-4-优缺点" class="headerlink" title="4.2.2.4 优缺点"></a>4.2.2.4 优缺点</h4><p><strong>优点：</strong></p><p>封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容易扩展。</p><p><strong>缺点：</strong></p><p>增加新产品时还是需要修改工厂类的代码，违背了“开闭原则”。</p><h4 id="4-2-2-3-扩展"><a href="#4-2-2-3-扩展" class="headerlink" title="4.2.2.3 扩展"></a>4.2.2.3 扩展</h4><p><strong>静态工厂</strong></p><p>在开发中也有一部分人将工厂类中的创建对象的功能定义为静态的，这个就是静态工厂模式，它也不是23种设计模式中的。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCoffeeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Coffee <span class="title">createCoffee</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Coffee coffee = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;americano&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> AmericanoCoffee();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;latte&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coffe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-工厂方法模式"><a href="#4-2-3-工厂方法模式" class="headerlink" title="4.2.3 工厂方法模式"></a>4.2.3 工厂方法模式</h3><p>针对上例中的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。</p><h4 id="4-2-3-1-概念"><a href="#4-2-3-1-概念" class="headerlink" title="4.2.3.1 概念"></a>4.2.3.1 概念</h4><p>定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延迟到其工厂的子类。</p><h4 id="4-2-3-2-结构"><a href="#4-2-3-2-结构" class="headerlink" title="4.2.3.2 结构"></a>4.2.3.2 结构</h4><p>工厂方法模式的主要角色：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li><li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li></ul><h4 id="4-2-3-3-实现"><a href="#4-2-3-3-实现" class="headerlink" title="4.2.3.3 实现"></a>4.2.3.3 实现</h4><p>使用工厂方法模式对上例进行改进，类图如下：</p><img src="/img/java/java设计模式/工厂模式/工厂方法模式.png" style="zoom:70%;" /><p>代码如下：</p><p>抽象工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Coffee <span class="title">createCoffee</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LatteCoffeeFactory</span> <span class="keyword">implements</span> <span class="title">CoffeeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanCoffeeFactory</span> <span class="keyword">implements</span> <span class="title">CoffeeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AmericanCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咖啡店类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CoffeeFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoffeeStore</span><span class="params">(CoffeeFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">orderCoffee</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Coffee coffee = factory.createCoffee();</span><br><span class="line">        coffee.addMilk();</span><br><span class="line">        coffee.addsugar();</span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上的编写的代码可以看到，要增加产品类时也要相应地增加工厂类，不需要修改工厂类的代码了，这样就解决了简单工厂模式的缺点。</p><p>工厂方法模式是简单工厂模式的进一步抽象。由于使用了多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。</p><h4 id="4-2-3-4-优缺点"><a href="#4-2-3-4-优缺点" class="headerlink" title="4.2.3.4 优缺点"></a>4.2.3.4 优缺点</h4><p><strong>优点：</strong></p><ul><li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</li><li>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</li></ul><p><strong>缺点：</strong></p><ul><li>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</li></ul><h3 id="4-2-4-抽象工厂模式"><a href="#4-2-4-抽象工厂模式" class="headerlink" title="4.2.4 抽象工厂模式"></a>4.2.4 抽象工厂模式</h3><p>前面介绍的工厂方法模式中考虑的是一类产品的生产，如畜牧场只养动物、电视机厂只生产电视机、传智播客只培养计算机软件专业的学生等。</p><p>这些工厂只生产同种类产品，同种类产品称为同等级产品，也就是说：工厂方法模式只考虑生产同等级的产品，但是在现实生活中许多工厂是综合型的工厂，能生产多等级（种类） 的产品，如电器厂既生产电视机又生产洗衣机或空调，大学既有软件专业又有生物专业等。</p><p>本节要介绍的抽象工厂模式将考虑多等级产品的生产，将同一个具体工厂所生产的位于不同等级的一组产品称为一个产品族，下图所示横轴是产品等级，也就是同一类产品；纵轴是产品族，也就是同一品牌的产品，同一品牌的产品产自同一个工厂。</p><img src="/img/java/java设计模式/工厂模式/image-20200401214509176.png" style="zoom:67%;" /><img src="/img/java/java设计模式/工厂模式/image-20200401222951963.png" style="zoom:67%;" /><h4 id="4-2-4-1-概念"><a href="#4-2-4-1-概念" class="headerlink" title="4.2.4.1 概念"></a>4.2.4.1 概念</h4><p>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p><p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。</p><h4 id="4-2-4-2-结构"><a href="#4-2-4-2-结构" class="headerlink" title="4.2.4.2 结构"></a>4.2.4.2 结构</h4><p>抽象工厂模式的主要角色如下：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。</li><li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。</li></ul><h4 id="4-2-4-2-实现"><a href="#4-2-4-2-实现" class="headerlink" title="4.2.4.2 实现"></a>4.2.4.2 实现</h4><p>现咖啡店业务发生改变，不仅要生产咖啡还要生产甜点，如提拉米苏、抹茶慕斯等，要是按照工厂方法模式，需要定义提拉米苏类、抹茶慕斯类、提拉米苏工厂、抹茶慕斯工厂、甜点工厂类，很容易发生类爆炸情况。其中拿铁咖啡、美式咖啡是一个产品等级，都是咖啡；提拉米苏、抹茶慕斯也是一个产品等级；拿铁咖啡和提拉米苏是同一产品族（也就是都属于意大利风味），美式咖啡和抹茶慕斯是同一产品族（也就是都属于美式风味）。所以这个案例可以使用抽象工厂模式实现。类图如下：</p><img src="/img/java/java设计模式/工厂模式/抽象工厂模式.png" style="zoom:67%;" /><p>代码如下：</p><p>抽象工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DessertFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Coffee <span class="title">createCoffee</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dessert <span class="title">createDessert</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//美式甜点工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanDessertFactory</span> <span class="keyword">implements</span> <span class="title">DessertFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AmericanCoffee();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dessert <span class="title">createDessert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MatchaMousse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//意大利风味甜点工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItalyDessertFactory</span> <span class="keyword">implements</span> <span class="title">DessertFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dessert <span class="title">createDessert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tiramisu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要加同一个产品族的话，只需要再加一个对应的工厂类即可，不需要修改其他的类。</p><h4 id="4-2-4-3-优缺点"><a href="#4-2-4-3-优缺点" class="headerlink" title="4.2.4.3 优缺点"></a>4.2.4.3 优缺点</h4><p><strong>优点：</strong></p><p>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><p><strong>缺点：</strong></p><p>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</p><h4 id="4-2-4-4-使用场景"><a href="#4-2-4-4-使用场景" class="headerlink" title="4.2.4.4 使用场景"></a>4.2.4.4 使用场景</h4><ul><li><p>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。</p></li><li><p>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。</p></li><li><p>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。</p></li></ul><p>如：输入法换皮肤，一整套一起换。生成不同操作系统的程序。</p><h3 id="4-2-5-模式扩展"><a href="#4-2-5-模式扩展" class="headerlink" title="4.2.5 模式扩展"></a>4.2.5 模式扩展</h3><p><strong>简单工厂+配置文件解除耦合</strong></p><p>可以通过工厂模式+配置文件的方式解除工厂对象和产品对象的耦合。在工厂类中加载配置文件中的全类名，并创建对象进行存储，客户端如果需要对象，直接进行获取即可。</p><p>第一步：定义配置文件</p><p>为了演示方便，我们使用properties文件作为配置文件，名称为bean.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">american</span>=<span class="string">com.itheima.pattern.factory.config_factory.AmericanCoffee</span></span><br><span class="line"><span class="attr">latte</span>=<span class="string">com.itheima.pattern.factory.config_factory.LatteCoffee</span></span><br></pre></td></tr></table></figure><p>第二步：改进工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Coffee&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is = CoffeeFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p.load(is);</span><br><span class="line">            <span class="comment">//遍历Properties集合对象</span></span><br><span class="line">            Set&lt;Object&gt; keys = p.keySet();</span><br><span class="line">            <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">                <span class="comment">//根据键获取值（全类名）</span></span><br><span class="line">                String className = p.getProperty((String) key);</span><br><span class="line">                <span class="comment">//获取字节码对象</span></span><br><span class="line">                Class clazz = Class.forName(className);</span><br><span class="line">                Coffee obj = (Coffee) clazz.newInstance();</span><br><span class="line">                map.put((String)key,obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Coffee <span class="title">createCoffee</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态成员变量用来存储创建的对象（键存储的是名称，值存储的是对应的对象），而读取配置文件以及创建对象写在静态代码块中，目的就是只需要执行一次。</p><h3 id="4-2-6-JDK源码解析-Collection-iterator方法"><a href="#4-2-6-JDK源码解析-Collection-iterator方法" class="headerlink" title="4.2.6 JDK源码解析-Collection.iterator方法"></a>4.2.6 JDK源码解析-Collection.iterator方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;令狐冲&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;风清扬&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;任我行&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="comment">//使用迭代器遍历</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">            String ele = it.next();</span><br><span class="line">            System.out.println(ele);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对上面的代码大家应该很熟，使用迭代器遍历集合，获取集合中的元素。而单列集合获取迭代器的方法就使用到了工厂方法模式。我们看通过类图看看结构：</p><img src="/img/java/java设计模式/工厂模式/JDK源码解析.png" style="zoom:75%;" /><p>Collection接口是抽象工厂类，ArrayList是具体的工厂类；Iterator接口是抽象商品类，ArrayList类中的Iter内部类是具体的商品类。在具体的工厂类中iterator()方法创建具体的商品类的对象。</p><blockquote><p>另：</p><p>​    1,DateForamt类中的getInstance()方法使用的是工厂模式；</p><p>​    2,Calendar类中的getInstance()方法使用的是工厂模式；</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4，创建型模式&quot;&gt;&lt;a href=&quot;#4，创建型模式&quot; class=&quot;headerlink&quot; title=&quot;4，创建型模式&quot;&gt;&lt;/a&gt;4，创建型模式&lt;/h1&gt;&lt;h2 id=&quot;4-2-工厂模式&quot;&gt;&lt;a href=&quot;#4-2-工厂模式&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="java设计模式" scheme="http://example.com/categories/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java设计模式" scheme="http://example.com/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="工厂模式" scheme="http://example.com/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式--单例模式</title>
    <link href="http://example.com/2024/08/28/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2024/08/28/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-08-28T12:35:37.000Z</published>
    <updated>2024-08-28T12:56:19.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1，创建者模式-单例模式"><a href="#1，创建者模式-单例模式" class="headerlink" title="1，创建者模式-单例模式"></a>1，创建者模式-单例模式</h1><p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。</p><p>这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。</p><p>创建型模式分为：</p><ul><li>单例模式</li><li>工厂方法模式</li><li>抽象工程模式</li><li>原型模式</li><li>建造者模式</li></ul><h2 id="1-1-单例设计模式"><a href="#1-1-单例设计模式" class="headerlink" title="1.1 单例设计模式"></a>1.1 单例设计模式</h2><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><h3 id="1-1-1-单例模式的结构"><a href="#1-1-1-单例模式的结构" class="headerlink" title="1.1.1 单例模式的结构"></a>1.1.1 单例模式的结构</h3><p>单例模式的主要有以下角色：</p><ul><li>单例类。只能创建一个实例的类</li><li>访问类。使用单例类</li></ul><h3 id="1-1-2-单例模式的实现"><a href="#1-1-2-单例模式的实现" class="headerlink" title="1.1.2 单例模式的实现"></a>1.1.2 单例模式的实现</h3><blockquote><p>单例设计模式分类两种：</p><p>​    饿汉式：类加载就会导致该单实例对象被创建    </p><p>​    懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p></blockquote><ol><li><p>饿汉式-方式1（静态变量方式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式</span></span><br><span class="line"><span class="comment"> *      静态变量创建类的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在成员位置创建该类的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    该方式在成员位置声明Singleton类型的静态变量，并创建Singleton类的对象instance。instance对象是随着类的加载而创建的。如果该对象足够大的话，而一直没有使用就会造成内存的浪费。</p></li><li><p>饿汉式-方式2（静态代码块方式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 恶汉式</span></span><br><span class="line"><span class="comment"> *      在静态代码块中创建该类对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在成员位置创建该类的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    该方式在成员位置声明Singleton类型的静态变量，而对象的创建是在静态代码块中，也是对着类的加载而创建。所以和饿汉式的方式1基本上一样，当然该方式也存在内存浪费问题。</p></li><li><p>懒汉式-方式1（线程不安全）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式</span></span><br><span class="line"><span class="comment"> *  线程不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在成员位置创建该类的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    从上面代码我们可以看出该方式在成员位置声明Singleton类型的静态变量，并没有进行对象的赋值操作，那么什么时候赋值的呢？当调用getInstance()方法获取Singleton类的对象的时候才创建Singleton类的对象，这样就实现了懒加载的效果。但是，如果是多线程环境，会出现线程安全问题。</p></li><li><p>懒汉式-方式2（线程安全）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式</span></span><br><span class="line"><span class="comment"> *  线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在成员位置创建该类的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    该方式也实现了懒加载效果，同时又解决了线程安全问题。但是在getInstance()方法上添加了synchronized关键字，导致该方法的执行效果特别低。从上面代码我们可以看出，其实就是在初始化instance的时候才会出现线程安全问题，一旦初始化完成就不存在了。</p></li><li><p>懒汉式-方式3（双重检查锁）</p><p>再来讨论一下懒汉模式中加锁的问题，对于 <code>getInstance()</code> 方法来说，绝大部分的操作都是读操作，读操作是线程安全的，所以我们没必让每个线程必须持有锁才能调用该方法，我们需要调整加锁的时机。由此也产生了一种新的实现模式：双重检查锁模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重检查方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实例</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="comment">//抢到锁之后再次判断是否为null</span></span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重检查锁模式是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，上面的双重检测锁模式看上去完美无缺，其实是存在问题，在多线程的情况下，可能会出现空指针问题，出现问题的原因是JVM在实例化对象的时候会进行优化和指令重排序操作。</p><p>要解决双重检查锁模式带来空指针异常的问题，只需要使用 <code>volatile</code> 关键字, <code>volatile</code> 关键字可以保证可见性和有序性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重检查方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实际</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="comment">//抢到锁之后再次判断是否为空</span></span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">小结：</font></p><p>添加 <code>volatile</code> 关键字之后的双重检查锁模式是一种比较好的单例实现模式，能够保证在多线程的情况下线程安全也不会有性能问题。</p></li></ol><ol start="6"><li><p>懒汉式-方式4（静态内部类方式）</p><p>静态内部类单例模式中实例由内部类创建，由于 JVM 在加载外部类的过程中, 是不会加载静态内部类的, 只有内部类的属性/方法被调用时才会被加载, 并初始化其静态属性。静态属性由于被 <code>static</code> 修饰，保证只被实例化一次，并且严格保证实例化顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    第一次加载Singleton类时不会去初始化INSTANCE，只有第一次调用getInstance，虚拟机加载SingletonHolder</p><p>并初始化INSTANCE，这样不仅能确保线程安全，也能保证 Singleton 类的唯一性。</p><p><font color="red">小结：</font></p><p>​    静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。在没有加任何锁的情况下，保证了多线程下的安全，并且没有任何性能影响和空间的浪费。</p></li><li><p>枚举方式</p><p>枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一次，设计者充分的利用了枚举的这个特性来实现单例模式，枚举的写法非常简单，而且枚举类型是所用单例实现中唯一一种不会被破坏的单例实现模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    枚举方式属于恶汉式方式。</p></li></ol><h3 id="1-1-3-存在的问题"><a href="#1-1-3-存在的问题" class="headerlink" title="1.1.3 存在的问题"></a>1.1.3 存在的问题</h3><h4 id="1-1-3-1-问题演示"><a href="#1-1-3-1-问题演示" class="headerlink" title="1.1.3.1 问题演示"></a>1.1.3.1 问题演示</h4><p>破坏单例模式：</p><p>使上面定义的单例类（Singleton）可以创建多个对象，枚举方式除外。有两种方式，分别是序列化和反射。</p><ul><li><p>序列化反序列化</p><p><strong>Singleton类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//往文件中写对象</span></span><br><span class="line">        <span class="comment">//writeObject2File();</span></span><br><span class="line">        <span class="comment">//从文件中读取对象</span></span><br><span class="line">        Singleton s1 = readObjectFromFile();</span><br><span class="line">        Singleton s2 = readObjectFromFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断两个反序列化后的对象是否是同一个对象</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title">readObjectFromFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象输入流对象</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\Think\\Desktop\\a.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//第一个读取Singleton对象</span></span><br><span class="line">        Singleton instance = (Singleton) ois.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeObject2File</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取Singleton类的对象</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//创建对象输出流</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\Think\\Desktop\\a.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//将instance对象写出到文件中</span></span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码运行结果是<code>false</code>，表明序列化和反序列化已经破坏了单例设计模式。</p></blockquote></li><li><p>反射</p><p><strong>Singleton类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取Singleton类的字节码对象</span></span><br><span class="line">        Class clazz = Singleton.class;</span><br><span class="line">        <span class="comment">//获取Singleton类的私有无参构造方法对象</span></span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">//取消访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Singleton类的对象s1</span></span><br><span class="line">        Singleton s1 = (Singleton) constructor.newInstance();</span><br><span class="line">        <span class="comment">//创建Singleton类的对象s2</span></span><br><span class="line">        Singleton s2 = (Singleton) constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断通过反射创建的两个Singleton对象是否是同一个对象</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码运行结果是<code>false</code>，表明序列化和反序列化已经破坏了单例设计模式</p></blockquote></li></ul><blockquote><p><font color="red">注意：</font>枚举方式不会出现这两个问题。</p></blockquote><h4 id="1-1-3-2-问题的解决"><a href="#1-1-3-2-问题的解决" class="headerlink" title="1.1.3.2 问题的解决"></a>1.1.3.2 问题的解决</h4><ul><li><p>序列化、反序列方式破坏单例模式的解决方法</p><p>在Singleton类中添加<code>readResolve()</code>方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值，如果没有定义，则返回新new出来的对象。</p><p><strong>Singleton类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面是为了解决序列化反序列化破解单例模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码解析：</strong></p><p>ObjectInputStream类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// if nested read, passHandle contains handle of enclosing object</span></span><br><span class="line">    <span class="keyword">int</span> outerHandle = passHandle;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object obj = readObject0(<span class="keyword">false</span>);<span class="comment">//重点查看readObject0方法</span></span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readObject0</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> TC_OBJECT:</span><br><span class="line"><span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));<span class="comment">//重点查看readOrdinaryObject方法</span></span><br><span class="line">...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        depth--;</span><br><span class="line">        bin.setBlockDataMode(oldMode);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readOrdinaryObject</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//isInstantiable 返回true，执行 desc.newInstance()，通过反射创建新的单例类，</span></span><br><span class="line">    obj = desc.isInstantiable() ? desc.newInstance() : <span class="keyword">null</span>; </span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 在Singleton类中添加 readResolve 方法后 desc.hasReadResolveMethod() 方法执行结果为true</span></span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; handles.lookupException(passHandle) == <span class="keyword">null</span> &amp;&amp; desc.hasReadResolveMethod()) &#123;</span><br><span class="line">    <span class="comment">// 通过反射调用 Singleton 类中的 readResolve 方法，将返回值赋值给rep变量</span></span><br><span class="line">    <span class="comment">// 这样多次调用ObjectInputStream类中的readObject方法，继而就会调用我们定义的readResolve方法，所以返回的是同一个对象。</span></span><br><span class="line">    Object rep = desc.invokeReadResolve(obj);</span><br><span class="line">     ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>反射方式破解单例的解决方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           反射破解单例模式需要添加的代码</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">说明:</font></p><p>​    这种方式比较好理解。当通过反射方式调用构造方法进行创建创建时，直接抛异常。不运行此中操作。</p></li></ul><h3 id="1-1-4-JDK源码解析-Runtime类"><a href="#1-1-4-JDK源码解析-Runtime类" class="headerlink" title="1.1.4 JDK源码解析-Runtime类"></a>1.1.4 JDK源码解析-Runtime类</h3><p>Runtime类就是使用的单例设计模式。</p><ol><li><p>通过源代码查看使用的是哪儿种单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runtime</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Runtime currentRuntime = <span class="keyword">new</span> Runtime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the runtime object associated with the current Java application.</span></span><br><span class="line"><span class="comment">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance</span></span><br><span class="line"><span class="comment">     * methods and must be invoked with respect to the current runtime object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class="line"><span class="comment">     *          Java application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Don&#x27;t let anyone else instantiate this class */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Runtime</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面源代码中可以看出Runtime类使用的是恶汉式（静态属性）方式来实现单例模式的。</p></li><li><p>使用Runtime类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Runtime类对象</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回 Java 虚拟机中的内存总量。</span></span><br><span class="line">        System.out.println(runtime.totalMemory());</span><br><span class="line">        <span class="comment">//返回 Java 虚拟机试图使用的最大内存量。</span></span><br><span class="line">        System.out.println(runtime.maxMemory());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个新的进程执行指定的字符串命令，返回进程对象</span></span><br><span class="line">        Process process = runtime.exec(<span class="string">&quot;ipconfig&quot;</span>);</span><br><span class="line">        <span class="comment">//获取命令执行后的结果，通过输入流获取</span></span><br><span class="line">        InputStream inputStream = process.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>* <span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> b = inputStream.read(arr);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(arr,<span class="number">0</span>,b,<span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1，创建者模式-单例模式&quot;&gt;&lt;a href=&quot;#1，创建者模式-单例模式&quot; class=&quot;headerlink&quot; title=&quot;1，创建者模式-单例模式&quot;&gt;&lt;/a&gt;1，创建者模式-单例模式&lt;/h1&gt;&lt;p&gt;创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“</summary>
      
    
    
    
    <category term="java设计模式" scheme="http://example.com/categories/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java设计模式" scheme="http://example.com/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="单例模式" scheme="http://example.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式--设计模式原则</title>
    <link href="http://example.com/2024/08/28/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/"/>
    <id>http://example.com/2024/08/28/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/</id>
    <published>2024-08-28T12:31:25.000Z</published>
    <updated>2024-08-28T12:55:54.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1，设计模式概述"><a href="#1，设计模式概述" class="headerlink" title="1，设计模式概述"></a>1，设计模式概述</h1><h2 id="1-1-软件设计模式的产生背景"><a href="#1-1-软件设计模式的产生背景" class="headerlink" title="1.1 软件设计模式的产生背景"></a>1.1 软件设计模式的产生背景</h2><p>“设计模式”最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p><p>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任<code>克里斯托夫·亚历山大（Christopher Alexander）</code>在他的著作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p><p>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）著称。  </p><h2 id="1-2-软件设计模式的概念"><a href="#1-2-软件设计模式的概念" class="headerlink" title="1.2 软件设计模式的概念"></a>1.2 软件设计模式的概念</h2><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p><h2 id="1-3-学习设计模式的必要性"><a href="#1-3-学习设计模式的必要性" class="headerlink" title="1.3 学习设计模式的必要性"></a>1.3 学习设计模式的必要性</h2><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p><p>正确使用设计模式具有以下优点。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li></ul><h2 id="1-4-设计模式分类"><a href="#1-4-设计模式分类" class="headerlink" title="1.4 设计模式分类"></a>1.4 设计模式分类</h2><ul><li><p><strong>创建型模式</strong></p><p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p></li><li><p><strong>结构型模式</strong></p><p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p></li><li><p><strong>行为型模式</strong></p><p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p></li></ul><h1 id="2，UML图"><a href="#2，UML图" class="headerlink" title="2，UML图"></a>2，UML图</h1><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><p>UML 从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图。</p><h2 id="2-1-类图概述"><a href="#2-1-类图概述" class="headerlink" title="2.1 类图概述"></a>2.1 类图概述</h2><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p><h2 id="2-2-类图的作用"><a href="#2-2-类图的作用" class="headerlink" title="2.2 类图的作用"></a>2.2 类图的作用</h2><ul><li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li><li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li></ul><h2 id="2-3-类图表示法"><a href="#2-3-类图表示法" class="headerlink" title="2.3 类图表示法"></a>2.3 类图表示法</h2><h3 id="2-3-1-类的表示方式"><a href="#2-3-1-类的表示方式" class="headerlink" title="2.3.1 类的表示方式"></a>2.3.1 类的表示方式</h3><p>在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个属性，以及work()方法。 </p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Employee.jpg"></p><p>属性/方法名称前加的加号和减号表示了这个属性/方法的可见性，UML类图中表示可见性的符号有三种：</p><ul><li><p>+：表示public</p></li><li><p>-：表示private</p></li><li><p>#：表示protected</p></li></ul><p>属性的完整表示方式是： <strong>可见性  名称 ：类型 [ = 缺省值]</strong>  </p><p>方法的完整表示方式是： <strong>可见性  名称(参数列表) [ ： 返回类型]</strong></p><blockquote><p>注意：</p><p>​    1，中括号中的内容表示是可选的</p><p>​    2，也有将类型放在变量名前面，返回值类型放在方法名前面</p></blockquote><p><strong>举个栗子：</strong></p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/demo.png"></p><p>上图Demo类定义了三个方法：</p><ul><li>method()方法：修饰符为public，没有参数，没有返回值。</li><li>method1()方法：修饰符为private，没有参数，返回值类型为String。</li><li>method2()方法：修饰符为protected，接收两个参数，第一个参数类型为int，第二个参数类型为String，返回值类型是int。</li></ul><h3 id="2-3-2-类与类之间关系的表示方式"><a href="#2-3-2-类与类之间关系的表示方式" class="headerlink" title="2.3.2 类与类之间关系的表示方式"></a>2.3.2 类与类之间关系的表示方式</h3><h4 id="2-3-2-1-关联关系"><a href="#2-3-2-1-关联关系" class="headerlink" title="2.3.2.1 关联关系"></a>2.3.2.1 关联关系</h4><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p><p>关联又可以分为单向关联，双向关联，自关联。</p><p><strong>1，单向关联</strong></p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/customer_address.png"></p><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p><p><strong>2，双向关联</strong></p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/customer_product.png"></p><p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p><p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List&lt;Product&gt;，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p><p><strong>3，自关联</strong></p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/node.png"></p><p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p><h4 id="2-3-2-2-聚合关系"><a href="#2-3-2-2-聚合关系" class="headerlink" title="2.3.2.2 聚合关系"></a>2.3.2.2 聚合关系</h4><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。下图所示是大学和教师的关系图：</p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20191229173422328.png"></p><h4 id="2-3-2-3-组合关系"><a href="#2-3-2-3-组合关系" class="headerlink" title="2.3.2.3 组合关系"></a>2.3.2.3 组合关系</h4><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。下图所示是头和嘴的关系图：</p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20191229173455149.png"></p><h4 id="2-3-2-4-依赖关系"><a href="#2-3-2-4-依赖关系" class="headerlink" title="2.3.2.4 依赖关系"></a>2.3.2.4 依赖关系</h4><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机和汽车的关系图，司机驾驶汽车：</p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20191229173518926.png"></p><h4 id="2-3-2-5-继承关系"><a href="#2-3-2-5-继承关系" class="headerlink" title="2.3.2.5 继承关系"></a>2.3.2.5 继承关系</h4><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20191229173539838.png"></p><h4 id="2-3-2-6-实现关系"><a href="#2-3-2-6-实现关系" class="headerlink" title="2.3.2.6 实现关系"></a>2.3.2.6 实现关系</h4><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图 9 所示。</p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20191229173554296.png"></p><h1 id="3，软件设计原则"><a href="#3，软件设计原则" class="headerlink" title="3，软件设计原则"></a>3，软件设计原则</h1><p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p><h2 id="3-1-开闭原则"><a href="#3-1-开闭原则" class="headerlink" title="3.1 开闭原则"></a>3.1 开闭原则</h2><p><strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。</p><p>想要达到这样的效果，我们需要使用接口和抽象类。</p><p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p><p>下面以 <code>搜狗输入法</code> 的皮肤为例介绍开闭原则的应用。</p><p>【例】<code>搜狗输入法</code> 的皮肤设计。</p><p>分析：<code>搜狗输入法</code> 的皮肤是输入法背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜爱更换自己的输入法的皮肤，也可以从网上下载新的皮肤。这些皮肤有共同的特点，可以为其定义一个抽象类（AbstractSkin），而每个具体的皮肤（DefaultSpecificSkin和HeimaSpecificSkin）是其子类。用户窗体可以根据需要选择或者增加新的主题，而不需要修改原代码，所以它是满足开闭原则的。</p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/open-close.png"></p><h2 id="3-2-里氏代换原则"><a href="#3-2-里氏代换原则" class="headerlink" title="3.2 里氏代换原则"></a>3.2 里氏代换原则</h2><p>里氏代换原则是面向对象设计的基本原则之一。</p><p>里氏代换原则：任何基类可以出现的地方，子类一定可以出现。通俗理解：子类可以扩展父类的功能，但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p><p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><p>下面看一个里氏替换原则中经典的一个例子</p><p>【例】正方形不是长方形。</p><p>在数学领域里，正方形毫无疑问是长方形，它是一个长宽相等的长方形。所以，我们开发的一个与几何图形相关的软件系统，就可以顺理成章的让正方形继承自长方形。</p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%AD%A3%E6%96%B9%E5%BD%A2%E4%B8%8D%E6%98%AF%E9%95%BF%E6%96%B9%E5%BD%A2.png"></p><p>代码如下：</p><p><strong>长方形类（Rectangle）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正方形（Square）：</strong></p><p>由于正方形的长和宽相同，所以在方法setLength和setWidth中，对长度和宽度都需要赋相同值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setLength(width);</span><br><span class="line">        <span class="keyword">super</span>.setWidth(width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setLength(length);</span><br><span class="line">        <span class="keyword">super</span>.setWidth(length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类RectangleDemo是我们的软件系统中的一个组件，它有一个resize方法依赖基类Rectangle，resize方法是RectandleDemo类中的一个方法，用来实现宽度逐渐增长的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RectangleDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Rectangle rectangle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (rectangle.getWidth() &lt;= rectangle.getLength()) &#123;</span><br><span class="line">            rectangle.setWidth(rectangle.getWidth() + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印长方形的长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLengthAndWidth</span><span class="params">(Rectangle rectangle)</span> </span>&#123;</span><br><span class="line">        System.out.println(rectangle.getLength());</span><br><span class="line">        System.out.println(rectangle.getWidth());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">        rectangle.setLength(<span class="number">20</span>);</span><br><span class="line">        rectangle.setWidth(<span class="number">10</span>);</span><br><span class="line">        resize(rectangle);</span><br><span class="line">        printLengthAndWidth(rectangle);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Rectangle rectangle1 = <span class="keyword">new</span> Square();</span><br><span class="line">        rectangle1.setLength(<span class="number">10</span>);</span><br><span class="line">        resize(rectangle1);</span><br><span class="line">        printLengthAndWidth(rectangle1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们运行一下这段代码就会发现，假如我们把一个普通长方形作为参数传入resize方法，就会看到长方形宽度逐渐增长的效果，当宽度大于长度,代码就会停止，这种行为的结果符合我们的预期；假如我们再把一个正方形作为参数传入resize方法后，就会看到正方形的宽度和长度都在不断增长，代码会一直运行下去，直至系统产生溢出错误。所以，普通的长方形是适合这段代码的，正方形不适合。<br>我们得出结论：在resize方法中，Rectangle类型的参数是不能被Square类型的参数所代替，如果进行了替换就得不到预期结果。因此，Square类和Rectangle类之间的继承关系违反了里氏代换原则，它们之间的继承关系不成立，正方形不是长方形。</p><p>如何改进呢？此时我们需要重新设计他们之间的关系。抽象出来一个四边形接口(Quadrilateral)，让Rectangle类和Square类实现Quadrilateral接口</p><img src="/img/java/java设计模式/正方形不是长方形改进.png" style="zoom:80%;" /><h2 id="3-3-依赖倒转原则"><a href="#3-3-依赖倒转原则" class="headerlink" title="3.3 依赖倒转原则"></a>3.3 依赖倒转原则</h2><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p><p>下面看一个例子来理解依赖倒转原则</p><p>【例】组装电脑</p><p>现要组装一台电脑，需要配件cpu，硬盘，内存条。只有这些配置都有了，计算机才能正常的运行。选择cpu有很多选择，如Intel，AMD等，硬盘可以选择希捷，西数等，内存条可以选择金士顿，海盗船等。</p><p><strong>类图如下：</strong></p><img src="/img/java/java设计模式/依赖倒转原则.png" style="zoom:80%;" /><p>代码如下：</p><p><strong>希捷硬盘类（XiJieHardDisk）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiJieHardDisk</span> <span class="keyword">implements</span> <span class="title">HardDisk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷硬盘存储数据&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷希捷硬盘取数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Intel处理器（IntelCpu）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntelCpu</span> <span class="keyword">implements</span> <span class="title">Cpu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Intel处理器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>金士顿内存条（KingstonMemory）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KingstonMemory</span> <span class="keyword">implements</span> <span class="title">Memory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用金士顿作为内存条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>电脑（Computer）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XiJieHardDisk hardDisk;</span><br><span class="line">    <span class="keyword">private</span> IntelCpu cpu;</span><br><span class="line">    <span class="keyword">private</span> KingstonMemory memory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IntelCpu <span class="title">getCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(IntelCpu cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KingstonMemory <span class="title">getMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemory</span><span class="params">(KingstonMemory memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> XiJieHardDisk <span class="title">getHardDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHardDisk</span><span class="params">(XiJieHardDisk hardDisk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hardDisk = hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机工作&quot;</span>);</span><br><span class="line">        cpu.run();</span><br><span class="line">        memory.save();</span><br><span class="line">        String data = hardDisk.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;从硬盘中获取的数据为：&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类（TestComputer）：</strong></p><p>测试类用来组装电脑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComputer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        computer.setHardDisk(<span class="keyword">new</span> XiJieHardDisk());</span><br><span class="line">        computer.setCpu(<span class="keyword">new</span> IntelCpu());</span><br><span class="line">        computer.setMemory(<span class="keyword">new</span> KingstonMemory());</span><br><span class="line"></span><br><span class="line">        computer.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以看到已经组装了一台电脑，但是似乎组装的电脑的cpu只能是Intel的，内存条只能是金士顿的，硬盘只能是希捷的，这对用户肯定是不友好的，用户有了机箱肯定是想按照自己的喜好，选择自己喜欢的配件。</p><p>根据依赖倒转原则进行改进：</p><p>代码我们只需要修改Computer类，让Computer类依赖抽象（各个配件的接口），而不是依赖于各个组件具体的实现类。</p><p><strong>类图如下：</strong></p><img src="/img/java/java设计模式/依赖倒转原则改进.png" alt="image-20191229173554296" style="zoom:70%;" /><p><strong>电脑（Computer）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HardDisk hardDisk;</span><br><span class="line">    <span class="keyword">private</span> Cpu cpu;</span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HardDisk <span class="title">getHardDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHardDisk</span><span class="params">(HardDisk hardDisk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hardDisk = hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cpu <span class="title">getCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(Cpu cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memory <span class="title">getMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemory</span><span class="params">(Memory memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p><h2 id="3-4-接口隔离原则"><a href="#3-4-接口隔离原则" class="headerlink" title="3.4 接口隔离原则"></a>3.4 接口隔离原则</h2><p>客户端不应该被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。</p><p>下面看一个例子来理解接口隔离原则</p><p>【例】安全门案例</p><p>我们需要创建一个<code>黑马</code>品牌的安全门，该安全门具有防火、防水、防盗的功能。可以将防火，防水，防盗功能提取成一个接口，形成一套规范。类图如下：</p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99.png"></p><p>上面的设计我们发现了它存在的问题，黑马品牌的安全门具有防盗，防水，防火的功能。现在如果我们还需要再创建一个传智品牌的安全门，而该安全门只具有防盗、防水功能呢？很显然如果实现SafetyDoor接口就违背了接口隔离原则，那么我们如何进行修改呢？看如下类图：</p><p><img src="/img/java/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%991.png"></p><p>代码如下：</p><p><strong>AntiTheft（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AntiTheft</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">antiTheft</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Fireproof（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fireproof</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fireproof</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Waterproof（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Waterproof</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">waterproof</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HeiMaSafetyDoor（类）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeiMaSafetyDoor</span> <span class="keyword">implements</span> <span class="title">AntiTheft</span>,<span class="title">Fireproof</span>,<span class="title">Waterproof</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">antiTheft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防盗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireproof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waterproof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ItcastSafetyDoor（类）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItcastSafetyDoor</span> <span class="keyword">implements</span> <span class="title">AntiTheft</span>,<span class="title">Fireproof</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">antiTheft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防盗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireproof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-迪米特法则"><a href="#3-5-迪米特法则" class="headerlink" title="3.5 迪米特法则"></a>3.5 迪米特法则</h2><p>迪米特法则又叫最少知识原则。</p><p>只和你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。</p><p>其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p><p>下面看一个例子来理解迪米特法则</p><p>【例】明星与经纪人的关系实例</p><p>明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如和粉丝的见面会，和媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则。</p><p>类图如下：</p><img src="/img/java/java设计模式/迪米特法则.png" alt="image-20191229173554296" style="zoom:80%;" /><p>代码如下：</p><p><strong>明星类（Star）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Star</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>粉丝类（Fans）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fans</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fans</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>媒体公司类（Company）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Company</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经纪人类（Agent）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Star star;</span><br><span class="line">    <span class="keyword">private</span> Fans fans;</span><br><span class="line">    <span class="keyword">private</span> Company company;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStar</span><span class="params">(Star star)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFans</span><span class="params">(Fans fans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fans = fans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">meeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(fans.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;见面了。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(company.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;洽淡业务。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-合成复用原则"><a href="#3-6-合成复用原则" class="headerlink" title="3.6 合成复用原则"></a>3.6 合成复用原则</h2><p>合成复用原则是指：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</p><p>通常类的复用分为继承复用和合成复用两种。</p><p>继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</p><ol><li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</li><li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li><li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</li></ol><p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</p><ol><li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</li><li>对象间的耦合度低。可以在类的成员位置声明抽象。</li><li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</li></ol><p>下面看一个例子来理解合成复用原则</p><p>【例】汽车分类管理程序</p><p>汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多。类图如下： </p><img src="/img/java/java设计模式/合成复用原则.png" alt="image-20191229173554296" style="zoom:80%;" /><p>从上面类图我们可以看到使用继承复用产生了很多子类，如果现在又有新的动力源或者新的颜色的话，就需要再定义新的类。我们试着将继承复用改为聚合复用看一下。</p><img src="/img/java/java设计模式/合成复用原则1.png" alt="image-20191229173554296" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1，设计模式概述&quot;&gt;&lt;a href=&quot;#1，设计模式概述&quot; class=&quot;headerlink&quot; title=&quot;1，设计模式概述&quot;&gt;&lt;/a&gt;1，设计模式概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-软件设计模式的产生背景&quot;&gt;&lt;a href=&quot;#1-1-软件设计模式的产生背</summary>
      
    
    
    
    <category term="java设计模式" scheme="http://example.com/categories/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java设计模式" scheme="http://example.com/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="设计模式原则" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Yolov5之无人机堤坝检测</title>
    <link href="http://example.com/2022/08/20/Yolov5%E4%B9%8B%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2022/08/20/Yolov5%E4%B9%8B%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B/</id>
    <published>2022-08-20T13:42:52.000Z</published>
    <updated>2022-12-11T02:30:16.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-yolov5环境配置："><a href="#1-yolov5环境配置：" class="headerlink" title="1 yolov5环境配置："></a>1 yolov5环境配置：</h2><p>（参考我前面的博客）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2021/10/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E7%9A%84ubuntu%E9%83%A8%E7%BD%B2yolov5-5-0/</span></span><br></pre></td></tr></table></figure><h2 id="2-数据集的制作"><a href="#2-数据集的制作" class="headerlink" title="2 数据集的制作"></a>2 数据集的制作</h2><p>(采用vcat工具，直接可以在视频上进行标注)（参考我前面的博客），</p><p>ps：配置vcat服务花费时间比较长，vcat这个工具不同于labelImg，后者是exe执行文件，直接就可以标注图片，但是vcat类似于面向服务编程，要安装docker，docker编排器拉取镜像，运行容器等等，最后将vcat服务跑起来，在浏览器访问，标注。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2022/06/08/vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/%E5%A0%A4%E5%9D%9D%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8Eyolov%E7%9B%AE%E5%BD%95%E5%85%B3%E7%B3%BB.png" alt="堤坝数据集与yolov目录关系"></p><h2 id="3-yolov5s训练自定义数据集方法"><a href="#3-yolov5s训练自定义数据集方法" class="headerlink" title="3 yolov5s训练自定义数据集方法"></a>3 yolov5s训练自定义数据集方法</h2><p>参考：（参考我前面的博客）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2021/11/13/yolov5-customData/</span></span><br></pre></td></tr></table></figure><h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4 效果"></a>4 效果</h2><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/frame_004750.PNG" alt="frame_004750"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/frame_004375.PNG" alt="frame_004375"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/frame_004650.PNG" alt="frame_004650"></p><p>可以看到效果并不算很好，原因主要是数据集太少了，别人训练一个模型需要几个G的数据集，我这只有几十兆</p><p>解决方法：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">数据增强，网上找方法，接下来的工作</span></span><br><span class="line"><span class="attr">2</span> <span class="string">想办法拍更多的视频，继续标注，构建更加庞大的数据集</span></span><br><span class="line"><span class="attr">3</span> <span class="string">拍出来的几乎是正常的堤坝，标注时几乎没有几张图是可以作为有问题的堤坝标签</span></span><br><span class="line"><span class="attr">4</span> <span class="string">除了拍多一点照片，还需要不同类型的堤坝照片</span></span><br><span class="line"><span class="attr">5</span> <span class="string">有了不同类型堤坝的照片，训练时注意要先打乱数据集的顺序，有助于更好的收敛</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-yolov5环境配置：&quot;&gt;&lt;a href=&quot;#1-yolov5环境配置：&quot; class=&quot;headerlink&quot; title=&quot;1 yolov5环境配置：&quot;&gt;&lt;/a&gt;1 yolov5环境配置：&lt;/h2&gt;&lt;p&gt;（参考我前面的博客）&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="yolov5" scheme="http://example.com/tags/yolov5/"/>
    
    <category term="自定义数据模型" scheme="http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Vcat标注工具的安装和使用</title>
    <link href="http://example.com/2022/08/19/Vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/08/19/Vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2022-08-19T13:46:33.000Z</published>
    <updated>2022-12-11T02:30:16.348Z</updated>
    
    <content type="html"><![CDATA[<p>前面用yolov5训练自定义的数据集（病虫害识别）的时候，用的是labellmg这款软件，但是这款软件不能处理视频的标注，最近张老师要我搞无人机堤坝检测项目，因此今天就来写写在视频上进行标注，制作数据集更高级一点的标注工具：vcat。话不多说，赶紧上车！</p><h1 id="1-Ubuntu-18-04上安装vcat"><a href="#1-Ubuntu-18-04上安装vcat" class="headerlink" title="1 Ubuntu 18.04上安装vcat"></a>1 Ubuntu 18.04上安装vcat</h1><p>参考教程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//openvinotoolkit.github.io/cvat/docs/administration/basics/installation/</span></span><br></pre></td></tr></table></figure><h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1 安装docker"></a>1 安装docker</h2><p>分别执行如下命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get --no-install-recommends install -y \</span></span><br><span class="line"><span class="string">  apt-transport-https \</span></span><br><span class="line"><span class="string">  ca-certificates \</span></span><br><span class="line"><span class="string">  curl \</span></span><br><span class="line"><span class="string">  gnupg-agent \</span></span><br><span class="line"><span class="string">  software-properties-common</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">curl</span> <span class="string">-fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">add-apt-repository \</span></span><br><span class="line"><span class="string">  &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  $(lsb_release -cs) \</span></span><br><span class="line"><span class="string">  stable&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get --no-install-recommends install -y docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure><p>分组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>注销并重新登录（或重新启动），以便重新评估您的组成员身份。之后，您可以在终端窗口中键入<code>groups</code>命令并检查<code>docker</code>组是否在其输出中。</p><h2 id="2-安装-docker-compose（1-19-0-或更高版本）"><a href="#2-安装-docker-compose（1-19-0-或更高版本）" class="headerlink" title="2 安装 docker-compose（1.19.0 或更高版本）"></a>2 安装 docker-compose（1.19.0 或更高版本）</h2><p>Compose 是一个用于定义和运行多容器 docker 应用程序的工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --no-install-recommends install -y python3-pip python3-setuptools</span><br><span class="line">sudo python3 -m pip install setuptools docker-compose</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jason@jason-virtual-machine:~$ pwd</span><br><span class="line">/home/jason</span><br></pre></td></tr></table></figure><h2 id="3-克隆cvat源代码"><a href="#3-克隆cvat源代码" class="headerlink" title="3 克隆cvat源代码"></a>3 克隆cvat源代码</h2><p>在/home/jason下，从 <a href="https://github.com/opencv/cvat">GitHub 存储</a><em>库克隆 CVAT</em>源代码。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt-get --no-install-recommends install -y git</span></span><br><span class="line"><span class="attr">git</span> <span class="string">clone https://github.com/opencv/cvat</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">cvat</span></span><br></pre></td></tr></table></figure><p>在上面第二步克隆时发生如下错误,折腾了一下，发现还是没解决，就不折腾了，直接使用手动下载zip，然后解压缩到当前目录的cvat目录下！</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Failed</span> <span class="string">to connect to github.com port 443: 拒绝连接</span></span><br></pre></td></tr></table></figure><p>要通过网络或通过其他系统访问 CVAT，请导出<code>CVAT_HOST</code>环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CVAT_HOST=your-ip-address</span><br><span class="line">如：</span><br><span class="line"><span class="built_in">export</span> CVAT_HOST=192.168.1.138</span><br></pre></td></tr></table></figure><h2 id="4-运行-docker-容器。"><a href="#4-运行-docker-容器。" class="headerlink" title="4 运行 docker 容器。"></a>4 运行 docker 容器。</h2><p>前面下载了docker，还下载安装了docker-compose(容器编排)，这里就要利用容器编排来下载并且运行vcat所需要的镜像啦：从 DockerHub 下载最新的 CVAT 版本和其他所需的镜像（如 postgres、redis 等）并创建容器需要一些时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>但是好奇怪，发生如下报错，提示docker-compose 命令找不到，命名上面已经安装了docker-compose了</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jason@jason-virtual-machine</span>:<span class="string">~/cvat$ docker-compose up -d</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Command</span> <span class="string">&#x27;docker-compose&#x27; not found, but can be installed with:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">snap install docker          # version 20.10.14, or</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt  install docker-compose</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行sudo snap install docker之后再去执行docker-compose up -d命令，就可以将cvat相关镜像容器拉取并且运行起来</p><p>拉取并运行成功，执行 docker ps 命令可以看到正在运行的容器：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608151329919.png" alt="image-20220608151329919"></p><p>注意，这需要花费很长时间，因为拉取的几个镜像都很大，超1个G的镜像大小！</p><h2 id="5-创建一个超级用户"><a href="#5-创建一个超级用户" class="headerlink" title="5 创建一个超级用户"></a>5 创建一个超级用户</h2><p>超级用户可以使用管理面板为用户分配正确的组。请使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it cvat bash -ic &#x27;python3 ~/manage.py createsuperuser&#x27;</span><br></pre></td></tr></table></figure><p>需要输入超级用户的用户名以及邮箱，用户密码。邮箱输入自己的qq邮箱就好。用户名跟密码都是自己定的，比如admin，root分别是我的用户名跟密码。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608152304339.png" alt="image-20220608152304339"></p><p>到此为止，已经将cvat安装运行起来了</p><h2 id="6-访问vcat服务"><a href="#6-访问vcat服务" class="headerlink" title="6 访问vcat服务"></a>6 访问vcat服务</h2><p>vcat服务只支持谷歌浏览器访问，因此需要安装谷歌浏览器，当然，由于上面已经执行了命令：export CVAT_HOST=your-ip-address，因此，在ubuntu宿主机的windows系统上的谷歌浏览器也能访问ubuntu的cvat服务。刚开始浏览器访问：<a href="http://192.168.1.138:8080/%EF%BC%8C%E4%BC%9A%E6%8F%90%E7%A4%BA%E4%BD%A0%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%EF%BC%8C%E7%94%A8%E4%B8%8A%E9%9D%A2%E9%85%8D%E7%BD%AE%E7%9A%84%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E8%B7%9F%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E5%B0%B1%E5%A5%BD%E5%95%A6%E3%80%82">http://192.168.1.138:8080/，会提示你进行登录，用上面配置的超级用户的用户名跟密码登录就好啦。</a></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608155602684.png" alt="image-20220608155602684"></p><p>登录成功后显示如下页面</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608152905908.png" alt="image-20220608152905908"></p><p>当然，你也可以在ubuntu上安装谷歌浏览器，直接在ubuntu谷歌浏览器输入：<a href="http://127.0.0.1:8080/%E6%9D%A5%E8%AE%BF%E9%97%AEvcat%E6%9C%8D%E5%8A%A1%E3%80%82">http://127.0.0.1:8080/来访问vcat服务。</a></p><p>安装方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo apt-get -f install</span><br><span class="line"></span><br><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p>执行完后就可以在应用中找到,打开谷歌浏览器，将其添加到收藏夹就好啦。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608155111313.png" alt="image-20220608155111313"></p><h1 id="2-vcat服务标注工具的使用"><a href="#2-vcat服务标注工具的使用" class="headerlink" title="2 vcat服务标注工具的使用"></a>2 vcat服务标注工具的使用</h1><p>参考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/ZHUO__zhuo/article/details/125068660</span></span><br></pre></td></tr></table></figure><p>总结步骤为：</p><h2 id="1-开启cvat服务"><a href="#1-开启cvat服务" class="headerlink" title="1 开启cvat服务"></a>1 开启cvat服务</h2><p>ubuntu上开启cvat服务，然后windows登录进入cvat服务，然后新建任务</p><h2 id="2-对新任务进行设置"><a href="#2-对新任务进行设置" class="headerlink" title="2 对新任务进行设置"></a>2 对新任务进行设置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">任务名，</span></span><br><span class="line"><span class="attr">2</span> <span class="string">工程名，</span></span><br><span class="line"><span class="attr">3</span> <span class="string">添加标签</span></span><br><span class="line"><span class="attr">4</span> <span class="string">选择标注数据源（我这里是直接拖拽windows上的视频到浏览器中）</span></span><br><span class="line"><span class="attr">5</span> <span class="string">高级配置，我这里高级配置只设置了每隔25帧标注一次，起始帧</span></span><br><span class="line"><span class="attr">然后点击submit，任务就创建成功了。</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608170856792.png" alt="image-20220608170856792"></p><h2 id="3-标注"><a href="#3-标注" class="headerlink" title="3 标注"></a>3 标注</h2><p>点击相应Job就可以进行标注了</p><p>标注时点击左侧栏，如下图，点击shape就可以在图中进行标注了，然后可以选择标签类型，上下帧切换等，最好每画一个框都保存一次。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608220759657.png" alt="image-20220608220759657"></p><p>常用的快捷键，加快标注速度：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">保存：</span> <span class="string">Ctrl + S</span></span><br><span class="line"><span class="meta">删除：</span> <span class="string">Delete</span></span><br><span class="line"><span class="attr">缩放：鼠标滚轴，往上放大，向下缩小</span></span><br><span class="line"><span class="attr">拖动：鼠标左键点击并拖动图片，调整位置</span></span><br><span class="line"><span class="attr">下一帧：F</span></span><br><span class="line"><span class="attr">上一帧：D</span></span><br><span class="line"><span class="meta">向后跳十张</span>: <span class="string">Shift+Ctrl + V</span></span><br><span class="line"><span class="meta">向前跳十张</span>: <span class="string">Shift+Ctrl + C</span></span><br><span class="line"><span class="meta">复制框：Ctrl</span> <span class="string">+ C</span></span><br><span class="line"><span class="meta">粘贴框：Ctrl</span> <span class="string">+ V</span></span><br><span class="line"><span class="attr">重复上一次标注框参数：N，比如连续标一类头框，那么每次重复标时按N可以直接标下一个头框</span></span><br><span class="line"><span class="meta">对选定对象连续标注接下来所有帧内此对象：Ctrl</span> <span class="string">+ B</span></span><br><span class="line"><span class="attr">转换标签：Ctrl+(0..9)</span></span><br></pre></td></tr></table></figure><h2 id="4-导出："><a href="#4-导出：" class="headerlink" title="4 导出："></a>4 导出：</h2><p>导出时选择相应类型，然后下载为zip文件。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608222913963.png" alt="image-20220608222913963"></p><p>如下图，选择yolo 1.1 类型，下载的文件就是png的图片跟txt标注文件。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608222930991.png" alt="image-20220608222930991"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/1654745537(1).jpg" alt="1654745537(/img/深度学习/cvat/1654745537(1).jpg)"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608223240874.png" alt="image-20220608223240874"></p><h2 id="5-注意："><a href="#5-注意：" class="headerlink" title="5  注意："></a>5  注意：</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">导出文件中，文件名就是原视频的第几帧，而网站中的当前帧就是提取后的帧的第几帧。</span></span><br><span class="line"><span class="attr">2</span> <span class="string">我们在创建任务时，设置的隔几帧标注一次，这个挺重要，如果设置的太低，那么很多图片几乎都是一样的</span></span><br><span class="line"><span class="attr">设置的太高，那么又容易错过一些数据集，因此看原视频本身的画面切换速度而定吧</span></span><br><span class="line"><span class="attr">3</span> <span class="string">保存时，会将所有的帧都保存下来，就算没有进行方框标注的帧也会保存下来（图片+txt标注文件）</span></span><br><span class="line"><span class="attr">如果原视频拍摄的比较多额外内容的话，保存下来的数据集可能会比较杂，这点要注意</span></span><br><span class="line"><span class="attr">确实比较杂时最后标注时记下来标注过的帧是第几帧，直接在导出保存的文件中，将我们标注过的数据集提取出来</span></span><br><span class="line"><span class="attr">这样子的数据集才比较纯净。</span></span><br><span class="line"><span class="attr">4</span> <span class="string">网上还看到一些数据增强方式，将导出下载的数据集再次进行增强，能多出六倍的数据集，这里读者可以自行测试一下</span></span><br><span class="line"><span class="attr">5</span> <span class="string">将标注过的数据集再次倒进来，再次继续标注，完善某些帧的标注，这里也请读者自己自行测试吧。</span></span><br></pre></td></tr></table></figure><h2 id="推荐阅读："><a href="#推荐阅读：" class="headerlink" title="推荐阅读："></a>推荐阅读：</h2><p>yolov5+vcat标注工具结合来训练自定义数据教程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.51cto.com/u_13565704/5136654</span></span><br></pre></td></tr></table></figure><p>常用数据标注工具：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//baijiahao.baidu.com/s?id=1727327620467031481&amp;wfr=spider&amp;for=pc</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面用yolov5训练自定义的数据集（病虫害识别）的时候，用的是labellmg这款软件，但是这款软件不能处理视频的标注，最近张老师要我搞无人机堤坝检测项目，因此今天就来写写在视频上进行标注，制作数据集更高级一点的标注工具：vcat。话不多说，赶紧上车！&lt;/p&gt;
&lt;h1 i</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="vcat" scheme="http://example.com/tags/vcat/"/>
    
  </entry>
  
  <entry>
    <title>windows中安装多个nodejs</title>
    <link href="http://example.com/2022/08/19/windows%E4%B8%AD%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAnodejs/"/>
    <id>http://example.com/2022/08/19/windows%E4%B8%AD%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAnodejs/</id>
    <published>2022-08-19T13:38:16.000Z</published>
    <updated>2022-12-11T02:30:16.646Z</updated>
    
    <content type="html"><![CDATA[<p>搞elasticsearch 需要用到kibana 的可视化操作，但是需要下载对应的nodejs版本，但原来用作hexo博客的nodejs也需要维护一个nodejs版本，因此使用nvm来同时安装并且随意切换nodejs版本！</p><h3 id="1-下载nvm"><a href="#1-下载nvm" class="headerlink" title="1.下载nvm"></a>1.下载nvm</h3><p>下载地址：（选择下载<a href="https://github.com/coreybutler/nvm-windows/releases/download/1.1.9/nvm-setup.exe">nvm-setup.exe</a>）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//github.com/coreybutler/nvm-windows/releases</span></span><br></pre></td></tr></table></figure><p>注意：安装前，这里有一点需要注意，如果以前安装过node，需要先卸载(卸载方法就是像普通软件那样卸载就好啦），并且要把目录清理干净删除下面2个文件夹：C:\Program Files\nodejs和 C:\Users\AppData\Roaming\npm</p><h3 id="2-nvm安装目录"><a href="#2-nvm安装目录" class="headerlink" title="2 nvm安装目录"></a>2 nvm安装目录</h3><p><img src="https://img-blog.csdnimg.cn/20210317172150617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgxNjMwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-nodejs-安装目录"><a href="#3-nodejs-安装目录" class="headerlink" title="3 nodejs 安装目录"></a>3 nodejs 安装目录</h3><p>（利用nvm下载的nodejs目录），这里上下两个路径都不要有特殊字符以及空格以及中文，而且<strong>原路径要存在</strong>！！！</p><p><img src="https://img-blog.csdnimg.cn/20210317172221993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgxNjMwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-查看当前已经安装的nodejs的版本"><a href="#4-查看当前已经安装的nodejs的版本" class="headerlink" title="4 查看当前已经安装的nodejs的版本"></a>4 查看当前已经安装的nodejs的版本</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt;nvm list</span></span><br><span class="line"><span class="attr">No</span> <span class="string">installations recognized.</span></span><br></pre></td></tr></table></figure><p>因为是第一次安装，所以并没有安装任何版本的。</p><h3 id="5-配置淘宝镜像源："><a href="#5-配置淘宝镜像源：" class="headerlink" title="5 配置淘宝镜像源："></a>5 配置淘宝镜像源：</h3><p>在你nvm-windows安装的目录下找到settings.txt文件，打开后加上</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node_mirror</span>: <span class="string">https://npm.taobao.org/mirrors/node/</span></span><br><span class="line"><span class="attr">npm_mirror</span>: <span class="string">https://npm.taobao.org/mirrors/npm/</span></span><br></pre></td></tr></table></figure><h5 id="5-查看可以安装的nodejs版本"><a href="#5-查看可以安装的nodejs版本" class="headerlink" title="5 查看可以安装的nodejs版本"></a>5 查看可以安装的nodejs版本</h5><p><img src="https://img-blog.csdnimg.cn/20210317172612896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgxNjMwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-安装制定版本的node"><a href="#6-安装制定版本的node" class="headerlink" title="6 安装制定版本的node"></a>6 安装制定版本的node</h3><p>这里安装了8.10.0和15.10.0两个版本</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">//V5.6.0</span></span><br><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt;nvm install 8.10.0</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">node.js version 8.10.0 (64-bit)...</span></span><br><span class="line"><span class="attr">Complete</span></span><br><span class="line"><span class="attr">Creating</span> <span class="string">E:\worksoftware\nvm\temp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">npm version 3.6.0... Complete</span></span><br><span class="line"><span class="attr">Installing</span> <span class="string">npm v3.6.0...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Installation</span> <span class="string">complete. If you want to use this version, type</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nvm</span> <span class="string">use 8.10.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//V10.5.0</span></span><br><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt;nvm install 15.10.0</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">node.js version 15.10.0 (64-bit)...</span></span><br><span class="line"><span class="attr">Complete</span></span><br><span class="line"><span class="attr">Creating</span> <span class="string">E:\worksoftware\nvm\temp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">npm version 6.1.0... Complete</span></span><br><span class="line"><span class="attr">Installing</span> <span class="string">npm v6.1.0...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Installation</span> <span class="string">complete. If you want to use this version, type</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nvm</span> <span class="string">use 15.10.0</span></span><br></pre></td></tr></table></figure><h3 id="7-再次查看已安装的版本"><a href="#7-再次查看已安装的版本" class="headerlink" title="7  再次查看已安装的版本"></a>7  再次查看已安装的版本</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt; nvm list</span></span><br><span class="line">    <span class="attr">8.10.0</span></span><br><span class="line">    <span class="attr">15.10.0</span></span><br></pre></td></tr></table></figure><h3 id="8-使用指定版本的node"><a href="#8-使用指定版本的node" class="headerlink" title="8  使用指定版本的node"></a>8  使用指定版本的node</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt;nvm use 8.10.0</span></span><br><span class="line"><span class="attr">Now</span> <span class="string">using node v8.10.0 (64-bit)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt;nvm list</span></span><br><span class="line">    <span class="attr">15.10.0</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">*</span> <span class="string">8.10.0 (Currently using 64-bit executable)</span></span><br><span class="line">  <span class="meta">*</span> <span class="string">C:\Users\holyhui&gt;node -v</span></span><br><span class="line">    <span class="attr">v8.10.0</span></span><br></pre></td></tr></table></figure><p>nvm use 可能会出现exit status 1:乱码，用管理员打开cmd即可！参考如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/weixin_44074879/article/details/121671731</span></span><br></pre></td></tr></table></figure><h3 id="9-删除指定版本的node"><a href="#9-删除指定版本的node" class="headerlink" title="9 删除指定版本的node"></a>9 删除指定版本的node</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt;nvm uninstall 8.10.0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;搞elasticsearch 需要用到kibana 的可视化操作，但是需要下载对应的nodejs版本，但原来用作hexo博客的nodejs也需要维护一个nodejs版本，因此使用nvm来同时安装并且随意切换nodejs版本！&lt;/p&gt;
&lt;h3 id=&quot;1-下载nvm&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>ali短信服务的开通和基本配置与测试</title>
    <link href="http://example.com/2022/08/18/ali%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%BC%80%E9%80%9A%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2022/08/18/ali%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%BC%80%E9%80%9A%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%B5%8B%E8%AF%95/</id>
    <published>2022-08-18T13:51:35.000Z</published>
    <updated>2022-12-11T02:30:14.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-开通服务"><a href="#1-开通服务" class="headerlink" title="1.开通服务"></a>1.开通服务</h1><h2 id="1-1-注册阿里云"><a href="#1-1-注册阿里云" class="headerlink" title="1.1.注册阿里云"></a>1.1.注册阿里云</h2><p>登录阿里云首页：<a href="https://account.aliyun.com/">https://account.aliyun.com/</a></p><p>然后注册账号并登录</p><h2 id="1-2-开通短信服务"><a href="#1-2-开通短信服务" class="headerlink" title="1.2.开通短信服务"></a>1.2.开通短信服务</h2><p>在首页的产品中，找到短信服务：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553774972732.png" alt="1553774972732"></p><p>首次登入会显示：<code>立即开通</code>，以后会显示<code>管理控制台</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775033013.png" alt="1553775033013"></p><p>可以看到控制台页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775085494.png" alt="1553775085494"></p><h2 id="1-3-付费充值"><a href="#1-3-付费充值" class="headerlink" title="1.3.付费充值"></a>1.3.付费充值</h2><p>在顶部菜单中选择费用，充值：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775135337.png" alt="1553775135337"></p><p>充值后即可使用短信服务发送短信了。</p><h1 id="2-服务准备"><a href="#2-服务准备" class="headerlink" title="2.服务准备"></a>2.服务准备</h1><p>正式开发发送短信前，还有一系列准备工作要做，主要包括以下几个部分：</p><ul><li>开通子账户，设置AccessKeyId和AccessKeySecret</li><li>开通子账户短信权限</li><li>申请短信签名</li><li>申请短信模板</li></ul><h2 id="2-1-开通子账户"><a href="#2-1-开通子账户" class="headerlink" title="2.1.开通子账户"></a>2.1.开通子账户</h2><p>出于安全考虑，我们不能直接使用主账号开发，因为主账号具备整个云服务的完整权限，风险比较大。</p><p>所以，我们首先需要开通子账户，用于业务开发。</p><p>点击右上角的用户头像，可以选择权限控制：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775502900.png" alt="1553775502900"></p><p>然后在弹出的页面中，选择新建用户：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775567420.png" alt="1553775567420"></p><p>然后输入用户名，并选择<code>编程访问</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775613059.png" alt="1553775613059"></p><p>这样创建的用户就会带上AccessKeyID和AccessKeySecret了。</p><h2 id="2-2-开通短信权限"><a href="#2-2-开通短信权限" class="headerlink" title="2.2.开通短信权限"></a>2.2.开通短信权限</h2><p>在用户列表页面，选中一个新建的用户：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775787645.png" alt="1553775787645"></p><p>然后会进入用户设置页面，我们选择权限管理，并添加权限：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775853645.png" alt="1553775853645"></p><p>在弹出的列表页面中，搜索<code>短信</code>相关权限：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775924262.png" alt="1553775924262"></p><p>选中<code>管理短信服务（SMS）的权限</code>，点击确定即可！</p><h2 id="2-3-短信签名"><a href="#2-3-短信签名" class="headerlink" title="2.3.短信签名"></a>2.3.短信签名</h2><p>什么是短信签名？</p><p>短信签名是短信服务提供的一种快捷、方便的个性化签名方式。当发送短信时，短信平台会根据设置，在短信内容里附加个性签名，再发送给指定手机号码。</p><p>例如，企业主体为“阿里巴巴网络技术有限公司”，则可以提交的签名如下：</p><ul><li>企业全称或简称：【阿里巴巴】、【阿里巴巴网络技术有限公司】。</li><li>公司旗下产品名称：【淘宝网】、【阿里云】等。</li></ul><p>签名会在短信的开头携带，标示短信发送方的身份。</p><p>在管理控制台，找到国内短信菜单：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553776096731.png" alt="1553776096731"></p><p>点击添加签名，进入签名申请页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553776151886.png" alt="1553776151886"></p><p>填写信息后，点击确定，等待人工审核即可。</p><h2 id="2-4-短信模板"><a href="#2-4-短信模板" class="headerlink" title="2.4.短信模板"></a>2.4.短信模板</h2><p>什么是短信模板？</p><p>阿里肯定不会允许你随意发送短信，因此会要求你提前定义好短信发送的内容。当然，内容中允许出现一些参数变量，但基本内容是固定的，这样的一套定义好的短信内容，就是<strong>短信模板</strong>。</p><p><strong>短信模板由变量和模板内容构成</strong>。模板变量以变量形式提供针对不同手机号码的短信定制方式，在模板中设置变量后，发送短信时指定变量的实际值，短信服务会自动用实际值替换模板变量，并发送短信，实现短信的定制化。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【阿里云】您正在申请手机注册，验证码为：$&#123;code&#125;，5分钟内有效！</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><strong>模板内容</strong>为：<code>您正在申请手机注册，验证码为：$&#123;code&#125;，5分钟内有效！</code>。</li><li><strong>模板变量</strong>为：<code>$&#123;code&#125;</code>。</li></ul><blockquote><p>申请模板</p></blockquote><p>在国内短信菜单中，点击模板管理，</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553776492454.png" alt="1553776492454"></p><p>再点击添加模板按钮，进入模板申请页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553776566827.png" alt="1553776566827"></p><p>填写信息后，点击提交，等待人工审核即可！</p><h1 id="3-阿里SDK"><a href="#3-阿里SDK" class="headerlink" title="3.阿里SDK"></a>3.阿里SDK</h1><h2 id="3-1-官方文档"><a href="#3-1-官方文档" class="headerlink" title="3.1.官方文档"></a>3.1.官方文档</h2><p>发送短信最终要通过java代码，我们可以再阿里找到对应的文档信息：<a href="https://help.aliyun.com/document_detail/101414.html?spm=a2c4g.11186623.6.615.635850a4SVoFBk">短信发送文档</a></p><p>请求参数：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必选</th><th>示例值</th><th>描述</th></tr></thead><tbody><tr><td><strong>PhoneNumbers</strong></td><td>String</td><td>是</td><td>15900000000</td><td>接收短信的手机号码。格式：国内短信：11位手机号码，例如15951955195。国际/港澳台消息：国际区号+号码，例如85200000000。支持对多个手机号码发送短信，手机号码之间以英文逗号（,）分隔。上限为1000个手机号码。批量调用相对于单条调用及时性稍有延迟。<strong>说明</strong> 验证码类型短信，建议使用单独发送的方式。</td></tr><tr><td><strong>SignName</strong></td><td>String</td><td>是</td><td>阿里云</td><td>短信签名名称。请在控制台<strong>签名管理</strong>页面<strong>签名名称</strong>一列查看。<strong>说明</strong> 必须是已添加、并通过审核的短信签名。</td></tr><tr><td><strong>TemplateCode</strong></td><td>String</td><td>是</td><td>SMS_153055065</td><td>短信模板ID。请在控制台<strong>模板管理</strong>页面<strong>模板CODE</strong>一列查看。<strong>说明</strong> 必须是已添加、并通过审核的短信签名；且发送国际/港澳台消息时，请使用国际/港澳台短信模版。</td></tr><tr><td><strong>AccessKeyId</strong></td><td>String</td><td>否</td><td>LTAIP00vvvvvvvvv</td><td>主账号AccessKey的ID。</td></tr><tr><td><strong>Action</strong></td><td>String</td><td>否</td><td>SendSms</td><td>系统规定参数。取值：<strong>SendSms</strong>。</td></tr><tr><td><strong>OutId</strong></td><td>String</td><td>否</td><td>abcdefgh</td><td>外部流水扩展字段。</td></tr><tr><td><strong>SmsUpExtendCode</strong></td><td>String</td><td>否</td><td>90999</td><td>上行短信扩展码，无特殊需要此字段的用户请忽略此字段。</td></tr><tr><td><strong>TemplateParam</strong></td><td>String</td><td>否</td><td>{“code”:”1111”}</td><td>短信模板变量对应的实际值，JSON格式。<strong>说明</strong> 如果JSON中需要带换行符，请参照标准的JSON协议处理。</td></tr></tbody></table><p>返回结果：</p><table><thead><tr><th>名称</th><th>类型</th><th>示例值</th><th>描述</th></tr></thead><tbody><tr><td>BizId</td><td>String</td><td>900619746936498440^0</td><td>发送回执ID，可根据该ID在接口QuerySendDetails中查询具体的发送状态。</td></tr><tr><td>Code</td><td>String</td><td>OK</td><td>请求状态码。返回OK代表请求成功。其他错误码详见<a href="https://help.aliyun.com/document_detail/101346.html">错误码列表</a>。</td></tr><tr><td>Message</td><td>String</td><td>OK</td><td>状态码的描述。</td></tr><tr><td>RequestId</td><td>String</td><td>F655A8D5-B967-440B-8683-DAD6FF8DE990</td><td>请求ID。</td></tr></tbody></table><h2 id="3-2-官方Demo"><a href="#3-2-官方Demo" class="headerlink" title="3.2.官方Demo"></a>3.2.官方Demo</h2><p>阿里提供了在线测试的Demo：<a href="https://api.aliyun.com/?spm=a2c4g.11186623.2.14.56ef50a4PQx5ux#/?product=Dysmsapi&amp;api=SendSms">https://api.aliyun.com/?spm=a2c4g.11186623.2.14.56ef50a4PQx5ux#/?product=Dysmsapi&amp;api=SendSms</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/image-20200719151428659.png" alt="image-20200719151428659"></p><p>填写基本信息，即可发送并测试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-开通服务&quot;&gt;&lt;a href=&quot;#1-开通服务&quot; class=&quot;headerlink&quot; title=&quot;1.开通服务&quot;&gt;&lt;/a&gt;1.开通服务&lt;/h1&gt;&lt;h2 id=&quot;1-1-注册阿里云&quot;&gt;&lt;a href=&quot;#1-1-注册阿里云&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="JWT" scheme="http://example.com/categories/JWT/"/>
    
    
    <category term="阿里短信服务" scheme="http://example.com/tags/%E9%98%BF%E9%87%8C%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ整合SpringBoot和邮件发送</title>
    <link href="http://example.com/2022/08/18/RabbitMQ%E6%95%B4%E5%90%88SpringBoot%E5%92%8C%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <id>http://example.com/2022/08/18/RabbitMQ%E6%95%B4%E5%90%88SpringBoot%E5%92%8C%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</id>
    <published>2022-08-18T13:42:00.000Z</published>
    <updated>2022-12-11T02:30:15.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合邮件发送"><a href="#SpringBoot整合邮件发送" class="headerlink" title="SpringBoot整合邮件发送"></a>SpringBoot整合邮件发送</h1><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20210708162108584.png" alt="image-20210708162108584"></p><p>说明：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">最下面的几个箭头表示备份，</span></span><br><span class="line"><span class="attr">2</span> <span class="string">最上面的双向箭头中的向下箭头表示刷新，</span></span><br><span class="line"><span class="attr">强制查看有没有接受到邮箱，</span></span><br><span class="line"><span class="attr">自己不手动刷新，那么就是定时刷新查看有没有邮箱到达</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-完成邮件的投递"><a href="#SpringBoot-完成邮件的投递" class="headerlink" title="SpringBoot 完成邮件的投递"></a>SpringBoot 完成邮件的投递</h2><p>准备工作： 登录自己的开通邮件的 以163为例      </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574189645.png" alt="1600574189645"> </p><p>生成自己唯一的授权码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574220514.png" alt="1600574220514"> </p><ul><li>基于springboot环境导入email发送依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springboot邮件发送--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置邮件发送参数  yaml文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#  邮件发送配置</span><br><span class="line">#  spring.mail.username=fanqixxxx@163.com</span><br><span class="line">#  spring.mail.password=xxxxxxx  填写授权码</span><br><span class="line">#  spring.mail.host=smtp.163.com  填写邮箱供应的SMTP地址</span><br><span class="line">#  spring.mail.properties.mail.smtp.ssl.enable=true</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="comment"># 发送者的邮箱地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xsitheima163@163.com</span></span><br><span class="line">  <span class="comment"># 此密码并非登录的密码,而是使用java代码发送邮件时使用的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">AKELOGXEFRJZOAWU</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>编写测试类 完成邮件发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailSend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            message.setSubject(<span class="string">&quot;传智健康官方邮件&quot;</span>);</span><br><span class="line">            message.setText(<span class="string">&quot;你好，请保持好验证码：7788，打死都不能泄露给你的同桌&quot;</span>);</span><br><span class="line">            message.setTo(<span class="string">&quot;tps520tps@163.com&quot;</span>);</span><br><span class="line">            message.setFrom(<span class="string">&quot;tps520wx@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MailException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查收邮件：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574300195.png" alt="1600574300195"> </p><p>邮件发送示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendEmailApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            message.setSubject(<span class="string">&quot;表白邮件&quot;</span>);</span><br><span class="line">            message.setText(<span class="string">&quot;rose 你好, 我想.....&quot;</span>);</span><br><span class="line">            message.setTo(<span class="string">&quot;xsitheima126@126.com&quot;</span>);</span><br><span class="line">            message.setFrom(<span class="string">&quot;xsitheima163@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">            System.out.println(<span class="string">&quot;========发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MailException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="预备账号"><a href="#预备账号" class="headerlink" title="预备账号"></a>预备账号</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xsitheima126@<span class="number">126.</span>com    a123456</span><br><span class="line">    授权码: YKJOGNHCCFDLIJKO</span><br><span class="line">xsitheima163@<span class="number">163.</span>com    a12345678</span><br><span class="line">授权码: AKELOGXEFRJZOAWU</span><br></pre></td></tr></table></figure><h1 id="SpringBoot整合RabbitMQ以及整合邮件发送"><a href="#SpringBoot整合RabbitMQ以及整合邮件发送" class="headerlink" title="SpringBoot整合RabbitMQ以及整合邮件发送"></a>SpringBoot整合RabbitMQ以及整合邮件发送</h1><p>整合描述：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span> <span class="string">boot 中生产者的controller类提供的 访问地址带的参数就是邮箱账号，</span></span><br><span class="line"><span class="meta">访问生产者的</span> <span class="string">spring boot controller 并且将邮箱账号作为消息，</span></span><br><span class="line"><span class="attr">消费者拿到的信息就是邮箱账号，</span></span><br><span class="line"><span class="meta">然后消费者使用163账号给接收到的邮箱账号</span> <span class="string">发送邮件！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ps：先启动消费者，然后再启动生产者，生产者生产10次邮箱信息，那么消费者发送十次邮箱。</span></span><br><span class="line"><span class="attr">消息工作模式为直连模式！</span></span><br></pre></td></tr></table></figure><h3 id="1-消费者代码"><a href="#1-消费者代码" class="headerlink" title="1 消费者代码"></a>1 消费者代码</h3><h4 id="消费者配置文件："><a href="#消费者配置文件：" class="headerlink" title="消费者配置文件："></a>消费者配置文件：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="comment"># 发送者的邮箱地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xsitheima163@163.com</span></span><br><span class="line">  <span class="comment"># 此密码并非登录的密码,而是使用java代码发送邮件时使用的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">AKELOGXEFRJZOAWU</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="消费者pom-xml文件"><a href="#消费者pom-xml文件" class="headerlink" title="消费者pom.xml文件"></a>消费者pom.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--springboot邮件发送--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="消费者启动文件："><a href="#消费者启动文件：" class="headerlink" title="消费者启动文件："></a>消费者启动文件：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换器: 将对象转成json并存放到MQ中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="消费者监听生产者类："><a href="#消费者监听生产者类：" class="headerlink" title="消费者监听生产者类："></a>消费者监听生产者类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg : 参数类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;boot-queue&quot;)</span><span class="comment">//  注意只需要 队列名称一致即可！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String msg, Channel channel, Message message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//public void receive(Map msg, Channel channel, Message message) throws IOException &#123;</span></span><br><span class="line">        <span class="comment">//会话唯一ID</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息 &quot;</span> + msg);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;收到消息 &quot; + new String(message.getBody()));</span></span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;message:&quot; +message.toString());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// =====================发送邮件</span></span><br><span class="line">            <span class="comment">// 编写邮件信息</span></span><br><span class="line">            SimpleMailMessage emailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            <span class="comment">// 邮件主题</span></span><br><span class="line">            emailMessage.setSubject(<span class="string">&quot;下单通知&quot;</span>);</span><br><span class="line">            <span class="comment">// 邮件内容</span></span><br><span class="line">            emailMessage.setText(<span class="string">&quot;您的宝贝以发货&quot;</span>);</span><br><span class="line">            emailMessage.setTo(msg);</span><br><span class="line">            emailMessage.setFrom(<span class="string">&quot;xsitheima163@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(emailMessage);</span><br><span class="line">            System.out.println(<span class="string">&quot;========发送成功&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-生产者代码："><a href="#2-生产者代码：" class="headerlink" title="2 生产者代码："></a>2 生产者代码：</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">producer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br></pre></td></tr></table></figure><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换器: 将对象转成json并存放到MQ中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Controller类"><a href="#Controller类" class="headerlink" title="Controller类"></a>Controller类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// rabbit客户端对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send/&#123;msg&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable(&quot;msg&quot;)</span> String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 参数1: 队列名称,操作的队列必须实现存在</span></span><br><span class="line">        <span class="comment">// 参数2: 存放的消息信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;boot-queue&quot;</span>,msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot整合邮件发送&quot;&gt;&lt;a href=&quot;#SpringBoot整合邮件发送&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合邮件发送&quot;&gt;&lt;/a&gt;SpringBoot整合邮件发送&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img</summary>
      
    
    
    
    <category term="RabbitMQ" scheme="http://example.com/categories/RabbitMQ/"/>
    
    
    <category term="RabbitMQ" scheme="http://example.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>使用学生邮箱登录idea</title>
    <link href="http://example.com/2022/08/16/%E4%BD%BF%E7%94%A8%E5%AD%A6%E7%94%9F%E9%82%AE%E7%AE%B1%E7%99%BB%E5%BD%95idea/"/>
    <id>http://example.com/2022/08/16/%E4%BD%BF%E7%94%A8%E5%AD%A6%E7%94%9F%E9%82%AE%E7%AE%B1%E7%99%BB%E5%BD%95idea/</id>
    <published>2022-08-16T13:50:38.000Z</published>
    <updated>2022-12-11T02:30:17.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-找到自己所在的学校给自己分配的学生邮箱。"><a href="#1-找到自己所在的学校给自己分配的学生邮箱。" class="headerlink" title="1 找到自己所在的学校给自己分配的学生邮箱。"></a>1 找到自己所在的学校给自己分配的学生邮箱。</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">我是直接百度的，进入链接发现是内部网里面的公告，公文通</span></span><br><span class="line"><span class="attr">公告很清晰说明给我们分配的邮箱跟密码是多少</span></span><br></pre></td></tr></table></figure><h3 id="2-使用分配的邮箱去认证idea-如下是认证页面"><a href="#2-使用分配的邮箱去认证idea-如下是认证页面" class="headerlink" title="2 使用分配的邮箱去认证idea,如下是认证页面"></a>2 使用分配的邮箱去认证idea,如下是认证页面</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//www.jetbrains.com/shop/eform/students</span></span><br></pre></td></tr></table></figure><p>使用邮箱认证，填写信息就好。</p><h3 id="3-利用认证的学生邮箱注册一个idea账号"><a href="#3-利用认证的学生邮箱注册一个idea账号" class="headerlink" title="3 利用认证的学生邮箱注册一个idea账号"></a>3 利用认证的学生邮箱注册一个idea账号</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//account.jetbrains.com/signup-complete</span></span><br></pre></td></tr></table></figure><p>注册完账号就会提示，你这是学生账号，已经授权，享有哪些资源。</p><p><img src="/img/java/idea/1.png" alt="803e2a688844f57fa3fa425a70a122c"></p><h3 id="4-使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）"><a href="#4-使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）" class="headerlink" title="4 使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）"></a>4 使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）</h3><p>（账号密码跟学生邮箱密码是不同的一个密码，当然你也可以设为一样）</p><p><img src="/img/java/idea/2.png" alt="4428d753eebde9c4e8fe9d01e295981"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-找到自己所在的学校给自己分配的学生邮箱。&quot;&gt;&lt;a href=&quot;#1-找到自己所在的学校给自己分配的学生邮箱。&quot; class=&quot;headerlink&quot; title=&quot;1 找到自己所在的学校给自己分配的学生邮箱。&quot;&gt;&lt;/a&gt;1 找到自己所在的学校给自己分配的学生邮</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx部署静态资源以及反向代理的配置方式大总结</title>
    <link href="http://example.com/2022/08/16/nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E5%A4%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/08/16/nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E5%A4%A7%E6%80%BB%E7%BB%93/</id>
    <published>2022-08-16T13:09:14.000Z</published>
    <updated>2022-12-11T02:30:15.326Z</updated>
    
    <content type="html"><![CDATA[<p>nginx 的几种功能介绍：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">本机静态资源部署，</span></span><br><span class="line"><span class="comment">    # 匹配localhost下的一切路径</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line"><span class="comment">        # 默认资源去nginx目录下的html目录寻找</span></span><br><span class="line">        <span class="attr">root</span>   <span class="string">html;</span></span><br><span class="line">        <span class="attr">index</span>  <span class="string">index.html index.htm;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">    # 访问：http://localhost/  就是nginx目录下的html文件夹下的资源</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">location</span> <span class="string">/gaominghui &#123;</span></span><br><span class="line">        <span class="attr">alias</span> <span class="string">F:/java/MyCode/leyouProject/leyou-portal/;</span></span><br><span class="line">        <span class="attr">index</span> <span class="string">index.html;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">    # 访问：http://localhost/gaominghui/  就是F:/java/MyCode/leyouProject/leyou-portal/文件夹下的资源</span></span><br><span class="line"><span class="attr">2</span> <span class="string">本机静态资源反向代理，直接在外部conf配置文件进行如下配置就好：</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span>       <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span>  <span class="string">image.leyou.com;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line"><span class="comment">            # 默认资源去nginx目录下的html目录寻找</span></span><br><span class="line">            <span class="attr">root</span>   <span class="string">html;</span></span><br><span class="line">            <span class="attr">index</span>  <span class="string">/images/0/0/1524297512647.jpg;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># 访问 http://image.leyou.com/ 就是访问nginx目录下的html文件夹下的资源</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span>       <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span>  <span class="string">www.leyou.com;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">                <span class="attr">root</span><span class="string">F:/java/MyCode/leyouProject/leyou-portal;</span></span><br><span class="line">                <span class="attr">index</span><span class="string">index.html;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">    # 访问：http://www.leyou.com/  就是F:/java/MyCode/leyouProject/leyou-portal/文件夹下的资源</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">3</span> <span class="string">微服务反向代理,直接在外部conf配置文件进行如下配置就好：</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span>       <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span>  <span class="string">manage.leyou.com;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">            <span class="attr">proxy_pass</span>   <span class="string">http://127.0.0.1:9001;</span></span><br><span class="line">            <span class="attr">proxy_connect_timeout</span> <span class="string">600;</span></span><br><span class="line">            <span class="attr">proxy_read_timeout</span> <span class="string">5000;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># 访问 http://www.manage.leyou.com  会反向代理到http://127.0.0.1:9001</span></span><br></pre></td></tr></table></figure><p><strong>注意注意注意：</strong>上面使用域名的反向代理，一定要在本地hosts域名配置文件中配置域名映射！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nginx 的几种功能介绍：&lt;/p&gt;
&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="nginx" scheme="http://example.com/categories/nginx/"/>
    
    
    <category term="nginx" scheme="http://example.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>i9电脑安装ubuntu18.04有线网图标没有显示且连接不上网络</title>
    <link href="http://example.com/2022/08/15/i9%E7%94%B5%E8%84%91%E5%AE%89%E8%A3%85ubuntu18-04%E6%9C%89%E7%BA%BF%E7%BD%91%E5%9B%BE%E6%A0%87%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA%E4%B8%94%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2022/08/15/i9%E7%94%B5%E8%84%91%E5%AE%89%E8%A3%85ubuntu18-04%E6%9C%89%E7%BA%BF%E7%BD%91%E5%9B%BE%E6%A0%87%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA%E4%B8%94%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%BD%91%E7%BB%9C/</id>
    <published>2022-08-15T08:28:17.000Z</published>
    <updated>2022-12-11T02:30:15.044Z</updated>
    
    <content type="html"><![CDATA[<p>最近要搞无人机平台的堤坝识别，张老师买回来一台i9处理器的服务器，让我配置环境，谁知道安装了系统ubuntu18.04之后无法上网，刚开始ping不同百度，然后ifconfig，提示没有这个工具，再然后sudo apt-get install net-tools 没有对应的包，再然后是 sudo apt-get update 出现域名解析失败，再然后手动配置万能域名，再到更还源，都试了还是不行。</p><p>最后搜索到一下博客：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/weixin_44359479/article/details/123019056</span></span><br></pre></td></tr></table></figure><p>原来是没有对应的驱动，网卡驱动是有的，官网上的ubuntu镜像，怎么可能没有驱动，只是硬件版本不对，驱动不兼容，以前windows电脑重装都需要安装驱动精灵，扫描一下网卡，声卡这些驱动有没有安装成功，现在ubuntu系统重装我怎么就没想到呢，而且学arm的时候也是，一般是网卡驱动的问题。</p><p>具体解决方法如下：</p><h3 id="1-终端输入"><a href="#1-终端输入" class="headerlink" title="1.终端输入"></a>1.终端输入</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lspci</span></span><br></pre></td></tr></table></figure><p>查看网卡型号</p><h3 id="2-通过另一台可以上网的电脑，在官网下载对应型号"><a href="#2-通过另一台可以上网的电脑，在官网下载对应型号" class="headerlink" title="2.通过另一台可以上网的电脑，在官网下载对应型号"></a>2.通过另一台可以上网的电脑，在官网下载对应型号</h3><p><img src="https://img-blog.csdnimg.cn/23e51a1e888d4a1f8b51c1b16cd77964.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5piO5b63emh1YW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="3-下载完之后，还需要下载build-essential文件包。下面给出链接，可打包下载至电脑中。"><a href="#3-下载完之后，还需要下载build-essential文件包。下面给出链接，可打包下载至电脑中。" class="headerlink" title="3.下载完之后，还需要下载build-essential文件包。下面给出链接，可打包下载至电脑中。"></a>3.下载完之后，还需要下载build-essential文件包。下面给出链接，可打包下载至电脑中。</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">链接：https</span>:<span class="string">//pan.baidu.com/s/1Zr1B-PO7O_htbWl4kbCfbw </span></span><br><span class="line"><span class="meta">提取码：6666</span> <span class="string"></span></span><br></pre></td></tr></table></figure><p>4.将上述四个文件放在一个文件夹中，并且拷贝至U盘，再复制到Ubuntu18.04 lst系统的某一个文件夹下（小编将其复制到downloads文件夹下）。</p><p><img src="https://img-blog.csdnimg.cn/70c8ba602c474a6395f76dd9b97a664b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5piO5b63emh1YW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="5-进入该文件夹，然后鼠标右击选择“open-Ternimal”进入终端。"><a href="#5-进入该文件夹，然后鼠标右击选择“open-Ternimal”进入终端。" class="headerlink" title="5.进入该文件夹，然后鼠标右击选择“open Ternimal”进入终端。"></a>5.进入该文件夹，然后鼠标右击选择“open Ternimal”进入终端。</h3><p>（1）依次cd进入gcc、make、build-essential目录，执行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">dpkg -i *.deb</span></span><br></pre></td></tr></table></figure><p>命令进行安装即可。（注意：不按gcc、make、build-essential的顺序安装可能导致失败。）<br>（2）上述安装完后，进入r8125-9.007.01文件夹，终端执行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">chmod +x autorun.sh</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">sh ./autorun.sh</span></span><br><span class="line"><span class="attr">完成安装！！！</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-再执行如下命令，可显示有线图标"><a href="#6-再执行如下命令，可显示有线图标" class="headerlink" title="6.再执行如下命令，可显示有线图标"></a>6.再执行如下命令，可显示有线图标</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">service network-manager stop</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">rm /var/lib/NetworkManager/NetworkManager.state</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">service network-manager start</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">gedit /etc/NetworkManager/NetworkManager.conf</span></span><br><span class="line"><span class="attr">（把false改成true）</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">service network-manager restart</span></span><br></pre></td></tr></table></figure><p>如下图：</p><p><img src="https://img-blog.csdnimg.cn/92a33a5a0ca44c4e8e6ab27fdeafac69.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近要搞无人机平台的堤坝识别，张老师买回来一台i9处理器的服务器，让我配置环境，谁知道安装了系统ubuntu18.04之后无法上网，刚开始ping不同百度，然后ifconfig，提示没有这个工具，再然后sudo apt-get install net-tools 没有对应的</summary>
      
    
    
    
    <category term="ubuntu" scheme="http://example.com/categories/ubuntu/"/>
    
    
    <category term="ubuntu" scheme="http://example.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>git精简篇-快速上手</title>
    <link href="http://example.com/2022/08/14/git%E7%B2%BE%E7%AE%80%E7%AF%87-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>http://example.com/2022/08/14/git%E7%B2%BE%E7%AE%80%E7%AF%87-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2022-08-14T13:35:54.000Z</published>
    <updated>2022-12-11T02:30:14.954Z</updated>
    
    <content type="html"><![CDATA[<p>前端时间写了一大篇关于git的使用文章，感觉太杂乱了，今天写一篇比较精简的吧！</p><h3 id="（一）第一次上传时"><a href="#（一）第一次上传时" class="headerlink" title="（一）第一次上传时"></a>（一）第一次上传时</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">建立创库，复制仓库链接地址</span></span><br><span class="line"><span class="attr">2</span> <span class="string">在目录中 git init</span></span><br><span class="line"><span class="attr">3</span> <span class="string">git add .(.表示所有文件，也可以指定文件）</span></span><br><span class="line"><span class="attr">4</span> <span class="string">git commit -m &#x27;hh&#x27;</span></span><br><span class="line"><span class="attr">5</span> <span class="string">git remote add origin https://gitee.com/gao-minghui-jason/fundamentals-of-computer.git（注意http协议还是ssh协议）</span></span><br><span class="line"><span class="attr">6</span> <span class="string">git push --set-upstream origin master  然后下面进行绑定</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch --set-upstream-to=origin/master（绑定本地master与远程的master）</span></span><br><span class="line"><span class="attr">7</span> <span class="string">由于绑定了，因此可以直接git push； git pull</span></span><br></pre></td></tr></table></figure><h3 id="（二）-第一次拉取时："><a href="#（二）-第一次拉取时：" class="headerlink" title="（二） 第一次拉取时："></a>（二） 第一次拉取时：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">git init</span></span><br><span class="line"><span class="attr">2</span> <span class="string">git remote add origin https://gitee.com/gao-minghui-jason/fundamentals-of-computer.git（注意http协议还是ssh协议）</span></span><br><span class="line"><span class="attr">3</span> <span class="string">git pull origin master（如果本目录本来有内容的话，会合并）</span></span><br><span class="line"><span class="attr">4</span> <span class="string">git branch --set-upstream-to=origin/master（绑定本地master与远程的master）</span></span><br><span class="line"><span class="attr">5</span> <span class="string">由于绑定了，因此下次可以直接git push； git pull</span></span><br></pre></td></tr></table></figure><h3 id="（三）自此之后，每次按照流程："><a href="#（三）自此之后，每次按照流程：" class="headerlink" title="（三）自此之后，每次按照流程："></a>（三）自此之后，每次按照流程：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">git pull </span></span><br><span class="line"><span class="attr">2</span> <span class="string">修改（增删改查）</span></span><br><span class="line"><span class="attr">3</span> <span class="string">git add .  &amp;&amp;  git commit -m &#x27;hh&#x27;  &amp;&amp; git pull &amp;&amp; git push 来操作。</span></span><br></pre></td></tr></table></figure><p>如果第3步的pull 提示远程内容跟第1步的pull不同时，添加描述，选择继续操作（也就是默认合并到本地），然后继续git push。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前端时间写了一大篇关于git的使用文章，感觉太杂乱了，今天写一篇比较精简的吧！&lt;/p&gt;
&lt;h3 id=&quot;（一）第一次上传时&quot;&gt;&lt;a href=&quot;#（一）第一次上传时&quot; class=&quot;headerlink&quot; title=&quot;（一）第一次上传时&quot;&gt;&lt;/a&gt;（一）第一次上传时&lt;/h</summary>
      
    
    
    
    <category term="git" scheme="http://example.com/categories/git/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-新冠疫情数据</title>
    <link href="http://example.com/2022/08/14/%E7%88%AC%E8%99%AB-%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2022/08/14/%E7%88%AC%E8%99%AB-%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE/</id>
    <published>2022-08-14T13:30:38.000Z</published>
    <updated>2022-12-11T02:30:17.330Z</updated>
    
    <content type="html"><![CDATA[<p>今天回顾以前做的好多项目都没有记录下来，趁这两天有时间赶紧写几篇博客哈！先写写用python写的爬虫项目</p><p>1.利用Python爬虫访问并爬取一次新型冠状病毒相关网页如百度网、丁香园等的疫情新闻数据，保存为json文件格式，并且保存所有历史数据的更新，以便在未来回溯分析病情时提供样本。</p><p>2.爬取各个网页关于疫情的报道数据，并对数据进行分类整合，如最新全国各省疫情数据，世界各国疫情数据，世界各国以及中国各省等从2020年1月份截止今日为止的所有历史数据等。</p><h2 id="1-抓取包含所有疫情信息的API"><a href="#1-抓取包含所有疫情信息的API" class="headerlink" title="1  抓取包含所有疫情信息的API"></a>1  抓取包含所有疫情信息的API</h2><p>首先，以百度网为例，用浏览器打开目标网站，按下F12进入web开发者模式，进入network模块并刷新网页：</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/1.jpg" alt="1"></p><p>然后，按类型进行排序，找到json格式的文件，网站从服务器获取数据的方法为get，从而锁定其中请求。</p><p>最后，在消息头中找到相应的请求网址进行排查，从而顺利找到数据接口。</p><h2 id="2-数据爬取及处理"><a href="#2-数据爬取及处理" class="headerlink" title="2 数据爬取及处理"></a>2 数据爬取及处理</h2><h4 id="（1）需要导入的包："><a href="#（1）需要导入的包：" class="headerlink" title="（1）需要导入的包："></a>（1）需要导入的包：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.animation <span class="keyword">as</span> animation</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> map_draw</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br></pre></td></tr></table></figure><h4 id="（2）程序主体："><a href="#（2）程序主体：" class="headerlink" title="（2）程序主体："></a>（2）程序主体：</h4><p>程序通过requests先获取主页面的数据信息，然后利用正则表达式提取并分析当前最新疫情数据信息保存到json格式的文件中去，再提取有用信息保存到xlsx表格中去，然后生成词云图，生成地图，然后下载过往历史数据，再进行动态图的可视化显示。</p><h2 id="3-每一步的具体介绍"><a href="#3-每一步的具体介绍" class="headerlink" title="3 每一步的具体介绍"></a>3 每一步的具体介绍</h2><h4 id="（1）最新一天疫情数据采集："><a href="#（1）最新一天疫情数据采集：" class="headerlink" title="（1）最新一天疫情数据采集："></a>（1）最新一天疫情数据采集：</h4><p>读取网址信息 <a href="https://ncov.dxy.cn/ncovh5/view/pneumonia%EF%BC%8C">https://ncov.dxy.cn/ncovh5/view/pneumonia，</a> 获得最近一天新冠状病毒的数据信息以及针对收集到的数据进行处理并保存为json文本，最新一天的世界各国疫情信息跟最新一天的中国各省数据的提取方法不同之处在于：前者是通过属性id为getListByCountryTypeService2true来获取到标签，而后者是通过属性id= getAreaStat来获得标签，获取到数据后再通过正则表达式来获取json格式的字符串并保存json格式文件；然后再保存到excl文件中！</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/2.jpg"></p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/3.jpg" alt="3"></p><h4 id="（2）过往历史疫情数据收集："><a href="#（2）过往历史疫情数据收集：" class="headerlink" title="（2）过往历史疫情数据收集："></a>（2）过往历史疫情数据收集：</h4><p>首先加载由上面读取网址信息  <a href="https://ncov.dxy.cn/ncovh5/view/pneumonia">https://ncov.dxy.cn/ncovh5/view/pneumonia</a>  后分析提取有用信息保存的json文件数据，里面保存了各个国家或者各国省的最新一天数据，还有https://….json链接，可以通过request模块对这些链接进行访问然后编码，提取到有用的信息，如：按照字典为保存单位，一个字典表示一个国家的一天的疫情数据，然后这些字典数据利用python列表对象的extend方法组合成为一个包含了各个国家各个不同日期的疫情数据，组合成一个大的列表，然后保存为json文件，以便我们后面动态图显示数据时做准备。</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/4.jpg" alt="4"></p><h4 id="（3）词云图的生成："><a href="#（3）词云图的生成：" class="headerlink" title="（3）词云图的生成："></a>（3）词云图的生成：</h4><p>生成的词云图有两张，根据全国各省累计确诊还有世界各国的累计确诊人数而生成的词云图。词云图上面的字体格式可以根据自己windows上的font自行调整。利用了词云图更加直观的看到了那个地方的累计确诊人数的对比</p><p>1 国内疫情词云图如下：</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/6.jpg" alt="6"></p><p>2 世界各国疫情词云图如下：</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/7.jpg" alt="7"></p><h4 id="（4）疫情地图的生成："><a href="#（4）疫情地图的生成：" class="headerlink" title="（4）疫情地图的生成："></a>（4）疫情地图的生成：</h4><p>Matplotlib中的Basemap它具有专业标准的地图绘制工具。它可以与matplotlib的一般绘图功能相结合，并在地图上绘制数据。 Matplotlib的Basemap工具包是一个用于在Python中的地图上绘制2D数据的库。本实验使用basemap库来构建中国的地图模型展示。</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/5.jpg" alt="5"></p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/10.jpg" alt="10"></p><h4 id="（5）动态图显示历史确诊数据："><a href="#（5）动态图显示历史确诊数据：" class="headerlink" title="（5）动态图显示历史确诊数据："></a>（5）动态图显示历史确诊数据：</h4><p>FuncAnimation是Matplotlib库为我们提供的用于绘制动态图像的接口，其中包含如下参数：fig：画布对象，由创建画布时的返回得到，即fig = plt.figure()  frames：指定动图的帧数，但这个参数类型必须是可迭代的列表等。每次调用func函数对图像进行更新时，接口将自动向func函数提供此时的帧数num，这使得更新数据十分方便。func：用于更新图片从而产生动态效果的调用函数，在编写时通常会用到set_data等类似的方法，其返回值是一个元素为被更新的图形对象的列表。同时，func可以接受帧数参数num，用来更新每帧图像。具体内容我们将在示例中看到。interval：更新频率，单位是毫秒。这里的interval参数已经调整的非常小了，但是感觉还是不够快，是因为数据量太庞大了，取数据的过程会略有延迟，因此最终只取值为10ms。</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/8.jpg" alt="8"></p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/9.jpg" alt="9"></p><h2 id="4总结"><a href="#4总结" class="headerlink" title="4总结"></a>4总结</h2><p>​       本次主要是对新冠肺炎疫情的数据采集，利用python爬虫对百度、丁香园等网站进行数据爬取，得到了中国整体、各省市以及世界各国的疫情实时数据和历史统计数据，能清楚的知道了各时各地各项的患者人数，比如说累计确诊，现有确诊，治愈人数，死亡人数等等数据。同时，利用爬取到的数据对新冠疫情进行可视化分析，比如说利用到了地图，词云图，动态图等可视化方式，以便更直观了解疫情形式。</p><p>​        不足的地方是没有利用爬取到的新冠疫情数据来进行深入分析整理，比如对新冠疫情的形式、规律以及走势进行预测，后续的工作是对密切接触者的轨迹数据进行更详细爬取，得到更全面的数据，方便疫情的全面防控。</p><p>最后由衷感谢奋战在一线的所有人员，希望疫情快点过去，加油加油加油！！！</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/11.gif" alt="11"></p><h3 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1LIWSzyy7KlfXxj7LdALq_g </span><br><span class="line">提取码：6666 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天回顾以前做的好多项目都没有记录下来，趁这两天有时间赶紧写几篇博客哈！先写写用python写的爬虫项目&lt;/p&gt;
&lt;p&gt;1.利用Python爬虫访问并爬取一次新型冠状病毒相关网页如百度网、丁香园等的疫情新闻数据，保存为json文件格式，并且保存所有历史数据的更新，以便在未来</summary>
      
    
    
    
    <category term="爬虫" scheme="http://example.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="新型冠状病毒" scheme="http://example.com/tags/%E6%96%B0%E5%9E%8B%E5%86%A0%E7%8A%B6%E7%97%85%E6%AF%92/"/>
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>nginx启动遇到的一些问题</title>
    <link href="http://example.com/2022/08/13/nginx%E5%90%AF%E5%8A%A8%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/08/13/nginx%E5%90%AF%E5%8A%A8%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2022-08-13T07:05:52.000Z</published>
    <updated>2022-12-11T02:30:15.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-3-安装Nginx"><a href="#1-3-安装Nginx" class="headerlink" title="1.3.安装Nginx"></a>1.3.安装Nginx</h2><p>安装非常简单，将下载的安装包直接解压即可：（<strong>注意路径不能有中文路径</strong>）</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175232233.png" alt="image-20200111175232233"> </p><p>绿色免安装，舒服！</p><p>解压后的目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175323969.png" alt="image-20200111175323969"> </p><p>nginx可以通过命令行来启动，打开CMD命令行，然后输入命令：</p><ul><li><p>启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nginx.exe</span><br></pre></td></tr></table></figure></li><li><p>停止： #########注意啊，<strong>每次启动前要先把nginx停掉，因为前面启动的在后台，你要先关闭</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s stop   </span><br></pre></td></tr></table></figure></li><li><p>重新加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure></li></ul><p>启动后，访问：<a href="http://localhost/">http://localhost</a> 即可访问nginx的默认页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175634260.png" alt="image-20200111175634260"></p><p>（<strong>为什么访问localhost就会访问nginx呢？</strong>）因为nginx配置文件那里监听的域名+端口就是localhost:80，而http协议默认端口就是80</p><p>小意外：当运行<strong>start nginx.exe 时发生了报错</strong>：nginx: [error] CreateFile() “D:\nginx-1.12.2/logs/nginx.pid” failed (2: The system cannot find the file specified)，从日志log目录下的error也可以看看明显的错误信息，表示没有启动成功，<strong>再运行nginx.exe 命令时报错</strong>：nginx: [emerg] bind() to 0.0.0.0:80 failed (10013: An attempt was made to access a socket in a way forbidden by its access permissions)，表示端口80被占用了，因此需要到conf目录下的conf文件，更改监听端口，改为81后，直接使用命令start nginx.exe就可以运行成功了，然后在浏览器中访问：<a href="http://localhost:81/">http://localhost:81</a> 就可以显示nginx的默认界面了，但是发生了中文乱码问题！</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20220813144402171.png" alt="image-20220813144402171"></p><p>还有一种方法就是找到80端口被占用的进程的pid，然后杀死这个“无关紧要的进程”，那么nginx依然可以监听80端口!</p><h5 id="1-找到80端口被占用的进程的pid，由图可知对应pid为-65205"><a href="#1-找到80端口被占用的进程的pid，由图可知对应pid为-65205" class="headerlink" title="1 找到80端口被占用的进程的pid，由图可知对应pid为 65205"></a>1 找到80端口被占用的进程的pid，由图可知对应pid为 65205</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 netstat -aon|findstr &quot;80&quot;              </span><br></pre></td></tr></table></figure><p> netstat -aon表示查看所有运行中的进程</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20220813145630635.png" alt="image-20220813145630635"></p><h5 id="2-杀死进程"><a href="#2-杀死进程" class="headerlink" title="2 杀死进程"></a>2 杀死进程</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /pid 6520 /F</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20220813145743411.png" alt="image-20220813145743411"></p><h5 id="nginx中文乱码问题的解决："><a href="#nginx中文乱码问题的解决：" class="headerlink" title="nginx中文乱码问题的解决："></a>nginx中文乱码问题的解决：</h5><p>很简单，在配置文件中指定编码格式为uft-8就好</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line">    <span class="string">charset</span> <span class="string">utf-8;</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-3-安装Nginx&quot;&gt;&lt;a href=&quot;#1-3-安装Nginx&quot; class=&quot;headerlink&quot; title=&quot;1.3.安装Nginx&quot;&gt;&lt;/a&gt;1.3.安装Nginx&lt;/h2&gt;&lt;p&gt;安装非常简单，将下载的安装包直接解压即可：（&lt;strong&gt;注意路径</summary>
      
    
    
    
    <category term="nginx" scheme="http://example.com/categories/nginx/"/>
    
    
    <category term="nginx" scheme="http://example.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>windows安装多个版本的jdk</title>
    <link href="http://example.com/2022/08/11/windows%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84jdk/"/>
    <id>http://example.com/2022/08/11/windows%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84jdk/</id>
    <published>2022-08-11T13:20:13.000Z</published>
    <updated>2023-08-09T15:26:44.722Z</updated>
    
    <content type="html"><![CDATA[<p>单个jdk的安装并配置环境请参考：<a href="https://blog.csdn.net/xhmico/article/details/122390181?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169008530616800213019317%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169008530616800213019317&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-122390181-null-null.142%5Ev90%5Econtrol_2,239%5Ev3%5Econtrol&utm_term=java%20%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&spm=1018.2226.3001.4187">请点击链接</a>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/xhmico/article/details/122390181?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169008530616800213019317%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169008530616800213019317&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-122390181-null-null.142^v90^control_2,239^v3^control&amp;utm_term=java%20%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&amp;spm=1018.2226.3001.4187</span></span><br></pre></td></tr></table></figure><p>上面是jdk1.8（jdk8）的安装配置过程，虽然jdk8比较旧，但是稳定，很多企业都是使用的这个版本。</p><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h3><p>官网地址：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//www.oracle.com/java/technologies/downloads/#java8-windows</span></span><br></pre></td></tr></table></figure><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h3><p>下载成功都双击安装就好，更改安装路径，我一般是安装到D盘没有中文符号的路径下，当然jdk本来不大，可以安装到c盘。</p><h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3 配置环境变量"></a>3 配置环境变量</h3><p>参照上面链接就好主要是分为三个步骤：</p><p>3.1 Java_Home 配置：系统环境变量中添加JAVA_HOME变量名，变量值为jdk安装目录。</p><p>3.2 Path 配置：系统环境变量中的Path变量中“编辑”然后“添加”如下两个变量：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">%Java_Home%\bin</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">%Java_Home%\jre\bin</span></span><br></pre></td></tr></table></figure><p>3.3 CLASSPATH 配置：系统变量中添加CLASSPATH变量，值为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span></span><br></pre></td></tr></table></figure><p>3.1以及3.2已经算是配置好运行环境了，关于CLASSPATH变量的作用，请参考此博客：<a href="https://blog.csdn.net/cuipp0509/article/details/74852740">配置JAVA环境变量中CLASSPATH变量的作用</a></p><h3 id="配置多个jdk"><a href="#配置多个jdk" class="headerlink" title="配置多个jdk"></a>配置多个jdk</h3><p>下载安装完全跟上面一样，只不过配置环境变量时会有不一样，具体请参考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/weixin_52790678/article/details/125112899?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-125112899-blog-123652927.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-125112899-blog-123652927.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=1</span></span><br></pre></td></tr></table></figure><p>但是按照上面的配置，并没有生效！寄！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;单个jdk的安装并配置环境请参考：&lt;a href=&quot;https://blog.csdn.net/xhmico/article/details/122390181?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>opencv-画基本形状与文字显示</title>
    <link href="http://example.com/2022/08/02/opencv-%E7%94%BB%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/"/>
    <id>http://example.com/2022/08/02/opencv-%E7%94%BB%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/</id>
    <published>2022-08-02T07:47:04.000Z</published>
    <updated>2022-12-11T02:30:15.496Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本形状"><a href="#1-基本形状" class="headerlink" title="1 基本形状"></a>1 基本形状</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 定义颜色(字典形式)    也就是定义一个像素点（三个字节）下面画图都是根据这些像素点进行填充。</span></span><br><span class="line">colors=&#123;<span class="string">&#x27;blue&#x27;</span>:(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;green&#x27;</span>:(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;red&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;ye11ow&#x27;</span>:(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;magenta&#x27;</span>:(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;cyan&#x27;</span>:(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;white&#x27;</span>:(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;blackgray&#x27;</span>:(<span class="number">125</span>,<span class="number">125</span>,<span class="number">125</span>),</span><br><span class="line">        <span class="string">&#x27;black&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;rand&#x27;</span>: np.random.randint(<span class="number">0</span>, high=<span class="number">256</span>, size=(<span class="number">3</span>,)).tolist(),</span><br><span class="line">        <span class="string">&#x27;dark gray&#x27;</span>:(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>),</span><br><span class="line">        <span class="string">&#x27;light_gray&#x27;</span>:(<span class="number">220</span>,<span class="number">220</span>,<span class="number">220</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title</span>):</span></span><br><span class="line">    img_RGB = image[:, :, ::-<span class="number">1</span>]</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  创建画布。</span></span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认黑色背景。</span></span><br><span class="line">canvas[:] = colors[<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">show_image(canvas,<span class="string">&quot;blackground&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 画直线：cv2.line</span></span><br><span class="line">cv2.line(canvas,(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">400</span>,<span class="number">400</span>),colors[<span class="string">&#x27;green&#x27;</span>],<span class="number">5</span>)</span><br><span class="line">cv2.line(canvas,(<span class="number">0</span>,<span class="number">400</span>),(<span class="number">400</span>,<span class="number">0</span>),colors[<span class="string">&#x27;black&#x27;</span>],<span class="number">5</span>)</span><br><span class="line">show_image(canvas,<span class="string">&quot;cv2.line()&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 画长方形：cv2.rectangle()</span></span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认黑色背景。</span></span><br><span class="line">canvas[:] = colors[<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">cv2.rectangle(canvas,(<span class="number">150</span>,<span class="number">50</span>),(<span class="number">200</span>,<span class="number">300</span>),colors[<span class="string">&#x27;blue&#x27;</span>],-<span class="number">1</span>)</span><br><span class="line">cv2.rectangle(canvas,(<span class="number">10</span>,<span class="number">50</span>),(<span class="number">70</span>,<span class="number">120</span>),colors[<span class="string">&#x27;green&#x27;</span>],<span class="number">2</span>)</span><br><span class="line">show_image(canvas,<span class="string">&#x27;cv2.rectangle()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 画圆形：cv2.circle()</span></span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认黑色背景。</span></span><br><span class="line">canvas[:] = colors[<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">cv2.circle(canvas,(<span class="number">200</span>,<span class="number">200</span>),<span class="number">150</span>,colors[<span class="string">&#x27;green&#x27;</span>],<span class="number">5</span>)</span><br><span class="line">cv2.circle(canvas,(<span class="number">200</span>,<span class="number">200</span>),<span class="number">50</span>,colors[<span class="string">&#x27;blue&#x27;</span>],-<span class="number">1</span>)</span><br><span class="line">show_image(canvas,<span class="string">&#x27;cv2.circle()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 画折线：cv2.plotlines()</span></span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认黑色背景。</span></span><br><span class="line">canvas[:] = colors[<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pts = np.array([[<span class="number">250</span>, <span class="number">5</span>], [<span class="number">220</span>, <span class="number">80</span>], [<span class="number">280</span>, <span class="number">80</span>]], np.int32) <span class="comment">#定义三个点。</span></span><br><span class="line">pts = pts.reshape((-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)) <span class="comment">#########？？？？？？、</span></span><br><span class="line">cv2.polylines(canvas, [pts], <span class="literal">True</span>, colors[<span class="string">&#x27;green&#x27;</span>], <span class="number">3</span>) <span class="comment">#注意 pts括起来。True表示将点连起来。3表示线宽。</span></span><br><span class="line"></span><br><span class="line">pts2 = np.array([[<span class="number">150</span>, <span class="number">200</span>], [<span class="number">90</span>, <span class="number">130</span>], [<span class="number">280</span>, <span class="number">180</span>]], np.int32)</span><br><span class="line">pts2 = pts2.reshape((-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">cv2.polylines(canvas, [pts2], <span class="literal">False</span>, colors[<span class="string">&#x27;black&#x27;</span>], <span class="number">5</span>) <span class="comment">#False不是闭环，链接顺序是第一个点开始连接，按照第二第三。。的顺序连接？？？</span></span><br><span class="line">show_image(canvas, <span class="string">&quot;cv2.polylines()&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155312761.png" alt="image-20220802155312761"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155321549.png" alt="image-20220802155321549"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155330445.png" alt="image-20220802155330445"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155338899.png" alt="image-20220802155338899"></p><h3 id="2-文字显示"><a href="#2-文字显示" class="headerlink" title="2 文字显示"></a>2 文字显示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. 方法：cv2.putText( )</span></span><br><span class="line"><span class="string">2. 参数：</span></span><br><span class="line"><span class="string">    1 字体格式：</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_SIMPLEX = 0 #####################一般选用第一个。</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_PLAIN = 1</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_DUPLEX = 2</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_COMPLEX = 3</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_TRIPLEX = 4</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_COMPLEX_SMALL = 5</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_SCRIPT_SIMPLEX = 6</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_SCRIPT_COMPLEX = 7</span></span><br><span class="line"><span class="string">    2 线条类型：</span></span><br><span class="line"><span class="string">    cv2.LINE_4,     cv2.LINE_8,   cv2.LINE_AA #####################一般选用最后一个。但是我感觉第一种最清晰耶。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 定义颜色(字典形式)    也就是定义一个像素点（三个字节）下面画图都是根据这些像素点进行填充。</span></span><br><span class="line">colors=&#123;<span class="string">&#x27;blue&#x27;</span>:(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;green&#x27;</span>:(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;red&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;ye11ow&#x27;</span>:(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;magenta&#x27;</span>:(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;cyan&#x27;</span>:(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;white&#x27;</span>:(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;blackgray&#x27;</span>:(<span class="number">125</span>,<span class="number">125</span>,<span class="number">125</span>),</span><br><span class="line">        <span class="string">&#x27;black&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;rand&#x27;</span>: np.random.randint(<span class="number">0</span>, high=<span class="number">256</span>, size=(<span class="number">3</span>,)).tolist(),</span><br><span class="line">        <span class="string">&#x27;dark gray&#x27;</span>:(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>),</span><br><span class="line">        <span class="string">&#x27;light_gray&#x27;</span>:(<span class="number">220</span>,<span class="number">220</span>,<span class="number">220</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title</span>):</span></span><br><span class="line">    <span class="comment"># BGR to RGB</span></span><br><span class="line">    img_RGB = image[:, :, ::-<span class="number">1</span>]</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line">    plt.show()</span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认背景为黑色。</span></span><br><span class="line">show_image(canvas,<span class="string">&#x27;blackground&#x27;</span>)</span><br><span class="line">canvas.fill(<span class="number">255</span>)</span><br><span class="line">show_image(canvas,<span class="string">&#x27;BlackGround&#x27;</span>)</span><br><span class="line"><span class="comment"># #  或者将背景设置为浅灰色：</span></span><br><span class="line"><span class="comment"># canvas[:,:] = colors[&#x27;light_gray&#x27;]</span></span><br><span class="line"><span class="comment"># show_image(canvas,&#x27;BlackGround&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5往画布上输入文本CV2.</span></span><br><span class="line"><span class="comment"># 参数：画布，文本，起始位置，字体型号，字体大小，字体颜色，线条类型。</span></span><br><span class="line">cv2.putText(canvas, <span class="string">&#x27;Hello World&#x27;</span>,(<span class="number">50</span>, <span class="number">50</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.9</span>,colors[<span class="string">&#x27;red&#x27;</span>],cv2.LINE_4)</span><br><span class="line">cv2.putText(canvas, <span class="string">&#x27;Welcome&#x27;</span>,(<span class="number">50</span>, <span class="number">150</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1.4</span>,colors[<span class="string">&#x27;blue&#x27;</span>],cv2.LINE_8)</span><br><span class="line">cv2.putText(canvas, <span class="string">&#x27;Jason&#x27;</span>,(<span class="number">50</span>, <span class="number">250</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1.9</span>,colors[<span class="string">&#x27;black&#x27;</span>],cv2.LINE_4)</span><br><span class="line">show_image(canvas,<span class="string">&quot;Canvas&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155230102.png" alt="image-20220802155230102"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-基本形状&quot;&gt;&lt;a href=&quot;#1-基本形状&quot; class=&quot;headerlink&quot; title=&quot;1 基本形状&quot;&gt;&lt;/a&gt;1 基本形状&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>opencv-直方图统计</title>
    <link href="http://example.com/2022/08/02/opencv-%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/"/>
    <id>http://example.com/2022/08/02/opencv-%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/</id>
    <published>2022-08-02T07:11:57.000Z</published>
    <updated>2022-12-11T02:30:15.511Z</updated>
    
    <content type="html"><![CDATA[<p>在统计学中，直方图是一种对数据分布情况的图形表示，是一种二维统计图表，他的两个坐标分别是统计样本（图像、视频帧）和样本的某种属性（亮度，像素值，梯度，方向，色彩等等任何特征）<br>总结就是：像素强度分布，即：每一个强度值所具有的像素个数。</p><p>特征：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">（1）直方图不再表征任何的图像纹理信息，而是对图像像素的统计。</span></span><br><span class="line"><span class="attr">（2）由于同一物体无论是旋转还是平移在图像中都具有相同的灰度值，因此直方图具有平移不变性、放缩不变性等优点。</span></span><br></pre></td></tr></table></figure><h3 id="1-灰度图的直方图统计"><a href="#1-灰度图的直方图统计" class="headerlink" title="1 灰度图的直方图统计"></a>1 灰度图的直方图统计</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法：显示图片的灰度直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    <span class="comment"># 显示标题</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pos) <span class="comment"># 定位图片</span></span><br><span class="line">    plt.xlabel(<span class="string">&quot;Bins&quot;</span>) <span class="comment"># 横轴信息</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;Pixels&quot;</span>) <span class="comment"># 纵轴信息</span></span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 范围</span></span><br><span class="line">    plt.plot(hist, color=color) <span class="comment"># 绘制直方图##plt.plot！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 主函数 main()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 5 创建画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>)) <span class="comment"># 画布大小</span></span><br><span class="line">    plt.suptitle(<span class="string">&quot;Gray Image Histogram&quot;</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">&quot;bold&quot;</span>) <span class="comment"># 设置标题形式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6 加载图片</span></span><br><span class="line">    img = cv2.imread(<span class="string">&quot;children.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7 灰度转换</span></span><br><span class="line">    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8 计算灰度图的直方图    #############################################</span></span><br><span class="line">    hist_img = cv2.calcHist([img_gray], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    <span class="comment"># hist_img = cv2.calcHist([img_gray], [0], None, [16], [0, 256])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ###设置为16，表示的是在设定好的range= [0,255]，平均分为16个bin。</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    参数详解：</span></span><br><span class="line"><span class="string">    cv2.calcHist(images, channels, mask, histSize, ranges[hist[, accumulate]])</span></span><br><span class="line"><span class="string">    （1）images: 整型类型(uint8和float32)的原图（list形式显示）。##########是列表，用[] 括起来！！！</span></span><br><span class="line"><span class="string">    （2）channels: 通道的索引，例如：[0]代表灰度图片，[0], [1], [2]代表多通道。</span></span><br><span class="line"><span class="string">    （3）mask: 计算图片指定区域的直方图。如果mask为none，那么计算整张图。</span></span><br><span class="line"><span class="string">    （4）histSize(bins): 每个色调值(范围: 0~ 255)对应的像素数量 / 频率。</span></span><br><span class="line"><span class="string">        [这256个值中的每一个都被称为bin，它的取值有8，16，32，64，128，256。在OpenCV中，用histSize表示bins。]</span></span><br><span class="line"><span class="string">    （5）range: 强度值的范围，[0, 256]。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 9 展示灰度直方图</span></span><br><span class="line">    <span class="comment"># 灰度图转换成BGR格式图片    ####</span></span><br><span class="line">    img_BGR = cv2.cvtColor(img_gray, cv2.COLOR_GRAY2BGR) </span><br><span class="line">    img_RGB = img_BGR[:,:,::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_img</span>(<span class="params">img,title,pos</span>):</span></span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">3</span>,pos)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法：显示图片的灰度直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    <span class="comment"># 显示标题</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pos) <span class="comment"># 定位图片</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;Bins&quot;</span>) <span class="comment"># 横轴信息</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;Pixels&quot;</span>) <span class="comment"># 纵轴信息</span></span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 范围</span></span><br><span class="line">    plt.plot(hist, color=color) <span class="comment"># 绘制直方图############plt.plot！！！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果展示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="comment"># (1261, 1920, 3)</span></span><br><span class="line"><span class="built_in">print</span>(img_gray.shape)</span><br><span class="line"><span class="comment"># (1261, 1920)</span></span><br><span class="line"><span class="built_in">print</span>(hist_img.shape)</span><br><span class="line"><span class="comment"># (256, 1)</span></span><br><span class="line"><span class="built_in">print</span>(img_BGR.shape)</span><br><span class="line"><span class="comment"># (1261, 1920, 3)</span></span><br><span class="line"><span class="built_in">print</span>(img_RGB.shape)</span><br><span class="line"><span class="comment"># (1261, 1920, 3)</span></span><br><span class="line">show_img(img,<span class="string">&#x27;img&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">show_img(img_gray,<span class="string">&#x27;img_gray&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">show_img(img_BGR,<span class="string">&#x27;img_BGR&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">show_img(img_RGB,<span class="string">&#x27;img_RGB&#x27;</span>,<span class="number">4</span>)</span><br><span class="line">show_histogram(hist_img, <span class="string">&#x27;hist-img&#x27;</span>, <span class="number">5</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line">plt.savefig(fname=<span class="string">&#x27;children-gray.png&#x27;</span>, figsize=[<span class="number">10</span>, <span class="number">10</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下图：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/image-20220802153408048.png" alt="image-20220802153408048"></p><p>可见，经cv.cvtColor(gray,cv.COLOR_GRAY2BGR)得到的back图像确实是个3通道的，但是每一个像素点的三通道（B、G、R）的数值都是相同的，所以显示出来效果仍是灰度图</p><h3 id="2-灰度图的直方图的加减"><a href="#2-灰度图的直方图的加减" class="headerlink" title="2 灰度图的直方图的加减"></a>2 灰度图的直方图的加减</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 方法：显示图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title, pos</span>):</span></span><br><span class="line">    <span class="comment">#  顺序转换：BGR TO RGB</span></span><br><span class="line">    image_RGB = image[:, :, ::-<span class="number">1</span>] <span class="comment"># shape : (height, width, channel)</span></span><br><span class="line">    <span class="comment"># 显示标题</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pos) <span class="comment"># 定位</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(image_RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 方法：显示图片的灰度直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    <span class="comment"># 显示标题</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pos) <span class="comment"># 定位图片</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;Bins&quot;</span>) <span class="comment"># 横轴信息</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;Pixels&quot;</span>) <span class="comment"># 纵轴信息</span></span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 范围</span></span><br><span class="line">    plt.plot(hist, color=color) <span class="comment"># 绘制直方图</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 主函数 main()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 5 创建画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>)) <span class="comment"># 画布大小</span></span><br><span class="line">    plt.suptitle(<span class="string">&quot;Gray Image Histogram&quot;</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">&quot;bold&quot;</span>) <span class="comment"># 设置标题形式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6 加载图片</span></span><br><span class="line">    img = cv2.imread(<span class="string">&quot;children.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7 灰度转换</span></span><br><span class="line">    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8 计算灰度图的直方图</span></span><br><span class="line">    hist_img = cv2.calcHist([img_gray], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 9 展示灰度直方图</span></span><br><span class="line">    <span class="comment"># 灰度图转换成BGR格式图片</span></span><br><span class="line">    img_BGR = cv2.cvtColor(img_gray, cv2.COLOR_GRAY2BGR)</span><br><span class="line">    show_image(img_BGR, <span class="string">&quot;BGR image&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    show_histogram(hist_img, <span class="string">&quot;gray image histogram&quot;</span>, <span class="number">4</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 10 对图片中的每个像素值增加50个像素   相加后超出255，即为255？？应该是。整张图变白了，轮廓什么的都能看清楚。</span></span><br><span class="line">    M = np.ones(img_gray.shape, np.uint8) * <span class="number">50</span> <span class="comment"># 构建矩阵：形状跟灰度照片一样，但是里面的值全是50.</span></span><br><span class="line"></span><br><span class="line">    added_img = cv2.add(img_gray, M)        <span class="comment">########直接像素值相加。</span></span><br><span class="line">    add_img_hist = cv2.calcHist([added_img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 计算直方图</span></span><br><span class="line">    added_img_BGR = cv2.cvtColor(added_img, cv2.COLOR_GRAY2BGR)</span><br><span class="line">    show_image(added_img_BGR, <span class="string">&quot;added image&quot;</span>, <span class="number">2</span>)</span><br><span class="line">    show_histogram(add_img_hist, <span class="string">&quot;added image hist&quot;</span>, <span class="number">5</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 11 对图片中的每个像素值减去50个像素  相减少于0，即为0，应该是了。整张图变黑了，轮廓什么的都能看清楚。</span></span><br><span class="line">    subtract_img = cv2.subtract(img_gray, M)</span><br><span class="line">    subtract_img_hist = cv2.calcHist([subtract_img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 计算直方图</span></span><br><span class="line">    subtract_img_BGR = cv2.cvtColor(subtract_img, cv2.COLOR_GRAY2BGR)</span><br><span class="line">    show_image(subtract_img_BGR, <span class="string">&quot;subtracted image&quot;</span>, <span class="number">3</span>)</span><br><span class="line">    show_histogram(subtract_img_hist, <span class="string">&quot;subtracted image hist&quot;</span>, <span class="number">6</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line">    plt.savefig(fname=<span class="string">&#x27;gray_image_add_subtract.png&#x27;</span>,figsize=[<span class="number">10</span>, <span class="number">10</span>])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/image-20220802154412057.png" alt="image-20220802154412057"></p><h3 id="3-灰度直方图与掩码"><a href="#3-灰度直方图与掩码" class="headerlink" title="3 灰度直方图与掩码"></a>3 灰度直方图与掩码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 方法：显示图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title, pos</span>):</span></span><br><span class="line">    img_RGB = image[:, :, ::-<span class="number">1</span>] <span class="comment"># BGR to RGB</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, pos)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 方法：显示灰度直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, pos)</span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.plot(hist, color=color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 5 创建画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">7</span>))</span><br><span class="line">    plt.suptitle(<span class="string">&quot;Gray Image and Histogram with mask&quot;</span>, fontsize=<span class="number">4</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6 读取图片并灰度转换，计算直方图，显示</span></span><br><span class="line">    img_gray = cv2.imread(<span class="string">&quot;children.jpg&quot;</span>, cv2.COLOR_BGR2GRAY) <span class="comment"># 读取并进行灰度转换，############一步到位。</span></span><br><span class="line">    img_gray_hist = cv2.calcHist([img_gray], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 计算直方图###########################</span></span><br><span class="line">    <span class="comment">##############好奇怪呀，上面两个例子先读照片再转为灰度图，显示的是灰色的，这里一步到位读取灰度图反而显示的是彩色图。</span></span><br><span class="line">    show_image(img_gray, <span class="string">&quot;image gray&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    show_histogram(img_gray_hist, <span class="string">&quot;image gray histogram&quot;</span>, <span class="number">2</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7 创建mask，计算位图，直方图</span></span><br><span class="line">    mask = np.zeros(img_gray.shape[:<span class="number">2</span>], np.uint8)  <span class="comment">######################先整张图的大小都是mask，下面再截取个四边形赋值为255。</span></span><br><span class="line">    mask[<span class="number">130</span>:<span class="number">500</span>, <span class="number">600</span>:<span class="number">1400</span>] = <span class="number">255</span> <span class="comment"># 获取mask，并赋予颜色  本质上是与操作，跟255相与等于本身，跟框外的0相与等于0，所以哈哈哈哈哈哈</span></span><br><span class="line">    img_mask_hist = cv2.calcHist([img_gray], [<span class="number">0</span>], mask, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 计算mask的直方图##############这里的mask参数变成了mask。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8 通过位运算（与预算）计算带有mask的灰度图片</span></span><br><span class="line">    mask_img = cv2.bitwise_and(img_gray, img_gray, mask = mask)<span class="comment">###########意思就是mask区域外的像素值都变0，都变黑了。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 9 显示带有mask的图片和直方图</span></span><br><span class="line">    show_image(mask_img, <span class="string">&quot;gray image with mask&quot;</span>, <span class="number">3</span>)</span><br><span class="line">    show_histogram(img_mask_hist, <span class="string">&quot;histogram with masked gray image&quot;</span>, <span class="number">4</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment"># mask ： 提取感兴趣区域。</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/image-20220802154508013.png" alt="image-20220802154508013"></p><h3 id="4-三颜色通道的直方图"><a href="#4-三颜色通道的直方图" class="headerlink" title="4 三颜色通道的直方图"></a>4 三颜色通道的直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 方法：显示图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title, pos</span>):</span></span><br><span class="line">    plt.subplot(<span class="number">3</span>, <span class="number">2</span>, pos)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    image_RGB = image[:, :, ::-<span class="number">1</span>] <span class="comment"># BGR to RGB</span></span><br><span class="line">    plt.imshow(image_RGB)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>) <span class="comment">#################把刻度去掉。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 方法：显示彩色直方图 b, g, r</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    plt.subplot(<span class="number">3</span>, <span class="number">2</span>, pos)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    <span class="keyword">for</span> h, c <span class="keyword">in</span> <span class="built_in">zip</span>(hist, color): <span class="comment"># color: (&#x27;b&#x27;, &#x27;g&#x27;, &#x27;r&#x27;)</span></span><br><span class="line">        plt.plot(h, color=c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 方法：计算直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_color_hist</span>(<span class="params">image</span>):</span><span class="comment">########################################通道不同哈啊哈哈哈啊哈，就可以指定了！！！</span></span><br><span class="line">    <span class="comment"># b, g, r</span></span><br><span class="line">    hist = []</span><br><span class="line">    hist.append( cv2.calcHist([image], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]))</span><br><span class="line">    hist.append( cv2.calcHist([image], [<span class="number">1</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]))</span><br><span class="line">    hist.append( cv2.calcHist([image], [<span class="number">2</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]))</span><br><span class="line">    <span class="keyword">return</span> hist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 5.1 创建画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">    plt.suptitle(<span class="string">&quot;Color Histogram&quot;</span>, fontsize=<span class="number">4</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.2 读取原图片</span></span><br><span class="line">    img = cv2.imread(<span class="string">&quot;children.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.3 计算直方图</span></span><br><span class="line">    img_hist = calc_color_hist(img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.4 显示图片和直方图</span></span><br><span class="line">    show_image(img, <span class="string">&quot;RGB Image&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    show_histogram(img_hist, <span class="string">&quot;RGB Image Hist&quot;</span>, <span class="number">2</span>, (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.5 原始图片中的每个像素增加50个像素值</span></span><br><span class="line">    M = np.ones(img.shape, dtype=<span class="string">&quot;uint8&quot;</span>) * <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    added_image = cv2.add(img, M) <span class="comment"># 像素一一对应相加</span></span><br><span class="line">    added_image_hist = calc_color_hist(added_image)</span><br><span class="line">    show_image(added_image, <span class="string">&#x27;added image&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    show_histogram(added_image_hist, <span class="string">&#x27;added image hist&#x27;</span>, <span class="number">4</span>, (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>))<span class="comment">#####这里传入的是元组，不知道列表行不行！！！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.6 原始图片中的每个像素减去50个像素值</span></span><br><span class="line">    subtracted_image = cv2.subtract(img, M)</span><br><span class="line">    subtracted_image_hist = calc_color_hist(subtracted_image)</span><br><span class="line">    show_image(subtracted_image, <span class="string">&#x27;subtracted image&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    show_histogram(subtracted_image_hist, <span class="string">&#x27;subtracted image hist&#x27;</span>, <span class="number">6</span>, (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/image-20220802154614592.png" alt="image-20220802154614592"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在统计学中，直方图是一种对数据分布情况的图形表示，是一种二维统计图表，他的两个坐标分别是统计样本（图像、视频帧）和样本的某种属性（亮度，像素值，梯度，方向，色彩等等任何特征）&lt;br&gt;总结就是：像素强度分布，即：每一个强度值所具有的像素个数。&lt;/p&gt;
&lt;p&gt;特征：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>opencv-图像的八种变换</title>
    <link href="http://example.com/2022/08/01/opencv-%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/"/>
    <id>http://example.com/2022/08/01/opencv-%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/</id>
    <published>2022-08-01T07:33:40.000Z</published>
    <updated>2022-12-11T02:30:15.477Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;kyrie.jpg&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show() <span class="comment">##这个别忘了，然后，似乎颜色都变了。。。。。</span></span><br><span class="line"></span><br><span class="line">h,w,c = img.shape  <span class="comment">#######(高，宽，通道）</span></span><br><span class="line"><span class="built_in">print</span>(h,w,c)</span><br><span class="line"><span class="comment"># 640 640 3</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170113045.png" alt="image-20220801170113045"></p><h2 id="使用cv2-来进行图像变换"><a href="#使用cv2-来进行图像变换" class="headerlink" title="使用cv2 来进行图像变换"></a>使用cv2 来进行图像变换</h2><h3 id="1-图像的放大，缩小"><a href="#1-图像的放大，缩小" class="headerlink" title="1 图像的放大，缩小"></a>1 图像的放大，缩小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （1） 放大：          参数interpolation 表示的是插值算法：INTER_LINEAR表示双线性</span></span><br><span class="line">reszie_img = cv2.resize(img,(w*<span class="number">3</span>,h*<span class="number">2</span>),interpolation=cv2.INTER_LINEAR)   </span><br><span class="line"><span class="built_in">print</span>(reszie_img.shape)</span><br><span class="line"><span class="comment"># (1280, 1920, 3)</span></span><br><span class="line">plt.imshow(reszie_img)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#(2) 缩小</span></span><br><span class="line">small_img = cv2.resize(img,<span class="literal">None</span>,fx=<span class="number">0.5</span>,fy=<span class="number">0.5</span>,interpolation=cv2.INTER_LINEAR)</span><br><span class="line"><span class="built_in">print</span>(small_img.shape)</span><br><span class="line"><span class="comment"># (320, 320, 3)</span></span><br><span class="line">plt.imshow(small_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170220921.png" alt="image-20220801170220921"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170250487.png" alt="image-20220801170250487"></p><h3 id="2-平移"><a href="#2-平移" class="headerlink" title="2 平移"></a>2 平移</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 至于平移矩阵前面的0,1组合，百度吧。</span></span><br><span class="line">h,w = img.shape[:<span class="number">2</span>]</span><br><span class="line">M1 = np.float32([[<span class="number">1</span>,<span class="number">0</span>,<span class="number">100</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">50</span>]])</span><br><span class="line">move_img = cv2.warpAffine(img,M1,(w,h))</span><br><span class="line">plt.imshow(move_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">M2 = np.float32([[<span class="number">1</span>,<span class="number">0</span>,-<span class="number">100</span>],[<span class="number">0</span>,<span class="number">1</span>,-<span class="number">50</span>]])</span><br><span class="line">move_img1 = cv2.warpAffine(img,M2,(w,h))</span><br><span class="line">plt.imshow(move_img1)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170326942.png" alt="image-20220801170326942"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170337054.png" alt="image-20220801170337054"></p><h3 id="3-图像旋转"><a href="#3-图像旋转" class="headerlink" title="3 图像旋转"></a>3 图像旋转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">center = (w//<span class="number">2.0</span>,h//<span class="number">2.0</span>)<span class="comment">#旋转中心</span></span><br><span class="line">M3 = cv2.getRotationMatrix2D(center,<span class="number">180</span>,<span class="number">1</span>) <span class="comment">#逆时针转转180度，负数表示顺时针，1 表示没有缩放。</span></span><br><span class="line">rotation_img = cv2.warpAffine(img,M3,(w,h))</span><br><span class="line">plt.imshow(rotation_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170404821.png" alt="image-20220801170404821"></p><h3 id="4-图像仿射变换"><a href="#4-图像仿射变换" class="headerlink" title="4 图像仿射变换"></a>4 图像仿射变换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  通过一系列原子变换复合实现，具体包括：平移（Translation）、缩放（Scale）、旋转（Rotation）、翻转（Flip）和错切（Shear）</span></span><br><span class="line">p1 = np.float32([[<span class="number">120</span>,<span class="number">35</span>],[<span class="number">215</span>,<span class="number">45</span>],[<span class="number">135</span>,<span class="number">120</span>]])</span><br><span class="line">p2 = np.float32([[<span class="number">135</span>,<span class="number">45</span>],[<span class="number">300</span>,<span class="number">110</span>],[<span class="number">130</span>,<span class="number">230</span>]])</span><br><span class="line">M4 = cv2.getAffineTransform(p1,p2) <span class="comment">####由两个像素点关系得到前后图的关系（这个关系可以有上面的原子变换复合实现）</span></span><br><span class="line">trans_img = cv2.warpAffine(img,M4,(w,h))</span><br><span class="line">plt.imshow(trans_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170432817.png" alt="image-20220801170432817"></p><h3 id="5-图像裁剪"><a href="#5-图像裁剪" class="headerlink" title="5 图像裁剪"></a>5 图像裁剪</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crop_img = img[<span class="number">200</span>:<span class="number">400</span>,<span class="number">150</span>:<span class="number">300</span>]</span><br><span class="line"><span class="built_in">print</span>(crop_img.shape)</span><br><span class="line"><span class="comment"># (200, 150, 3)</span></span><br><span class="line">plt.imshow(crop_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170458897.png" alt="image-20220801170458897"></p><h3 id="6-位运算：（and，or-xor，not）"><a href="#6-位运算：（and，or-xor，not）" class="headerlink" title="6 位运算：（and，or xor，not）"></a>6 位运算：（and，or xor，not）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rectangle = np.zeros((<span class="number">300</span>,<span class="number">300</span>),dtype=<span class="string">&#x27;uint8&#x27;</span>) <span class="comment">####画布大小。</span></span><br><span class="line"><span class="comment"># 参数：画布，第一个点坐标，第二个点坐标（两个点可以确定矩形），颜色，-1表示边框大小很细。</span></span><br><span class="line">rectangle_img = cv2.rectangle(rectangle,(<span class="number">25</span>,<span class="number">25</span>),(<span class="number">275</span>,<span class="number">275</span>),<span class="number">255</span>,-<span class="number">1</span>)</span><br><span class="line">plt.imshow(rectangle_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170803435.png" alt="image-20220801170803435"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rectangle = np.zeros((<span class="number">300</span>,<span class="number">300</span>),dtype=<span class="string">&#x27;uint8&#x27;</span>) <span class="comment">####画布大小。</span></span><br><span class="line"><span class="comment"># 参数：画布，圆点坐标，半径，颜色，-1表示边框大小很细。</span></span><br><span class="line">circle_img = cv2.circle(rectangle,(<span class="number">150</span>,<span class="number">150</span>),<span class="number">150</span>,<span class="number">255</span>,-<span class="number">1</span>)</span><br><span class="line">plt.imshow(circle_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：circle_img = cv2.circle(rectangle,(150,150),150,255,-1)之后</span></span><br><span class="line"><span class="comment"># circle_img跟rectangle其实是一样的哦，意思是在画布上画圆圈</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170846937.png" alt="image-20220801170846937"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （1） 与运算：</span></span><br><span class="line">and_img = cv2.bitwise_and(rectangle_img,circle_img)</span><br><span class="line">plt.imshow(and_img)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#（2）或运算</span></span><br><span class="line">or_img = cv2.bitwise_or(rectangle_img,circle_img)</span><br><span class="line">plt.imshow(or_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170930828.png" alt="image-20220801170930828"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170940871.png" alt="image-20220801170940871"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）异或运算</span></span><br><span class="line">xor_img = cv2.bitwise_xor(rectangle_img,circle_img)</span><br><span class="line">plt.imshow(xor_img)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#（4）非运算</span></span><br><span class="line">not_img=cv2.bitwise_not(circle_img)</span><br><span class="line">plt.imshow(not_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801173829625.png" alt="image-20220801173829625"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171021314.png" alt="image-20220801171021314"></p><h3 id="7-图像的分离和融合"><a href="#7-图像的分离和融合" class="headerlink" title="7 图像的分离和融合"></a>7 图像的分离和融合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;opencv.jpeg&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show() <span class="comment">##这个别忘了，然后，似乎颜色都变了。。。。。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170726457.png" alt="image-20220801170726457"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(1）分离</span></span><br><span class="line">(b,g,r) = cv2.split(img)</span><br><span class="line">plt.imshow(b)</span><br><span class="line">plt.show()</span><br><span class="line">plt.imshow(g)</span><br><span class="line">plt.show()</span><br><span class="line">plt.imshow(r)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171404936.png" alt="image-20220801171404936"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171418254.png" alt="image-20220801171418254"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171429000.png" alt="image-20220801171429000"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (2) 融合。</span></span><br><span class="line">zeros = np.zeros(img.shape[:<span class="number">2</span>],dtype=<span class="string">&quot;uint8&quot;</span>)</span><br><span class="line">merge_img = cv2.merge([zeros,zeros,r])  <span class="comment">#这里应该表示，用r这一个通道跟前面zeros，zeros，两个通道组合成为一张图片数据！</span></span><br><span class="line">plt.imshow(merge_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">merge_img1 = cv2.merge([zeros,g,zeros])</span><br><span class="line">plt.imshow(merge_img1)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">merge_img2 = cv2.merge([b,zeros,zeros])</span><br><span class="line">plt.imshow(merge_img2)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171457604.png" alt="image-20220801171457604"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171506261.png" alt="image-20220801171506261"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171515085.png" alt="image-20220801171515085"></p><h3 id="8-颜色空间：color-space"><a href="#8-颜色空间：color-space" class="headerlink" title="8 颜色空间：color space"></a>8 颜色空间：color space</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(1)灰度</span></span><br><span class="line">gray_img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">plt.imshow(gray_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）hsv（色度，饱和度，纯度）</span></span><br><span class="line">hsv_img = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)</span><br><span class="line">plt.imshow(hsv_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">lab_img = cv2.cvtColor(img,cv2.COLOR_BGR2LAB)</span><br><span class="line">plt.imshow(lab_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171603566.png" alt="image-20220801171603566"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171616322.png" alt="image-20220801171616322"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171625672.png" alt="image-20220801171625672"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>opencv-读取保存图片-读取保存摄像头或视频</title>
    <link href="http://example.com/2022/08/01/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/"/>
    <id>http://example.com/2022/08/01/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/</id>
    <published>2022-08-01T07:33:11.000Z</published>
    <updated>2022-12-11T02:30:15.531Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-加载并显示图片"><a href="#1-加载并显示图片" class="headerlink" title="1 加载并显示图片"></a>1 加载并显示图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parse = argparse.ArgumentParser() <span class="comment">#新建实例</span></span><br><span class="line">parse.add_argument(<span class="string">&#x27;path_image&#x27;</span>,<span class="built_in">help</span> = <span class="string">&#x27;path to input the image&#x27;</span>) <span class="comment">#增加参数</span></span><br><span class="line">args = parse.parse_args() <span class="comment"># 解析参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个参数:&quot;</span>,args.path_image)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(args.path_image))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个参数: kyrie.jpg</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 加载照片 方式1</span></span><br><span class="line">img = cv2.imread(args.path_image)</span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载图片 方式2</span></span><br><span class="line">arg_dict = <span class="built_in">vars</span>(parse.parse_args())  <span class="comment">#以字典的形式保存参数。</span></span><br><span class="line"><span class="built_in">print</span>(arg_dict)</span><br><span class="line"><span class="comment"># &#123;&#x27;path_image&#x27;: &#x27;kyrie.jpg&#x27;&#125;</span></span><br><span class="line">new_img = cv2.imread(arg_dict[<span class="string">&#x27;path_image&#x27;</span>])</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;kyrie1&#x27;</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;kyrie2&#x27;</span>,new_img)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入命令：python 4-read-show-image.py kyrie.jpg</p><p>得到如下效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/image-20220801162046659.png" alt="image-20220801162046659"></p><h3 id="2-加载图，转为灰度图，然后保存图片"><a href="#2-加载图，转为灰度图，然后保存图片" class="headerlink" title="2 加载图，转为灰度图，然后保存图片"></a>2 加载图，转为灰度图，然后保存图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 获取参数</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 添加参数</span></span><br><span class="line">parser.add_argument(<span class="string">&quot;img_input&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;read one image&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;img_output&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;save the processed image&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 解析参数，以字典形式保存参数和值</span></span><br><span class="line">args = <span class="built_in">vars</span>(parser.parse_args())</span><br><span class="line"><span class="built_in">print</span>(args)</span><br><span class="line"><span class="comment"># &#123;&#x27;img_input&#x27;: &#x27;kyrie.jpg&#x27;, &#x27;img_output&#x27;: &#x27;kyrie-gray.jpg&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 5 加载图片</span></span><br><span class="line">img = cv2.imread(args[<span class="string">&quot;img_input&quot;</span>])<span class="comment">#################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 处理：灰度处理</span></span><br><span class="line">img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<span class="comment">#################################</span></span><br><span class="line"><span class="built_in">print</span>(img_gray.shape)</span><br><span class="line"><span class="comment"># (640, 640) 就是变成一个通道的意思。</span></span><br><span class="line"><span class="comment"># 7 保存图片</span></span><br><span class="line">cv2.imwrite(args[<span class="string">&quot;img_output&quot;</span>], img_gray)<span class="comment">############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8 显示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Original Image&quot;</span>, img)<span class="comment">#################################</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Gray Image&quot;</span>, img_gray)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>命令行输入如下： python 5-read_process_save.py “kyrie.jpg” “kyrie-gray.jpg”    得到效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/image-20220801162552723.png" alt="image-20220801162552723"></p><h3 id="3-获取摄像头内容并显示出来摄像头内容"><a href="#3-获取摄像头内容并显示出来摄像头内容" class="headerlink" title="3 获取摄像头内容并显示出来摄像头内容"></a>3 获取摄像头内容并显示出来摄像头内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;index_camera&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;the camera ID&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="comment">########笔记本默认的摄像头ID为0哈，因此，这里运行代码时要输入摄像头ID。</span></span><br><span class="line"><span class="comment">#######自己插入的摄像头ID为1,2，。。。。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the camera index :&quot;</span>, args.index_camera) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">capture = cv2.VideoCapture(args.index_camera) <span class="comment"># 视频捕获</span></span><br><span class="line"></span><br><span class="line">frame_width = capture.get(cv2.CAP_PROP_FRAME_WIDTH) <span class="comment"># 帧的#########宽度</span></span><br><span class="line">frame_height = capture.get(cv2.CAP_PROP_FRAME_HEIGHT) <span class="comment"># 帧的#########高度</span></span><br><span class="line">fps = capture.get(cv2.CAP_PROP_FPS) <span class="comment"># ########################每秒的帧数，实时性，这个参数很重要。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;frame width: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(frame_width))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;frame height: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(frame_height))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;frames per second: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(fps))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> capture.isOpened() <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error Camera !&quot;</span>)</span><br><span class="line"><span class="comment"># 读取视频直到关闭</span></span><br><span class="line"><span class="keyword">while</span> capture.isOpened():</span><br><span class="line">    <span class="comment"># 通过摄像头，一帧一帧的捕获 ##########################一帧一帧哦！</span></span><br><span class="line">    ret, frame = capture.read() <span class="comment">######################ret 的值为True或False，代表有没有读到图片.</span></span><br><span class="line">    <span class="comment"># print(ret)</span></span><br><span class="line">    <span class="keyword">if</span> ret <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 显示捕获的帧</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;frame&quot;</span>, frame) <span class="comment">########在同一个窗口不断显示frame，就组成了视频效果啦，哈哈哈哈！！！</span></span><br><span class="line">        <span class="comment"># 将捕获的帧转化为灰度的帧</span></span><br><span class="line">        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        <span class="comment"># 显示灰度的帧</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;gray frame&quot;</span>, gray_frame)</span><br><span class="line">        <span class="comment"># 键盘输入q，退出视频捕获</span></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>): <span class="comment">######waitKey 参数单位：ms</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放</span></span><br><span class="line">capture.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">命令终端输入：</span></span><br><span class="line"><span class="attr">python</span> <span class="string">6-read_video_from_camera.py 0</span></span><br><span class="line"><span class="attr">终端输出：</span></span><br><span class="line"><span class="attr">the</span> <span class="string">camera index : 0</span></span><br><span class="line"><span class="attr">frame</span> <span class="string">width: 640.0</span></span><br><span class="line"><span class="attr">frame</span> <span class="string">height: 480.0</span></span><br><span class="line"><span class="attr">frames</span> <span class="string">per second: 30.0</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/image-20220801163656311.png" alt="image-20220801163656311"></p><h3 id="4-读取视频，并显示出来视频内容"><a href="#4-读取视频，并显示出来视频内容" class="headerlink" title="4 读取视频，并显示出来视频内容"></a>4 读取视频，并显示出来视频内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 加载库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 获取参数</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 添加参数</span></span><br><span class="line">parser.add_argument(<span class="string">&quot;video_path&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;the path to the video file&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 解析参数</span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 加载视频文件</span></span><br><span class="line">capture = cv2.VideoCapture(args.video_path) <span class="comment">######要么是摄像头ID号，要么是 视频路径哈！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 读取视频</span></span><br><span class="line">ret, frame = capture.read() <span class="comment"># ret 是否读取到了帧（图片）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ret:</span><br><span class="line">    cv2.imshow(<span class="string">&quot;video&quot;</span>, frame)</span><br><span class="line">    ret, frame = capture.read() <span class="comment"># 继续读取帧</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):  <span class="comment">########视频播放完会自动退出，或者在播放完之前按下 键盘 q 也会退出。</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">capture.release()</span><br><span class="line">cv2.destroyAllWindows() <span class="comment"># 关闭</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 输入如下命令运行代码：</span><br><span class="line"># python 7-read_video_from_file.py videos/view.mp4</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/image-20220801162756705.png" alt="image-20220801162756705"></p><h3 id="5-获取摄像头的内容，然后保存为视频格式文件"><a href="#5-获取摄像头的内容，然后保存为视频格式文件" class="headerlink" title="5 获取摄像头的内容，然后保存为视频格式文件"></a>5 获取摄像头的内容，然后保存为视频格式文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment">#  获取参数</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;video_output&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;the path to the output video&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获摄像头</span></span><br><span class="line">capture = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> capture.isOpened() <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Camera Error !&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7 获取帧的属性：宽，高，以及fps</span></span><br><span class="line">frame_width = capture.get(cv2.CAP_PROP_FRAME_WIDTH) <span class="comment"># 宽</span></span><br><span class="line">frame_height = capture.get(cv2.CAP_PROP_FRAME_HEIGHT) <span class="comment"># 高</span></span><br><span class="line">fps = capture.get(cv2.CAP_PROP_FPS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8 对视频进行编码  #################################################</span></span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">&quot;XVID&quot;</span>)</span><br><span class="line"><span class="comment"># 建立写入视频对象。参数分别为:1 写入路径，2 编码格式，3 fps，（w，h），False 表示保存灰度视频。True表示保存rgb彩色视频。</span></span><br><span class="line"><span class="comment"># output_gray = cv2.VideoWriter(args.video_output, fourcc, int(fps), (int(frame_width), int(frame_height)), False)</span></span><br><span class="line">output_gray = cv2.VideoWriter(args.video_output, fourcc, <span class="built_in">int</span>(fps), (<span class="built_in">int</span>(frame_width), <span class="built_in">int</span>(frame_height)), <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9 读取摄像头</span></span><br><span class="line"><span class="keyword">while</span> capture.isOpened():</span><br><span class="line">    ret, frame = capture.read() <span class="comment"># 一帧一帧地读取</span></span><br><span class="line">    <span class="keyword">if</span> ret <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 10 将读取到的帧转换为灰度</span></span><br><span class="line">        <span class="comment"># gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span></span><br><span class="line">        <span class="comment"># 11 将转换后的帧写入都新的视频文件中</span></span><br><span class="line">        <span class="comment"># output_gray.write(gray_frame)  #########################################</span></span><br><span class="line">        output_gray.write(frame)  <span class="comment">#########################################</span></span><br><span class="line">        <span class="comment"># 12 显示视频</span></span><br><span class="line">        <span class="comment"># cv2.imshow(&quot;gray&quot;, gray_frame)</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;rgb&quot;</span>, frame)</span><br><span class="line">        <span class="comment"># 13 等待或按q退出</span></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 14 释放资源</span></span><br><span class="line">capture.release()</span><br><span class="line">output_gray.release() <span class="comment">#########################</span></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">运行输入：</span></span><br><span class="line"><span class="string">python 8-read_camera_save_video.py videos/output-gray-videos.mp4    或者avi格式也行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-加载并显示图片&quot;&gt;&lt;a href=&quot;#1-加载并显示图片&quot; class=&quot;headerlink&quot; title=&quot;1 加载并显示图片&quot;&gt;&lt;/a&gt;1 加载并显示图片&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>py文件参数解析模块argparse</title>
    <link href="http://example.com/2022/08/01/py%E6%96%87%E4%BB%B6%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97argparse/"/>
    <id>http://example.com/2022/08/01/py%E6%96%87%E4%BB%B6%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97argparse/</id>
    <published>2022-08-01T07:31:57.000Z</published>
    <updated>2022-12-11T02:30:15.658Z</updated>
    
    <content type="html"><![CDATA[<p>这个参数解析模块有时候也挺重要的哈，特别是对调试人员来说，对合作伙伴在工作交接，团队协作项目时很重要哦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parse = argparse.ArgumentParser()</span><br><span class="line">parse.add_argument(<span class="string">&quot;number1&quot;</span>,<span class="built_in">help</span> = <span class="string">&#x27;第一个参数&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>)<span class="comment">#第一个参数</span></span><br><span class="line">parse.add_argument(<span class="string">&#x27;number2&#x27;</span>,<span class="built_in">help</span> = <span class="string">&#x27;第二个参数&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>)<span class="comment">#第二个参数</span></span><br><span class="line">args = parse.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个参数:&quot;</span>,args.number1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第二个参数:&quot;</span>,args.number2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;所有参数：&quot;</span>,args)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在命令窗口运行此代码，并且输入参数。</span></span><br><span class="line"><span class="comment"># (hui_tf) E:\PythonCode\唐国梁CV入门课程&gt;python 3-argParse-test.py 3 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个参数: 3</span></span><br><span class="line"><span class="string">第二个参数: 4</span></span><br><span class="line"><span class="string">所有参数： Namespace(number1=3, number2=4)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个参数解析模块有时候也挺重要的哈，特别是对调试人员来说，对合作伙伴在工作交接，团队协作项目时很重要哦&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
</feed>
