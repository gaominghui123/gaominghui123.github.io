<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-18T14:45:14.848Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>高明辉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>乐优商城项目-品牌管理</title>
    <link href="http://example.com/2022/06/18/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/06/18/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/</id>
    <published>2022-06-18T14:42:34.000Z</published>
    <updated>2022-06-18T14:45:14.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="乐优商城项目-品牌管理"><a href="#乐优商城项目-品牌管理" class="headerlink" title="乐优商城项目-品牌管理"></a>乐优商城项目-品牌管理</h1><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>了解品牌表结构</li><li>实现品牌相关业务</li><li>实现图片上传的业务</li></ul><h1 id="1-品牌管理业务"><a href="#1-品牌管理业务" class="headerlink" title="1.品牌管理业务"></a>1.品牌管理业务</h1><p>商品都有自己的品牌，而商品分类、商品品牌、商品之间的关系是这样的：</p><ul><li>分类与品牌之间是多对多关系</li><li>分类与商品之间是一对多关系</li><li>品牌与商品之间也是一对多关系</li></ul><p>下面我们来完成品牌相关业务，包括下面的接口：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200127100920241.png" alt="image-20200127100920241"> </p><h2 id="1-1-表结构"><a href="#1-1-表结构" class="headerlink" title="1.1.表结构"></a>1.1.表结构</h2><p>来看下品牌的表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_brand` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;品牌id&#x27;,</span><br><span class="line">  `name` varchar(64) NOT NULL COMMENT &#x27;品牌名称&#x27;,</span><br><span class="line">  `image` varchar(256) DEFAULT &#x27;&#x27; COMMENT &#x27;品牌图片地址&#x27;,</span><br><span class="line">  `letter` char(1) DEFAULT &#x27;&#x27; COMMENT &#x27;品牌的首字母&#x27;,</span><br><span class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#x27;品牌表&#x27;;</span><br></pre></td></tr></table></figure><p>品牌与商品分类是一对多关系，因此他们需要一个中间表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_category_brand` (</span><br><span class="line">  `category_id` bigint(20) NOT NULL COMMENT &#x27;商品类目id&#x27;,</span><br><span class="line">  `brand_id` bigint(20) NOT NULL COMMENT &#x27;品牌id&#x27;,</span><br><span class="line">  PRIMARY KEY (`category_id`,`brand_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#x27;商品分类和品牌的中间表，两者是多对多关系&#x27;;</span><br></pre></td></tr></table></figure><h2 id="1-2-基础代码"><a href="#1-2-基础代码" class="headerlink" title="1.2.基础代码"></a>1.2.基础代码</h2><p>接下来，准备好PO、DTO、Mapper、Service、Controller等。</p><h3 id="1-2-1-实体类"><a href="#1-2-1-实体类" class="headerlink" title="1.2.1.实体类"></a>1.2.1.实体类</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.entity</code>中准备两个PO，分别对应品牌表和中间表：</p><p>品牌实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Brand</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Character letter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间表实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_category_brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryBrand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long brandId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-mapper"><a href="#1-2-2-mapper" class="headerlink" title="1.2.2.mapper"></a>1.2.2.mapper</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.mapper</code>中准备mapper：</p><p>首先是BrandMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Brand;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后是中间表的mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.CategoryBrand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryBrandMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">CategoryBrand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-service"><a href="#1-2-3-service" class="headerlink" title="1.2.3.service"></a>1.2.3.service</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>中准备两个service接口：</p><p>品牌：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Brand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.CategoryBrand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryBrandService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">CategoryBrand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>com.leyou.item.service.impl</code>中准备两个service的实现类：</p><p>brand:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Brand;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.mapper.BrandMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.BrandService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">BrandMapper</span>, <span class="title">Brand</span>&gt; <span class="keyword">implements</span> <span class="title">BrandService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.CategoryBrand;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.mapper.CategoryBrandMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.CategoryBrandService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryBrandServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">CategoryBrandMapper</span>, <span class="title">CategoryBrand</span>&gt; <span class="keyword">implements</span> <span class="title">CategoryBrandService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-controller"><a href="#1-2-4-controller" class="headerlink" title="1.2.4.controller"></a>1.2.4.controller</h3><p>然后是brand的controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.BrandService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BrandService brandService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BrandController</span><span class="params">(BrandService brandService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brandService = brandService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-5-DTO"><a href="#1-2-5-DTO" class="headerlink" title="1.2.5.DTO"></a>1.2.5.DTO</h3><p>查询品牌后，返回的DTO对象，包括：</p><p>在<code>ly-common</code>中的<code>com.leyou.common.dto</code>中的用于封装分页结果的PageDTO：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageDTO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;<span class="comment">// 总条数</span></span><br><span class="line">    <span class="keyword">private</span> Long totalPage;<span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; items;<span class="comment">// 当前页数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageDTO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageDTO</span><span class="params">(Long total, List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageDTO</span><span class="params">(Long total, Long totalPage, List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = totalPage;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-api</code>中的<code>com.leyou.item.dto</code>中的BrandDTO：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Character letter;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; categoryIds;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BrandDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;BrandDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> list.stream().map(BrandDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-根据品牌id查询品牌"><a href="#1-3-根据品牌id查询品牌" class="headerlink" title="1.3.根据品牌id查询品牌"></a>1.3.根据品牌id查询品牌</h2><p>接口信息：</p><ul><li><p>请求方式：<code>Get</code></p></li><li><p>请求路径：<code>/brand/&#123;id&#125;</code></p></li><li><p>请求参数：id，品牌id</p></li><li><p>返回值类型：BrandDTO，并不包含id集合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;image&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;letter&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的BrandController中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 品牌的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 品牌对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;BrandDTO&gt; <span class="title">queryBrandById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> BrandDTO(brandService.getById(id)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-根据品牌id集合查询品牌集合"><a href="#1-4-根据品牌id集合查询品牌集合" class="headerlink" title="1.4.根据品牌id集合查询品牌集合"></a>1.4.根据品牌id集合查询品牌集合</h2><p>接口信息：</p><ul><li>请求方式：<code>Get</code></li><li>请求路径：<code>/brand/list</code></li><li>请求参数：ids，品牌id的集合</li><li>返回值类型：BrandDTO的集合</li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的BrandController中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据品牌id集合查询品牌集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList id集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BrandDTO 集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;BrandDTO&gt;&gt; queryBrandByIds(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; idList)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(BrandDTO.convertEntityList(brandService.listByIds(idList)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-分页查询品牌"><a href="#1-5-分页查询品牌" class="headerlink" title="1.5.分页查询品牌"></a>1.5.分页查询品牌</h2><p>接口信息：</p><ul><li><p>请求方式：<code>Get</code></p></li><li><p>请求路径：<code>/brand/page</code></p></li><li><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th></tr></thead><tbody><tr><td>key</td><td>搜索条件</td><td>query</td><td>false</td><td>string</td></tr><tr><td>page</td><td>当前页码</td><td>query</td><td>false</td><td>integer</td></tr><tr><td>rows</td><td>每页大小</td><td>query</td><td>false</td><td>integer</td></tr></tbody></table></li><li><p>返回值类型：分页结果PageDTO，其中包含BrandDTO集合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;items&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;image&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;letter&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;total&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;totalPage&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的<code>BrandController</code>中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 当前页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rows 每页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 品牌分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;PageDTO&lt;BrandDTO&gt;&gt; queryBrandByPage(</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span>Integer page,</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;rows&quot;, defaultValue = &quot;5&quot;)</span>Integer rows,</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;key&quot;, required = false)</span>String key</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity</span><br><span class="line">        .ok(brandService.queryBrandByPage(page,rows, key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service</code>的<code>BrandService</code>中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rows 每页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 搜索关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function">PageDTO&lt;BrandDTO&gt; <span class="title">queryBrandByPage</span><span class="params">(Integer page, Integer rows, String key)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service.impl</code>的<code>BrandServiceImpl</code>中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> PageDTO&lt;BrandDTO&gt; <span class="title">queryBrandByPage</span><span class="params">(Integer page, Integer rows, String key)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 1.分页信息的健壮性处理</span></span><br><span class="line">       page = Math.min(page, <span class="number">100</span>);</span><br><span class="line">       rows = Math.max(rows, <span class="number">5</span>);</span><br><span class="line">       <span class="comment">// 2.分页</span></span><br><span class="line">       Page&lt;Brand&gt; info = <span class="keyword">new</span> Page&lt;&gt;(page, rows);</span><br><span class="line">       <span class="comment">// 3.判断key是否存在</span></span><br><span class="line">       <span class="keyword">boolean</span> isKeyExists = StringUtils.isNoneBlank(key);</span><br><span class="line">       <span class="comment">// 4.如果key存在，添加like和eq的查询条件，否则不添加######动态sql</span></span><br><span class="line">       query().like(isKeyExists, <span class="string">&quot;name&quot;</span>, key)</span><br><span class="line">               .or()</span><br><span class="line">               .eq(isKeyExists, <span class="string">&quot;letter&quot;</span>, key)</span><br><span class="line">               .page(info);</span><br><span class="line">       <span class="comment">// 5.封装结果</span></span><br><span class="line">       List&lt;Brand&gt; list = info.getRecords();</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> PageDTO&lt;&gt;(info.getTotal(), info.getPages(), BrandDTO.convertEntityList(list));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-根据分类id查询品牌"><a href="#1-6-根据分类id查询品牌" class="headerlink" title="1.6.根据分类id查询品牌"></a>1.6.根据分类id查询品牌</h2><p>接口信息：</p><ul><li>请求方式：<code>Get</code></li><li>请求路径：<code>/brand/of/category</code></li><li>请求参数：id，分类的id</li><li>返回值类型：BrandDTO的集合</li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的BrandController中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类查询品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 品牌集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;BrandDTO&gt;&gt; queryBrandByCategory(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(brandService.queryBrandByCategory(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service</code>的<code>BrandService</code>中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 品牌集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function">List&lt;BrandDTO&gt; <span class="title">queryBrandByCategory</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure><p>分类和品牌之间是通过中间表联系的，因此要想实现这个功能，需要结合中间表完成查询，实现思路有两种：</p><ul><li><p>思路一：关联查询:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">b.id, b.name, b.letter, b.image </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">tb_category_brand cb </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">tb_brand b <span class="keyword">ON</span> b.id <span class="operator">=</span> cb.brand_id </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">cb.category_id <span class="operator">=</span> #&#123;cid&#125;</span><br></pre></td></tr></table></figure></li><li><p>思路二：子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">id,</span><br><span class="line">`name`,</span><br><span class="line">letter,</span><br><span class="line">image </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">tb_brand</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> brand_id <span class="keyword">FROM</span> tb_category_brand <span class="keyword">WHERE</span> category_id <span class="operator">=</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul><p>这里我们采用思路1.</p><p>首先在<code>ly-item-service</code>中的<code>com.leyou.item.mapper</code>的在<code>BrandMapper</code>中添加一个新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT b.id, b.name, b.letter, b.image FROM tb_category_brand cb INNER JOIN tb_brand b ON b.id = cb.brand_id WHERE cb.category_id = #&#123;cid&#125;&quot;)</span></span><br><span class="line"><span class="function">List&lt;Brand&gt; <span class="title">queryByCategoryId</span><span class="params">(<span class="meta">@Param(&quot;cid&quot;)</span> Long cid)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service.impl</code>的<code>BrandServiceImpl</code>中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;BrandDTO&gt; <span class="title">queryBrandByCategory</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    List&lt;Brand&gt; list = getBaseMapper().queryByCategoryId(id);</span><br><span class="line">    <span class="keyword">return</span> BrandDTO.convertEntityList(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-新增品牌"><a href="#1-7-新增品牌" class="headerlink" title="1.7.新增品牌"></a>1.7.新增品牌</h2><p>解析：<strong>新增品牌，应该是给tb_brand 表格添加信息，中间表tb_categorybrand添加数据</strong>。<strong>一个品牌有多种分类</strong>！！！</p><p>接口信息：</p><ul><li><p>请求方式：<code>POST</code></p></li><li><p>请求路径：<code>/brand</code></p></li><li><p>请求参数：BrandDTO对象</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>categoryIds</td><td>品牌相关的分类ID的集合</td><td>query</td><td>true</td><td>string</td><td></td></tr><tr><td>image</td><td>品牌LOGO</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>letter</td><td>品牌首字母</td><td>query</td><td>true</td><td>string</td><td></td></tr><tr><td>name</td><td>品牌名称</td><td>query</td><td>true</td><td>string</td><td></td></tr></tbody></table></li><li><p>返回值类型：无，状态码</p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>201</td><td>新增成功</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr></tbody></table></li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的BrandController中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brandDTO 品牌对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveBrand</span><span class="params">(BrandDTO brandDTO)</span> </span>&#123;</span><br><span class="line">    brandService.saveBrand(brandDTO);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();<span class="comment">//#####因为是新增，因此返回为null。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service</code>BrandService中添加新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增品牌和中间表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brand 品牌的DTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveBrand</span><span class="params">(BrandDTO brand)</span></span>;</span><br></pre></td></tr></table></figure><p>新增品牌的同时，还需要新增中间表，在<code>ly-item-service</code>中的<code>com.leyou.item.service.impl</code>的<code>BrandServiceImpl</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CategoryBrandService categoryBrandService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BrandServiceImpl</span><span class="params">(CategoryBrandService categoryBrandService)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.categoryBrandService = categoryBrandService;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>  <span class="comment">//###### 新增数据，那么必然是要求事务控制的！</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//##brandDTO对象属性包含了tb_brand 表格部分字段跟categoryBrands表格部分字段。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBrand</span><span class="params">(BrandDTO brandDTO)</span> </span>&#123;</span><br><span class="line">    Brand brand = brandDTO.toEntity(Brand.class);</span><br><span class="line">    <span class="comment">// 保存到表格tb_brand</span></span><br><span class="line">    <span class="keyword">this</span>.save(brand);</span><br><span class="line">    <span class="comment">//封装中间表对象的集合的低级写法：###############################</span></span><br><span class="line">    <span class="comment">/* // 2.获取分类id， 包含手机、空调、洗衣机</span></span><br><span class="line"><span class="comment">        List&lt;Long&gt; categoryIds = brandDTO.getCategoryIds();</span></span><br><span class="line"><span class="comment">        // 3.封装中间表对象集合</span></span><br><span class="line"><span class="comment">        Long brandId = brand.getId();// 小米</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        List&lt;CategoryBrand&gt; categoryBrands = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        for (Long categoryId : categoryIds) &#123;</span></span><br><span class="line"><span class="comment">            // 创建中间表对象</span></span><br><span class="line"><span class="comment">            CategoryBrand categoryBrand = CategoryBrand.of(categoryId, brandId);</span></span><br><span class="line"><span class="comment">            categoryBrands.add(categoryBrand);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    <span class="comment">// 封装中间表对象的集合的高级写法：###############################</span></span><br><span class="line">    List&lt;CategoryBrand&gt; list = brandDTO.getCategoryIds().stream()</span><br><span class="line">        .map(id -&gt; CategoryBrand.of(id, brand.getId()))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 批量写入中间表数据</span></span><br><span class="line">    categoryBrandService.saveBatch(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-8-更新品牌"><a href="#1-8-更新品牌" class="headerlink" title="1.8.更新品牌"></a>1.8.更新品牌</h2><p>接口信息：</p><ul><li><p>请求方式：<code>PUT</code></p></li><li><p>请求路径：<code>/brand</code></p></li><li><p>请求参数：BrandDTO对象</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th></tr></thead><tbody><tr><td>id</td><td>品牌的id</td><td>query</td><td>true</td><td>long</td></tr><tr><td>categoryIds</td><td>品牌相关的分类ID的集合</td><td>query</td><td>true</td><td>string</td></tr><tr><td>image</td><td>品牌LOGO</td><td>query</td><td>false</td><td>string</td></tr><tr><td>letter</td><td>品牌首字母</td><td>query</td><td>true</td><td>string</td></tr><tr><td>name</td><td>品牌名称</td><td>query</td><td>true</td><td>string</td></tr></tbody></table></li><li><p>返回值类型：无，状态码</p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>201</td><td>新增成功</td></tr><tr><td>401</td><td>Unauthorized</td></tr><tr><td>403</td><td>Forbidden</td></tr><tr><td>404</td><td>Not Found</td></tr></tbody></table></li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的BrandController中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改品牌</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brandDTO 品牌及分类信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span>  <span class="comment">//##########这里编程了Put</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateBrand</span><span class="params">(BrandDTO brandDTO)</span> </span>&#123;</span><br><span class="line">    brandService.updateBrand(brandDTO);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();<span class="comment">//还是返回null，但是状态变为NO_CONTENT</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service</code>BrandService中添加新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新品牌</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brandDTO 品牌的DTO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateBrand</span><span class="params">(BrandDTO brandDTO)</span></span>;</span><br></pre></td></tr></table></figure><p>更新品牌还需要同时完成中间表更新。而中间表本身没有其它属性，只包含品牌和分类的id，因此不能修改，只能先删除之前的数据，然后再新增。</p><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service.impl</code>的<code>BrandServiceImpl</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>   <span class="comment">//###########还是事务控制，别忘了。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBrand</span><span class="params">(BrandDTO brandDTO)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.更新品牌</span></span><br><span class="line">    <span class="keyword">boolean</span> success = updateById(brandDTO.toEntity(Brand.class));</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">// 更新失败，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;更新品牌失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.根据品牌id删除中间表数据</span></span><br><span class="line">    success = categoryBrandService.remove(</span><br><span class="line">        <span class="keyword">new</span> QueryWrapper&lt;CategoryBrand&gt;().eq(<span class="string">&quot;brand_id&quot;</span>, brandDTO.getId()));</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">// 更新失败，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>,<span class="string">&quot;更新品牌失败，删除中间表数据出错&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.重新插入中间表数据</span></span><br><span class="line">    List&lt;CategoryBrand&gt; list = brandDTO.getCategoryIds().stream()</span><br><span class="line">        .map(id -&gt; CategoryBrand.of(id, brandDTO.getId()))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 批量写入中间表数据</span></span><br><span class="line">    categoryBrandService.saveBatch(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-9-根据ID删除品牌"><a href="#1-9-根据ID删除品牌" class="headerlink" title="1.9.根据ID删除品牌"></a>1.9.根据ID删除品牌</h2><p>接口信息：</p><ul><li>请求方式：<code>DELETE</code></li><li>请求路径：<code>/brand/&#123;id&#125;</code></li><li>请求参数：id，品牌的id</li><li>返回值类型：无</li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的BrandController中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 要删除的品牌id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">deleteBrandById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 删除品牌表</span></span><br><span class="line">    brandService.removeById(id);</span><br><span class="line">    <span class="comment">// TODO 删除中间表</span></span><br><span class="line">    categoryBrandService.remove(</span><br><span class="line">        <span class="keyword">new</span> QueryWrapper&lt;CategoryBrand&gt;().eq(<span class="string">&quot;brand_id&quot;</span>, id));</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-10-品牌管理页面"><a href="#1-10-品牌管理页面" class="headerlink" title="1.10.品牌管理页面"></a>1.10.品牌管理页面</h2><p>打开后台管理系统，在左侧菜单中点击品牌管理，即可看到品牌管理页面，展示出品牌信息：</p><p> <img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day03_品牌管理/笔记/assets/image-20200712222915519.png" alt="image-20200712222915519"></p><p>在这里测试刚刚编写的接口是否可用。</p><p>注意，我们正常开发的测试流程应该是</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">先在maven给的test文件夹下先对每一个service进行测试，看数据库数据是否交互成功</span></span><br><span class="line"><span class="attr">2</span> <span class="string">借助标准测试工具，测试controller层</span></span><br><span class="line"><span class="attr">3</span> <span class="string">在前端进行controller层进行测试</span></span><br></pre></td></tr></table></figure><h1 id="2-图片上传"><a href="#2-图片上传" class="headerlink" title="2.图片上传"></a>2.图片上传</h1><p>点击页面的新增品牌按钮，发现表单中有一个品牌的LOGO图片需要上传：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200127123754172.png" alt="image-20200127123754172"> </p><p>之前我们的业务中并未处理品牌上传功能。</p><p>在早期的单点项目中，我们<strong>上传文件都是保存在tomcat所在服务器的</strong>。这样存在一些问题：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">单机器存储，存储能力有限</span></span><br><span class="line"><span class="meta">-</span> <span class="string">无法进行水平扩展，因为多台机器的文件无法共享,会出现访问不到的情况</span></span><br><span class="line"><span class="meta">-</span> <span class="string">数据没有备份，有单点故障风险</span></span><br><span class="line"><span class="meta">-</span> <span class="string">并发能力差</span></span><br></pre></td></tr></table></figure><p>这个时候，最好使用<strong>分布式文件存储</strong>来代替<strong>本地文件存储</strong>。</p><h2 id="2-1-分布式文件存储"><a href="#2-1-分布式文件存储" class="headerlink" title="2.1.分布式文件存储"></a>2.1.分布式文件存储</h2><p><strong>分布式文件系统</strong>（Distributed File System）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连。 </p><p>通俗来讲：</p><ul><li>传统文件系统管理的文件就存储在本机。</li><li>分布式文件系统管理的文件<strong>存储在很多机器，这些机器通过网络连接，要被统一管理。无论是上传或者访问文件，都需要通过管理中心来访问</strong>;说白了就是，<strong>我们项目，在网页中交互的图片上传，不是上传到本后端主机，而是使用第三方提供的服务，上传到第三方的分布式文件系统中去</strong>！</li></ul><p>常见的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）、FastDFS（淘宝）等。</p><p>不过，<strong>企业自己搭建分布式文件系统成本较高，对于一些中小型企业而言，使用云上的文件存储，是性价比更高的选</strong>择，比如我们今天要学习的<strong>阿里OSS</strong>。</p><h2 id="2-2-阿里云OSS"><a href="#2-2-阿里云OSS" class="headerlink" title="2.2.阿里云OSS"></a>2.2.阿里云OSS</h2><p>阿里的OSS就是一个文件云存储方案：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552265269170.png" alt="1552265269170"></p><p>简介：</p><blockquote><p>阿里云<strong>对象存储服务</strong>（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。其数据设计持久性不低于99.999999999%，服务设计可用性不低于99.99%。具有与平台无关的RESTful API接口，您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><p>您可以使用阿里云提供的API、SDK接口或者OSS迁移工具轻松地将海量数据移入或移出阿里云OSS。数据存储到阿里云OSS以后，您可以选择标准类型（Standard）的阿里云OSS服务作为移动应用、大型网站、图片分享或热点音视频的主要存储方式，也可以选择成本更低、存储期限更长的低频访问类型（Infrequent Access）和归档类型（Archive）的阿里云OSS服务作为不经常访问数据的备份和归档。</p></blockquote><h3 id="2-2-1-开通oss访问"><a href="#2-2-1-开通oss访问" class="headerlink" title="2.2.1 开通oss访问"></a>2.2.1 开通oss访问</h3><p>首先登陆阿里云，然后找到对象存储的产品：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552307302707.png" alt="1552307302707"></p><p>点击进入后，开通服务：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552307241886.png" alt="1552307241886"></p><p>随后即可进入管理控制台：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552307724634.png" alt="1552307724634"></p><h3 id="2-2-2-基本概念"><a href="#2-2-2-基本概念" class="headerlink" title="2.2.2.基本概念"></a>2.2.2.基本概念</h3><p>OSS中包含一些概念，我们来认识一下：</p><ul><li><p>存储类型（Storage Class）</p><p>OSS提供<strong>标准、低频访问、归档</strong>三种存储类型，全面覆盖从热到冷的各种数据存储场景。其中标准存储类型提供高可靠、高可用、高性能的对象存储服务，能够支持频繁的数据访问；低频访问存储类型适合长期保存不经常访问的数据（平均每月访问频率1到2次），存储单价低于标准类型；归档存储类型适合需要长期保存（建议半年以上）的归档数据，在三种存储类型中单价最低。详情请参见<a href="https://help.aliyun.com/document_detail/51374.html#concept-fcn-3xt-tdb">存储类型介绍</a>。</p></li><li><p><code>存储空间（Bucket）</code></p><p>存储空间是您用于存储对象（Object）的容器，所有的对象都必须隶属于某个存储空间。您可以设置和修改存储空间属性用来控制地域、访问权限、生命周期等，这些属性设置直接作用于该存储空间内所有对象，因此您可以通过灵活创建不同的存储空间来完成不同的管理功能。</p></li><li><p>对象/文件（Object）</p><p>对象是 OSS 存储数据的基本单元，也被称为OSS的文件。对象由元信息（Object Meta），用户数据（Data）和文件名（Key）组成。对象由存储空间内部唯一的Key来标识。对象元信息是一组键值对，表示了对象的一些属性，比如最后修改时间、大小等信息，同时您也可以在元信息中存储一些自定义的信息。</p></li><li><p>地域（Region）</p><p>地域表示 OSS 的数据中心所在物理位置。您可以根据费用、请求来源等综合选择数据存储的地域。详情请参见<a href="https://help.aliyun.com/document_detail/31837.html#concept-zt4-cvy-5db">OSS已开通的Region</a>。</p></li><li><p><code>访问域名（Endpoint</code>）</p><p>Endpoint 表示OSS对外服务的访问域名。OSS以HTTP RESTful API的形式对外提供服务，当访问不同地域的时候，需要不同的域名。通过内网和外网访问同一个地域所需要的域名也是不同的。具体的内容请参见<a href="https://help.aliyun.com/document_detail/31837.html#concept-zt4-cvy-5db">各个Region对应的Endpoint</a>。</p></li><li><p><code>访问密钥（AccessKey）</code></p><p>AccessKey，简称 AK，指的是访问身份验证中用到的AccessKeyId 和AccessKeySecret。OSS通过使用AccessKeyId 和AccessKeySecret对称加密的方法来验证某个请求的发送者身份。AccessKeyId用于标识用户，AccessKeySecret是用户用于加密签名字符串和OSS用来验证签名字符串的密钥，其中AccessKeySecret 必须保密。</p></li></ul><p>以上概念中，跟我们开发中密切相关的有三个：</p><ul><li>存储空间（Bucket）</li><li>访问域名（Endpoint）</li><li>访问密钥（AccessKey）：包含了AccessKeyId 和AccessKeySecret。</li></ul><h3 id="2-2-3-创建一个bucket"><a href="#2-2-3-创建一个bucket" class="headerlink" title="2.2.3.创建一个bucket"></a>2.2.3.创建一个bucket</h3><p>在控制台的右侧，可以看到一个<code>新建Bucket</code>按钮：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552308905874.png" alt="1552308905874"></p><p>点击后，弹出对话框，填写基本信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309049398.png" alt="1552309049398"></p><p>注意点：</p><ul><li>bucket：存储空间名称，名字只能是字母、数字、中划线</li><li>区域：即服务器的地址，这里选择了上海</li><li>Endpoint：选中区域后，会自动生成一个Endpoint地址，这将是我们访问OSS服务的域名的组成部分</li><li>存储类型：默认</li><li>读写权限：这里我们选择公共读，否则每次访问都需要额外生成签名并校验，比较麻烦。敏感数据不要请都设置为私有！</li><li>日志：不开通</li></ul><h3 id="2-2-4-创建AccessKey"><a href="#2-2-4-创建AccessKey" class="headerlink" title="2.2.4.创建AccessKey"></a>2.2.4.创建AccessKey</h3><p><strong>有了bucket就可以进行文件上传或下载了</strong>。不过，为了安全考虑，我们给阿里云账户开通一个子账户，并设置对OSS的读写权限。</p><p>点击屏幕右上角的个人图像，然后点击访问控制：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309424324.png" alt="1552309424324"></p><p>在跳转的页面中，选择用户，并新建一个用户：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309517332.png" alt="1552309517332"></p><p>然后填写用户信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309580867.png" alt="1552309580867"></p><p>然后会为你生成用户的AccessKeyID和AccessKeySecret：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309726968.png" alt="1552309726968"></p><p><strong>妥善保管，不要告诉任何人！</strong></p><p>接下来，我们需要给这个用户添加对OSS的控制权限。</p><p>进入这个新增的用户详情页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309892306.png" alt="1552309892306"></p><p>点击添加权限，会进入权限选择页面，输入oss进行搜索，然后选择<code>管理对象存储服务（OSS）</code>权限：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309962457.png" alt="1552309962457"></p><h2 id="2-3-上传文件最佳实践"><a href="#2-3-上传文件最佳实践" class="headerlink" title="2.3.上传文件最佳实践"></a>2.3.上传文件最佳实践</h2><p>在控制台的右侧，点击<code>开发者指南</code>按钮，即可查看帮助文档：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552310900485.png" alt="1552310900485"></p><p>然后在弹出的新页面的左侧菜单中找到开发者指南：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552310990458.png" alt="1552310990458"> </p><p>可以看到上传文件中，支持多种上传方式，并且因为<strong>提供的Rest风格的API</strong>，<strong>任何语言都可以访问OSS实现上传</strong>。</p><p>我们可以直接<strong>使用java代码来实现把图片上传到OSS</strong>，不过这样以来<strong>文件会先从客户端浏览器上传到我们的服务端tomcat，然后再上传到OSS</strong>，效率较低，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552311281042.png" alt="1552311281042"></p><p>以上方法有三个缺点：</p><ul><li><strong>上传慢。</strong>先上传到应用服务器，再上传到OSS，网络传送比直传到OSS多了一倍。如果直传到OSS，不通过应用服务器，速度将大大提升，而且OSS采用BGP带宽，能保证各地各运营商的速度。</li><li><strong>扩展性差。</strong>如果后续用户多了，应用服务器会成为瓶颈。</li><li><strong>费用高。</strong>需要准备多台应用服务器。由于<strong>OSS上传流量是免费的</strong>，如果数据直传到OSS，不通过应用服务器，那么将能省下几台应用服务器。</li></ul><p>在阿里官方的最佳实践中，推荐了更好的做法：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552311136676.png" alt="1552311136676"> </p><p>阿里官方文档中，对于web前端直传又给出了3种不同方案：</p><ul><li><a href="https://help.aliyun.com/document_detail/31925.html?spm=a2c4g.11186623.2.10.6c5762121wgIAS#concept-frd-4gy-5db">JavaScript客户端签名直传</a>：客户端通过JavaScript代码完成签名，然后通过表单直传数据到OSS。</li><li><a href="https://help.aliyun.com/document_detail/31926.html?spm=a2c4g.11186623.2.11.6c5762121wgIAS#concept-en4-sjy-5db">服务端签名后直传</a>：客户端上传之前，由服务端完成签名，前端获取签名，然后通过表单直传数据到OSS。</li><li><a href="https://help.aliyun.com/document_detail/31927.html?spm=a2c4g.11186623.2.12.6c5762121wgIAS#concept-qp2-g4y-5db">服务端签名直传并设置上传回调</a>：服务端完成签名，并且服务端设置了上传后回调，然后通过表单直传数据到OSS。OSS回调完成后，再将应用服务器响应结果返回给客户端。</li></ul><p>各自有一些优缺点。</p><h3 id="2-3-1-web前端签名后直传"><a href="#2-3-1-web前端签名后直传" class="headerlink" title="2.3.1.web前端签名后直传"></a>2.3.1.web前端签名后直传</h3><p>客户端通过JavaScript代码完成签名，然后通过表单直传数据到OSS。无需访问应用服务器，对应用服务器压力较低。</p><p>流程图如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200127125730699.png" alt="image-20200127125730699"></p><ul><li>JavaScript客户端签名直传：<ul><li>优点：在客户端通过JavaScript代码完成签名，无需过多配置，即可实现直传，非常方便。</li><li>问题：客户端通过JavaScript把AccesssKeyID 和AccessKeySecret写在代码里面<strong>有泄露的风险</strong></li></ul></li><li></li></ul><p><strong>这里我们选择第二种</strong>，因为我们并不需要了解用户上传的文件的情况。</p><h3 id="2-3-2-服务端签名后直传流程"><a href="#2-3-2-服务端签名后直传流程" class="headerlink" title="2.3.2.服务端签名后直传流程"></a>2.3.2.服务端签名后直传流程</h3><p>服务端签名后直传的原理如下：</p><ol><li>用户发送上传Policy请求到应用服务器（我们的微服务）。</li><li>应用服务器返回上传Policy和签名给用户。</li><li>用户直接上传数据到OSS。</li></ol><p>流程图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552311833528.png" alt="1552311833528"></p><ul><li>服务端签名，JavaScript客户端直传：<ul><li>优点：Web端向服务端请求签名，然后直接上传，不会对服务端产生压力，而且安全可靠</li><li>问题：服务端无法实时了解用户上传了多少文件，上传了什么文件</li></ul></li></ul><p>在页面点击上传的按钮，可以看到请求已经发出：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200127132348077.png" alt="image-20200127132348077"> </p><p>这正是在<strong>向服务端申请签名</strong>，接下来我们需要在服务端接收请求，生成签名并返回。</p><p><strong>我们要做的事情包括：</strong></p><ul><li><strong>搭建微服务</strong></li><li><strong>在微服务中，提供一个接口，生成文件上传需要的签名</strong><ul><li>分析接口声明，分析请求方式、请求路径、请求参数、返回值类型</li><li>实现业务，生成签名<ul><li>把一些常量配置到yml文件</li><li>编写类，读取这些属性</li><li>把OSS客户端注入到spring容器</li><li>编写业务，实现签名的生成</li><li>解决跨域问题</li></ul></li></ul></li><li>前端，调用我们的接口，获取签名（已完成）</li><li>前端，携带签名，完成上传（已完成）</li></ul><h2 id="2-4-搭建授权签名微服务"><a href="#2-4-搭建授权签名微服务" class="headerlink" title="2.4.搭建授权签名微服务"></a>2.4.搭建授权签名微服务</h2><p>文件上传并不是商品微服务独有的业务，以后的其它业务也可能用到。而且阿里的AccessKey授权也会在多个地方用到。因此我们<strong>把签名授权功能封装到一个独立的微服务中</strong>，专门做各种授权功能。</p><p>为了方便其它微服务调用，我们依然搭建成聚合工程。</p><h3 id="2-4-1-创建父工程"><a href="#2-4-1-创建父工程" class="headerlink" title="2.4.1.创建父工程"></a>2.4.1.创建父工程</h3><h4 id="项目坐标"><a href="#项目坐标" class="headerlink" title="项目坐标"></a>项目坐标</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206191636648.png" alt="image-20200206191636648"></p><h4 id="存放目录"><a href="#存放目录" class="headerlink" title="存放目录"></a>存放目录</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206191651927.png" alt="image-20200206191651927"></p><h4 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h4><p>修改打包方式为POM即可:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-实体类模块"><a href="#2-4-2-实体类模块" class="headerlink" title="2.4.2.实体类模块"></a>2.4.2.实体类模块</h3><h4 id="项目坐标-1"><a href="#项目坐标-1" class="headerlink" title="项目坐标"></a>项目坐标</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206191824371.png" alt="image-20200206191824371"></p><h4 id="存放位置"><a href="#存放位置" class="headerlink" title="存放位置"></a>存放位置</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206191831294.png" alt="image-20200206191831294"></p><h4 id="pom文件-1"><a href="#pom文件-1" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3-API模块"><a href="#2-4-3-API模块" class="headerlink" title="2.4.3.API模块"></a>2.4.3.API模块</h3><p>坐标：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200418161726186.png" alt="image-20200418161726186"></p><p>存储位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200418161751265.png" alt="image-20200418161751265"></p><p>pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-4-业务模块"><a href="#2-4-4-业务模块" class="headerlink" title="2.4.4.业务模块"></a>2.4.4.业务模块</h3><h4 id="项目坐标-2"><a href="#项目坐标-2" class="headerlink" title="项目坐标"></a>项目坐标</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206192039899.png" alt="image-20200206192039899"></p><h4 id="存放位置-1"><a href="#存放位置-1" class="headerlink" title="存放位置"></a>存放位置</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206192044367.png" alt="image-20200206192044367"></p><h4 id="pom文件-2"><a href="#pom文件-2" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--阿里云OSS的SDK--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--auth-pojo--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通用工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><p>在<code>ly-auth-service</code>的<code>com.leyou.auth</code>包下，新建一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.auth&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyAuthApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyAuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在<code>ly-auth-service</code>的<code>resources</code>目录下，新建一个<code>application.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">auth-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h4 id="网关路由"><a href="#网关路由" class="headerlink" title="网关路由"></a>网关路由</h4><p>在<code>ly-gateway</code>的<code>application.yml</code>中，添加对<code>auth-service</code>的路由：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">auth-service</span> <span class="comment"># 授权服务</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://auth-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/auth/**</span></span><br></pre></td></tr></table></figure><h2 id="2-5-前端请求签名"><a href="#2-5-前端请求签名" class="headerlink" title="2.5.前端请求签名"></a>2.5.前端请求签名</h2><p>在品牌新增的表单中，点击图片上传：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206201955511.png" alt="image-20200206201955511"> </p><p>发现请求已经发出：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206201830638.png" alt="image-20200206201830638"> </p><h3 id="2-5-1-请求分析"><a href="#2-5-1-请求分析" class="headerlink" title="2.5.1.请求分析"></a>2.5.1.请求分析</h3><p>请求分析：</p><ul><li>请求方式：Get</li><li>请求路径：/auth/ali/oss/signature</li><li>请求参数：无（如果有登录用户，会携带登录用户信息）</li><li>返回值：这个需要参考阿里云的<a href="https://help.aliyun.com/document_detail/31927.html?spm=a2c4g.11186623.2.13.34f16e285th61w#concept-qp2-g4y-5db">文档</a>介绍</li></ul><h3 id="2-5-2-签名返回值"><a href="#2-5-2-签名返回值" class="headerlink" title="2.5.2.签名返回值"></a>2.5.2.签名返回值</h3><p>有关签名直传的文档部分：<a href="https://help.aliyun.com/document_detail/31927.html?spm=a2c4g.11186623.2.13.34f16e285th61w#concept-qp2-g4y-5db">https://help.aliyun.com/document_detail/31927.html?spm=a2c4g.11186623.2.13.34f16e285th61w#concept-qp2-g4y-5db</a></p><p>其中，服务端签名返回给服务端的内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;accessId&quot;</span>:<span class="string">&quot;6MKO******4AUk44&quot;</span>,</span><br><span class="line"><span class="attr">&quot;host&quot;</span>:<span class="string">&quot;http://post-test.oss-cn-hangzhou.aliyuncs.com&quot;</span>,</span><br><span class="line"><span class="attr">&quot;policy&quot;</span>:<span class="string">&quot;eyJleHBpcmF0aW9uIjoiMjAxNS0xMS0wNVQyMDo1Mjoy******Jjdb25kaXRpb25zIjpbWyJjdb250ZW50LWxlbmd0aC1yYW5nZSIsMCwxMDQ4NTc2MDAwXSxbInN0YXJ0cy13aXRoIiwiJGtleSIsInVzZXItZGlyXC8iXV19&quot;</span>,</span><br><span class="line"><span class="attr">&quot;signature&quot;</span>:<span class="string">&quot;VsxOcOudx******z93CLaXPz+4s=&quot;</span>,</span><br><span class="line"><span class="attr">&quot;expire&quot;</span>:<span class="number">1446727949</span>,</span><br><span class="line"><span class="attr">&quot;dir&quot;</span>:<span class="string">&quot;user-dirs/&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细解释：</p><ul><li><code>accessId</code>：用户的AccessKeyId</li><li><code>host</code>：申请的阿里OSS的bucket访问地址</li><li><code>policy</code>：文件上传的策略，主要包含对上传文件的要求，利用Base64加密后返回，<a href="https://help.aliyun.com/document_detail/31988.html?spm=a2c4g.11186623.2.22.58cd7eaer5eXWw#section-d5z-1ww-wdb">说明文档</a></li><li><code>signature</code>：生成的签名</li><li><code>expire</code>：本次签名的过期时间，客户端可以换成签名，在有效期内无需再次签名</li><li><code>dir</code>：要上传到bucket中的哪个目录</li></ul><p>我们在项目中定义个DTO用来封装这些结果属性：</p><p>在<code>ly-auth-pojo</code>的<code>com.leyou.auth.dto</code>中，添加新的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliOssSignatureDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String accessId;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> String policy;</span><br><span class="line">    <span class="keyword">private</span> String signature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> expire;</span><br><span class="line">    <span class="keyword">private</span> String dir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-服务端接口声明"><a href="#2-5-3-服务端接口声明" class="headerlink" title="2.5.3.服务端接口声明"></a>2.5.3.服务端接口声明</h3><p>根据上面的请求分析，我们可以定义出一个web接口了：</p><p>首先是controller，在<code>ly-auth-service</code>的<code>com.leyou.auth.web</code>包中，新增一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.AliOssSignatureDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里的相关授权接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;ali&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliAuthController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 申请oss签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含签名、图片验证策略等信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/oss/signature&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;AliOssSignatureDTO&gt; <span class="title">getAliSignature</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-服务端生成签名"><a href="#2-6-服务端生成签名" class="headerlink" title="2.6.服务端生成签名"></a>2.6.服务端生成签名</h2><p>根据之前的分析，我们来编写服务端代码，接收前端请求，返回签名结果。这个要参考官方文档中的Demo。</p><p>文档地址：<a href="https://help.aliyun.com/document_detail/91868.html?spm=a2c4g.11186623.2.16.58cd7eaer5eXWw#concept-ahk-rfz-2fb">https://help.aliyun.com/document_detail/91868.html?spm=a2c4g.11186623.2.16.58cd7eaer5eXWw#concept-ahk-rfz-2fb</a></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 基本属性</span></span><br><span class="line">    String accessId = <span class="string">&quot;&lt;yourAccessKeyId&gt;&quot;</span>; <span class="comment">// 请填写您的AccessKeyId。</span></span><br><span class="line">    String accessKey = <span class="string">&quot;&lt;yourAccessKeySecret&gt;&quot;</span>; <span class="comment">// 请填写您的AccessKeySecret。</span></span><br><span class="line">    String endpoint = <span class="string">&quot;oss-cn-hangzhou.aliyuncs.com&quot;</span>; <span class="comment">// 请填写您的 endpoint。</span></span><br><span class="line">    String bucket = <span class="string">&quot;bucket-name&quot;</span>; <span class="comment">// 请填写您的 bucketname 。</span></span><br><span class="line">    String host = <span class="string">&quot;https://&quot;</span> + bucket + <span class="string">&quot;.&quot;</span> + endpoint; <span class="comment">// host的格式为 bucketname.endpoint</span></span><br><span class="line">   </span><br><span class="line">    String dir = <span class="string">&quot;user-dir-prefix/&quot;</span>; <span class="comment">// 用户上传文件时指定的前缀。</span></span><br><span class="line"><span class="comment">// OSS客户端</span></span><br><span class="line">    OSS client = <span class="keyword">new</span> OSSClient(endpoint, accessId, accessKey);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 过期时间</span></span><br><span class="line">        <span class="keyword">long</span> expireTime = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">long</span> expireEndTime = System.currentTimeMillis() + expireTime * <span class="number">1000</span>;</span><br><span class="line">        Date expiration = <span class="keyword">new</span> Date(expireEndTime);</span><br><span class="line">        <span class="comment">// 上传策略条件</span></span><br><span class="line">        PolicyConditions policyConds = <span class="keyword">new</span> PolicyConditions();</span><br><span class="line">        <span class="comment">// 文件大小限制</span></span><br><span class="line">        policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, <span class="number">0</span>, <span class="number">1048576000</span>);</span><br><span class="line">        <span class="comment">// 文件目录限制</span></span><br><span class="line">        policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);</span><br><span class="line"><span class="comment">// 对策略加密</span></span><br><span class="line">        String postPolicy = client.generatePostPolicy(expiration, policyConds);</span><br><span class="line">        <span class="keyword">byte</span>[] binaryData = postPolicy.getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String encodedPolicy = BinaryUtil.toBase64String(binaryData);</span><br><span class="line"><span class="comment">// 生成签名</span></span><br><span class="line">        String postSignature = client.calculatePostSignature(postPolicy);</span><br><span class="line"><span class="comment">// 准备响应结果</span></span><br><span class="line">        Map&lt;String, String&gt; respMap = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">        respMap.put(<span class="string">&quot;accessid&quot;</span>, accessId);</span><br><span class="line">        respMap.put(<span class="string">&quot;policy&quot;</span>, encodedPolicy);</span><br><span class="line">        respMap.put(<span class="string">&quot;signature&quot;</span>, postSignature);</span><br><span class="line">        respMap.put(<span class="string">&quot;dir&quot;</span>, dir);</span><br><span class="line">        respMap.put(<span class="string">&quot;host&quot;</span>, host);</span><br><span class="line">        respMap.put(<span class="string">&quot;expire&quot;</span>, String.valueOf(expireEndTime / <span class="number">1000</span>));</span><br><span class="line"><span class="comment">// 把结果转JSON</span></span><br><span class="line">        JSONObject ja1 = JSONObject.fromObject(respMap);</span><br><span class="line"><span class="comment">// 写入response</span></span><br><span class="line">        response(request, response, ja1.toString());</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-1-配置属性"><a href="#2-6-1-配置属性" class="headerlink" title="2.6.1.配置属性"></a>2.6.1.配置属性</h3><p>在刚刚的Demo中，有许多是值或者与服务器环境有关，需要定义到配置文件中，在<code>application.yaml</code>中添加下面的属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">accessKeyId:</span> <span class="string">LTAI4FhtSrGpB2mq4N36XbGb</span></span><br><span class="line">    <span class="attr">accessKeySecret:</span> <span class="string">OEavFEiAyGm7OsGYff5TClHx88KJ28</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">http://ly-images.oss-cn-shanghai.aliyuncs.com</span> <span class="comment"># 访问oss的bucket的域名</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">oss-cn-shanghai.aliyuncs.com</span> <span class="comment"># 你选择的oss服务器的地址</span></span><br><span class="line">    <span class="attr">dir:</span> <span class="string">&quot;heima01&quot;</span> <span class="comment"># 保存到bucket的某个子目录</span></span><br><span class="line">    <span class="attr">expireTime:</span> <span class="number">1200000</span> <span class="comment"># 过期时间，单位是ms</span></span><br><span class="line">    <span class="attr">maxFileSize:</span> <span class="number">5242880</span> <span class="comment">#文件大小限制，这里是5M</span></span><br></pre></td></tr></table></figure><p>然后，通过一个类来加载这些属性，在<code>ly-auth-service</code>的<code>com.leyou.auth.config</code>中定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;ly.oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OSSProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String dir;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> expireTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxFileSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-2-配置OSS客户端"><a href="#2-6-2-配置OSS客户端" class="headerlink" title="2.6.2.配置OSS客户端"></a>2.6.2.配置OSS客户端</h3><p>OSS上传需要使用阿里提供的客户端API，其中核心是一个名为OSS的接口：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206224145079.png" alt="image-20200206224145079"></p><p>我们在<code>ly-auth-service</code>的<code>com.leyou.auth.config</code>定义一个配置类，将OSS注入到Spring容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OSSConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OSS <span class="title">ossClient</span><span class="params">(OSSProperties prop)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OSSClientBuilder()</span><br><span class="line">                .build(prop.getEndpoint(), prop.getAccessKeyId(), prop.getAccessKeySecret());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-3-service"><a href="#2-6-3-service" class="headerlink" title="2.6.3.service"></a>2.6.3.service</h3><p>定义业务代码，改造阿里提供的Demo，将结果封装为DTO返回.</p><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service</code>中定义Service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.AliOssSignatureDTO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AliAuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成OSS的文件签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">AliOssSignatureDTO <span class="title">getSignature</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service.impl</code>中定义Service的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.common.utils.BinaryUtil;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.MatchMode;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.PolicyConditions;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.config.OSSProperties;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.AliOssSignatureDTO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliAuthServiceImpl</span> <span class="keyword">implements</span> <span class="title">AliAuthService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OSSProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OSS client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AliAuthServiceImpl</span><span class="params">(OSSProperties ossProperties, OSS client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prop = ossProperties;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AliOssSignatureDTO <span class="title">getSignature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.计算过期时间</span></span><br><span class="line">            <span class="keyword">long</span> expireTime = prop.getExpireTime();</span><br><span class="line">            <span class="keyword">long</span> expireEndTime = System.currentTimeMillis() + expireTime;</span><br><span class="line">            Date expiration = <span class="keyword">new</span> Date(expireEndTime);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.设置上传策略</span></span><br><span class="line">            PolicyConditions policyConds = <span class="keyword">new</span> PolicyConditions();</span><br><span class="line">            <span class="comment">// 2.1.文件大小限制</span></span><br><span class="line">            policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, <span class="number">0</span>, prop.getMaxFileSize());</span><br><span class="line">            <span class="comment">// 2.2.上传目录</span></span><br><span class="line">            policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, prop.getDir());</span><br><span class="line">            <span class="comment">// 2.3.生成策略</span></span><br><span class="line">            String postPolicy = client.generatePostPolicy(expiration, policyConds);</span><br><span class="line">            <span class="comment">// 2.4.编码</span></span><br><span class="line">            <span class="keyword">byte</span>[] binaryData = postPolicy.getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            String encodedPolicy = BinaryUtil.toBase64String(binaryData);</span><br><span class="line">            <span class="comment">// 3.生成签名</span></span><br><span class="line">            String postSignature = client.calculatePostSignature(postPolicy);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4.封装要返回的结果</span></span><br><span class="line">            <span class="keyword">return</span> AliOssSignatureDTO.of(prop.getAccessKeyId(), prop.getHost(), encodedPolicy, postSignature, expireEndTime, prop.getDir());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;上传文件失败，原因：&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;文件上传失败！&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-4-补全controller"><a href="#2-6-4-补全controller" class="headerlink" title="2.6.4.补全controller"></a>2.6.4.补全controller</h3><p>我们给<code>ly-auth-service</code>的<code>com.leyou.auth.web</code>包中的<code>AliAuthController</code>补全业务，调用<code>AliAuthService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.AliOssSignatureDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.service.AliAuthService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里的相关授权接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;ali&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliAuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AliAuthService aliAuthService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AliAuthController</span><span class="params">(AliAuthService aliAuthService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aliAuthService = aliAuthService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 申请oss签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含签名、图片验证策略等信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/oss/signature&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;AliOssSignatureDTO&gt; <span class="title">getAliSignature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(aliAuthService.getSignature());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-启动测试"><a href="#2-7-启动测试" class="headerlink" title="2.7.启动测试"></a>2.7.启动测试</h2><p>启动<code>ly-auth-service</code>，并重启<code>ly-auth-gateway</code>，然后测试上传功能。</p><p>发现<strong>签名正确返回</strong>了：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206233442420.png" alt="image-20200206233442420"> </p><p>结果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206233516457.png" alt="image-20200206233516457"> </p><p>但是<strong>上传失败</strong>了，返回了403的状态码：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206233554422.png" alt="image-20200206233554422"> </p><p>浏览器的控制台也报错了：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206233646040.png" alt="image-20200206233646040"></p><p>这是<strong>跨域问题</strong>。</p><h2 id="2-8-解决跨域问题"><a href="#2-8-解决跨域问题" class="headerlink" title="2.8.解决跨域问题"></a>2.8.解决跨域问题</h2><p>我们在<code>manage.leyou.com</code>访问<code>aliyuncs.com</code>是跨域访问，需要设置跨域许可。</p><p>在阿里OSS的控制台看到这样的信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206233916516.png" alt="image-20200206233916516"></p><p>我们点击设置，进入设置页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206233947861.png" alt="image-20200206233947861"></p><p>点击创建规则，进入跨域请求填写表单：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206234147957.png" alt="image-20200206234147957"> </p><p>填写完成后，再次测试：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206234225867.png" alt="image-20200206234225867"> </p><p>回显：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206234253715.png" alt="image-20200206234253715"> </p><p>上传成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;乐优商城项目-品牌管理&quot;&gt;&lt;a href=&quot;#乐优商城项目-品牌管理&quot; class=&quot;headerlink&quot; title=&quot;乐优商城项目-品牌管理&quot;&gt;&lt;/a&gt;乐优商城项目-品牌管理&lt;/h1&gt;&lt;h1 id=&quot;0-学习目标&quot;&gt;&lt;a href=&quot;#0-学习目标&quot; cla</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="乐优商城项目" scheme="http://example.com/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-分类管理</title>
    <link href="http://example.com/2022/06/17/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/06/17/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/</id>
    <published>2022-06-17T12:24:29.000Z</published>
    <updated>2022-06-18T12:43:40.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h1><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">能利用Nginx实现反向代理</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能使用mybatis-plus完成数据库操作</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能实现商品分类查询业务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能使用Gateway解决跨域问题</span></span><br></pre></td></tr></table></figure><h1 id="1-域名访问"><a href="#1-域名访问" class="headerlink" title="1.域名访问"></a>1.域名访问</h1><p>我们现在访问页面使用的是：<a href="http://localhost:9001/">http://localhost:9001</a></p><p>有没有什么问题？</p><p>实际开发中，会有不同的环境：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">开发环境：自己的电脑</span></span><br><span class="line"><span class="meta">-</span> <span class="string">测试环境：提供给测试人员使用的环境</span></span><br><span class="line"><span class="meta">-</span> <span class="string">预发布环境：数据是和生成环境的数据一致，运行最新的项目代码进去测试</span></span><br><span class="line"><span class="meta">-</span> <span class="string">生产环境：项目最终发布上线的环境</span></span><br></pre></td></tr></table></figure><p>如果不同环境使用不同的ip去访问，可能会出现一些问题。为了<strong>保证所有环境的一致，我们会在各种环境下都使用域名来访问</strong>。</p><p>我们将使用以下域名：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">主域名是：www.leyou.com，</span></span><br><span class="line"><span class="meta">-</span> <span class="string">管理系统域名：manage.leyou.com</span></span><br><span class="line"><span class="meta">-</span> <span class="string">网关域名：api.leyou.com</span></span><br><span class="line"><span class="meta">-</span> <span class="string">图片的域名：image.leyou.com</span></span><br><span class="line"><span class="meta">-</span> <span class="string">...</span></span><br></pre></td></tr></table></figure><p>但是开发环境下，我们希望这些域名指向的还是我们本机的某个端口。</p><p>那么，当我们在<strong>浏览器输入一个域名时，浏览器是如何找到对应服务的ip和端口的呢？</strong></p><h2 id="1-1-域名解析"><a href="#1-1-域名解析" class="headerlink" title="1.1.域名解析"></a>1.1.域名解析</h2><p><strong>一个域名一定会被解析为一个或多个ip</strong>。这一般会包含两步：</p><ul><li><p><strong>本地域名解析</strong></p><p>浏览器会首先在本机的hosts文件中查找域名映射的IP地址，如果查找到就返回IP ，没找到则进行域名服务器解析，一般本地解析都会失败，因为默认这个文件是空的。</p><ul><li>Windows下的hosts文件地址：C:/Windows/System32/drivers/etc/hosts</li><li>Linux下的hosts文件所在路径： /etc/hosts </li></ul><p>样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># My hosts</span><br><span class="line">127.0.0.1 localhost</span><br><span class="line">0.0.0.0 account.jetbrains.com</span><br><span class="line">127.0.0.1 www.xmind.net</span><br></pre></td></tr></table></figure></li><li><p><strong>域名服务器解析</strong></p><p>本地解析失败，才会进行域名服务器解析，域名服务器就是网络中的一台计算机，里面记录了所有注册备案的域名和ip映射关系，一般只要域名是正确的，并且备案通过，一定能找到。</p></li></ul><p>我们可以伪造本地的hosts文件，实现对域名的解析。修改本地的host为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 api.leyou.com</span><br><span class="line">127.0.0.1 manage.leyou.com</span><br><span class="line">127.0.0.1 www.leyou.com</span><br><span class="line">127.0.0.1 image.leyou.com</span><br></pre></td></tr></table></figure><p>这样就实现了域名的关系映射了。</p><p>每次在C盘寻找hosts文件并修改是非常麻烦的，给大家推荐一个快捷修改host的工具，在课前资料中可以找到：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111172800276.png" alt="image-20200111172800276"></p><p>效果：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200710225451221.png" alt="image-20200710225451221"></p><p>我们添加了两个映射关系：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">`127.0.0.1 api.leyou.com` ：我们的网关gateway</span></span><br><span class="line"><span class="meta">-</span> <span class="string">`127.0.0.1 manage.leyou.com`：我们的后台系统地址</span></span><br><span class="line"><span class="meta">-</span> <span class="string">`127.0.0.1 www.leyou.com`：我们的首页地址</span></span><br><span class="line"><span class="meta">-</span> <span class="string">`127.0.0.1 image.leyou.com`：我们的图片地址</span></span><br></pre></td></tr></table></figure><p>现在，ping一下域名试试是否畅通：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/1526015211298.png" alt="1526015211298"></p><p>OK！</p><p>如果加上上一篇博客将的加入了hosts，现在hosts是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 ly-gateway</span><br><span class="line">127.0.0.1 ly-registry</span><br><span class="line">192.168.206.99 ly-mysql</span><br><span class="line">192.168.206.99 ly-redis</span><br><span class="line">192.168.206.99 ly-mq</span><br><span class="line">192.168.206.99 ly-es</span><br><span class="line">127.0.0.1 api.leyou.com</span><br><span class="line">127.0.0.1 manage.leyou.com</span><br><span class="line">127.0.0.1 www.leyou.com</span><br><span class="line">127.0.0.1 image.leyou.com</span><br></pre></td></tr></table></figure><h2 id="1-2-反向代理"><a href="#1-2-反向代理" class="headerlink" title="1.2.反向代理"></a>1.2.反向代理</h2><p>虽然域名解决了，但是现在如果我们要访问<strong>，还得自己加上端口</strong>：<code>http://manage.taotao.com:9001</code>。</p><p>这就不够优雅了。我们希望的是<strong>直接域名访问：<code>http://manage.taotao.com</code>。这种情况下端口默认是80</strong>，如何才能把请求转移到9001端口呢？</p><p>这里就要用到反向代理工具：Nginx（<strong>将反向代理的端口设置为http协议的默认端口80，那么浏览器浏览是就不用输入端口了</strong>）</p><h3 id="1-2-1-认识Nginx"><a href="#1-2-1-认识Nginx" class="headerlink" title="1.2.1.认识Nginx"></a>1.2.1.认识Nginx</h3><p><em>Nginx</em> (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>web服务器，同时也提供了IMAP/POP3/SMTP<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1/100571">服务</a>。</p><p>其特点是占有内存少，<a href="https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91/11024806">并发</a>能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、<a href="https://baike.baidu.com/item/%E4%BA%AC%E4%B8%9C/210931">京东</a>、<a href="https://baike.baidu.com/item/%E6%96%B0%E6%B5%AA/125692">新浪</a>、<a href="https://baike.baidu.com/item/%E7%BD%91%E6%98%93/185754">网易</a>、<a href="https://baike.baidu.com/item/%E8%85%BE%E8%AE%AF/112204">腾讯</a>、<a href="https://baike.baidu.com/item/%E6%B7%98%E5%AE%9D/145661">淘宝</a>等。它的<strong>常见作用包括：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">反向代理（反向代理多个域名+端口）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">负载均衡（对集群进行负载均衡）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">请求限流</span></span><br><span class="line"><span class="meta">-</span> <span class="string">...</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-反向代理原理"><a href="#1-2-2-反向代理原理" class="headerlink" title="1.2.2.反向代理原理"></a>1.2.2.反向代理原理</h3><p>什么是反向代理？</p><ul><li>代理：通过客户机的配置，实现让一台服务器代理客户机，客户的所有请求都交给代理服务器处理。</li><li>反向代理：用一台服务器，代理真实服务器，<strong>用户访问时，不再是访问真实服务器，而是代理服务器</strong>。</li></ul><p>nginx可以当做反向代理服务器来使用：</p><ul><li>我们需要提前在nginx中配置好反向代理的规则，<strong>不同的请求，交给不同的真实服务器处理</strong></li><li>当请求到达nginx，nginx会根据已经定义的规则进行请求的转发，从而<strong>实现路由功能</strong></li></ul><p><strong>利用反向代理，就可以解决我们前面所说的端口问题</strong>，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175118787.png" alt="image-20200111175118787"></p><p>如上面，<strong>nginx根据域名的不同代理了三个服务</strong></p><h2 id="1-3-安装Nginx"><a href="#1-3-安装Nginx" class="headerlink" title="1.3.安装Nginx"></a>1.3.安装Nginx</h2><p>安装非常简单，把课前资料提供的nginx直接解压即可：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175232233.png" alt="image-20200111175232233"> </p><p>绿色免安装，舒服！</p><p>解压后的目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175323969.png" alt="image-20200111175323969"> </p><p>nginx可以通过命令行来启动，打开CMD命令行，然后输入命令：</p><ul><li><p>启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nginx.exe</span><br></pre></td></tr></table></figure></li><li><p>停止： #########注意啊，<strong>每次启动前要先把nginx停掉，因为前面启动的在后台，你要先关闭</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s stop   </span><br></pre></td></tr></table></figure></li><li><p>重新加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure></li></ul><p>启动后，访问：<a href="http://localhost即可访问nginx的默认页面：">http://localhost即可访问nginx的默认页面：</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175634260.png" alt="image-20200111175634260"></p><p>（<strong>为什么访问localhost就会访问nginx呢？</strong>）因为nginx配置文件那里监听的域名+端口就是localhost:80</p><h2 id="1-4-配置nginx反向代理"><a href="#1-4-配置nginx反向代理" class="headerlink" title="1.4.配置nginx反向代理"></a>1.4.配置nginx反向代理</h2><p>进入nginx的配置目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111181528509.png" alt="image-20200111181528509"> </p><h3 id="1）导入自定义配置"><a href="#1）导入自定义配置" class="headerlink" title="1）导入自定义配置"></a>1）导入自定义配置</h3><p>打开<code>nginx.conf</code>文件，然后在文件的最后一行的<code>&#125;</code>上面引入配置：</p><p>(可以在源配置文件修改，但是我们<strong>一般使用外部文件配置，然后导入外部文件就好！</strong>)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> vhost/<span class="regexp">*.conf</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113092131269.png" alt="image-20200113092131269"> </p><p>这个配置的意思是 导入 <strong><code>vhost</code>目录下的所有以<code>.conf</code>为后缀的文件。这样可以做到多配置文件分离，方便管理</strong>。</p><p>现在，我们需要在<code>conf</code>目录中新建一个名为<code>vhost</code>的目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113092403750.png" alt="image-20200113092403750"> </p><p>并在<code>vhost</code>中创建配置文件，这里我们叫<code>leyou.conf</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113092450661.png" alt="image-20200113092450661"> </p><h3 id="2）配置反向代理"><a href="#2）配置反向代理" class="headerlink" title="2）配置反向代理"></a>2）配置反向代理</h3><p>在leyou.conf中写入下面配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  manage.leyou.com;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://127.0.0.1:9001;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  www.leyou.com;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://127.0.0.1:9002;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  api.leyou.com;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://127.0.0.1:10010;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置解读：</p><ul><li><code>server</code>：定义一个监听服务配置<ul><li><code>listen</code>：监听的端口</li><li><code>server_name</code>：监听的域名，端口一致，域名不同也不会处理</li><li><code>location</code>：匹配当前域名下的哪个路径。例如：<code>/</code>，代表的是一切路径<ul><li><code>proxy_pass</code>：监听并匹配成功后，反向代理的目的地，可以指向某个ip和port</li><li><code>proxy_connect_timeout</code>：反向代理后的连接超时时间</li><li><code>proxy_read_timeout</code>：反向代理后的读取超时时间</li></ul></li></ul></li></ul><h3 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a>3）测试</h3><p>由上面的配置可知：</p><ul><li>发送到<a href="http://manage.leyou.com的请求,会被代理到http//127.0.0.1:9001">http://manage.leyou.com的请求，会被代理到http://127.0.0.1:9001</a></li><li>发送到<a href="http://www.leyou.com的请求,会被代理到http//127.0.0.1:9002">http://www.leyou.com的请求，会被代理到http://127.0.0.1:9002</a></li><li>发送到<a href="http://api.leyou.com的请求,会被代理到http//127.0.0.1:10010">http://api.leyou.com的请求，会被代理到http://127.0.0.1:10010</a></li></ul><p>现在，我们重新加载Nginx配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure><p>然后启动leyou-manage，测试用域名访问：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113093320205.png" alt="image-20200113093320205"></p><h2 id="1-5-负载均衡（了解）"><a href="#1-5-负载均衡（了解）" class="headerlink" title="1.5.负载均衡（了解）"></a>1.5.负载均衡（了解）</h2><p>我们的nginx反向代理，目标服务器地址是通过IP和Port来指定，那么新的问题来了：</p><p>如果我们的<code>leyou-manage</code>不是单节点，而是一个<strong>服务集群</strong>，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113094533555.png" alt="image-20200113094533555"></p><p>此时该怎么办呢？nginx该如何配置访问集群中的哪个节点呢？</p><p> 这就需要<strong>负载均衡的策略配置</strong>了。</p><h3 id="1）负载均衡轮询策略"><a href="#1）负载均衡轮询策略" class="headerlink" title="1）负载均衡轮询策略"></a>1）负载均衡轮询策略</h3><p>首先定义负载均衡的集群节点信息，及负载均衡的策略，默认策略是轮询，顾名思义，所有请求都按照时间顺序分配到不同的服务上，如果服务Down掉，可以自动剔除，本例中配置四个节点轮询：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负载均衡配置，默认是轮询</span></span><br><span class="line"><span class="attribute">upstream</span> leyou-manage&#123;</span><br><span class="line"><span class="attribute">server</span><span class="number">127.0.0.1:9001</span>; <span class="comment"># 节点信息</span></span><br><span class="line">    <span class="comment">#server127.0.0.1:9002; # 节点信息</span></span><br><span class="line">    <span class="comment">#server127.0.0.1:9003; # 节点信息</span></span><br><span class="line">    <span class="comment">#server127.0.0.1:9004; # 节点信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后<strong>在反向代理时不要指向具体IP</strong>，而是这里配置的：<code>leyou-manage</code>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  manage.leyou.com;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://leyou-manage;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）加权轮询"><a href="#2）加权轮询" class="headerlink" title="2）加权轮询"></a>2）加权轮询</h3><p>指定每个服务的权重比例，weight和访问比率成正比，通常用于后端服务机器性能不统一，将性能好的分配权重高来发挥服务器最大性能，如下配置后9001服务的访问比率会是9002服务的二倍。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负载均衡配置，默认是轮询</span></span><br><span class="line"><span class="attribute">upstream</span> leyou-manage&#123;</span><br><span class="line"><span class="attribute">server</span><span class="number">127.0.0.1:9001</span> weight=<span class="number">1</span>; <span class="comment"># 节点信息</span></span><br><span class="line">    <span class="attribute">server</span><span class="number">127.0.0.1:9002</span> weight=<span class="number">2</span>; <span class="comment"># 节点信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）IP哈希"><a href="#3）IP哈希" class="headerlink" title="3）IP哈希"></a>3）IP哈希</h3><p>每个请求都根据访问ip的hash结果分配，经过这样的处理，每个访客固定访问一个后端服务</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span>  leyou-manage &#123;</span><br><span class="line">    ip_hash; </span><br><span class="line"><span class="attribute">server</span><span class="number">127.0.0.1:9001</span>; <span class="comment"># 节点信息</span></span><br><span class="line">    <span class="attribute">server</span><span class="number">127.0.0.1:9002</span>; <span class="comment"># 节点信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）最少连接"><a href="#4）最少连接" class="headerlink" title="4）最少连接"></a>4）最少连接</h3><p>将请求分配到连接数最少的服务上。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> leyou-manage&#123;</span><br><span class="line">    least_conn;</span><br><span class="line"><span class="attribute">server</span><span class="number">127.0.0.1:9001</span>; <span class="comment"># 节点信息</span></span><br><span class="line">    <span class="attribute">server</span><span class="number">127.0.0.1:9002</span>; <span class="comment"># 节点信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-MybatisPlus"><a href="#2-MybatisPlus" class="headerlink" title="2.MybatisPlus"></a>2.MybatisPlus</h1><p>mybatis作为持久层框架，其优势是灵活，我们可以<strong>灵活定制sql</strong>。但凡事有利有弊，<strong>灵活的带来的缺点是，很多单表的简单CRUD，依然需要我们自己来写，非常浪费时间</strong>。</p><p>因此我们接下来要学习一个<strong>mybatis的插件：MybatisPlus，可以大大提高Mybatis的开发效率</strong>。</p><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1.介绍"></a>2.1.介绍</h2><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。官网：<a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a></p><blockquote><p>愿景</p><p>我们的愿景是成为 MyBatis 最好的搭档，就像 <a href="https://mp.baomidou.com/img/contra.jpg">魂斗罗</a> 中的 1P、2P，基友搭配，效率翻倍。</p></blockquote><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113103722297.png" alt="image-20200113103722297"></p><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="2-2-快速入门"><a href="#2-2-快速入门" class="headerlink" title="2.2.快速入门"></a>2.2.快速入门</h2><h3 id="2-2-1-准备数据"><a href="#2-2-1-准备数据" class="headerlink" title="2.2.1.准备数据"></a>2.2.1.准备数据</h3><p>首先新建一个库，然后运行下面的sql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 建表</span><br><span class="line">DROP TABLE IF EXISTS user;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line">id BIGINT(20) NOT NULL COMMENT &#x27;主键ID&#x27;,</span><br><span class="line">name VARCHAR(30) NULL DEFAULT NULL COMMENT &#x27;姓名&#x27;,</span><br><span class="line">age INT(11) NULL DEFAULT NULL COMMENT &#x27;年龄&#x27;,</span><br><span class="line">email VARCHAR(50) NULL DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">PRIMARY KEY (id)</span><br><span class="line">);</span><br><span class="line"># 准备数据</span><br><span class="line"></span><br><span class="line">INSERT INTO user (id, name, age, email) VALUES</span><br><span class="line">(1, &#x27;Jone&#x27;, 18, &#x27;test1@baomidou.com&#x27;),</span><br><span class="line">(2, &#x27;Jack&#x27;, 20, &#x27;test2@baomidou.com&#x27;),</span><br><span class="line">(3, &#x27;Tom&#x27;, 28, &#x27;test3@baomidou.com&#x27;),</span><br><span class="line">(4, &#x27;Sandy&#x27;, 21, &#x27;test4@baomidou.com&#x27;),</span><br><span class="line">(5, &#x27;Billie&#x27;, 24, &#x27;test5@baomidou.com&#x27;);</span><br></pre></td></tr></table></figure><h3 id="2-2-2-准备Demo工程"><a href="#2-2-2-准备Demo工程" class="headerlink" title="2.2.2.准备Demo工程"></a>2.2.2.准备Demo工程</h3><p>新建maven工程</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113105132768.png" alt="image-20200113105132768"></p><p>坐标：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113105722583.png" alt="image-20200113105722583"></p><p>项目位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113105729539.png" alt="image-20200113105729539"></p><h3 id="2-2-3-引入依赖"><a href="#2-2-3-引入依赖" class="headerlink" title="2.2.3.引入依赖"></a>2.2.3.引入依赖</h3><p>在项目pom文件写入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus的springboot支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--简化代码的工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-配置"><a href="#2-2-4-配置" class="headerlink" title="2.2.4.配置"></a>2.2.4.配置</h3><p>在resources目录新建application.yml文件，写入下列配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mybatis-plus-demo</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ly-mysql:3306/heima?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">cn.itcast:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="2-2-5-实体类"><a href="#2-2-5-实体类" class="headerlink" title="2.2.5.实体类"></a>2.2.5.实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-6-mapper接口"><a href="#2-2-6-mapper接口" class="headerlink" title="2.2.6.mapper接口"></a>2.2.6.mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里继承了BaseMapper，是MybatisPlus提供的基础接口，里面准备了大量的CRUD方法。</p><h3 id="2-2-7-启动类"><a href="#2-2-7-启动类" class="headerlink" title="2.2.7.启动类"></a>2.2.7.启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.mp.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MpDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MpDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-8-单元测试"><a href="#2-2-8-单元测试" class="headerlink" title="2.2.8.单元测试"></a>2.2.8.单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println((<span class="string">&quot;----- selectAll method test ------&quot;</span>));</span><br><span class="line">        <span class="comment">// 使用BaseMapper提供的selectList方法</span></span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">5</span>, userList.size());</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里测试了BaseMapper提供的查询所有的方法，运行结果如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113111312151.png" alt="image-20200113111312151"></p><h2 id="2-3-一些注解"><a href="#2-3-一些注解" class="headerlink" title="2.3.一些注解"></a>2.3.一些注解</h2><p>上面我们虽然定义了Mapper接口，但是没有写任何SQL，<strong>MybatisPlus是如何知道该查询哪张表呢？</strong></p><p>来看看mapper的定义方式：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113111756204.png" alt="image-20200113111756204"> </p><p>我们在继承BaseMapper时，指定了泛型是<code>&lt;User&gt;</code>，BaseMapper基于反射获取到<code>User</code>的字节码，然后默认就<strong>把类的名称作为表名称</strong>、<strong>把类中的字段作为数据库字段</strong>。</p><p>如果<strong>类名或字段名与数据库不一致，我们可以通过注解来声明</strong>：</p><p>官方文档：<a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p><h3 id="2-3-1-TableName"><a href="#2-3-1-TableName" class="headerlink" title="2.3.1.@TableName"></a>2.3.1.@TableName</h3><p>这个注解用在类上，声明当前类关联的表名称，可以配置下列属性：</p><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th>描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>表名</td></tr><tr><td align="center">schema</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>schema</td></tr><tr><td align="center">keepGlobalPrefix</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td>是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值)</td></tr><tr><td align="center">resultMap</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>xml 中 resultMap 的 id</td></tr><tr><td align="center">autoResultMap</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td>是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)</td></tr></tbody></table><h3 id="2-3-2-TableId"><a href="#2-3-2-TableId" class="headerlink" title="2.3.2.@TableId"></a>2.3.2.@TableId</h3><ul><li>描述：主键注解</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">主键字段名</td></tr><tr><td align="center">type</td><td align="center">Enum</td><td align="center">否</td><td align="center">IdType.NONE</td><td align="center"><strong>主键类型</strong>，通过IdType枚举指定</td></tr></tbody></table><ul><li>IdType的枚举项：</li></ul><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">AUTO</td><td align="center"><strong>数据库ID自增</strong></td></tr><tr><td align="center">NONE</td><td align="center">无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td></tr><tr><td align="center">INPUT</td><td align="center">insert前自行set主键值</td></tr><tr><td align="center">ASSIGN_ID</td><td align="center">分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr><tr><td align="center">ASSIGN_UUID</td><td align="center">分配UUID,主键类型为String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认default方法)</td></tr></tbody></table><h3 id="2-3-3-TableField"><a href="#2-3-3-TableField" class="headerlink" title="2.3.3.@TableField"></a>2.3.3.@TableField</h3><ul><li>描述：字段注解(非主键)</li><li>属性：</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段名</td></tr><tr><td align="center">el</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">映射为原生 <code>#&#123; ... &#125;</code> 逻辑,相当于写在 xml 里的 <code>#&#123; ... &#125;</code> 部分</td></tr><tr><td align="center">exist</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否为数据库表字段</td></tr><tr><td align="center">condition</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>where</code> 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局的 <code>%s=#&#123;%s&#125;</code>,<a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/SqlCondition.java">参考</a></td></tr><tr><td align="center">update</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>update set</code> 部分注入, 例如：update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 <code>el</code> 属性)</td></tr><tr><td align="center">insertStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_NULL: <code>insert into table_a(column) values (#&#123;columnProperty&#125;)</code></td></tr><tr><td align="center">updateStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：IGNORED: <code>update table_a set column=#&#123;columnProperty&#125;</code></td></tr><tr><td align="center">whereStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_EMPTY: <code>where column=#&#123;columnProperty&#125;</code></td></tr><tr><td align="center">fill</td><td align="center">Enum</td><td align="center">否</td><td align="center">FieldFill.DEFAULT</td><td align="center">字段自动填充策略</td></tr><tr><td align="center">select</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否进行 select 查询</td></tr><tr><td align="center">keepGlobalFormat</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td align="center">是否保持使用全局的 format 进行处理</td></tr><tr><td align="center">jdbcType</td><td align="center">JdbcType</td><td align="center">否</td><td align="center">JdbcType.UNDEFINED</td><td align="center">JDBC类型 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">typeHandler</td><td align="center">Class&lt;? extends TypeHandler&gt;</td><td align="center">否</td><td align="center">UnknownTypeHandler.class</td><td align="center">类型处理器 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">numericScale</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">指定小数点后保留的位数</td></tr></tbody></table><h2 id="2-4-常见配置"><a href="#2-4-常见配置" class="headerlink" title="2.4.常见配置"></a>2.4.常见配置</h2><p>MyBatisPlus配置整合了部分原来的Mybatis配置，都可以通过yaml文件来配置。</p><p>详见文档：<a href="https://mp.baomidou.com/config/">https://mp.baomidou.com/config/</a></p><p>例如：mapper文件地址、别名扫描包等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.item.entity</span> <span class="comment"># 别名扫描包</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mappers/*.xml</span> <span class="comment"># mapper的xml文件地址</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># 全局主键策略，默认为自增长</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span> <span class="comment"># 更新时，只更新非null字段（不会将原来的字段设置为null）</span></span><br><span class="line">      <span class="attr">insert-strategy:</span> <span class="string">not_null</span> <span class="comment"># 新增时，只新增非null字段</span></span><br></pre></td></tr></table></figure><p>1  id-type 默认值为 <strong>id生成器生成</strong> 策略（worker），是<strong>根据雪花算法生成的id</strong>。但是如果带给数据库的数据id本身有值，那么woker策略也很聪明，就不用雪花算法生成了，直接使用本来的id。当数据库表id本来是主键自增，但是我们这里设置了默认策略，那还是<strong>按照mybatis-plus框架设置的主键策略优先</strong>，因为数据到达库中时，id已经生成了哈！</p><p>2  id-type配置为auto，那么在插入时id没有被带到数据库。</p><p>3  id-type 配置为input，表示插入表中的id由实体类对象的id决定。</p><p><strong>错误的用法：</strong>代码配置了自增，但是库没有自增，那么就会报错。因为代码配置了自增，就算插入的数据本来有id，那么框架也会把id值给去掉，意思是数据<strong>到达数据库时是不带id的</strong>，而数据库又 没有自增，那就gg了！</p><p><strong>全局配置</strong>：在配置文件中配置。</p><p><strong>局部配置</strong>：到实体类中进行配置，优先级高于全局配置。</p><p>比如说，有十张表是主键自增的，有一张不是主键自增的，那么就可以在配置文件中，id的type配置为auto，然后到另外一张表对应的实体类中的id字段上面的TableId注解中，添加type属性为input，或者woker。</p><h2 id="2-5-BaseMapper的CRUD"><a href="#2-5-BaseMapper的CRUD" class="headerlink" title="2.5.BaseMapper的CRUD"></a>2.5.BaseMapper的CRUD</h2><p>在MybatisPlus中，<strong>BaseMapper中定义</strong>了一些常用的CRUD方法，当我们<strong>自定义的Mapper接口继承BaseMapper后即可拥有了这些方法</strong>。</p><h3 id="2-5-1-新增"><a href="#2-5-1-新增" class="headerlink" title="2.5.1.新增"></a>2.5.1.新增</h3><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T entity)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr></tbody></table><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">6L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;Amy&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">16</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;amy@itcast.cn&quot;</span>);</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11:49:28.988 DEBUG 30192 --- [           main] cn.itcast.mp.mapper.UserMapper.insert    : ==&gt;  Preparing: INSERT INTO user ( id, name, email, age ) VALUES ( ?, ?, ?, ? ) </span><br><span class="line">11:49:29.004 DEBUG 30192 --- [           main] cn.itcast.mp.mapper.UserMapper.insert    : ==&gt; Parameters: 6(Long), Amy(String), amy@itcast.cn(String), 16(Integer)</span><br><span class="line">11:49:29.007 DEBUG 30192 --- [           main] cn.itcast.mp.mapper.UserMapper.insert    : &lt;==    Updates: 1</span><br></pre></td></tr></table></figure><h3 id="2-5-2-删除"><a href="#2-5-2-删除" class="headerlink" title="2.5.2.删除"></a>2.5.2.删除</h3><h4 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span></span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-10">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">wrapper</td><td align="center">实体对象封装操作类（可以为 null）</td></tr><tr><td align="center">Collection&lt;? extends Serializable&gt;</td><td align="center">idList</td><td align="center">主键ID列表(不能为 null 以及 empty)</td></tr><tr><td align="center">Serializable</td><td align="center">id</td><td align="center">主键ID</td></tr><tr><td align="center">Map&lt;String, Object&gt;</td><td align="center">columnMap</td><td align="center">表字段 map 对象</td></tr></tbody></table><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> count = userMapper.delete(</span><br><span class="line">              <span class="keyword">new</span> QueryWrapper&lt;User&gt;()</span><br><span class="line">                      .eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Amy&quot;</span>));</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-07-14 00:07:50.322 DEBUG 30156 --- [           main] cn.itcast.mp.mapper.UserMapper.delete    : ==&gt;  Preparing: DELETE FROM user WHERE (name = ?) </span><br><span class="line">2020-07-14 00:07:50.367 DEBUG 30156 --- [           main] cn.itcast.mp.mapper.UserMapper.delete    : ==&gt; Parameters: Amy(String)</span><br><span class="line">2020-07-14 00:07:50.371 DEBUG 30156 --- [           main] cn.itcast.mp.mapper.UserMapper.delete    : &lt;==    Updates: 1</span><br></pre></td></tr></table></figure><h3 id="2-5-3-修改"><a href="#2-5-3-修改" class="headerlink" title="2.5.3.修改"></a>2.5.3.修改</h3><h4 id="方法：-2"><a href="#方法：-2" class="headerlink" title="方法："></a>方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 修改</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象 (set 条件值,可为 null)</td></tr><tr><td align="center">Wrapper<T></td><td align="center">updateWrapper</td><td align="center">实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</td></tr></tbody></table><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">5L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> count = userMapper.updateById(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;修改成功!, count = &quot;</span> + count );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-07-14 00:12:03.403 DEBUG 6188 --- [           main] cn.itcast.mp.mapper.UserMapper.update    : ==&gt;  Preparing: UPDATE user SET name=? WHERE (age = ?) </span><br><span class="line">2020-07-14 00:12:03.438 DEBUG 6188 --- [           main] cn.itcast.mp.mapper.UserMapper.update    : ==&gt; Parameters: lisi(String), 24(Integer)</span><br><span class="line">2020-07-14 00:12:03.440 DEBUG 6188 --- [           main] cn.itcast.mp.mapper.UserMapper.update    : &lt;==    Updates: 1</span><br><span class="line">修改成功!, count = 1</span><br></pre></td></tr></table></figure><h3 id="2-5-4-查询单个"><a href="#2-5-4-查询单个" class="headerlink" title="2.5.4.查询单个"></a>2.5.4.查询单个</h3><h4 id="方法列表"><a href="#方法列表" class="headerlink" title="方法列表:"></a>方法列表:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line"><span class="function">T <span class="title">selectById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="function">T <span class="title">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="#参数说明:"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-12">#</a>参数说明:</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Serializable</td><td align="center">id</td><td align="center">主键ID</td></tr><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类（可以为 null）</td></tr></tbody></table><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 根据ID查询</span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-5-查询集合："><a href="#2-5-5-查询集合：" class="headerlink" title="2.5.5.查询集合："></a>2.5.5.查询集合：</h3><h4 id="方法列表："><a href="#方法列表：" class="headerlink" title="方法列表："></a>方法列表：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; selectMaps(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h4><p>1）根据id集合查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryByIdList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 根据ID查询</span></span><br><span class="line">    List&lt;User&gt; list = userMapper.selectBatchIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>));</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）根据wrapper查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryByWrapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义wrapper</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">// 模糊</span></span><br><span class="line">    wrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">        <span class="comment">// 范围</span></span><br><span class="line">        .le(<span class="string">&quot;age&quot;</span>, <span class="number">30</span>)</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        .orderByAsc(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(wrapper);</span><br><span class="line"></span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的sql：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name,email,age <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> (name <span class="keyword">LIKE</span> ? <span class="keyword">AND</span> age <span class="operator">&lt;=</span> ?) <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h3 id="2-5-6-分页查询"><a href="#2-5-6-分页查询" class="headerlink" title="2.5.6.分页查询"></a>2.5.6.分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="function">IPage&lt;T&gt; <span class="title">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="function">Integer <span class="title">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br></pre></td></tr></table></figure><p>分页查询需要引入额外的插件才能生效。</p><h4 id="1）引入分页插件"><a href="#1）引入分页插件" class="headerlink" title="1）引入分页插件"></a>1）引入分页插件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.optimize.JsqlParserCountOptimize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册mybatis plus的分页插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor = <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">        <span class="comment">// 开启 count 的 join 优化,只针对部分 left join</span></span><br><span class="line">        paginationInterceptor.setCountSqlParser(<span class="keyword">new</span> JsqlParserCountOptimize(<span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）测试分页"><a href="#2）测试分页" class="headerlink" title="2）测试分页"></a>2）测试分页</h4><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 分页条件</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;();</span><br><span class="line">    <span class="comment">// 当前页</span></span><br><span class="line">    page.setCurrent(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 每页大小</span></span><br><span class="line">    page.setSize(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 分页查询，结果会放到Page&lt;User&gt;中，因此无需返回</span></span><br><span class="line">    userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总条数</span></span><br><span class="line">    <span class="keyword">long</span> total = page.getTotal();</span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line"><span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">long</span> pages = page.getPages();</span><br><span class="line">    System.out.println(<span class="string">&quot;pages = &quot;</span> + pages);</span><br><span class="line">    <span class="comment">// 当前页结果</span></span><br><span class="line">    List&lt;User&gt; list = page.getRecords();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">01</span>-<span class="number">13</span> <span class="number">13</span>:<span class="number">23</span>:<span class="number">55.761</span> DEBUG <span class="number">41364</span> --- [           main] c.i.mp.mapper.UserMapper.selectPage      : ==&gt;  Preparing: <span class="function">SELECT <span class="title">COUNT</span><span class="params">(<span class="number">1</span>)</span> FROM user </span></span><br><span class="line"><span class="function">2020-01-13 13:23:55.776 DEBUG 41364 --- [           main] c.i.mp.mapper.UserMapper.selectPage      : </span>==&gt; Parameters: </span><br><span class="line"><span class="number">2020</span>-<span class="number">01</span>-<span class="number">13</span> <span class="number">13</span>:<span class="number">23</span>:<span class="number">55.787</span> DEBUG <span class="number">41364</span> --- [           main] c.i.mp.mapper.UserMapper.selectPage      : ==&gt;  Preparing: SELECT id,name,email,age FROM user LIMIT ?,? </span><br><span class="line"><span class="number">2020</span>-<span class="number">01</span>-<span class="number">13</span> <span class="number">13</span>:<span class="number">23</span>:<span class="number">55.788</span> DEBUG <span class="number">41364</span> --- [           main] c.i.mp.mapper.UserMapper.selectPage      : ==&gt; Parameters: <span class="number">0</span>(Long), <span class="number">3</span>(Long)</span><br><span class="line"><span class="number">2020</span>-<span class="number">01</span>-<span class="number">13</span> <span class="number">13</span>:<span class="number">23</span>:<span class="number">55.791</span> DEBUG <span class="number">41364</span> --- [           main] c.i.mp.mapper.UserMapper.selectPage      : &lt;==      Total: <span class="number">3</span></span><br><span class="line">total = <span class="number">5</span></span><br><span class="line">pages = <span class="number">2</span></span><br><span class="line">User(id=<span class="number">1</span>, name=Jone, age=<span class="number">18</span>, email=test1<span class="meta">@baomidou</span>.com)</span><br><span class="line">User(id=<span class="number">2</span>, name=Jack, age=<span class="number">20</span>, email=test2<span class="meta">@baomidou</span>.com)</span><br><span class="line">User(id=<span class="number">3</span>, name=Tom, age=<span class="number">28</span>, email=test3<span class="meta">@baomidou</span>.com)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-6-IService的CRUD"><a href="#2-6-IService的CRUD" class="headerlink" title="2.6.IService的CRUD"></a>2.6.IService的CRUD</h2><p>MybatisPlus除了提供BaseMapper，还提供了<strong>通用的Service接口：<code>IService</code></strong></p><p>也就是说：<strong>将业务前置到了service层！！！！！！！！</strong></p><h3 id="2-6-1-新增"><a href="#2-6-1-新增" class="headerlink" title="2.6.1.新增"></a>2.6.1.新增</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">save</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-3"><a href="#参数说明-3" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr><tr><td align="center">Collection<T></td><td align="center">entityList</td><td align="center">实体对象集合</td></tr><tr><td align="center">int</td><td align="center">batchSize</td><td align="center">插入批次数量</td></tr></tbody></table><h3 id="2-6-2-SaveOrUpdate"><a href="#2-6-2-SaveOrUpdate" class="headerlink" title="2.6.2.SaveOrUpdate"></a>2.6.2.SaveOrUpdate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-4"><a href="#参数说明-4" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-2">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr><tr><td align="center">Wrapper<T></td><td align="center">updateWrapper</td><td align="center">实体对象封装操作类 UpdateWrapper</td></tr><tr><td align="center">Collection<T></td><td align="center">entityList</td><td align="center">实体对象集合</td></tr><tr><td align="center">int</td><td align="center">batchSize</td><td align="center">插入批次数量</td></tr></tbody></table><h3 id="2-6-3-删除"><a href="#2-6-3-删除" class="headerlink" title="2.6.3.删除"></a>2.6.3.删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-5"><a href="#参数说明-5" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-3">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体包装类 QueryWrapper</td></tr><tr><td align="center">Serializable</td><td align="center">id</td><td align="center">主键ID</td></tr><tr><td align="center">Map&lt;String, Object&gt;</td><td align="center">columnMap</td><td align="center">表字段 map 对象</td></tr><tr><td align="center">Collection&lt;? extends Serializable&gt;</td><td align="center">idList</td><td align="center">主键ID列表</td></tr></tbody></table><h3 id="2-6-4-修改"><a href="#2-6-4-修改" class="headerlink" title="2.6.4.修改"></a>2.6.4.修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">update</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 选择修改</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateById</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-6"><a href="#参数说明-6" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-4">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">updateWrapper</td><td align="center">实体对象封装操作类 UpdateWrapper</td></tr><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr><tr><td align="center">Collection<T></td><td align="center">entityList</td><td align="center">实体对象集合</td></tr><tr><td align="center">int</td><td align="center">batchSize</td><td align="center">更新批次数量</td></tr></tbody></table><h3 id="2-6-5-查询单个"><a href="#2-6-5-查询单个" class="headerlink" title="2.6.5.查询单个"></a>2.6.5.查询单个</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line"><span class="function">T <span class="title">getById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span></span><br><span class="line"><span class="function">T <span class="title">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line"><span class="function">T <span class="title">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="keyword">boolean</span> throwEx)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">&lt;V&gt; <span class="function">V <span class="title">getObj</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="keyword">super</span> Object, V&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-7"><a href="#参数说明-7" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-5">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Serializable</td><td align="center">id</td><td align="center">主键ID</td></tr><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类 QueryWrapper</td></tr><tr><td align="center">boolean</td><td align="center">throwEx</td><td align="center">有多个 result 是否抛出异常</td></tr><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr><tr><td align="center">Function&lt;? super Object, V&gt;</td><td align="center">mapper</td><td align="center">转换函数</td></tr></tbody></table><h3 id="2-6-6-查询多个"><a href="#2-6-6-查询多个" class="headerlink" title="2.6.6.查询多个"></a>2.6.6.查询多个</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="function">Collection&lt;T&gt; <span class="title">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="function">Collection&lt;T&gt; <span class="title">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 查询所有列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMaps();</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMaps(Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">listObjs</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">&lt;V&gt; <span class="function">List&lt;V&gt; <span class="title">listObjs</span><span class="params">(Function&lt;? <span class="keyword">super</span> Object, V&gt; mapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">&lt;V&gt; <span class="function">List&lt;V&gt; <span class="title">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="keyword">super</span> Object, V&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="参数说明-8"><a href="#参数说明-8" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-6">#</a>参数说明</h5><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类 QueryWrapper</td></tr><tr><td align="center">Collection&lt;? extends Serializable&gt;</td><td align="center">idList</td><td align="center">主键ID列表</td></tr><tr><td align="center">Map&lt;?String, Object&gt;</td><td align="center">columnMap</td><td align="center">表字段 map 对象</td></tr><tr><td align="center">Function&lt;? super Object, V&gt;</td><td align="center">mapper</td><td align="center">转换函数</td></tr></tbody></table><h3 id="2-6-7-分页查询"><a href="#2-6-7-分页查询" class="headerlink" title="2.6.7.分页查询"></a>2.6.7.分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无条件翻页查询</span></span><br><span class="line"><span class="function">IPage&lt;T&gt; <span class="title">page</span><span class="params">(IPage&lt;T&gt; page)</span></span>;</span><br><span class="line"><span class="comment">// 翻页查询</span></span><br><span class="line"><span class="function">IPage&lt;T&gt; <span class="title">page</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 无条件翻页查询</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page);</span><br><span class="line"><span class="comment">// 翻页查询</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper);</span><br></pre></td></tr></table></figure><h5 id="参数说明-9"><a href="#参数说明-9" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-7">#</a>参数说明</h5><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IPage<T></td><td align="center">page</td><td align="center">翻页对象</td></tr><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类 QueryWrapper</td></tr></tbody></table><h3 id="2-6-8-查询数量"><a href="#2-6-8-查询数量" class="headerlink" title="2.6.8.查询数量"></a>2.6.8.查询数量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询总记录数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-10"><a href="#参数说明-10" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-8">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类 QueryWrapper</td></tr></tbody></table><h3 id="2-6-9-链式查询"><a href="#2-6-9-链式查询" class="headerlink" title="2.6.9.链式查询"></a>2.6.9.链式查询</h3><p>query+在eq方法前面加个条件判断(一般是字段非空），当字段非空时，eq这个条件查询才算成立</p><p>因此，链式查询+字段非空判断组成了我们的<strong>动态查询sql</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式查询 普通</span></span><br><span class="line"><span class="function">QueryChainWrapper&lt;T&gt; <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 链式查询 lambda 式。注意：不支持 Kotlin</span></span><br><span class="line"><span class="function">LambdaQueryChainWrapper&lt;T&gt; <span class="title">lambdaQuery</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例： （相当于select ...... where id=value)</span></span><br><span class="line">query().eq(<span class="string">&quot;column&quot;</span>, value).one();</span><br><span class="line">lambdaQuery().eq(Entity::getId, value).list();</span><br></pre></td></tr></table></figure><h2 id="2-7-ServiceImpl"><a href="#2-7-ServiceImpl" class="headerlink" title="2.7.ServiceImpl"></a>2.7.ServiceImpl</h2><p>**上面的<code>IService</code>提供了service的默认方法接口，而<code>ServiceImpl</code>就是对<code>IService</code>的默认实现。我们在定义service时，一般先定义接口，继承<code>IService</code>，然后在定义实现类，继承<code>ServiceImpl</code>**。</p><p>例如，我们定义一个UserService接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200114101828802.png" alt="image-20200114101828802"> </p><p>单元测试：<strong>将业务前置到了service层，直接注入UserService接口就可以使用像 注入UserMapper接口一样的各种操作数据库方法了</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userService.list();</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-分类管理"><a href="#3-分类管理" class="headerlink" title="3.分类管理"></a>3.分类管理</h1><p>接下来，我们完成后台管理项目的业务内容。</p><h2 id="3-1-导入数据"><a href="#3-1-导入数据" class="headerlink" title="3.1.导入数据"></a>3.1.导入数据</h2><p>将课前资料中的sql文件运行，导入数据：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113125947945.png" alt="image-20200113125947945"> </p><p>我们先看商品分类表：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/1525999774439.png" alt="1525999774439"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_category` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;类目id&#x27;,</span><br><span class="line">  `name` varchar(32) NOT NULL COMMENT &#x27;类目名称&#x27;,</span><br><span class="line">  `parent_id` bigint(20) NOT NULL COMMENT &#x27;父类目id,顶级类目填0&#x27;,</span><br><span class="line">  `is_parent` tinyint(1) NOT NULL COMMENT &#x27;是否为父节点，0为否，1为是&#x27;,</span><br><span class="line">  `sort` tinyint(2) NOT NULL COMMENT &#x27;排序指数，越小越靠前&#x27;,</span><br><span class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;数据创建时间&#x27;,</span><br><span class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;数据更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `key_parent_id` (`parent_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#x27;商品类目表，类目和商品(spu)是一对多关系，类目与品牌是多对多关系&#x27;;</span><br></pre></td></tr></table></figure><p>1 <strong>因为商品分类会有层级关系，因此这里我们加入了<code>parent_id</code>字段</strong>，对本表中的其它分类进行自关联。</p><p>2 几乎所有表格<strong>都有updatetime,createtime 字段</strong>，记录商品被添加时间！！！</p><p>3 数据表设计原则：<strong>以空间换时间</strong>！意思是维护多个字段，那么就不用另外查询，节省时间！</p><h2 id="3-2-引入mybatis-plus"><a href="#3-2-引入mybatis-plus" class="headerlink" title="3.2.引入mybatis-plus"></a>3.2.引入mybatis-plus</h2><p>我们在<code>ly-item-service</code>中引入有关<code>mybatis-plus</code>的配置，便于操作数据库</p><h3 id="1）依赖"><a href="#1）依赖" class="headerlink" title="1）依赖"></a>1）依赖</h3><p>首先在<code>ly-item-service</code>的pom中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）全局配置"><a href="#2）全局配置" class="headerlink" title="2）全局配置"></a>2）全局配置</h3><p>然后在<code>ly-item-service</code>的<code>application.yml</code>文件中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.item.entity</span> <span class="comment"># 别名扫描包</span></span><br><span class="line">  <span class="comment"># mapper-locations: classpath*: mappers/*.xml # mapper的xml文件地址</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># id默认为自增长（#########表中的对应id字段，必须是自增的）</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">NOT_EMPTY</span> <span class="comment"># 更新时，只更新非空字段</span></span><br><span class="line">      <span class="attr">insert-strategy:</span> <span class="string">NOT_EMPTY</span> <span class="comment"># 新增时，只新增非空字段</span></span><br></pre></td></tr></table></figure><h3 id="3）启动类的注解"><a href="#3）启动类的注解" class="headerlink" title="3）启动类的注解"></a>3）启动类的注解</h3><p>给<code>LyItemApplication</code>添加注解：<code>@MapperScan</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.leyou.item.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.item&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyItemApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyItemApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4）开启分页插件"><a href="#4）开启分页插件" class="headerlink" title="4）开启分页插件"></a>4）开启分页插件</h3><p>在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册mybatis plus的分页插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor = <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">        <span class="comment">// 开启 count 的 join 优化,只针对部分 left join</span></span><br><span class="line">        paginationInterceptor.setCountSqlParser(<span class="keyword">new</span> JsqlParserCountOptimize(<span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></span><br><span class="line">        paginationInterceptor.setLimit(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5）修改日志advice的切入点语法"><a href="#5）修改日志advice的切入点语法" class="headerlink" title="5）修改日志advice的切入点语法"></a>5）修改日志advice的切入点语法</h3><p>之前的切入点语法<strong>只对Service自己的方法有效，如果是继承自ServiceImpl的方法则失效</strong>。因此需要修改CommonLogAdvice中的切入点语法：</p><p>详解：<strong>前面讲的日志的实现是扫描所有service层的接口方法，并添加日志，但是有些业务必须要自己写方法（是在serviceImpl中定义）才能实现逻辑，因此我们的日志添加（切入点）应该包含自定义的service层方法。这里必须引入依赖哈！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exceptios.LyException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonLogAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;within(@org.springframework.stereotype.Service *) || within(com.baomidou.mybatisplus.extension.service.IService+)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">handleExceptionLog</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切入语法的意思是：</p><ul><li><code>within(@org.springframework.stereotype.Service *)</code>：切带有@Service注解的</li><li><code>within(com.baomidou.mybatisplus.extension.service.IService+)</code>：切IService的实现类</li><li><code>||</code> ：代表两者都可以，<code>或</code>的关系</li></ul><p>同时，在<code>ly-common</code>的<code>pom.xml</code>中<strong>引入IService的依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-基本代码"><a href="#3-3-基本代码" class="headerlink" title="3.3.基本代码"></a>3.3.基本代码</h2><p>基本代码是先添加代码框架，然后根据逻辑再在框架代码上慢慢补充！</p><h3 id="3-3-1-实体类"><a href="#3-3-1-实体类" class="headerlink" title="3.3.1.实体类"></a>3.3.1.实体类</h3><p>因为所有的表都会有<code>create_time</code>和<code>update_time</code>属性，因此我们会先<strong>定义一个通用的实体类</strong>，因为是通用的，因此放到<code>ly-common</code>这个项目的<code>com.leyou.common.entity</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode(onlyExplicitlyIncluded = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(Date updateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是商品分类对应的实体类，会继承上面的<code>BaseEntity</code>：</p><p><strong>继承关系，也就是说会继承父类的变量！</strong>也可以设置为不继承？？？？？？？？？？？？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line">    <span class="keyword">private</span> Boolean isParent;</span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-mapper"><a href="#3-3-2-mapper" class="headerlink" title="3.3.2.mapper"></a>3.3.2.mapper</h3><p>首先是mapper接口，在<code>ly-item-service</code>中添加<code>CategoryMapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Category;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Category</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-service"><a href="#3-3-3-service" class="headerlink" title="3.3.3.service"></a>3.3.3.service</h3><p>然后是service，在<code>ly-item-service</code>中添加<code>CategoryService</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Category;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Category</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.mapper.CategoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">CategoryMapper</span>, <span class="title">Category</span>&gt; <span class="keyword">implements</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-controller"><a href="#3-3-3-controller" class="headerlink" title="3.3.3.controller"></a>3.3.3.controller</h3><p>然后是controller，在<code>ly-item-service</code>中添加<code>CategoryController</code>，并注入<code>CategoryService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CategoryController</span><span class="params">(CategoryService categoryService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categoryService = categoryService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-接口文档"><a href="#3-4-接口文档" class="headerlink" title="3.4.接口文档"></a>3.4.接口文档</h2><p>企业开发中，都是<strong>前后端分离开发，因此需要提前编写好接口文档，方便前后端明确服务端的接口定义，同时开发</strong>。</p><p>在我们给大家准备的nginx中，已经准备好了静态的swagger文档。直接访问：<a href="http://localhost/api/doc.html">http://localhost/api/doc.html</a> 即可：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200712225901445.png" alt="image-20200712225901445"></p><p>可以看到，跟商品分类有关的接口包括：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200121183230162.png" alt="image-20200121183230162"> </p><p>下面我们分别实现这四个接口。</p><h2 id="3-5-根据id查询分类"><a href="#3-5-根据id查询分类" class="headerlink" title="3.5.根据id查询分类"></a>3.5.根据id查询分类</h2><h3 id="3-5-1-接口规范"><a href="#3-5-1-接口规范" class="headerlink" title="3.5.1.接口规范"></a>3.5.1.接口规范</h3><h4 id="1）基本信息"><a href="#1）基本信息" class="headerlink" title="1）基本信息"></a>1）基本信息</h4><p><strong>接口地址</strong> <code>/category/&#123;id&#125;</code></p><p><strong>请求方式</strong> <code>GET</code></p><p><strong>produces</strong> <code>[&quot;application/json&quot;]</code></p><h4 id="2）接口描述"><a href="#2）接口描述" class="headerlink" title="2）接口描述"></a>2）<strong>接口描述</strong></h4><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>id</td><td>分类的id</td><td>path</td><td>true</td><td>integer</td><td></td></tr></tbody></table><p><strong>响应状态</strong></p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>200</td><td>查询成功，返回商品分类对象</td><td>CategoryDTO</td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr></tbody></table><p><strong>响应参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th><th>schema</th></tr></thead><tbody><tr><td>id</td><td>分类ID</td><td>integer(int64)</td><td>integer(int64)</td></tr><tr><td>isParent</td><td>是否是父类目</td><td>boolean</td><td></td></tr><tr><td>name</td><td>分类名称</td><td>string</td><td></td></tr><tr><td>parentId</td><td>父类目id</td><td>integer(int64)</td><td>integer(int64)</td></tr><tr><td>sort</td><td>顺序</td><td>integer(int32)</td><td>integer(int32)</td></tr></tbody></table><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;isParent&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;parentId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;sort&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试时，<strong>在test文件夹下测试：先service层，在controller层，然后是前端测试，使用测试工具进行测试</strong>。</p><p>ps:    在serviceImpl类方法中可以使用快捷方式快速在test中生成测试代码框架哦。</p><h3 id="3-5-2-DTO对象"><a href="#3-5-2-DTO对象" class="headerlink" title="3.5.2.DTO对象"></a>3.5.2.DTO对象</h3><p>在开发中，根据对象作用的领域不同，会把实体类划分成这样：</p><ul><li>PO：<strong>P</strong>ersistent <strong>O</strong>bject 持久层对象，与数据库的表一一对应，完全一致，出现在DAO层和Service层</li><li>BO：<strong>B</strong>usiness <strong>O</strong>bject 业务层对象，用来组装PO，在业务层传递</li><li>DTO：<strong>D</strong>ata <strong>T</strong>ransfer <strong>O</strong>bject 数据转移对象，用于<strong>服务端和客户端间的数据传输，比如服务端返回数据到浏览器</strong></li></ul><p>DTO:说白了就是<strong>前端需要对象的什么属性，就什么属性，然后进行传递给前端</strong>！！！因此serice层方法返回类型从List<Category>改为List<CategoryDTO>;</p><p>这里我们把商品分类的返回值用CategoryDTO来表示，放到<code>ly-item-pojo</code>的<code>com.leyou.item.dto</code>包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span><span class="comment">//排除父类的属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Long parentId;</span><br><span class="line"><span class="keyword">private</span> Boolean isParent;</span><br><span class="line"><span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CategoryDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(entity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将PO集合转为DTO集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list PO对象的集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; PO的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> DTO集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;CategoryDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(list == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list.stream().map(CategoryDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<strong>经常会碰到DTO与PO转换的情况</strong>，所以我们<strong>在DTO中定义了工具方法，方便实现实体类转换</strong>。共有两个实体类PO和DTO转换的方法：</p><ul><li><p><code>CategoryDTO</code>继承了<code>BaseDTO</code>，在<code>BaseDTO</code>中定义了通用的单个对象的转换方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.BeanHelper;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本的DTO，提供了DTO和Entity之间的互相转换功能</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DTO转PO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass PO对象的字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; PO对象的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> PO对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">toEntity</span><span class="params">(Class&lt;T&gt; entityClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BeanHelper.copyProperties(<span class="keyword">this</span>, entityClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从Entity转为DTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 任意实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(entity != <span class="keyword">null</span>)&#123;</span><br><span class="line">            BeanUtils.copyProperties(entity, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDTO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>CategoryDTO</code>中定义了从PO集合转为DTO集合的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将PO集合转为DTO集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list PO对象的集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; PO的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> DTO集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;CategoryDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(list == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> list.stream().map(CategoryDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>转换原理：</strong>就是在Category对象中将相对应的属性赋值给CategoryDTO对象属性。其中用到了流处理，这里我们应该是毫无压力就可以读懂代码的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().map(CategoryDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-5-3-controller"><a href="#3-5-3-controller" class="headerlink" title="3.5.3.controller"></a>3.5.3.controller</h3><p>基于接口文档，定义controller中需要知道的信息包括：</p><ul><li>请求方式：<code>GET</code></li><li>请求路径：<code>/category/&#123;id&#125;</code></li><li>请求参数：<code>id</code></li><li>返回值：<code>CategoryDTO</code>，不过需要用ResponseEntity来封装</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;CategoryDTO&gt; <span class="title">queryCategoryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> CategoryDTO(categoryService.getById(id)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200214223031349.png" alt="image-20200214223031349"></p><p>注意：注入的categoryService 对象，有直接对应的方法能实现逻辑直接调用就好了，没有的话要去categoryService Impl类中定义能显示一定业务的方法来操作数据库！</p><h2 id="3-6-根据id集合查询分类"><a href="#3-6-根据id集合查询分类" class="headerlink" title="3.6.根据id集合查询分类"></a>3.6.根据id集合查询分类</h2><p>基于接口文档，定义controller中需要知道的信息包括：</p><ul><li>请求方式：<code>GET</code></li><li>请求路径：<code>/category/list</code></li><li>请求参数：<code>ids</code>，多个id集合</li><li>返回值：<code>List&lt;CategoryDTO&gt;</code>，不过需要用ResponseEntity来封装</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据分类id集合查询分类集合</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;CategoryDTO&gt;&gt; queryCategoryByIds(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(CategoryDTO.convertEntityList(categoryService.listByIds(ids)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200122115731545.png" alt="image-20200122115731545"></p><p>上面使用了<strong>转换工具类方法</strong></p><h2 id="3-7-根据父类目id查询子分类"><a href="#3-7-根据父类目id查询子分类" class="headerlink" title="3.7.根据父类目id查询子分类"></a>3.7.根据父类目id查询子分类</h2><p>基于接口文档，定义controller中需要知道的信息包括：</p><ul><li>请求方式：<code>GET</code></li><li>请求路径：<code>/category/of/parent</code></li><li>请求参数：<code> pid</code>，父类目id，就是商品分类表中的<code>parent_id</code>字段</li><li>返回值：<code>List&lt;CategoryDTO&gt;</code>，不过需要用ResponseEntity来封装</li></ul><p>parent_id是分类表中的普通字段，并不是主键，因此查询要选用 queryByWrapper。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父类目id查询子类目的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid 父类目的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 子类目的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/parent&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;CategoryDTO&gt;&gt; queryCategoryByParentId(<span class="meta">@RequestParam(&quot;pid&quot;)</span> Long pid)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="comment">// 封装并返回</span></span><br><span class="line">        CategoryDTO.convertEntityList(<span class="comment">// 把PO集合转为DTO集合</span></span><br><span class="line">            categoryService.query().eq(<span class="string">&quot;parent_id&quot;</span>, pid).list()<span class="comment">// 根据父类目id查询集合</span></span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-根据品牌id查询分类"><a href="#3-8-根据品牌id查询分类" class="headerlink" title="3.8.根据品牌id查询分类"></a>3.8.根据品牌id查询分类</h2><h3 id="3-8-1-业务分析"><a href="#3-8-1-业务分析" class="headerlink" title="3.8.1.业务分析"></a>3.8.1.业务分析</h3><p> 商品品牌和商品分类之间是多对多关系，在我们的数据库中有一个<strong>中间表来维护关系</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_category_brand` (</span><br><span class="line">  `category_id` bigint(20) NOT NULL COMMENT &#x27;商品类目id&#x27;,</span><br><span class="line">  `brand_id` bigint(20) NOT NULL COMMENT &#x27;品牌id&#x27;,</span><br><span class="line">  PRIMARY KEY (`category_id`,`brand_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#x27;商品分类和品牌的中间表，两者是多对多关系&#x27;;</span><br></pre></td></tr></table></figure><p>因此，要根据品牌id查询分类，有两种选择：</p><ul><li>方案一：先根据品牌id到中间表查询，得到分类id的集合，然后再根据分类id，到分类表查询</li><li>方案二：利用关联查询，一次查询完成。（<strong>需要我们自己在xml映射文件中写sql语句，mapper层代码，紧接着是service方法，将查询结果转DTO返回给controller</strong>，其实就是使用mybatis框架）</li></ul><p><strong>mybatis-plus并不支持多表关联查询</strong>，因此这里我们可以采用方案一。</p><p>解析：因为mybatis-plus是封装好的框架，查询代码自动生成，<strong>既然是框架，那么约定肯定比较多</strong>，不过好在能自己编写sql，自己扩展编写相关方法，在框架实现不了的逻辑下依然能够自定义业务逻辑代码。</p><h3 id="3-8-2-中间表代码"><a href="#3-8-2-中间表代码" class="headerlink" title="3.8.2.中间表代码"></a>3.8.2.中间表代码</h3><p>定义中间表的实体类、mapper、service等。</p><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><p>在<code>ly-item-service</code>的<code>com.leyou.item.entity</code>包下定义中间表的实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_category_brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryBrand</span> </span>&#123;</span><br><span class="line">    <span class="comment">// IdType.INPUT，代表主键采用自己填写而不是自增长。</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long brandId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h4><p>在<code>ly-item-service</code>的<code>com.leyou.item.mapper</code>包下定义中间表的mapper代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.CategoryBrand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryBrandMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">CategoryBrand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下定义中间表的service代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.CategoryBrand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryBrandService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">CategoryBrand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service实现类，先根据品牌id去中间表查询，得到分类id集合，再到分类表查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.CategoryBrand;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.mapper.CategoryBrandMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.CategoryBrandService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryBrandServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">CategoryBrandMapper</span>, <span class="title">CategoryBrand</span>&gt; <span class="keyword">implements</span> <span class="title">CategoryBrandService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-3-接口声明"><a href="#3-8-3-接口声明" class="headerlink" title="3.8.3.接口声明"></a>3.8.3.接口声明</h3><p>基于接口文档，定义controller中需要知道的信息包括：</p><ul><li>请求方式：<code>GET</code></li><li>请求路径：<code>/category/of/brand</code></li><li>请求参数：<code> id</code>，品牌id</li><li>返回值：<code>List&lt;CategoryDTO&gt;</code>，不过需要用ResponseEntity来封装</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据品牌id查询分类集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brandId 品牌id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;CategoryDTO&gt;&gt; queryCategoryByBrandId(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long brandId)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(categoryService.queryCategoryByBrandId(brandId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-4-业务实现"><a href="#3-8-4-业务实现" class="headerlink" title="3.8.4.业务实现"></a>3.8.4.业务实现</h3><p>先在CategoryService中定义方法声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Category</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;CategoryDTO&gt; <span class="title">queryCategoryByBrandId</span><span class="params">(Long brandId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在CategoryServiceImpl中编写方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">CategoryMapper</span>, <span class="title">Category</span>&gt; <span class="keyword">implements</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CategoryBrandService categoryBrandService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里采用了构造注入，也可以像以前那样，使用注解注入哈！</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CategoryServiceImpl</span><span class="params">(CategoryBrandService categoryBrandService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categoryBrandService = categoryBrandService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;CategoryDTO&gt; <span class="title">queryCategoryByBrandId</span><span class="params">(Long brandId)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.根据品牌id，查询中间表，得到中间表对象集合</span></span><br><span class="line">        List&lt;CategoryBrand&gt; categoryBrandList = categoryBrandService.query().eq(<span class="string">&quot;brand_id&quot;</span>, brandId).list();</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(categoryBrandList))&#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.获取分类id集合</span></span><br><span class="line">        List&lt;Long&gt; categoryIdList = categoryBrandList.stream()</span><br><span class="line">                .map(CategoryBrand::getCategoryId).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 3.根据分类id集合，查询分类对象集合</span></span><br><span class="line">        List&lt;Category&gt; categories = listByIds(categoryIdList);</span><br><span class="line">        <span class="comment">// 4.转换DTO</span></span><br><span class="line">        <span class="keyword">return</span> CategoryDTO.convertEntityList(categories);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-测试"><a href="#3-9-测试" class="headerlink" title="3.9.测试"></a>3.9.测试</h2><p>我们重启商品微服务，然后测试接口。</p><p>注意事项：<strong>启动项目后立马访问url，可能会响应超时</strong>，因为<strong>网关是周期性去注册中心拉取服务地址以及端口的信息的</strong>，启动成功只能表示微服务将地址端口注册到尤里克注册中心，网关并不一定有微服务的ip端口信息，因此需要等待30-60s时间才能正常访问url资源哈！</p><h3 id="3-9-1-接口测试"><a href="#3-9-1-接口测试" class="headerlink" title="3.9.1.接口测试"></a>3.9.1.接口测试</h3><p>例如查询商品分类的接口，地址：</p><p><a href="http://localhost:8081/category/of/parent?pid=0">http://localhost:8081/category/of/parent?pid=0</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200122135005285.png" alt="image-20200122135005285"> </p><h3 id="3-9-2-页面测试"><a href="#3-9-2-页面测试" class="headerlink" title="3.9.2.页面测试"></a>3.9.2.页面测试</h3><p>我们访问后台管理项目，点击商品管理下面的分类管理：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200711000945643.png" alt="image-20200711000945643"> </p><p>可以看到页面并未出现商品分类信息，打开浏览器控制台，发现这样的错误提示：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200122135552725.png" alt="image-20200122135552725"></p><p>发现页面发起的请求地址是：<a href="http://api.leyou.com/item/category/of/parent?pid=0%EF%BC%8C%E5%B9%B6%E4%B8%94**%E5%87%BA%E7%8E%B0%E4%BA%86%60blocked">http://api.leyou.com/item/category/of/parent?pid=0，并且**出现了`blocked</a> by CORS`这样的提示<strong>，这是怎么回事呢？</strong>浏览器不允许跨域请求呗！！！**</p><h1 id="4-CORS跨域"><a href="#4-CORS跨域" class="headerlink" title="4.CORS跨域"></a>4.CORS跨域</h1><h2 id="4-1-跨域问题"><a href="#4-1-跨域问题" class="headerlink" title="4.1.跨域问题"></a>4.1.跨域问题</h2><h3 id="4-1-1-什么是跨域"><a href="#4-1-1-什么是跨域" class="headerlink" title="4.1.1.什么是跨域"></a>4.1.1.什么是跨域</h3><p>跨域是指跨域名及端口的访问，以下情况都属于跨域：</p><table><thead><tr><th>跨域原因说明</th><th>示例</th></tr></thead><tbody><tr><td>一级或二级域名不同</td><td><code>www.jd.com</code> 与 <code>www.taobao.com</code></td></tr><tr><td>域名相同，端口不同</td><td><code>www.jd.com:8080</code> 与 <code>www.jd.com:8081</code></td></tr><tr><td>三级域名不同</td><td><code>item.jd.com</code> 与 <code>miaosha.jd.com</code></td></tr></tbody></table><p>如果<strong>域名和端口都相同，但是请求路径不同</strong>，不属于跨域，如：</p><p><code>www.jd.com/item</code> </p><p><code>www.jd.com/goods</code></p><p>而我们刚才是从<code>manage.leyou.com</code>去访问<code>api.leyou.com</code>，这<strong>属于三级域名不同，跨域了</strong>。</p><h3 id="4-1-2-为什么有跨域问题？"><a href="#4-1-2-为什么有跨域问题？" class="headerlink" title="4.1.2.为什么有跨域问题？"></a>4.1.2.为什么有跨域问题？</h3><p><strong>跨域不一定会有跨域问题</strong>。</p><p>因为跨域问题是浏览器对于ajax请求的一种安全限制：<strong>一个页面发起的ajax请求，只能是于当前页同域名的路径</strong>，这能<strong>有效的阻止跨站攻击</strong>。</p><p>因此：<strong>跨域问题 是针对ajax的一种限制</strong>。</p><p>但是这却<strong>给我们的开发带来了不便</strong>，而且<strong>在实际生成环境中，肯定会有很多台服务器之间交互，地址和端口都可能不同</strong>，怎么办？</p><p>注意：<strong>跨域请求只是浏览器对响应结果的一种限制（为了阻止跨域攻击），服务器还是能被正常访问并返回资源的，只是浏览器不允许我们将跨域资源进行显示而已</strong>！！！</p><h3 id="4-1-3-解决跨域问题的方案"><a href="#4-1-3-解决跨域问题的方案" class="headerlink" title="4.1.3.解决跨域问题的方案"></a>4.1.3.解决跨域问题的方案</h3><p>浏览器虽然会限制跨域请求，但是也给出了解决方案。<strong>如果你确实需要发送跨域的ajax，必须通过被访问的服务端同意才可以</strong>。浏览器与服务器间<strong>协商是否允许跨域，这样的方式就是CORS</strong>。</p><p>参考文档：<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><h2 id="4-2-CORS介绍"><a href="#4-2-CORS介绍" class="headerlink" title="4.2.CORS介绍"></a>4.2.CORS介绍</h2><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p><p>它允许浏览器向跨源服务器，发出<a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html"><code>XMLHttpRequest</code></a>请求，从而克服了AJAX只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">同源</a>使用的限制。</p><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p><ul><li><p><strong>浏览器端：</strong></p><p>目前，所有浏览器都支持该功能（IE10以下不行）。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。浏览器会在发出ajax时询问服务端是否允许当前网站的跨域请求，并根据服务端响应做出拦截或放行的处理。</p></li><li><p><strong>服务端：</strong></p><p>CORS通信与AJAX没有任何差别，因此你不需要改变以前的业务逻辑。只不过，浏览器会在请求中携带一些头信息，表明请求者的身份。服务端接收到以后，需要对这些信息做出判断，如果允许则需要在返回的头信息中携带一些许可的声明。</p></li></ul><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">要想进行跨域请求，</span></span><br><span class="line"><span class="attr">浏览器需要发送跨域请求（浏览器自动完成，在请求头添加信息，标明请求身份），</span></span><br><span class="line"><span class="attr">服务器根据这个身份，在作出响应时标明该资源是否能进行跨域请求</span></span><br><span class="line"><span class="meta">（在响应头添加：Access-Control-Allow-Origin</span>: <span class="string">http://manage.leyou.com),</span></span><br><span class="line"><span class="attr">浏览器根据响应头的Access-Control-Allow-Origin字段信息，决定是否展示资源！</span></span><br></pre></td></tr></table></figure><p>注意：<strong>跨域请求只是浏览器对响应结果的一种限制（为了阻止跨域攻击），服务器还是能被正常访问并返回资源的，只是浏览器不允许我们将跨域资源进行显示而已</strong>！！！</p><h2 id="4-3-SpringCloudGateway的CORS"><a href="#4-3-SpringCloudGateway的CORS" class="headerlink" title="4.3.SpringCloudGateway的CORS"></a>4.3.SpringCloudGateway的CORS</h2><p>在SpringCloudGateway中，已经提供了默认的CORS实现，我们只需要通过application.yml做简单配置即可。我们在<code>ly-gateway</code>中的<code>application.yml</code>中添加一些配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 。。。</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 是否将当前cors配置加入到SimpleUrlHandlerMapping中，解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://manage.leyou.com&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://www.leyou.com&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure><p>完整配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution.isolation.thread.timeoutInMilliseconds:</span> <span class="number">6000</span> <span class="comment"># 熔断超时时长：6000ms</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">500</span> <span class="comment"># ribbon链接超时时长</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># ribbon读取超时时长</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span> <span class="comment"># redis地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># redis端口</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 去除路由前缀</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span> <span class="comment"># 指定过滤工厂名称（可以是任意过滤工厂类型）</span></span><br><span class="line">        <span class="attr">args:</span> <span class="comment"># 指定过滤的参数</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">fallbackcmd</span>  <span class="comment"># hystrix的指令名</span></span><br><span class="line">          <span class="attr">fallbackUri:</span> <span class="string">forward:/hystrix/fallback</span> <span class="comment"># 失败后的跳转路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span> <span class="comment">#请求数限流 名字不能随便写</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span> <span class="comment"># 通过spEL表达式指定一个key生成器，#&#123;&#125;是spEL，@代表spring中的Bean</span></span><br><span class="line">          <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">2</span> <span class="comment"># 生成令牌的速率</span></span><br><span class="line">          <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span> <span class="comment"># 桶的容量</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 是否将当前cors配置加入到SimpleUrlHandlerMapping中，解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span> <span class="comment"># /** 代表拦截一切请求路径，都需要做CORS判断</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;http://manage.leyou.com&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;http://www.leyou.com&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">item-service</span> <span class="comment"># 商品微服务</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://item-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/item/**</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="4-4-再次测试"><a href="#4-4-再次测试" class="headerlink" title="4.4.再次测试"></a>4.4.再次测试</h2><p>重启网关，然后再次访问页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200711001156810.png" alt="image-20200711001156810"></p><h2 id="访问过程总结："><a href="#访问过程总结：" class="headerlink" title="访问过程总结："></a>访问过程总结：</h2><p>本来在浏览器中访问后台管理页面，访问的是http:manage.leyou.com/item/category/，紧接着点击某个分类，进行跨域请求（向后端微服务请求资源然后展示到浏览器中）；</p><p>其中跨域请求的<strong>url：http:api.leyou.com/item/category/of/parent?pid=0 然后回车，到浏览器中显示资源，中间经历了什么？？？？</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">访问api.leyou.com域名，得到ip以及host信息（host信息为api.leyou.com），浏览器请求的端口默认为80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">2</span> <span class="string">根据ip+端口，找到了目标机器的对应端口的服务。</span></span><br><span class="line"><span class="attr">3</span> <span class="string">由于目标机器配置的nginx监听的就是80端口，（nginx服务端口），于是接下来就是nginx的反向代理。</span></span><br><span class="line"><span class="attr">4</span> <span class="string">如何进行反向代理呢？？？根据host名称哈。由前面可知，host为api.leyou.com，结合nginx配置文件，</span></span><br><span class="line"><span class="meta">要反向代理到：http</span>:<span class="string">//127.0.0.1:10010，这是网关地址+ip</span></span><br><span class="line"><span class="attr">5</span> <span class="string">此时达到网关时，访问的完整url为：http://127.0.0.1:10010/item/category/of/parent?pid=0</span></span><br><span class="line"><span class="meta">这时候就要根据网关路由策略进行路由了，在网关服务的配置文件中可以知道</span> <span class="string">路由策略：/item/* </span></span><br><span class="line"><span class="attr">其对应的服务uri为item-service；网关根据注册中心拉取下来的微服务信息，</span></span><br><span class="line"><span class="attr">寻找item-service微服务的ip地址+端口</span></span><br><span class="line"><span class="attr">注意1，网关并不是去注册中心找微服务的ip+端口的,</span></span><br><span class="line"><span class="attr">网关去注册中心拉取服务以及对应的ip端口是周期性拉取的，</span></span><br><span class="line"><span class="attr">网关首先在本地注册中查找微服务uri对应的ip端口信息，找不到就超时咯</span></span><br><span class="line"><span class="attr">注意2，nginx除了反向代理，还可以负载均衡哦，这里没用到而已！</span></span><br><span class="line"><span class="attr">6</span> <span class="string">找到微服务的ip+端口，那么就可以进行最终url拼接了：http:微服务ip+微服务端口/category/of/parent?pid=0</span></span><br><span class="line"><span class="attr">注意，/item路由前缀要去掉哈！</span></span><br></pre></td></tr></table></figure><p>nginx与网关的区别：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">相同点：</span></span><br><span class="line"><span class="attr">网关跟nginx都可以做负载均衡，在springboot中，可以将网关配置为“利用ribbon进行负载均衡）</span></span><br><span class="line"><span class="attr">不同点：</span></span><br><span class="line"><span class="attr">网关做了集群，那么网关前面一定要有相关服务（如，nginx，网关）来给网关集群进行负载均衡，</span></span><br><span class="line"><span class="attr">而nginx做了集群也需要负载均衡，但是nginx内部已经有了负载均衡了，共同虚拟主机给集群中的nginx做负载均衡。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分类管理&quot;&gt;&lt;a href=&quot;#分类管理&quot; class=&quot;headerlink&quot; title=&quot;分类管理&quot;&gt;&lt;/a&gt;分类管理&lt;/h1&gt;&lt;h1 id=&quot;0-学习目标&quot;&gt;&lt;a href=&quot;#0-学习目标&quot; class=&quot;headerlink&quot; title=&quot;0.学习目</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="乐优商城项目" scheme="http://example.com/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-项目搭建</title>
    <link href="http://example.com/2022/06/15/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/06/15/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</id>
    <published>2022-06-15T12:55:12.000Z</published>
    <updated>2022-06-15T13:02:16.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-乐优商城项目环境搭建"><a href="#01-乐优商城项目环境搭建" class="headerlink" title="01-乐优商城项目环境搭建"></a>01-乐优商城项目环境搭建</h1><h1 id="本博客学习目标："><a href="#本博客学习目标：" class="headerlink" title="本博客学习目标："></a>本博客学习目标：</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">了解乐优商城项目架构</span></span><br><span class="line"><span class="meta">-</span> <span class="string">会搭建后台管理前端</span></span><br><span class="line"><span class="meta">-</span> <span class="string">会搭建微服务集群</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能完成统一异常处理</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能够导入项目数据</span></span><br></pre></td></tr></table></figure><h1 id="1-了解电商行业"><a href="#1-了解电商行业" class="headerlink" title="1.了解电商行业"></a>1.了解电商行业</h1><p>我们要学习的乐优商城属于电商项目，因此我们来了解一下电商行业的一些信息。</p><h2 id="1-1-电商行业模式"><a href="#1-1-电商行业模式" class="headerlink" title="1.1.电商行业模式"></a>1.1.电商行业模式</h2><p>电商行业的一些常见模式：</p><ul><li><p><strong>B2C</strong></p><p>B2C就是企业通过网络销售产品或服务给个人消费者。企业厂商直接将产品或服务推上网络，并提供充足资讯与便利的接口吸引消费者选购，这也是一般最常见的<a href="https://baike.baidu.com/item/%E4%BD%9C%E4%B8%9A%E6%96%B9%E5%BC%8F">作业方式</a>，例如网络购物、证券公司网络下单作业、一般网站的资料查询作业等等，都是属于企业直接接触顾客的作业方式</p><p>代表：唯品会、乐蜂网、当当网</p></li><li><p><strong>B2B</strong></p><p>企业与企业之间的<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1/98106">电子商务</a>（Business to Business，即B2B）。B2B方式是电子商务应用最多和最受企业重视的形式，企业可以使用Internet或其他网络对每笔交易寻找最佳合作伙伴，完成从定购到结算的全部交易行为。</p><p>代表：马云的<a href="https://baike.baidu.com/item/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4/33">阿里巴巴</a>电子商务模式，B2B交易金额占整体电子商务市场份额的85%左右。</p></li><li><p><strong>C2C平台</strong></p><p>C2C是指消费者与消费者之间的互动交易行为，这种交易方式是多变的。例如消费者可同在某一竞标网站或拍卖网站中，共同在线上出价而由价高者得标。或由消费者自行在<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%96%B0%E9%97%BB">网络新闻</a>论坛或BBS上张贴布告以出售二手货品，甚至是新品，诸如此类因消费者间的互动而完成的交易，就是<a href="https://baike.baidu.com/item/C2C">C2C</a>的交易。</p><p>代表：闲鱼</p></li><li><p><strong>O2O</strong></p><p>线上与线下相结合的电子商务（Online to Offline，即O2O）。<a href="https://baike.baidu.com/item/O2O/8564117">O2O</a>通过网购导购机，把互联网与地面店完美对接，实现互联网落地。</p><p>例如：美图、饿了么</p></li><li><p><strong>P2P</strong></p><ul><li>个人对个人的金融借贷，</li></ul></li></ul><h2 id="1-2-电商的特点"><a href="#1-2-电商的特点" class="headerlink" title="1.2.电商的特点"></a>1.2.电商的特点</h2><p>近年来，世界经济正向数字化转型，大力发展数字经济成为全球共识。党的十九大报告明确提出要建设“数字中国”“网络强国”，我国数字经济发展进入新阶段，市场规模位居全球第二，数字经济与实体经济深度融合，有力促进了供给侧结构性改革。电子商务是数字经济的重要组成部分，是数字经济最活跃、最集中的表现形式之一。</p><p>近年来，电子商务规模逐步扩大，已经深入到我们生活的各个角落，特别是一些全民参与的购物庆典，其典型代表就是每年一度的双十一、6.18等活动。有图为证：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/timg.jpg" alt="img"></p><p>2018双11开场30分钟，创造<strong>每秒交易峰值21万笔</strong>。</p><p>2019年，阿里自研数据库OceanBase的峰值达到6100万次。</p><p>如此高的并发，对技术有很高的要求：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">技术范围广</span></span><br><span class="line"><span class="meta">-</span> <span class="string">技术新</span></span><br><span class="line"><span class="meta">-</span> <span class="string">要求双高：</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">高并发（分布式、静态化技术、CDN服务、缓存技术、异步并发、池化、队列）</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">高可用（集群、负载均衡、限流、降级、熔断）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">数据量大</span></span><br><span class="line"><span class="meta">-</span> <span class="string">业务复杂</span></span><br></pre></td></tr></table></figure><h1 id="2-乐优商城介绍"><a href="#2-乐优商城介绍" class="headerlink" title="2.乐优商城介绍"></a>2.乐优商城介绍</h1><h2 id="2-1-项目介绍"><a href="#2-1-项目介绍" class="headerlink" title="2.1.项目介绍"></a>2.1.项目介绍</h2><p>乐优商城是一个全品类电商购物网站<strong>（B2C）</strong>，目前提供了基于H5的购物网站，基于小程序的客户端正在开发中。服务端基于SpringCloud技术栈搭建微服务群，对外提供统一的REST风格接口，实现对多端的统一支持。</p><h2 id="2-2-业务架构图"><a href="#2-2-业务架构图" class="headerlink" title="2.2.业务架构图"></a>2.2.业务架构图</h2><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107161255077.png" alt="image-20200107161255077"></p><p>乐优商城采用了<strong>前后端分离</strong>的架构方式，</p><ul><li><p><strong>前端采用Vue技术栈</strong>，从使用者的角度，分为：</p><ul><li>前台门户系统：目前只支持H5，后期会加入微信小程序</li><li>后台管理系统：基于Vue实现的单页应用（SPA），实现管理功能</li></ul></li><li><p><strong>服务端采用SpringCloud技术栈形成微服务集群</strong>，会包括：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1 商品微服务：商品及商品分类、品牌、库存等的服务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2 搜索微服务：实现搜索功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3 交易微服务：实现订单相关业务、实现购物车相关业务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4 用户服务：用户的登录注册、用户信息管理等功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">5 短信服务：完成各种短信的发送任务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">6 支付服务：对接各大支付平台</span></span><br><span class="line"><span class="meta">-</span> <span class="string">7 授权服务：完成对用户的授权、鉴权等功能</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-3-技术架构图"><a href="#2-3-技术架构图" class="headerlink" title="2.3.技术架构图"></a>2.3.技术架构图</h2><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200414113210392.png" alt="image-20200414113210392"></p><p><strong>前端技术包括：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">基础的HTML、CSS、JavaScript（基于ES6标准）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">JQuery</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Vue.js 2.0</span></span><br><span class="line"><span class="meta">-</span> <span class="string">基于Vue的UI框架：Vuetify、类似于BootStrap、element-ui</span></span><br><span class="line"><span class="meta">-</span> <span class="string">前端构建工具：WebPack，项目编译、打包工具</span></span><br><span class="line"><span class="meta">-</span> <span class="string">前端安装包工具：NPM</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Vue脚手架：Vue-cli</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Vue路由：vue-router</span></span><br><span class="line"><span class="meta">-</span> <span class="string">ajax框架：axios</span></span><br><span class="line"><span class="meta">-</span> <span class="string">基于Vue的富文本框架：quill-editor</span></span><br></pre></td></tr></table></figure><p><strong>服务端技术包括：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">基础的SpringMVC、Spring和MyBatis（MybatisPlus）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Spring Boot 2</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Spring Cloud 技术栈</span></span><br><span class="line"><span class="meta">-</span> <span class="string">OpenResty（Nginx + Lua）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Redis、Jedis、Redission、Lua脚本</span></span><br><span class="line"><span class="meta">-</span> <span class="string">RabbitMQ</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Elasticsearch</span></span><br><span class="line"><span class="meta">-</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">-</span> <span class="string">MongoDB</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Canal</span></span><br><span class="line"><span class="meta">-</span> <span class="string">数据库PXC集群、Mysql读写分离集群</span></span><br><span class="line"><span class="meta">-</span> <span class="string">MyCat中间件</span></span><br><span class="line"><span class="meta">-</span> <span class="string">JWT</span></span><br><span class="line"><span class="meta">-</span> <span class="string">GrayLog日志系统</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Skywalking链路追踪</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Seata分布式事务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">阿里OSS、SMS等服务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">微信支付</span></span><br></pre></td></tr></table></figure><h1 id="3-后台管理页面"><a href="#3-后台管理页面" class="headerlink" title="3.后台管理页面"></a>3.后台管理页面</h1><p>后台管理页面面向的是公司内部管理人员，我们采用的是基于<strong>vue的单页应用架构</strong>（SPA）。整个项目的UI部分使用的是vuetify框架。如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20201103212737742.png" alt="image-20201103212737742"></p><h2 id="3-1-什么是SPA"><a href="#3-1-什么是SPA" class="headerlink" title="3.1.什么是SPA"></a>3.1.什么是SPA</h2><p>SPA，并不是去洗澡按摩，而是Single Page Application，即单页应用。整个系统只会有<strong>一个HTML页面，和一个根Vue实例</strong>。然后需要定义<strong>很多的Vue组件</strong>，<strong>页面由许多定义好的组件组合而成</strong>。</p><p>我们的后台管理系统就是一个基于Vue的SPA的模式，其中的<strong>UI交互式通过一个名为Vue-router完成的（组件。切换，也就是页面的切换）</strong></p><h2 id="3-2-导入项目资源"><a href="#3-2-导入项目资源" class="headerlink" title="3.2.导入项目资源"></a>3.2.导入项目资源</h2><p>我们已经提前准备好了项目源码，在课前资料中：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107165235605.png" alt="image-20200107165235605"> </p><p>接下来我们把这个项目导入，步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">解压缩</span></span><br><span class="line"><span class="meta">-</span> <span class="string">导入到Idea</span></span><br><span class="line"><span class="meta">-</span> <span class="string">运行</span></span><br></pre></td></tr></table></figure><h3 id="1）解压"><a href="#1）解压" class="headerlink" title="1）解压"></a>1）解压</h3><p>我们解压缩，放到工作目录中：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107165455292.png" alt="image-20200107165455292"> </p><p>然后在你喜欢的开发工具中打开即可。</p><h3 id="2）导入"><a href="#2）导入" class="headerlink" title="2）导入"></a>2）导入</h3><p>这里我们使用Idea来打开：</p><p>然后在IDE中导入新的工程：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107165723406.png" alt="image-20200107165723406"></p><p>选中我们的工程：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107165604253.png" alt="image-20200107165604253"> </p><p>项目结构如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107165835035.png" alt="image-20200107165835035"> </p><h3 id="3）运行"><a href="#3）运行" class="headerlink" title="3）运行"></a>3）运行</h3><p>运行这个项目有2种方式：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">直接输入命令运行</span></span><br><span class="line"><span class="meta">-</span> <span class="string">通过脚本运行</span></span><br></pre></td></tr></table></figure><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><p>在Idea开发工具的左下角，有一个termnal按钮，点击即可弹出窗口，然后在窗口输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107170305937.png" alt="image-20200107170305937"></p><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><p>在项目中，有一个package.json文件：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107170415381.png" alt="image-20200107170415381"> </p><p>打开文件，可以看到下面的信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107170836172.png" alt="image-20200107170836172"></p><p>点击前面的小绿色三角形，即可启动。</p><h3 id="4）页面"><a href="#4）页面" class="headerlink" title="4）页面"></a>4）页面</h3><p>运行完成后，自动弹出页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107171146619.png" alt="image-20200107171146619"></p><p><strong>浏览器访问的是http://+地址+端口+/  /自动路由到了login，然后去找login.vue组件加载！！！</strong></p><h2 id="3-3-项目结构"><a href="#3-3-项目结构" class="headerlink" title="3.3.项目结构"></a>3.3.项目结构</h2><p>在Idea中，观察项目结构：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107171315460.png" alt="image-20200107171315460"> </p><p>可以看到，整个项目<strong>除了一个<code>index.html</code>外没有任何的静态页面</strong>。页面的内容<strong>定义在Vue组件中</strong>，也就是后缀名为<code>.vue</code>的文件。</p><h3 id="3-3-1-单文件组件"><a href="#3-3-1-单文件组件" class="headerlink" title="3.3.1.单文件组件"></a>3.3.1.单文件组件</h3><p><code>.vue</code>文件是vue组件的特殊形式，在<strong>以前</strong>我们定义一个Vue组件是这样来写的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> com = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div style=&quot;background-ground-color:red&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;hello ...&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Vue.component(<span class="string">&quot;com&quot;</span>, com);</span><br></pre></td></tr></table></figure><p>这种定义方式虽然可以实现，<strong>但是html、css、js代码混合在一起，而且在JS中编写html和css显然不够优雅</strong>。</p><p>而**<code>.vue</code>文件是把三者做了分离**：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1552921477484.png" alt="1552921477484"></p><p>这样就可以方便我们定义组件内容了。</p><h3 id="3-3-2-页面菜单"><a href="#3-3-2-页面菜单" class="headerlink" title="3.3.2.页面菜单"></a>3.3.2.页面菜单</h3><p>点击登录，进入首页，可以看到页面的左侧：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200710221217031.png" alt="image-20200710221217031"></p><p>这个菜单的文字信息，在项目的src目录下，有一个menu.js文件，是页面的左侧菜单目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107172201239.png" alt="image-20200107172201239"> </p><p>内容如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107172413816.png" alt="image-20200107172413816"> </p><h3 id="3-3-3-组件路由"><a href="#3-3-3-组件路由" class="headerlink" title="3.3.3.组件路由"></a>3.3.3.组件路由</h3><p>可以看到<strong>每个菜单都有一个path属性，点击path属性时，如何路由到对应的组件呢</strong>？</p><p>在项目目录下有一个route.js文件：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107173345083.png" alt="image-20200107173345083"> </p><p>点击打开，内容如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107173503495.png" alt="image-20200107173503495"></p><p>这里通过Vue-Router配置了一些路由的path路径和组件的映射关系。组件默认的路径前缀是<code>src/views</code>。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route(<span class="string">&quot;/item/category&quot;</span>,<span class="string">&#x27;/item/Category&#x27;</span>,<span class="string">&quot;Category&quot;</span>),</span><br></pre></td></tr></table></figure><p>代表的意思是：</p><ul><li>path：<code>/item/category</code></li><li>组件：<code>./src/views</code>下的<code>/item/Category</code>文件</li></ul><p><strong>访问path：<code>/item/category</code>，会被路由到：<code>./src/views/item/Category</code>组件：</strong></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107173907133.png" alt="image-20200107173907133"> </p><h1 id="4-搭建微服务集群"><a href="#4-搭建微服务集群" class="headerlink" title="4.搭建微服务集群"></a>4.搭建微服务集群</h1><h2 id="4-1-统一环境"><a href="#4-1-统一环境" class="headerlink" title="4.1.统一环境"></a>4.1.统一环境</h2><p>为了保证开发环境的统一，减少不必要BUG</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">IDE：我们使用Idea，推荐版本，2019.1.4</span></span><br><span class="line"><span class="meta">-</span> <span class="string">JDK：统一使用JDK1.8.xx</span></span><br><span class="line"><span class="meta">-</span> <span class="string">项目构建：maven 3.3.x以上版本即可</span></span><br></pre></td></tr></table></figure><p>idea大家可以在我的课前资料中找到。另外，使用帮助大家可以参考课前资料的《idea使用指南.md》</p><p>我们在开发的过程中，为了保证以后的生产、测试环境统一。尽量都采用域名来访问项目。</p><p>二级域名：leyou.com  乐优商城</p><p>三级域名：manage.leyou.com , api.leyou.com，image.leyou.com，<a href="http://www.leyou.com/">www.leyou.com</a>…</p><p>因此，我们项目的包名也会以域名倒置：<code>com.leyou.项目名.包名</code></p><p>另外，为了避免频繁修改配置文件中的IP地址，我们<strong>将注册中心、网关、mysql等服务的地址都配置在本地的hosts文件中</strong>：</p><ul><li>windows：修改 <strong>C:\Windows\System32\drivers\etc\hosts</strong></li><li>MAC：修改/etc/hosts</li></ul><p>不是你的虚拟机，是你自己开发的电脑。</p><p>添加下面内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">127.0.0.1</span> <span class="string">ly-gateway</span></span><br><span class="line"><span class="meta">127.0.0.1</span> <span class="string">ly-registry</span></span><br><span class="line"><span class="meta">192.168.159.131</span> <span class="string">ly-mysql</span></span><br><span class="line"><span class="meta">192.168.159.131</span> <span class="string">ly-redis</span></span><br><span class="line"><span class="meta">192.168.159.131</span> <span class="string">ly-mq</span></span><br><span class="line"><span class="meta">192.168.159.131</span> <span class="string">ly-es</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>ly-gateway：是网关的IP地址，肯定是本机</li><li>ly-registry：是注册中心的地址，肯定是本机</li><li>ly-mysql：是mysql的地址，<strong>请写你自己的mysql的正确地址</strong></li><li>ly-redis：是你的redis的地址，<strong>请写你自己的redis的正确地址</strong>，在本地就写127.0.0.1，在虚拟机就填虚拟机地址</li><li>ly-mq：是你的mq的地址，<strong>请写你自己的mq的正确地址</strong></li><li>ly-es：是你的elasticsearch的地址，<strong>请写你自己的elasticsearch的正确地址</strong></li></ul><h2 id="4-2-项目结构"><a href="#4-2-项目结构" class="headerlink" title="4.2.项目结构"></a>4.2.项目结构</h2><p>项目<strong>有许多微服务组成</strong>，而每个<strong>微服务的依赖及版本信息需要统一管理，因此需要有一个父工程</strong>。</p><p>而每个微服务本身有自己的业务，并且服务和服务间会有相互调用，需要<strong>将自身的实体类、Feign接口对外暴露出去，提供成jar包供别人加载</strong>，因此我们的项目结构是这样的：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108103538061.png" alt="image-20200108103538061"> </p><h2 id="4-3-父工程"><a href="#4-3-父工程" class="headerlink" title="4.3.父工程"></a>4.3.父工程</h2><p>创建统一的父工程：leyou，用来管理依赖及其版本，注意是<strong>创建project</strong>，而不是moudle</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239776553.png" alt="1551239776553"></p><p>填写工程信息：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239758795.png" alt="1551239758795"></p><p>保存的位置信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239769186.png" alt="1551239769186"></p><p>然后将pom文件修改成：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR5<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.plus.version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">mybatis.plus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">leyou.latest.version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">leyou.latest.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ali.oss.version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">ali.oss.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- springCloud --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;ali.oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!--这里再次指定版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现，我们在父工程中引入了SpringCloud等很多以后需要用到的依赖，以后创建的子工程就不需要自己引入了。</p><p>如果接下来创建的是一个需要<strong>运行和启动</strong>的子工程，需要加上SpringBoot的打包插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意，上面的启动插件，需要用到启动时的子工程才引入。并不是在父工程引用哦，否则本不需要启动的子工程会报错。</strong></p><h2 id="4-4-注册中心"><a href="#4-4-注册中心" class="headerlink" title="4.4.注册中心"></a>4.4.注册中心</h2><h3 id="4-4-1-创建工程"><a href="#4-4-1-创建工程" class="headerlink" title="4.4.1.创建工程"></a>4.4.1.创建工程</h3><p>这个大家应该比较熟悉了。</p><p>我们的注册中心，起名为：ly-registry，<strong>直接创建maven项目，自然会继承父类的依赖</strong>：</p><p>选择新建module：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239817387.png" alt="1551239817387"></p><p>选择maven安装，但是不要选择骨架：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239800177.png" alt="1551239800177"></p><p>然后填写项目坐标，我们的项目名称为ly-registry:</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239836496.png" alt="1551239836496"></p><p>选择安装目录，因为是聚合项目，目录应该是在父工程leyou的下面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239848532.png" alt="1551239848532"></p><h3 id="4-4-2-添加依赖"><a href="#4-4-2-添加依赖" class="headerlink" title="4.4.2.添加依赖"></a>4.4.2.添加依赖</h3><p>添加EurekaServer的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-registry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-4-编写启动类"><a href="#4-4-4-编写启动类" class="headerlink" title="4.4.4.编写启动类"></a>4.4.4.编写启动类</h3><p>创建一个包：com.leyou，然后新建一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyRegistry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyRegistry.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-5-配置文件"><a href="#4-4-5-配置文件" class="headerlink" title="4.4.5.配置文件"></a>4.4.5.配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-registry</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="4-4-6-项目的结构："><a href="#4-4-6-项目的结构：" class="headerlink" title="4.4.6.项目的结构："></a>4.4.6.项目的结构：</h3><p>目前，整个项目的结构如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239918685.png" alt="1551239918685"></p><p>注意：上面的注册中心能够跑动，需要<strong>将maven安装并且配置好环境变量，idea中选择安装路径</strong>；maven的介绍以及安装见：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2022/04/11/web-12-maven/</span></span><br></pre></td></tr></table></figure><p>但还是报错：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">main]</span> <span class="string">o.a.c.c.C.[Tomcat].[localhost].[/]       : Exception starting filter [servletContainer]</span></span><br></pre></td></tr></table></figure><h2 id="4-5-网关"><a href="#4-5-网关" class="headerlink" title="4.5.网关"></a>4.5.网关</h2><h3 id="4-5-1-搭建项目"><a href="#4-5-1-搭建项目" class="headerlink" title="4.5.1.搭建项目"></a>4.5.1.搭建项目</h3><p>步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">创建leyou的module，并命名</span></span><br><span class="line"><span class="meta">-</span> <span class="string">引入依赖</span></span><br><span class="line"><span class="meta">-</span> <span class="string">编写启动类</span></span><br><span class="line"><span class="meta">-</span> <span class="string">编写配置</span></span><br></pre></td></tr></table></figure><h4 id="1）创建module"><a href="#1）创建module" class="headerlink" title="1）创建module"></a>1）创建module</h4><p>与上面类似，选择maven方式创建Module，然后填写项目名称，我们命名为：ly-gateway</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239931675.png" alt="1551239931675"></p><p>填写保存的目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239938112.png" alt="1551239938112"></p><h4 id="2）添加依赖"><a href="#2）添加依赖" class="headerlink" title="2）添加依赖"></a>2）添加依赖</h4><p>这里我们需要添加Zuul和EurekaClient的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3）编写启动类"><a href="#3）编写启动类" class="headerlink" title="3）编写启动类"></a>3）编写启动类</h4><p>创建一个包：<code>com.leyou.gateway</code>，然后新建一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.gateway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.SpringCloudApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyGateway</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyGateway.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4）配置文件"><a href="#4）配置文件" class="headerlink" title="4）配置文件"></a>4）配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution.isolation.thread.timeoutInMilliseconds:</span> <span class="number">6000</span> <span class="comment"># 熔断超时时长：6000ms</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">500</span> <span class="comment"># ribbon链接超时时长</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># ribbon读取超时时长</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 去除路由前缀</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="4-5-2-项目结构"><a href="#4-5-2-项目结构" class="headerlink" title="4.5.2.项目结构"></a>4.5.2.项目结构</h3><p>目前，leyou下有两个子模块：</p><ul><li>ly-registry：服务的注册中心（EurekaServer）</li><li>ly-api-gateway：服务网关（Zuul）</li></ul><p>目前，服务的结构如图所示：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240009768.png" alt="1551240009768"></p><h3 id="4-5-3-hystix降级配置"><a href="#4-5-3-hystix降级配置" class="headerlink" title="4.5.3.hystix降级配置"></a>4.5.3.hystix降级配置</h3><p>网关做请求路由转发，如果被调用的请求阻塞，需要通过Hystrix来做线程隔离和熔断，防止出现故障。</p><h4 id="1）Hystix降级过滤器"><a href="#1）Hystix降级过滤器" class="headerlink" title="1）Hystix降级过滤器"></a>1）Hystix降级过滤器</h4><p>可以通过default-filter来配置，会作用于所有的路由规则。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span> <span class="comment"># 指定过滤工厂名称（可以是任意过滤工厂类型）</span></span><br><span class="line">        <span class="attr">args:</span> <span class="comment"># 指定过滤的参数</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">fallbackcmd</span>  <span class="comment"># hystrix的指令名</span></span><br><span class="line">          <span class="attr">fallbackUri:</span> <span class="string">forward:/hystrix/fallback</span> <span class="comment"># 失败后的跳转路径</span></span><br></pre></td></tr></table></figure><p>触发降级后的fallback处理路径：/fhystrix/fallback</p><h4 id="2）处理fallback的controller"><a href="#2）处理fallback的controller" class="headerlink" title="2）处理fallback的controller"></a>2）处理fallback的controller</h4><p>定义一个controller，用来编写失败的处理逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.gateway.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FallbackController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的超时处理逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 超时提醒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/hystrix/fallback&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">fallBackController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.GATEWAY_TIMEOUT).body(<span class="string">&quot;请求超时！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的返回值是一个名为ResponseEntity的类型。</p><h4 id="3）ResponseEntity"><a href="#3）ResponseEntity" class="headerlink" title="3）ResponseEntity"></a>3）ResponseEntity</h4><p><strong>ResponseEntity是Spring提供的结果类型</strong>，用来封装返回的HttpResponse数据，包括：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">响应状态码：通过ResponseEntity#status(int)方法指定，可以直接指定int值，或者HttpStatus枚举</span></span><br><span class="line"><span class="meta">-</span> <span class="string">响应头：可以指定key、value结构</span></span><br><span class="line"><span class="meta">-</span> <span class="string">响应体：任意对象，处理方式类似于@ResponseBody</span></span><br></pre></td></tr></table></figure><p>这种返回值方式是符合REST风格的，用Http状态码作为结果状态，用响应体封装数据。</p><h3 id="4-5-4-网关限流-了解"><a href="#4-5-4-网关限流-了解" class="headerlink" title="4.5.4.网关限流(了解)"></a>4.5.4.网关限流(了解)</h3><p>网关除了请求路由、身份验证，还有一个非常重要的作用：请求限流。当系统面对高并发请求时，为了减少对业务处理服务的压力，需要在网关中对请求限流，按照一定的速率放行请求。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108155348648.png" alt="image-20200108155348648"></p><p>常见的限流算法包括：</p><ul><li>计数器算法</li><li>漏桶算法</li><li>令牌桶算法</li></ul><h4 id="4-5-4-1-令牌桶算法原理"><a href="#4-5-4-1-令牌桶算法原理" class="headerlink" title="4.5.4.1.令牌桶算法原理"></a>4.5.4.1.令牌桶算法原理</h4><p>SpringGateway中采用的是令牌桶算法，令牌桶算法原理：</p><ul><li>准备一个令牌桶，有固定容量，一般为服务并发上限</li><li>按照固定速率，生成令牌并存入令牌桶，如果桶中令牌数达到上限，就丢弃令牌。</li><li>每次请求调用需要先获取令牌，只有拿到令牌，才继续执行，否则选择选择等待或者直接拒绝。</li></ul><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108161959810.png" alt="image-20200108161959810"></p><h4 id="4-5-4-2-Gateway中限流"><a href="#4-5-4-2-Gateway中限流" class="headerlink" title="4.5.4.2.Gateway中限流"></a>4.5.4.2.Gateway中限流</h4><h5 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h5><p>SpringCloudGateway是采用令牌桶算法，其令牌相关信息记录在redis中，因此需要引入Redis有关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：这里<strong>不是普通的redis依赖，而是响应式的Redis依赖</strong>，因为SpringGateway是基于WebFlux的响应式项目。</p><h5 id="2）配置过滤条件key"><a href="#2）配置过滤条件key" class="headerlink" title="2）配置过滤条件key"></a>2）配置过滤条件key</h5><p>Gateway会在Redis中记录令牌相关信息，我们可以<strong>自己定义令牌桶的规则</strong>，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">给不同的请求URI路径设置不同令牌桶</span></span><br><span class="line"><span class="meta">-</span> <span class="string">给不同的登录用户设置不同令牌桶</span></span><br><span class="line"><span class="meta">-</span> <span class="string">给不同的请求IP地址设置不同令牌桶</span></span><br></pre></td></tr></table></figure><p>而SpringCloudGateway中给桶信息存入Redis时需要有一个KEY来标记，key的生成规则定义在<code>KeyResolver</code>接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KeyResolver</span> </span>&#123;</span><br><span class="line"><span class="function">Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口中的方法返回值就是给令牌桶生成的key。比如上面的三种令牌桶规则，生成key的方式如下：</p><ul><li><p>给不同的请求URI路径设置不同令牌桶，示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Mono.just(exchange.getRequest().getURI().getPath());<span class="comment">// 获取请求URI</span></span><br></pre></td></tr></table></figure></li><li><p>给不同的登录用户设置不同令牌桶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> exchange.getPrincipal().map(Principal::getName);<span class="comment">// 获取用户</span></span><br></pre></td></tr></table></figure></li><li><p>给不同的请求IP地址设置不同令牌桶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Mono.just(exchange.getRequest().getRemoteAddress().getHostName());<span class="comment">// 获取请求者IP</span></span><br></pre></td></tr></table></figure></li></ul><p>这里我们选择最后一种，<strong>使用IP地址的令牌桶key</strong>。</p><p>我们在<code>com.leyou.gateway.config</code>中定义一个类，配置一个KeyResolver的Bean实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个KeyResolver</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">ipKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyResolver() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// JDK8 的Lambda写法：</span></span><br><span class="line">        <span class="comment">// return exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3）配置桶参数"><a href="#3）配置桶参数" class="headerlink" title="3）配置桶参数"></a>3）配置桶参数</h5><p>另外，令牌桶的参数需要通过yaml文件来配置，参数有2个：</p><ul><li><p><code>replenishRate</code>：每秒钟生成令牌的速率，基本上就是每秒钟允许的最大请求数量</p></li><li><p><code>burstCapacity</code>：令牌桶的容量，就是令牌桶中存放的最大的令牌的数量</p></li></ul><p>完整配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 去除路由前缀</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span> <span class="comment"># 指定过滤工厂名称（可以是任意过滤工厂类型）</span></span><br><span class="line">        <span class="attr">args:</span> <span class="comment"># 指定过滤的参数</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">fallbackcmd</span>  <span class="comment"># hystrix的指令名</span></span><br><span class="line">          <span class="attr">fallbackUri:</span> <span class="string">forward:/hystrix/fallback</span> <span class="comment"># 失败后的跳转路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span> <span class="comment">#请求数限流 名字不能随便写</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span> <span class="comment"># 指定一个key生成器,#####跟上面ipKeyResolver方法同名。</span></span><br><span class="line">          <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">2</span> <span class="comment"># 生成令牌的速率</span></span><br><span class="line">          <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span> <span class="comment"># 桶的容量</span></span><br></pre></td></tr></table></figure><p>这里配置了一个<strong>过滤器：RequestRateLimiter，并设置了三个参数</strong>：</p><ul><li><p><code>key-resolver</code>：<code>&quot;#&#123;@ipKeyResolver&#125;&quot;</code>是SpEL表达式，写法是<code>#&#123;@bean的名称&#125;</code>，ipKeyResolver就是我们定义的Bean名称</p></li><li><p><code>redis-rate-limiter.replenishRate</code>：每秒钟生成令牌的速率</p></li><li><p><code>redis-rate-limiter.burstCapacity</code>：令牌桶的容量</p></li></ul><p>这样的限流配置可以<strong>达成的效果：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">每一个IP地址，每秒钟最多发起2次请求</span></span><br><span class="line"><span class="meta">-</span> <span class="string">每秒钟超过2次请求，则返回429的异常状态码</span></span><br></pre></td></tr></table></figure><p>4）配置redis地址</p><p>在application.yml文件中添加redis地址信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br></pre></td></tr></table></figure><h4 id="4-5-4-3-安装Redis"><a href="#4-5-4-3-安装Redis" class="headerlink" title="4.5.4.3.安装Redis"></a>4.5.4.3.安装Redis</h4><h5 id="1）导入镜像"><a href="#1）导入镜像" class="headerlink" title="1）导入镜像"></a>1）导入镜像</h5><p>方案一：如果自己网络不错，直接下载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p>方案二：如果网络不太行，可以使用别人下载好的镜像包：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200710000229823.png" alt="image-20200710000229823"></p><p>首先上传到Linux虚拟机，然后执行命令，导入即可；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i redis.tar</span><br></pre></td></tr></table></figure><h5 id="2）创建挂载目录"><a href="#2）创建挂载目录" class="headerlink" title="2）创建挂载目录"></a>2）创建挂载目录</h5><p>创建一个用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd leyou</span><br></pre></td></tr></table></figure><p>创建密码；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd leyou</span><br></pre></td></tr></table></figure><p>会要求你输入密码两次，确认后创建成功。</p><p>然后进入乐优目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/leyou</span><br></pre></td></tr></table></figure><p>创建一个文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir redis</span><br><span class="line">cd redis</span><br></pre></td></tr></table></figure><p>创建redis 的配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch redis.conf</span><br></pre></td></tr></table></figure><p>修改配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi redis.conf</span><br></pre></td></tr></table></figure><p>添加一些配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">databases 1</span><br></pre></td></tr></table></figure><h5 id="3）运行-1"><a href="#3）运行-1" class="headerlink" title="3）运行"></a>3）运行</h5><p>执行docker命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> <span class="literal">-p</span> <span class="number">6379</span>:<span class="number">6379</span> \</span><br><span class="line"> -<span class="literal">-name</span> ly<span class="literal">-redis</span> \</span><br><span class="line"> <span class="literal">-v</span>  <span class="variable">$PWD</span>/redis.conf:/usr/local/etc/redis/redis.conf \</span><br><span class="line"> -<span class="literal">-privileged</span> \</span><br><span class="line"> <span class="literal">-d</span> \</span><br><span class="line"> redis \</span><br><span class="line"> redis<span class="literal">-server</span> /usr/local/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h2 id="4-6-商品微服务"><a href="#4-6-商品微服务" class="headerlink" title="4.6.商品微服务"></a>4.6.商品微服务</h2><p>先看下之前的项目结构图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108165237708.png" alt="image-20200108165237708"> </p><p>可以知道商品微服务本身也是一个聚合工程，需要有3个子工程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">ly-item-service：编写业务功能，业务功能会依赖于pojo实体类模块</span></span><br><span class="line"><span class="meta">-</span> <span class="string">ly-item-api：对外提供的Feign客户端接口，接口会依赖于pojo实体类模块</span></span><br><span class="line"><span class="meta">-</span> <span class="string">ly-item-pojo：对外提供的实体类</span></span><br></pre></td></tr></table></figure><p>ly-item-api 就是controller层吧。</p><h3 id="4-6-1-创建父工程ly-item"><a href="#4-6-1-创建父工程ly-item" class="headerlink" title="4.6.1.创建父工程ly-item"></a>4.6.1.创建父工程ly-item</h3><p>依然是使用maven构建：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240063940.png" alt="1551240063940"></p><p>保存的位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240086739.png" alt="1551240086739"></p><p>不需要任何依赖，我们可以把项目打包方式设置为pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包方式：POM--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-6-2-创建ly-item-pojo"><a href="#4-6-2-创建ly-item-pojo" class="headerlink" title="4.6.2.创建ly-item-pojo"></a>4.6.2.创建ly-item-pojo</h3><p>在ly-item工程上点击右键，选择new &gt; module:</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240166926.png" alt="1551240166926"></p><p>依然是使用maven构建，注意父工程是ly-item：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240202115.png" alt="1551240202115"></p><p><strong>注意</strong>：接下来填写的目录结构需要自己手动完成，保存到<code>ly-item</code>下的<code>ly-item-pojo</code>目录中：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240220009.png" alt="1551240220009"></p><p>点击Finish完成。</p><p>此时的项目结构：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1544362076716.png" alt="1544362076716"> </p><h3 id="4-6-3-创建ly-item-api"><a href="#4-6-3-创建ly-item-api" class="headerlink" title="4.6.3.创建ly-item-api"></a>4.6.3.创建ly-item-api</h3><p>与<code>ly-item-pojo</code>类似，我们选择在<code>ly-item</code>上右键，新建module，然后填写项目信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108170005760.png" alt="image-20200108170005760"></p><p>填写项目存储位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108170037064.png" alt="image-20200108170037064"></p><p>pom中添加一些依赖（<strong>看清楚，不是在ly-item中添加，是ly-item-api</strong>）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--feign的核心依赖，不是starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-openfeign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--pojo--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-6-4-创建ly-item-service"><a href="#4-6-4-创建ly-item-service" class="headerlink" title="4.6.4.创建ly-item-service"></a>4.6.4.创建ly-item-service</h3><h4 id="1）创建module-1"><a href="#1）创建module-1" class="headerlink" title="1）创建module"></a>1）创建module</h4><p>与<code>ly-item-pojo</code>类似，我们选择在<code>ly-item</code>上右键，新建module，然后填写项目信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240269328.png" alt="1551240269328"></p><p>填写存储位置，是在<code>/ly-item/ly-item-service</code>目录</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240283037.png" alt="1551240283037"></p><p>点击Finish完成。</p><h4 id="2）引入依赖"><a href="#2）引入依赖" class="headerlink" title="2）引入依赖"></a>2）引入依赖</h4><p>给ly-item-sepom中添加一些依赖（<strong>看清楚，不是在ly-item中添加，是ly-item-service</strong>）:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--实体类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3）启动类"><a href="#3）启动类" class="headerlink" title="3）启动类"></a>3）启动类</h4><p>在项目中创建包：<code>com.leyou.item</code>，然后创建一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyItemApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyItemApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4）yaml配置"><a href="#4）yaml配置" class="headerlink" title="4）yaml配置"></a>4）yaml配置</h4><p>在项目的<code>resources</code>目录中，新建application.yml文件，加入下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ly-mysql:3306/heima?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h4 id="5）网关路由"><a href="#5）网关路由" class="headerlink" title="5）网关路由"></a>5）网关路由</h4><p>最后，还要到ly-gateway的application.yml中给当前项目设置路由规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 去除路由前缀</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span> <span class="comment"># 指定过滤工厂名称（可以是任意过滤工厂类型）</span></span><br><span class="line">        <span class="attr">args:</span> <span class="comment"># 指定过滤的参数</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">fallbackcmd</span>  <span class="comment"># hystrix的指令名</span></span><br><span class="line">          <span class="attr">fallbackUri:</span> <span class="string">forward:/hystrix/fallback</span> <span class="comment"># 失败后的跳转路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span> <span class="comment">#请求数限流 名字不能随便写</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span></span><br><span class="line">          <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">item-service</span> <span class="comment"># 商品微服务</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://item-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/item/**</span></span><br></pre></td></tr></table></figure><p>这里的路由路径是：<code>/item/**</code>，因此<strong>要访问到商品微服务，请求路径需要以<code>/item</code>开头</strong>。</p><h3 id="4-6-5-项目结构"><a href="#4-6-5-项目结构" class="headerlink" title="4.6.5.项目结构"></a>4.6.5.项目结构</h3><p>整个商品微服务的结构图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108171637442.png" alt="image-20200108171637442"> </p><h2 id="4-7-通用工具模块"><a href="#4-7-通用工具模块" class="headerlink" title="4.7.通用工具模块"></a>4.7.通用工具模块</h2><p>有些工具类或通用的内容，我们希望各个服务共享，因此需要创建一个工具模块：<code>ly-common</code></p><h3 id="4-7-1-创建common工程"><a href="#4-7-1-创建common工程" class="headerlink" title="4.7.1.创建common工程"></a>4.7.1.创建common工程</h3><p>使用maven来构建module：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551241061737.png" alt="1551241061737"></p><p>位置信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551241076840.png" alt="1551241076840"></p><h3 id="4-7-2-引入工具类"><a href="#4-7-2-引入工具类" class="headerlink" title="4.7.2.引入工具类"></a>4.7.2.引入工具类</h3><p>课前资料中提供了一些工具类：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200710000547989.png" alt="image-20200710000547989"></p><p>在<code>ly-common</code>中创建一个包：<code>com.leyou.common</code>，然后把资料中的四个文件夹拷贝进去：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200710223416978.png" alt="image-20200710223416978"></p><p>这些工具类有一些依赖的jar，需要在pom文件中引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-统一异常处理"><a href="#5-统一异常处理" class="headerlink" title="5.统一异常处理"></a>5.统一异常处理</h1><p>在项目中出现异常是在所难免的，但是出现异常后怎么处理，这就很有学问了。</p><p>以前的异常，通过try catch ，一大长串看不懂的异常提示内容，我们这里的异常处理，目的就是<strong>当异常发生时，将简单，简单，通俗易懂的意思展示出来</strong>；底层原理就是利用到了<strong>动态代理的增强功能</strong>。</p><h2 id="5-1-场景预设"><a href="#5-1-场景预设" class="headerlink" title="5.1.场景预设"></a>5.1.场景预设</h2><h3 id="5-1-1-场景"><a href="#5-1-1-场景" class="headerlink" title="5.1.1.场景"></a>5.1.1.场景</h3><p>我们预设这样一个场景，假如我们做新增商品，需要接收下面的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">price：价格</span><br><span class="line">name：名称</span><br></pre></td></tr></table></figure><p>然后对数据做简单校验：</p><ul><li>价格不能为空</li><li>名称不能为空</li></ul><p>新增时，自动形成ID，然后随商品对象一起返回</p><h3 id="5-1-2-代码"><a href="#5-1-2-代码" class="headerlink" title="5.1.2.代码"></a>5.1.2.代码</h3><p>在ly-item-service中编写实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ly-item-service中编写业务：</p><p>service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Item;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">saveItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 判断价格是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(item.getPrice() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;价格不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(item.getName() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;名称不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机生成id，模拟数据库的新增</span></span><br><span class="line">        <span class="keyword">int</span> id = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">        item.setId(id);</span><br><span class="line">        <span class="comment">// 返回新增之后的对象，回显id</span></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>这里临时使用随机生成id，然后直接返回，没有做数据库操作</li></ul><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Item;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.ItemService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;item&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Item&gt; <span class="title">saveItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Item result = itemService.saveItem(item);</span><br><span class="line">            <span class="comment">// 新增成功, 返回201</span></span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 失败，返回400</span></span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ResponseEntity是一个Spring提供的，用于封装响应结果的实体类。可以自定义响应状态码、响应头、响应头。</p><ul><li><p><code>ResponseEntity.status(HttpStatus.CREATED)</code>：用于指定这次响应的状态码，HttpStatus枚举中定义了常见的返回状态码。另外，ResponseEntity提供了几个便捷方法，代表常用状态码：</p><ul><li><code>ResponseEntity.ok()</code>：代表200</li><li><code>ResponseEntity.noContent()</code>：代表204</li></ul></li><li><p><code>.body(result)</code>：用于指定这次响应的返回值结果，就是响应体</p></li></ul><h3 id="5-1-3-测试"><a href="#5-1-3-测试" class="headerlink" title="5.1.3.测试"></a>5.1.3.测试</h3><p>接下来，启动项目，通过任意Http客户端工具测试：</p><p>当请求正常时，得到201状态码，代表新增成功：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108174453168.png" alt="image-20200108174453168"></p><p>当缺少参数时：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108174520999.png" alt="image-20200108174520999"></p><p>得到400状态码，说明新增失败，请求参数有误</p><h2 id="5-2-统一异常处理"><a href="#5-2-统一异常处理" class="headerlink" title="5.2.统一异常处理"></a>5.2.统一异常处理</h2><p>我们虽然完成了异常的处理，但是<strong>每一个controller中的方法都要写类似异常捕获和处理代码</strong>。</p><p>实际开发中，会有非常多的类和方法，每个都写实在是不方便。</p><p>Spring提供了一个<strong>通用的异常处理器</strong><code>ControllerAdvice</code>，可以非常方便的帮助我们实现统一的异常处理。</p><h3 id="5-2-1-定义异常处理器"><a href="#5-2-1-定义异常处理器" class="headerlink" title="5.2.1.定义异常处理器"></a>5.2.1.定义异常处理器</h3><p>为了让这个异常处理可以在每一个微服务中使用，我们定义到<code>ly-common</code>中。在<code>ly-common</code>中创建一个新的包：<code>com.leyou.common.advice</code>，然后创建一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerExceptionAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统一异常处理方法，<span class="doctag">@ExceptionHandler</span>(RuntimeException.class)声明这个方法处理RuntimeException这样的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 捕获到的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回给页面的状态码和信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleLyException</span><span class="params">(RuntimeException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(<span class="number">400</span>).body(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解读：</p><ul><li><p><code>@ControllerAdvice</code>：添加了**@ControllerAdvice的类，默认情况下，会拦截所有加了<code>@Controller</code>的类**</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1534203615380.png" alt="1534203615380"></p></li><li><p><code>@ExceptionHandler(RuntimeException.class)</code>：作用在方法上，声明要处理的异常类型，这里指定的是<code>RuntimeException</code>。因此任意**<code>Controller</code>抛出<code>RuntimeException</code>都会被当前方法捕获和处理**</p><ul><li>参数：捕获到的异常</li><li>返回值：给页面的提示信息。这里返回值中不仅给出了状态码400，还给出了异常的message</li></ul></li></ul><h3 id="5-2-2-引入advice"><a href="#5-2-2-引入advice" class="headerlink" title="5.2.2.引入advice"></a>5.2.2.引入advice</h3><p>虽然写好了advice，但是是在<code>ly-common</code>中，要在商品微服务使用，比如引入依赖，并且让这个Bean加入Spring容器才可以。</p><h4 id="1）引入依赖-1"><a href="#1）引入依赖-1" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h4><p>首先在<code>ly-item-service</code>中引入<code>ly-common</code>的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ly-common--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）扫描包"><a href="#2）扫描包" class="headerlink" title="2）扫描包"></a>2）扫描包</h4><p>要。我们在<code>ly-item-service</code>的启动类的注解上添加扫描包信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.item&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyItemApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyItemApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里添加了两个扫描包：</p><ul><li>一个是当前项目扫描包</li><li>一个是刚刚定义的advice的扫描包</li></ul><h4 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a>3）测试</h4><p>首先删除ItemController中的异常处理代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Item;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.ItemService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;item&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Item&gt; <span class="title">saveItem</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        Item result = itemService.saveItem(item);</span><br><span class="line">        <span class="comment">// 新增成功, 返回201</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次启动项目，测试一下</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108181004714.png" alt="image-20200108181004714"> </p><p>可以看到异常结果状态码和消息，说明统一异常处理成功了！</p><h2 id="5-3-自定义异常"><a href="#5-3-自定义异常" class="headerlink" title="5.3.自定义异常"></a>5.3.自定义异常</h2><p>在刚才的异常处理中，我们<strong>返回的状态码写死为400，这样显然是有问题的。不同的业务异常，应该返回不同状态码。</strong></p><h3 id="5-3-1-异常状态码"><a href="#5-3-1-异常状态码" class="headerlink" title="5.3.1.异常状态码"></a>5.3.1.异常状态码</h3><p>按照Rest风格，可以有下列状态：</p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>执行成功，一般是GET请求执行成功</td></tr><tr><td>201</td><td>新增业务成功，一般会返回资源访问路径</td></tr><tr><td>204</td><td>执行成功，但是没有返回值，比如删除成功后</td></tr><tr><td>400</td><td>请求参数有误</td></tr><tr><td>401</td><td>未登录或登录失效</td></tr><tr><td>403</td><td>没有访问权限</td></tr><tr><td>404</td><td>资源不存在</td></tr><tr><td>405</td><td>请求方式不正确，应该用GET的用了POST</td></tr><tr><td>406</td><td>响应格式与请求格式不匹配</td></tr><tr><td>413</td><td>请求体过大</td></tr><tr><td>500</td><td>服务端异常</td></tr><tr><td>502</td><td>请求超时</td></tr></tbody></table><h3 id="5-3-2-自定义异常"><a href="#5-3-2-自定义异常" class="headerlink" title="5.3.2.自定义异常"></a>5.3.2.自定义异常</h3><p>只有<strong>处理业务的时候知道应该返回怎样的状态码</strong>，因此需要<strong>在抛出异常的地方把状态码信息封装到异常中，并携带到统一异常处理的地方去获取</strong>。</p><p>但是<strong>普通异常并不能封装状态码，所以需要我们自定义异常</strong>。</p><p>我们在ly-common中定义一个自定义异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.exception;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常状态码信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LyException</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LyException</span><span class="params">(<span class="keyword">int</span> status, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LyException</span><span class="params">(<span class="keyword">int</span> status, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LyException</span><span class="params">(<span class="keyword">int</span> status, String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-3-使用自定义异常"><a href="#5-3-3-使用自定义异常" class="headerlink" title="5.3.3.使用自定义异常"></a>5.3.3.使用自定义异常</h3><p>我们修改ItemService代码，使用自定义异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">saveItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 判断价格是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(item.getPrice() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;价格不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(item.getName() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;名称不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机生成id，模拟数据库的新增</span></span><br><span class="line">        <span class="keyword">int</span> id = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">        item.setId(id);</span><br><span class="line">        <span class="comment">// 返回新增之后的对象，回显id</span></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-4-在ControllerAdvice接收异常信息"><a href="#5-3-4-在ControllerAdvice接收异常信息" class="headerlink" title="5.3.4.在ControllerAdvice接收异常信息"></a>5.3.4.在ControllerAdvice接收异常信息</h3><p>我们修改处理的异常类型为<code>LyException</code>，并从异常中获取状态码信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.advice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerExceptionAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统一异常处理方法，<span class="doctag">@ExceptionHandler</span>(RuntimeException.class)声明这个方法处理RuntimeException这样的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 捕获到的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回给页面的状态码和信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(LyException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleLyException</span><span class="params">(LyException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(e.getStatus()).body(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常总结：！！！！！！！！"><a href="#异常总结：！！！！！！！！" class="headerlink" title="异常总结：！！！！！！！！"></a>异常总结：！！！！！！！！</h3><p><strong>1 异常的目的：</strong>是为了<strong>包装美化</strong>返回给客户端的异常信息</p><p><strong>2 异常流程：</strong>在service层抛出异常，在controller层进行捕获，而捕获时不用比较low的try catch，通过注释，使用更高级的异常切面类进行统一处理。</p><p><strong>3 异常改进：</strong>在service层抛出的异常，抛出的是RunTimeException，捕获该异常对象时得到的信息，还有状态码，状态码是固定的状态码，比如说，500，提示的是服务器出错，而我们实际想要返回的状态码是根据业务不同而返回不同的状态码，比如说，访问资源某个参数为空时，我们返回一个异常信息“<strong>输入名称不能为空</strong>”，还有<strong>状态码600</strong>，而前面的方法只能灵活返回异常信息，异常状态码只能是固定的400，那么我们就要对异常处理进行改进，如何改进呢？？？？在service层抛出代码时，不要抛出系统自带的RunTimeException对象，而是抛出我们自定义的异常类对象，我们在异常类中定义状态变量，那么抛出异常时，除了定义异常信息，还可以附带状态变量，那么异常切面类给客户端返回信息时还可以返回我们自己根据业务异常自定义的状态码！</p><h3 id="5-3-5-统一日志记录"><a href="#5-3-5-统一日志记录" class="headerlink" title="5.3.5.统一日志记录"></a>5.3.5.统一日志记录</h3><p>在ly-common的<code>com.leyou.common.advice</code>包下，新建一个类，利用Aop拦截所有的Service方法，对执行结果日志进行记录。</p><p><strong>看下面Around注解上面的三行注释！！！</strong></p><p>然后在日志里面抛出异常时也很讲究，先catch的是最大的Throwable类，再去判断是不是我们自定义的异常类，不是的话也要抛出我们自定义的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exception.LyException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//ps:Aspect注释的类 表示切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonLogAdvice</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//下面一行代码表示：被service注解的类里面的方法，都是切面方法，那些方法被执行时都调用这里的处理器</span></span><br><span class="line">    <span class="comment">//Around注解表示环绕通知，所以这里的通知是环绕通知。</span></span><br><span class="line">    <span class="comment">//我们希望service层里面的方法执行都需要打印，或者记录，因此service层类需要service注解。</span></span><br><span class="line">    <span class="meta">@Around(&quot;within(@org.springframework.stereotype.Service *)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">handleExceptionLog</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 记录方法进入日志</span></span><br><span class="line">            log.debug(<span class="string">&quot;&#123;&#125;方法准备调用，参数: &#123;&#125;&quot;</span>, jp.getSignature(), Arrays.toString(jp.getArgs()));</span><br><span class="line">            <span class="keyword">long</span> a = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 调用切点方法</span></span><br><span class="line">            Object result = jp.proceed();</span><br><span class="line">            <span class="comment">// 记录方法结束日志</span></span><br><span class="line">            log.debug(<span class="string">&quot;&#123;&#125;方法调用成功，执行耗时&#123;&#125;&quot;</span>, jp.getSignature(), System.currentTimeMillis() - a);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;&#123;&#125;方法执行失败，原因：&#123;&#125;&quot;</span>, jp.getSignature(), throwable.getMessage(), throwable);</span><br><span class="line">            <span class="comment">// 判断异常是否是LyException</span></span><br><span class="line">            <span class="keyword">if</span>(throwable <span class="keyword">instanceof</span> LyException)&#123;</span><br><span class="line">                <span class="comment">// 如果是，不处理，直接抛</span></span><br><span class="line">                <span class="keyword">throw</span> throwable;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 如果不是，转为LyException</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日志总结："><a href="#日志总结：" class="headerlink" title="日志总结："></a>日志总结：</h2><p>就是使用一个切面类，切面类里面的处理器定义好<strong>哪些方法被增强</strong>，<strong>使用的是什么增强</strong>（上面是环绕增强），<strong>增强的内容是什么</strong>，然后<strong>使用注解@Slf4j来使用日志方法</strong>，打印增强处理的信息或者是保存信息到文件中!!!</p><h1 id="6-安装MySQL及导入数据"><a href="#6-安装MySQL及导入数据" class="headerlink" title="6.安装MySQL及导入数据"></a>6.安装MySQL及导入数据</h1><p>大家需要在Linux虚拟机中安装Mysql，因为后面我们要用到Linux中的mysql的一些功能。如果以前安装过，也请按照下面的步骤重新安装(先删除之前的docker容器)。</p><h2 id="6-1-导入mysql镜像"><a href="#6-1-导入mysql镜像" class="headerlink" title="6.1.导入mysql镜像"></a>6.1.导入mysql镜像</h2><p>如果网络环境很好的同学，可以自己拉取镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.25</span><br></pre></td></tr></table></figure><p>如果网络环境一般，可以使用课前资料提供的MySQL镜像包：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200710000815483.png" alt="image-20200710000815483"></p><p>然后，上传到虚拟机中的<code>/tmp</code>目录，然后执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">docker load -i mysql.tar</span><br></pre></td></tr></table></figure><h2 id="6-2-创建本地卷"><a href="#6-2-创建本地卷" class="headerlink" title="6.2.创建本地卷"></a>6.2.创建本地卷</h2><p> 创建一个新用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd leyou</span><br></pre></td></tr></table></figure><p>设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd leyou</span><br></pre></td></tr></table></figure><p>然后会提示要求你输入密码，两次确认后密码设置完成。</p><p>进入leyou用户的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/leyou</span><br></pre></td></tr></table></figure><p>创建文件夹并进入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir mysql</span><br><span class="line">cd mysql</span><br></pre></td></tr></table></figure><h2 id="6-3-安装mysql"><a href="#6-3-安装mysql" class="headerlink" title="6.3.安装mysql"></a>6.3.安装mysql</h2><p>执行docker命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -p 3306:3306 \</span><br><span class="line"> --name ly-mysql \</span><br><span class="line"> -v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line"> -v $PWD/logs:/logs \</span><br><span class="line"> -v $PWD/data:/var/lib/mysql \</span><br><span class="line"> -e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line"> --privileged \</span><br><span class="line"> -d \</span><br><span class="line"> mysql:5.7.25</span><br></pre></td></tr></table></figure><p>关键信息说明：</p><ul><li><code> -v $PWD/conf:/etc/mysql/conf.d</code>：是将当前目录的<code>conf</code>目录与docker容器中的<code>/etc/mysql/conf.d</code><strong>目录绑定，可以自己指定配置文件</strong></li></ul><p>自定义配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi conf/my.cnf</span><br></pre></td></tr></table></figure><p>然后添加下面内容：（注意，[mysqld]可别漏了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line">character_set_server=utf8</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">server-id=1000</span><br></pre></td></tr></table></figure><p>重启mysql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure><h2 id="6-4-导入数据"><a href="#6-4-导入数据" class="headerlink" title="6.4.导入数据"></a>6.4.导入数据</h2><p>通过idea里面的Navicat连接MySQL，（或者使用SQLyog软件管理），并执行课前资料提供的leyou.sql脚本</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-乐优商城项目环境搭建&quot;&gt;&lt;a href=&quot;#01-乐优商城项目环境搭建&quot; class=&quot;headerlink&quot; title=&quot;01-乐优商城项目环境搭建&quot;&gt;&lt;/a&gt;01-乐优商城项目环境搭建&lt;/h1&gt;&lt;h1 id=&quot;本博客学习目标：&quot;&gt;&lt;a href=&quot;#本</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="乐优商城项目" scheme="http://example.com/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>使用学生邮箱来登录idea账号</title>
    <link href="http://example.com/2022/06/15/%E4%BD%BF%E7%94%A8%E5%AD%A6%E7%94%9F%E9%82%AE%E7%AE%B1%E6%9D%A5%E7%99%BB%E5%BD%95idea%E8%B4%A6%E5%8F%B7/"/>
    <id>http://example.com/2022/06/15/%E4%BD%BF%E7%94%A8%E5%AD%A6%E7%94%9F%E9%82%AE%E7%AE%B1%E6%9D%A5%E7%99%BB%E5%BD%95idea%E8%B4%A6%E5%8F%B7/</id>
    <published>2022-06-15T03:06:05.000Z</published>
    <updated>2022-06-15T03:24:02.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-找到自己所在的学校给自己分配的学生邮箱。"><a href="#1-找到自己所在的学校给自己分配的学生邮箱。" class="headerlink" title="1 找到自己所在的学校给自己分配的学生邮箱。"></a>1 找到自己所在的学校给自己分配的学生邮箱。</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">我是直接百度的，进入链接发现是内部网里面的公告，公文通</span></span><br><span class="line"><span class="attr">公告很清晰说明给我们分配的邮箱跟密码是多少</span></span><br></pre></td></tr></table></figure><h3 id="2-使用分配的邮箱去认证idea-如下是认证页面"><a href="#2-使用分配的邮箱去认证idea-如下是认证页面" class="headerlink" title="2 使用分配的邮箱去认证idea,如下是认证页面"></a>2 使用分配的邮箱去认证idea,如下是认证页面</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//www.jetbrains.com/shop/eform/students</span></span><br></pre></td></tr></table></figure><p>使用邮箱认证，填写信息就好。</p><h3 id="3-利用认证的学生邮箱注册一个idea账号"><a href="#3-利用认证的学生邮箱注册一个idea账号" class="headerlink" title="3 利用认证的学生邮箱注册一个idea账号"></a>3 利用认证的学生邮箱注册一个idea账号</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//account.jetbrains.com/signup-complete</span></span><br></pre></td></tr></table></figure><p>注册完账号就会提示，你这是学生账号，已经授权，享有哪些资源。</p><p><img src="/img/java/idea/1.png" alt="803e2a688844f57fa3fa425a70a122c"></p><h3 id="4-使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）"><a href="#4-使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）" class="headerlink" title="4 使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）"></a>4 使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）</h3><p>（账号密码跟学生邮箱密码是不同的一个密码，当然你也可以设为一样）</p><p><img src="/img/java/idea/2.png" alt="4428d753eebde9c4e8fe9d01e295981"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-找到自己所在的学校给自己分配的学生邮箱。&quot;&gt;&lt;a href=&quot;#1-找到自己所在的学校给自己分配的学生邮箱。&quot; class=&quot;headerlink&quot; title=&quot;1 找到自己所在的学校给自己分配的学生邮箱。&quot;&gt;&lt;/a&gt;1 找到自己所在的学校给自己分配的学生邮</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>yolov5s-无人机堤坝检测</title>
    <link href="http://example.com/2022/06/09/yolov5s-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2022/06/09/yolov5s-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B/</id>
    <published>2022-06-09T09:04:10.000Z</published>
    <updated>2022-06-09T15:09:49.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-yolov5环境配置："><a href="#1-yolov5环境配置：" class="headerlink" title="1 yolov5环境配置："></a>1 yolov5环境配置：</h2><p>（参考我前面的博客）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2021/10/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E7%9A%84ubuntu%E9%83%A8%E7%BD%B2yolov5-5-0/</span></span><br></pre></td></tr></table></figure><h2 id="2-数据集的制作"><a href="#2-数据集的制作" class="headerlink" title="2 数据集的制作"></a>2 数据集的制作</h2><p>(采用vcat工具，直接可以在视频上进行标注)（参考我前面的博客），</p><p>ps：配置vcat服务花费时间比较长，vcat这个工具不同于labelImg，后者是exe执行文件，直接就可以标注图片，但是vcat类似于面向服务编程，要安装docker，docker编排器拉取镜像，运行容器等等，最后将vcat服务跑起来，在浏览器访问，标注。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2022/06/08/vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/%E5%A0%A4%E5%9D%9D%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8Eyolov%E7%9B%AE%E5%BD%95%E5%85%B3%E7%B3%BB.png" alt="堤坝数据集与yolov目录关系"></p><h2 id="3-yolov5s训练自定义数据集方法"><a href="#3-yolov5s训练自定义数据集方法" class="headerlink" title="3 yolov5s训练自定义数据集方法"></a>3 yolov5s训练自定义数据集方法</h2><p>参考：（参考我前面的博客）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2021/11/13/yolov5-customData/</span></span><br></pre></td></tr></table></figure><h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4 效果"></a>4 效果</h2><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/frame_004750.PNG" alt="frame_004750"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/frame_004375.PNG" alt="frame_004375"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/frame_004650.PNG" alt="frame_004650"></p><p>可以看到效果并不算很好，原因主要是数据集太少了，别人训练一个模型需要几个G的数据集，我这只有几十兆</p><p>解决方法：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">数据增强，网上找方法，接下来的工作</span></span><br><span class="line"><span class="attr">2</span> <span class="string">想办法拍更多的视频，继续标注，构建更加庞大的数据集</span></span><br><span class="line"><span class="attr">3</span> <span class="string">拍出来的几乎是正常的堤坝，标注时几乎没有几张图是可以作为有问题的堤坝标签</span></span><br><span class="line"><span class="attr">4</span> <span class="string">除了拍多一点照片，还需要不同类型的堤坝照片</span></span><br><span class="line"><span class="attr">5</span> <span class="string">有了不同类型堤坝的照片，训练时注意要先打乱数据集的顺序，有助于更好的收敛</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-yolov5环境配置：&quot;&gt;&lt;a href=&quot;#1-yolov5环境配置：&quot; class=&quot;headerlink&quot; title=&quot;1 yolov5环境配置：&quot;&gt;&lt;/a&gt;1 yolov5环境配置：&lt;/h2&gt;&lt;p&gt;（参考我前面的博客）&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="yolov5" scheme="http://example.com/tags/yolov5/"/>
    
    <category term="自定义数据模型" scheme="http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>yolov5-黄瓜叶片病虫害识别</title>
    <link href="http://example.com/2022/06/09/yolov5-%E9%BB%84%E7%93%9C%E5%8F%B6%E7%89%87%E7%97%85%E8%99%AB%E5%AE%B3%E8%AF%86%E5%88%AB/"/>
    <id>http://example.com/2022/06/09/yolov5-%E9%BB%84%E7%93%9C%E5%8F%B6%E7%89%87%E7%97%85%E8%99%AB%E5%AE%B3%E8%AF%86%E5%88%AB/</id>
    <published>2022-06-09T08:58:46.000Z</published>
    <updated>2022-06-09T09:02:02.266Z</updated>
    
    <content type="html"><![CDATA[<p>前面做了voc数据集来训练yolov5的网络，现在自定义数据集来训练病虫害识别模型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">官方教程：https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data</span><br><span class="line"></span><br><span class="line">参考教程：https://blog.csdn.net/weixin_45569617/article/details/108125707</span><br></pre></td></tr></table></figure><h2 id="1-yolov5-环境搭建"><a href="#1-yolov5-环境搭建" class="headerlink" title="1 yolov5 环境搭建"></a>1 yolov5 环境搭建</h2><p>请参考我前面写的博客</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">（1）虚拟机上的ubuntu部署yolov5-5.0：</span></span><br><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2021/10/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E7%9A%84ubuntu%E9%83%A8%E7%BD%B2yolov5-5-0/</span></span><br></pre></td></tr></table></figure><h2 id="2-数据集制作（数据标注）"><a href="#2-数据集制作（数据标注）" class="headerlink" title="2 数据集制作（数据标注）"></a>2 数据集制作（数据标注）</h2><p>（1）标注工具</p><p><strong>labelImg工具</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">链接：https</span>:<span class="string">//pan.baidu.com/s/1MwDdnSlNLFIdW-lOfs1uOQ </span></span><br><span class="line"><span class="meta">提取码：6666</span> <span class="string"></span></span><br></pre></td></tr></table></figure><p><strong>vcat工具</strong></p><p>请参考我写的关于vcat标注工具的下载安装，使用教程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2022/06/08/vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</span></span><br></pre></td></tr></table></figure><p>ps:下面讲的都是用labelImg这款工具标注构建数据集的方法</p><p>（2）先把数据集的照片重命名，1.jpg；2.jpg等等，这样子方便点。</p><p>（3）数据分配情况：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">baban：119+107</span>=<span class="string">226张</span></span><br><span class="line"><span class="attr">shuangMei：30张</span></span><br><span class="line"><span class="attr">normal：225张</span></span><br><span class="line"></span><br><span class="line"><span class="attr">分配：</span></span><br><span class="line"><span class="attr">train：</span></span><br><span class="line"><span class="attr">200张baban（1-106）和（120-213）；</span></span><br><span class="line"><span class="attr">200张normal；（257-456）</span></span><br><span class="line"><span class="attr">25张shaugnMe。（227-237）以及（240-253）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">val：</span></span><br><span class="line"><span class="attr">24张baban；（107-118）及（214-225）</span></span><br><span class="line"><span class="meta">20张normal；（457-</span>  <span class="string">476）；</span></span><br><span class="line"><span class="attr">3张shuangMei。（238，254，255）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test：</span></span><br><span class="line"><span class="attr">两张banban，（119，226）</span></span><br><span class="line"><span class="attr">五张normal，（477-481）</span></span><br><span class="line"><span class="meta">两张shuangMei</span> <span class="string">。（239，256）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">感觉霜霉毒数据集太少了，可以不要这种，只需要正常叶片跟靶斑病毒二分类就好。</span></span><br><span class="line"><span class="attr">目前先三分类用着吧，看看效果。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">train，val，test</span> <span class="string">比例大概是25:5:1；</span></span><br><span class="line"><span class="attr">train，val按照一定比例就好，test随便，主要是测试模型精度如何。</span></span><br></pre></td></tr></table></figure><p>（4）标注数据（选用txt格式）</p><p>​        这里很奇怪，labelimg.exe在下载目录中解压打开就可以打开，但是拷贝到其他地方就打不开。</p><p>​        然后在保存label时提示编码错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 1288, in saveFile</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 1320, in _saveFile</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 810, in saveLabels</span><br><span class="line">UnicodeEncodeError: &#x27;ascii&#x27; codec can&#x27;t encode characters in position 38-43: ordinal not in range(128)</span><br></pre></td></tr></table></figure><p>但是实际上txt文件还是保存成功了的。就不知道保存的东西正不正确。应该正确的。</p><h2 id="3-文件结构"><a href="#3-文件结构" class="headerlink" title="3 文件结构"></a>3 文件结构</h2><p><strong>叶片数据集跟yolov5源码目录结构关系</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">datasets</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">images</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">train</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">val</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">test</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">labels</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">train</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">val</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">test</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">data.yaml</span></span><br><span class="line"><span class="meta">-</span> <span class="string">yolov5-5.0</span></span><br></pre></td></tr></table></figure><h2 id="4-data-yaml文件内容"><a href="#4-data-yaml文件内容" class="headerlink" title="4 data.yaml文件内容"></a>4 data.yaml文件内容</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">train:</span> <span class="string">../datasets/images/train</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">../datasets/images/val</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nc:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">names:</span> [<span class="string">&#x27;normal&#x27;</span>,<span class="string">&#x27;baban&#x27;</span>,<span class="string">&#x27;shuangmei&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="5-更改yolov5-models-yolov5-yaml-文件"><a href="#5-更改yolov5-models-yolov5-yaml-文件" class="headerlink" title="5 更改yolov5/models/yolov5*.yaml 文件"></a>5 更改yolov5/models/yolov5*.yaml 文件</h2><p><strong>如把文件./models/yolov5s.yaml的nc 参数，改成3，因为3分类。</strong></p><h2 id="6-输入命令进行训练"><a href="#6-输入命令进行训练" class="headerlink" title="6 输入命令进行训练"></a>6 输入命令进行训练</h2><p><strong>注意，</strong>参考前面讲的yolov5部署，这里要先进入annaconda创建的yolov5虚拟环境，python 环境就是yolov5虚拟环境里的python环境。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/%E8%AE%AD%E7%BB%83%E5%BC%80%E5%A7%8B.png" alt="训练开始"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/%E8%AE%AD%E7%BB%83%E5%BC%80%E5%A7%8B1.png" alt="训练开始1"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">python train.py --data ../datasets/datas.yaml --cfg ./models/yolov5s.yaml --batch-size 16</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具体每个参数的意思：</span></span><br><span class="line">--data 你自己创建数据集说明文件(yaml文件)的路径</span><br><span class="line">--weights 权重文件路径，我们要重新训练一个模型，该参数可以省略</span><br><span class="line">（如果想要利用迁移学习，就可以加上该参数，指定yolov5模型路径)</span><br><span class="line">--cfg moudles下的权重文件对应的yaml文件路径</span><br><span class="line">--epochs 迭代次数 就是模型要反复训练多少遍 默认为300</span><br><span class="line">--imgsz 这个值会影响模型的速度和精度 越大速度越低精度越高 必须为32的倍数 一般不变</span><br><span class="line">--batch-size 默认为8 使用cpu或显卡不是很好的建议设置为4 这个值越大 模型训练越快</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再举例，训练voc数据集时的训练命令行：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python train.py --data VOC.yaml --cfg yolov5s.yaml --weights <span class="string">&#x27;&#x27;</span> --batch-size 64</span></span><br><span class="line">                                         yolov5m                                40</span><br><span class="line">                                         yolov5l                                24</span><br><span class="line">                                         yolov5x                                16</span><br><span class="line"><span class="meta">#</span><span class="bash">当然啦，不止这些参数，看运行时的参数提示，或者看train文件，方法参数都有哪些值。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-训练完的结果"><a href="#7-训练完的结果" class="headerlink" title="7 训练完的结果"></a>7 训练完的结果</h2><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/%E8%AE%AD%E7%BB%83%E5%AE%8C%E6%88%90.png" alt="训练完成"></p><p>将结果保存到runs/train/exp10下面，可以看到训练过程的一些可视化照片</p><p>当然最重要的肯定是exp*/weight/下的<strong>权重文件best.pt</strong>啦！！！</p><h2 id="8-测试"><a href="#8-测试" class="headerlink" title="8 测试"></a>8 测试</h2><p>可以用detect.py，输入照片源以及刚训练好的模型进行测试一下哈！！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python detect.py --source ../datasets/images/test --weight ./runs/train/exp10/weights/best.pt</span><br></pre></td></tr></table></figure><p>将 test下的所有照片作为输入源，测试完成，看终端提示</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/%E6%B5%8B%E8%AF%95.png" alt="测试"></p><p>只有几百张照片，训练了300轮，效果还算可以</p><p>1 斑礵病毒</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/226.JPG" alt="226"></p><p>2 正常叶片</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/480.JPG" alt="480"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/256.JPG" alt="256"></p><h2 id="9-模型精度问题"><a href="#9-模型精度问题" class="headerlink" title="9 模型精度问题"></a>9 模型精度问题</h2><p>现在整个流程跑通了，想要提高模型的精度，方法如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">增加数据集</span></span><br><span class="line"><span class="attr">（1）图像增强</span></span><br><span class="line"><span class="attr">（2）多拍一些照片咯。</span></span><br><span class="line"><span class="attr">2</span> <span class="string">标注的时候尤其要注意，什么时候该标注，标注的框的位置跟大小！！</span></span><br><span class="line"><span class="attr">3</span> <span class="string">修改参数，多训练几个epoch</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面做了voc数据集来训练yolov5的网络，现在自定义数据集来训练病虫害识别模型。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="yolov5" scheme="http://example.com/tags/yolov5/"/>
    
    <category term="自定义数据模型" scheme="http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>vcat标注工具的安装以及使用</title>
    <link href="http://example.com/2022/06/08/vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/06/08/vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2022-06-08T15:16:59.000Z</published>
    <updated>2022-06-09T07:51:01.236Z</updated>
    
    <content type="html"><![CDATA[<p>前面用yolov5训练自定义的数据集（病虫害识别）的时候，用的是labellmg这款软件，但是这款软件不能处理视频的标注，最近张老师要我搞无人机堤坝检测项目，因此今天就来写写在视频上进行标注，制作数据集更高级一点的标注工具：vcat。话不多说，赶紧上车！</p><h1 id="1-Ubuntu-18-04上安装vcat"><a href="#1-Ubuntu-18-04上安装vcat" class="headerlink" title="1 Ubuntu 18.04上安装vcat"></a>1 Ubuntu 18.04上安装vcat</h1><p>参考教程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//openvinotoolkit.github.io/cvat/docs/administration/basics/installation/</span></span><br></pre></td></tr></table></figure><h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1 安装docker"></a>1 安装docker</h2><p>分别执行如下命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get --no-install-recommends install -y \</span></span><br><span class="line"><span class="string">  apt-transport-https \</span></span><br><span class="line"><span class="string">  ca-certificates \</span></span><br><span class="line"><span class="string">  curl \</span></span><br><span class="line"><span class="string">  gnupg-agent \</span></span><br><span class="line"><span class="string">  software-properties-common</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">curl</span> <span class="string">-fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">add-apt-repository \</span></span><br><span class="line"><span class="string">  &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  $(lsb_release -cs) \</span></span><br><span class="line"><span class="string">  stable&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get --no-install-recommends install -y docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure><p>分组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>注销并重新登录（或重新启动），以便重新评估您的组成员身份。之后，您可以在终端窗口中键入<code>groups</code>命令并检查<code>docker</code>组是否在其输出中。</p><h2 id="2-安装-docker-compose（1-19-0-或更高版本）"><a href="#2-安装-docker-compose（1-19-0-或更高版本）" class="headerlink" title="2 安装 docker-compose（1.19.0 或更高版本）"></a>2 安装 docker-compose（1.19.0 或更高版本）</h2><p>Compose 是一个用于定义和运行多容器 docker 应用程序的工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --no-install-recommends install -y python3-pip python3-setuptools</span><br><span class="line">sudo python3 -m pip install setuptools docker-compose</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jason@jason-virtual-machine:~$ pwd</span><br><span class="line">/home/jason</span><br></pre></td></tr></table></figure><h2 id="3-克隆cvat源代码"><a href="#3-克隆cvat源代码" class="headerlink" title="3 克隆cvat源代码"></a>3 克隆cvat源代码</h2><p>在/home/jason下，从 <a href="https://github.com/opencv/cvat">GitHub 存储</a><em>库克隆 CVAT</em>源代码。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt-get --no-install-recommends install -y git</span></span><br><span class="line"><span class="attr">git</span> <span class="string">clone https://github.com/opencv/cvat</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">cvat</span></span><br></pre></td></tr></table></figure><p>在上面第二步克隆时发生如下错误,折腾了一下，发现还是没解决，就不折腾了，直接使用手动下载zip，然后解压缩到当前目录的cvat目录下！</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Failed</span> <span class="string">to connect to github.com port 443: 拒绝连接</span></span><br></pre></td></tr></table></figure><p>要通过网络或通过其他系统访问 CVAT，请导出<code>CVAT_HOST</code>环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CVAT_HOST=your-ip-address</span><br><span class="line">如：</span><br><span class="line"><span class="built_in">export</span> CVAT_HOST=192.168.1.138</span><br></pre></td></tr></table></figure><h2 id="4-运行-docker-容器。"><a href="#4-运行-docker-容器。" class="headerlink" title="4 运行 docker 容器。"></a>4 运行 docker 容器。</h2><p>前面下载了docker，还下载安装了docker-compose(容器编排)，这里就要利用容器编排来下载并且运行vcat所需要的镜像啦：从 DockerHub 下载最新的 CVAT 版本和其他所需的镜像（如 postgres、redis 等）并创建容器需要一些时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>但是好奇怪，发生如下报错，提示docker-compose 命令找不到，命名上面已经安装了docker-compose了</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jason@jason-virtual-machine</span>:<span class="string">~/cvat$ docker-compose up -d</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Command</span> <span class="string">&#x27;docker-compose&#x27; not found, but can be installed with:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">snap install docker          # version 20.10.14, or</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt  install docker-compose</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行sudo snap install docker之后再去执行docker-compose up -d命令，就可以将cvat相关镜像容器拉取并且运行起来</p><p>拉取并运行成功，执行 docker ps 命令可以看到正在运行的容器：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608151329919.png" alt="image-20220608151329919"></p><p>注意，这需要花费很长时间，因为拉取的几个镜像都很大，超1个G的镜像大小！</p><h2 id="5-创建一个超级用户"><a href="#5-创建一个超级用户" class="headerlink" title="5 创建一个超级用户"></a>5 创建一个超级用户</h2><p>超级用户可以使用管理面板为用户分配正确的组。请使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it cvat bash -ic &#x27;python3 ~/manage.py createsuperuser&#x27;</span><br></pre></td></tr></table></figure><p>需要输入超级用户的用户名以及邮箱，用户密码。邮箱输入自己的qq邮箱就好。用户名跟密码都是自己定的，比如admin，root分别是我的用户名跟密码。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608152304339.png" alt="image-20220608152304339"></p><p>到此为止，已经将cvat安装运行起来了</p><h2 id="6-访问vcat服务"><a href="#6-访问vcat服务" class="headerlink" title="6 访问vcat服务"></a>6 访问vcat服务</h2><p>vcat服务只支持谷歌浏览器访问，因此需要安装谷歌浏览器，当然，由于上面已经执行了命令：export CVAT_HOST=your-ip-address，因此，在ubuntu宿主机的windows系统上的谷歌浏览器也能访问ubuntu的cvat服务。刚开始浏览器访问：<a href="http://192.168.1.138:8080/%EF%BC%8C%E4%BC%9A%E6%8F%90%E7%A4%BA%E4%BD%A0%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%EF%BC%8C%E7%94%A8%E4%B8%8A%E9%9D%A2%E9%85%8D%E7%BD%AE%E7%9A%84%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E8%B7%9F%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E5%B0%B1%E5%A5%BD%E5%95%A6%E3%80%82">http://192.168.1.138:8080/，会提示你进行登录，用上面配置的超级用户的用户名跟密码登录就好啦。</a></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608155602684.png" alt="image-20220608155602684"></p><p>登录成功后显示如下页面</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608152905908.png" alt="image-20220608152905908"></p><p>当然，你也可以在ubuntu上安装谷歌浏览器，直接在ubuntu谷歌浏览器输入：<a href="http://127.0.0.1:8080/%E6%9D%A5%E8%AE%BF%E9%97%AEvcat%E6%9C%8D%E5%8A%A1%E3%80%82">http://127.0.0.1:8080/来访问vcat服务。</a></p><p>安装方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo apt-get -f install</span><br><span class="line"></span><br><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p>执行完后就可以在应用中找到,打开谷歌浏览器，将其添加到收藏夹就好啦。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608155111313.png" alt="image-20220608155111313"></p><h1 id="2-vcat服务标注工具的使用"><a href="#2-vcat服务标注工具的使用" class="headerlink" title="2 vcat服务标注工具的使用"></a>2 vcat服务标注工具的使用</h1><p>参考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/ZHUO__zhuo/article/details/125068660</span></span><br></pre></td></tr></table></figure><p>总结步骤为：</p><h2 id="1-开启cvat服务"><a href="#1-开启cvat服务" class="headerlink" title="1 开启cvat服务"></a>1 开启cvat服务</h2><p>ubuntu上开启cvat服务，然后windows登录进入cvat服务，然后新建任务</p><h2 id="2-对新任务进行设置"><a href="#2-对新任务进行设置" class="headerlink" title="2 对新任务进行设置"></a>2 对新任务进行设置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">任务名，</span></span><br><span class="line"><span class="attr">2</span> <span class="string">工程名，</span></span><br><span class="line"><span class="attr">3</span> <span class="string">添加标签</span></span><br><span class="line"><span class="attr">4</span> <span class="string">选择标注数据源（我这里是直接拖拽windows上的视频到浏览器中）</span></span><br><span class="line"><span class="attr">5</span> <span class="string">高级配置，我这里高级配置只设置了每隔25帧标注一次，起始帧</span></span><br><span class="line"><span class="attr">然后点击submit，任务就创建成功了。</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608170856792.png" alt="image-20220608170856792"></p><h2 id="3-标注"><a href="#3-标注" class="headerlink" title="3 标注"></a>3 标注</h2><p>点击相应Job就可以进行标注了</p><p>标注时点击左侧栏，如下图，点击shape就可以在图中进行标注了，然后可以选择标签类型，上下帧切换等，最好每画一个框都保存一次。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608220759657.png" alt="image-20220608220759657"></p><p>常用的快捷键，加快标注速度：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">保存：</span> <span class="string">Ctrl + S</span></span><br><span class="line"><span class="meta">删除：</span> <span class="string">Delete</span></span><br><span class="line"><span class="attr">缩放：鼠标滚轴，往上放大，向下缩小</span></span><br><span class="line"><span class="attr">拖动：鼠标左键点击并拖动图片，调整位置</span></span><br><span class="line"><span class="attr">下一帧：F</span></span><br><span class="line"><span class="attr">上一帧：D</span></span><br><span class="line"><span class="meta">向后跳十张</span>: <span class="string">Shift+Ctrl + V</span></span><br><span class="line"><span class="meta">向前跳十张</span>: <span class="string">Shift+Ctrl + C</span></span><br><span class="line"><span class="meta">复制框：Ctrl</span> <span class="string">+ C</span></span><br><span class="line"><span class="meta">粘贴框：Ctrl</span> <span class="string">+ V</span></span><br><span class="line"><span class="attr">重复上一次标注框参数：N，比如连续标一类头框，那么每次重复标时按N可以直接标下一个头框</span></span><br><span class="line"><span class="meta">对选定对象连续标注接下来所有帧内此对象：Ctrl</span> <span class="string">+ B</span></span><br><span class="line"><span class="attr">转换标签：Ctrl+(0..9)</span></span><br></pre></td></tr></table></figure><h2 id="4-导出："><a href="#4-导出：" class="headerlink" title="4 导出："></a>4 导出：</h2><p>导出时选择相应类型，然后下载为zip文件。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608222913963.png" alt="image-20220608222913963"></p><p>如下图，选择yolo 1.1 类型，下载的文件就是png的图片跟txt标注文件。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608222930991.png" alt="image-20220608222930991"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/1654745537(1).jpg" alt="1654745537(1)"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608223240874.png" alt="image-20220608223240874"></p><h2 id="5-注意："><a href="#5-注意：" class="headerlink" title="5  注意："></a>5  注意：</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">导出文件中，文件名就是原视频的第几帧，而网站中的当前帧就是提取后的帧的第几帧。</span></span><br><span class="line"><span class="attr">2</span> <span class="string">我们在创建任务时，设置的隔几帧标注一次，这个挺重要，如果设置的太低，那么很多图片几乎都是一样的</span></span><br><span class="line"><span class="attr">设置的太高，那么又容易错过一些数据集，因此看原视频本身的画面切换速度而定吧</span></span><br><span class="line"><span class="attr">3</span> <span class="string">保存时，会将所有的帧都保存下来，就算没有进行方框标注的帧也会保存下来（图片+txt标注文件）</span></span><br><span class="line"><span class="attr">如果原视频拍摄的比较多额外内容的话，保存下来的数据集可能会比较杂，这点要注意</span></span><br><span class="line"><span class="attr">确实比较杂时最后标注时记下来标注过的帧是第几帧，直接在导出保存的文件中，将我们标注过的数据集提取出来</span></span><br><span class="line"><span class="attr">这样子的数据集才比较纯净。</span></span><br><span class="line"><span class="attr">4</span> <span class="string">网上还看到一些数据增强方式，将导出下载的数据集再次进行增强，能多出六倍的数据集，这里读者可以自行测试一下</span></span><br><span class="line"><span class="attr">5</span> <span class="string">将标注过的数据集再次倒进来，再次继续标注，完善某些帧的标注，这里也请读者自己自行测试吧。</span></span><br></pre></td></tr></table></figure><h2 id="推荐阅读："><a href="#推荐阅读：" class="headerlink" title="推荐阅读："></a>推荐阅读：</h2><p>yolov5+vcat标注工具结合来训练自定义数据教程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.51cto.com/u_13565704/5136654</span></span><br></pre></td></tr></table></figure><p>常用数据标注工具：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//baijiahao.baidu.com/s?id=1727327620467031481&amp;wfr=spider&amp;for=pc</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面用yolov5训练自定义的数据集（病虫害识别）的时候，用的是labellmg这款软件，但是这款软件不能处理视频的标注，最近张老师要我搞无人机堤坝检测项目，因此今天就来写写在视频上进行标注，制作数据集更高级一点的标注工具：vcat。话不多说，赶紧上车！&lt;/p&gt;
&lt;h1 i</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="vcat" scheme="http://example.com/tags/vcat/"/>
    
  </entry>
  
  <entry>
    <title>pandas-轻松学pandas-快速入门</title>
    <link href="http://example.com/2022/06/01/pandas-%E8%BD%BB%E6%9D%BE%E5%AD%A6pandas-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/06/01/pandas-%E8%BD%BB%E6%9D%BE%E5%AD%A6pandas-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2022-06-01T08:51:36.000Z</published>
    <updated>2022-06-01T08:59:36.203Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># ps:下面是经过多次运行之后将输出答案以注释写到代码中，但是数据是随机生成的，所以有时候看到同一个变量不一样的输出！</span></span><br><span class="line"><span class="comment">############################################################# 1 创建数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 创建一个Series对象</span></span><br><span class="line">example = pd.Series([<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, np.nan, <span class="number">15</span>, <span class="number">16</span>])</span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    10.0</span></span><br><span class="line"><span class="string">1    11.0</span></span><br><span class="line"><span class="string">2    12.0</span></span><br><span class="line"><span class="string">3    13.0</span></span><br><span class="line"><span class="string">4     NaN</span></span><br><span class="line"><span class="string">5    15.0</span></span><br><span class="line"><span class="string">6    16.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(example)) <span class="comment"># 显示类型</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.series.Series&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 创建一个日期Series对象</span></span><br><span class="line">dt = pd.date_range(<span class="string">&#x27;20210120&#x27;</span>, periods=<span class="number">7</span>) <span class="comment"># 起始日期：2021-01-20 , ... , 截止日期 2020-01-26</span></span><br><span class="line"><span class="built_in">print</span>(dt)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DatetimeIndex([&#x27;2021-01-20&#x27;, &#x27;2021-01-21&#x27;, &#x27;2021-01-22&#x27;, &#x27;2021-01-23&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-24&#x27;, &#x27;2021-01-25&#x27;, &#x27;2021-01-26&#x27;],</span></span><br><span class="line"><span class="string">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dt))</span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.indexes.datetimes.DatetimeIndex&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 创建一个DataFrame对象，元素在[0, 10)之间，shape=(7, 5)############## 指定某一列(Series)为索引</span></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, size=(<span class="number">7</span>, <span class="number">5</span>)), index=dt, columns=<span class="built_in">list</span>(<span class="string">&#x27;abcde&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  7  7  4  6  2</span></span><br><span class="line"><span class="string">2021-01-21  1  0  9  9  6</span></span><br><span class="line"><span class="string">2021-01-22  5  8  2  8  8</span></span><br><span class="line"><span class="string">2021-01-23  6  4  9  8  1</span></span><br><span class="line"><span class="string">2021-01-24  7  9  1  6  5</span></span><br><span class="line"><span class="string">2021-01-25  1  4  3  4  0</span></span><br><span class="line"><span class="string">2021-01-26  2  3  2  0  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 创建一个DataFrame对象，数据由字典对象传递，每列的数据类型不同</span></span><br><span class="line">df2 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;aa&#x27;</span> : <span class="number">2.0</span>,</span><br><span class="line">    <span class="string">&#x27;bb&#x27;</span> : pd.to_datetime(<span class="string">&#x27;20210129&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;cc&#x27;</span> : pd.Series(<span class="number">3.0</span>, index=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>)), dtype=<span class="string">&#x27;float32&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;dd&#x27;</span> : np.array([<span class="number">4</span>] * <span class="number">5</span>, dtype=<span class="string">&#x27;int32&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;ee&#x27;</span> : <span class="string">&#x27;tommy&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    aa         bb   cc  dd     ee</span></span><br><span class="line"><span class="string">0  2.0 2021-01-29  3.0   4  tommy</span></span><br><span class="line"><span class="string">1  2.0 2021-01-29  3.0   4  tommy</span></span><br><span class="line"><span class="string">2  2.0 2021-01-29  3.0   4  tommy</span></span><br><span class="line"><span class="string">3  2.0 2021-01-29  3.0   4  tommy</span></span><br><span class="line"><span class="string">4  2.0 2021-01-29  3.0   4  tommy</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df2.dtypes)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">aa           float64</span></span><br><span class="line"><span class="string">bb    datetime64[ns]</span></span><br><span class="line"><span class="string">cc           float32</span></span><br><span class="line"><span class="string">dd             int32</span></span><br><span class="line"><span class="string">ee            object</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ############################################################# 2 查看数据</span></span><br><span class="line"><span class="built_in">print</span>(df) <span class="comment"># 显示全部数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  7  7  4  6  2</span></span><br><span class="line"><span class="string">2021-01-21  1  0  9  9  6</span></span><br><span class="line"><span class="string">2021-01-22  5  8  2  8  8</span></span><br><span class="line"><span class="string">2021-01-23  6  4  9  8  1</span></span><br><span class="line"><span class="string">2021-01-24  7  9  1  6  5</span></span><br><span class="line"><span class="string">2021-01-25  1  4  3  4  0</span></span><br><span class="line"><span class="string">2021-01-26  2  3  2  0  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.head()) <span class="comment"># 默认显示前5行数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  7  7  4  6  2</span></span><br><span class="line"><span class="string">2021-01-21  1  0  9  9  6</span></span><br><span class="line"><span class="string">2021-01-22  5  8  2  8  8</span></span><br><span class="line"><span class="string">2021-01-23  6  4  9  8  1</span></span><br><span class="line"><span class="string">2021-01-24  7  9  1  6  5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.tail()) <span class="comment"># 默认显示后5行数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-22  5  8  2  8  8</span></span><br><span class="line"><span class="string">2021-01-23  6  4  9  8  1</span></span><br><span class="line"><span class="string">2021-01-24  7  9  1  6  5</span></span><br><span class="line"><span class="string">2021-01-25  1  4  3  4  0</span></span><br><span class="line"><span class="string">2021-01-26  2  3  2  0  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.index) <span class="comment"># 显示索引</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DatetimeIndex([&#x27;2021-01-20&#x27;, &#x27;2021-01-21&#x27;, &#x27;2021-01-22&#x27;, &#x27;2021-01-23&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-24&#x27;, &#x27;2021-01-25&#x27;, &#x27;2021-01-26&#x27;],</span></span><br><span class="line"><span class="string">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.describe()) <span class="comment"># 数据统计</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">              a         b         c         d         e</span></span><br><span class="line"><span class="string">count  7.000000  7.000000  7.000000  7.000000  7.000000</span></span><br><span class="line"><span class="string">mean   4.142857  5.000000  4.285714  5.857143  3.142857</span></span><br><span class="line"><span class="string">std    2.734262  3.162278  3.352327  3.078342  3.184785</span></span><br><span class="line"><span class="string">min    1.000000  0.000000  1.000000  0.000000  0.000000</span></span><br><span class="line"><span class="string">25%    1.500000  3.500000  2.000000  5.000000  0.500000</span></span><br><span class="line"><span class="string">50%    5.000000  4.000000  3.000000  6.000000  2.000000</span></span><br><span class="line"><span class="string">75%    6.500000  7.500000  6.500000  8.000000  5.500000</span></span><br><span class="line"><span class="string">max    7.000000  9.000000  9.000000  9.000000  8.000000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.T) <span class="comment"># 数据转置（行列交换）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   2021-01-20  2021-01-21  2021-01-22  ...  2021-01-24  2021-01-25  2021-01-26</span></span><br><span class="line"><span class="string">a           7           1           5  ...           7           1           2</span></span><br><span class="line"><span class="string">b           7           0           8  ...           9           4           3</span></span><br><span class="line"><span class="string">c           4           9           2  ...           1           3           2</span></span><br><span class="line"><span class="string">d           6           9           8  ...           6           4           0</span></span><br><span class="line"><span class="string">e           2           6           8  ...           5           0           0</span></span><br><span class="line"><span class="string">[5 rows x 7 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  6  6  6  2  9</span></span><br><span class="line"><span class="string">2021-01-21  7  7  3  8  6</span></span><br><span class="line"><span class="string">2021-01-22  8  4  9  6  8</span></span><br><span class="line"><span class="string">2021-01-23  8  3  8  4  3</span></span><br><span class="line"><span class="string">2021-01-24  5  2  1  3  7</span></span><br><span class="line"><span class="string">2021-01-25  6  5  6  1  5</span></span><br><span class="line"><span class="string">2021-01-26  4  0  5  1  7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># axis=1 表示按列名的倒序排列，从 e --&gt; a</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            e  d  c  b  a</span></span><br><span class="line"><span class="string">2021-01-20  9  2  6  6  6</span></span><br><span class="line"><span class="string">2021-01-21  6  8  3  7  7</span></span><br><span class="line"><span class="string">2021-01-22  8  6  9  4  8</span></span><br><span class="line"><span class="string">2021-01-23  3  4  8  3  8</span></span><br><span class="line"><span class="string">2021-01-24  7  3  1  2  5</span></span><br><span class="line"><span class="string">2021-01-25  5  1  6  5  6</span></span><br><span class="line"><span class="string">2021-01-26  7  1  5  0  4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(by=<span class="string">&#x27;a&#x27;</span>, ascending=<span class="literal">False</span>)) <span class="comment"># 根据 列名a 进行排序</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-21  9  5  1  2  7</span></span><br><span class="line"><span class="string">2021-01-25  6  6  2  8  4</span></span><br><span class="line"><span class="string">2021-01-23  4  6  8  9  6</span></span><br><span class="line"><span class="string">2021-01-20  3  8  9  8  3</span></span><br><span class="line"><span class="string">2021-01-22  3  7  8  1  6</span></span><br><span class="line"><span class="string">2021-01-26  3  6  4  5  1</span></span><br><span class="line"><span class="string">2021-01-24  1  4  9  7  7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################### 3 数据检索</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.a) <span class="comment"># 获取a列的数据，类型是Series</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;a&#x27;</span>]) <span class="comment"># 与df.a 等同</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-01-20    3</span></span><br><span class="line"><span class="string">2021-01-21    9</span></span><br><span class="line"><span class="string">2021-01-22    3</span></span><br><span class="line"><span class="string">2021-01-23    4</span></span><br><span class="line"><span class="string">2021-01-24    1</span></span><br><span class="line"><span class="string">2021-01-25    6</span></span><br><span class="line"><span class="string">2021-01-26    3</span></span><br><span class="line"><span class="string">Freq: D, Name: a, dtype: int32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment"># 获取 0 ~ 3行 的数据【不包含3】</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  3  8  9  8  3</span></span><br><span class="line"><span class="string">2021-01-21  9  5  1  2  7</span></span><br><span class="line"><span class="string">2021-01-22  3  7  8  1  6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;20210120&#x27;</span> : <span class="string">&#x27;20210123&#x27;</span>]) <span class="comment"># 根据日期获取数据,根据索引切片</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  3  8  9  8  3</span></span><br><span class="line"><span class="string">2021-01-21  9  5  1  2  7</span></span><br><span class="line"><span class="string">2021-01-22  3  7  8  1  6</span></span><br><span class="line"><span class="string">2021-01-23  4  6  8  9  6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据label获取数据, a列，b列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[:, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b</span></span><br><span class="line"><span class="string">2021-01-20  3  8</span></span><br><span class="line"><span class="string">2021-01-21  9  5</span></span><br><span class="line"><span class="string">2021-01-22  3  7</span></span><br><span class="line"><span class="string">2021-01-23  4  6</span></span><br><span class="line"><span class="string">2021-01-24  1  4</span></span><br><span class="line"><span class="string">2021-01-25  6  6</span></span><br><span class="line"><span class="string">2021-01-26  3  6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据label获取数据，注意切片的用法</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;20210122&#x27;</span> : <span class="string">&#x27;20210125&#x27;</span>, [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            d  e</span></span><br><span class="line"><span class="string">2021-01-22  1  6</span></span><br><span class="line"><span class="string">2021-01-23  9  6</span></span><br><span class="line"><span class="string">2021-01-24  7  7</span></span><br><span class="line"><span class="string">2021-01-25  8  4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据 位置 获取数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df) <span class="comment"># 显示全部数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  4  4  6  2  1</span></span><br><span class="line"><span class="string">2021-01-21  3  2  6  1  5</span></span><br><span class="line"><span class="string">2021-01-22  3  7  0  2  8</span></span><br><span class="line"><span class="string">2021-01-23  6  0  6  3  0</span></span><br><span class="line"><span class="string">2021-01-24  3  4  0  4  5</span></span><br><span class="line"><span class="string">2021-01-25  1  8  8  2  8</span></span><br><span class="line"><span class="string">2021-01-26  1  5  2  6  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>]) <span class="comment"># 获取 index=0 （即第0行）的数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    4</span></span><br><span class="line"><span class="string">b    4</span></span><br><span class="line"><span class="string">c    6</span></span><br><span class="line"><span class="string">d    2</span></span><br><span class="line"><span class="string">e    1</span></span><br><span class="line"><span class="string">Name: 2021-01-20 00:00:00, dtype: int32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df.iloc[<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.series.Series&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">3</span>]) <span class="comment"># 切片</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            b  c</span></span><br><span class="line"><span class="string">2021-01-20  4  6</span></span><br><span class="line"><span class="string">2021-01-21  2  6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">3</span>]]) <span class="comment"># 切片，根据列表指定行和列获取数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            b  d</span></span><br><span class="line"><span class="string">2021-01-20  4  2</span></span><br><span class="line"><span class="string">2021-01-22  7  2</span></span><br><span class="line"><span class="string">2021-01-23  0  3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">1</span>:<span class="number">3</span>, :]) <span class="comment"># 切片，指定行号，所有列</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-21  3  2  6  1  5</span></span><br><span class="line"><span class="string">2021-01-22  3  7  0  2  8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[:, <span class="number">1</span>:<span class="number">3</span>]) <span class="comment"># 切片，所有行，指定列</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            b  c</span></span><br><span class="line"><span class="string">2021-01-20  4  6</span></span><br><span class="line"><span class="string">2021-01-21  2  6</span></span><br><span class="line"><span class="string">2021-01-22  7  0</span></span><br><span class="line"><span class="string">2021-01-23  0  6</span></span><br><span class="line"><span class="string">2021-01-24  4  0</span></span><br><span class="line"><span class="string">2021-01-25  8  8</span></span><br><span class="line"><span class="string">2021-01-26  5  2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">1</span>, <span class="number">1</span>]) <span class="comment"># 获取一个值，row=1, col=1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据布尔值获取数据</span></span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">5</span>]) <span class="comment"># 打印a列中，元素大于5的那些行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-23  6  0  6  3  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df[ df &gt; <span class="number">5</span>]) <span class="comment"># 判断所有元素中，哪些元素大于5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">              a    b    c    d    e</span></span><br><span class="line"><span class="string">2021-01-20  NaN  NaN  6.0  NaN  NaN</span></span><br><span class="line"><span class="string">2021-01-21  NaN  NaN  6.0  NaN  NaN</span></span><br><span class="line"><span class="string">2021-01-22  NaN  7.0  NaN  NaN  8.0</span></span><br><span class="line"><span class="string">2021-01-23  6.0  NaN  6.0  NaN  NaN</span></span><br><span class="line"><span class="string">2021-01-24  NaN  NaN  NaN  NaN  NaN</span></span><br><span class="line"><span class="string">2021-01-25  NaN  8.0  8.0  NaN  8.0</span></span><br><span class="line"><span class="string">2021-01-26  NaN  NaN  NaN  6.0  NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 方法 isin() 过滤</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&#x27;a&#x27;</span>].isin([<span class="number">3</span>, <span class="number">1</span>])]) <span class="comment"># 筛选出a列中元素为3,1 的那些行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-21  3  2  6  1  5</span></span><br><span class="line"><span class="string">2021-01-22  3  7  0  2  8</span></span><br><span class="line"><span class="string">2021-01-24  3  4  0  4  5</span></span><br><span class="line"><span class="string">2021-01-25  1  8  8  2  8</span></span><br><span class="line"><span class="string">2021-01-26  1  5  2  6  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ################################################################## 4 缺失值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  7  5  2  3  4</span></span><br><span class="line"><span class="string">2021-01-21  4  4  4  4  4</span></span><br><span class="line"><span class="string">2021-01-22  1  2  3  9  0</span></span><br><span class="line"><span class="string">2021-01-23  4  0  6  1  3</span></span><br><span class="line"><span class="string">2021-01-24  5  8  7  6  4</span></span><br><span class="line"><span class="string">2021-01-25  7  8  5  2  1</span></span><br><span class="line"><span class="string">2021-01-26  6  1  7  4  7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 增加2列 f,g</span></span><br><span class="line">df = df.reindex(columns=<span class="built_in">list</span>(df.columns) + [<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>] )</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e   f   g</span></span><br><span class="line"><span class="string">2021-01-20  7  5  2  3  4 NaN NaN</span></span><br><span class="line"><span class="string">2021-01-21  4  4  4  4  4 NaN NaN</span></span><br><span class="line"><span class="string">2021-01-22  1  2  3  9  0 NaN NaN</span></span><br><span class="line"><span class="string">2021-01-23  4  0  6  1  3 NaN NaN</span></span><br><span class="line"><span class="string">2021-01-24  5  8  7  6  4 NaN NaN</span></span><br><span class="line"><span class="string">2021-01-25  7  8  5  2  1 NaN NaN</span></span><br><span class="line"><span class="string">2021-01-26  6  1  7  4  7 NaN NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># # 给 f列, g列 赋值</span></span><br><span class="line">df.loc[[<span class="string">&#x27;20210121&#x27;</span>, <span class="string">&#x27;20210122&#x27;</span>, <span class="string">&#x27;20210123&#x27;</span>, <span class="string">&#x27;20210125&#x27;</span>], <span class="string">&#x27;f&#x27;</span>] = <span class="number">1</span></span><br><span class="line">df.loc[[<span class="string">&#x27;20210124&#x27;</span>, <span class="string">&#x27;20210125&#x27;</span>], <span class="string">&#x27;g&#x27;</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e    f    g</span></span><br><span class="line"><span class="string">2021-01-20  7  5  2  3  4  NaN  NaN</span></span><br><span class="line"><span class="string">2021-01-21  4  4  4  4  4  1.0  NaN</span></span><br><span class="line"><span class="string">2021-01-22  1  2  3  9  0  1.0  NaN</span></span><br><span class="line"><span class="string">2021-01-23  4  0  6  1  3  1.0  NaN</span></span><br><span class="line"><span class="string">2021-01-24  5  8  7  6  4  NaN  2.0</span></span><br><span class="line"><span class="string">2021-01-25  7  8  5  2  1  1.0  2.0</span></span><br><span class="line"><span class="string">2021-01-26  6  1  7  4  7  NaN  NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 清理 df 中的 NaN，返回一个新的df,有NaN的所有行都去掉。</span></span><br><span class="line"><span class="built_in">print</span>(df.dropna(how=<span class="string">&#x27;any&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e    f    g</span></span><br><span class="line"><span class="string">2021-01-25  7  8  5  2  1  1.0  2.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df) <span class="comment"># 原来的数据不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充  NaN</span></span><br><span class="line"><span class="built_in">print</span>(df.fillna(value=<span class="number">999</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e    f    g</span></span><br><span class="line"><span class="string">2021-01-20  7  5  2  3  4  999  999</span></span><br><span class="line"><span class="string">2021-01-21  4  4  4  4  4  1.0  999</span></span><br><span class="line"><span class="string">2021-01-22  1  2  3  9  0  1.0  999</span></span><br><span class="line"><span class="string">2021-01-23  4  0  6  1  3  1.0  999</span></span><br><span class="line"><span class="string">2021-01-24  5  8  7  6  4  999  2.0</span></span><br><span class="line"><span class="string">2021-01-25  7  8  5  2  1  1.0  2.0</span></span><br><span class="line"><span class="string">2021-01-26  6  1  7  4  7  999  999</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否NaN，返回True 或 False</span></span><br><span class="line"><span class="built_in">print</span>(df.isna() )</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                a      b      c      d      e      f      g</span></span><br><span class="line"><span class="string">2021-01-20  False  False  False  False  False   True   True</span></span><br><span class="line"><span class="string">2021-01-21  False  False  False  False  False  False   True</span></span><br><span class="line"><span class="string">2021-01-22  False  False  False  False  False  False   True</span></span><br><span class="line"><span class="string">2021-01-23  False  False  False  False  False  False   True</span></span><br><span class="line"><span class="string">2021-01-24  False  False  False  False  False   True  False</span></span><br><span class="line"><span class="string">2021-01-25  False  False  False  False  False  False  False</span></span><br><span class="line"><span class="string">2021-01-26  False  False  False  False  False   True   True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># apply() 函数应用</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e    f    g</span></span><br><span class="line"><span class="string">2021-01-20  7  5  2  3  4  NaN  NaN</span></span><br><span class="line"><span class="string">2021-01-21  4  4  4  4  4  1.0  NaN</span></span><br><span class="line"><span class="string">2021-01-22  1  2  3  9  0  1.0  NaN</span></span><br><span class="line"><span class="string">2021-01-23  4  0  6  1  3  1.0  NaN</span></span><br><span class="line"><span class="string">2021-01-24  5  8  7  6  4  NaN  2.0</span></span><br><span class="line"><span class="string">2021-01-25  7  8  5  2  1  1.0  2.0</span></span><br><span class="line"><span class="string">2021-01-26  6  1  7  4  7  NaN  NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.apply(np.<span class="built_in">sum</span>, axis=<span class="number">0</span>)) <span class="comment"># 按列累加</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    34.0</span></span><br><span class="line"><span class="string">b    28.0</span></span><br><span class="line"><span class="string">c    34.0</span></span><br><span class="line"><span class="string">d    29.0</span></span><br><span class="line"><span class="string">e    23.0</span></span><br><span class="line"><span class="string">f     4.0</span></span><br><span class="line"><span class="string">g     4.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.apply(np.<span class="built_in">sum</span>, axis=<span class="number">1</span>)) <span class="comment"># 按列累加</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-01-20    21.0</span></span><br><span class="line"><span class="string">2021-01-21    21.0</span></span><br><span class="line"><span class="string">2021-01-22    16.0</span></span><br><span class="line"><span class="string">2021-01-23    15.0</span></span><br><span class="line"><span class="string">2021-01-24    32.0</span></span><br><span class="line"><span class="string">2021-01-25    26.0</span></span><br><span class="line"><span class="string">2021-01-26    25.0</span></span><br><span class="line"><span class="string">Freq: D, dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># apply() 最大值 - 最小值</span></span><br><span class="line"><span class="built_in">print</span>(df.apply(<span class="keyword">lambda</span> x:x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>())) <span class="comment"># 每一列中的最大值 - 每一列中的最小值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    6.0</span></span><br><span class="line"><span class="string">b    8.0</span></span><br><span class="line"><span class="string">c    5.0</span></span><br><span class="line"><span class="string">d    8.0</span></span><br><span class="line"><span class="string">e    7.0</span></span><br><span class="line"><span class="string">f    0.0</span></span><br><span class="line"><span class="string">g    0.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ############################################################## 5 合并 Merge</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 concat()</span></span><br><span class="line">df3 = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">20</span>, size=(<span class="number">5</span>, <span class="number">4</span>)))</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0   1   2   3</span></span><br><span class="line"><span class="string">0  14  19  19  17</span></span><br><span class="line"><span class="string">1   5  12   1  17</span></span><br><span class="line"><span class="string">2   4   8  13  14</span></span><br><span class="line"><span class="string">3   6  14  14   1</span></span><br><span class="line"><span class="string">4   8  19   4   7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 数据切片</span></span><br><span class="line">test1 = df3[:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(test1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0   1   2   3</span></span><br><span class="line"><span class="string">0  14  19  19  17</span></span><br><span class="line"><span class="string">1   5  12   1  17</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">test2 = df3[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(test2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0   1   2   3</span></span><br><span class="line"><span class="string">2  4   8  13  14</span></span><br><span class="line"><span class="string">3  6  14  14   1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">test3 = df3[<span class="number">4</span>:]</span><br><span class="line"><span class="built_in">print</span>(test3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0   1  2  3</span></span><br><span class="line"><span class="string">4  8  19  4  7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line">all_test = [test1, test2, test3]</span><br><span class="line"><span class="built_in">print</span>(all_test)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[    0   1   2   3</span></span><br><span class="line"><span class="string">0  14  19  19  17</span></span><br><span class="line"><span class="string">1   5  12   1  17,    0   1   2   3</span></span><br><span class="line"><span class="string">2  4   8  13  14</span></span><br><span class="line"><span class="string">3  6  14  14   1,    0   1  2  3</span></span><br><span class="line"><span class="string">4  8  19  4  7]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(pd.concat(all_test)) <span class="comment"># 与原始数据一致</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0   1   2   3</span></span><br><span class="line"><span class="string">0  14  19  19  17</span></span><br><span class="line"><span class="string">1   5  12   1  17</span></span><br><span class="line"><span class="string">2   4   8  13  14</span></span><br><span class="line"><span class="string">3   6  14  14   1</span></span><br><span class="line"><span class="string">4   8  19   4   7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 2 merge()</span></span><br><span class="line">t1 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;tommy&quot;</span>:[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>],</span><br><span class="line">    <span class="string">&quot;hobby&quot;</span>:[<span class="string">&quot;jogging&quot;</span>, <span class="string">&quot;reading&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  tommy    hobby</span></span><br><span class="line"><span class="string">0     a  jogging</span></span><br><span class="line"><span class="string">1     b  reading</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">t2 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;tommy&quot;</span>:[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>],</span><br><span class="line">    <span class="string">&quot;info&quot;</span>:[<span class="string">&quot;shenzhen&quot;</span>,<span class="string">&quot;AI&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  tommy      info</span></span><br><span class="line"><span class="string">0     a  shenzhen</span></span><br><span class="line"><span class="string">1     b        AI</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并，指定键，进行合并</span></span><br><span class="line">mer = pd.merge(t1, t2, on=<span class="string">&quot;tommy&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(mer)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  tommy    hobby      info</span></span><br><span class="line"><span class="string">0     a  jogging  shenzhen</span></span><br><span class="line"><span class="string">1     b  reading        AI</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ##################################################################### 6 分组 Grouping</span></span><br><span class="line">df4 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;A&quot;</span> : [<span class="string">&quot;happy&quot;</span>, <span class="string">&quot;new&quot;</span>, <span class="string">&quot;year&quot;</span>, <span class="string">&quot;2021&quot;</span>,<span class="string">&quot;happy&quot;</span>, <span class="string">&quot;new&quot;</span>, <span class="string">&quot;year&quot;</span>, <span class="string">&quot;2021&quot;</span>],</span><br><span class="line">    <span class="string">&quot;B&quot;</span> : np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=<span class="number">8</span>),</span><br><span class="line">    <span class="string">&quot;C&quot;</span> : [<span class="string">&quot;新&quot;</span>, <span class="string">&quot;年&quot;</span>, <span class="string">&quot;快&quot;</span>, <span class="string">&quot;乐&quot;</span>, <span class="string">&quot;新&quot;</span>, <span class="string">&quot;年&quot;</span>, <span class="string">&quot;快&quot;</span>, <span class="string">&quot;乐&quot;</span>],</span><br><span class="line">    <span class="string">&quot;D&quot;</span> : np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=<span class="number">8</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(df4)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">       A  B  C  D</span></span><br><span class="line"><span class="string">0  happy  9  新  8</span></span><br><span class="line"><span class="string">1    new  4  年  5</span></span><br><span class="line"><span class="string">2   year  4  快  6</span></span><br><span class="line"><span class="string">3   2021  6  乐  1</span></span><br><span class="line"><span class="string">4  happy  2  新  1</span></span><br><span class="line"><span class="string">5    new  1  年  8</span></span><br><span class="line"><span class="string">6   year  2  快  6</span></span><br><span class="line"><span class="string">7   2021  5  乐  2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 对 C列 分组后求和 sum()(只对数值列求和，返回的也只有数值列）</span></span><br><span class="line"><span class="built_in">print</span>(df4.groupby(by=<span class="string">&quot;C&quot;</span>).<span class="built_in">sum</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    B   D</span></span><br><span class="line"><span class="string">C        </span></span><br><span class="line"><span class="string">乐  11   3</span></span><br><span class="line"><span class="string">年   5  13</span></span><br><span class="line"><span class="string">快   6  12</span></span><br><span class="line"><span class="string">新  11   9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 对 A列，C列 进行分组求和</span></span><br><span class="line"><span class="built_in">print</span>(df4.groupby(by=[<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>]).<span class="built_in">sum</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A     C        </span></span><br><span class="line"><span class="string">2021  乐  11   3</span></span><br><span class="line"><span class="string">happy 新  11   9</span></span><br><span class="line"><span class="string">new   年   5  13</span></span><br><span class="line"><span class="string">year  快   6  12</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ## ############################################################# 7 类型/分类数据 Categoricals</span></span><br><span class="line">df5 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : [<span class="number">18</span>, <span class="number">15</span>, <span class="number">27</span>, <span class="number">22</span>, <span class="number">20</span>, <span class="number">35</span>, <span class="number">29</span>, <span class="number">15</span>],</span><br><span class="line">    <span class="string">&quot;sex&quot;</span> : [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex</span></span><br><span class="line"><span class="string">0   18   m</span></span><br><span class="line"><span class="string">1   15   f</span></span><br><span class="line"><span class="string">2   27   m</span></span><br><span class="line"><span class="string">3   22   m</span></span><br><span class="line"><span class="string">4   20   f</span></span><br><span class="line"><span class="string">5   35   m</span></span><br><span class="line"><span class="string">6   29   f</span></span><br><span class="line"><span class="string">7   15   m</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df5.dtypes) <span class="comment"># 每列的数据类型</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">age     int64</span></span><br><span class="line"><span class="string">sex    object</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 将 sex 列转换为 category 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增加一列</span></span><br><span class="line">df5[<span class="string">&#x27;new_sex&#x27;</span>] = df5[<span class="string">&#x27;sex&#x27;</span>].astype(<span class="string">&#x27;category&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex new_sex</span></span><br><span class="line"><span class="string">0   18   m       m</span></span><br><span class="line"><span class="string">1   15   f       f</span></span><br><span class="line"><span class="string">2   27   m       m</span></span><br><span class="line"><span class="string">3   22   m       m</span></span><br><span class="line"><span class="string">4   20   f       f</span></span><br><span class="line"><span class="string">5   35   m       m</span></span><br><span class="line"><span class="string">6   29   f       f</span></span><br><span class="line"><span class="string">7   15   m       m</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df5.dtypes) <span class="comment"># 查看类型</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">age           int64</span></span><br><span class="line"><span class="string">sex          object</span></span><br><span class="line"><span class="string">new_sex    category</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 修改 分类类型数据值 , 将 &#x27;m&#x27;, &#x27;f&#x27;, 替换为 &#x27;aa&#x27;, &#x27;bb&#x27;</span></span><br><span class="line"></span><br><span class="line">df5[<span class="string">&#x27;new_sex&#x27;</span>].cat.categories = [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex new_sex</span></span><br><span class="line"><span class="string">0   18   m      bb</span></span><br><span class="line"><span class="string">1   15   f      aa</span></span><br><span class="line"><span class="string">2   27   m      bb</span></span><br><span class="line"><span class="string">3   22   m      bb</span></span><br><span class="line"><span class="string">4   20   f      aa</span></span><br><span class="line"><span class="string">5   35   m      bb</span></span><br><span class="line"><span class="string">6   29   f      aa</span></span><br><span class="line"><span class="string">7   15   m      bb</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据 new_sex 排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df5.sort_values(by=<span class="string">&#x27;new_sex&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex new_sex</span></span><br><span class="line"><span class="string">1   15   f      aa</span></span><br><span class="line"><span class="string">4   20   f      aa</span></span><br><span class="line"><span class="string">6   29   f      aa</span></span><br><span class="line"><span class="string">0   18   m      bb</span></span><br><span class="line"><span class="string">2   27   m      bb</span></span><br><span class="line"><span class="string">3   22   m      bb</span></span><br><span class="line"><span class="string">5   35   m      bb</span></span><br><span class="line"><span class="string">7   15   m      bb</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据 new_sex 分组</span></span><br><span class="line"><span class="built_in">print</span>(df5.groupby(<span class="string">&#x27;new_sex&#x27;</span>).<span class="built_in">sum</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">         age</span></span><br><span class="line"><span class="string">new_sex     </span></span><br><span class="line"><span class="string">aa        64</span></span><br><span class="line"><span class="string">bb       117</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df5.groupby(<span class="string">&#x27;new_sex&#x27;</span>).size())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">new_sex</span></span><br><span class="line"><span class="string">aa    3</span></span><br><span class="line"><span class="string">bb    5</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas-数据清洗</title>
    <link href="http://example.com/2022/06/01/pandas-%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    <id>http://example.com/2022/06/01/pandas-%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/</id>
    <published>2022-06-01T08:50:56.000Z</published>
    <updated>2022-06-01T08:57:20.875Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据清理：数据缺失、数据格式错误、错误数据或重复数据的处理。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID  ST_NUM     ST_NAME OWN_OCCUPIED NUM_BEDROOMS NUM_BATH SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0   104.0      PUTNAM            Y            3        1  1000</span></span><br><span class="line"><span class="string">1  100002000.0   197.0   LEXINGTON            N            3      1.5    --</span></span><br><span class="line"><span class="string">2  100003000.0     NaN   LEXINGTON            N          NaN        1   850</span></span><br><span class="line"><span class="string">3  100004000.0   201.0    BERKELEY           12            1      NaN   700</span></span><br><span class="line"><span class="string">4          NaN   203.0    BERKELEY            Y            3        2  1600</span></span><br><span class="line"><span class="string">5  100006000.0   207.0    BERKELEY            Y          NaN        1   800</span></span><br><span class="line"><span class="string">6  100007000.0     NaN  WASHINGTON          NaN            2   HURLEY   950</span></span><br><span class="line"><span class="string">7  100008000.0   213.0     TREMONT            Y            1        1   NaN</span></span><br><span class="line"><span class="string">8  100009000.0   215.0     TREMONT            Y           na        2  1800</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#分析：上表包含来四种空数据：n/a，NA，—，na</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####处理：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################ 1 首先：通过 isnull() 判断         某一列        的各个单元格是否为空。</span></span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0      3</span></span><br><span class="line"><span class="string">1      3</span></span><br><span class="line"><span class="string">2    NaN</span></span><br><span class="line"><span class="string">3      1</span></span><br><span class="line"><span class="string">4      3</span></span><br><span class="line"><span class="string">5    NaN</span></span><br><span class="line"><span class="string">6      2</span></span><br><span class="line"><span class="string">7      1</span></span><br><span class="line"><span class="string">8     na</span></span><br><span class="line"><span class="string">Name: NUM_BEDROOMS, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>].isnull())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    False</span></span><br><span class="line"><span class="string">1    False</span></span><br><span class="line"><span class="string">2     True</span></span><br><span class="line"><span class="string">3    False</span></span><br><span class="line"><span class="string">4    False</span></span><br><span class="line"><span class="string">5     True</span></span><br><span class="line"><span class="string">6    False</span></span><br><span class="line"><span class="string">7    False</span></span><br><span class="line"><span class="string">8    False</span></span><br><span class="line"><span class="string">Name: NUM_BEDROOMS, dtype: bool</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上例子中我们看到 Pandas 把 n/a 和 NA 当作空数据，na 不是空数据，不符合我们要求，我们可以在读取文件时 指定空数据类型：</span></span><br><span class="line">missing_values = [<span class="string">&quot;n/a&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;--&quot;</span>,<span class="string">&#x27;NaN&#x27;</span>]</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>, na_values = missing_values)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    3.0</span></span><br><span class="line"><span class="string">1    3.0</span></span><br><span class="line"><span class="string">2    NaN</span></span><br><span class="line"><span class="string">3    1.0</span></span><br><span class="line"><span class="string">4    3.0</span></span><br><span class="line"><span class="string">5    NaN</span></span><br><span class="line"><span class="string">6    2.0</span></span><br><span class="line"><span class="string">7    1.0</span></span><br><span class="line"><span class="string">8    NaN</span></span><br><span class="line"><span class="string">Name: NUM_BEDROOMS, dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>].isnull())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    False</span></span><br><span class="line"><span class="string">1    False</span></span><br><span class="line"><span class="string">2     True</span></span><br><span class="line"><span class="string">3    False</span></span><br><span class="line"><span class="string">4    False</span></span><br><span class="line"><span class="string">5     True</span></span><br><span class="line"><span class="string">6    False</span></span><br><span class="line"><span class="string">7    False</span></span><br><span class="line"><span class="string">8     True</span></span><br><span class="line"><span class="string">Name: NUM_BEDROOMS, dtype: bool</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################2 删除包含空字段的行：可以使用 dropna() 方法，语法格式如下</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DataFrame.dropna(axis=0, how=&#x27;any&#x27;, thresh=None, subset=None, inplace=False)</span></span><br><span class="line"><span class="string">参数说明：</span></span><br><span class="line"><span class="string">    axis：默认为 0，表示逢空值剔除整行，如果设置参数 axis＝1 表示逢空值去掉整列。</span></span><br><span class="line"><span class="string">    how：默认为 &#x27;any&#x27; 如果一行（或一列）里任何一个数据有出现 NA 就去掉整行，如果设置 how=&#x27;all&#x27; 一行（或列）都是 NA 才去掉这整行。</span></span><br><span class="line"><span class="string">    thresh：设置需要多少非空值的数据才可以保留下来的。 #############所以说设置该参数时就不用设置how参数了。或者说如果how参数有默认值的话，thresh优先级要大于。</span></span><br><span class="line"><span class="string">    subset：设置想要检查的列。如果是多个列，可以使用列名的 list 作为参数。           ###########指定列，默认为全部列</span></span><br><span class="line"><span class="string">    inplace：如果设置 True，将计算得到的值直接覆盖之前的值并返回 None，修改的是源数据。                                      </span></span><br><span class="line"><span class="string">返回值：返回的是去掉na之后的DataFrame数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">跳转如下函数定义时，会有每个参数的说明，以及例子哦！！！</span></span><br><span class="line"><span class="string">pd.DataFrame().dropna()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">new_df = df.dropna()</span><br><span class="line"><span class="built_in">print</span>(new_df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID  ST_NUM ST_NAME OWN_OCCUPIED  NUM_BEDROOMS NUM_BATH   SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0   104.0  PUTNAM            Y           3.0        1  1000.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dropna(inplace = <span class="literal">True</span>)) <span class="comment">#######返回的是None</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID  ST_NUM ST_NAME OWN_OCCUPIED  NUM_BEDROOMS NUM_BATH   SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0   104.0  PUTNAM            Y           3.0        1  1000.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 移除 ST_NUM 列中字段值为空的行：</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>)</span><br><span class="line">df.dropna(subset=[<span class="string">&#x27;ST_NUM&#x27;</span>], inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID  ST_NUM    ST_NAME OWN_OCCUPIED NUM_BEDROOMS NUM_BATH SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0   104.0     PUTNAM            Y            3        1  1000</span></span><br><span class="line"><span class="string">1  100002000.0   197.0  LEXINGTON            N            3      1.5    --</span></span><br><span class="line"><span class="string">3  100004000.0   201.0   BERKELEY           12            1      NaN   700</span></span><br><span class="line"><span class="string">4          NaN   203.0   BERKELEY            Y            3        2  1600</span></span><br><span class="line"><span class="string">5  100006000.0   207.0   BERKELEY            Y          NaN        1   800</span></span><br><span class="line"><span class="string">7  100008000.0   213.0    TREMONT            Y            1        1   NaN</span></span><br><span class="line"><span class="string">8  100009000.0   215.0    TREMONT            Y           na        2  1800</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#第六行不见了哈！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################3 fillna() 方法来替换一些空字段。</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>,na_values=missing_values)</span><br><span class="line"></span><br><span class="line"><span class="comment">#（1） 整个表控制用一个值来代替。</span></span><br><span class="line"><span class="comment"># new_df = df.fillna(&#x27;12345&#x27;)</span></span><br><span class="line">new_df = df.fillna(<span class="number">12345</span>)</span><br><span class="line"><span class="built_in">print</span>(new_df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID   ST_NUM     ST_NAME OWN_OCCUPIED  NUM_BEDROOMS NUM_BATH    SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0    104.0      PUTNAM            Y           3.0        1   1000.0</span></span><br><span class="line"><span class="string">1  100002000.0    197.0   LEXINGTON            N           3.0      1.5  12345.0</span></span><br><span class="line"><span class="string">2  100003000.0  12345.0   LEXINGTON            N       12345.0        1    850.0</span></span><br><span class="line"><span class="string">3  100004000.0    201.0    BERKELEY           12           1.0    12345    700.0</span></span><br><span class="line"><span class="string">4      12345.0    203.0    BERKELEY            Y           3.0        2   1600.0</span></span><br><span class="line"><span class="string">5  100006000.0    207.0    BERKELEY            Y       12345.0        1    800.0</span></span><br><span class="line"><span class="string">6  100007000.0  12345.0  WASHINGTON        12345           2.0   HURLEY    950.0</span></span><br><span class="line"><span class="string">7  100008000.0    213.0     TREMONT            Y           1.0        1  12345.0</span></span><br><span class="line"><span class="string">8  100009000.0    215.0     TREMONT            Y       12345.0        2   1800.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#（2） 指定列的空值代替</span></span><br><span class="line">df[<span class="string">&#x27;PID&#x27;</span>].fillna(<span class="number">123456789</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID  ST_NUM     ST_NAME OWN_OCCUPIED  NUM_BEDROOMS NUM_BATH   SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0   104.0      PUTNAM            Y           3.0        1  1000.0</span></span><br><span class="line"><span class="string">1  100002000.0   197.0   LEXINGTON            N           3.0      1.5     NaN</span></span><br><span class="line"><span class="string">2  100003000.0     NaN   LEXINGTON            N           NaN        1   850.0</span></span><br><span class="line"><span class="string">3  100004000.0   201.0    BERKELEY           12           1.0      NaN   700.0</span></span><br><span class="line"><span class="string">4  123456789.0   203.0    BERKELEY            Y           3.0        2  1600.0</span></span><br><span class="line"><span class="string">5  100006000.0   207.0    BERKELEY            Y           NaN        1   800.0</span></span><br><span class="line"><span class="string">6  100007000.0     NaN  WASHINGTON          NaN           2.0   HURLEY   950.0</span></span><br><span class="line"><span class="string">7  100008000.0   213.0     TREMONT            Y           1.0        1     NaN</span></span><br><span class="line"><span class="string">8  100009000.0   215.0     TREMONT            Y           NaN        2  1800.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(3) 一般使用均值，中位数，众数来填充数值。</span></span><br><span class="line">    <span class="comment">##Pandas使用 mean()、median() 和 mode() 方法计算列的均值（所有值加起来的平均值）、中位数值（排序后排在中间的数）和众数（出现频率最高的数）。</span></span><br><span class="line">x = df[<span class="string">&quot;ST_NUM&quot;</span>].mean()</span><br><span class="line">df[<span class="string">&quot;ST_NUM&quot;</span>].fillna(x, inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID      ST_NUM     ST_NAME OWN_OCCUPIED  NUM_BEDROOMS NUM_BATH   SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0  104.000000      PUTNAM            Y           3.0        1  1000.0</span></span><br><span class="line"><span class="string">1  100002000.0  197.000000   LEXINGTON            N           3.0      1.5     NaN</span></span><br><span class="line"><span class="string">2  100003000.0  191.428571   LEXINGTON            N           NaN        1   850.0</span></span><br><span class="line"><span class="string">3  100004000.0  201.000000    BERKELEY           12           1.0      NaN   700.0</span></span><br><span class="line"><span class="string">4  123456789.0  203.000000    BERKELEY            Y           3.0        2  1600.0</span></span><br><span class="line"><span class="string">5  100006000.0  207.000000    BERKELEY            Y           NaN        1   800.0</span></span><br><span class="line"><span class="string">6  100007000.0  191.428571  WASHINGTON          NaN           2.0   HURLEY   950.0</span></span><br><span class="line"><span class="string">7  100008000.0  213.000000     TREMONT            Y           1.0        1     NaN</span></span><br><span class="line"><span class="string">8  100009000.0  215.000000     TREMONT            Y           NaN        2  1800.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 4 Pandas 清洗格式错误数据</span></span><br><span class="line"><span class="comment"># 第三个日期格式错误</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;Date&quot;</span>: [<span class="string">&#x27;2020/12/01&#x27;</span>, <span class="string">&#x27;2020/12/02&#x27;</span> , <span class="string">&#x27;20201226&#x27;</span>],</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data, index = [<span class="string">&quot;day1&quot;</span>, <span class="string">&quot;day2&quot;</span>, <span class="string">&quot;day3&quot;</span>])</span><br><span class="line">df[<span class="string">&#x27;Date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;Date&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           Date  duration</span></span><br><span class="line"><span class="string">day1 2020-12-01        50</span></span><br><span class="line"><span class="string">day2 2020-12-02        40</span></span><br><span class="line"><span class="string">day3 2020-12-26        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 5 Pandas 清洗错误数据</span></span><br><span class="line"><span class="comment"># 数据错误也是很常见的情况，我们可以对错误的数据进行替换或移除。</span></span><br><span class="line"><span class="comment"># （1）以下实例会替换错误年龄的数据：</span></span><br><span class="line">person = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span> , <span class="string">&#x27;Taobao&#x27;</span>],</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: [-<span class="number">50</span>, <span class="number">40</span>, <span class="number">12345</span>]    <span class="comment"># 12345 年龄数据是错误的</span></span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(person)</span><br><span class="line">df.loc[<span class="number">2</span>, <span class="string">&#x27;age&#x27;</span>] = <span class="number">30</span> <span class="comment"># ##################直接通过行列号来定位单元格，然后修改数据</span></span><br><span class="line">df.loc[<span class="number">0</span>,<span class="string">&#x27;age&#x27;</span>] = <span class="number">50</span></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     name  age</span></span><br><span class="line"><span class="string">0  Google   50</span></span><br><span class="line"><span class="string">1  Runoob   40</span></span><br><span class="line"><span class="string">2  Taobao   30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">df = pd.DataFrame(person)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> df.index:           <span class="comment">###########熟悉py语法，又熟悉了pandas库，要灵活运用一些小算法，灵活处理数据啦！！！</span></span><br><span class="line">    <span class="keyword">if</span> df.loc[x,<span class="string">&#x27;age&#x27;</span>]&gt;<span class="number">120</span>:</span><br><span class="line">        df.loc[x,<span class="string">&#x27;age&#x27;</span>]=<span class="number">120</span></span><br><span class="line">    <span class="keyword">if</span> df.loc[x,<span class="string">&#x27;age&#x27;</span>]&lt;<span class="number">0</span>:</span><br><span class="line">        df.loc[x,<span class="string">&#x27;age&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     name  age</span></span><br><span class="line"><span class="string">0  Google    1</span></span><br><span class="line"><span class="string">1  Runoob   40</span></span><br><span class="line"><span class="string">2  Taobao  120</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">## （2） 将有错误数据的一整行删除：</span></span><br><span class="line">df = pd.DataFrame(person)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> df.index:</span><br><span class="line">    <span class="keyword">if</span> (df.loc[x,<span class="string">&#x27;age&#x27;</span>]&gt;<span class="number">120</span>) <span class="keyword">or</span> (df.loc[x,<span class="string">&#x27;age&#x27;</span>]&lt;=<span class="number">0</span>):</span><br><span class="line">        df.drop(x,inplace=<span class="literal">True</span>) <span class="comment">#############################删除某一指定行的函数：df.drop()</span></span><br><span class="line"><span class="built_in">print</span>(df) <span class="comment">#只剩一行了。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     name  age</span></span><br><span class="line"><span class="string">1  Runoob   40</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 6 清洗重复数据。</span></span><br><span class="line">persons = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>],</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">23</span>],</span><br><span class="line">  <span class="string">&quot;hhh&quot;</span>:[<span class="number">30</span>,<span class="number">25</span>,<span class="number">25</span>,<span class="number">20</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(persons)</span><br><span class="line"><span class="comment">#（1） 查看重复元素               重复表示的是：一整行的数据都是重复的。</span></span><br><span class="line"><span class="built_in">print</span>(df.duplicated())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    False</span></span><br><span class="line"><span class="string">1    False</span></span><br><span class="line"><span class="string">2     True</span></span><br><span class="line"><span class="string">3    False</span></span><br><span class="line"><span class="string">dtype: bool</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.drop_duplicates())</span><br><span class="line"><span class="comment">#或：</span></span><br><span class="line">df.drop_duplicates(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0  Google   50   30</span></span><br><span class="line"><span class="string">1  Runoob   40   25</span></span><br><span class="line"><span class="string">3  Runoob   23   20</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">###上面dropna,drop,drop_duplicates 删除了行后，索引还是原来的，比如说删除了索引为2的行，则剩下的索引为：[0,1,3,4...]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#各个API在跳转到函数定义里面的各个参数都写得明明白白的，有的API还有例子，比如pd.drop()  很详细！！！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                       columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   A  B   C   D</span></span><br><span class="line"><span class="string">0  0  1   2   3</span></span><br><span class="line"><span class="string">1  4  5   6   7</span></span><br><span class="line"><span class="string">2  8  9  10  11</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.drop([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>],axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    C   D</span></span><br><span class="line"><span class="string">0   2   3</span></span><br><span class="line"><span class="string">1   6   7</span></span><br><span class="line"><span class="string">2  10  11</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.drop(columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]))<span class="comment">###跟上面的一样效果。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    C   D</span></span><br><span class="line"><span class="string">0   2   3</span></span><br><span class="line"><span class="string">1   6   7</span></span><br><span class="line"><span class="string">2  10  11</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">df.drop(index=[<span class="number">0</span>,<span class="number">2</span>],inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   A  B  C  D</span></span><br><span class="line"><span class="string">1  4  5  6  7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################排序：</span></span><br><span class="line"><span class="comment"># 1 按照索引。axis =0/1表示行或者列，ascending表示升序。</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;a&quot;</span>: [<span class="number">420</span>, <span class="number">380</span>, <span class="number">390</span>],</span><br><span class="line">  <span class="string">&quot;b&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data, index = [<span class="string">&quot;day1&quot;</span>, <span class="string">&quot;day2&quot;</span>, <span class="string">&quot;day3&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.sort_index(axis=<span class="number">0</span>,ascending=<span class="literal">False</span>,inplace=<span class="literal">False</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        a   b</span></span><br><span class="line"><span class="string">day3  390  45</span></span><br><span class="line"><span class="string">day2  380  40</span></span><br><span class="line"><span class="string">day1  420  50</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_index(axis=<span class="number">0</span>,ascending=<span class="literal">True</span>,inplace=<span class="literal">False</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        a   b</span></span><br><span class="line"><span class="string">day1  420  50</span></span><br><span class="line"><span class="string">day2  380  40</span></span><br><span class="line"><span class="string">day3  390  45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_index(axis=<span class="number">1</span>,ascending=<span class="literal">False</span>,inplace=<span class="literal">False</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">       b    a</span></span><br><span class="line"><span class="string">day1  50  420</span></span><br><span class="line"><span class="string">day2  40  380</span></span><br><span class="line"><span class="string">day3  45  390</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_index(axis=<span class="number">1</span>,ascending=<span class="literal">True</span>,inplace=<span class="literal">False</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        a   b</span></span><br><span class="line"><span class="string">day1  420  50</span></span><br><span class="line"><span class="string">day2  380  40</span></span><br><span class="line"><span class="string">day3  390  45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#2 按照某列的值排序！</span></span><br><span class="line"><span class="comment">#默认值： axis: int = 0,ascending: bool = True,inplace: bool = False</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(by=<span class="string">&#x27;a&#x27;</span>,ascending=<span class="literal">True</span>,inplace=<span class="literal">False</span>)) <span class="comment">#根据列a里面的值，升序进行排序！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########增加列</span></span><br><span class="line">df = df.reindex(columns = <span class="built_in">list</span>(df.columns)+[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        a   b   c   d   e</span></span><br><span class="line"><span class="string">day1  420  50 NaN NaN NaN</span></span><br><span class="line"><span class="string">day2  380  40 NaN NaN NaN</span></span><br><span class="line"><span class="string">day3  390  45 NaN NaN NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># df = df.reindex(indexs = list(df.index)+[&#x27;day4&#x27;,&#x27;day5&#x27;])   ###想要增加行，报错。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#赋值方法1：指定索引赋值</span></span><br><span class="line">df.loc[:,<span class="string">&#x27;c&#x27;</span>] = <span class="number">300</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        a   b    c   d   e</span></span><br><span class="line"><span class="string">day1  420  50  300 NaN NaN</span></span><br><span class="line"><span class="string">day2  380  40  300 NaN NaN</span></span><br><span class="line"><span class="string">day3  390  45  300 NaN NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#赋值方法2：填充函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;d&#x27;</span>].fillna(value=<span class="number">666</span>,inplace=<span class="literal">False</span>,))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">day1    666.0</span></span><br><span class="line"><span class="string">day2    666.0</span></span><br><span class="line"><span class="string">day3    666.0</span></span><br><span class="line"><span class="string">Name: d, dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.fillna(value=<span class="number">777</span>,inplace=<span class="literal">False</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        a   b    c      d      e</span></span><br><span class="line"><span class="string">day1  420  50  300  666.0  777.0</span></span><br><span class="line"><span class="string">day2  380  40  300  666.0  777.0</span></span><br><span class="line"><span class="string">day3  390  45  300  666.0  777.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.isnull())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          a      b      c     d     e</span></span><br><span class="line"><span class="string">day1  False  False  False  True  True</span></span><br><span class="line"><span class="string">day2  False  False  False  True  True</span></span><br><span class="line"><span class="string">day3  False  False  False  True  True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.isnull().<span class="built_in">sum</span>())  <span class="comment">#######统计每一列中空元素的数量。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    0</span></span><br><span class="line"><span class="string">b    0</span></span><br><span class="line"><span class="string">c    0</span></span><br><span class="line"><span class="string">d    3</span></span><br><span class="line"><span class="string">e    3</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按行相加</span></span><br><span class="line"><span class="built_in">print</span>(df.apply(np.<span class="built_in">sum</span>,axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">day1    770.0</span></span><br><span class="line"><span class="string">day2    720.0</span></span><br><span class="line"><span class="string">day3    735.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#按列相加</span></span><br><span class="line"><span class="built_in">print</span>(df.apply(np.<span class="built_in">sum</span>,axis=<span class="number">0</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    1190.0</span></span><br><span class="line"><span class="string">b     135.0</span></span><br><span class="line"><span class="string">c     900.0</span></span><br><span class="line"><span class="string">d       0.0</span></span><br><span class="line"><span class="string">e       0.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.apply(<span class="keyword">lambda</span> x:x.<span class="built_in">max</span>()-x.<span class="built_in">min</span>()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    40.0</span></span><br><span class="line"><span class="string">b    10.0</span></span><br><span class="line"><span class="string">c     0.0</span></span><br><span class="line"><span class="string">d     NaN</span></span><br><span class="line"><span class="string">e     NaN</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>,<span class="number">20</span>,size=(<span class="number">5</span>,<span class="number">4</span>)))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0   1   2   3</span></span><br><span class="line"><span class="string">0   9   2  15   3</span></span><br><span class="line"><span class="string">1   9  19  10   2</span></span><br><span class="line"><span class="string">2   7  18   5  18</span></span><br><span class="line"><span class="string">3  13   3   1  10</span></span><br><span class="line"><span class="string">4  15  10  13   3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#数据切片：</span></span><br><span class="line">df1 = df[:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0  12   4  7  6</span></span><br><span class="line"><span class="string">1  13  13  3  2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">df2 = df[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0   1   2  3</span></span><br><span class="line"><span class="string">2  11  15  15  7</span></span><br><span class="line"><span class="string">3  10   4   3  5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">df3 = df[<span class="number">4</span>:]</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0  1   2  3</span></span><br><span class="line"><span class="string">4  8  4  10  6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">new_df = [df1,df2,df3]</span><br><span class="line">df = pd.concat(new_df)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0   1   2   3</span></span><br><span class="line"><span class="string">0  10  18  12  14</span></span><br><span class="line"><span class="string">1  16   2  14  15</span></span><br><span class="line"><span class="string">2  15   4   3  16</span></span><br><span class="line"><span class="string">3  12   4  19   8</span></span><br><span class="line"><span class="string">4   4   2   6  10</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">t1 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;tommy&quot;</span>:[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>],</span><br><span class="line">    <span class="string">&quot;hobby&quot;</span>:[<span class="string">&quot;jogging&quot;</span>, <span class="string">&quot;reading&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">t2 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;tommy&quot;</span>:[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>],</span><br><span class="line">    <span class="string">&quot;info&quot;</span>:[<span class="string">&quot;shenzhen&quot;</span>,<span class="string">&quot;AI&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  tommy    hobby</span></span><br><span class="line"><span class="string">0     a  jogging</span></span><br><span class="line"><span class="string">1     b  reading</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  tommy      info</span></span><br><span class="line"><span class="string">0     a  shenzhen</span></span><br><span class="line"><span class="string">1     b        AI</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">new_df = pd.merge(t1,t2,on=<span class="string">&#x27;tommy&#x27;</span>)  <span class="comment">##############合并列，把Tommy这一列合并了（因为其相同），然后其他不同列加进来。concat上面是合并行。</span></span><br><span class="line"><span class="built_in">print</span>(new_df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  tommy    hobby      info</span></span><br><span class="line"><span class="string">0     a  jogging  shenzhen</span></span><br><span class="line"><span class="string">1     b  reading        AI</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############分组，Grouping</span></span><br><span class="line">df4 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;A&quot;</span> : [<span class="string">&quot;happy&quot;</span>, <span class="string">&quot;new&quot;</span>, <span class="string">&quot;year&quot;</span>, <span class="string">&quot;2021&quot;</span>,<span class="string">&quot;happy&quot;</span>, <span class="string">&quot;new&quot;</span>, <span class="string">&quot;year&quot;</span>, <span class="string">&quot;2021&quot;</span>],</span><br><span class="line">    <span class="string">&quot;B&quot;</span> : np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=<span class="number">8</span>),</span><br><span class="line">    <span class="string">&quot;C&quot;</span> : [<span class="string">&quot;新&quot;</span>, <span class="string">&quot;年&quot;</span>, <span class="string">&quot;快&quot;</span>, <span class="string">&quot;乐&quot;</span>, <span class="string">&quot;新&quot;</span>, <span class="string">&quot;年&quot;</span>, <span class="string">&quot;快&quot;</span>, <span class="string">&quot;乐&quot;</span>],</span><br><span class="line">    <span class="string">&quot;D&quot;</span> : np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=<span class="number">8</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(df4)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">       A  B  C  D</span></span><br><span class="line"><span class="string">0  happy  9  新  5</span></span><br><span class="line"><span class="string">1    new  3  年  3</span></span><br><span class="line"><span class="string">2   year  1  快  9</span></span><br><span class="line"><span class="string">3   2021  3  乐  8</span></span><br><span class="line"><span class="string">4  happy  7  新  1</span></span><br><span class="line"><span class="string">5    new  6  年  6</span></span><br><span class="line"><span class="string">6   year  2  快  2</span></span><br><span class="line"><span class="string">7   2021  1  乐  2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 对 C列 分组后求和 sum():意思是c有多少种，比如说有四种，分别是“新年快乐”四种，那其他的列跟据这四种相加起来就好啦。</span></span><br><span class="line"><span class="built_in">print</span>(df4.groupby(by=<span class="string">&quot;C&quot;</span>).<span class="built_in">sum</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    B   D</span></span><br><span class="line"><span class="string">C        </span></span><br><span class="line"><span class="string">乐   4  10</span></span><br><span class="line"><span class="string">年   9   9</span></span><br><span class="line"><span class="string">快   3  11</span></span><br><span class="line"><span class="string">新  16   6</span></span><br><span class="line"><span class="string">&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002928F15D630&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 A列，C列 进行分组求和</span></span><br><span class="line"><span class="built_in">print</span>(df4.groupby(by=[<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>]).<span class="built_in">sum</span>())  <span class="comment">######AC组合后的种类进行分组，其他列的相加起来！！！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          B   D</span></span><br><span class="line"><span class="string">A     C        </span></span><br><span class="line"><span class="string">2021  乐   4  10</span></span><br><span class="line"><span class="string">happy 新  16   6</span></span><br><span class="line"><span class="string">new   年   9   9</span></span><br><span class="line"><span class="string">year  快   3  11</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################时间序列：</span></span><br><span class="line"><span class="comment"># 案例1：</span></span><br><span class="line">time_data = pd.date_range(<span class="string">&#x27;1/1/2021&#x27;</span>, periods=<span class="number">100</span>, freq=<span class="string">&#x27;S&#x27;</span>) <span class="comment"># 按 秒</span></span><br><span class="line"><span class="built_in">print</span>(time_data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DatetimeIndex([&#x27;2021-01-01 00:00:00&#x27;, &#x27;2021-01-01 00:00:01&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:02&#x27;, &#x27;2021-01-01 00:00:03&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:04&#x27;, &#x27;2021-01-01 00:00:05&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:06&#x27;, &#x27;2021-01-01 00:00:07&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:08&#x27;, &#x27;2021-01-01 00:00:09&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:10&#x27;, &#x27;2021-01-01 00:00:11&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:12&#x27;, &#x27;2021-01-01 00:00:13&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:14&#x27;, &#x27;2021-01-01 00:00:15&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:16&#x27;, &#x27;2021-01-01 00:00:17&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:18&#x27;, &#x27;2021-01-01 00:00:19&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:20&#x27;, &#x27;2021-01-01 00:00:21&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:22&#x27;, &#x27;2021-01-01 00:00:23&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:24&#x27;, &#x27;2021-01-01 00:00:25&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:26&#x27;, &#x27;2021-01-01 00:00:27&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:28&#x27;, &#x27;2021-01-01 00:00:29&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:30&#x27;, &#x27;2021-01-01 00:00:31&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:32&#x27;, &#x27;2021-01-01 00:00:33&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:34&#x27;, &#x27;2021-01-01 00:00:35&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:36&#x27;, &#x27;2021-01-01 00:00:37&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:38&#x27;, &#x27;2021-01-01 00:00:39&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:40&#x27;, &#x27;2021-01-01 00:00:41&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:42&#x27;, &#x27;2021-01-01 00:00:43&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:44&#x27;, &#x27;2021-01-01 00:00:45&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:46&#x27;, &#x27;2021-01-01 00:00:47&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:48&#x27;, &#x27;2021-01-01 00:00:49&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:50&#x27;, &#x27;2021-01-01 00:00:51&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:52&#x27;, &#x27;2021-01-01 00:00:53&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:54&#x27;, &#x27;2021-01-01 00:00:55&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:56&#x27;, &#x27;2021-01-01 00:00:57&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:58&#x27;, &#x27;2021-01-01 00:00:59&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:00&#x27;, &#x27;2021-01-01 00:01:01&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:02&#x27;, &#x27;2021-01-01 00:01:03&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:04&#x27;, &#x27;2021-01-01 00:01:05&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:06&#x27;, &#x27;2021-01-01 00:01:07&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:08&#x27;, &#x27;2021-01-01 00:01:09&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:10&#x27;, &#x27;2021-01-01 00:01:11&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:12&#x27;, &#x27;2021-01-01 00:01:13&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:14&#x27;, &#x27;2021-01-01 00:01:15&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:16&#x27;, &#x27;2021-01-01 00:01:17&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:18&#x27;, &#x27;2021-01-01 00:01:19&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:20&#x27;, &#x27;2021-01-01 00:01:21&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:22&#x27;, &#x27;2021-01-01 00:01:23&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:24&#x27;, &#x27;2021-01-01 00:01:25&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:26&#x27;, &#x27;2021-01-01 00:01:27&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:28&#x27;, &#x27;2021-01-01 00:01:29&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:30&#x27;, &#x27;2021-01-01 00:01:31&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:32&#x27;, &#x27;2021-01-01 00:01:33&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:34&#x27;, &#x27;2021-01-01 00:01:35&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:36&#x27;, &#x27;2021-01-01 00:01:37&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:38&#x27;, &#x27;2021-01-01 00:01:39&#x27;],</span></span><br><span class="line"><span class="string">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;S&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据以上的时间数据，生成新的数据</span></span><br><span class="line"></span><br><span class="line">ts = pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">99</span>,size=<span class="built_in">len</span>(time_data)), index=time_data)</span><br><span class="line"><span class="built_in">print</span>(ts)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-01-01 00:00:00    52</span></span><br><span class="line"><span class="string">2021-01-01 00:00:01    93</span></span><br><span class="line"><span class="string">2021-01-01 00:00:02     1</span></span><br><span class="line"><span class="string">2021-01-01 00:00:03    12</span></span><br><span class="line"><span class="string">2021-01-01 00:00:04    67</span></span><br><span class="line"><span class="string">                       ..</span></span><br><span class="line"><span class="string">2021-01-01 00:01:35    73</span></span><br><span class="line"><span class="string">2021-01-01 00:01:36     6</span></span><br><span class="line"><span class="string">2021-01-01 00:01:37    67</span></span><br><span class="line"><span class="string">2021-01-01 00:01:38     9</span></span><br><span class="line"><span class="string">2021-01-01 00:01:39    19</span></span><br><span class="line"><span class="string">Freq: S, Length: 100, dtype: int32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(ts.resample(<span class="string">&quot;1Min&quot;</span>).<span class="built_in">sum</span>()) <span class="comment"># 统计每一分钟内的数据和</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-01-01 00:00:00    3181</span></span><br><span class="line"><span class="string">2021-01-01 00:01:00    2120</span></span><br><span class="line"><span class="string">Freq: T, dtype: int32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2：</span></span><br><span class="line">time_data2 = pd.date_range(<span class="string">&quot;1/1/2021&quot;</span>, periods=<span class="number">5</span>, freq=<span class="string">&#x27;M&#x27;</span>) <span class="comment"># 按 月</span></span><br><span class="line"><span class="built_in">print</span>(time_data2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DatetimeIndex([&#x27;2021-01-31&#x27;, &#x27;2021-02-28&#x27;, &#x27;2021-03-31&#x27;, &#x27;2021-04-30&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-05-31&#x27;],</span></span><br><span class="line"><span class="string">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;M&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据以上日期数据，生成新的数据</span></span><br><span class="line">ts2 = pd.Series(np.random.randint(<span class="number">1</span>,<span class="built_in">len</span>(time_data2)), index=time_data2)</span><br><span class="line"><span class="built_in">print</span>(ts2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-01-31    4</span></span><br><span class="line"><span class="string">2021-02-28    4</span></span><br><span class="line"><span class="string">2021-03-31    4</span></span><br><span class="line"><span class="string">2021-04-30    4</span></span><br><span class="line"><span class="string">2021-05-31    4</span></span><br><span class="line"><span class="string">Freq: M, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tp = ts2.to_period()  <span class="comment">######将后面的日期去掉。</span></span><br><span class="line"><span class="built_in">print</span>(tp)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-01    4</span></span><br><span class="line"><span class="string">2021-02    4</span></span><br><span class="line"><span class="string">2021-03    4</span></span><br><span class="line"><span class="string">2021-04    4</span></span><br><span class="line"><span class="string">2021-05    4</span></span><br><span class="line"><span class="string">Freq: M, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">df5 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : [<span class="number">18</span>, <span class="number">15</span>, <span class="number">27</span>, <span class="number">22</span>, <span class="number">20</span>, <span class="number">35</span>, <span class="number">29</span>, <span class="number">15</span>],</span><br><span class="line">    <span class="string">&quot;sex&quot;</span> : [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex</span></span><br><span class="line"><span class="string">0   18   m</span></span><br><span class="line"><span class="string">1   15   f</span></span><br><span class="line"><span class="string">2   27   m</span></span><br><span class="line"><span class="string">3   22   m</span></span><br><span class="line"><span class="string">4   20   f</span></span><br><span class="line"><span class="string">5   35   m</span></span><br><span class="line"><span class="string">6   29   f</span></span><br><span class="line"><span class="string">7   15   m</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 sex 列转换为 category 类型</span></span><br><span class="line"><span class="comment"># ##############################################################新增加一列</span></span><br><span class="line">df5[<span class="string">&#x27;new_sex&#x27;</span>] = df5[<span class="string">&#x27;sex&#x27;</span>].astype(<span class="string">&#x27;category&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex new_sex</span></span><br><span class="line"><span class="string">0   18   m       m</span></span><br><span class="line"><span class="string">1   15   f       f</span></span><br><span class="line"><span class="string">2   27   m       m</span></span><br><span class="line"><span class="string">3   22   m       m</span></span><br><span class="line"><span class="string">4   20   f       f</span></span><br><span class="line"><span class="string">5   35   m       m</span></span><br><span class="line"><span class="string">6   29   f       f</span></span><br><span class="line"><span class="string">7   15   m       m</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df5.dtypes) <span class="comment"># 查看类型</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">age           int64</span></span><br><span class="line"><span class="string">sex          object</span></span><br><span class="line"><span class="string">new_sex    category</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 分类类型数据值 , 将 &#x27;m&#x27;, &#x27;f&#x27;, 替换为 &#x27;aa&#x27;, &#x27;bb&#x27;</span></span><br><span class="line">df5[<span class="string">&#x27;new_sex&#x27;</span>].cat.categories = [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    m</span></span><br><span class="line"><span class="string">3   22   m       m</span></span><br><span class="line"><span class="string">4   20   f       f</span></span><br><span class="line"><span class="string">5   35   m       m</span></span><br><span class="line"><span class="string">6   29   f       f</span></span><br><span class="line"><span class="string">7   15   m       m</span></span><br><span class="line"><span class="string">age           int64</span></span><br><span class="line"><span class="string">sex          object</span></span><br><span class="line"><span class="string">new_sex    category</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">   age sex new_sex</span></span><br><span class="line"><span class="string">0   18   m      bb</span></span><br><span class="line"><span class="string">1   15   f      aa</span></span><br><span class="line"><span class="string">2   27   m      bb</span></span><br><span class="line"><span class="string">3   22   m      bb</span></span><br><span class="line"><span class="string">4   20   f      aa</span></span><br><span class="line"><span class="string">5   35   m      bb</span></span><br><span class="line"><span class="string">6   29   f      aa</span></span><br><span class="line"><span class="string">7   15   m      bb</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 new_sex 排序</span></span><br><span class="line"><span class="built_in">print</span>(df5.sort_values(by=<span class="string">&#x27;new_sex&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex new_sex</span></span><br><span class="line"><span class="string">1   15   f      aa</span></span><br><span class="line"><span class="string">4   20   f      aa</span></span><br><span class="line"><span class="string">6   29   f      aa</span></span><br><span class="line"><span class="string">0   18   m      bb</span></span><br><span class="line"><span class="string">2   27   m      bb</span></span><br><span class="line"><span class="string">3   22   m      bb</span></span><br><span class="line"><span class="string">5   35   m      bb</span></span><br><span class="line"><span class="string">7   15   m      bb</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 new_sex 分组</span></span><br><span class="line"><span class="built_in">print</span>(df5.groupby(<span class="string">&#x27;new_sex&#x27;</span>).size()) <span class="comment">##列&#x27;new_sex&#x27;的种类’a‘含有的行数，以及包括’b‘的行数。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">new_sex</span></span><br><span class="line"><span class="string">aa    3</span></span><br><span class="line"><span class="string">bb    5</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####################还有一些高级pandas炒作，具体看机器学习实战，或者是“轻松写Pandas快速入门（二）。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandasJson</title>
    <link href="http://example.com/2022/06/01/pandasJson/"/>
    <id>http://example.com/2022/06/01/pandasJson/</id>
    <published>2022-06-01T08:50:29.000Z</published>
    <updated>2022-06-01T08:58:02.697Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">###############本文件描述了几种json相关数据以及json文件读取为DataFrame数据类型。</span></span><br><span class="line"><span class="comment"># ##############对比“3-DataFrame.py”文件里面的三种数据类型构建DataFrame文件，以及读取csv文件得到DataFrame文件哈，好多种。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 读取.json 文件</span></span><br><span class="line">df = pd.read_json(<span class="string">&#x27;sites.json&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     id    name             url  likes</span></span><br><span class="line"><span class="string">0  A001    菜鸟教程  www.runoob.com     61</span></span><br><span class="line"><span class="string">1  A002  Google  www.google.com    124</span></span><br><span class="line"><span class="string">2  A003      淘宝  www.taobao.com     45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 直接将JSON 字符串读取为DateFrame数据类型</span></span><br><span class="line">data =[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A001&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;菜鸟教程&quot;</span>,</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.runoob.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;likes&quot;</span>: <span class="number">61</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A002&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Google&quot;</span>,</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.google.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;likes&quot;</span>: <span class="number">124</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A003&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;淘宝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.taobao.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;likes&quot;</span>: <span class="number">45</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     id    name             url  likes</span></span><br><span class="line"><span class="string">0  A001    菜鸟教程  www.runoob.com     61</span></span><br><span class="line"><span class="string">1  A002  Google  www.google.com    124</span></span><br><span class="line"><span class="string">2  A003      淘宝  www.taobao.com     45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 3 直接将JSON 字典 读取为DateFrame数据类型</span></span><br><span class="line"><span class="comment"># 字典格式的 JSON</span></span><br><span class="line">s = &#123;</span><br><span class="line">    <span class="string">&quot;col1&quot;</span>:&#123;<span class="string">&quot;row1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;row2&quot;</span>:<span class="number">2</span>,<span class="string">&quot;row3&quot;</span>:<span class="number">3</span>&#125;,</span><br><span class="line">    <span class="string">&quot;col2&quot;</span>:&#123;<span class="string">&quot;row1&quot;</span>:<span class="string">&quot;x&quot;</span>,<span class="string">&quot;row2&quot;</span>:<span class="string">&quot;y&quot;</span>,<span class="string">&quot;row3&quot;</span>:<span class="string">&quot;z&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将JSON字典 转为 DataFrame</span></span><br><span class="line">df = pd.DataFrame(s)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      col1 col2</span></span><br><span class="line"><span class="string">row1     1    x</span></span><br><span class="line"><span class="string">row2     2    y</span></span><br><span class="line"><span class="string">row3     3    z</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 4 从 URL 中读取 JSON 数据：</span></span><br><span class="line">URL = <span class="string">&#x27;https://static.runoob.com/download/sites.json&#x27;</span></span><br><span class="line">df = pd.read_json(URL)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     id    name             url  likes</span></span><br><span class="line"><span class="string">0  A001    菜鸟教程  www.runoob.com     61</span></span><br><span class="line"><span class="string">1  A002  Google  www.google.com    124</span></span><br><span class="line"><span class="string">2  A003      淘宝  www.taobao.com     45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 5 读取内嵌的 JSON 数据                  ## 还有更复杂的json格式，这里就不细究了。</span></span><br><span class="line">df = pd.read_json(<span class="string">&#x27;nested_list.json&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          school_name   class                                                                     students</span></span><br><span class="line"><span class="string">0  ABC primary school  Year 1    &#123;&#x27;id&#x27;: &#x27;A001&#x27;, &#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;math&#x27;: 60, &#x27;physics&#x27;: 66, &#x27;chemistry&#x27;: 61&#125;</span></span><br><span class="line"><span class="string">1  ABC primary school  Year 1  &#123;&#x27;id&#x27;: &#x27;A002&#x27;, &#x27;name&#x27;: &#x27;James&#x27;, &#x27;math&#x27;: 89, &#x27;physics&#x27;: 76, &#x27;chemistry&#x27;: 51&#125;</span></span><br><span class="line"><span class="string">2  ABC primary school  Year 1  &#123;&#x27;id&#x27;: &#x27;A003&#x27;, &#x27;name&#x27;: &#x27;Jenny&#x27;, &#x27;math&#x27;: 79, &#x27;physics&#x27;: 90, &#x27;chemistry&#x27;: 78&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">###########因为：&quot;students&quot;: [],students 这一列里面有三元素，所以有三行哈。然后其他列只有一个元素的，直接copy到下面两行。而不是NaN，好奇怪。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 需要使用到 json_normalize() 方法将内嵌的数据完整的解析出来：</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;nested_list.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.loads(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展平数据</span></span><br><span class="line">df_nested_list = pd.json_normalize(data,record_path=[<span class="string">&#x27;students&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df_nested_list))</span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(df_nested_list)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     id   name  math  physics  chemistry</span></span><br><span class="line"><span class="string">0  A001    Tom    60       66         61</span></span><br><span class="line"><span class="string">1  A002  James    89       76         51</span></span><br><span class="line"><span class="string">2  A003  Jenny    79       90         78</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############把另外两个列也包含进来。</span></span><br><span class="line">df_nested_list = pd.json_normalize(</span><br><span class="line">    data,</span><br><span class="line">    record_path =[<span class="string">&#x27;students&#x27;</span>],</span><br><span class="line">    meta=[<span class="string">&#x27;school_name&#x27;</span>, <span class="string">&#x27;class&#x27;</span>]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(df_nested_list)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     id   name  math  physics  chemistry         school_name   class</span></span><br><span class="line"><span class="string">0  A001    Tom    60       66         61  ABC primary school  Year 1</span></span><br><span class="line"><span class="string">1  A002  James    89       76         51  ABC primary school  Year 1</span></span><br><span class="line"><span class="string">2  A003  Jenny    79       90         78  ABC primary school  Year 1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 接下来，让我们尝试读取更复杂的 JSON 数据，该数据嵌套了列表和字典，数据文件 nested_mix.json 如下：算了算了，不搞n那么复杂。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas-CVS文件</title>
    <link href="http://example.com/2022/06/01/pandas-CVS%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2022/06/01/pandas-CVS%E6%96%87%E4%BB%B6/</id>
    <published>2022-06-01T08:50:19.000Z</published>
    <updated>2022-06-01T08:58:49.460Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;nba.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df))</span><br><span class="line"><span class="comment">#&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(df)        <span class="comment">######################直接读取文件，返回的类型就是：DateFrame。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">              Name            Team  ...            College     Salary</span></span><br><span class="line"><span class="string">0    Avery Bradley  Boston Celtics  ...              Texas  7730337.0</span></span><br><span class="line"><span class="string">1      Jae Crowder  Boston Celtics  ...          Marquette  6796117.0</span></span><br><span class="line"><span class="string">2     John Holland  Boston Celtics  ...  Boston University        NaN</span></span><br><span class="line"><span class="string">3      R.J. Hunter  Boston Celtics  ...      Georgia State  1148640.0</span></span><br><span class="line"><span class="string">4    Jonas Jerebko  Boston Celtics  ...                NaN  5000000.0</span></span><br><span class="line"><span class="string">..             ...             ...  ...                ...        ...</span></span><br><span class="line"><span class="string">453   Shelvin Mack       Utah Jazz  ...             Butler  2433333.0</span></span><br><span class="line"><span class="string">454      Raul Neto       Utah Jazz  ...                NaN   900000.0</span></span><br><span class="line"><span class="string">455   Tibor Pleiss       Utah Jazz  ...                NaN  2900000.0</span></span><br><span class="line"><span class="string">456    Jeff Withey       Utah Jazz  ...             Kansas   947276.0</span></span><br><span class="line"><span class="string">457            NaN             NaN  ...                NaN        NaN</span></span><br><span class="line"><span class="string">[458 rows x 9 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string()) <span class="comment">#使用该函数，下面输出类型是一样的，但是会输出每一行每一列！！！  前面只显示前5行跟后5行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                         Name                    Team  Number Position   Age Height  Weight                College      Salary</span></span><br><span class="line"><span class="string">0               Avery Bradley          Boston Celtics     0.0       PG  25.0    6-2   180.0                  Texas   7730337.0</span></span><br><span class="line"><span class="string">1                 Jae Crowder          Boston Celtics    99.0       SF  25.0    6-6   235.0              Marquette   6796117.0</span></span><br><span class="line"><span class="string">2                John Holland          Boston Celtics    30.0       SG  27.0    6-5   205.0      Boston University         NaN</span></span><br><span class="line"><span class="string">3                 R.J. Hunter          Boston Celtics    28.0       SG  22.0    6-5   185.0          Georgia State   1148640.0</span></span><br><span class="line"><span class="string">4               Jonas Jerebko          Boston Celtics     8.0       PF  29.0   6-10   231.0                    NaN   5000000.0</span></span><br><span class="line"><span class="string">5                Amir Johnson          Boston Celtics    90.0       PF  29.0    6-9   240.0                    NaN  12000000.0</span></span><br><span class="line"><span class="string">6               Jordan Mickey          Boston Celtics    55.0       PF  21.0    6-8   235.0                    LSU   1170960.0</span></span><br><span class="line"><span class="string">7                Kelly Olynyk          Boston Celtics    41.0        C  25.0    7-0   238.0                Gonzaga   2165160.0</span></span><br><span class="line"><span class="string">8                Terry Rozier          Boston Celtics    12.0       PG  22.0    6-2   190.0             Louisville   1824360.0</span></span><br><span class="line"><span class="string">9                Marcus Smart          Boston Celtics    36.0       PG  22.0    6-4   220.0         Oklahoma State   3431040.0</span></span><br><span class="line"><span class="string">10            Jared Sullinger          Boston Celtics     7.0        C  24.0    6-9   260.0             Ohio State   2569260.0</span></span><br><span class="line"><span class="string">11              Isaiah Thomas          Boston Celtics     4.0       PG  27.0    5-9   185.0             Washington   6912869.0</span></span><br><span class="line"><span class="string">12                Evan Turner          Boston Celtics    11.0       SG  27.0    6-7   220.0             Ohio State   3425510.0</span></span><br><span class="line"><span class="string">13                James Young          Boston Celtics    13.0       SG  20.0    6-6   215.0               Kentucky   1749840.0</span></span><br><span class="line"><span class="string">14               Tyler Zeller          Boston Celtics    44.0        C  26.0    7-0   253.0         North Carolina   2616975.0</span></span><br><span class="line"><span class="string">15           Bojan Bogdanovic           Brooklyn Nets    44.0       SG  27.0    6-8   216.0                    NaN   3425510.0</span></span><br><span class="line"><span class="string">16               Markel Brown           Brooklyn Nets    22.0       SG  24.0    6-3   190.0         Oklahoma State    845059.0</span></span><br><span class="line"><span class="string">17            Wayne Ellington           Brooklyn Nets    21.0       SG  28.0    6-4   200.0         North Carolina   1500000.0</span></span><br><span class="line"><span class="string">18    Rondae Hollis-Jefferson           Brooklyn Nets    24.0       SG  21.0    6-7   220.0                Arizona   1335480.0</span></span><br><span class="line"><span class="string">19               Jarrett Jack           Brooklyn Nets     2.0       PG  32.0    6-3   200.0           Georgia Tech   6300000.0</span></span><br><span class="line"><span class="string">20             Sergey Karasev           Brooklyn Nets    10.0       SG  22.0    6-7   208.0                    NaN   1599840.0</span></span><br><span class="line"><span class="string">21            Sean Kilpatrick           Brooklyn Nets     6.0       SG  26.0    6-4   219.0             Cincinnati    134215.0</span></span><br><span class="line"><span class="string">22               Shane Larkin           Brooklyn Nets     0.0       PG  23.0   5-11   175.0             Miami (FL)   1500000.0</span></span><br><span class="line"><span class="string">23                Brook Lopez           Brooklyn Nets    11.0        C  28.0    7-0   275.0               Stanford  19689000.0</span></span><br><span class="line"><span class="string">24           Chris McCullough           Brooklyn Nets     1.0       PF  21.0   6-11   200.0               Syracuse   1140240.0</span></span><br><span class="line"><span class="string">25                Willie Reed           Brooklyn Nets    33.0       PF  26.0   6-10   220.0            Saint Louis    947276.0</span></span><br><span class="line"><span class="string">26            Thomas Robinson           Brooklyn Nets    41.0       PF  25.0   6-10   237.0                 Kansas    981348.0</span></span><br><span class="line"><span class="string">27                 Henry Sims           Brooklyn Nets    14.0        C  26.0   6-10   248.0             Georgetown    947276.0</span></span><br><span class="line"><span class="string">28               Donald Sloan           Brooklyn Nets    15.0       PG  28.0    6-3   205.0              Texas A&amp;M    947276.0</span></span><br><span class="line"><span class="string">29             Thaddeus Young           Brooklyn Nets    30.0       PF  27.0    6-8   221.0           Georgia Tech  11235955.0</span></span><br><span class="line"><span class="string">30              Arron Afflalo         New York Knicks     4.0       SG  30.0    6-5   210.0                   UCLA   8000000.0</span></span><br><span class="line"><span class="string">31               Lou Amundson         New York Knicks    17.0       PF  33.0    6-9   220.0                   UNLV   1635476.0</span></span><br><span class="line"><span class="string">32     Thanasis Antetokounmpo         New York Knicks    43.0       SF  23.0    6-7   205.0                    NaN     30888.0</span></span><br><span class="line"><span class="string">33            Carmelo Anthony         New York Knicks     7.0       SF  32.0    6-8   240.0               Syracuse  22875000.0</span></span><br><span class="line"><span class="string">34              Jose Calderon         New York Knicks     3.0       PG  34.0    6-3   200.0                    NaN   7402812.0</span></span><br><span class="line"><span class="string">35           Cleanthony Early         New York Knicks    11.0       SF  25.0    6-8   210.0          Wichita State    845059.0</span></span><br><span class="line"><span class="string">36          Langston Galloway         New York Knicks     2.0       SG  24.0    6-2   200.0         Saint Joseph&#x27;s    845059.0</span></span><br><span class="line"><span class="string">37               Jerian Grant         New York Knicks    13.0       PG  23.0    6-4   195.0             Notre Dame   1572360.0</span></span><br><span class="line"><span class="string">38                Robin Lopez         New York Knicks     8.0        C  28.0    7-0   255.0               Stanford  12650000.0</span></span><br><span class="line"><span class="string">39               Kyle O&#x27;Quinn         New York Knicks     9.0       PF  26.0   6-10   250.0          Norfolk State   3750000.0</span></span><br><span class="line"><span class="string">40         Kristaps Porzingis         New York Knicks     6.0       PF  20.0    7-3   240.0                    NaN   4131720.0</span></span><br><span class="line"><span class="string">41             Kevin Seraphin         New York Knicks     1.0        C  26.0   6-10   278.0                    NaN   2814000.0</span></span><br><span class="line"><span class="string">42               Lance Thomas         New York Knicks    42.0       SF  28.0    6-8   235.0                   Duke   1636842.0</span></span><br><span class="line"><span class="string">43              Sasha Vujacic         New York Knicks    18.0       SG  32.0    6-7   195.0                    NaN    947276.0</span></span><br><span class="line"><span class="string">44           Derrick Williams         New York Knicks    23.0       PF  25.0    6-8   240.0                Arizona   4000000.0</span></span><br><span class="line"><span class="string">45                Tony Wroten         New York Knicks     5.0       SG  23.0    6-6   205.0             Washington    167406.0</span></span><br><span class="line"><span class="string">46                Elton Brand      Philadelphia 76ers    42.0       PF  37.0    6-9   254.0                   Duke         NaN</span></span><br><span class="line"><span class="string">47              Isaiah Canaan      Philadelphia 76ers     0.0       PG  25.0    6-0   201.0           Murray State    947276.0</span></span><br><span class="line"><span class="string">48           Robert Covington      Philadelphia 76ers    33.0       SF  25.0    6-9   215.0        Tennessee State   1000000.0</span></span><br><span class="line"><span class="string">49                Joel Embiid      Philadelphia 76ers    21.0        C  22.0    7-0   250.0                 Kansas   4626960.0</span></span><br><span class="line"><span class="string">50               Jerami Grant      Philadelphia 76ers    39.0       SF  22.0    6-8   210.0               Syracuse    845059.0</span></span><br><span class="line"><span class="string">51             Richaun Holmes      Philadelphia 76ers    22.0       PF  22.0   6-10   245.0          Bowling Green   1074169.0</span></span><br><span class="line"><span class="string">52                Carl Landry      Philadelphia 76ers     7.0       PF  32.0    6-9   248.0                 Purdue   6500000.0</span></span><br><span class="line"><span class="string">53           Kendall Marshall      Philadelphia 76ers     5.0       PG  24.0    6-4   200.0         North Carolina   2144772.0</span></span><br><span class="line"><span class="string">54             T.J. McConnell      Philadelphia 76ers    12.0       PG  24.0    6-2   200.0                Arizona    525093.0</span></span><br><span class="line"><span class="string">55               Nerlens Noel      Philadelphia 76ers     4.0       PF  22.0   6-11   228.0               Kentucky   3457800.0</span></span><br><span class="line"><span class="string">56              Jahlil Okafor      Philadelphia 76ers     8.0        C  20.0   6-11   275.0                   Duke   4582680.0</span></span><br><span class="line"><span class="string">57                  Ish Smith      Philadelphia 76ers     1.0       PG  27.0    6-0   175.0            Wake Forest    947276.0</span></span><br><span class="line"><span class="string">58               Nik Stauskas      Philadelphia 76ers    11.0       SG  22.0    6-6   205.0               Michigan   2869440.0</span></span><br><span class="line"><span class="string">59            Hollis Thompson      Philadelphia 76ers    31.0       SG  25.0    6-8   206.0             Georgetown    947276.0</span></span><br><span class="line"><span class="string">60             Christian Wood      Philadelphia 76ers    35.0       PF  20.0   6-11   220.0                   UNLV    525093.0</span></span><br><span class="line"><span class="string">61            Bismack Biyombo         Toronto Raptors     8.0        C  23.0    6-9   245.0                    NaN   2814000.0</span></span><br><span class="line"><span class="string">62              Bruno Caboclo         Toronto Raptors    20.0       SF  20.0    6-9   205.0                    NaN   1524000.0</span></span><br><span class="line"><span class="string">63            DeMarre Carroll         Toronto Raptors     5.0       SF  29.0    6-8   212.0               Missouri  13600000.0</span></span><br><span class="line"><span class="string">64              DeMar DeRozan         Toronto Raptors    10.0       SG  26.0    6-7   220.0                    USC  10050000.0</span></span><br><span class="line"><span class="string">65              James Johnson         Toronto Raptors     3.0       PF  29.0    6-9   250.0            Wake Forest   2500000.0</span></span><br><span class="line"><span class="string">66                Cory Joseph         Toronto Raptors     6.0       PG  24.0    6-3   190.0                  Texas   7000000.0</span></span><br><span class="line"><span class="string">67                 Kyle Lowry         Toronto Raptors     7.0       PG  30.0    6-0   205.0              Villanova  12000000.0</span></span><br><span class="line"><span class="string">68             Lucas Nogueira         Toronto Raptors    92.0        C  23.0    7-0   220.0                    NaN   1842000.0</span></span><br><span class="line"><span class="string">69          Patrick Patterson         Toronto Raptors    54.0       PF  27.0    6-9   235.0               Kentucky   6268675.0</span></span><br><span class="line"><span class="string">70              Norman Powell         Toronto Raptors    24.0       SG  23.0    6-4   215.0                   UCLA    650000.0</span></span><br><span class="line"><span class="string">71              Terrence Ross         Toronto Raptors    31.0       SF  25.0    6-7   195.0             Washington   3553917.0</span></span><br><span class="line"><span class="string">72                 Luis Scola         Toronto Raptors     4.0       PF  36.0    6-9   240.0                    NaN   2900000.0</span></span><br><span class="line"><span class="string">73             Jason Thompson         Toronto Raptors     1.0       PF  29.0   6-11   250.0                  Rider    245177.0</span></span><br><span class="line"><span class="string">74          Jonas Valanciunas         Toronto Raptors    17.0        C  24.0    7-0   255.0                    NaN   4660482.0</span></span><br><span class="line"><span class="string">75               Delon Wright         Toronto Raptors    55.0       PG  24.0    6-5   190.0                   Utah   1509360.0</span></span><br><span class="line"><span class="string">76            Leandro Barbosa   Golden State Warriors    19.0       SG  33.0    6-3   194.0                    NaN   2500000.0</span></span><br><span class="line"><span class="string">77            Harrison Barnes   Golden State Warriors    40.0       SF  24.0    6-8   225.0         North Carolina   3873398.0</span></span><br><span class="line"><span class="string">78               Andrew Bogut   Golden State Warriors    12.0        C  31.0    7-0   260.0                   Utah  13800000.0</span></span><br><span class="line"><span class="string">79                  Ian Clark   Golden State Warriors    21.0       SG  25.0    6-3   175.0                Belmont    947276.0</span></span><br><span class="line"><span class="string">80              Stephen Curry   Golden State Warriors    30.0       PG  28.0    6-3   190.0               Davidson  11370786.0</span></span><br><span class="line"><span class="string">81               Festus Ezeli   Golden State Warriors    31.0        C  26.0   6-11   265.0             Vanderbilt   2008748.0</span></span><br><span class="line"><span class="string">82             Draymond Green   Golden State Warriors    23.0       PF  26.0    6-7   230.0         Michigan State  14260870.0</span></span><br><span class="line"><span class="string">83             Andre Iguodala   Golden State Warriors     9.0       SF  32.0    6-6   215.0                Arizona  11710456.0</span></span><br><span class="line"><span class="string">84           Shaun Livingston   Golden State Warriors    34.0       PG  30.0    6-7   192.0                    NaN   5543725.0</span></span><br><span class="line"><span class="string">85               Kevon Looney   Golden State Warriors    36.0       SF  20.0    6-9   220.0                   UCLA   1131960.0</span></span><br><span class="line"><span class="string">86       James Michael McAdoo   Golden State Warriors    20.0       SF  23.0    6-9   240.0         North Carolina    845059.0</span></span><br><span class="line"><span class="string">87               Brandon Rush   Golden State Warriors     4.0       SF  30.0    6-6   220.0                 Kansas   1270964.0</span></span><br><span class="line"><span class="string">88          Marreese Speights   Golden State Warriors     5.0        C  28.0   6-10   255.0                Florida   3815000.0</span></span><br><span class="line"><span class="string">89              Klay Thompson   Golden State Warriors    11.0       SG  26.0    6-7   215.0       Washington State  15501000.0</span></span><br><span class="line"><span class="string">90           Anderson Varejao   Golden State Warriors    18.0       PF  33.0   6-11   273.0                    NaN    289755.0</span></span><br><span class="line"><span class="string">91               Cole Aldrich    Los Angeles Clippers    45.0        C  27.0   6-11   250.0                 Kansas   1100602.0</span></span><br><span class="line"><span class="string">92                 Jeff Ayres    Los Angeles Clippers    19.0       PF  29.0    6-9   250.0          Arizona State    111444.0</span></span><br><span class="line"><span class="string">93             Jamal Crawford    Los Angeles Clippers    11.0       SG  36.0    6-5   195.0               Michigan   5675000.0</span></span><br><span class="line"><span class="string">94             Branden Dawson    Los Angeles Clippers    22.0       SF  23.0    6-6   225.0         Michigan State    525093.0</span></span><br><span class="line"><span class="string">95                 Jeff Green    Los Angeles Clippers     8.0       SF  29.0    6-9   235.0             Georgetown   9650000.0</span></span><br><span class="line"><span class="string">96              Blake Griffin    Los Angeles Clippers    32.0       PF  27.0   6-10   251.0               Oklahoma  18907726.0</span></span><br><span class="line"><span class="string">97             Wesley Johnson    Los Angeles Clippers    33.0       SF  28.0    6-7   215.0               Syracuse   1100602.0</span></span><br><span class="line"><span class="string">98             DeAndre Jordan    Los Angeles Clippers     6.0        C  27.0   6-11   265.0              Texas A&amp;M  19689000.0</span></span><br><span class="line"><span class="string">99   Luc Richard Mbah a Moute    Los Angeles Clippers    12.0       PF  29.0    6-8   230.0                   UCLA    947276.0</span></span><br><span class="line"><span class="string">100                Chris Paul    Los Angeles Clippers     3.0       PG  31.0    6-0   175.0            Wake Forest  21468695.0</span></span><br><span class="line"><span class="string">101               Paul Pierce    Los Angeles Clippers    34.0       SF  38.0    6-7   235.0                 Kansas   3376000.0</span></span><br><span class="line"><span class="string">102            Pablo Prigioni    Los Angeles Clippers     9.0       PG  39.0    6-3   185.0                    NaN    947726.0</span></span><br><span class="line"><span class="string">103                 JJ Redick    Los Angeles Clippers     4.0       SG  31.0    6-4   190.0                   Duke   7085000.0</span></span><br><span class="line"><span class="string">104             Austin Rivers    Los Angeles Clippers    25.0       PG  23.0    6-4   200.0                   Duke   3110796.0</span></span><br><span class="line"><span class="string">105               C.J. Wilcox    Los Angeles Clippers    30.0       SG  25.0    6-5   195.0             Washington   1159680.0</span></span><br><span class="line"><span class="string">106              Brandon Bass      Los Angeles Lakers     2.0       PF  31.0    6-8   250.0                    LSU   3000000.0</span></span><br><span class="line"><span class="string">107               Tarik Black      Los Angeles Lakers    28.0        C  24.0    6-9   250.0                 Kansas    845059.0</span></span><br><span class="line"><span class="string">108             Anthony Brown      Los Angeles Lakers     3.0       SF  23.0    6-7   210.0               Stanford    700000.0</span></span><br><span class="line"><span class="string">109               Kobe Bryant      Los Angeles Lakers    24.0       SF  37.0    6-6   212.0                    NaN  25000000.0</span></span><br><span class="line"><span class="string">110           Jordan Clarkson      Los Angeles Lakers     6.0       PG  24.0    6-5   194.0               Missouri    845059.0</span></span><br><span class="line"><span class="string">111               Roy Hibbert      Los Angeles Lakers    17.0        C  29.0    7-2   270.0             Georgetown  15592217.0</span></span><br><span class="line"><span class="string">112           Marcelo Huertas      Los Angeles Lakers     9.0       PG  33.0    6-3   200.0                    NaN    525093.0</span></span><br><span class="line"><span class="string">113                Ryan Kelly      Los Angeles Lakers     4.0       PF  25.0   6-11   230.0                   Duke   1724250.0</span></span><br><span class="line"><span class="string">114           Larry Nance Jr.      Los Angeles Lakers     7.0       PF  23.0    6-9   230.0                Wyoming   1155600.0</span></span><br><span class="line"><span class="string">115             Julius Randle      Los Angeles Lakers    30.0       PF  21.0    6-9   250.0               Kentucky   3132240.0</span></span><br><span class="line"><span class="string">116          D&#x27;Angelo Russell      Los Angeles Lakers     1.0       PG  20.0    6-5   195.0             Ohio State   5103120.0</span></span><br><span class="line"><span class="string">117              Robert Sacre      Los Angeles Lakers    50.0        C  27.0    7-0   270.0                Gonzaga    981348.0</span></span><br><span class="line"><span class="string">118            Louis Williams      Los Angeles Lakers    23.0       SG  29.0    6-1   175.0                    NaN   7000000.0</span></span><br><span class="line"><span class="string">119         Metta World Peace      Los Angeles Lakers    37.0       SF  36.0    6-7   260.0             St. John&#x27;s    947276.0</span></span><br><span class="line"><span class="string">120                Nick Young      Los Angeles Lakers     0.0       SF  31.0    6-7   210.0                    USC   5219169.0</span></span><br><span class="line"><span class="string">121              Eric Bledsoe            Phoenix Suns     2.0       PG  26.0    6-1   190.0               Kentucky  13500000.0</span></span><br><span class="line"><span class="string">122              Devin Booker            Phoenix Suns     1.0       SG  19.0    6-6   206.0               Kentucky   2127840.0</span></span><br><span class="line"><span class="string">123            Chase Budinger            Phoenix Suns    10.0       SF  28.0    6-7   209.0                Arizona    206192.0</span></span><br><span class="line"><span class="string">124            Tyson Chandler            Phoenix Suns     4.0        C  33.0    7-1   240.0                    NaN  13000000.0</span></span><br><span class="line"><span class="string">125            Archie Goodwin            Phoenix Suns    20.0       SG  21.0    6-5   200.0               Kentucky   1160160.0</span></span><br><span class="line"><span class="string">126              John Jenkins            Phoenix Suns    23.0       SG  25.0    6-4   215.0             Vanderbilt    981348.0</span></span><br><span class="line"><span class="string">127            Brandon Knight            Phoenix Suns     3.0       PG  24.0    6-3   189.0               Kentucky  13500000.0</span></span><br><span class="line"><span class="string">128                  Alex Len            Phoenix Suns    21.0        C  22.0    7-1   260.0               Maryland   3807120.0</span></span><br><span class="line"><span class="string">129                 Jon Leuer            Phoenix Suns    30.0       PF  27.0   6-10   228.0              Wisconsin   1035000.0</span></span><br><span class="line"><span class="string">130              Phil Pressey            Phoenix Suns    25.0       PG  25.0   5-11   175.0               Missouri     55722.0</span></span><br><span class="line"><span class="string">131              Ronnie Price            Phoenix Suns    14.0       PG  32.0    6-2   190.0            Utah Valley    947276.0</span></span><br><span class="line"><span class="string">132           Mirza Teletovic            Phoenix Suns    35.0       PF  30.0    6-9   242.0                    NaN   5500000.0</span></span><br><span class="line"><span class="string">133               P.J. Tucker            Phoenix Suns    17.0       SF  31.0    6-6   245.0                  Texas   5500000.0</span></span><br><span class="line"><span class="string">134               T.J. Warren            Phoenix Suns    12.0       SF  22.0    6-8   230.0   North Carolina State   2041080.0</span></span><br><span class="line"><span class="string">135             Alan Williams            Phoenix Suns    15.0        C  23.0    6-8   260.0       UC Santa Barbara     83397.0</span></span><br><span class="line"><span class="string">136                Quincy Acy        Sacramento Kings    13.0       SF  25.0    6-7   240.0                 Baylor    981348.0</span></span><br><span class="line"><span class="string">137            James Anderson        Sacramento Kings     5.0       SG  27.0    6-6   213.0         Oklahoma State   1015421.0</span></span><br><span class="line"><span class="string">138           Marco Belinelli        Sacramento Kings     3.0       SG  30.0    6-5   210.0                    NaN   6060606.0</span></span><br><span class="line"><span class="string">139              Caron Butler        Sacramento Kings    31.0       SF  36.0    6-7   228.0            Connecticut   1449187.0</span></span><br><span class="line"><span class="string">140               Omri Casspi        Sacramento Kings    18.0       SF  27.0    6-9   225.0                    NaN   2836186.0</span></span><br><span class="line"><span class="string">141       Willie Cauley-Stein        Sacramento Kings     0.0        C  22.0    7-0   240.0               Kentucky   3398280.0</span></span><br><span class="line"><span class="string">142           Darren Collison        Sacramento Kings     7.0       PG  28.0    6-0   175.0                   UCLA   5013559.0</span></span><br><span class="line"><span class="string">143          DeMarcus Cousins        Sacramento Kings    15.0        C  25.0   6-11   270.0               Kentucky  15851950.0</span></span><br><span class="line"><span class="string">144                Seth Curry        Sacramento Kings    30.0       SG  25.0    6-2   185.0                   Duke    947276.0</span></span><br><span class="line"><span class="string">145                Duje Dukan        Sacramento Kings    26.0       PF  24.0    6-9   220.0              Wisconsin    525093.0</span></span><br><span class="line"><span class="string">146                  Rudy Gay        Sacramento Kings     8.0       SF  29.0    6-8   230.0            Connecticut  12403101.0</span></span><br><span class="line"><span class="string">147              Kosta Koufos        Sacramento Kings    41.0        C  27.0    7-0   265.0             Ohio State   7700000.0</span></span><br><span class="line"><span class="string">148              Ben McLemore        Sacramento Kings    23.0       SG  23.0    6-5   195.0                 Kansas   3156600.0</span></span><br><span class="line"><span class="string">149             Eric Moreland        Sacramento Kings    25.0       PF  24.0   6-10   238.0           Oregon State    845059.0</span></span><br><span class="line"><span class="string">150               Rajon Rondo        Sacramento Kings     9.0       PG  30.0    6-1   186.0               Kentucky   9500000.0</span></span><br><span class="line"><span class="string">151          Cameron Bairstow           Chicago Bulls    41.0       PF  25.0    6-9   250.0             New Mexico    845059.0</span></span><br><span class="line"><span class="string">152              Aaron Brooks           Chicago Bulls     0.0       PG  31.0    6-0   161.0                 Oregon   2250000.0</span></span><br><span class="line"><span class="string">153              Jimmy Butler           Chicago Bulls    21.0       SG  26.0    6-7   220.0              Marquette  16407500.0</span></span><br><span class="line"><span class="string">154             Mike Dunleavy           Chicago Bulls    34.0       SG  35.0    6-9   230.0                   Duke   4500000.0</span></span><br><span class="line"><span class="string">155         Cristiano Felicio           Chicago Bulls     6.0       PF  23.0   6-10   275.0                    NaN    525093.0</span></span><br><span class="line"><span class="string">156                 Pau Gasol           Chicago Bulls    16.0        C  35.0    7-0   250.0                    NaN   7448760.0</span></span><br><span class="line"><span class="string">157                Taj Gibson           Chicago Bulls    22.0       PF  30.0    6-9   225.0                    USC   8500000.0</span></span><br><span class="line"><span class="string">158            Justin Holiday           Chicago Bulls     7.0       SG  27.0    6-6   185.0             Washington    947276.0</span></span><br><span class="line"><span class="string">159            Doug McDermott           Chicago Bulls     3.0       SF  24.0    6-8   225.0              Creighton   2380440.0</span></span><br><span class="line"><span class="string">160            Nikola Mirotic           Chicago Bulls    44.0       PF  25.0   6-10   220.0                    NaN   5543725.0</span></span><br><span class="line"><span class="string">161             E&#x27;Twaun Moore           Chicago Bulls    55.0       SG  27.0    6-4   191.0                 Purdue   1015421.0</span></span><br><span class="line"><span class="string">162               Joakim Noah           Chicago Bulls    13.0        C  31.0   6-11   232.0                Florida  13400000.0</span></span><br><span class="line"><span class="string">163              Bobby Portis           Chicago Bulls     5.0       PF  21.0   6-11   230.0               Arkansas   1391160.0</span></span><br><span class="line"><span class="string">164              Derrick Rose           Chicago Bulls     1.0       PG  27.0    6-3   190.0                Memphis  20093064.0</span></span><br><span class="line"><span class="string">165                Tony Snell           Chicago Bulls    20.0       SF  24.0    6-7   200.0             New Mexico   1535880.0</span></span><br><span class="line"><span class="string">166       Matthew Dellavedova     Cleveland Cavaliers     8.0       PG  25.0    6-4   198.0           Saint Mary&#x27;s   1147276.0</span></span><br><span class="line"><span class="string">167             Channing Frye     Cleveland Cavaliers     9.0       PF  33.0   6-11   255.0                Arizona   8193029.0</span></span><br><span class="line"><span class="string">168              Kyrie Irving     Cleveland Cavaliers     2.0       PG  24.0    6-3   193.0                   Duke  16407501.0</span></span><br><span class="line"><span class="string">169              LeBron James     Cleveland Cavaliers    23.0       SF  31.0    6-8   250.0                    NaN  22970500.0</span></span><br><span class="line"><span class="string">170         Richard Jefferson     Cleveland Cavaliers    24.0       SF  35.0    6-7   233.0                Arizona    947276.0</span></span><br><span class="line"><span class="string">171             Dahntay Jones     Cleveland Cavaliers    30.0       SG  35.0    6-6   225.0                   Duke         NaN</span></span><br><span class="line"><span class="string">172               James Jones     Cleveland Cavaliers     1.0       SG  35.0    6-8   218.0             Miami (FL)    947276.0</span></span><br><span class="line"><span class="string">173                Sasha Kaun     Cleveland Cavaliers    14.0        C  31.0   6-11   260.0                 Kansas   1276000.0</span></span><br><span class="line"><span class="string">174                Kevin Love     Cleveland Cavaliers     0.0       PF  27.0   6-10   251.0                   UCLA  19689000.0</span></span><br><span class="line"><span class="string">175              Jordan McRae     Cleveland Cavaliers    12.0       SG  25.0    6-5   179.0              Tennessee    111196.0</span></span><br><span class="line"><span class="string">176            Timofey Mozgov     Cleveland Cavaliers    20.0        C  29.0    7-1   275.0                    NaN   4950000.0</span></span><br><span class="line"><span class="string">177             Iman Shumpert     Cleveland Cavaliers     4.0       SG  25.0    6-5   220.0           Georgia Tech   8988765.0</span></span><br><span class="line"><span class="string">178                J.R. Smith     Cleveland Cavaliers     5.0       SG  30.0    6-6   225.0                    NaN   5000000.0</span></span><br><span class="line"><span class="string">179          Tristan Thompson     Cleveland Cavaliers    13.0        C  25.0    6-9   238.0                  Texas  14260870.0</span></span><br><span class="line"><span class="string">180               Mo Williams     Cleveland Cavaliers    52.0       PG  33.0    6-1   198.0                Alabama   2100000.0</span></span><br><span class="line"><span class="string">181              Joel Anthony         Detroit Pistons    50.0        C  33.0    6-9   245.0                   UNLV   2500000.0</span></span><br><span class="line"><span class="string">182               Aron Baynes         Detroit Pistons    12.0        C  29.0   6-10   260.0       Washington State   6500000.0</span></span><br><span class="line"><span class="string">183               Steve Blake         Detroit Pistons    22.0       PG  36.0    6-3   172.0               Maryland   2170465.0</span></span><br><span class="line"><span class="string">184             Lorenzo Brown         Detroit Pistons    17.0       PG  25.0    6-5   189.0   North Carolina State    111444.0</span></span><br><span class="line"><span class="string">185            Reggie Bullock         Detroit Pistons    25.0       SF  25.0    6-7   205.0         North Carolina   1252440.0</span></span><br><span class="line"><span class="string">186  Kentavious Caldwell-Pope         Detroit Pistons     5.0       SG  23.0    6-5   205.0                Georgia   2891760.0</span></span><br><span class="line"><span class="string">187         Spencer Dinwiddie         Detroit Pistons     8.0       PG  23.0    6-6   200.0               Colorado    845059.0</span></span><br><span class="line"><span class="string">188            Andre Drummond         Detroit Pistons     0.0        C  22.0   6-11   279.0            Connecticut   3272091.0</span></span><br><span class="line"><span class="string">189             Tobias Harris         Detroit Pistons    34.0       SF  23.0    6-9   235.0              Tennessee  16000000.0</span></span><br><span class="line"><span class="string">190           Darrun Hilliard         Detroit Pistons     6.0       SF  23.0    6-6   205.0              Villanova    600000.0</span></span><br><span class="line"><span class="string">191            Reggie Jackson         Detroit Pistons     1.0       PG  26.0    6-3   208.0         Boston College  13913044.0</span></span><br><span class="line"><span class="string">192           Stanley Johnson         Detroit Pistons     3.0       SF  20.0    6-7   245.0                Arizona   2841960.0</span></span><br><span class="line"><span class="string">193               Jodie Meeks         Detroit Pistons    20.0       SG  28.0    6-4   210.0               Kentucky   6270000.0</span></span><br><span class="line"><span class="string">194             Marcus Morris         Detroit Pistons    13.0       PF  26.0    6-9   235.0                 Kansas   5000000.0</span></span><br><span class="line"><span class="string">195          Anthony Tolliver         Detroit Pistons    43.0       PF  31.0    6-8   240.0              Creighton   3000000.0</span></span><br><span class="line"><span class="string">196               Lavoy Allen          Indiana Pacers     5.0       PF  27.0    6-9   255.0                 Temple   4050000.0</span></span><br><span class="line"><span class="string">197          Rakeem Christmas          Indiana Pacers    25.0       PF  24.0    6-9   250.0               Syracuse   1007026.0</span></span><br><span class="line"><span class="string">198               Monta Ellis          Indiana Pacers    11.0       SG  30.0    6-3   185.0                    NaN  10300000.0</span></span><br><span class="line"><span class="string">199               Paul George          Indiana Pacers    13.0       SF  26.0    6-9   220.0           Fresno State  17120106.0</span></span><br><span class="line"><span class="string">200               George Hill          Indiana Pacers     3.0       PG  30.0    6-3   188.0                  IUPUI   8000000.0</span></span><br><span class="line"><span class="string">201               Jordan Hill          Indiana Pacers    27.0        C  28.0   6-10   235.0                Arizona   4000000.0</span></span><br><span class="line"><span class="string">202              Solomon Hill          Indiana Pacers    44.0       SF  25.0    6-7   225.0                Arizona   1358880.0</span></span><br><span class="line"><span class="string">203                 Ty Lawson          Indiana Pacers    10.0       PG  28.0   5-11   195.0         North Carolina    211744.0</span></span><br><span class="line"><span class="string">204               Ian Mahinmi          Indiana Pacers    28.0        C  29.0   6-11   250.0                    NaN   4000000.0</span></span><br><span class="line"><span class="string">205                C.J. Miles          Indiana Pacers     0.0       SF  29.0    6-6   231.0                    NaN   4394225.0</span></span><br><span class="line"><span class="string">206        Glenn Robinson III          Indiana Pacers    40.0       SG  22.0    6-7   222.0               Michigan   1100000.0</span></span><br><span class="line"><span class="string">207            Rodney Stuckey          Indiana Pacers     2.0       PG  30.0    6-5   205.0     Eastern Washington   7000000.0</span></span><br><span class="line"><span class="string">208              Myles Turner          Indiana Pacers    33.0       PF  20.0   6-11   243.0                  Texas   2357760.0</span></span><br><span class="line"><span class="string">209        Shayne Whittington          Indiana Pacers    42.0       PF  25.0   6-11   250.0       Western Michigan    845059.0</span></span><br><span class="line"><span class="string">210                 Joe Young          Indiana Pacers     1.0       PG  23.0    6-2   180.0                 Oregon   1007026.0</span></span><br><span class="line"><span class="string">211     Giannis Antetokounmpo         Milwaukee Bucks    34.0       SF  21.0   6-11   222.0                    NaN   1953960.0</span></span><br><span class="line"><span class="string">212            Jerryd Bayless         Milwaukee Bucks    19.0       PG  27.0    6-3   200.0                Arizona   3000000.0</span></span><br><span class="line"><span class="string">213   Michael Carter-Williams         Milwaukee Bucks     5.0       PG  24.0    6-6   190.0               Syracuse   2399040.0</span></span><br><span class="line"><span class="string">214          Jared Cunningham         Milwaukee Bucks     9.0       SG  25.0    6-4   195.0           Oregon State    947276.0</span></span><br><span class="line"><span class="string">215               Tyler Ennis         Milwaukee Bucks    11.0       PG  21.0    6-3   194.0               Syracuse   1662360.0</span></span><br><span class="line"><span class="string">216               John Henson         Milwaukee Bucks    31.0       PF  25.0   6-11   229.0         North Carolina   2943221.0</span></span><br><span class="line"><span class="string">217             Damien Inglis         Milwaukee Bucks    17.0       SF  21.0    6-8   246.0                    NaN    855000.0</span></span><br><span class="line"><span class="string">218                 O.J. Mayo         Milwaukee Bucks     3.0       SG  28.0    6-5   210.0                    USC   8000000.0</span></span><br><span class="line"><span class="string">219           Khris Middleton         Milwaukee Bucks    22.0       SG  24.0    6-8   234.0              Texas A&amp;M  14700000.0</span></span><br><span class="line"><span class="string">220               Greg Monroe         Milwaukee Bucks    15.0        C  26.0   6-11   265.0             Georgetown  16407500.0</span></span><br><span class="line"><span class="string">221               Steve Novak         Milwaukee Bucks     6.0       SF  32.0   6-10   225.0              Marquette    295327.0</span></span><br><span class="line"><span class="string">222       Johnny O&#x27;Bryant III         Milwaukee Bucks    77.0       PF  23.0    6-9   257.0                    LSU    845059.0</span></span><br><span class="line"><span class="string">223             Jabari Parker         Milwaukee Bucks    12.0       PF  21.0    6-8   250.0                   Duke   5152440.0</span></span><br><span class="line"><span class="string">224             Miles Plumlee         Milwaukee Bucks    18.0        C  27.0   6-11   249.0                   Duke   2109294.0</span></span><br><span class="line"><span class="string">225           Greivis Vasquez         Milwaukee Bucks    21.0       PG  29.0    6-6   217.0               Maryland   6600000.0</span></span><br><span class="line"><span class="string">226             Rashad Vaughn         Milwaukee Bucks    20.0       SG  19.0    6-6   202.0                   UNLV   1733040.0</span></span><br><span class="line"><span class="string">227           Justin Anderson        Dallas Mavericks     1.0       SG  22.0    6-6   228.0               Virginia   1449000.0</span></span><br><span class="line"><span class="string">228                J.J. Barea        Dallas Mavericks     5.0       PG  31.0    6-0   185.0           Northeastern   4290000.0</span></span><br><span class="line"><span class="string">229              Jeremy Evans        Dallas Mavericks    21.0       SF  28.0    6-9   200.0       Western Kentucky   1100602.0</span></span><br><span class="line"><span class="string">230            Raymond Felton        Dallas Mavericks     2.0       PG  31.0    6-1   205.0         North Carolina   3950313.0</span></span><br><span class="line"><span class="string">231              Devin Harris        Dallas Mavericks    34.0       PG  33.0    6-3   185.0              Wisconsin   4053446.0</span></span><br><span class="line"><span class="string">232                 David Lee        Dallas Mavericks    42.0       PF  33.0    6-9   245.0                Florida   2085671.0</span></span><br><span class="line"><span class="string">233           Wesley Matthews        Dallas Mavericks    23.0       SG  29.0    6-5   220.0              Marquette  16407500.0</span></span><br><span class="line"><span class="string">234              JaVale McGee        Dallas Mavericks    11.0        C  28.0    7-0   270.0                 Nevada   1270964.0</span></span><br><span class="line"><span class="string">235               Salah Mejri        Dallas Mavericks    50.0        C  29.0    7-2   245.0                    NaN    525093.0</span></span><br><span class="line"><span class="string">236             Dirk Nowitzki        Dallas Mavericks    41.0       PF  37.0    7-0   245.0                    NaN   8333334.0</span></span><br><span class="line"><span class="string">237             Zaza Pachulia        Dallas Mavericks    27.0        C  32.0   6-11   275.0                    NaN   5200000.0</span></span><br><span class="line"><span class="string">238          Chandler Parsons        Dallas Mavericks    25.0       SF  27.0   6-10   230.0                Florida  15361500.0</span></span><br><span class="line"><span class="string">239             Dwight Powell        Dallas Mavericks     7.0       PF  24.0   6-11   240.0               Stanford    845059.0</span></span><br><span class="line"><span class="string">240        Charlie Villanueva        Dallas Mavericks     3.0       PF  31.0   6-11   232.0            Connecticut    947276.0</span></span><br><span class="line"><span class="string">241            Deron Williams        Dallas Mavericks     8.0       PG  31.0    6-3   200.0               Illinois   5378974.0</span></span><br><span class="line"><span class="string">242              Trevor Ariza         Houston Rockets     1.0       SF  30.0    6-8   215.0                   UCLA   8193030.0</span></span><br><span class="line"><span class="string">243           Michael Beasley         Houston Rockets     8.0       SF  27.0   6-10   235.0           Kansas State    306527.0</span></span><br><span class="line"><span class="string">244          Patrick Beverley         Houston Rockets     2.0       PG  27.0    6-1   185.0               Arkansas   6486486.0</span></span><br><span class="line"><span class="string">245              Corey Brewer         Houston Rockets    33.0       SG  30.0    6-9   186.0                Florida   8229375.0</span></span><br><span class="line"><span class="string">246              Clint Capela         Houston Rockets    15.0       PF  22.0   6-10   240.0                    NaN   1242720.0</span></span><br><span class="line"><span class="string">247                Sam Dekker         Houston Rockets     7.0       SF  22.0    6-9   230.0              Wisconsin   1646400.0</span></span><br><span class="line"><span class="string">248          Andrew Goudelock         Houston Rockets     0.0       PG  27.0    6-3   200.0             Charleston    200600.0</span></span><br><span class="line"><span class="string">249              James Harden         Houston Rockets    13.0       SG  26.0    6-5   220.0          Arizona State  15756438.0</span></span><br><span class="line"><span class="string">250          Montrezl Harrell         Houston Rockets    35.0       PF  22.0    6-8   240.0             Louisville   1000000.0</span></span><br><span class="line"><span class="string">251             Dwight Howard         Houston Rockets    12.0        C  30.0   6-11   265.0                    NaN  22359364.0</span></span><br><span class="line"><span class="string">252            Terrence Jones         Houston Rockets     6.0       PF  24.0    6-9   252.0               Kentucky   2489530.0</span></span><br><span class="line"><span class="string">253            K.J. McDaniels         Houston Rockets    32.0       SG  23.0    6-6   205.0                Clemson   3189794.0</span></span><br><span class="line"><span class="string">254        Donatas Motiejunas         Houston Rockets    20.0       PF  25.0    7-0   222.0                    NaN   2288205.0</span></span><br><span class="line"><span class="string">255                Josh Smith         Houston Rockets     5.0        C  30.0    6-9   225.0                    NaN    947276.0</span></span><br><span class="line"><span class="string">256               Jason Terry         Houston Rockets    31.0       SG  38.0    6-2   185.0                Arizona    947276.0</span></span><br><span class="line"><span class="string">257              Jordan Adams       Memphis Grizzlies     3.0       SG  21.0    6-5   209.0                   UCLA   1404600.0</span></span><br><span class="line"><span class="string">258                Tony Allen       Memphis Grizzlies     9.0       SG  34.0    6-4   213.0         Oklahoma State   5158539.0</span></span><br><span class="line"><span class="string">259            Chris Andersen       Memphis Grizzlies     7.0       PF  37.0   6-10   245.0          Blinn College   5000000.0</span></span><br><span class="line"><span class="string">260               Matt Barnes       Memphis Grizzlies    22.0       SF  36.0    6-7   226.0                   UCLA   3542500.0</span></span><br><span class="line"><span class="string">261              Vince Carter       Memphis Grizzlies    15.0       SG  39.0    6-6   220.0         North Carolina   4088019.0</span></span><br><span class="line"><span class="string">262               Mike Conley       Memphis Grizzlies    11.0       PG  28.0    6-1   175.0             Ohio State   9588426.0</span></span><br><span class="line"><span class="string">263              Bryce Cotton       Memphis Grizzlies     8.0       PG  23.0    6-1   165.0             Providence    700902.0</span></span><br><span class="line"><span class="string">264             Jordan Farmar       Memphis Grizzlies     4.0       PG  29.0    6-2   180.0                   UCLA         NaN</span></span><br><span class="line"><span class="string">265                Marc Gasol       Memphis Grizzlies    33.0        C  31.0    7-1   255.0                    NaN  19688000.0</span></span><br><span class="line"><span class="string">266            JaMychal Green       Memphis Grizzlies     0.0       PF  25.0    6-9   227.0                Alabama    845059.0</span></span><br><span class="line"><span class="string">267             P.J. Hairston       Memphis Grizzlies    19.0       SF  23.0    6-6   230.0         North Carolina   1201440.0</span></span><br><span class="line"><span class="string">268             Jarell Martin       Memphis Grizzlies    10.0       PF  22.0   6-10   239.0                    LSU   1230840.0</span></span><br><span class="line"><span class="string">269              Ray McCallum       Memphis Grizzlies     5.0       PG  24.0    6-3   190.0                Detroit         NaN</span></span><br><span class="line"><span class="string">270            Xavier Munford       Memphis Grizzlies    14.0       PG  24.0    6-3   180.0           Rhode Island         NaN</span></span><br><span class="line"><span class="string">271             Zach Randolph       Memphis Grizzlies    50.0       PF  34.0    6-9   260.0         Michigan State   9638555.0</span></span><br><span class="line"><span class="string">272          Lance Stephenson       Memphis Grizzlies     1.0       SF  25.0    6-5   230.0             Cincinnati   9000000.0</span></span><br><span class="line"><span class="string">273            Alex Stepheson       Memphis Grizzlies    35.0       PF  28.0   6-10   270.0                    USC         NaN</span></span><br><span class="line"><span class="string">274            Brandan Wright       Memphis Grizzlies    34.0       PF  28.0   6-10   210.0         North Carolina   5464000.0</span></span><br><span class="line"><span class="string">275             Alexis Ajinca    New Orleans Pelicans    42.0        C  28.0    7-2   248.0                    NaN   4389607.0</span></span><br><span class="line"><span class="string">276             Ryan Anderson    New Orleans Pelicans    33.0       PF  28.0   6-10   240.0             California   8500000.0</span></span><br><span class="line"><span class="string">277                 Omer Asik    New Orleans Pelicans     3.0        C  29.0    7-0   255.0                    NaN   9213483.0</span></span><br><span class="line"><span class="string">278              Luke Babbitt    New Orleans Pelicans     8.0       SF  26.0    6-9   225.0                 Nevada   1100602.0</span></span><br><span class="line"><span class="string">279               Norris Cole    New Orleans Pelicans    30.0       PG  27.0    6-2   175.0        Cleveland State   3036927.0</span></span><br><span class="line"><span class="string">280          Dante Cunningham    New Orleans Pelicans    44.0       PF  29.0    6-8   230.0              Villanova   2850000.0</span></span><br><span class="line"><span class="string">281             Anthony Davis    New Orleans Pelicans    23.0       PF  23.0   6-10   253.0               Kentucky   7070730.0</span></span><br><span class="line"><span class="string">282        Bryce Dejean-Jones    New Orleans Pelicans    31.0       SG  23.0    6-6   203.0             Iowa State    169883.0</span></span><br><span class="line"><span class="string">283             Toney Douglas    New Orleans Pelicans    16.0       PG  30.0    6-2   195.0          Florida State   1164858.0</span></span><br><span class="line"><span class="string">284               James Ennis    New Orleans Pelicans     4.0       SF  25.0    6-7   210.0       Long Beach State    845059.0</span></span><br><span class="line"><span class="string">285              Tyreke Evans    New Orleans Pelicans     1.0       SG  26.0    6-6   220.0                Memphis  10734586.0</span></span><br><span class="line"><span class="string">286               Tim Frazier    New Orleans Pelicans     2.0       PG  25.0    6-1   170.0             Penn State    845059.0</span></span><br><span class="line"><span class="string">287                Alonzo Gee    New Orleans Pelicans    15.0       SF  29.0    6-6   225.0                Alabama   1320000.0</span></span><br><span class="line"><span class="string">288               Eric Gordon    New Orleans Pelicans    10.0       SG  27.0    6-4   215.0                Indiana  15514031.0</span></span><br><span class="line"><span class="string">289           Jordan Hamilton    New Orleans Pelicans    25.0       SG  25.0    6-7   220.0                  Texas   1015421.0</span></span><br><span class="line"><span class="string">290              Jrue Holiday    New Orleans Pelicans    11.0       PG  25.0    6-4   205.0                   UCLA  10595507.0</span></span><br><span class="line"><span class="string">291           Orlando Johnson    New Orleans Pelicans     0.0       SG  27.0    6-5   220.0       UC Santa Barbara     55722.0</span></span><br><span class="line"><span class="string">292          Kendrick Perkins    New Orleans Pelicans     5.0        C  31.0   6-10   270.0                    NaN    947276.0</span></span><br><span class="line"><span class="string">293          Quincy Pondexter    New Orleans Pelicans    20.0       SF  28.0    6-7   220.0             Washington   3382023.0</span></span><br><span class="line"><span class="string">294         LaMarcus Aldridge       San Antonio Spurs    12.0       PF  30.0   6-11   240.0                  Texas  19689000.0</span></span><br><span class="line"><span class="string">295             Kyle Anderson       San Antonio Spurs     1.0       SF  22.0    6-9   230.0                   UCLA   1142880.0</span></span><br><span class="line"><span class="string">296               Matt Bonner       San Antonio Spurs    15.0        C  36.0   6-10   235.0                Florida    947276.0</span></span><br><span class="line"><span class="string">297                Boris Diaw       San Antonio Spurs    33.0        C  34.0    6-8   250.0                    NaN   7500000.0</span></span><br><span class="line"><span class="string">298                Tim Duncan       San Antonio Spurs    21.0        C  40.0   6-11   250.0            Wake Forest   5250000.0</span></span><br><span class="line"><span class="string">299             Manu Ginobili       San Antonio Spurs    20.0       SG  38.0    6-6   205.0                    NaN   2814000.0</span></span><br><span class="line"><span class="string">300               Danny Green       San Antonio Spurs    14.0       SG  28.0    6-6   215.0         North Carolina  10000000.0</span></span><br><span class="line"><span class="string">301             Kawhi Leonard       San Antonio Spurs     2.0       SF  24.0    6-7   230.0        San Diego State  16407500.0</span></span><br><span class="line"><span class="string">302          Boban Marjanovic       San Antonio Spurs    40.0        C  27.0    7-3   290.0                    NaN   1200000.0</span></span><br><span class="line"><span class="string">303              Kevin Martin       San Antonio Spurs    23.0       SG  33.0    6-7   199.0       Western Carolina    200600.0</span></span><br><span class="line"><span class="string">304              Andre Miller       San Antonio Spurs    24.0       PG  40.0    6-3   200.0                   Utah    250750.0</span></span><br><span class="line"><span class="string">305               Patty Mills       San Antonio Spurs     8.0       PG  27.0    6-0   185.0           Saint Mary&#x27;s   3578947.0</span></span><br><span class="line"><span class="string">306               Tony Parker       San Antonio Spurs     9.0       PG  34.0    6-2   185.0                    NaN  13437500.0</span></span><br><span class="line"><span class="string">307          Jonathon Simmons       San Antonio Spurs    17.0       SG  26.0    6-6   195.0                Houston    525093.0</span></span><br><span class="line"><span class="string">308                David West       San Antonio Spurs    30.0       PF  35.0    6-9   250.0                 Xavier   1499187.0</span></span><br><span class="line"><span class="string">309             Kent Bazemore           Atlanta Hawks    24.0       SF  26.0    6-5   201.0           Old Dominion   2000000.0</span></span><br><span class="line"><span class="string">310          Tim Hardaway Jr.           Atlanta Hawks    10.0       SG  24.0    6-6   205.0               Michigan   1304520.0</span></span><br><span class="line"><span class="string">311              Kirk Hinrich           Atlanta Hawks    12.0       SG  35.0    6-4   190.0                 Kansas   2854940.0</span></span><br><span class="line"><span class="string">312                Al Horford           Atlanta Hawks    15.0        C  30.0   6-10   245.0                Florida  12000000.0</span></span><br><span class="line"><span class="string">313            Kris Humphries           Atlanta Hawks    43.0       PF  31.0    6-9   235.0              Minnesota   1000000.0</span></span><br><span class="line"><span class="string">314               Kyle Korver           Atlanta Hawks    26.0       SG  35.0    6-7   212.0              Creighton   5746479.0</span></span><br><span class="line"><span class="string">315              Paul Millsap           Atlanta Hawks     4.0       PF  31.0    6-8   246.0         Louisiana Tech  18671659.0</span></span><br><span class="line"><span class="string">316              Mike Muscala           Atlanta Hawks    31.0       PF  24.0   6-11   240.0               Bucknell    947276.0</span></span><br><span class="line"><span class="string">317           Lamar Patterson           Atlanta Hawks    13.0       SG  24.0    6-5   225.0             Pittsburgh    525093.0</span></span><br><span class="line"><span class="string">318           Dennis Schroder           Atlanta Hawks    17.0       PG  22.0    6-1   172.0                    NaN   1763400.0</span></span><br><span class="line"><span class="string">319                Mike Scott           Atlanta Hawks    32.0       PF  27.0    6-8   237.0               Virginia   3333333.0</span></span><br><span class="line"><span class="string">320           Thabo Sefolosha           Atlanta Hawks    25.0       SF  32.0    6-7   220.0                    NaN   4000000.0</span></span><br><span class="line"><span class="string">321            Tiago Splitter           Atlanta Hawks    11.0        C  31.0   6-11   245.0                    NaN   9756250.0</span></span><br><span class="line"><span class="string">322            Walter Tavares           Atlanta Hawks    22.0        C  24.0    7-3   260.0                    NaN   1000000.0</span></span><br><span class="line"><span class="string">323               Jeff Teague           Atlanta Hawks     0.0       PG  27.0    6-2   186.0            Wake Forest   8000000.0</span></span><br><span class="line"><span class="string">324             Nicolas Batum       Charlotte Hornets     5.0       SG  27.0    6-8   200.0                    NaN  13125306.0</span></span><br><span class="line"><span class="string">325              Troy Daniels       Charlotte Hornets    30.0       SG  24.0    6-4   205.0  Virginia Commonwealth    947276.0</span></span><br><span class="line"><span class="string">326           Jorge Gutierrez       Charlotte Hornets    12.0       PG  27.0    6-3   189.0             California    189455.0</span></span><br><span class="line"><span class="string">327          Tyler Hansbrough       Charlotte Hornets    50.0       PF  30.0    6-9   250.0         North Carolina    947276.0</span></span><br><span class="line"><span class="string">328            Aaron Harrison       Charlotte Hornets     9.0       SG  21.0    6-6   210.0               Kentucky    525093.0</span></span><br><span class="line"><span class="string">329             Spencer Hawes       Charlotte Hornets     0.0       PF  28.0    7-1   245.0             Washington   6110034.0</span></span><br><span class="line"><span class="string">330              Al Jefferson       Charlotte Hornets    25.0        C  31.0   6-10   289.0                    NaN  13500000.0</span></span><br><span class="line"><span class="string">331        Frank Kaminsky III       Charlotte Hornets    44.0        C  23.0    7-0   240.0              Wisconsin   2612520.0</span></span><br><span class="line"><span class="string">332    Michael Kidd-Gilchrist       Charlotte Hornets    14.0       SF  22.0    6-7   232.0               Kentucky   6331404.0</span></span><br><span class="line"><span class="string">333               Jeremy Lamb       Charlotte Hornets     3.0       SG  24.0    6-5   185.0            Connecticut   3034356.0</span></span><br><span class="line"><span class="string">334              Courtney Lee       Charlotte Hornets     1.0       SG  30.0    6-5   200.0       Western Kentucky   5675000.0</span></span><br><span class="line"><span class="string">335                Jeremy Lin       Charlotte Hornets     7.0       PG  27.0    6-3   200.0                Harvard   2139000.0</span></span><br><span class="line"><span class="string">336              Kemba Walker       Charlotte Hornets    15.0       PG  26.0    6-1   184.0            Connecticut  12000000.0</span></span><br><span class="line"><span class="string">337           Marvin Williams       Charlotte Hornets     2.0       PF  29.0    6-9   237.0         North Carolina   7000000.0</span></span><br><span class="line"><span class="string">338               Cody Zeller       Charlotte Hornets    40.0        C  23.0    7-0   240.0                Indiana   4204200.0</span></span><br><span class="line"><span class="string">339                Chris Bosh              Miami Heat     1.0       PF  32.0   6-11   235.0           Georgia Tech  22192730.0</span></span><br><span class="line"><span class="string">340                 Luol Deng              Miami Heat     9.0       SF  31.0    6-9   220.0                   Duke  10151612.0</span></span><br><span class="line"><span class="string">341              Goran Dragic              Miami Heat     7.0       PG  30.0    6-3   190.0                    NaN  14783000.0</span></span><br><span class="line"><span class="string">342              Gerald Green              Miami Heat    14.0       SF  30.0    6-7   205.0                    NaN    947276.0</span></span><br><span class="line"><span class="string">343             Udonis Haslem              Miami Heat    40.0       PF  36.0    6-8   235.0                Florida   2854940.0</span></span><br><span class="line"><span class="string">344               Joe Johnson              Miami Heat     2.0       SF  34.0    6-7   240.0               Arkansas    261894.0</span></span><br><span class="line"><span class="string">345             Tyler Johnson              Miami Heat     8.0       SG  24.0    6-4   186.0           Fresno State    845059.0</span></span><br><span class="line"><span class="string">346            Josh McRoberts              Miami Heat     4.0       PF  29.0   6-10   240.0                   Duke   5543725.0</span></span><br><span class="line"><span class="string">347           Josh Richardson              Miami Heat     0.0       SG  22.0    6-6   200.0              Tennessee    525093.0</span></span><br><span class="line"><span class="string">348         Amar&#x27;e Stoudemire              Miami Heat     5.0       PF  33.0   6-10   245.0                    NaN    947276.0</span></span><br><span class="line"><span class="string">349               Dwyane Wade              Miami Heat     3.0       SG  34.0    6-4   220.0              Marquette  20000000.0</span></span><br><span class="line"><span class="string">350             Briante Weber              Miami Heat    12.0       PG  23.0    6-2   165.0  Virginia Commonwealth         NaN</span></span><br><span class="line"><span class="string">351          Hassan Whiteside              Miami Heat    21.0        C  26.0    7-0   265.0               Marshall    981348.0</span></span><br><span class="line"><span class="string">352           Justise Winslow              Miami Heat    20.0       SF  20.0    6-7   225.0                   Duke   2481720.0</span></span><br><span class="line"><span class="string">353             Dorell Wright              Miami Heat    11.0       SF  30.0    6-9   205.0                    NaN         NaN</span></span><br><span class="line"><span class="string">354            Dewayne Dedmon           Orlando Magic     3.0        C  26.0    7-0   245.0                    USC    947276.0</span></span><br><span class="line"><span class="string">355             Evan Fournier           Orlando Magic    10.0       SG  23.0    6-7   205.0                    NaN   2288205.0</span></span><br><span class="line"><span class="string">356              Aaron Gordon           Orlando Magic     0.0       PF  20.0    6-9   220.0                Arizona   4171680.0</span></span><br><span class="line"><span class="string">357             Mario Hezonja           Orlando Magic    23.0       SG  21.0    6-8   218.0                    NaN   3741480.0</span></span><br><span class="line"><span class="string">358            Ersan Ilyasova           Orlando Magic     7.0       PF  29.0   6-10   235.0                    NaN   7900000.0</span></span><br><span class="line"><span class="string">359          Brandon Jennings           Orlando Magic    55.0       PG  26.0    6-1   169.0                    NaN   8344497.0</span></span><br><span class="line"><span class="string">360              Devyn Marble           Orlando Magic    11.0       SF  23.0    6-6   200.0                   Iowa    845059.0</span></span><br><span class="line"><span class="string">361            Shabazz Napier           Orlando Magic    13.0       PG  24.0    6-1   175.0            Connecticut   1294440.0</span></span><br><span class="line"><span class="string">362          Andrew Nicholson           Orlando Magic    44.0       PF  26.0    6-9   250.0        St. Bonaventure   2380593.0</span></span><br><span class="line"><span class="string">363            Victor Oladipo           Orlando Magic     5.0       SG  24.0    6-4   210.0                Indiana   5192520.0</span></span><br><span class="line"><span class="string">364             Elfrid Payton           Orlando Magic     4.0       PG  22.0    6-4   185.0    Louisiana-Lafayette   2505720.0</span></span><br><span class="line"><span class="string">365               Jason Smith           Orlando Magic    14.0       PF  30.0    7-0   240.0         Colorado State   4300000.0</span></span><br><span class="line"><span class="string">366            Nikola Vucevic           Orlando Magic     9.0        C  25.0    7-0   260.0                    USC  11250000.0</span></span><br><span class="line"><span class="string">367               C.J. Watson           Orlando Magic    32.0       PG  32.0    6-2   175.0              Tennessee   5000000.0</span></span><br><span class="line"><span class="string">368             Alan Anderson      Washington Wizards     6.0       SG  33.0    6-6   220.0         Michigan State   4000000.0</span></span><br><span class="line"><span class="string">369              Bradley Beal      Washington Wizards     3.0       SG  22.0    6-5   207.0                Florida   5694674.0</span></span><br><span class="line"><span class="string">370              Jared Dudley      Washington Wizards     1.0       SF  30.0    6-7   225.0         Boston College   4375000.0</span></span><br><span class="line"><span class="string">371              Jarell Eddie      Washington Wizards     8.0       SG  24.0    6-7   218.0          Virginia Tech    561716.0</span></span><br><span class="line"><span class="string">372               Drew Gooden      Washington Wizards    90.0       PF  34.0   6-10   250.0                 Kansas   3300000.0</span></span><br><span class="line"><span class="string">373             Marcin Gortat      Washington Wizards    13.0        C  32.0   6-11   240.0                    NaN  11217391.0</span></span><br><span class="line"><span class="string">374                JJ Hickson      Washington Wizards    21.0        C  27.0    6-9   242.0   North Carolina State    273038.0</span></span><br><span class="line"><span class="string">375              Nene Hilario      Washington Wizards    42.0        C  33.0   6-11   250.0                    NaN  13000000.0</span></span><br><span class="line"><span class="string">376           Markieff Morris      Washington Wizards     5.0       PF  26.0   6-10   245.0                 Kansas   8000000.0</span></span><br><span class="line"><span class="string">377           Kelly Oubre Jr.      Washington Wizards    12.0       SF  20.0    6-7   205.0                 Kansas   1920240.0</span></span><br><span class="line"><span class="string">378           Otto Porter Jr.      Washington Wizards    22.0       SF  23.0    6-8   198.0             Georgetown   4662960.0</span></span><br><span class="line"><span class="string">379            Ramon Sessions      Washington Wizards     7.0       PG  30.0    6-3   190.0                 Nevada   2170465.0</span></span><br><span class="line"><span class="string">380            Garrett Temple      Washington Wizards    17.0       SG  30.0    6-6   195.0                    LSU   1100602.0</span></span><br><span class="line"><span class="string">381           Marcus Thornton      Washington Wizards    15.0       SF  29.0    6-4   205.0                    LSU    200600.0</span></span><br><span class="line"><span class="string">382                 John Wall      Washington Wizards     2.0       PG  25.0    6-4   195.0               Kentucky  15851950.0</span></span><br><span class="line"><span class="string">383            Darrell Arthur          Denver Nuggets     0.0       PF  28.0    6-9   235.0                 Kansas   2814000.0</span></span><br><span class="line"><span class="string">384             D.J. Augustin          Denver Nuggets    12.0       PG  28.0    6-0   183.0                  Texas   3000000.0</span></span><br><span class="line"><span class="string">385               Will Barton          Denver Nuggets     5.0       SF  25.0    6-6   175.0                Memphis   3533333.0</span></span><br><span class="line"><span class="string">386           Wilson Chandler          Denver Nuggets    21.0       SF  29.0    6-8   225.0                 DePaul  10449438.0</span></span><br><span class="line"><span class="string">387            Kenneth Faried          Denver Nuggets    35.0       PF  26.0    6-8   228.0         Morehead State  11235955.0</span></span><br><span class="line"><span class="string">388          Danilo Gallinari          Denver Nuggets     8.0       SF  27.0   6-10   225.0                    NaN  14000000.0</span></span><br><span class="line"><span class="string">389               Gary Harris          Denver Nuggets    14.0       SG  21.0    6-4   210.0         Michigan State   1584480.0</span></span><br><span class="line"><span class="string">390              Nikola Jokic          Denver Nuggets    15.0        C  21.0   6-10   250.0                    NaN   1300000.0</span></span><br><span class="line"><span class="string">391         Joffrey Lauvergne          Denver Nuggets    77.0        C  24.0   6-11   220.0                    NaN   1709719.0</span></span><br><span class="line"><span class="string">392               Mike Miller          Denver Nuggets     3.0       SG  36.0    6-8   218.0                Florida    947276.0</span></span><br><span class="line"><span class="string">393           Emmanuel Mudiay          Denver Nuggets     0.0       PG  20.0    6-5   200.0                    NaN   3102240.0</span></span><br><span class="line"><span class="string">394             Jameer Nelson          Denver Nuggets     1.0       PG  34.0    6-0   190.0         Saint Joseph&#x27;s   4345000.0</span></span><br><span class="line"><span class="string">395              Jusuf Nurkic          Denver Nuggets    23.0        C  21.0    7-0   280.0                    NaN   1842000.0</span></span><br><span class="line"><span class="string">396            JaKarr Sampson          Denver Nuggets     9.0       SG  23.0    6-9   214.0             St. John&#x27;s    258489.0</span></span><br><span class="line"><span class="string">397              Axel Toupane          Denver Nuggets     6.0       SG  23.0    6-7   210.0                    NaN         NaN</span></span><br><span class="line"><span class="string">398           Nemanja Bjelica  Minnesota Timberwolves    88.0       PF  28.0   6-10   240.0                    NaN   3950001.0</span></span><br><span class="line"><span class="string">399              Gorgui Dieng  Minnesota Timberwolves     5.0        C  26.0   6-11   241.0             Louisville   1474440.0</span></span><br><span class="line"><span class="string">400             Kevin Garnett  Minnesota Timberwolves    21.0       PF  40.0   6-11   240.0                    NaN   8500000.0</span></span><br><span class="line"><span class="string">401                Tyus Jones  Minnesota Timberwolves     1.0       PG  20.0    6-2   195.0                   Duke   1282080.0</span></span><br><span class="line"><span class="string">402               Zach LaVine  Minnesota Timberwolves     8.0       PG  21.0    6-5   189.0                   UCLA   2148360.0</span></span><br><span class="line"><span class="string">403          Shabazz Muhammad  Minnesota Timberwolves    15.0       SF  23.0    6-6   223.0                   UCLA   2056920.0</span></span><br><span class="line"><span class="string">404             Adreian Payne  Minnesota Timberwolves    33.0       PF  25.0   6-10   237.0         Michigan State   1938840.0</span></span><br><span class="line"><span class="string">405            Nikola Pekovic  Minnesota Timberwolves    14.0        C  30.0   6-11   307.0                    NaN  12100000.0</span></span><br><span class="line"><span class="string">406           Tayshaun Prince  Minnesota Timberwolves    12.0       SF  36.0    6-9   212.0               Kentucky    947276.0</span></span><br><span class="line"><span class="string">407               Ricky Rubio  Minnesota Timberwolves     9.0       PG  25.0    6-4   194.0                    NaN  12700000.0</span></span><br><span class="line"><span class="string">408              Damjan Rudez  Minnesota Timberwolves    10.0       SF  29.0    6-9   230.0                    NaN   1149500.0</span></span><br><span class="line"><span class="string">409                Greg Smith  Minnesota Timberwolves     4.0       PF  25.0   6-10   250.0           Fresno State         NaN</span></span><br><span class="line"><span class="string">410        Karl-Anthony Towns  Minnesota Timberwolves    32.0        C  20.0    7-0   244.0               Kentucky   5703600.0</span></span><br><span class="line"><span class="string">411            Andrew Wiggins  Minnesota Timberwolves    22.0       SG  21.0    6-8   199.0                 Kansas   5758680.0</span></span><br><span class="line"><span class="string">412              Steven Adams   Oklahoma City Thunder    12.0        C  22.0    7-0   255.0             Pittsburgh   2279040.0</span></span><br><span class="line"><span class="string">413             Nick Collison   Oklahoma City Thunder     4.0       PF  35.0   6-10   255.0                 Kansas   3750000.0</span></span><br><span class="line"><span class="string">414              Kevin Durant   Oklahoma City Thunder    35.0       SF  27.0    6-9   240.0                  Texas  20158622.0</span></span><br><span class="line"><span class="string">415                Randy Foye   Oklahoma City Thunder     6.0       SG  32.0    6-4   213.0              Villanova   3135000.0</span></span><br><span class="line"><span class="string">416              Josh Huestis   Oklahoma City Thunder    34.0       SF  24.0    6-7   230.0               Stanford   1140240.0</span></span><br><span class="line"><span class="string">417               Serge Ibaka   Oklahoma City Thunder     9.0       PF  26.0   6-10   245.0                    NaN  12250000.0</span></span><br><span class="line"><span class="string">418               Enes Kanter   Oklahoma City Thunder    11.0        C  24.0   6-11   245.0               Kentucky  16407500.0</span></span><br><span class="line"><span class="string">419              Mitch McGary   Oklahoma City Thunder    33.0       PF  24.0   6-10   255.0               Michigan   1463040.0</span></span><br><span class="line"><span class="string">420             Nazr Mohammed   Oklahoma City Thunder    13.0        C  38.0   6-10   250.0               Kentucky    222888.0</span></span><br><span class="line"><span class="string">421            Anthony Morrow   Oklahoma City Thunder     2.0       SG  30.0    6-5   210.0           Georgia Tech   3344000.0</span></span><br><span class="line"><span class="string">422             Cameron Payne   Oklahoma City Thunder    22.0       PG  21.0    6-3   185.0           Murray State   2021520.0</span></span><br><span class="line"><span class="string">423            Andre Roberson   Oklahoma City Thunder    21.0       SG  24.0    6-7   210.0               Colorado   1210800.0</span></span><br><span class="line"><span class="string">424              Kyle Singler   Oklahoma City Thunder     5.0       SF  28.0    6-8   228.0                   Duke   4500000.0</span></span><br><span class="line"><span class="string">425              Dion Waiters   Oklahoma City Thunder     3.0       SG  24.0    6-4   220.0               Syracuse   5138430.0</span></span><br><span class="line"><span class="string">426         Russell Westbrook   Oklahoma City Thunder     0.0       PG  27.0    6-3   200.0                   UCLA  16744218.0</span></span><br><span class="line"><span class="string">427           Cliff Alexander  Portland Trail Blazers    34.0       PF  20.0    6-8   240.0                 Kansas    525093.0</span></span><br><span class="line"><span class="string">428           Al-Farouq Aminu  Portland Trail Blazers     8.0       SF  25.0    6-9   215.0            Wake Forest   8042895.0</span></span><br><span class="line"><span class="string">429           Pat Connaughton  Portland Trail Blazers     5.0       SG  23.0    6-5   206.0             Notre Dame    625093.0</span></span><br><span class="line"><span class="string">430              Allen Crabbe  Portland Trail Blazers    23.0       SG  24.0    6-6   210.0             California    947276.0</span></span><br><span class="line"><span class="string">431                  Ed Davis  Portland Trail Blazers    17.0        C  27.0   6-10   240.0         North Carolina   6980802.0</span></span><br><span class="line"><span class="string">432          Maurice Harkless  Portland Trail Blazers     4.0       SF  23.0    6-9   215.0             St. John&#x27;s   2894059.0</span></span><br><span class="line"><span class="string">433          Gerald Henderson  Portland Trail Blazers     9.0       SG  28.0    6-5   215.0                   Duke   6000000.0</span></span><br><span class="line"><span class="string">434               Chris Kaman  Portland Trail Blazers    35.0        C  34.0    7-0   265.0       Central Michigan   5016000.0</span></span><br><span class="line"><span class="string">435            Meyers Leonard  Portland Trail Blazers    11.0       PF  24.0    7-1   245.0               Illinois   3075880.0</span></span><br><span class="line"><span class="string">436            Damian Lillard  Portland Trail Blazers     0.0       PG  25.0    6-3   195.0            Weber State   4236287.0</span></span><br><span class="line"><span class="string">437             C.J. McCollum  Portland Trail Blazers     3.0       SG  24.0    6-4   200.0                 Lehigh   2525160.0</span></span><br><span class="line"><span class="string">438              Luis Montero  Portland Trail Blazers    44.0       SG  23.0    6-7   185.0         Westchester CC    525093.0</span></span><br><span class="line"><span class="string">439             Mason Plumlee  Portland Trail Blazers    24.0        C  26.0   6-11   235.0                   Duke   1415520.0</span></span><br><span class="line"><span class="string">440             Brian Roberts  Portland Trail Blazers     2.0       PG  30.0    6-1   173.0                 Dayton   2854940.0</span></span><br><span class="line"><span class="string">441               Noah Vonleh  Portland Trail Blazers    21.0       PF  20.0    6-9   240.0                Indiana   2637720.0</span></span><br><span class="line"><span class="string">442             Trevor Booker               Utah Jazz    33.0       PF  28.0    6-8   228.0                Clemson   4775000.0</span></span><br><span class="line"><span class="string">443                Trey Burke               Utah Jazz     3.0       PG  23.0    6-1   191.0               Michigan   2658240.0</span></span><br><span class="line"><span class="string">444                Alec Burks               Utah Jazz    10.0       SG  24.0    6-6   214.0               Colorado   9463484.0</span></span><br><span class="line"><span class="string">445                Dante Exum               Utah Jazz    11.0       PG  20.0    6-6   190.0                    NaN   3777720.0</span></span><br><span class="line"><span class="string">446            Derrick Favors               Utah Jazz    15.0       PF  24.0   6-10   265.0           Georgia Tech  12000000.0</span></span><br><span class="line"><span class="string">447               Rudy Gobert               Utah Jazz    27.0        C  23.0    7-1   245.0                    NaN   1175880.0</span></span><br><span class="line"><span class="string">448            Gordon Hayward               Utah Jazz    20.0       SF  26.0    6-8   226.0                 Butler  15409570.0</span></span><br><span class="line"><span class="string">449               Rodney Hood               Utah Jazz     5.0       SG  23.0    6-8   206.0                   Duke   1348440.0</span></span><br><span class="line"><span class="string">450                Joe Ingles               Utah Jazz     2.0       SF  28.0    6-8   226.0                    NaN   2050000.0</span></span><br><span class="line"><span class="string">451             Chris Johnson               Utah Jazz    23.0       SF  26.0    6-6   206.0                 Dayton    981348.0</span></span><br><span class="line"><span class="string">452                Trey Lyles               Utah Jazz    41.0       PF  20.0   6-10   234.0               Kentucky   2239800.0</span></span><br><span class="line"><span class="string">453              Shelvin Mack               Utah Jazz     8.0       PG  26.0    6-3   203.0                 Butler   2433333.0</span></span><br><span class="line"><span class="string">454                 Raul Neto               Utah Jazz    25.0       PG  24.0    6-1   179.0                    NaN    900000.0</span></span><br><span class="line"><span class="string">455              Tibor Pleiss               Utah Jazz    21.0        C  26.0    7-3   256.0                    NaN   2900000.0</span></span><br><span class="line"><span class="string">456               Jeff Withey               Utah Jazz    24.0        C  26.0    7-0   231.0                 Kansas    947276.0</span></span><br><span class="line"><span class="string">457                       NaN                     NaN     NaN      NaN   NaN    NaN     NaN                    NaN         NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">##################傻仔，读出来的是</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df.to_string()))</span><br><span class="line"><span class="comment">#&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df))  <span class="comment">##############这里的类型肯定是DataFrame啊，df.to_string()返回str型，但是又不会改变df。。。</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.index)</span><br><span class="line"><span class="comment">#RangeIndex(start=0, stop=458, step=1)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df.index))</span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.indexes.range.RangeIndex&#x27;&gt;</span></span><br><span class="line">length = df.index</span><br><span class="line"><span class="built_in">print</span>(length) <span class="comment">#列表求长度也是这样子求哦。</span></span><br><span class="line"><span class="comment"># 458</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">range</span>(<span class="number">5</span>)))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">range(0, 5)</span></span><br><span class="line"><span class="string">&lt;class &#x27;range&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义新索引：</span></span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">459</span>):</span><br><span class="line">    a.append(i)</span><br><span class="line">df.index = a  <span class="comment">#改动索引哈！！！</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">              Name            Team  ...            College     Salary</span></span><br><span class="line"><span class="string">1    Avery Bradley  Boston Celtics  ...              Texas  7730337.0</span></span><br><span class="line"><span class="string">2      Jae Crowder  Boston Celtics  ...          Marquette  6796117.0</span></span><br><span class="line"><span class="string">3     John Holland  Boston Celtics  ...  Boston University        NaN</span></span><br><span class="line"><span class="string">4      R.J. Hunter  Boston Celtics  ...      Georgia State  1148640.0</span></span><br><span class="line"><span class="string">5    Jonas Jerebko  Boston Celtics  ...                NaN  5000000.0</span></span><br><span class="line"><span class="string">..             ...             ...  ...                ...        ...</span></span><br><span class="line"><span class="string">454   Shelvin Mack       Utah Jazz  ...             Butler  2433333.0</span></span><br><span class="line"><span class="string">455      Raul Neto       Utah Jazz  ...                NaN   900000.0</span></span><br><span class="line"><span class="string">456   Tibor Pleiss       Utah Jazz  ...                NaN  2900000.0</span></span><br><span class="line"><span class="string">457    Jeff Withey       Utah Jazz  ...             Kansas   947276.0</span></span><br><span class="line"><span class="string">458            NaN             NaN  ...                NaN        NaN</span></span><br><span class="line"><span class="string">[458 rows x 9 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################保存为 csv文件： 从字典转为 DataFrame 再转为 csv文件：</span></span><br><span class="line">name = [<span class="string">&#x27;google&#x27;</span>,<span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;taobao&#x27;</span>,<span class="string">&#x27;wiki&#x27;</span>]</span><br><span class="line">site = [<span class="string">&#x27;www.google.com&#x27;</span>,<span class="string">&#x27;www.runoob.com&#x27;</span>,<span class="string">&#x27;www.taobao.com&#x27;</span>,<span class="string">&#x27;www.wikipedia.org&#x27;</span>]</span><br><span class="line">age = [<span class="number">90</span>,<span class="number">40</span>,<span class="number">80</span>,<span class="number">89</span>]</span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;name&#x27;</span>:name,<span class="string">&#x27;site&#x27;</span>:site,<span class="string">&#x27;age&#x27;</span>:age&#125;</span><br><span class="line">df = pd.DataFrame(<span class="built_in">dict</span>)</span><br><span class="line">df.to_csv(<span class="string">&#x27;site.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     name               site  age</span></span><br><span class="line"><span class="string">0  google     www.google.com   90</span></span><br><span class="line"><span class="string">1  runoob     www.runoob.com   40</span></span><br><span class="line"><span class="string">2  taobao     www.taobao.com   80</span></span><br><span class="line"><span class="string">3    wiki  www.wikipedia.org   89</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;nba.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.head())  <span class="comment">#######默认显示前5行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            Name            Team  Number  ... Weight            College     Salary</span></span><br><span class="line"><span class="string">0  Avery Bradley  Boston Celtics     0.0  ...  180.0              Texas  7730337.0</span></span><br><span class="line"><span class="string">1    Jae Crowder  Boston Celtics    99.0  ...  235.0          Marquette  6796117.0</span></span><br><span class="line"><span class="string">2   John Holland  Boston Celtics    30.0  ...  205.0  Boston University        NaN</span></span><br><span class="line"><span class="string">3    R.J. Hunter  Boston Celtics    28.0  ...  185.0      Georgia State  1148640.0</span></span><br><span class="line"><span class="string">4  Jonas Jerebko  Boston Celtics     8.0  ...  231.0                NaN  5000000.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[5 rows x 9 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.head(<span class="number">10</span>)) <span class="comment">######显示前n==10行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            Name            Team  Number  ... Weight            College      Salary</span></span><br><span class="line"><span class="string">0  Avery Bradley  Boston Celtics     0.0  ...  180.0              Texas   7730337.0</span></span><br><span class="line"><span class="string">1    Jae Crowder  Boston Celtics    99.0  ...  235.0          Marquette   6796117.0</span></span><br><span class="line"><span class="string">2   John Holland  Boston Celtics    30.0  ...  205.0  Boston University         NaN</span></span><br><span class="line"><span class="string">3    R.J. Hunter  Boston Celtics    28.0  ...  185.0      Georgia State   1148640.0</span></span><br><span class="line"><span class="string">4  Jonas Jerebko  Boston Celtics     8.0  ...  231.0                NaN   5000000.0</span></span><br><span class="line"><span class="string">5   Amir Johnson  Boston Celtics    90.0  ...  240.0                NaN  12000000.0</span></span><br><span class="line"><span class="string">6  Jordan Mickey  Boston Celtics    55.0  ...  235.0                LSU   1170960.0</span></span><br><span class="line"><span class="string">7   Kelly Olynyk  Boston Celtics    41.0  ...  238.0            Gonzaga   2165160.0</span></span><br><span class="line"><span class="string">8   Terry Rozier  Boston Celtics    12.0  ...  190.0         Louisville   1824360.0</span></span><br><span class="line"><span class="string">9   Marcus Smart  Boston Celtics    36.0  ...  220.0     Oklahoma State   3431040.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[10 rows x 9 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.tail())<span class="comment">######默认显示最末尾5行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">             Name       Team  Number Position  ...  Height Weight  College     Salary</span></span><br><span class="line"><span class="string">453  Shelvin Mack  Utah Jazz     8.0       PG  ...     6-3  203.0   Butler  2433333.0</span></span><br><span class="line"><span class="string">454     Raul Neto  Utah Jazz    25.0       PG  ...     6-1  179.0      NaN   900000.0</span></span><br><span class="line"><span class="string">455  Tibor Pleiss  Utah Jazz    21.0        C  ...     7-3  256.0      NaN  2900000.0</span></span><br><span class="line"><span class="string">456   Jeff Withey  Utah Jazz    24.0        C  ...     7-0  231.0   Kansas   947276.0</span></span><br><span class="line"><span class="string">457           NaN        NaN     NaN      NaN  ...     NaN    NaN      NaN        NaN</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[5 rows x 9 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">10</span>))<span class="comment">######显示末尾n==10行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">               Name       Team  Number  ... Weight   College      Salary</span></span><br><span class="line"><span class="string">448  Gordon Hayward  Utah Jazz    20.0  ...  226.0    Butler  15409570.0</span></span><br><span class="line"><span class="string">449     Rodney Hood  Utah Jazz     5.0  ...  206.0      Duke   1348440.0</span></span><br><span class="line"><span class="string">450      Joe Ingles  Utah Jazz     2.0  ...  226.0       NaN   2050000.0</span></span><br><span class="line"><span class="string">451   Chris Johnson  Utah Jazz    23.0  ...  206.0    Dayton    981348.0</span></span><br><span class="line"><span class="string">452      Trey Lyles  Utah Jazz    41.0  ...  234.0  Kentucky   2239800.0</span></span><br><span class="line"><span class="string">453    Shelvin Mack  Utah Jazz     8.0  ...  203.0    Butler   2433333.0</span></span><br><span class="line"><span class="string">454       Raul Neto  Utah Jazz    25.0  ...  179.0       NaN    900000.0</span></span><br><span class="line"><span class="string">455    Tibor Pleiss  Utah Jazz    21.0  ...  256.0       NaN   2900000.0</span></span><br><span class="line"><span class="string">456     Jeff Withey  Utah Jazz    24.0  ...  231.0    Kansas    947276.0</span></span><br><span class="line"><span class="string">457             NaN        NaN     NaN  ...    NaN       NaN         NaN</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[10 rows x 9 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.info()) <span class="comment">######显示出来具体信息。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;   ###########数据类型</span></span><br><span class="line"><span class="string">RangeIndex: 458 entries, 0 to 457       ################行数以及索引号</span></span><br><span class="line"><span class="string">Data columns (total 9 columns):         #########列数据统计，以及列数。</span></span><br><span class="line"><span class="string"> #   Column    Non-Null Count  Dtype  </span></span><br><span class="line"><span class="string">---  ------    --------------  -----  </span></span><br><span class="line"><span class="string"> 0   Name      457 non-null    object </span></span><br><span class="line"><span class="string"> 1   Team      457 non-null    object </span></span><br><span class="line"><span class="string"> 2   Number    457 non-null    float64</span></span><br><span class="line"><span class="string"> 3   Position  457 non-null    object </span></span><br><span class="line"><span class="string"> 4   Age       457 non-null    float64</span></span><br><span class="line"><span class="string"> 5   Height    457 non-null    object </span></span><br><span class="line"><span class="string"> 6   Weight    457 non-null    float64</span></span><br><span class="line"><span class="string"> 7   College   373 non-null    object </span></span><br><span class="line"><span class="string"> 8   Salary    446 non-null    float64      ##############列名，对一个的非空值数量，列数据类型！！</span></span><br><span class="line"><span class="string">dtypes: float64(4), object(5)               ##############每种数据类型的列数量。</span></span><br><span class="line"><span class="string">memory usage: 32.3+ KB</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas-DateFrame</title>
    <link href="http://example.com/2022/06/01/pandas-DateFrame/"/>
    <id>http://example.com/2022/06/01/pandas-DateFrame/</id>
    <published>2022-06-01T08:50:05.000Z</published>
    <updated>2022-06-01T08:58:32.597Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DataFrame 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值）。</span></span><br><span class="line"><span class="string">DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共同用一个索引）。</span></span><br><span class="line"><span class="string">Pandas DataFrame 是一个二维的数组结构，类似二维数组。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DataFrame 构造方法如下：</span></span><br><span class="line"><span class="string">pandas.DataFrame( data, index, columns, dtype, copy)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参数说明：(与Series相比 少了 name参数，多了列名参数：columns。</span></span><br><span class="line"><span class="string">    data：一组数据(ndarray、series, map, lists, dict 等类型)。</span></span><br><span class="line"><span class="string">    index：索引值，或者可以称为行标签。</span></span><br><span class="line"><span class="string">    columns：列标签，默认为 RangeIndex (0, 1, 2, …, n) 。</span></span><br><span class="line"><span class="string">    dtype：数据类型。</span></span><br><span class="line"><span class="string">    copy：拷贝数据，默认为 False。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span>  pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################第一种方式构造DataFrame</span></span><br><span class="line"><span class="comment"># 类似二维数组，二维列表嵌套构成数据，列表里面的每一列表表示表格中的一行的数据。</span></span><br><span class="line"><span class="comment"># 这种方法在实例化时要指名参数：column。</span></span><br><span class="line">data = [[<span class="string">&#x27;google&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;runoob&#x27;</span>,<span class="number">12</span>],[<span class="string">&#x27;wiki&#x27;</span>,<span class="number">13</span>]]</span><br><span class="line">df = pd.DataFrame(data,columns=[<span class="string">&#x27;Site&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>],dtype=<span class="built_in">float</span>) <span class="comment">#这里还指名数据类型，因为不指明的话应该默认识别出int。</span></span><br><span class="line">                                            <span class="comment">#然后 columns 参数也是一个list性。</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     Site   Age</span></span><br><span class="line"><span class="string">0  google  10.0</span></span><br><span class="line"><span class="string">1  runoob  12.0</span></span><br><span class="line"><span class="string">2    wiki  13.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.dtypes) <span class="comment">##########输出每一列的数据类型！！！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Site     object</span></span><br><span class="line"><span class="string">Age     float64</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">df.columns = [<span class="number">1</span>,<span class="number">2</span>] <span class="comment">###当然，列名也可以是整形数字。</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        1     2</span></span><br><span class="line"><span class="string">0  google  10.0</span></span><br><span class="line"><span class="string">1  runoob  12.0</span></span><br><span class="line"><span class="string">2    wiki  13.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################第二种种方式构造DataFrame</span></span><br><span class="line"><span class="comment"># 使用 ndarrays 创建</span></span><br><span class="line"><span class="comment"># ndarray 的长度必须相同， 如果传递了 index，则索引的长度应等于数组的长度。</span></span><br><span class="line"><span class="comment"># 如果没有传递索引，则默认情况下，索引将是range(n)，其中n是数组长度。</span></span><br><span class="line">data = &#123;<span class="string">&#x27;site&#x27;</span>:[<span class="string">&#x27;google&#x27;</span>,<span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;wiki&#x27;</span>],<span class="string">&#x27;Age&#x27;</span>:[<span class="number">10</span>,<span class="number">12</span>,<span class="number">13</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     site  Age</span></span><br><span class="line"><span class="string">0  google   10</span></span><br><span class="line"><span class="string">1  runoob   12</span></span><br><span class="line"><span class="string">2    wiki   13</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################第三种种方式构造DataFrame############类似于json字符串形式。</span></span><br><span class="line"><span class="comment"># 字典（key/value），其中字典的 key 为列名:</span></span><br><span class="line">data = [&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;,&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">6</span>&#125;]</span><br><span class="line"><span class="built_in">print</span>(pd.DataFrame(data,dtype=<span class="built_in">float</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     a    b    c</span></span><br><span class="line"><span class="string">0  1.0  2.0  3.0</span></span><br><span class="line"><span class="string">1  4.0  NaN  6.0      ##############没有的值表示为NaN</span></span><br><span class="line"><span class="string">                                    #注意：NaN跟None不是一个概念。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">##############################################################################数据检索：</span></span><br><span class="line"><span class="comment"># 1 行</span></span><br><span class="line"><span class="comment">#############使用 loc 属性返回指定行的数据</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="number">0</span>])  <span class="comment">#注意，这里时用[] 而不是（）</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="number">1</span>])   <span class="comment">### 返回结果其实就是一个 Pandas Series 数据。</span></span><br><span class="line">                  <span class="comment">### df的列名变成了索引，然后df的索引为name，</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">site    google</span></span><br><span class="line"><span class="string">Age         10</span></span><br><span class="line"><span class="string">Name: 0, dtype: object</span></span><br><span class="line"><span class="string">site    runoob</span></span><br><span class="line"><span class="string">Age         12</span></span><br><span class="line"><span class="string">Name: 1, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################################### 返回多行数据，使用 [[ ... ]] 格式，... 为各行的索引，以逗号隔开：</span></span><br><span class="line"><span class="comment"># 注意：返回结果其实就是一个 Pandas DataFrame 数据。有索引，有列名！！！</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;calories&quot;</span>: [<span class="number">420</span>, <span class="number">380</span>, <span class="number">390</span>],</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回第一行和第三行</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[[<span class="number">0</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   calories  duration</span></span><br><span class="line"><span class="string">0       420        50</span></span><br><span class="line"><span class="string">2       390        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################指定索引值。</span></span><br><span class="line">df = pd.DataFrame(data, index = [<span class="string">&quot;day1&quot;</span>, <span class="string">&quot;day2&quot;</span>, <span class="string">&quot;day3&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day2       380        40</span></span><br><span class="line"><span class="string">day3       390        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 指定索引访问数据。</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;day2&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">calories    380</span></span><br><span class="line"><span class="string">duration     40</span></span><br><span class="line"><span class="string">Name: day2, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="number">0</span>:<span class="number">2</span>]) <span class="comment">#查看0,1 两行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day2       380        40</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#等价于：</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;day1&#x27;</span>:<span class="string">&#x27;day2&#x27;</span>])  <span class="comment">##包括 &#x27;day2&#x27;这一行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day2       380        40</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 列</span></span><br><span class="line"><span class="comment">#查看有什么列。</span></span><br><span class="line"><span class="built_in">print</span>(df.columns)</span><br><span class="line"><span class="comment">#Index([&#x27;calories&#x27;, &#x27;duration&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class="line"><span class="comment">#第二个列名打印</span></span><br><span class="line"><span class="built_in">print</span>(df.columns[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># duration</span></span><br><span class="line"><span class="built_in">print</span>(df.calories) <span class="comment"># 打印第二列</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">day1    420</span></span><br><span class="line"><span class="string">day2    380</span></span><br><span class="line"><span class="string">day3    390</span></span><br><span class="line"><span class="string">Name: calories, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#等价于：</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;calories&#x27;</span>])</span><br><span class="line"><span class="comment">#还等价于：</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[:,<span class="string">&#x27;calories&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[:,[<span class="string">&#x27;calories&#x27;</span>,<span class="string">&#x27;duration&#x27;</span>]]) <span class="comment">#输出两列。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day2       380        40</span></span><br><span class="line"><span class="string">day3       390        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[[<span class="string">&#x27;day1&#x27;</span>,<span class="string">&#x27;day3&#x27;</span>],[<span class="string">&#x27;calories&#x27;</span>,<span class="string">&#x27;duration&#x27;</span>]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day3       390        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;day1&#x27;</span>:<span class="string">&#x27;day3&#x27;</span>,[<span class="string">&#x27;calories&#x27;</span>,<span class="string">&#x27;duration&#x27;</span>]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day2       380        40</span></span><br><span class="line"><span class="string">day3       390        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># print(df.loc[1,1])###报错。</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">1</span>,<span class="number">1</span>])  <span class="comment">#########获取到某个值###</span></span><br><span class="line"><span class="comment">#40</span></span><br><span class="line"><span class="comment"># print(df.iloc[&#x27;day1&#x27;,&#x27;duration&#x27;])  报错。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&#x27;duration&#x27;</span>]&gt;<span class="number">45</span>]) <span class="comment"># 返回duration这一列大于45的数据所在的行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df&gt;<span class="number">45</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1      True      True</span></span><br><span class="line"><span class="string">day2      True     False</span></span><br><span class="line"><span class="string">day3      True     False</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df[df&gt;<span class="number">45</span>])  <span class="comment">##每一个元素进行判断，不符合的就屏蔽（用NaN代替）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420      50.0</span></span><br><span class="line"><span class="string">day2       380       NaN</span></span><br><span class="line"><span class="string">day3       390       NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&#x27;calories&#x27;</span>].isin([<span class="number">420</span>,<span class="number">390</span>])])<span class="comment">#######查找某一列中存在的某些元素，存在的话就返回其中的行。isin里面的列表元素似乎不可以用切片。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day3       390        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################loc函数利用了很多加速方法，比for循环，列表等其他方式访问数据要快得多！！！</span></span><br><span class="line"><span class="comment">#还有pd.iloc 跟pd.loc 方法差不多，都是检索数据，一般利用切片技术。如df.iloc[0:2,0:3] 再如：df.iloc[[0,1],[0,1,2]].</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问索引：</span></span><br><span class="line"><span class="built_in">print</span>(df.index)</span><br><span class="line"><span class="comment"># Index([&#x27;day1&#x27;, &#x27;day2&#x27;, &#x27;day3&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(df.index[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#day1</span></span><br><span class="line"><span class="comment">#########高度总结就是 DataFrame是一个表格，有索引有列名（行跟号）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.describe())  <span class="comment">###对数据作统计，计算每一列的各种指标：均值，中位数等等。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">         calories  duration</span></span><br><span class="line"><span class="string">count    3.000000       3.0</span></span><br><span class="line"><span class="string">mean   396.666667      45.0</span></span><br><span class="line"><span class="string">std     20.816660       5.0</span></span><br><span class="line"><span class="string">min    380.000000      40.0</span></span><br><span class="line"><span class="string">25%    385.000000      42.5</span></span><br><span class="line"><span class="string">50%    390.000000      45.0</span></span><br><span class="line"><span class="string">75%    405.000000      47.5</span></span><br><span class="line"><span class="string">max    420.000000      50.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.T)  <span class="comment"># 表格转置。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          day1  day2  day3</span></span><br><span class="line"><span class="string">calories   420   380   390</span></span><br><span class="line"><span class="string">duration    50    40    45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas-Series</title>
    <link href="http://example.com/2022/06/01/pandas-Series/"/>
    <id>http://example.com/2022/06/01/pandas-Series/</id>
    <published>2022-06-01T08:49:53.000Z</published>
    <updated>2022-06-01T08:58:16.702Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Pandas 数据结构 - Series</span></span><br><span class="line"><span class="string">Pandas Series 类似表格中的一个列（column），类似于一维数组，可以保存任何数据类型。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">函数如下：</span></span><br><span class="line"><span class="string">pandas.Series( data, index, dtype, name, copy)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参数说明：</span></span><br><span class="line"><span class="string">    data：一组数据(ndarray 类型)。</span></span><br><span class="line"><span class="string">    index：数据索引标签，如果不指定，默认从 0 开始。</span></span><br><span class="line"><span class="string">    dtype：数据类型，默认会自己判断。</span></span><br><span class="line"><span class="string">    name：设置名称。</span></span><br><span class="line"><span class="string">    copy：拷贝数据，默认为 False。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单实例：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1新建列</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2讲列作为数据，建立pd.Series实例。</span></span><br><span class="line">myvar = pd.Series(a,name = <span class="string">&#x27;myvar&#x27;</span>) <span class="comment"># 还指定名称。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    1</span></span><br><span class="line"><span class="string">1    2</span></span><br><span class="line"><span class="string">2    3</span></span><br><span class="line"><span class="string">Name: myvar, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 根据索引读取数据：</span></span><br><span class="line"><span class="built_in">print</span>(myvar[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 指定索引值：列数据+列索引组成 Series实例。</span></span><br><span class="line"></span><br><span class="line">sites = [<span class="string">&#x27;google&#x27;</span>,<span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;wiki&#x27;</span>]</span><br><span class="line">myvar1 = pd.Series(sites,index=[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>],name=<span class="string">&#x27;myvar1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(myvar1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">x    google</span></span><br><span class="line"><span class="string">y    runoob</span></span><br><span class="line"><span class="string">z      wiki</span></span><br><span class="line"><span class="string">Name: myvar1, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在原有Series基础上 改动索引      这个是肯定可以的，只要明白python语法以及Series对象，就知道怎么回事！！！</span></span><br><span class="line">myvar1.index = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(myvar1.index)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Index([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    google</span></span><br><span class="line"><span class="string">b    runoob</span></span><br><span class="line"><span class="string">c      wiki</span></span><br><span class="line"><span class="string">Name: myvar1, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar1[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(myvar1[<span class="string">&quot;a&quot;</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">google</span></span><br><span class="line"><span class="string">google</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################################还可以用key/value 对象，类似字典来创建 Series</span></span><br><span class="line">sites = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;google&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;runoob&#x27;</span>,<span class="number">3</span>:<span class="string">&#x27;wiki&#x27;</span>&#125;</span><br><span class="line">myvar2 = pd.Series(sites,name = <span class="string">&quot;myvar2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(myvar2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    google   ############可知，索引是自己随便定的。</span></span><br><span class="line"><span class="string">2    runoob</span></span><br><span class="line"><span class="string">3      wiki</span></span><br><span class="line"><span class="string">Name: myvar2, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#只需要字典中的一部分数据，只需要指定需要数据的索引即可</span></span><br><span class="line">myvar3 = pd.Series(sites,index=[<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>],name=<span class="string">&#x27;myvar3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(myvar3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    google</span></span><br><span class="line"><span class="string">3      wiki</span></span><br><span class="line"><span class="string">Name: myvar3, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####################注意，data（列表）里面的数据并不一定只有单一的类型</span></span><br><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;hhh&#x27;</span>]</span><br><span class="line">myvar4 = pd.Series(data,name = <span class="string">&#x27;myvar4&#x27;</span>) <span class="comment"># 还指定名称。</span></span><br><span class="line"><span class="built_in">print</span>(myvar4)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0      1</span></span><br><span class="line"><span class="string">1      2</span></span><br><span class="line"><span class="string">2    hhh</span></span><br><span class="line"><span class="string">Name: myvar4, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas-基本认识</title>
    <link href="http://example.com/2022/06/01/pandas-%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%86/"/>
    <id>http://example.com/2022/06/01/pandas-%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%86/</id>
    <published>2022-06-01T08:49:14.000Z</published>
    <updated>2022-06-01T08:57:08.410Z</updated>
    
    <content type="html"><![CDATA[<p>写完numpy，接着来写pandas啦</p><p>且看整个part的大致内容：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/numpy-pandas-matplotlib/3e52879a8c44fc4ece6b8db8fb5968d.png" alt="3e52879a8c44fc4ece6b8db8fb5968d"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装：pip install pandas</span></span><br><span class="line"><span class="comment"># 导入</span></span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="built_in">print</span>(pandas.__version__)</span><br><span class="line"><span class="comment"># 1.1.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="built_in">print</span>(pd.__version__)</span><br><span class="line"><span class="comment"># 1.1.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单实例：</span></span><br><span class="line">mydataset = &#123;</span><br><span class="line">    <span class="string">&#x27;site&#x27;</span>:[<span class="string">&#x27;Google&#x27;</span>,<span class="string">&quot;Runoob&quot;</span>,<span class="string">&quot;wiki&quot;</span>],</span><br><span class="line">    <span class="string">&#x27;number&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myvar = pd.DataFrame(mydataset)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br><span class="line"><span class="comment">#      site  number</span></span><br><span class="line"><span class="comment"># 0  Google       1</span></span><br><span class="line"><span class="comment"># 1  Runoob       2</span></span><br><span class="line"><span class="comment"># 2    wiki       3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(myvar))</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar.head())</span><br><span class="line"><span class="comment">#      site  number</span></span><br><span class="line"><span class="comment"># 0  Google       1</span></span><br><span class="line"><span class="comment"># 1  Runoob       2</span></span><br><span class="line"><span class="comment"># 2    wiki       3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar.columns)</span><br><span class="line"><span class="comment"># Index([&#x27;site&#x27;, &#x27;number&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(myvar.columns.values)</span><br><span class="line"><span class="comment"># [&#x27;site&#x27; &#x27;number&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写完numpy，接着来写pandas啦&lt;/p&gt;
&lt;p&gt;且看整个part的大致内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/numpy-pandas-matplotlib/3e52879a8c44</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>Rabbit整合SpringBoot以及整合邮件发送</title>
    <link href="http://example.com/2022/05/31/Rabbit%E6%95%B4%E5%90%88SpringBoot%E4%BB%A5%E5%8F%8A%E6%95%B4%E5%90%88%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <id>http://example.com/2022/05/31/Rabbit%E6%95%B4%E5%90%88SpringBoot%E4%BB%A5%E5%8F%8A%E6%95%B4%E5%90%88%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</id>
    <published>2022-05-31T03:34:36.000Z</published>
    <updated>2022-05-31T03:57:32.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合邮件发送"><a href="#SpringBoot整合邮件发送" class="headerlink" title="SpringBoot整合邮件发送"></a>SpringBoot整合邮件发送</h1><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20210708162108584.png" alt="image-20210708162108584"></p><p>说明：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">最下面的几个箭头表示备份，</span></span><br><span class="line"><span class="attr">2</span> <span class="string">最上面的双向箭头中的向下箭头表示刷新，</span></span><br><span class="line"><span class="attr">强制查看有没有接受到邮箱，</span></span><br><span class="line"><span class="attr">自己不手动刷新，那么就是一定是刷新查看有没有邮箱到达</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-完成邮件的投递"><a href="#SpringBoot-完成邮件的投递" class="headerlink" title="SpringBoot 完成邮件的投递"></a>SpringBoot 完成邮件的投递</h2><p>准备工作： 登录自己的开通邮件的 以163为例      </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574189645.png" alt="1600574189645"> </p><p>生成自己唯一的授权码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574220514.png" alt="1600574220514"> </p><ul><li>基于springboot环境导入email发送依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springboot邮件发送--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置邮件发送参数  yaml文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">##    邮件发送配置</span><br><span class="line">#  spring.mail.username=fanqixxxx@163.com</span><br><span class="line">#  #spring.mail.password   填写授权码</span><br><span class="line">#  spring.mail.password=xxxxxxx</span><br><span class="line">#  #spring.mail.host   填写邮箱供应的SMTP地址</span><br><span class="line">#  spring.mail.host=smtp.163.com</span><br><span class="line">#  spring.mail.properties.mail.smtp.ssl.enable=true</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="comment"># 发送者的邮箱地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xsitheima163@163.com</span></span><br><span class="line">  <span class="comment"># 此密码并非登录的密码,而是使用java代码发送邮件时使用的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">AKELOGXEFRJZOAWU</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>编写测试类 完成邮件发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailSend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            message.setSubject(<span class="string">&quot;传智健康官方邮件&quot;</span>);</span><br><span class="line">            message.setText(<span class="string">&quot;你好，请保持好验证码：7788，打死都不能泄露给你的同桌&quot;</span>);</span><br><span class="line">            message.setTo(<span class="string">&quot;tps520tps@163.com&quot;</span>);</span><br><span class="line">            message.setFrom(<span class="string">&quot;tps520wx@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MailException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查收邮件：</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/08.rabbitMQ/resources/img/1600574300195.png" alt="1600574300195"> </p><p>邮件发送示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendEmailApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            message.setSubject(<span class="string">&quot;表白邮件&quot;</span>);</span><br><span class="line">            message.setText(<span class="string">&quot;rose 你好, 我想.....&quot;</span>);</span><br><span class="line">            message.setTo(<span class="string">&quot;xsitheima126@126.com&quot;</span>);</span><br><span class="line">            message.setFrom(<span class="string">&quot;xsitheima163@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">            System.out.println(<span class="string">&quot;========发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MailException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="预备账号"><a href="#预备账号" class="headerlink" title="预备账号"></a>预备账号</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xsitheima126@<span class="number">126.</span>com    a123456</span><br><span class="line">    授权码: YKJOGNHCCFDLIJKO</span><br><span class="line">xsitheima163@<span class="number">163.</span>com    a12345678</span><br><span class="line">授权码: AKELOGXEFRJZOAWU</span><br></pre></td></tr></table></figure><h1 id="SpringBoot整合RabbitMQ以及整合邮件发送"><a href="#SpringBoot整合RabbitMQ以及整合邮件发送" class="headerlink" title="SpringBoot整合RabbitMQ以及整合邮件发送"></a>SpringBoot整合RabbitMQ以及整合邮件发送</h1><p>整合描述：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span> <span class="string">boot 中生产者的controller类提供的 访问地址带的参数就是邮箱账号，</span></span><br><span class="line"><span class="meta">访问生产者的</span> <span class="string">spring boot controller 并且将邮箱账号作为消息，</span></span><br><span class="line"><span class="attr">消费者拿到的信息就是邮箱账号，</span></span><br><span class="line"><span class="meta">然后消费者使用163账号给接收到的邮箱账号</span> <span class="string">发送邮件！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ps：先启动消费者，然后再启动生产者，生产者生产10次邮箱信息，那么消费者发送十次邮箱。</span></span><br></pre></td></tr></table></figure><h3 id="1-消费者代码"><a href="#1-消费者代码" class="headerlink" title="1 消费者代码"></a>1 消费者代码</h3><h4 id="消费者配置文件："><a href="#消费者配置文件：" class="headerlink" title="消费者配置文件："></a>消费者配置文件：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="comment"># 发送者的邮箱地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xsitheima163@163.com</span></span><br><span class="line">  <span class="comment"># 此密码并非登录的密码,而是使用java代码发送邮件时使用的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">AKELOGXEFRJZOAWU</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="消费者pom-xml文件"><a href="#消费者pom-xml文件" class="headerlink" title="消费者pom.xml文件"></a>消费者pom.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--springboot邮件发送--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="消费者启动文件："><a href="#消费者启动文件：" class="headerlink" title="消费者启动文件："></a>消费者启动文件：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换器: 将对象转成json并存放到MQ中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="消费者监听生产者类："><a href="#消费者监听生产者类：" class="headerlink" title="消费者监听生产者类："></a>消费者监听生产者类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg : 参数类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;boot-queue&quot;)</span><span class="comment">//  注意只需要 队列名称一致即可！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String msg, Channel channel, Message message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//public void receive(Map msg, Channel channel, Message message) throws IOException &#123;</span></span><br><span class="line">        <span class="comment">//会话唯一ID</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息 &quot;</span> + msg);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;收到消息 &quot; + new String(message.getBody()));</span></span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;message:&quot; +message.toString());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// =====================发送邮件</span></span><br><span class="line">            <span class="comment">// 编写邮件信息</span></span><br><span class="line">            SimpleMailMessage emailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            <span class="comment">// 邮件主题</span></span><br><span class="line">            emailMessage.setSubject(<span class="string">&quot;下单通知&quot;</span>);</span><br><span class="line">            <span class="comment">// 邮件内容</span></span><br><span class="line">            emailMessage.setText(<span class="string">&quot;您的宝贝以发货&quot;</span>);</span><br><span class="line">            emailMessage.setTo(msg);</span><br><span class="line">            emailMessage.setFrom(<span class="string">&quot;xsitheima163@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(emailMessage);</span><br><span class="line">            System.out.println(<span class="string">&quot;========发送成功&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-生产者代码："><a href="#2-生产者代码：" class="headerlink" title="2 生产者代码："></a>2 生产者代码：</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">producer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br></pre></td></tr></table></figure><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换器: 将对象转成json并存放到MQ中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Controller类"><a href="#Controller类" class="headerlink" title="Controller类"></a>Controller类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// rabbit客户端对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send/&#123;msg&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable(&quot;msg&quot;)</span> String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 参数1: 队列名称,操作的队列必须实现存在</span></span><br><span class="line">        <span class="comment">// 参数2: 存放的消息信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;boot-queue&quot;</span>,msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot整合邮件发送&quot;&gt;&lt;a href=&quot;#SpringBoot整合邮件发送&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合邮件发送&quot;&gt;&lt;/a&gt;SpringBoot整合邮件发送&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img</summary>
      
    
    
    
    <category term="RabbitMQ" scheme="http://example.com/categories/RabbitMQ/"/>
    
    
    <category term="RabbitMQ" scheme="http://example.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ的下载与安装</title>
    <link href="http://example.com/2022/05/31/RabbitMQ%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2022/05/31/RabbitMQ%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/</id>
    <published>2022-05-31T03:28:20.000Z</published>
    <updated>2022-05-31T04:16:18.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ下载与安装"><a href="#RabbitMQ下载与安装" class="headerlink" title="RabbitMQ下载与安装"></a>RabbitMQ下载与安装</h1><h1 id="1-windows环境安装rabbitmq"><a href="#1-windows环境安装rabbitmq" class="headerlink" title="1 windows环境安装rabbitmq"></a>1 windows环境安装rabbitmq</h1><h2 id="一、下载安装软件"><a href="#一、下载安装软件" class="headerlink" title="一、下载安装软件"></a>一、下载安装软件</h2><p>官网下载地址：<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a></p><p>快速入门地址：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p><p>rabbit的安装依赖于erlang，所以得先安装erlang:</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/00.png"></p><h3 id="erlang安装"><a href="#erlang安装" class="headerlink" title="erlang安装"></a>erlang安装</h3><p><strong>erlang下载</strong>：<a href="https://www.erlang.org/downloads">https://www.erlang.org/downloads</a></p><p>可以直接拷贝《资料/otp_win64_23.0.exe》</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/01.png"></p><p>下载好的exe文件直接双击运行：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/04.png"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/05.png"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/06.png"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/07.png"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/08.png"></p><p>设置环境变量：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/10.png"></p><p>验证erlang环境：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/09.png"></p><h3 id="rabbit安装"><a href="#rabbit安装" class="headerlink" title="rabbit安装"></a>rabbit安装</h3><p><strong>rabbitmq下载</strong>:<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a></p><p>可以直接拷贝《资料/rabbitmq-server-3.8.6.exe》</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/02.png"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/03.png"></p><p>双击exe文件直接安装：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/12.png"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/13.png"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/14.png"></p><p>cmd进入安装目录：C:\Program Files\RabbitMQ Server\rabbitmq_server-3.8.6\sbin</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/15.png"></p><p><strong>安装web管理插件：</strong></p><p>rabbitmq-plugins.bat enable rabbitmq_management</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/17.png"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/18.png"></p><p>用<strong>guest/guest</strong>登入：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/19.png"></p><p>到此rabbitmq就安装好了！</p><p><strong>注意，管理界面访问端口跟客户端连接端口不是同一个端口哦。</strong></p><h2 id="二-使用管理界面"><a href="#二-使用管理界面" class="headerlink" title="二  使用管理界面"></a>二  使用管理界面</h2><h3 id="1）界面总览"><a href="#1）界面总览" class="headerlink" title="1）界面总览"></a>1）界面总览</h3><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1570592912783.png" alt="1570592912783"></p><h3 id="2）用户权限管理"><a href="#2）用户权限管理" class="headerlink" title="2）用户权限管理"></a>2）用户权限管理</h3><p>我们新建的itcast用户，不具备访问权限，如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1569411819639.png" alt="1569411819639"></p><p>我们需要添加对virtual hosts的访问权限，点击itcast用户，进入用户管理界面，然后添加权限：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1569411896139.png" alt="1569411896139"></p><p>添加权限以后，可以看到用户已经具备了访问权：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1569411955659.png" alt="1569411955659"> </p><h1 id="2-Linux环境RabbitMQ安装"><a href="#2-Linux环境RabbitMQ安装" class="headerlink" title="2 Linux环境RabbitMQ安装"></a>2 Linux环境RabbitMQ安装</h1><h3 id="erlang安装-1"><a href="#erlang安装-1" class="headerlink" title="erlang安装"></a>erlang安装</h3><p>安装erlang需要的依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC-devel xz</span><br></pre></td></tr></table></figure><p>下载erlang源文件（可以直接拷贝《<strong>资料/otp_src_23.0.tar.gz</strong>》）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget http://erlang.org/download/otp_src_23.0.tar.gz</span><br></pre></td></tr></table></figure><p>解压：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -xvzf otp_src_23.0.tar.gz</span><br></pre></td></tr></table></figure><p>执行安装:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cd otp_src_23.0/</span><br><span class="line"># ./configure --prefix=/usr/local/erlang --with-ssl -enable-threads -enable-smmp-support -enable-kernel-poll --enable-hipe --without-javac</span><br><span class="line"># make </span><br><span class="line"># make install</span><br></pre></td></tr></table></figure><p>安装erlang，运行./configure提示如下错误</p><p>configure: error: No curses library functions found</p><p>configure: error: /bin/sh ‘/home/jiayi/otp_src_18.2.1/erts/configure’ failed for erts</p><h3 id="解决安装erlang遇到的问题："><a href="#解决安装erlang遇到的问题：" class="headerlink" title="解决安装erlang遇到的问题："></a>解决安装erlang遇到的问题：</h3><p><strong>yum -y install ncurses-devel</strong></p><p>然后./configure</p><p>make</p><p>make install</p><p>配置环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/profile</span><br><span class="line"></span><br><span class="line"># 最后一行添加以下内容：</span><br><span class="line">ERLANG_HOME=/usr/local/erlang</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$ERLANG_HOME/bin</span><br><span class="line"></span><br><span class="line">#保存并退出</span><br><span class="line">#以下命令生效配置</span><br><span class="line"># source /etc/profile</span><br></pre></td></tr></table></figure><p>验证erlang环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># erl</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/001.png"></p><p>以上步骤就安装完了erlang的环境了！</p><h3 id="rabbitmq安装"><a href="#rabbitmq安装" class="headerlink" title="rabbitmq安装"></a>rabbitmq安装</h3><p>下载安装包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.6/rabbitmq-server-generic-unix-3.8.6.tar.xz</span><br></pre></td></tr></table></figure><p>解压下载的xz文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># xz -d rabbitmq-server-generic-unix-3.8.6.tar.xz</span><br><span class="line"># 生成的rabbitmq-server-generic-unix-3.8.6.tar文件继续解压</span><br><span class="line"># tar -xvf rabbitmq-server-generic-unix-3.8.6.tar</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/002.png"></p><p>启用web管理界面：./rabbitmq-plugins enable rabbitmq_management</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/003.png"></p><p>如果出现{:query, :rabbit@server1, {:badrpc, :timeout}}错误，那么需要将主机名在hosts文件中进行配置本机的IP地址：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/004.png"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/005.png"></p><p>再次启用web管理：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/006.png"></p><p>启动rabbitmq:</p><p>./rabbitmq-server -detached</p><p>访问控制台：</p><p><a href="http://192.168.148.139:15672/">http://192.168.148.139:15672/</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/007.png"></p><p>使用guest/guest访问：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/009.png"></p><p>guest从3.3版本开始就禁用访问了，咋们可以添加一个用户然后设置权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 添加一个用户admin 密码是 admin</span><br><span class="line"># ./rabbitmqctl add_user admin admin</span><br><span class="line"># ./rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/010.png"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/011.png"></p><p><font color="red"><strong>注意：</strong></font>如果访问不了，出现以下错误就需要检查防火墙是否关闭。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/008.png"></p><h3 id="linux防火墙关闭-centos7"><a href="#linux防火墙关闭-centos7" class="headerlink" title="linux防火墙关闭(centos7)"></a>linux防火墙关闭(centos7)</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span>:<span class="string">查看防火墙状态</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">status firewalld</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">停止防火墙</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">stop firewalld.service</span></span><br><span class="line"><span class="attr">3</span>:<span class="string">禁止开机启动</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">disable firewalld.service </span></span><br><span class="line"><span class="attr">4</span>:<span class="string">重启防火墙</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">enable firewalld</span></span><br></pre></td></tr></table></figure><h1 id="3-Docker方式安装并且运行rabbitMQ"><a href="#3-Docker方式安装并且运行rabbitMQ" class="headerlink" title="3 Docker方式安装并且运行rabbitMQ"></a><strong>3 Docker方式安装并且运行rabbitMQ</strong></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=leyou \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=<span class="number">123321</span> \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p <span class="number">15672</span>:<span class="number">15672</span> \</span><br><span class="line"> -p <span class="number">5672</span>:<span class="number">5672</span> \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:<span class="number">3</span>-management</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux和docker版没有内置账号,需要自己手动设置</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RabbitMQ下载与安装&quot;&gt;&lt;a href=&quot;#RabbitMQ下载与安装&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ下载与安装&quot;&gt;&lt;/a&gt;RabbitMQ下载与安装&lt;/h1&gt;&lt;h1 id=&quot;1-windows环境安装rabbitmq</summary>
      
    
    
    
    <category term="RabbitMQ" scheme="http://example.com/categories/RabbitMQ/"/>
    
    
    <category term="RabbitMQ" scheme="http://example.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="http://example.com/2022/05/31/RabbitMQ/"/>
    <id>http://example.com/2022/05/31/RabbitMQ/</id>
    <published>2022-05-31T03:27:28.000Z</published>
    <updated>2022-05-31T03:56:44.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-MQ概述"><a href="#第一章-MQ概述" class="headerlink" title="第一章 MQ概述"></a>第一章 MQ概述</h1><h2 id="1-1-什么是MQ"><a href="#1-1-什么是MQ" class="headerlink" title="1.1.什么是MQ"></a>1.1.什么是MQ</h2><p>MQ全称 <strong>Message Queue(消息队列)</strong> , 是在消息的传输过程中<strong>保存消息的容器</strong>. 多用于分布式系统之间进行通信.</p><p>消息队列是典型例子: <strong>生产者消费者模型.</strong></p><p>A系统向B系统发送消息, A系统先将消息一条一条存放到MQ中, B系统从MQ中一条一条读取消息</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122194125554.png" alt="image-20201122194125554"><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201123091502006.png" alt="image-20201123091502006"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MQ,消息队列, 存储消息的中间件</span><br><span class="line">分布式系统通信方式: </span><br><span class="line"><span class="number">1</span> 直接远程调用 </span><br><span class="line"><span class="number">2</span> 借助第三方完成间接通信</span><br><span class="line">发送方称为生产者, 接收方称为消费者</span><br></pre></td></tr></table></figure><h2 id="1-2-MQ的优势和劣势"><a href="#1-2-MQ的优势和劣势" class="headerlink" title="1.2 MQ的优势和劣势"></a>1.2 MQ的优势和劣势</h2><h3 id="1-2-1-MQ的优势"><a href="#1-2-1-MQ的优势" class="headerlink" title="1.2.1 MQ的优势"></a>1.2.1 MQ的优势</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 应用解耦（可以异步发送信息请求）</span><br><span class="line"><span class="number">2</span> 快速应用变更与维护（支持集群）</span><br><span class="line"><span class="number">3</span> 削峰填谷 （访问超过目标服务器的处理速度，那就按照目标服务器的极限速度进行处理）</span><br></pre></td></tr></table></figure><h4 id="1-应用解耦"><a href="#1-应用解耦" class="headerlink" title="1 应用解耦"></a>1 应用解耦</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">订单系统依赖 ---&gt; 库存系统,支付系统,物流系统</span><br><span class="line">当库存系统出现问题时,导致订单系统没有办法正常工作.</span><br><span class="line">  </span><br><span class="line">系统耦合性越高, 容错性就越低, 可维护性也就越低.</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122195130351.png" alt="image-20201122195130351"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用MQ使得应用解耦,提升容错性和可维护性.</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122195308230.png" alt="image-20201122195308230"></p><h4 id="2-异步提速"><a href="#2-异步提速" class="headerlink" title="2 异步提速"></a>2 异步提速</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个下单操作需要耗时: <span class="number">20</span> + <span class="number">300</span> + <span class="number">300</span> + <span class="number">300</span> = <span class="number">920</span></span><br><span class="line">执行效率太慢</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122195651775.png" alt="image-20201122195651775"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户点击下单按钮时,后台只需要将信息写入数据库,并将消息存入MQ,响应给客户端即可</span><br><span class="line">真正处理的时间用户时感知不到了.</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122195912997.png" alt="image-20201122195912997"></p><h4 id="3-削峰填谷"><a href="#3-削峰填谷" class="headerlink" title="3 削峰填谷"></a>3 削峰填谷</h4><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122200036139.png" alt="image-20201122200036139"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122200105031.png" alt="image-20201122200105031"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用了MQ之后, 限制消费消息的速度为<span class="number">1000</span>, 这样以来, 高峰期产生的数据势必会被积压在MQ中, 高峰期就给<span class="string">&quot;削&quot;</span>掉了, </span><br><span class="line">但是因为消息积压, 在高峰期过后的一段时间内, 消费消息的速度还是会维持在<span class="number">1000</span>, 直到消费完积压的消息, 这就是<span class="string">&quot;填谷&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122200151829.png" alt="image-20201122200151829"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">应用解耦: 提高系统容错性和可维护性</span><br><span class="line">异步提速: 提升用户体验和系统吞吐量</span><br><span class="line">削峰填谷: 增加系统稳定性</span><br></pre></td></tr></table></figure><h3 id="1-2-2-MQ的劣势"><a href="#1-2-2-MQ的劣势" class="headerlink" title="1.2.2 MQ的劣势"></a>1.2.2 MQ的劣势</h3><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122201936018.png" alt="image-20201122201936018"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 系统可用性降低:</span><br><span class="line">系统引入的外部依赖越多,系统的稳定性越差. 一旦MQ宕机, 将会对业务造成影响. </span><br><span class="line"><span class="number">2</span> 系统复杂度提高:</span><br><span class="line">MQ的加入大大增加了系统的复杂度, 以前系统之间是同步的远程调用, 现在是通过MQ进行异步调用. </span><br><span class="line">    如何保证消息没有被重复消费? 怎么处理消息丢失情况? 怎么保证消息传递的顺序性? </span><br><span class="line"><span class="number">3</span> 一致性问题:</span><br><span class="line">A系统处理完业务, 通过MQ给B,C,D三个系统发数据, 如果B系统,C系统处理成功, D系统处理失败. </span><br><span class="line">    如何保证消息数据处理的一致性?</span><br></pre></td></tr></table></figure><h3 id="1-2-3-MQ小结"><a href="#1-2-3-MQ小结" class="headerlink" title="1.2.3 MQ小结"></a>1.2.3 MQ小结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">既然MQ有优势也有劣势, 那么使用MQ需要满足什么条件呢?</span><br><span class="line"><span class="number">1.</span>生产者不需要从消费者处获取反馈. 引入消息队列之前的直接调用,其接口返回值必须为空.这样上层才能继续往后执行.</span><br><span class="line"><span class="number">2.</span>允许短暂的不一致性</span><br><span class="line"><span class="number">3.</span>确实是用了有效果. 既解耦,提速,削峰这些方法的收益,超过加入MQ,管理MQ的成本.</span><br></pre></td></tr></table></figure><h2 id="1-3-常见的MQ产品"><a href="#1-3-常见的MQ产品" class="headerlink" title="1.3 常见的MQ产品"></a>1.3 常见的MQ产品</h2><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122201358945.png" alt="image-20201122201358945"></p><h2 id="1-4-AMQP和JMS"><a href="#1-4-AMQP和JMS" class="headerlink" title="1.4 AMQP和JMS"></a>1.4 AMQP和JMS</h2><h3 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h3><p>AMQP, 既<strong>Advanced Message Queuing Protocol(高级消息队列协议)</strong>, 是一个网络协议, 是应用层协议的一个开发标准, 为面向消息的中间件设计. 基于此协议的客户端与消息中间件就可以传递消息了. 2006年,AMQP规范发布. 类似HTTP.</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122223753472.png" alt="image-20201122223753472"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201123103039508.png" alt="image-20201123103039508"></p><h3 id="JMS-了解"><a href="#JMS-了解" class="headerlink" title="JMS(了解)"></a>JMS(了解)</h3><p>JMS 既 Java消息服务(JavaMessage Service) 应用程序接口, 是一个java平台中关于面向消息中间件的API.</p><p>JMS是JavaEE 13种规范中的一种, 类比JDBC.</p><p>很多消息中间件都实现了JMS规范, 例如: ActiveMQ.</p><p>RabbitMQ官方没有提供JMS的实现包, 但是开源社区有相关实现.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AMQP是协议,是消息中间件通讯的协议, 类比HTTP</span><br><span class="line">JMS是API规范接口,类比JDBC</span><br></pre></td></tr></table></figure><h2 id="1-5-RabbitMQ简介"><a href="#1-5-RabbitMQ简介" class="headerlink" title="1.5 RabbitMQ简介"></a>1.5 RabbitMQ简介</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>2007年, Rabbit技术公司基于AMQP标准开发的RabbitMQ1.0版本发布了. RabbitMQ采用Erlang语言开发.Erlang语言是针开发高并发和分布式系统的一种语言, 在电信领域应用广泛.</p><p>RabbitMQ是基于AMQP的一款消息管理系统</p><p>官网： <a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p><p>官方教程：<a href="http://www.rabbitmq.com/getstarted.html">http://www.rabbitmq.com/getstarted.html</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122211225425.png" alt="image-20201122211225425"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201123105057894.png" alt="image-20201123105057894"></p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122211433093.png" alt="image-20201122211433093"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122211449618.png" alt="image-20201122211449618"></p><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p>RabbitMQ提供了6种消息模型，但是第6种其实是RPC，并不是MQ，因此不予学习。那么也就剩下5种。</p><p>但是其实3、4、5这三种都属于订阅模型，只不过进行路由的方式不同。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527068544487.png" alt="1527068544487"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">rabbitMQ下载方式</span>: <span class="string">windows Linux mac docker</span></span><br><span class="line"><span class="meta">rabbitMQ工作模式</span>: <span class="string">如上几种</span></span><br><span class="line"><span class="meta">rabbitMQ相关概念</span>:<span class="string"></span></span><br><span class="line"><span class="attr">Broker</span>: <span class="string">代理,指rabbitMQ服务器</span></span><br><span class="line"><span class="meta">虚拟机</span>: <span class="string">相当于mysql的Database</span></span><br><span class="line"><span class="meta">交换机</span>: <span class="string">判断消息类型,分发消息到不同的队列中</span></span><br><span class="line"><span class="meta">队列</span>: <span class="string">存放消息的最终位置</span></span><br><span class="line"><span class="attr">Connection</span>: <span class="string">连接</span></span><br><span class="line"><span class="attr">channel</span>: <span class="string">通道/甬道</span></span><br><span class="line"><span class="meta">生成者</span>: <span class="string">往MQ中存放消息的一方</span></span><br><span class="line"><span class="meta">消费者</span>: <span class="string">从MQ中拉取消息的一方</span></span><br></pre></td></tr></table></figure><h1 id="第二章-RabbitMQ下载与安装"><a href="#第二章-RabbitMQ下载与安装" class="headerlink" title="第二章 RabbitMQ下载与安装"></a>第二章 RabbitMQ下载与安装</h1><h2 id="2-1-下载与安装"><a href="#2-1-下载与安装" class="headerlink" title="2.1 下载与安装"></a>2.1 下载与安装</h2><p>官网下载地址：<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a></p><p>快速入门地址：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p><p>详细下载安装请参考如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>注意，管理界面端口跟连接端口不是同一个端口哦。</p><h2 id="2-2-使用管理界面"><a href="#2-2-使用管理界面" class="headerlink" title="2.2 使用管理界面"></a>2.2 使用管理界面</h2><h3 id="1）界面总览"><a href="#1）界面总览" class="headerlink" title="1）界面总览"></a>1）界面总览</h3><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1570592912783.png" alt="1570592912783"></p><h3 id="2）用户权限管理"><a href="#2）用户权限管理" class="headerlink" title="2）用户权限管理"></a>2）用户权限管理</h3><p>我们新建的itcast用户，不具备访问权限，如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1569411819639.png" alt="1569411819639"></p><p>我们需要添加对virtual hosts的访问权限，点击itcast用户，进入用户管理界面，然后添加权限：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1569411896139.png" alt="1569411896139"></p><p>添加权限以后，可以看到用户已经具备了访问权：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1569411955659.png" alt="1569411955659"> </p><p><strong>Docker方式安装并且运行rabbitMQ</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=leyou \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=<span class="number">123321</span> \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p <span class="number">15672</span>:<span class="number">15672</span> \</span><br><span class="line"> -p <span class="number">5672</span>:<span class="number">5672</span> \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:<span class="number">3</span>-management</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第三章-RabbitMQ开发"><a href="#第三章-RabbitMQ开发" class="headerlink" title="第三章 RabbitMQ开发"></a>第三章 RabbitMQ开发</h1><h2 id="3-1-Rabbit快速入门"><a href="#3-1-Rabbit快速入门" class="headerlink" title="3.1 Rabbit快速入门"></a>3.1 Rabbit快速入门</h2><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527070619131.png" alt="1527070619131"></p><h3 id="需求"><a href="#需求" class="headerlink" title="需求:"></a>需求:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用简单模式完消息传递</span><br></pre></td></tr></table></figure><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建工程(生产者,消费者)</span><br><span class="line"><span class="number">2.</span>分别添加依赖</span><br><span class="line"><span class="number">3.</span>编写生产者发送消息</span><br><span class="line"><span class="number">4.</span>编写消费者接收消息</span><br></pre></td></tr></table></figure><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者:"></a>生产者:</h3><p>创建工程时要<strong>先在管理页面上建立对应的虚拟机，且虚拟机要以/开头</strong>，然后代码链接时填入虚拟机名称。</p><p><strong>多个用户可以对应一个虚拟机</strong>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">总结：</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">1.创建连接的工厂对象</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">2.设置连接参数</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">3.通过工厂获取连接</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">4.创建通道，channel  使用通道才能完成消息相关的操作</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">5.使用通道创建队列</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">6. 定义发送到mq的消息内容</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">7.关闭通道和连接</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span>消息的生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Provider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>1.创建连接的工厂对象</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>2.设置连接参数</span></span><br><span class="line">        <span class="comment">//设置服务地址,默认localhost</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.190.153&quot;</span>);</span><br><span class="line">        <span class="comment">//设置端口,默认5672</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置账号信息，用户名、密码、虚拟机</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima129&quot;</span>);  <span class="comment">//   先在 web  管理平台创建虚拟机</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;leyou&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>3.通过工厂获取连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>4.创建通道，channel  使用通道才能完成消息相关的操作</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>5.使用通道创建队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         参数:</span></span><br><span class="line"><span class="comment">         参数1.queue 队列名称</span></span><br><span class="line"><span class="comment">         参数2.durable 是否持久化,当MQ重启后是否存在</span></span><br><span class="line"><span class="comment">         参数3.exclusive</span></span><br><span class="line"><span class="comment">            是否独占. 只能有一个消费者监听此队列</span></span><br><span class="line"><span class="comment">         参数4.autoDelete 是否自动删除, 没有consumer时自动删除</span></span><br><span class="line"><span class="comment">         参数5.arguments 其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 如果没有名称叫做hello_world的对象则创建,如果有则不创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello_world&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>6. 定义发送到mq的消息内容</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            String message = <span class="string">&quot;Hello RabbitMQ! &quot;</span>+i;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)</span></span><br><span class="line"><span class="comment">             * 参数1: exchange 交换机名称,简单模式下使用默认的 写&quot;&quot;即可</span></span><br><span class="line"><span class="comment">             * 参数2: routingKey 路由名称</span></span><br><span class="line"><span class="comment">             *      当前没有交换机,我们直接指定队列</span></span><br><span class="line"><span class="comment">             * 参数3: props 配置信息</span></span><br><span class="line"><span class="comment">             * 参数4: body 发送的消息数据</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello_world&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;发布消息成功...&quot;</span>);</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>7.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者:"></a>消费者:</h3><p>跟生产者代码相同，只是监控拉取时不同</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TODO</span>:<span class="string">消息的消费者</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">2.设置参数</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">3.获取连接</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">4.创建通道</span></span><br><span class="line"><span class="attr">TODO5</span>:<span class="string">找到队列(订阅队列)</span></span><br><span class="line"><span class="attr">TODO6</span>:<span class="string">创建消费者对象</span></span><br><span class="line"><span class="attr">当目标队列中有数据时,调用此消费者进行消费</span></span><br><span class="line"><span class="attr">TODO7</span>:<span class="string">消费(监听)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span>消息的消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>1.创建连接工厂对象</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.190.153&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima129&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;leyou&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>3.获取连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>4.创建通道</span></span><br><span class="line">        TODO:找到队列(订阅队列)</span><br><span class="line">            TODO:创建消费者对象</span><br><span class="line">        <span class="comment">// 当目标队列中有数据时,调用此消费者进行消费</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>找到队列(订阅队列)</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1: 队列名称</span></span><br><span class="line"><span class="comment">         * 参数2: 是否持久化</span></span><br><span class="line"><span class="comment">         * 参数3: 是否独有</span></span><br><span class="line"><span class="comment">         * 参数4: 是否自动删除</span></span><br><span class="line"><span class="comment">         * 参数5: 其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello_world&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>创建消费者对象</span></span><br><span class="line">        <span class="comment">// 当目标队列中有数据时,调用此消费者进行消费</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 回调交付</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag 标记</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope 获取一些信息,交换机,路由</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties 配置信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body 从队列中获取的数据</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;唯一标识: &quot;+consumerTag);</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;数据: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">                    <span class="comment">// 获取交换机信息</span></span><br><span class="line">                    <span class="comment">//System.out.println(&quot;交换机: &quot;+envelope.getExchange());</span></span><br><span class="line">                    <span class="comment">//System.out.println(&quot;routingkey: &quot;+envelope.getRoutingKey());</span></span><br><span class="line">                    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">                    <span class="comment">// 手动确认: 交付成功,确认交付</span></span><br><span class="line">                    <span class="comment">// 删除当前的数据  false : 单个删除</span></span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// 如果程序出现了异常,将取出的归还</span></span><br><span class="line">                    <span class="comment">// 参数1: 确认字符串  参数2: 是否批量处理 参数3: 当前消费失败时,将消息重新存放到队列中</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 消费(监听)</span></span><br><span class="line">        <span class="comment">// 参数1: 队列的名称</span></span><br><span class="line">        <span class="comment">// 参数2: 是否自动确认(一旦自动确认,该数据就会从队列中移除)</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;hello_world&quot;</span>,<span class="keyword">false</span>,consumer);</span><br><span class="line">        <span class="comment">// 阻塞线程</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>官方文档说明：</p><blockquote><p>RabbitMQ是一个<strong>消息的代理者</strong>（Message Broker）：它接收消息并且传递消息。</p><p>你可以认为它是一个邮局：当你投递邮件到一个邮箱，你很肯定邮递员会终究会将邮件递交给你的收件人。与此类似，RabbitMQ 可以是一个邮箱、邮局、同时还有邮递员。</p><p>不同之处在于：RabbitMQ不是传递纸质邮件，而是二进制的数据</p></blockquote><p>基本消息模型图：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527070619131.png" alt="1527070619131"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在上图的模型中，有以下概念：</span><br><span class="line">- P：生产者，也就是要发送消息的程序</span><br><span class="line">- C：消费者：消息的接受者，会一直等待消息到来。</span><br><span class="line">- queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</span><br></pre></td></tr></table></figure><h2 id="3-2-work消息模型"><a href="#3-2-work消息模型" class="headerlink" title="3.2 work消息模型"></a>3.2 work消息模型</h2><h3 id="3-2-1-说明"><a href="#3-2-1-说明" class="headerlink" title="3.2.1.说明"></a>3.2.1.说明</h3><p>在刚才的基本模型中，一个生产者，一个消费者，生产的消息直接被消费者消费。比较简单。</p><p><strong>Work queues，也被称为（Task queues），任务模型</strong>。</p><p>当消息处理比较耗时的时候，可能<strong>生产消息的速度会远远大于消息的消费速度</strong>。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型：<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。队列中的<strong>消息一旦消费，就会消失，因此任务是不会被重复执行的</strong>。</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527078437166-1606061246692.png" alt="1527078437166"></p><p>角色：</p><ul><li>P：生产者：任务的发布者</li><li>C1：消费者，领取任务并且完成任务，假设完成速度较慢</li><li>C2：消费者2：领取任务并完成任务，假设完成速度快</li></ul><h3 id="3-2-2-生产者"><a href="#3-2-2-生产者" class="headerlink" title="3.2.2.生产者"></a>3.2.2.生产者</h3><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工具类封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>1.创建连接工厂对象</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.190.153&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima129&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;leyou&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>3.获取连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生产者与模式1中的几乎一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.task_queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息生成者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         queueDeclare(String queue, boolean durable, boolean exclusive,</span></span><br><span class="line"><span class="comment">                    boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         参数:</span></span><br><span class="line"><span class="comment">             参数1.queue 队列名称</span></span><br><span class="line"><span class="comment">             参数2.durable 是否持久化,当MQ重启后是否存在</span></span><br><span class="line"><span class="comment">             参数3.exclusive</span></span><br><span class="line"><span class="comment">                    是否独占. 只能有一个消费者监听此队列</span></span><br><span class="line"><span class="comment">             参数4.autoDelete 是否自动删除, 没有consumer时自动删除</span></span><br><span class="line"><span class="comment">             参数5.arguments 其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 当前方法执行完后,如果有队列就使用对应的队列</span></span><br><span class="line">        <span class="comment">// 如果没有则创建一个队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work-queue&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 循环发布任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 消息内容</span></span><br><span class="line">            String message = <span class="string">&quot;task .. &quot;</span> + i;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;work-queue&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot; 发布了 &quot;</span> + message + <span class="string">&quot; ... &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们循环发送50条消息。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599876563452.png" alt="1599876563452"> </p><h3 id="3-2-3-消费者"><a href="#3-2-3-消费者" class="headerlink" title="3.2.3.消费者"></a>3.2.3.消费者</h3><p><strong>消费者</strong>1： 睡一秒 较慢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.task_queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work-queue&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);   <span class="comment">// 设置每一个消费者 同时只能处理一个消息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                    System.out.println(<span class="string">&quot; [消费者1] 消费了 : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    <span class="comment">// 手动ACK</span></span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列。</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work-queue&quot;</span>, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>消费者2</strong>:   较快一方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.task_queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo2_2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work-queue&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);   <span class="comment">// 设置每一个消费者 同时只能处理一个消息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                    <span class="comment">//Thread.sleep(1000);</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; [消费者2] 消费了 : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    <span class="comment">// 手动ACK</span></span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列。</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work-queue&quot;</span>, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与消费者1基本类似，就是<strong>没有设置消费耗时时间</strong>。</p><p>这里是模拟有些消费者快，有些比较慢。</p><p>接下来，两个消费者一同启动，然后发送50条消息：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527085826462.png" alt="1527085826462"></p><p>可以发现，<strong>两个消费者各自消费了25条消息</strong>，而且各不相同，这就实现了任务的分发。</p><h3 id="3-2-4-能者多劳原则"><a href="#3-2-4-能者多劳原则" class="headerlink" title="3.2.4.能者多劳原则"></a>3.2.4.能者多劳原则</h3><p>刚才的实现有问题吗？</p><ul><li>消费者1比消费者2的效率要低，一次任务的耗时较长</li><li>然而<strong>两人最终消费的消息数量是一样的</strong></li><li><strong>消费者2大量时间处于空闲状态，消费者1一直忙碌</strong></li></ul><p>现在的状态属于是把任务平均分配，正确的做法应该是<strong>消费越快的人，消费的越多</strong>。</p><p>怎么实现呢？</p><p>我们可以<strong>修改设置，让消费者同一时间只接收一条消息，这样处理完成之前，就不会接收更多消息，就可以让处理快的人，接收更多消息</strong> ：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527086103576.png" alt="1527086103576"> </p><p>再次测试：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527086159534.png" alt="1527086159534"></p><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MQ: 消息队列</span><br><span class="line">  消息在传输过程中保存消息的容器.主要使用在分布式环境下</span><br><span class="line">  MQ优势:</span><br><span class="line">    应用解耦</span><br><span class="line">    快速应用变更与维护</span><br><span class="line">    削峰填谷</span><br><span class="line">  MQ劣势:</span><br><span class="line">    可用性降低</span><br><span class="line">    系统复杂度提高</span><br><span class="line">    短时间内无法保证一致性</span><br><span class="line">  在什么情况下使用MQ?</span><br><span class="line">    访问的服务无返回值的情况下</span><br><span class="line">    允许短暂性不一致的情况下</span><br><span class="line">    使用MQ的优势大于维护成本</span><br><span class="line">AMQP协议: 高级消息队列协议,约束消息生产者和消费者与MQ传递数据时的规范</span><br><span class="line">    生产者 ----&gt;  交换机 ----&gt; 路由 ----&gt; 队列 &lt;---- 消费者</span><br><span class="line">    </span><br><span class="line">JMS: java提供的操作消息中间件的API</span><br><span class="line">    </span><br><span class="line">RabbitMQ概述:</span><br><span class="line">erlang语言基于AMQP协议开发的一个消息队列软件.</span><br><span class="line">    五种工作机制:</span><br><span class="line"><span class="number">1</span> 直连式:生产者 ----&gt; 队列 &lt;---- 消费者</span><br><span class="line"><span class="number">2</span> work模式(任务模式):生产者 ----&gt; 队列 &lt;---- 多个消费者(平分队列中的消息)</span><br><span class="line"><span class="number">3</span> 订阅模式:</span><br><span class="line"><span class="number">4</span> 路由模式:</span><br><span class="line"><span class="number">5</span> topics: </span><br></pre></td></tr></table></figure><h2 id="3-3-订阅模型分类"><a href="#3-3-订阅模型分类" class="headerlink" title="3.3 订阅模型分类"></a>3.3 订阅模型分类</h2><p>订阅模型示意图：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527086284940.png" alt="1527086284940"></p><p>前面2个案例中，只有3个角色：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><p>而在订阅模型中<strong>，多了一个exchange角色</strong>，而且过程略有变化：</p><ul><li>P：生产者，也就是要发送消息的程序，但是<strong>不再发送到队列中，而是发给X（交换机</strong>）</li><li>C：消费者，消息的接受者，会一直等待消息到来。</li><li>Queue：消息队列，接收消息、缓存消息。</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个<strong>特别队列、递交给所有队列、或是将消息丢弃</strong>。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul><li><strong>Fanout：广播，</strong>将消息交给所有绑定到交换机的队列</li><li><strong>Direct：定向</strong>，把消息交给符合指定routing key 的队列</li><li><strong>Topic：通配符</strong>，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="3-4-广播模型-Fanout"><a href="#3-4-广播模型-Fanout" class="headerlink" title="3.4.广播模型-Fanout"></a>3.4.广播模型-Fanout</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p><h3 id="3-4-1-流程说明"><a href="#3-4-1-流程说明" class="headerlink" title="3.4.1.流程说明"></a>3.4.1.流程说明</h3><p>流程图：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527086564505.png" alt="1527086564505"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1）  可以有多个消费者</li><li>2）  每个<strong>消费者有自己的queue</strong>（队列）</li><li>3）  每个<strong>队列都要绑定到Exchange</strong>（交换机）</li><li>4）  <strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li><li>5）  交换机把消息发送给绑定过的所有队列</li><li>6）  队列的消费者都能拿到消息。<strong>实现一条消息被多个消费者消费</strong></li></ul><h3 id="3-4-2-生产者"><a href="#3-4-2-生产者" class="headerlink" title="3.4.2.生产者"></a>3.4.2.生产者</h3><p>两个变化：</p><ul><li><strong>1）  声明Exchange，不再声明Queue</strong></li><li><strong>2）  发送消息到Exchange，不再发送到Queue</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.声明交换器和队列</span></span><br><span class="line">        String exchangeName = <span class="string">&quot;exchange-fanout&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName,<span class="string">&quot;fanout&quot;</span>,<span class="keyword">true</span>); <span class="comment">//扇形交换机类型-fanout</span></span><br><span class="line">        <span class="comment">//  创建多个队列</span></span><br><span class="line">        String fanoutQueue1 = <span class="string">&quot;fanout_queue1&quot;</span>;</span><br><span class="line">        <span class="comment">//队列1</span></span><br><span class="line">        channel.queueDeclare(fanoutQueue1, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//队列2</span></span><br><span class="line">        String fanoutQueue2 = <span class="string">&quot;fanout_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(fanoutQueue2, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.同一个交换机与2个队列绑定   参数3： 扇出形式 不需要路由规则   两个队列都会接受到生产投递的消息</span></span><br><span class="line">        channel.queueBind(fanoutQueue1,exchangeName,<span class="string">&quot;&quot;</span>);<span class="comment">//绑定第一个队列</span></span><br><span class="line">        channel.queueBind(fanoutQueue2,exchangeName,<span class="string">&quot;&quot;</span>);<span class="comment">//绑定第二个队列</span></span><br><span class="line">        <span class="comment">//5.生产消息</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;hello fanout!&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.关闭channel和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599880559042.png" alt="1599880559042"> </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599880583045.png" alt="1599880583045"> </p><p>扇出方式（<strong>广播）  两个队列都会接受交换机 传递过来的消息</strong>！</p><h3 id="3-4-3-消费者"><a href="#3-4-3-消费者" class="headerlink" title="3.4.3.消费者"></a>3.4.3.消费者</h3><p>消费者1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConsumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 队列名称</span></span><br><span class="line">        String queueName = <span class="string">&quot;fanout_queue1&quot;</span>;</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(queueName, <span class="string">&quot;exchange-fanout&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line"><span class="comment">//                    System.out.println(1/0); // 模拟异常  表示消息未正常处理</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; fanout-consumer 1 : [x] received : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//  代码没有异常 手动通知队列 删除消息即可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();  <span class="comment">//  第三个参数  false  直接删除消息   true  表示 ：把消息重回队列</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 5. 监听队列，第二个参数：是否自动进行消息确认。 false 告诉队列不要删除消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要注意代码中：<strong>队列需要和交换机绑定</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 队列名称</span></span><br><span class="line">String queueName = <span class="string">&quot;fanout_queue1&quot;</span>;</span><br><span class="line"><span class="comment">// 绑定队列到交换机</span></span><br><span class="line">channel.queueBind(queueName, <span class="string">&quot;exchange-fanout&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConsumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 队列名称</span></span><br><span class="line">        String queueName = <span class="string">&quot;fanout_queue2&quot;</span>;</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(queueName, <span class="string">&quot;exchange-fanout&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line"><span class="comment">//                    System.out.println(1/0); // 模拟异常  表示消息未正常处理</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; fanout-consumer 2 : [x] received : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//  代码没有异常 手动通知队列 删除消息即可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();  <span class="comment">//  第三个参数  false  直接删除消息   true  表示 ：把消息重回队列</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 5. 监听队列，第二个参数：是否自动进行消息确认。 false 告诉队列不要删除消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试： 先启动生产者发送消息</p><p>然后 我们再运行消费者1，然后再运行消费者2：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599881321174.png" alt="1599881321174"> </p><p>扇出方式： 两个队列彼此独立，互不干扰！  ，<strong>消费者绑定那个队列的数据，就只消费哪条队列的数据</strong></p><h2 id="3-5-定向模型-Direct"><a href="#3-5-定向模型-Direct" class="headerlink" title="3.5.定向模型-Direct"></a>3.5.定向模型-Direct</h2><h3 id="3-5-1-说明"><a href="#3-5-1-说明" class="headerlink" title="3.5.1.说明"></a>3.5.1.说明</h3><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们<strong>希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange</strong>。</p><p> 在Direct模型下：</p><ul><li>1 队列与交换机的绑定，<strong>不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</strong></li><li>2 <strong>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</strong></li><li>3 Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，<strong>只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</strong></li></ul><p>流程图：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527087677192.png" alt="1527087677192"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><h3 id="3-5-2-生产者"><a href="#3-5-2-生产者" class="headerlink" title="3.5.2.生产者"></a>3.5.2.生产者</h3><p>此处我们模拟商品的增删改，发送消息的RoutingKey分别是：insert、update、delete</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3.声明交换器和队列</span></span><br><span class="line">        String exchangeName = <span class="string">&quot;exchange-direct&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName,<span class="string">&quot;direct&quot;</span>,<span class="keyword">false</span>); <span class="comment">//交换机类型-direct</span></span><br><span class="line">        <span class="comment">//  创建2个队列</span></span><br><span class="line">        <span class="comment">//队列1</span></span><br><span class="line">        String directQueue1 = <span class="string">&quot;direct_queue1&quot;</span>;</span><br><span class="line">        channel.queueDeclare(directQueue1, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//队列2</span></span><br><span class="line">        String directQueue2 = <span class="string">&quot;direct_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(directQueue2, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.同一个交换机与2个队列绑定   参数3： 直连direct形式  定义路由规则   两个队列按照路由 接受对应的消息</span></span><br><span class="line">        <span class="comment">//##################交换机绑定队列时需要指明key</span></span><br><span class="line">        channel.queueBind(directQueue1,exchangeName,<span class="string">&quot;insert&quot;</span>);<span class="comment">//绑定第一个队列</span></span><br><span class="line">        channel.queueBind(directQueue2,exchangeName,<span class="string">&quot;delete&quot;</span>);<span class="comment">//绑定第二个队列</span></span><br><span class="line">        channel.queueBind(directQueue2,exchangeName,<span class="string">&quot;update&quot;</span>);<span class="comment">//绑定第二个队列</span></span><br><span class="line">        <span class="comment">//5.生产消息  向指定的队列投递消息##################发布消息给交换机时也需要指明key</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;insert&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;hello direct insert!&quot;</span>.getBytes());</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;delete&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;hello direct delete!&quot;</span>.getBytes());</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;update&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;hello direct update!&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭channel和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-消费者"><a href="#3-5-3-消费者" class="headerlink" title="3.5.3.消费者"></a>3.5.3.消费者</h3><p>我们此处假设消费者1只接收1种类型的消息：例如 接受添加商品信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo4;</span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectConsumer1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 队列名称  insert</span></span><br><span class="line">        String queueName = <span class="string">&quot;direct_queue1&quot;</span>;</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(queueName, <span class="string">&quot;exchange-direct&quot;</span>, <span class="string">&quot;insert&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line"><span class="comment">//                    System.out.println(1/0); // 模拟异常  表示消息未正常处理</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; direct-consumer 1 : [x] received : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//  代码没有异常 手动通知队列 删除消息即可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();  <span class="comment">//  第三个参数  false  直接删除消息   true  表示 ：把消息重回队列</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 5. 监听队列，第二个参数：是否自动进行消息确认。 false 告诉队列不要删除消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消费者2</p><p>我们此处假设消费者2接收2种类型的消息：更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo4;</span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectConsumer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 队列名称</span></span><br><span class="line">        String queueName2 = <span class="string">&quot;direct_queue2&quot;</span>;</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(queueName2, <span class="string">&quot;exchange-direct&quot;</span>, <span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        channel.queueBind(queueName2, <span class="string">&quot;exchange-direct&quot;</span>, <span class="string">&quot;update&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line"><span class="comment">//                    System.out.println(1/0); // 模拟异常  表示消息未正常处理</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; direct-consumer 2 : [x] received : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//  代码没有异常 手动通知队列 删除消息即可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();  <span class="comment">//  第三个参数  false  直接删除消息   true  表示 ：把消息重回队列</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 5. 监听队列，第二个参数：是否自动进行消息确认。 false 告诉队列不要删除消息</span></span><br><span class="line">        channel.basicConsume(queueName2, <span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-6-通配符模型-Topic"><a href="#3-6-通配符模型-Topic" class="headerlink" title="3.6.通配符模型-Topic"></a>3.6.通配符模型-Topic</h2><h3 id="3-6-1-说明"><a href="#3-6-1-说明" class="headerlink" title="3.6.1.说明"></a>3.6.1.说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><strong><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割</strong>，例如： <code>item.insert</code></p><p> 通配符规则：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">`#`：匹配一个或多个词</span></span><br><span class="line"><span class="attr">`*`：匹配不多不少恰好1个词</span></span><br></pre></td></tr></table></figure><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p><p><code>item.*</code>：只能匹配<code>item.spu</code></p><p>​     <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201123163445058.png" alt="image-20201123163445058"></p><p>图示：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527088518574.png" alt="1527088518574"></p><p>解释：</p><ul><li>红色Queue：绑定的是<code>usa.#</code> ，因此凡是以 <code>usa.</code>开头的<code>routing key</code> 都会被匹配到</li><li>黄色Queue：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配</li></ul><h3 id="3-6-2-生产者"><a href="#3-6-2-生产者" class="headerlink" title="3.6.2.生产者"></a>3.6.2.生产者</h3><p>使用topic类型的Exchange，发送消息的routing key </p><p><strong>注意：  此案例 先启动消费端  按照指定路由监听：  再启动服务端，再投递消息！</strong></p><p>可以根据  user.update      product.insert      user.insert  测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3.声明交换器和队列</span></span><br><span class="line">        <span class="comment">//3.声明交换器和队列</span></span><br><span class="line">        String exchangeName = <span class="string">&quot;exchange-topic&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName,<span class="string">&quot;topic&quot;</span>,<span class="keyword">false</span>); <span class="comment">//交换机类型-direct</span></span><br><span class="line">        <span class="comment">//  创建2个队列</span></span><br><span class="line">        <span class="comment">//队列1</span></span><br><span class="line">        String topicQueue1 = <span class="string">&quot;topic_queue1&quot;</span>;</span><br><span class="line">        channel.queueDeclare(topicQueue1, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//队列2</span></span><br><span class="line">        String topicQueue2 = <span class="string">&quot;topic_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(topicQueue2, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.同一个交换机与2个队列绑定   参数3： 直连direct形式  定义路由规则   两个队列按照路由 接受对应的消息</span></span><br><span class="line">        channel.queueBind(topicQueue1,exchangeName,<span class="string">&quot;abc.#&quot;</span>);<span class="comment">//绑定第一个队列</span></span><br><span class="line">        channel.queueBind(topicQueue2,exchangeName,<span class="string">&quot;#.hello&quot;</span>);<span class="comment">//绑定第二个队列</span></span><br><span class="line">        channel.queueBind(topicQueue2,exchangeName,<span class="string">&quot;*.world&quot;</span>);<span class="comment">//绑定第二个队列</span></span><br><span class="line">        <span class="comment">//5.生产消息  向指定的队列投递消息</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;abc.abc&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;abc前缀的值!&quot;</span>.getBytes());</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;abc.demo.hello&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;hello &quot;</span>.getBytes());</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;update.world&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;update_world!&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭channel和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-6-3-消费者1"><a href="#3-6-3-消费者1" class="headerlink" title="3.6.3.消费者1"></a>3.6.3.消费者1</h3><p>我们此处假设消费者1只接收的RoutingKey为 <code>user.#</code>，代表所有以user开头的key</p><p>注意： 本案例 ：交换机和队列 均由 消费者创建 ，生产者不创建 交换机和队列来演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5Consumer1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 队列名称  insert</span></span><br><span class="line">        String queueName = <span class="string">&quot;topic_queue1&quot;</span>;</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(queueName, <span class="string">&quot;exchange-topic&quot;</span>, <span class="string">&quot;abc.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line"><span class="comment">//                    System.out.println(1/0); // 模拟异常  表示消息未正常处理</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; 获取 : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//  代码没有异常 手动通知队列 删除消息即可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();  <span class="comment">//  第三个参数  false  直接删除消息   true  表示 ：把消息重回队列</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 5. 监听队列，第二个参数：是否自动进行消息确认。 false 告诉队列不要删除消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-6-4-消费者2"><a href="#3-6-4-消费者2" class="headerlink" title="3.6.4.消费者2"></a>3.6.4.消费者2</h3><p>我们此处假设消费者2接收的消息key：<code>*.insert</code>，与新增有关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5Consumer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 队列名称  insert</span></span><br><span class="line">        String queueName = <span class="string">&quot;topic_queue2&quot;</span>;</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(queueName, <span class="string">&quot;exchange-topic&quot;</span>, <span class="string">&quot;#.hello&quot;</span>);</span><br><span class="line">        channel.queueBind(queueName, <span class="string">&quot;exchange-topic&quot;</span>, <span class="string">&quot;*.world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line"><span class="comment">//                    System.out.println(1/0); // 模拟异常  表示消息未正常处理</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; 获取 : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//  代码没有异常 手动通知队列 删除消息即可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();  <span class="comment">//  第三个参数  false  直接删除消息   true  表示 ：把消息重回队列</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 5. 监听队列，第二个参数：是否自动进行消息确认。 false 告诉队列不要删除消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-7-持久化"><a href="#3-7-持久化" class="headerlink" title="3.7.持久化"></a>3.7.持久化</h2><p>为了提高并发能力，<strong>MQ的数据默认是在内存中</strong>存储的，包括<strong>交换机、队列、消息</strong>。</p><p>这样就会出现数据安全问题，如果<strong>服务宕机，存储在MQ中未被消费的消息都会丢失</strong>。</p><p>所以我们需要<strong>将交换机、队列、消息持久化到硬盘，以防服务宕机</strong>。</p><p>交换机持久化：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527088933255.png" alt="1527088933255"></p><p>队列持久化：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527088960059.png" alt="1527088960059"></p><p>消息持久化：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527088984029.png" alt="1527088984029"></p><h1 id="第四章-SpringBoot-AMQP（重点掌握）"><a href="#第四章-SpringBoot-AMQP（重点掌握）" class="headerlink" title="第四章 SpringBoot AMQP（重点掌握）"></a>第四章 SpringBoot AMQP（重点掌握）</h1><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1.简介"></a>4.1.简介</h2><p>Sprin有很多不同的项目，其中就有对AMQP的支持：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527089338661.png" alt="1527089338661"></p><p>Spring AMQP的页面：<a href="http://projects.spring.io/spring-amqp/">http://projects.spring.io/spring-amqp/</a> </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527089365281.png" alt="1527089365281"></p><p>注意这里一段描述：</p><blockquote><p>​     Spring-amqp是对AMQP协议的抽象实现，而spring-rabbit 是对协议的具体实现，也是目前的唯一实现。底层使用的就是RabbitMQ。</p></blockquote><h2 id="4-2-依赖和配置"><a href="#4-2-依赖和配置" class="headerlink" title="4.2.依赖和配置"></a>4.2.依赖和配置</h2><p>添加AMQP的启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>application.yml</code>中添加RabbitMQ地址：  手动在控制台 新建一个虚拟机  /heima</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">producer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br></pre></td></tr></table></figure><h2 id="4-3-快速入门"><a href="#4-3-快速入门" class="headerlink" title="4.3.快速入门"></a>4.3.快速入门</h2><p>我们以直连 direct 为例，看看Spring中如何发送消息、接收消息。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599889782488.png" alt="1599889782488"> </p><h3 id="4-3-1-生成者发送消息"><a href="#4-3-1-生成者发送消息" class="headerlink" title="4.3.1.生成者发送消息"></a>4.3.1.生成者发送消息</h3><p>Spring为AMQP提供了统一的消息处理模板：AmqpTemplate，非常方便的发送消息，其发送方法：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599899378264.png" alt="1599899378264"> </p><p>比较常用的3个方法，分别是：</p><ul><li>指定交换机、RoutingKey和消息体</li><li>指定消息(默认队列)</li><li>指定RoutingKey和消息，这里的RoutingKey其实是队列名称</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码如下：  向指定队列直接发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// rabbit客户端对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send/&#123;msg&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable(&quot;msg&quot;)</span> String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 参数1: 队列名称,操作的队列必须实现存在</span></span><br><span class="line">        <span class="comment">// 参数2: 存放的消息信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;boot-queue&quot;</span>,msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动main  浏览器 输入地址 ：</p><p><a href="http://localhost:8081/send">http://localhost:8081/send</a></p><p>结果：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599899718932.png" alt="1599899718932"></p><h3 id="4-3-2-接受消息"><a href="#4-3-2-接受消息" class="headerlink" title="4.3.2.接受消息"></a>4.3.2.接受消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;heima-queue&quot;)</span><span class="comment">//  注意只需要 队列名称一致即可！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String msg, Channel channel, Message message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//会话唯一ID</span></span><br><span class="line">        <span class="keyword">long</span> deliveryTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息id：&quot;</span> + deliveryTag);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;message:&quot;</span> +message.toString());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后查看日志：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599899772187.png" alt="1599899772187"> </p><p>springboot默认也是ack自动确认！</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599899784341.png" alt="1599899784341"></p><h2 id="4-4-消息转换器"><a href="#4-4-消息转换器" class="headerlink" title="4.4.消息转换器"></a>4.4.消息转换器</h2><p>之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20200525170410401.png" alt="image-20200525170410401"></p><p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。总所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>我们来测试一下。</p><h3 id="4-4-1-测试发送Java对象"><a href="#4-4-1-测试发送Java对象" class="headerlink" title="4.4.1.测试发送Java对象"></a>4.4.1.测试发送Java对象</h3><p>我们修改消息发送的代码，发送一个Map对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/sendMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSendMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;heima-queue&quot;</span>, msg);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;mapok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时关闭消费者的监听：</p><p>重新运行测试类。</p><p>然后在MQ的控制台可以查看到消息，如下：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599900081223.png" alt="1599900081223"> </p><h3 id="4-4-2-配置JSON转换器"><a href="#4-4-2-配置JSON转换器" class="headerlink" title="4.4.2.配置JSON转换器"></a>4.4.2.配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置消息转换器。</p><p>在启动类中添加一个Bean即可：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599900131536.png" alt="1599900131536"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动 再次查看结果</p><h3 id="4-4-3-测试"><a href="#4-4-3-测试" class="headerlink" title="4.4.3.测试"></a>4.4.3.测试</h3><p>再次发送消息，查看效果： </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599900288272.png" alt="1599900288272"> </p><p>此时，消费者也可以用Map来接收消息了：Map接受即可，消费者端 别忘记导入依赖：和转换器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">    public MessageConverter jsonMessageConverter()&#123;</span><br><span class="line">        // 创建JSON的消息转换器</span><br><span class="line">        return new Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>**<img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599900675393.png" alt="1599900675393"> **</p><p>结果：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599900642675.png" alt="1599900642675"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201123080006082.png" alt="image-20201123080006082"></p><h1 id="第五章-SpringBoot整合邮件发送"><a href="#第五章-SpringBoot整合邮件发送" class="headerlink" title="第五章 SpringBoot整合邮件发送"></a>第五章 SpringBoot整合邮件发送</h1><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20210708162108584.png" alt="image-20210708162108584"></p><p>说明：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">最下面的几个箭头表示备份，</span></span><br><span class="line"><span class="attr">2</span> <span class="string">最上面的双向箭头中的向下箭头表示刷新，</span></span><br><span class="line"><span class="attr">强制查看有没有接受到邮箱，</span></span><br><span class="line"><span class="attr">自己不手动刷新，那么就是一定是刷新查看有没有邮箱到达</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-完成邮件的投递"><a href="#SpringBoot-完成邮件的投递" class="headerlink" title="SpringBoot 完成邮件的投递"></a>SpringBoot 完成邮件的投递</h2><p>准备工作： 登录自己的开通邮件的 以163为例      </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574189645.png" alt="1600574189645"> </p><p>生成自己唯一的授权码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574220514.png" alt="1600574220514"> </p><ul><li>基于springboot环境导入email发送依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springboot邮件发送--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置邮件发送参数  yaml文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">##    邮件发送配置</span><br><span class="line">#  spring.mail.username=fanqixxxx@163.com</span><br><span class="line">#  #spring.mail.password   填写授权码</span><br><span class="line">#  spring.mail.password=xxxxxxx</span><br><span class="line">#  #spring.mail.host   填写邮箱供应的SMTP地址</span><br><span class="line">#  spring.mail.host=smtp.163.com</span><br><span class="line">#  spring.mail.properties.mail.smtp.ssl.enable=true</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="comment"># 发送者的邮箱地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xsitheima163@163.com</span></span><br><span class="line">  <span class="comment"># 此密码并非登录的密码,而是使用java代码发送邮件时使用的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">AKELOGXEFRJZOAWU</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>编写测试类 完成邮件发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailSend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            message.setSubject(<span class="string">&quot;传智健康官方邮件&quot;</span>);</span><br><span class="line">            message.setText(<span class="string">&quot;你好，请保持好验证码：7788，打死都不能泄露给你的同桌&quot;</span>);</span><br><span class="line">            message.setTo(<span class="string">&quot;tps520tps@163.com&quot;</span>);</span><br><span class="line">            message.setFrom(<span class="string">&quot;tps520wx@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MailException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查收邮件：</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/08.rabbitMQ/resources/img/1600574300195.png" alt="1600574300195"> </p><p>邮件发送示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendEmailApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            message.setSubject(<span class="string">&quot;表白邮件&quot;</span>);</span><br><span class="line">            message.setText(<span class="string">&quot;rose 你好, 我想.....&quot;</span>);</span><br><span class="line">            message.setTo(<span class="string">&quot;xsitheima126@126.com&quot;</span>);</span><br><span class="line">            message.setFrom(<span class="string">&quot;xsitheima163@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">            System.out.println(<span class="string">&quot;========发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MailException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="预备账号"><a href="#预备账号" class="headerlink" title="预备账号"></a>预备账号</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xsitheima126@<span class="number">126.</span>com    a123456</span><br><span class="line">    授权码: YKJOGNHCCFDLIJKO</span><br><span class="line">xsitheima163@<span class="number">163.</span>com    a12345678</span><br><span class="line">授权码: AKELOGXEFRJZOAWU</span><br></pre></td></tr></table></figure><h1 id="第六章-SpringBoot整合RabbitMQ以及整合邮件发送"><a href="#第六章-SpringBoot整合RabbitMQ以及整合邮件发送" class="headerlink" title="第六章 SpringBoot整合RabbitMQ以及整合邮件发送"></a>第六章 SpringBoot整合RabbitMQ以及整合邮件发送</h1><p>整合描述：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span> <span class="string">boot 中生产者的controller类提供的 访问地址带的参数就是邮箱账号，</span></span><br><span class="line"><span class="meta">访问生产者的</span> <span class="string">spring boot controller 并且将邮箱账号作为消息，</span></span><br><span class="line"><span class="attr">消费者拿到的信息就是邮箱账号，</span></span><br><span class="line"><span class="meta">然后消费者使用163账号给接收到的邮箱账号</span> <span class="string">发送邮件！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ps：先启动消费者，然后再启动生产者，生产者生产10次邮箱信息，那么消费者发送十次邮箱。</span></span><br></pre></td></tr></table></figure><h3 id="1-消费者代码"><a href="#1-消费者代码" class="headerlink" title="1 消费者代码"></a>1 消费者代码</h3><h4 id="消费者配置文件："><a href="#消费者配置文件：" class="headerlink" title="消费者配置文件："></a>消费者配置文件：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="comment"># 发送者的邮箱地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xsitheima163@163.com</span></span><br><span class="line">  <span class="comment"># 此密码并非登录的密码,而是使用java代码发送邮件时使用的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">AKELOGXEFRJZOAWU</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="消费者pom-xml文件"><a href="#消费者pom-xml文件" class="headerlink" title="消费者pom.xml文件"></a>消费者pom.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--springboot邮件发送--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="消费者启动文件："><a href="#消费者启动文件：" class="headerlink" title="消费者启动文件："></a>消费者启动文件：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换器: 将对象转成json并存放到MQ中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="消费者监听生产者类："><a href="#消费者监听生产者类：" class="headerlink" title="消费者监听生产者类："></a>消费者监听生产者类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg : 参数类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;boot-queue&quot;)</span><span class="comment">//  注意只需要 队列名称一致即可！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String msg, Channel channel, Message message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//public void receive(Map msg, Channel channel, Message message) throws IOException &#123;</span></span><br><span class="line">        <span class="comment">//会话唯一ID</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息 &quot;</span> + msg);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;收到消息 &quot; + new String(message.getBody()));</span></span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;message:&quot; +message.toString());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// =====================发送邮件</span></span><br><span class="line">            <span class="comment">// 编写邮件信息</span></span><br><span class="line">            SimpleMailMessage emailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            <span class="comment">// 邮件主题</span></span><br><span class="line">            emailMessage.setSubject(<span class="string">&quot;下单通知&quot;</span>);</span><br><span class="line">            <span class="comment">// 邮件内容</span></span><br><span class="line">            emailMessage.setText(<span class="string">&quot;您的宝贝以发货&quot;</span>);</span><br><span class="line">            emailMessage.setTo(msg);</span><br><span class="line">            emailMessage.setFrom(<span class="string">&quot;xsitheima163@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(emailMessage);</span><br><span class="line">            System.out.println(<span class="string">&quot;========发送成功&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-生产者代码："><a href="#2-生产者代码：" class="headerlink" title="2 生产者代码："></a>2 生产者代码：</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">producer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br></pre></td></tr></table></figure><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换器: 将对象转成json并存放到MQ中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Controller类"><a href="#Controller类" class="headerlink" title="Controller类"></a>Controller类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// rabbit客户端对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send/&#123;msg&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable(&quot;msg&quot;)</span> String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 参数1: 队列名称,操作的队列必须实现存在</span></span><br><span class="line">        <span class="comment">// 参数2: 存放的消息信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;boot-queue&quot;</span>,msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-MQ概述&quot;&gt;&lt;a href=&quot;#第一章-MQ概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 MQ概述&quot;&gt;&lt;/a&gt;第一章 MQ概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是MQ&quot;&gt;&lt;a href=&quot;#1-1-什么是MQ&quot; class=&quot;he</summary>
      
    
    
    
    <category term="RabbitMQ" scheme="http://example.com/categories/RabbitMQ/"/>
    
    
    <category term="RabbitMQ" scheme="http://example.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>docker高级</title>
    <link href="http://example.com/2022/05/26/docker%E9%AB%98%E7%BA%A7/"/>
    <id>http://example.com/2022/05/26/docker%E9%AB%98%E7%BA%A7/</id>
    <published>2022-05-26T02:16:58.000Z</published>
    <updated>2022-05-26T02:24:17.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker高级"><a href="#Docker高级" class="headerlink" title="Docker高级"></a>Docker高级</h1><p><strong>学习目标</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">了解DockerCompose的基本语法</span></span><br><span class="line"><span class="meta">-</span> <span class="string">使用Docker-Swarm部署一个Java应用</span></span><br><span class="line"><span class="meta">-</span> <span class="string">了解持续集成持续部署</span></span><br></pre></td></tr></table></figure><h1 id="1-容器编排概述"><a href="#1-容器编排概述" class="headerlink" title="1 容器编排概述"></a>1 容器编排概述</h1><p>Docker只是一个对项目做打包和运行的小工具，如果止步于此，那么充其量就是一个开发者手里的<code>小玩具</code>。</p><p>因为真实的项目都是要集群部署的，<strong>还要考虑负载均衡、水平扩展、动态伸缩、集群容错等问题</strong>，而Docker并不具备这样的功能。</p><p>而要想让Docker在集群中的部署如同单机部署一样的方便，那就需要用到<strong>容器编排</strong>技术了。</p><p>“编排”（Orchestration）在云计算行业里不算是新词汇，它主要是指用户如何通过某些工具或者配置来完成一组虚拟机以及关联资源的定义、配置、创建、删除等工作，然后由云计算平台按照这些指定的逻辑来完成的过程。</p><p>而容器时代，“编排”显然就是对 Docker 容器的一系列定义、配置和创建动作的管理。目前容器编排技术比较知名的包括：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">Docker公司自己的：docker-compose + swarm组合</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Google牵头的Kubernetes技术，简称为k8s</span></span><br></pre></td></tr></table></figure><h1 id="2-Docker-Compose"><a href="#2-Docker-Compose" class="headerlink" title="2 Docker Compose"></a>2 Docker Compose</h1><p><code>Docker Compose</code> 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用，官网地址： <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> ，其前身是开源项目 Fig。</p><p>本节将介绍 <code>Compose</code> 项目情况以及安装和使用。</p><p>网址：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p><h2 id="2-1-为什么要用Docker-Compose"><a href="#2-1-为什么要用Docker-Compose" class="headerlink" title="2.1 为什么要用Docker Compose"></a>2.1 为什么要用Docker Compose</h2><p>通过Dockerfile我们可以将一个项目很方便的打包为一个Docker镜像。但是在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p>那么如何定义各个容器的依赖关系，这就需要用到docker-compose了。</p><p><code>Compose</code> 恰好满足了Docker集群化的需求。它允许用户通过一个单独的 ==docker-compose.yml== 模板文件（YAML 格式）来<strong>定义一组相关联的应用容器为一个项目</strong>（project）。</p><h2 id="2-2-Docker-Compose安装"><a href="#2-2-Docker-Compose安装" class="headerlink" title="2.2 Docker Compose安装"></a>2.2 Docker Compose安装</h2><p>MAC下或者Windows下的Docker自带Compose功能，无需安装。</p><p>Linux下需要通过命令安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="2-3-Docker-Compose快速入门"><a href="#2-3-Docker-Compose快速入门" class="headerlink" title="2.3 Docker Compose快速入门"></a>2.3 Docker Compose快速入门</h2><p>假设我们要部署一个SpringBoot项目，并且依赖于Redis。</p><h3 id="2-3-1-导入微服务工程"><a href="#2-3-1-导入微服务工程" class="headerlink" title="2.3.1 导入微服务工程"></a>2.3.1 导入微服务工程</h3><p>工程的基本功能就是统计用户的访问量，代码在<code>资料</code>中docker-demo，直接解压到没有中文的目录下，使用Idea导入即可。</p><p><strong>打包项目，获得app.jar</strong>(利用idea中的maven管理的package命令进行打包)</p><h3 id="2-3-2-编写Dockerfile"><a href="#2-3-2-编写Dockerfile" class="headerlink" title="2.3.2 编写Dockerfile"></a>2.3.2 编写Dockerfile</h3><p>（1）在任意位置创建一个新目录,docker-compose，将app.jar复制到该目录</p><p>（2）在该目录中，新建一个==Dockerfile==文件，并编写下面的内容：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9090</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/tmp/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-编写docker-compose"><a href="#2-3-3-编写docker-compose" class="headerlink" title="2.3.3 编写docker-compose"></a>2.3.3 编写docker-compose</h3><p>在刚才的目录中，创建一个==docker-compose.yml==文件并填写内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis&quot;</span></span><br></pre></td></tr></table></figure><p>此时的结构如下：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626122026530-1625530478553.png" alt="image-20210626122026530"></p><p>命令解读：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">version：compose的版本</span></span><br><span class="line"><span class="meta">-</span> <span class="string">services：服务列表，包括两个服务：</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">web：自己写的Java项目</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">build：这个服务镜像是临时构建的，构建目录是当前目录，会利用当前目录的Dockerfile来完成构建。</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">ports：端口映射，对外开放8080端口</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">redis：redis服务</span></span><br></pre></td></tr></table></figure><h3 id="2-3-4-启动测试"><a href="#2-3-4-启动测试" class="headerlink" title="2.3.4 启动测试"></a>2.3.4 启动测试</h3><p>将刚刚准备好的文件夹docker-compose上传到Linux的<code>/opt</code>目录：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626122243656-1625530478554.png" alt="image-20210626122243656"></p><p>进入docker-compose目录然后执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>构建完成后，可以看到项目运行的日志信息：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109001711441-1625530478554.png" alt="image-20201109001711441"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109001832104-1625530478554.png" alt="image-20201109001832104"></p><p>此时，访问浏览器 <a href="http://192.168.80.151:9090/hello%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%8B%E9%9D%A2%E7%9A%84%E7%BB%93%E6%9E%9C%EF%BC%9A">http://192.168.80.151:9090/hello，可以看到下面的结果：</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626123534275-1625530478554.png" alt="image-20210626123534275"></p><p>如果多次访问，这个次数会累加。</p><p>按<code>CTRL+C</code>后可以<strong>停止运行程序，并且Docker运行的容器中也会关闭</strong>。</p><p>通过<code>docker-compose up -d</code>命令，可以<strong>后台启动</strong>，这样就不会显示日志：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109002000959-1625530478554.png" alt="image-20201109002000959"></p><p>通过<code>docker-compose stop</code> 关闭容器</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109002527208-1625530478554.png" alt="image-20201109002527208"></p><p>通过<code>docker-compose down</code>关闭容器并删除</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109002122299-1625530478554.png" alt="image-20201109002122299"></p><p>上面讲的是：<strong>在linux中安装docker compose ，然后构建项目并且打包，并且 一些配置文件放到一定目录机构中，再拷贝到linux运行，还可以直接就在windows运行了，windows本来就已经自带了docker compose</strong>。（不管是在linux还是windows运行，不需要原本存在 docker 镜像，docker-compose.yml 文件会帮我们构建并且运行）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">也可以进入跑起来的redis容器，查看具体的key-val哈：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">exec -it docker-compose_redis_1 bash</span></span><br><span class="line"><span class="attr">redis-cli</span></span><br><span class="line"><span class="attr">ping</span> <span class="string"></span></span><br><span class="line"><span class="attr">keys</span> <span class="string">*</span></span><br><span class="line"><span class="meta">get....</span> <span class="string">(查看一下值)</span></span><br><span class="line"><span class="attr">quilt（退出redis）</span></span><br><span class="line"><span class="attr">exit(退出容器)</span></span><br></pre></td></tr></table></figure><h2 id="2-4-Docker-Compose-相关命令"><a href="#2-4-Docker-Compose-相关命令" class="headerlink" title="2.4 Docker Compose 相关命令"></a>2.4 Docker Compose 相关命令</h2><p>docker-compose的相关命令参数：</p><p>通过：<code>docker-compose --help</code> 查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost docker-demo]<span class="comment"># docker-compose --help</span></span><br><span class="line">利用Docker来定义和构建一个多容器的应用</span><br><span class="line"></span><br><span class="line">使用方式:</span><br><span class="line">  docker-compose [-f &lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br><span class="line">  docker-compose -h|--<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">1 Options:</span><br><span class="line">  -f, --file FILE             指定一个 compose 文件，</span><br><span class="line">                              (默认: docker-compose.yml)</span><br><span class="line">  -p, --project-name NAME     指定project名字</span><br><span class="line">                              (默认: 目录名称)</span><br><span class="line">  --verbose                   显示更多日志</span><br><span class="line">  --log-level LEVEL           日志级别 (DEBUG, INFO, WARNING, ERROR, CRITICAL)</span><br><span class="line">  -v, --version               打印版本并退出</span><br><span class="line">  -H, --host HOST             Daemon socket to connect to</span><br><span class="line">2 Commands:</span><br><span class="line">  build              构建多个service</span><br><span class="line">  config             校验 Compose 文件，格式是否正确，若正确则显示配置，</span><br><span class="line">   若格式错误显示错误原因</span><br><span class="line">  down               停止并删除 容器, 网络, 镜像, 和 数据卷</span><br><span class="line">  <span class="built_in">exec</span>               进入一个指定的容器</span><br><span class="line">  <span class="built_in">help</span>               Get <span class="built_in">help</span> on a <span class="built_in">command</span></span><br><span class="line">  images             列出该Compose中包含的各个镜像</span><br><span class="line">  <span class="built_in">kill</span>               通过发送 SIGKILL 信号来强制停止服务容器</span><br><span class="line">   格式为 docker-compose <span class="built_in">kill</span> [options] [SERVICE...]</span><br><span class="line">  logs               查看服务容器的输出日志</span><br><span class="line">   格式为 docker-compose logs [options] [SERVICE...]。</span><br><span class="line">  pause              暂停一个容器</span><br><span class="line">  port               打印某个容器端口所映射的公共端口</span><br><span class="line">  ps                 列出项目中目前的所有容器</span><br><span class="line">  pull               拉取服务依赖的镜像</span><br><span class="line">  push               推送服务依赖的镜像到 Docker 镜像仓库</span><br><span class="line">  restart            重启项目中的服务</span><br><span class="line">  rm                 删除停止的容器（要先停止容器）</span><br><span class="line">  run                在某个服务上运行指令</span><br><span class="line">  scale              设定某个容器的运行个数</span><br><span class="line">  start              启动多个 services</span><br><span class="line">  stop               停止多个 services</span><br><span class="line">  top                查看各个服务容器内运行的进程。</span><br><span class="line">  unpause            恢复处于暂停状态中的服务。</span><br><span class="line">  up                 创建并启动多个service的容器</span><br><span class="line">  version            Show the Docker-Compose version information</span><br></pre></td></tr></table></figure><h2 id="2-5-Docker-Compose常用语法"><a href="#2-5-Docker-Compose常用语法" class="headerlink" title="2.5 Docker Compose常用语法"></a>2.5 Docker Compose常用语法</h2><p>Compose模板文件是Compose的核心，包括有多种版本的Compose文件格式–：1，2，2.x和3.x。对应的Docker版本也不一样，对照表：</p><table><thead><tr><th align="left"><strong>Compose file format</strong></th><th align="left"><strong>Docker Engine release</strong></th></tr></thead><tbody><tr><td align="left">3.8</td><td align="left">19.03.0+</td></tr><tr><td align="left">3.7</td><td align="left">18.06.0+</td></tr><tr><td align="left">3.6</td><td align="left">18.02.0+</td></tr><tr><td align="left">3.5</td><td align="left">17.12.0+</td></tr><tr><td align="left">3.4</td><td align="left">17.09.0+</td></tr><tr><td align="left">3.3</td><td align="left">17.06.0+</td></tr><tr><td align="left">3.2</td><td align="left">17.04.0+</td></tr><tr><td align="left">3.1</td><td align="left">1.13.1+</td></tr><tr><td align="left">3.0</td><td align="left">1.13.0+</td></tr><tr><td align="left">2.4</td><td align="left">17.12.0+</td></tr><tr><td align="left">2.3</td><td align="left">17.06.0+</td></tr><tr><td align="left">2.2</td><td align="left">1.13.0+</td></tr><tr><td align="left">2.1</td><td align="left">1.12.0+</td></tr><tr><td align="left">2.0</td><td align="left">1.10.0+</td></tr><tr><td align="left">1.0</td><td align="left">1.9.1.+</td></tr></tbody></table><p>编写时，需要根据自己的docker版本来选择指定的Compose版本。</p><p>详细语法参考文档：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><code>Compose</code> 中有两个重要的概念：</p><ul><li><strong>项目</strong> (<code>project</code>)：<strong>由一组关联的应用容器组成的一个完整业务单元</strong>，在 <code>docker-compose.yml</code> 文件中定义。</li><li><strong>服务</strong> (<code>service</code>)：<strong>一个应用的容器，实际上可以包括若干运行相同镜像的容器实例</strong>。</li></ul><p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p>Compose文件是一个YAML文件，定义 一个或多个服务（service），网络（network）和 卷（volume）。撰写文件的默认路径为<code>./docker-compose.yml</code>。</p><blockquote><p><strong>提示</strong>：您可以为此文件使用 <code>.yml</code>或<code>.yaml</code>扩展名。他们俩都工作。</p></blockquote><p>简单来说，一个<code>project</code>包含多个<code>service</code>，每个<code>service</code>都是一个组件。<strong>例如入门案例中的Java项目和Redis都是<code>service</code>。</strong>部署时，可能每个service都会有多个容器去运行，形成负载均衡的集群。</p><p>因此，我们定义service，就是在定义这个service在容器运行时的规则参数，就像是给<code>docker run</code>命令设置参数一样。</p><p>我们定义network和volume类似于 <code>docker network create</code>和<code>docker volume create</code>这两个命令的效果。</p><p>只不过，我们定义规则，执行命令则由docker compose来完成。</p><p>参考我们之前的Demo，我们来学习下Compose的模板文件语法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis&quot;</span></span><br></pre></td></tr></table></figure><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>版本信息，详见上面提到的Compose版本与Docker的对应关系。</p><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 <code>docker-compose.yml</code> 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p><p>在入门案例中，因为<code>Dockerfile</code>和<code>docker-compose.yml</code>是在一个目录，因此build值指定为<code>.</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br></pre></td></tr></table></figure><p>另外，你也可以先制定目录，然后在指定Dockerfile文件，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span> </span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>build：Dockerfile配置<ul><li>context：用来指定Compose的工作环境目录，如果不指定或使用了相对路径则默认为<code>docker-compose.yml</code>所在目录。</li><li>dockerfile：指定Dockerfile的文件名称</li></ul></li></ul><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><p>覆盖容器运行时的默认命令。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;-Xmx256m&quot;</span>, <span class="string">&quot;/tmp/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h3><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="comment"># redis服务</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="comment"># mysql服务</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br></pre></td></tr></table></figure><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p>指定服务容器启动后执行的入口文件或者启动命令，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entrypoint:</span> <span class="string">/code/entrypoint.sh</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entrypoint:</span> [<span class="string">&quot;php&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;memory_limit=-1&quot;</span>, <span class="string">&quot;vendor/bin/phpunit&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h3><p>添加环境变量。您可以使用数组或字典。任何布尔值（true，false，yes，no）都需要用引号引起来，以确保YML解析器不会将其转换为True或False。</p><p>仅具有键的环境变量在运行Compose的计算机上解析为它们的值，这对于秘密或特定于主机的值很有用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SHOW:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SHOW=true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure><h3 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h3><p>指定内部端口，不将其发布到宿主机上，只有链接的其它服务才能访问它们。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span></span><br></pre></td></tr></table></figure><h3 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a>extra_hosts</h3><p>类似 Docker 中的 <code>--add-host</code> 参数，指定额外的 host 名称映射信息。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extra_hosts:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;googledns:8.8.8.8&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;dockerhub:52.1.157.61&quot;</span></span><br></pre></td></tr></table></figure><p>会在启动后的服务容器中 <code>/etc/hosts</code> 文件中添加如下两条条目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8.8.8.8 googledns</span><br><span class="line">52.1.157.61 dockerhub</span><br></pre></td></tr></table></figure><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>指定用于启动容器的图像。可以是镜像名称（仓库:tag）或镜像ID，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><p>如果镜像在本地不存在，而且你没有指定<a href="https://docs.docker.com/compose/compose-file/#build">build</a>参数，那么Compose会尝试<code>docker pull</code>来拉取镜像</p><h3 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h3><p>配置日志选项。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">syslog</span></span><br><span class="line">  <span class="attr">options:</span></span><br><span class="line">    <span class="attr">syslog-address:</span> <span class="string">&quot;tcp://192.168.0.42:123&quot;</span></span><br></pre></td></tr></table></figure><p>目前支持三种日志驱动类型。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver:</span> <span class="string">&quot;json-file&quot;</span> <span class="comment"># 记录为json文件</span></span><br><span class="line"><span class="attr">driver:</span> <span class="string">&quot;syslog&quot;</span> <span class="comment"># 发送到syslog服务</span></span><br><span class="line"><span class="attr">driver:</span> <span class="string">&quot;none&quot;</span> <span class="comment"># 没有日志记录</span></span><br></pre></td></tr></table></figure><p>默认采用<code>json-file</code>的日志方式，可以通过<code>options</code> 配置日志文件的限制参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">options:</span></span><br><span class="line">  <span class="attr">max-size:</span> <span class="string">&quot;200k&quot;</span></span><br><span class="line">  <span class="attr">max-file:</span> <span class="string">&quot;10&quot;</span></span><br></pre></td></tr></table></figure><h3 id="network-mode"><a href="#network-mode" class="headerlink" title="network_mode"></a>network_mode</h3><p>网络模式。使用与<code>docker --network</code>参数相同的值:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;bridge&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;none&quot;</span></span><br></pre></td></tr></table></figure><h3 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h3><p>要加入的网络，引用Compose文件中的顶级项目networks下的定义的网络名称 。</p><p><strong>要通过容器名称互相访问，则，各个容器必须处于同一个网络中。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;nginx:alpine&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">new</span> <span class="comment"># 加入名称为new的网络</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">worker:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;my-worker-image:latest&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">legacy</span> <span class="comment"># 加入名称为legacy的网络</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">new:</span> <span class="comment"># 加入名称为new的网络</span></span><br><span class="line">        <span class="attr">aliases:</span> <span class="comment"># 在new网络中的别名</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">database</span></span><br><span class="line">      <span class="attr">legacy:</span> <span class="comment"># 加入名称为legacy的网络</span></span><br><span class="line">        <span class="attr">aliases:</span> <span class="comment"># 在legacy网络中的别名</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">new:</span> <span class="comment"># 定义一个网络，名称为new</span></span><br><span class="line">  <span class="attr">legacy:</span> <span class="comment"># 定义一个网络，名称为legacy</span></span><br></pre></td></tr></table></figure><p>另外，在定义网络时可以指定<code>ip</code>网段，而加入网络的容器则需要在网段中选择一个固定ip地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">app_net:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.10</span> <span class="comment"># 指定一个IPv4子网地址</span></span><br><span class="line">        <span class="attr">ipv6_address:</span> <span class="number">2001</span><span class="string">:3984:3989::10</span> <span class="comment"># 指定一个IPv6子网地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">app_net:</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="string">&quot;172.16.238.0/24&quot;</span> <span class="comment"># 定义IPv4的地址网段   </span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="string">&quot;2001:3984:3989::/64&quot;</span> <span class="comment"># 定义IPv6的地址网段</span></span><br></pre></td></tr></table></figure><h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h3><p>暴露的端口信息，会映射到宿主机端口，另外为了避免语法出错，所有端口配置都必须使用字符串格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;3000-3005&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;9090-9091:8080-8081&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;49100:22&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:8001:8001&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:5000-5010:5000-5010&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;6060:6060/udp&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;12400-12500:1240&quot;</span></span><br></pre></td></tr></table></figure><p>如果仅指定了容器端口，则会随机选择一个宿主机端口。</p><h3 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h3><p>指定容器退出后的重启策略。包括下面的几种选项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">restart:</span> <span class="string">&quot;no&quot;</span> <span class="comment"># 在任何情况下都不会重新启动容器</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 容器总是重新启动。</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">on-failure</span> <span class="comment"># 遇到故障后重启</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">unless-stopped</span> <span class="comment"># 总是重新启动容器，除非容器停止</span></span><br></pre></td></tr></table></figure><p>生产环境建议配置为：<code>always</code>或者<code>unless-stopped</code></p><h3 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h3><p>指定要挂载的数据卷或目录。数据卷可以是某个service的局部数据卷，也可以是提前定义的全局数据卷（通过顶级参数volumes来指定）。</p><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 完整的数据卷配置语法</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">mydata</span> <span class="comment"># 数据卷</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/data</span> <span class="comment"># 容器内目录</span></span><br><span class="line">        <span class="attr">volume:</span></span><br><span class="line">          <span class="attr">nocopy:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">./static</span> <span class="comment"># 宿主机目录</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/opt/app/static</span> <span class="comment"># 容器内目录</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:latest</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 简化的数据卷语法</span></span><br><span class="line">      <span class="comment"># 将一个宿主机目录映射到容器内的某个目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/postgres.sock:/var/run/postgres/postgres.sock&quot;</span></span><br><span class="line">      <span class="comment"># 将一个全局卷映射到容器内某个目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;dbdata:/var/lib/postgresql/data&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mydata:</span> <span class="comment"># 定义全局的数据卷mydata</span></span><br><span class="line">  <span class="attr">dbdata:</span> <span class="comment"># 定义全局的数据卷dbdata</span></span><br></pre></td></tr></table></figure><p>其他swarm配置，上面只是讲解了Compose的部分模板语法。有关swarm下的一些配置并未说明，在swarm部分继续讲解。</p><h1 id="3-Docker-Swarm"><a href="#3-Docker-Swarm" class="headerlink" title="3 Docker Swarm"></a>3 Docker Swarm</h1><p>Docker-Compose负责定义Project和Service（服务）。但是服务<strong>具体运行在哪个服务节点</strong>？需要<strong>多少个Docker容器来部署？</strong>这就要靠Docker Swarm来管理了。</p><p><code>Swarm</code> 是使用 <a href="https://github.com/docker/swarmkit/"><code>SwarmKit</code></a> 构建的 Docker 引擎内置（原生）的集群管理和编排工具。</p><p>网址：<a href="https://docs.docker.com/engine/swarm/">https://docs.docker.com/engine/swarm/</a></p><h2 id="3-1-Docker-Swarm相关概念"><a href="#3-1-Docker-Swarm相关概念" class="headerlink" title="3.1 Docker Swarm相关概念"></a>3.1 Docker Swarm相关概念</h2><p>Docker Swarm 是 Docker 的集群管理工具。它将 Docker 主机池转变为单个虚拟 Docker 主机。 Docker Swarm 提供了标准的 Docker API，所有任何已经与 Docker 守护程序通信的工具都可以使用 Swarm 轻松地扩展到多个主机。</p><p>使用 <code>Swarm</code> 集群之前需要了解以下几个概念：</p><h3 id="3-1-1-Node节点"><a href="#3-1-1-Node节点" class="headerlink" title="3.1.1 Node节点"></a>3.1.1 Node节点</h3><p><strong>什么是节点？</strong></p><p>运行 Docker 的主机可以主动初始化一个 <code>Swarm</code> 集群或者加入一个已存在的 <code>Swarm</code> 集群，这样这个运行 Docker 的主机就成为一个 <code>Swarm</code> 集群的节点 (<code>node</code>) 。</p><p><strong>节点的分类：</strong></p><p>节点分为<strong>管理 (<code>manager</code>) 节点</strong>和<strong>工作 (<code>worker</code>) 节点</strong>。</p><p><strong>管理节点：</strong>用于 <code>Swarm</code> 集群的管理，<code>docker swarm</code> 命令基本只能在管理节点执行（节点退出集群命令 <code>docker swarm leave</code> 可以在工作节点执行）。一个 <code>Swarm</code> 集群可以有多个管理节点（高可用），但只有一个管理节点可以成为 <code>leader</code>，<code>leader</code> 通过 <code>raft</code> 协议实现。</p><p><strong>工作节点：</strong>是任务执行节点，管理节点将服务 (<code>service</code>) 下发至工作节点执行。管理节点默认也作为工作节点。你也可以通过配置让服务只运行在管理节点。</p><p><strong>Docker-Swarm的官方架构图：</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109004124428-1625530478554.png" alt="image-20201109004124428"></p><h3 id="3-1-2-Service服务和Task任务"><a href="#3-1-2-Service服务和Task任务" class="headerlink" title="3.1.2 Service服务和Task任务"></a>3.1.2 Service服务和Task任务</h3><p><strong>任务 （<code>Task</code>）</strong>：是 <code>Swarm</code> 中的<strong>最小的调度单位，可以理解为一个单一的容器</strong>。</p><p><strong>服务 （<code>Services</code>）</strong>： 是指<strong>一组任务的集合，服务定义了任务的属性</strong>。服务有两种模式：</p><ul><li><code>replicated services</code> 按照一定规则在各个工作节点上运行指定个数的任务。</li><li><code>global services</code> 每个工作节点上运行一个任务</li></ul><p>两种模式通过 <code>docker service create</code> 的 <code>--mode</code> 参数指定。</p><p><strong>容器、任务、服务的关系图：</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109004545055-1625530478555.png" alt="image-20201109004545055"></p><h2 id="3-2-创建Swarm集群"><a href="#3-2-创建Swarm集群" class="headerlink" title="3.2 创建Swarm集群"></a>3.2 创建Swarm集群</h2><p>我们知道 <code>Swarm</code> 集群由 <strong>管理节点</strong> 和 <strong>工作节点</strong> 组成。本节我们来创建一个包含一个管理节点和两个工作节点的最小 <code>Swarm</code> 集群。</p><p>我会启动3台虚拟机，计划如下：</p><table><thead><tr><th>虚拟机IP</th><th>节点角色</th></tr></thead><tbody><tr><td>192.168.80.99</td><td>管理节点</td></tr><tr><td>192.168.80.100</td><td>工作节点</td></tr><tr><td>192.168.80.101</td><td>工作节点</td></tr></tbody></table><p><strong>注意</strong>：节点的IP请定义为自己的虚拟机IP。</p><p><strong>虚拟机克隆</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626132820171-1625530478555.png" alt="image-20210626132820171"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626132859269-1625530478555.png" alt="image-20210626132859269"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626132927652-1625530478555.png" alt="image-20210626132927652"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626133831847-1625530478555.png" alt="image-20210626133831847"></p><p>结果：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626134615100-1625530478555.png" alt="image-20210626134615100"></p><p><strong>分别先后开启f1,f2,修改ip分别为100,101，切记，此时不能同时开任何两个虚拟机</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626134831109-1625530478555.png" alt="image-20210626134831109"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626134946452-1625530478555.png" alt="image-20210626134946452"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626135021759-1625530478555.png" alt="image-20210626135021759"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626135229567-1625530478555.png" alt="image-20210626135229567"></p><p>分别在三台机器执行命令：（域名映射）</p><p>99机器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;192.168.80.99 master&#x27;</span> &gt;&gt; /etc/hosts</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>100机器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;192.168.80.100 slaver1&#x27;</span> &gt;&gt; /etc/hosts</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>101机器</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;192.168.80.101 slaver2&#x27; &gt;&gt; /etc/hosts</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p><strong>一定要重启机器</strong></p><p><strong>一定要重启机器</strong></p><p><strong>一定要重启机器</strong></p><h3 id="3-2-1-创建管理节点"><a href="#3-2-1-创建管理节点" class="headerlink" title="3.2.1 创建管理节点"></a>3.2.1 创建管理节点</h3><p>我们在节点192.168.200.99上运行一个命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr 192.168.80.99</span><br></pre></td></tr></table></figure><p>因为我们的虚拟机可能有多个IP地址，这里通过<code>--advertise-addr</code>指定一个IP地址，这里我选择的是我的NAT网卡的地址。</p><p>执行命令效果如下：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626165656364-1625530478555.png" alt="image-20210626165656364"></p><h3 id="3-2-2-创建工作节点"><a href="#3-2-2-创建工作节点" class="headerlink" title="3.2.2 创建工作节点"></a>3.2.2 创建工作节点</h3><p>通过上面执行的结果可以看到这样的提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">docker swarm join --token SWMTKN-1-61z291f29zm8w3rh0wbptpzipavgq9lso77a6s46os5mijf5xr-553q8z2bs91r67ptxd1nq1mge 192.168.80.151:2377</span><br></pre></td></tr></table></figure><p>所以，我们需要在<code>另外两台机器</code>：<strong>192.168.80.152和192.168.80.153</strong>上执行命令,<strong>不要复制笔记，要复制自己的内容</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-40jgt6v1n59mb7aaw41yg10coxo2524tdgw2t6g2sorbiuflhj-5rymf91h0w2l9ic3adbkik39y 192.168.80.151:2377</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626165810134-1625530478555.png" alt="image-20210626165810134"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626165825582-1625530478555.png" alt="image-20210626165825582"></p><h3 id="3-2-3-查看swarm集群"><a href="#3-2-3-查看swarm集群" class="headerlink" title="3.2.3.查看swarm集群"></a>3.2.3.查看swarm集群</h3><p>在管理节点：<strong>192.168.80.151</strong>上执行命令，查看swarm集群信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node ls</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210626165907655-1625530478555.png" alt="image-20210626165907655"></p><p>此时，我们已经创建了一个最小的 <code>Swarm</code> 集群，包含一个管理节点和两个工作节点。</p><h2 id="3-3-部署单个服务"><a href="#3-3-部署单个服务" class="headerlink" title="3.3 部署单个服务"></a>3.3 部署单个服务</h2><p>通过<code>docker service create</code>命令，可以创建一个service，并在swarm集群中运行。</p><h3 id="3-3-1-创建服务"><a href="#3-3-1-创建服务" class="headerlink" title="3.3.1.创建服务"></a>3.3.1.创建服务</h3><p>在管理节点：<strong>192.168.80.151</strong>上运行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service create --replicas 3 -p 80:80 --name nginx nginx</span><br></pre></td></tr></table></figure><p>解读：</p><ul><li><code>--replicas 3</code>：代表这个服务要创建3个副本，也就是启动3个容器来运行nginx<strong>（工作节点都不用做任何工作，管理节点会均衡分发任务给当前集群下的工作节点）</strong></li></ul><p>如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109010318388-1625530478555.png" alt="image-20201109010318388"></p><h3 id="3-3-2-查看服务"><a href="#3-3-2-查看服务" class="headerlink" title="3.3.2 查看服务"></a>3.3.2 查看服务</h3><p>通过<code>docker service ls</code>可以查看服务状态：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109010353253-1625530478556.png" alt="image-20201109010353253"></p><p>通过<code>docker service ps nginx</code>命令可以查看nginx服务的运行节点信息：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626170156585-1625530478556.png" alt="image-20210626170156585"></p><p>在工作节点也可以通过docker ps 命令查看到已经跑起来的容器！</p><p>此时，我们通过浏览器访问：<a href="http://192.168.80.151或者http//192.168.80.152%E6%88%96%E8%80%85http://192.168.80.153%E9%83%BD%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E6%A0%B7%E7%9A%84%E6%95%88%E6%9E%9C%EF%BC%9A">http://192.168.80.151或者http://192.168.80.152或者http://192.168.80.153都可以看到一样的效果：</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626170235800-1625530478556.png" alt="image-20210626170235800"></p><p>注意：</p><p><strong>如果浏览器访问部署好的集群节点访问不了时，根据如下步骤配置IPV4的支持！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward=<span class="number">1</span>  #最下方添加这段代码</span><br><span class="line">#重启network服务</span><br><span class="line">systemctl restart network &amp;&amp; systemctl restart docker</span><br><span class="line">#查看是否修改成功 （备注：返回<span class="number">1</span>，就是成功）</span><br><span class="line">[root<span class="meta">@docker</span>-node2 ~]# sysctl net.ipv4.ip_forward</span><br><span class="line">net.ipv4.ip_forward = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>其它命令：</p><p>我们可以使用 <code>docker service scale</code> 对一个服务运行的容器数量进行伸缩。</p><p>当业务处于高峰期时，我们需要扩展服务运行的容器数量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale nginx=5</span><br></pre></td></tr></table></figure><p>当业务平稳时，我们需要减少服务运行的容器数量。<strong>（ps：缩减到两个，而不是减少两个哦）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale nginx=2</span><br></pre></td></tr></table></figure><p>使用 <code>docker service rm</code> 来从 <code>Swarm</code> 集群移除某个服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service rm nginx</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">当nginx减到两个时，有两个节点有部署服务，有一个节点没有部署服务，</span></span><br><span class="line"><span class="attr">但是他们是一个集群，在浏览器中访问任何一台节点地址，都能访问到nginx资源，这就是集群灵活的地方！</span></span><br></pre></td></tr></table></figure><h2 id="3-4-部署多个服务"><a href="#3-4-部署多个服务" class="headerlink" title="3.4 部署多个服务"></a>3.4 部署多个服务</h2><p><strong>使用 <code>docker service create</code> 一次只能部署一个服务</strong>，使用 <strong><code>docker-compose.yml</code> 我们可以一次启动多个关联的服务并部署到swarm集群</strong>中。</p><p>接下来，我们就来搭建一个多服务的集群，包括下面的服务：</p><ul><li><strong>web：</strong>就是之前在docker-compose案例中的Java项目，依赖于redis进行计数。部署3个</li><li><strong>redis：</strong>redis数据库，记录某个IP的访问次数，部署1个，在管理节点。</li><li><strong>nginx：</strong>nginx服务，对3个web服务反向代理，部署1个，在管理节点</li></ul><p>部署计划表：</p><table><thead><tr><th>服务名称</th><th>部署数量</th><th>节点IP</th></tr></thead><tbody><tr><td>web</td><td>3</td><td>192.168.80.151, 192.168.80.152, 192.168.80.153</td></tr><tr><td>redis</td><td>1</td><td>192.168.80.151</td></tr><tr><td>nginx</td><td>1</td><td>192.168.80.151</td></tr></tbody></table><p>结构如下：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201102105907797-1625530478556.png" alt="image-20201102105907797"></p><h3 id="3-4-1-准备镜像"><a href="#3-4-1-准备镜像" class="headerlink" title="3.4.1 准备镜像"></a>3.4.1 准备镜像</h3><p>首先，我们需要在3个docker节点上都准备java项目的镜像。</p><p><strong>1）上传</strong></p><p>找到之前准备的<code>docker-compose</code>这个文件夹:</p><p>分别上传到3<strong>个docker</strong>节点的 `/opt 目录：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626170803800-1625530478556.png" alt="image-20210626170803800"></p><p><strong>2）构建镜像</strong></p><p>然后分别在3个docker节点中运行下面的命令：</p><p>进入:  /opt/docker-compose ,执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t web:latest .</span><br></pre></td></tr></table></figure><p>通过<code>docker images</code>查看镜像：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626171123064-1625530478556.png" alt="image-20210626171123064"></p><h3 id="3-4-2-编写nginx配置"><a href="#3-4-2-编写nginx配置" class="headerlink" title="3.4.2 编写nginx配置"></a>3.4.2 编写nginx配置</h3><p>我们需要<strong>用nginx反向代理3个web节点</strong>，因此需要编写一个nginx的配置文件。</p><p><strong>nginx部署在管理节点</strong>：<code>192.168.80.151</code>，所以进入管理节点的<code>/opt/docker-compose/swarm</code>目录下，创建一个<code>nginx.conf</code>文件，内容如下：</p><p>/opt/docker-compose/swarm</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">default_type</span>  text/html; <span class="comment"># 默认响应类型是html</span></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">location</span> /hello &#123;</span><br><span class="line">            <span class="comment"># 代理/hello路径，会代理到web服务的9090端口</span></span><br><span class="line"><span class="attribute">proxy_pass</span> http://web:9090;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span>/usr/share/nginx/html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>proxy_pass http://web:9090</code>：会把请求代理到web服务的9090端口。<strong>Docker-Swarm会自动对3个docker节点的web服务负载均衡</strong></li></ul><h3 id="3-4-3-编写docker-compose"><a href="#3-4-3-编写docker-compose" class="headerlink" title="3.4.3 编写docker-compose"></a>3.4.3 编写docker-compose</h3><p>swarm下的docke-swarm会有一些变化，我们修改管理节点（192.168.80.151）下的<code>docker-compose.yml</code>文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;web:latest&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">3</span>  <span class="comment"># 三个副本</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:latest&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;nginx:latest&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker-compose/swarm/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">overlay:</span></span><br></pre></td></tr></table></figure><p>解读：</p><ul><li><strong>service：服务，包括3个</strong><ul><li><strong>web：java项目</strong><ul><li>image：指定web服务的镜像，就是刚刚自己打包的<code>web:latest</code></li><li>networks: 网络配置，这里是用了默认的overlay格式，是swarm模式的固定格式</li><li>deploy：swarm下的部署配置<ul><li>mode：replicated代表在多个节点上做备份</li><li>replicas: 3 ，<strong>备份数量为3，即web服务会部署到swarm集群的随机3个节点</strong></li></ul></li></ul></li><li><strong>redis：redis数据库</strong><ul><li>image: “redis:latest”，指定用到的镜像是redis最新镜像</li><li>deploy：swarm下的部署配置<ul><li>placement: 指定部署位置<ul><li> constraints: [node.role == manager] <strong>部署到manager节点</strong></li></ul></li></ul></li></ul></li><li><strong>nginx：nginx服务</strong><ul><li>image: “nginx:latest”，指定镜像名称</li><li>networks: 指定网络，这里是用了默认的overlay格式，是swarm模式的固定格式</li><li>ports: 对外暴露的端口为80</li><li>volumes: 数据卷，指定目录下的nginx.conf文件挂载到容器中</li><li>deploy: 部署，<strong>指定部署位置到manager节点</strong></li></ul></li></ul></li></ul><h3 id="3-4-4-部署运行"><a href="#3-4-4-部署运行" class="headerlink" title="3.4.4 部署运行"></a>3.4.4 部署运行</h3><p>多服务运行与单个服务命令不同，<strong>在管理节点</strong>（192.168.80.151）的docker-compose目录下运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml counter</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>docker stack</code>：就是通过docker-compose部署的命令</li><li><code>-c docker-compose.yml</code>：指定docker-compose文件位置</li><li><code>counter</code>：给部署的集群起个名字</li></ul><p>运行过程如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109193630473-1625530478556.png" alt="image-20201109193630473"></p><p>通过<code>docker stack ls</code>可以查看到当前集群信息：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109193723407-1625530478556.png" alt="image-20201109193723407"></p><p>通过<code>docker stack ps [集群名]</code> 可以查看集群中的服务信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stack ps counter</span><br><span class="line"><span class="comment"># 或者 docker stack services counter</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626171747386-1625530478556.png" alt="image-20210626171747386"></p><p>此时，访问浏览器：<a href="http://192.168.80.151/hello%E5%8D%B3%E5%8F%AF%EF%BC%9A">http://192.168.80.151/hello即可：</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626171903854-1625530478556.png" alt="image-20210626171903854"></p><p>整个访问流程详解：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">根据上面讲的，因为是集群（管理者，工作者），</span></span><br><span class="line"><span class="attr">无论访问哪一个节点（管理节点，工作节点），都会去找nginx（因为有配置nginx），</span></span><br><span class="line"><span class="meta">又因为nginx配置文件的hello路径配置定位到：proxy_pass</span> <span class="string">http://web:9090</span></span><br><span class="line"><span class="attr">那么，web服务所在的节点地址是集群中的哪个节点地址呢？？？不用我们管，nginx会帮我们均衡！</span></span><br></pre></td></tr></table></figure><p>此时，通过命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service logs -f counter_web  <span class="comment"># counter_web为我们的java项目服务</span></span><br></pre></td></tr></table></figure><p>可以查看运行日志：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109195354830-1625530478556.png" alt="image-20201109195354830"></p><p>多次访问99主节点，可以看到，Docker-Swarm会自己对3个web服务做负载均衡：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109195456557-1625530478556.png" alt="image-20201109195456557"></p><h1 id="4-持续集成-amp-持续部署"><a href="#4-持续集成-amp-持续部署" class="headerlink" title="4 持续集成&amp;持续部署"></a>4 持续集成&amp;持续部署</h1><h2 id="4-1-理解什么是持续集成-amp-持续部署"><a href="#4-1-理解什么是持续集成-amp-持续部署" class="headerlink" title="4.1 理解什么是持续集成&amp;持续部署"></a>4.1 理解什么是持续集成&amp;持续部署</h2><p>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件<br>开发的质量已经慢慢成为开发过程中不可回避的问题。互联网软件的开发和发布，已经形成了一套标准流程。</p><p>如: 在互联网企业中，每时每刻都有需求的变更，bug的修复， 为了将改动及时更新到生产服务器上，下面的图片我们需要每天执行N多次，<strong>开发人员完成代码自测后提交到git，然后需要将git中最新的代码生成镜像并部署到测试服务器，如果测试通过了还需要将最新代码部署到生产服务器。如果采用手动方式操作，那将会浪费大量的时间浪费在运维部署方面</strong>。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605489947242-1625530478557.png" alt="1605489947242"></p><p>现在的互联网企业，基本都会采用以下方案解决:</p><p><strong>持续集成（Continuous integration，简称 CI）。</strong></p><p><strong>持续部署（continuous deployment, 简称 CD）</strong></p><h3 id="4-1-1-持续集成"><a href="#4-1-1-持续集成" class="headerlink" title="4.1.1 持续集成"></a>4.1.1 持续集成</h3><p><strong>持续集成</strong> （Continuous integration，简称 CI） 指的是，频繁地（一天多次）<strong>将代码集成到主干</strong>。</p><p>它的好处主要有两个。</p><ol><li><p><strong>快速发现错误。</strong>每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。</p></li><li><p><strong>防止分支大幅偏离主干</strong>。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</p></li></ol><p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p><p>Martin Fowler 说过，”持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</p><p>与持续集成相关的，还有两个概念，分别是持续交付和持续部署。</p><h3 id="4-1-2-持续交付"><a href="#4-1-2-持续交付" class="headerlink" title="4.1.2 持续交付"></a>4.1.2 持续交付</h3><p>持续交付（Continuous delivery）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。</p><p>持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</p><h3 id="4-1-3-持续部署"><a href="#4-1-3-持续部署" class="headerlink" title="4.1.3 持续部署"></a>4.1.3 持续部署</h3><p>持续部署（continuous deployment）是持续交付的下一步，指的是代码通过评审以后，<strong>自动部署</strong>到生产环境。</p><p>持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</p><p>持续部署的前提是能自动化完成测试、构建、部署等步骤。</p><h3 id="4-1-4-演示流程说明"><a href="#4-1-4-演示流程说明" class="headerlink" title="4.1.4 演示流程说明"></a>4.1.4 演示流程说明</h3><p>为了保证团队开发人员提交代码的质量，减轻了软件发布时的压力；<br>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复<br>过程以节省时间、费用和工作量；接下来我们会演示一套基本的自动化持续集成和持续部署方案，来帮助大家理解互联网企业的软件部署方案。</p><p>流程如下:</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605837774557-1625530478557.png" alt="1605837774557"></p><p>实现流程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1.</span> <span class="string">开发人员将代码提交到 git 指定分支   如: dev</span></span><br><span class="line"><span class="meta">2.</span> <span class="string">git仓库触发push事件，发送webhooks通知到持续集成软件</span></span><br><span class="line"><span class="meta">3.</span> <span class="string">持续集成软件触发构建任务，对dev分支的代码进行构建、编译、单元测试</span></span><br><span class="line"><span class="meta">4.</span> <span class="string">如果构建失败，发送邮件提醒代码提交人员或管理员</span></span><br><span class="line"><span class="meta">5.</span> <span class="string">如果构建成功，最新代码将会被构建Docker镜像并上传到注册中心</span></span><br><span class="line"><span class="meta">6.</span> <span class="string">构建成功触发webhooks通知容器编排软件，进行服务升级</span></span><br><span class="line"><span class="meta">7.</span> <span class="string">容器编排软件，触发对应的服务升级任务， 将创建对应服务的新容器替换之前的容器</span></span><br><span class="line"><span class="meta">8.</span> <span class="string">完成最新代码的自动构建与自动部署，全程无工作人员干预</span></span><br></pre></td></tr></table></figure><p>要实现上面流程，我们需要了解两款新的软件   <strong><code>jenkins</code> 和 <code>rancher</code></strong></p><h2 id="4-2-CI-amp-CD-jenkins"><a href="#4-2-CI-amp-CD-jenkins" class="headerlink" title="4.2 CI&amp;CD jenkins"></a>4.2 CI&amp;CD jenkins</h2><h3 id="4-2-1-jenkins介绍"><a href="#4-2-1-jenkins介绍" class="headerlink" title="4.2.1 jenkins介绍"></a>4.2.1 jenkins介绍</h3><p>Jenkins，原名Hudson，2011年改为现在的名字，它 是一个开源的实现持续集成的<br>软件工具。官方网站：<a href="http://jenkins-ci.org/">http://jenkins-ci.org/</a> 。</p><p> Jenkins 能实施<strong>监控集成中存在的错误</strong>，提供详细的日志文件和提醒功能，还能用图<br>表的形式形象地展示项目构建的趋势和稳定性。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605852309418-1625530478557.png" alt="1605852309418"></p><p>  特点：</p><ul><li><strong>易配置</strong>：提供友好的GUI配置界面；</li><li><strong>变更支持</strong>：Jenkins能从代码仓库（Subversion/CVS）中获取并产生代码更新列表并<br>输出到编译输出信息中；<br>支持永久链接：用户是通过web来访问Jenkins的，而这些web页面的链接地址都是<br>永久链接地址，因此，你可以在各种文档中直接使用该链接；</li><li><strong>集成E-Mail/RSS/IM</strong>：当完成一次集成时，可通过这些工具实时告诉你集成结果（据<br>我所知，构建一次集成需要花费一定时间，有了这个功能，你就可以在等待结果过程<br>中，干别的事情）；</li><li><strong>JUnit/TestNG</strong>测试报告：也就是用以图表等形式提供详细的测试报表功能；</li><li><strong>支持分布式构建</strong>：Jenkins可以把集成构建等工作分发到多台计算机中完成；<br>文件指纹信息：Jenkins会保存哪次集成构建产生了哪些jars文件，哪一次集成构建使<br>用了哪个版本的jars文件等构建记录；</li><li><strong>支持第三方插件</strong>：使得 Jenkins 变得越来越强大</li></ul><h3 id="4-2-2-安装配置jenkins"><a href="#4-2-2-安装配置jenkins" class="headerlink" title="4.2.2 安装配置jenkins"></a>4.2.2 安装配置jenkins</h3><p>jenkins的官方文档中提供了多种安装方式，本文选择docker的安装方式来学习jenkins</p><h4 id="4-2-2-1-安装jenkins"><a href="#4-2-2-1-安装jenkins" class="headerlink" title="4.2.2.1 安装jenkins"></a>4.2.2.1 安装jenkins</h4><p>更改系统配置：</p><p><strong>强烈建议虚拟机内存升级到4G，CPU给4核心</strong></p><p><strong>强烈建议虚拟机内存升级到4G，CPU给4核心</strong></p><p><strong>强烈建议虚拟机内存升级到4G，CPU给4核心</strong></p><p><strong>下载jenkins</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins/jenkins:lts-centos7 </span><br><span class="line">建议windows下载完之后再传到centos系统中！</span><br><span class="line">docker load -i ziliao.tar</span><br><span class="line">docker images (查看上面解压出来的镜像)</span><br></pre></td></tr></table></figure><p><strong>创建jenkins容器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name myjenkins -p 8888:8080 --restart=always jenkins/jenkins:lts-centos7</span><br></pre></td></tr></table></figure><p><strong>查看jenkins启动日志</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f myjenkins</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210519212902939-1625530478557.png" alt="image-20210519212902939"></p><p>启动成功后 访问:</p><p><a href="http://192.168.80.151:8888/">http://192.168.80.151:8888</a></p><h4 id="4-2-2-2-解锁jenkins"><a href="#4-2-2-2-解锁jenkins" class="headerlink" title="4.2.2.2 解锁jenkins"></a>4.2.2.2 解锁jenkins</h4><p>第一次运行时，需要先解锁jenkins</p><p>具体步骤:</p><ol><li>去容器中 指定文件查看管理员密码 </li><li>将密码拷贝到文本框</li><li>点击继续即可</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605853229487-1625530478557.png" alt="1605853229487"></p><p><strong>密码在日志文件中已经打印，也可以根据提示在容器中获取</strong></p><p>具体解锁的管理员密码，在jenkins的安装目录中，因为我们是采用的容器安装，所以需要进入到容器中查看,命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入到jenkins容器</span></span><br><span class="line">docker exec -it myjenkins bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看密码</span></span><br><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将密码复制到上图管理员密码文本框，然后点击继续 完成解锁</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626172752249-1625530478557.png" alt="image-20210626172752249"></p><h4 id="4-2-2-3-安装推荐插件"><a href="#4-2-2-3-安装推荐插件" class="headerlink" title="4.2.2.3 安装推荐插件"></a>4.2.2.3 安装推荐插件</h4><p>jenkins的各项功能，依赖各种插件，可以手工选择安装也可以按照推荐安装</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626174213291-1625530478557.png" alt="image-20210626174213291"></p><p>我们课程主要使用git 和 chinese中文插件，所以搜索安装</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626174254482-1625530478557.png" alt="image-20210626174254482"></p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210626174400786-1625530478557.png" alt="image-20210626174400786"></p><p><strong>创建管理员用户</strong></p><p>插件安装完毕后，会进入到设置管理员用户页面，按自己需求设置就好，后续登录可以使用</p><p>设置完毕后点击保存并完成则进入到jenkins欢迎页</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605855220823-1625530478557.png" alt="1605855220823"></p><p>接下来，jenkins会让我们确认jenkins服务端的地址，直接下一步就好，</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626174604987-1625530478558.png" alt="image-20210626174604987"></p><p>然后点击开始使用jenkins进入到jenkins页面</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605855290646-1625530478558.png" alt="1605855290646"></p><p>进入到jenkins页面， 如果这个时候你的页面都是英文的话，重启下就好</p><p>(因为上面安装默认插件中已经安装了 中文插件)</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605855341537-1625530478558.png" alt="1605855341537"></p><h4 id="4-2-2-4-jenkins插件下载镜像加速"><a href="#4-2-2-4-jenkins插件下载镜像加速" class="headerlink" title="4.2.2.4 jenkins插件下载镜像加速"></a>4.2.2.4 jenkins插件下载镜像加速</h4><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626175433767-1625530478558.png" alt="image-20210626175433767"></p><p>更新地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626175748534-1625530478558.png" alt="image-20210626175748534"></p><h4 id="4-2-2-4-配置maven环境"><a href="#4-2-2-4-配置maven环境" class="headerlink" title="4.2.2.4 配置maven环境"></a><strong>4.2.2.4 配置maven环境</strong></h4><p>对于git中项目的构建我们要使用到maven命令，那么在jenkins中需要下载对应的maven插件，以及jenkins所在的容器也要有maven环境</p><p><strong>(1) 下载maven插件:</strong></p><p>点击系统管理 –&gt; 点击插件管理 –&gt; 进入到插件管理页面</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605855531632-1625530478558.png" alt="1605855531632"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605855558517-1625530478558.png" alt="1605855558517"></p><p>点击可选插件 –&gt; 输入maven –&gt; 勾选Maven Integration –&gt; 下载待重启安装</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605856223602-1625530478558.png" alt="1605856223602"></p><p>等待下载完成后，重启jenkins容器即可</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605856272958-1625530478558.png" alt="1605856272958"></p><p><strong>(2) 安装maven环境</strong></p><p>将资源中的maven安装包，拷贝到容器中解压即可，再配置好华为云镜像</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605511349048-1625530478558.png" alt="1605511349048"></p><p>将maven压缩包拷贝容器解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 目录根据自己实际情况来</span></span><br><span class="line">docker cp ./apache-maven-3.6.3-bin.tar.gz myjenkins:/var/jenkins_home/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入到容器</span></span><br><span class="line">docker exec -it -u root myjenkins bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将maven解压</span></span><br><span class="line">cd /var/jenkins_home</span><br><span class="line">tar -zxvf apache-maven-3.6.3-bin.tar.gz </span><br></pre></td></tr></table></figure><p>配置maven镜像</p><p>上传资料中的settings.xml文件到宿主机中并复制配置文件到容器中</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210626181013661-1625530478558.png" alt="image-20210626181013661"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp settings.xml myjenkins:/var/jenkins_home/apache-maven-3.6.3/conf/settings.xml</span><br></pre></td></tr></table></figure><p><strong>(3) jenkins中配置maven环境</strong></p><p>系统管理中点击全局工具配置</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605856856869-1625530478558.png" alt="1605856856869"></p><ol><li>新增maven</li><li>name随意,MAVEN_HOME: /var/jenkins_home/apache-maven-3.6.3</li><li>取消勾选自动安装</li><li>保存即可</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605857052762-1625530478558.png" alt="1605857052762"></p><p>完成后，我们就可以通过jenkins创建构建任务啦~~~</p><h4 id="Docker私有Registry"><a href="#Docker私有Registry" class="headerlink" title="Docker私有Registry"></a>Docker私有Registry</h4><p>（1）拉取私有仓库镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><p>（2）启动私有仓库容器   并 修改开机自启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id -p 5000:5000 --name myregistry --restart=always  registry</span><br></pre></td></tr></table></figure><p>（3）查看检验是否安装启动成功。</p><p>打开浏览器 输入地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.80.151:5000/v2/_catalog</span><br></pre></td></tr></table></figure><p>看到 {“repositories”:[]} ，表示私有仓库搭建成功并且内容为空</p><p><strong>设置当前docker信任私有注册中心</strong></p><p>（1）修改daemon.json，让 docker信任私有仓库地址</p><p>修改文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>添加如下内容，保存退出。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;192.168.80.151:5000&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：该文件中如有多个内容，比如有之前配置的私服镜像地址，用英文逗号隔开，参考如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://r2fftmt2.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;192.168.80.151:5000&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，ip地址要写自己的局域网ip地址哦</p><p>（2）重启docker 服务和私服</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="4-2-3-jenkins快速入门"><a href="#4-2-3-jenkins快速入门" class="headerlink" title="4.2.3 jenkins快速入门"></a>4.2.3 jenkins快速入门</h3><h4 id="4-2-3-1-准备要部署的工程"><a href="#4-2-3-1-准备要部署的工程" class="headerlink" title="4.2.3.1 准备要部署的工程"></a>4.2.3.1 准备要部署的工程</h4><p>准备工作，导入资源中的docker-demo工程, 在pom中添加docker-maven插件配置,</p><p>注意将IP部分变成自己虚拟机的IP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打jar包时如果不配置该插件，打出来的jar包没有清单文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插件网址:https://github.com/spotify/docker-maven-plugin --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>192.168.80.151:5000/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>java:8-alpine <span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>[&quot;java&quot;,&quot;-jar&quot;,&quot;/$&#123;project.build.finalName&#125;.jar&quot;]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                               <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://192.168.80.151:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面插件中的configuration标签配置<strong>指明打包命名格式，docker镜像命名，只要符合一定格式的命名才能上传到本地镜像仓库</strong>，注意<strong>要更改ip地址为自己的虚拟机ip地址</strong>！</p><p>将项目上传到码云(gitee.com)中(idea中快速将项目push到gitee中的方法请参考如下连接：)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2022/03/15/Day10-git/</span></span><br></pre></td></tr></table></figure><p>Git中的地址: <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#101;&#101;&#46;&#99;&#x6f;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#101;&#101;&#46;&#99;&#x6f;&#x6d;</a>:taft31/docker-demo.git</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210626182453657-1625530478558.png" alt="image-20210626182453657"></p><h4 id="4-2-3-2-创建maven构建任务"><a href="#4-2-3-2-创建maven构建任务" class="headerlink" title="4.2.3.2 创建maven构建任务"></a>4.2.3.2 创建maven构建任务</h4><p><strong>(1) 新建jenkins任务</strong></p><p>在jenkins的首页的第一个页签就是用于构建任务，点击新建任务:</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605857248023-1625530478559.png" alt="1605857248023"></p><p>定义任务名名称，勾选构建模板 保存任务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626182544621-1625530478559.png" alt="image-20210626182544621"></p><p><strong>(2) 设置任务的构建信息:</strong></p><p><strong>描述信息设置</strong></p><p>如可以写成如下描述信息哈：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">拉取Gitee上的代码，并调用maven插件达成jar包，再将打好的包做成镜像，推送到本地镜像仓库。</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605857417849-1625530478559.png" alt="1605857417849"></p><p>**源码设置 **</p><p> jenkins可以根据配置的源码地址获取源码，来用于构建，配置如下:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1.</span> <span class="string">选择git仓库</span></span><br><span class="line"><span class="meta">2.</span> <span class="string">设置git仓库地址 (将上面push的仓库地址填进去)</span></span><br><span class="line"><span class="meta">3.</span> <span class="string">如果是私有仓库需要添加凭证</span></span><br><span class="line"><span class="meta">4.</span> <span class="string">选择仓库分支</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605857556647-1625530478559.png" alt="1605857556647"></p><p><strong>构建触发器:</strong> </p><p>什么情况可以触发此任务，或者定时触发此任务，<strong>暂不设置</strong></p><p><strong>构建设置</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. Pre Steps 构建的前置任务，可以在构建执行前触发一些通知或脚本的执行</span><br><span class="line"><span class="number">2</span>. build 要执行的构建任务</span><br><span class="line"><span class="number">3</span>. PostSteps 构建的后置任务，可以在完成构建后触发的一些通知或脚本的执行</span><br></pre></td></tr></table></figure><p>构建任务配置如下:</p><p><code>Root POM</code>:  本次构建要使用的git仓库中的pom文件</p><p><code>Goals and options</code>: 要执行的mvn命令  不用写前面的mvn</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> maven命令</span> </span><br><span class="line">clean package -DskipTests docker:build -DpushImage</span><br><span class="line"><span class="meta">#</span><span class="bash">意思是 依次进行: 清除 打包 跳过单元测试 远程构建镜像  上传镜像到注册中心</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605857730695-1625530478559.png" alt="1605857730695"></p><p><strong>构建结果通知</strong></p><p>可以将构建结果，通知给配置的管理员或触发此任务的代码上传人员，本文不配置</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605857813161-1625530478559.png" alt="1605857813161"></p><p><strong>保存任务</strong></p><p>点击保存即可</p><p><strong>构建前要确认docker的2375端口是开放</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑此文件</span></span><br><span class="line">vi /lib/systemd/system/docker.service</span><br><span class="line"><span class="comment"># 修改此行配置</span></span><br><span class="line">ExecStart=/usr/bin/dockerd <span class="literal">-H</span> tcp://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2375</span> <span class="literal">-H</span> unix:///var/run/docker.sock <span class="literal">-H</span> tcp://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">7654</span></span><br><span class="line"><span class="comment"># 重新加配置文件并重启docker</span></span><br><span class="line">systemctl daemon<span class="literal">-reload</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="4-2-3-3-执行maven构建任务"><a href="#4-2-3-3-执行maven构建任务" class="headerlink" title="4.2.3.3 执行maven构建任务"></a>4.2.3.3 执行maven构建任务</h4><p><strong>（1）执行构建任务</strong></p><p>当我们保存完毕任务之后，会进入到任务的详情页面， 点击立即构建即可执行该构建任务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605858494552-1625530478559.png" alt="1605858494552"></p><p>或者返回首页面板，也能看到任务列表，列表后面的图标也可以用于构建</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605858525007-1625530478559.png" alt="1605858525007"></p><p><strong>（2） 查看任务执行日志</strong></p><p>点击构建后，在页面左下会出现任务的执行状态，点击进度条进入到任务构建详情中</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605858565132-1625530478559.png" alt="1605858565132"></p><p>可以通过控制台输出页面，查看控制台信息，和我们在idea控制中看到的信息类似</p><p>第一次执行会下载很多maven依赖</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605858604063-1625530478559.png" alt="1605858604063"></p><p>实际上，jenkins是从我们配置的git中拉取了源码信息，在使用maven的命令进行构建</p><p><strong>（3） 查看任务构建结果</strong></p><p>控制台出现  <code>BUILD SUCCESS</code> 代表构建成功啦</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605858832629-1625530478559.png" alt="1605858832629"></p><p>对应的虚拟机中已经有了这个镜像</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626200126181-1625530478559.png" alt="image-20210626200126181"></p><p>对应的注册中心中也上传了此镜像</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626200220451-1625530478559.png" alt="image-20210626200220451"></p><p>OK 那么接下来基于这个镜像构建出容器，我们就完成了部署。</p><h2 id="4-3-容器编排平台-Rancher"><a href="#4-3-容器编排平台-Rancher" class="headerlink" title="4.3 容器编排平台 Rancher"></a>4.3 容器编排平台 Rancher</h2><h3 id="4-3-1-Rancher介绍"><a href="#4-3-1-Rancher介绍" class="headerlink" title="4.3.1 Rancher介绍"></a>4.3.1 Rancher介绍</h3><p>前面我们了解了容器编排的概念，如: docker 的Swarm以及  google的k8s, 但是这些软件的入门门槛很高，需要我们记住很多命令，那么下面我们介绍一款软件 Rancher，它可以基于上面的容器编排软件，提供可视化的操作页面 实现容器的编排和管理。</p><p>Rancher是一个开源的企业级全栈化容器部署及管理平台。Rancher为容器提供一揽<br>子基础架构服务：CNI兼容的网络服务、存储服务、主机管理、负载均衡、防护墙……<br>Rancher让上述服务跨越公有云、私有云、虚拟机、物理机环境运行，真正实现一键式应<br>用部署和管理。<br> <a href="https://www.cnrancher.com/">https://www.cnrancher.com/</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605858952789-1625530478560.png" alt="1605858952789"></p><h3 id="4-3-1-Rancher快速入门"><a href="#4-3-1-Rancher快速入门" class="headerlink" title="4.3.1 Rancher快速入门"></a>4.3.1 Rancher快速入门</h3><h4 id="4-3-1-1-安装Rancher"><a href="#4-3-1-1-安装Rancher" class="headerlink" title="4.3.1.1 安装Rancher"></a>4.3.1.1 安装Rancher</h4><p>下载rancher</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rancher/server</span><br></pre></td></tr></table></figure><p>创建rancher容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=myrancher -p 9099:8080 rancher/server</span><br></pre></td></tr></table></figure><p>查看rancher启动日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f myrancher</span><br></pre></td></tr></table></figure><p>访问Rancher:  <a href="http://192.168.80.151:9099/">http://192.168.80.151:9099/</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859055814-1625530478560.png" alt="1605859055814"></p><p>页面右下角 点击下拉框 选择简体中文</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859091466-1625530478560.png" alt="1605859091466"></p><h4 id="4-3-1-2-配置环境"><a href="#4-3-1-2-配置环境" class="headerlink" title="4.3.1.2 配置环境"></a>4.3.1.2 配置环境</h4><p>在互联网项目中，可能会有多套部署环境 如: 测试环境 、 生产环境，不同的环境下会有不同的服务器 Rancher支持多环境多服务器管理</p><p>默认 我们处于default的默认环境中，点击环境管理可以创建环境</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859140946-1625530478560.png" alt="1605859140946"></p><p>点击添加环境可以定义一个环境</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859175441-1625530478560.png" alt="1605859175441"></p><p>构建环境时，需要设置环境的名称、环境描述、及环境模板</p><p>可以看到 环境模板支持多套，所谓的环境模板就是底层使用哪种编排工具</p><p>rancher支持 cattle、swarm、k8s、mesos等,默认使用cattle</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859229797-1625530478560.png" alt="1605859229797"></p><p>入门案例我们使用内置的Cattle模板即可，添加后列表出现刚创建的环境</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859274224-1625530478560.png" alt="1605859274224"></p><p>切换到prod环境中</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859327642-1625530478560.png" alt="1605859327642"></p><h4 id="4-3-1-3-配置主机"><a href="#4-3-1-3-配置主机" class="headerlink" title="4.3.1.3 配置主机"></a>4.3.1.3 配置主机</h4><p>在不同的环境中可以会有不同的服务器，要想让我们的rancher能够管理这些服务器，需要在基础架构中添加主机</p><p><strong>（1） 添加主机</strong></p><p>点击基础架构下拉框中的<code>主机</code> –&gt; 在点击<code>添加主机</code> </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859380135-1625530478560.png" alt="1605859380135"></p><p><strong>(2) 复制脚本</strong></p><p>确认站点地址是否正确，然后点击保存（端口9099）</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626203241022-1625530478560.png" alt="image-20210626203241022"></p><p>复制脚本:</p><ol><li>要管理的主机IP  如: 要管理 192.168.80.151的虚拟机，因此<strong>下面的红圈1 中的ip要作修改</strong></li><li>复制脚本，将脚本复制到192.168.80.151的机器上执行</li><li>执行完毕后关闭此页面，等待主机连接</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626220858903-1625530478560.png" alt="image-20210626220858903"></p><p><strong>(3) 到主机中执行脚本</strong></p><p>如: 到我的192.168.80.151的虚拟机中 执行如下命令:</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859702912-1625530478560.png" alt="1605859702912"></p><p>运行完毕后，在rancher的页面上，关闭窗口 可以在主机列表中看到对应服务器信息</p><p>（需要等待主机中下载镜像及启动相关容器）</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626221247380-1625530478560.png" alt="image-20210626221247380"></p><p>显示<code>active</code> 代表服务器当前状态可用， 如果报红 或显示<code>reconnecting</code>则为重连状态，等待一会即可</p><h4 id="4-3-1-4-管理容器"><a href="#4-3-1-4-管理容器" class="headerlink" title="4.3.1.4 管理容器"></a>4.3.1.4 管理容器</h4><p>连接成功后，我们可以点击<code>基础架构</code>下的<code>容器</code> 进行容器的管理</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210626204226263-1625530478561.png" alt="image-20210626204226263"></p><p>说明:</p><p>（1）页面提供了对应主机上的容器管理功能，额外创建的容器都是系统容器，用于rancher的管理，可以通过 取消勾选显示系统容器进行过滤</p><p>（2）<strong>点击添加容器，可以通过简单配置构建一个容器</strong></p><p>​    如: 构建一个redis容器</p><ol><li>点击添加容器</li><li>配置容器名称、描述、镜像、端口映射即可</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605860222158-1625530478561.png" alt="1605860222158"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605860305990-1625530478561.png" alt="1605860305990"></p><p>（3）容器列表结尾提供了容器的 重启、删除、查看日志等功能</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605860374959-1625530478561.png" alt="1605860374959"></p><h3 id="4-3-3-Rancher中的应用与服务"><a href="#4-3-3-Rancher中的应用与服务" class="headerlink" title="4.3.3 Rancher中的应用与服务"></a>4.3.3 Rancher中的应用与服务</h3><h4 id="4-3-3-1-应用与服务的概念"><a href="#4-3-3-1-应用与服务的概念" class="headerlink" title="4.3.3.1 应用与服务的概念"></a>4.3.3.1 应用与服务的概念</h4><p>上面的容器管理，<strong>仅仅是提供了容器的管理页面</strong>，但对于企业级的项目部署 会涉及到<strong>集群扩容缩容、服务升级、负载均衡等等高可用的管理</strong>。需要在Rancher中通过定义应用与服务的设置来管理。</p><p>应用(Project): 代表一个项目     如: 电商项目</p><p>服务(Service):代表一个服务     如: 电商项目下的订单微服务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605841694459-1625530478561.png" alt="1605841694459"></p><h4 id="4-3-3-2-创建应用与服务"><a href="#4-3-3-2-创建应用与服务" class="headerlink" title="4.3.3.2 创建应用与服务"></a>4.3.3.2 创建应用与服务</h4><p>和我们学习的swarm类似，我们可以创建一个应用<code>project</code>  一个应用下可以包含多个服务</p><p><code>service</code> , 一个服务下可以运行多个相同的容器<code>container</code></p><p><strong>创建应用</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605860470039-1625530478561.png" alt="1605860470039"></p><p>点击到环境首页，创建应用 ： 应用名称、描述  点击创建</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605860527144-1625530478561.png" alt="1605860527144"></p><p><strong>添加服务</strong></p><p>在刚创建好的myPro应用中添加服务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605860574808-1625530478561.png" alt="1605860574808"></p><p>设置服务信息: </p><ol><li>容器名称(rancher中显示的名称)</li><li>描述</li><li>构建创建前拉取最新镜像</li><li>镜像的名称</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626224317219-1625530478561.png" alt="image-20210626224317219"></p><p>点击创建，可以看到容器已经运行</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626223532122-1624718132586-1625530478561.png" alt="image-20210626223532122"></p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626223551798-1625530478561.png" alt="image-20210626223551798"></p><p>在docker中也有对应的服务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605861203059-1625530478561.png" alt="1605861203059"></p><h4 id="4-3-3-3-演示服务扩容"><a href="#4-3-3-3-演示服务扩容" class="headerlink" title="4.3.3.3 演示服务扩容"></a>4.3.3.3 演示服务扩容</h4><p>点击左侧的 数量加减 会自动对服务进行扩容 缩容</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626224416672-1625530478561.png" alt="image-20210626224416672"></p><h4 id="4-3-3-4-演示服务负载均衡"><a href="#4-3-3-4-演示服务负载均衡" class="headerlink" title="4.3.3.4 演示服务负载均衡"></a>4.3.3.4 演示服务负载均衡</h4><p>不过我们当前服务集群 <strong>并没有配置端口映射</strong>，因此<strong>外部无法访问，需要配置负载均衡</strong></p><p>回到服务列表，添加负载均衡</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605861417894-1625530478561.png" alt="1605861417894"></p><p>配置负载均衡</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      <span class="meta">1.负载均衡名称</span> : <span class="string">lbdockerDemo</span></span><br><span class="line"><span class="meta">​</span>      <span class="string">2.负载均衡描述 : dockerDemo的负载均衡</span></span><br><span class="line"><span class="meta">​</span>      <span class="string">3.访问端口:   9001</span></span><br><span class="line"><span class="meta">​</span>      <span class="string">4.目标服务: myPro/dockerDemo</span></span><br><span class="line"><span class="meta">​</span>      <span class="string">5.映射服务容器端口: 9090</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605861694062-1625530478562.png" alt="1605861694062"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626224727637-1625530478562.png" alt="image-20210626224727637"></p><p>访问测试:  <a href="http://192.168.80.151:9001/hello">http://192.168.80.151:9001/hello</a>  多次点击</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626224903555-1624718944104-1625530478562.png" alt="image-20210626224903555"></p><p>依次查看3个容器的日志</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862093699-1625530478562.png" alt="1605862093699"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862150892-1625530478562.png" alt="1605862150892"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862172571-1625530478562.png" alt="1605862172571"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862198473-1625530478562.png" alt="1605862198473"></p><p>​    已经实现了负载均衡效果~~~~</p><p><strong>应用服务部署总结：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">由于一开始需要本地仓库，因此registry 容器早就开始运行了</span></span><br><span class="line"><span class="attr">2</span> <span class="string">上面也添加了redis容器</span></span><br><span class="line"><span class="attr">3</span> <span class="string">添加应用，应用中添加并运行服务镜像</span></span><br><span class="line"><span class="meta">（我们idea</span> <span class="string">编写的项目，然后通过 gitee，jenkins等配置生成了镜像）</span></span><br><span class="line"><span class="attr">4</span> <span class="string">添加负载均衡（相当于添加了nginx容器）</span></span><br><span class="line"><span class="attr">5</span> <span class="string">通过 虚拟机ip+访问端口 来访问nginx，然后自动均衡负载访问到我们应用中的服务</span></span><br><span class="line"><span class="attr">6</span> <span class="string">通过rancher 管理平台方便实现扩容，减容。</span></span><br></pre></td></tr></table></figure><p><strong>同样的效果，对比前面学习的方法</strong>：将每一个镜像拉取下来，自己的项目镜像上传到虚拟机，然后通过docker编排文件构建应用服务，通过命令行扩容，缩容等操作，<strong>利用idea+git+ jenkins+rancher 来可视化部署，高端多了！</strong></p><h4 id="4-3-3-5-演示服务升级"><a href="#4-3-3-5-演示服务升级" class="headerlink" title="4.3.3.5 演示服务升级"></a>4.3.3.5 演示服务升级</h4><p>访问当前服务 <a href="http://192.168.206.66:9001/hello">http://192.168.206.66:9001/hello</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626225151134-1625530478562.png" alt="image-20210626225151134"></p><p>变更当前代码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862350110-1625530478562.png" alt="1605862350110"></p><p>push提交到git</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862398258-1625530478562.png" alt="1605862398258"></p><p>执行jenkins构建任务，将最新的代码打包成新镜像，并上传到注册中心</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862470028-1625530478562.png" alt="1605862470028"></p><p>构建成功后，在rancher中进行服务升级 在详情页面或列表页面都有向上的箭头代表服务升级</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862595138-1625530478562.png" alt="1605862595138"></p><p>填写升级信息， 启动行为勾选：先启动再停止</p><p>这样会先根据最新镜像创建容器，创建完毕后，再将之前的容器删除，来完成服务的更新</p><p><strong>点击升级</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626230551086-1625530478562.png" alt="image-20210626230551086"></p><p>最后，点击完成升级 旧的容器将被删除掉</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626230746572-1625530478562.png" alt="image-20210626230746572"></p><p>刷新页面，可以看到服务已经升级完毕</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210626231005676-1625530478562.png" alt="image-20210626231005676"></p><p>也就意味着完成服务的一键部署。</p><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">上面应用服务的部署可能让你觉得利用jenkins</span> <span class="string">+ rancher 也不过如此，</span></span><br><span class="line"><span class="meta">那么，这里的升级：idea中push+jenkins中构建+rancher中升级</span> <span class="string">几个步骤操作 </span></span><br><span class="line"><span class="attr">会让你更能体验到这种构建部署的便捷之处</span></span><br></pre></td></tr></table></figure><h2 id="4-4-自动集成及自动部署"><a href="#4-4-自动集成及自动部署" class="headerlink" title="4.4 自动集成及自动部署"></a>4.4 自动集成及自动部署</h2><p>上面的演示中，当我们<strong>把idea上的代码提交到git中之后， 手动的点击了jenkins中的构建任务，完成镜像的构建和上传注册中心。 然后，在到rancher软件中，根据最新的镜像完成一键升级</strong>。 <strong>那么自动化的流程就是让这两部也变成自动的</strong>（牛逼），我们只需要将代码上传到指定分支将会自动化的完成构建与升级部署。</p><h3 id="4-4-1-自动通知jenkins触发任务"><a href="#4-4-1-自动通知jenkins触发任务" class="headerlink" title="4.4.1 自动通知jenkins触发任务"></a>4.4.1 自动通知jenkins触发任务</h3><p>主流的git软件都提供了webhooks功能(web钩子), 通俗点说就是<strong>git在发生某些事件的时候可以通过POST请求调用我们指定的URL路径</strong>，那在这个案例中，我们可以<strong>在push事件上指定jenkins的任务通知路径</strong>。</p><h4 id="4-4-1-1-jenkins配置Gitee插件"><a href="#4-4-1-1-jenkins配置Gitee插件" class="headerlink" title="4.4.1.1 jenkins配置Gitee插件"></a>4.4.1.1 jenkins配置Gitee插件</h4><p><strong>jenkins下载webhooks插件</strong></p><p>gitee插件介绍: <a href="https://gitee.com/help/articles/4193#article-header0">https://gitee.com/help/articles/4193#article-header0</a></p><p>jenkins也支持通过url路径来启动任务，具体设置方法: </p><p>jenkins的默认下载中仅下载了github的通知触发,我们需要先下载一个插件</p><p>(1) 下载gitee插件</p><p>系统管理–&gt;插件管理–&gt;可选插件–&gt;搜索 <code>Gitee</code> 下载–&gt;重启jenkins</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605863059692-1625530478562.png" alt="1605863059692"></p><p>(2) gitee生成访问令牌</p><p>   首先，去下面网址生成gitee访问令牌</p><p>   <a href="https://gitee.com/profile/personal_access_tokens">https://gitee.com/profile/personal_access_tokens</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605863332642-1625530478563.png" alt="1605863332642"></p><p> 添加令牌描述，提交，弹出框输入密码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605863372394-1625530478563.png" alt="1605863372394"></p><p>复制令牌</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605863446752-1625530478563.png" alt="1605863446752"></p><p>（3） jenkins中配置Gitee</p><p>系统管理 –&gt; 系统配置 –&gt; Gitee配置</p><ol><li>链接名: gitee</li><li>域名: <a href="https://gitee.com/">https://gitee.com</a></li><li>令牌: Gitee Api 令牌   (需要点击添加按下图配置)</li><li>配置好后测试连接</li><li>测试成功后保存配置</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605864020886-1625530478563.png" alt="1605864020886"></p><p>令牌配置: </p><ol><li>类型选择Gitee API令牌</li><li>私人令牌: 将码云中生成的令牌复制过来</li><li>点击添加</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605863756159-1625530478563.png" alt="1605863756159"> </p><h4 id="4-4-1-2-修改jenkins构建任务"><a href="#4-4-1-2-修改jenkins构建任务" class="headerlink" title="4.4.1.2 修改jenkins构建任务"></a>4.4.1.2 修改jenkins构建任务</h4><p><strong>修改配置接收webhooks通知</strong>（<strong>前面是手动构建，这里配置后，gitee仓库被push后就会通知jenkins进行构建！</strong>）</p><p>任务详情中点击配置来修改任务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605864126335-1625530478563.png" alt="1605864126335"></p><p>点击构建触发器页签,勾选<code>Gitee webhook</code></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626235155347-1625530478563.png" alt="image-20210626235155347"></p><p>生成Gitee Webhook密码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605864316485-1625530478563.png" alt="1605864316485"></p><p>保存好触发路径和webhook密码，到gitee中配置webhook通知</p><p>如: </p><p><strong>触发路径:</strong>  <a href="http://192.168.80.151:8888/gitee-project/dockerDemo">http://192.168.80.151:8888/gitee-project/dockerDemo</a></p><p><strong>触发密码:</strong> a591baa17f90e094500e0a11b831af9c</p><h4 id="4-4-1-3-Gitee添加webhooks通知"><a href="#4-4-1-3-Gitee添加webhooks通知" class="headerlink" title="4.4.1.3 Gitee添加webhooks通知"></a>4.4.1.3 Gitee添加webhooks通知</h4><p><strong>gitee仓库配置webhooks通知</strong></p><p>点击仓库页面的管理</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626235434055-1625530478563.png" alt="image-20210626235434055"></p><p>添加webhook</p><ol><li>点击webhooks菜单，然后点击添加</li><li>配置jenkins通知地址</li><li>填写密码</li><li>点击添加</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626235610214-1625530478563.png" alt="image-20210626235610214"></p><p>但在点击添加时，提示失败 <strong>gitee中需要配置一个公有IP或域名</strong>，这里我们可以<strong>通过内网穿透来解决</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605877091111-1625530478563.png" alt="1605877091111"></p><h4 id="4-4-1-4-配置内网穿透"><a href="#4-4-1-4-配置内网穿透" class="headerlink" title="4.4.1.4 配置内网穿透"></a>4.4.1.4 配置内网穿透</h4><p>内网穿透的小工具很多，这里面我们使用 natapp提供的内网穿透功能</p><p>在资料中找到natapp,上传整个目录到linux，</p><p>并进入natapp，执行命令</p><p>授权</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x natapp </span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./natapp</span><br></pre></td></tr></table></figure><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210627000411799-1625530478563.png" alt="image-20210627000411799"></p><p>在gitee中将上面的<strong>外网地址替换之前的ip和端口部分</strong>，再次添加，</p><p>如：<a href="http://hgyyd3.natappfree.cc/gitee-project/dockerDemo">http://hgyyd3.natappfree.cc/gitee-project/dockerDemo</a></p><p>上面截图中，Forwarding 后面的域名替代就好！</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626235755243-1625530478563.png" alt="image-20210626235755243"></p><p>添加成功</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626235815645-1624723096121-1625530478563.png" alt="image-20210626235815645"></p><h4 id="4-4-1-5-测试自动构建"><a href="#4-4-1-5-测试自动构建" class="headerlink" title="4.4.1.5 测试自动构建"></a>4.4.1.5 测试自动构建</h4><p>添加完毕后测试一下:</p><p>点击webhooks,发送测试请求</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627000626447-1624723586914-1625530478563.png" alt="image-20210627000626447"></p><p>点击查看更多结果，200代表请求成功</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627000651626-1625530478563.png" alt="image-20210627000651626"></p><p>不过这个时候jenkins中的任务是没被触发的，我们尝试从idea中上传代码，看看任务是否自动构建</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627002215324-1625530478563.png" alt="image-20210627002215324"></p><p>上传代码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605865274308-1625530478564.png" alt="1605865274308"></p><p>代码上传到git后，自动触发了jenkins中的构建任务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627000820697-1625530478564.png" alt="image-20210627000820697"></p><p>上面配置完了jenkins：idea 项目push到gitee后自动构建镜像，下面配置Rancher，出发自动升级！</p><h3 id="4-4-2-Jenkins自动通知Rancher触发升级"><a href="#4-4-2-Jenkins自动通知Rancher触发升级" class="headerlink" title="4.4.2 Jenkins自动通知Rancher触发升级"></a>4.4.2 Jenkins自动通知Rancher触发升级</h3><h4 id="4-4-2-1-Rancher配置接收器"><a href="#4-4-2-1-Rancher配置接收器" class="headerlink" title="4.4.2.1 Rancher配置接收器"></a>4.4.2.1 Rancher配置接收器</h4><p>在rancher中，配置接收器来接收webhooks通知</p><p>在api下拉菜单下，点击webhooks添加接收器</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605865468861-1625530478564.png" alt="1605865468861"></p><ol><li><p>名称:自定义即可</p></li><li><p>类型：支持扩容，缩容，和服务升级 我们演示服务升级</p></li><li><p>参数格式: Docker Hub即可</p></li><li><p>镜像标签: 对应镜像的标签</p></li><li><p>服务选择器: 我们的服务也可以设置标签， 如: <strong>当前标签service=demo</strong></p></li></ol><p>​      <strong>当这个接收器被触发时，所有服务包含此标签的 service=demo 则会触发服务升级</strong></p><ol start="6"><li>后面参数的概念:</li></ol><p><strong>先启动一个新容器， 启动成功后停止老容器，最后删除老容器完成升级</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627001042333-1625530478564.png" alt="image-20210627001042333"></p><p>保存，复制触发url路径</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605865748613-1625530478564.png" alt="1605865748613"></p><p>触发路径:</p><p><a href="http://192.168.80.151:9099/v1-webhooks/endpoint?key=ajTY9M3GYC4geiy255UtQ0XuxluQtidIvp8mav96&amp;projectId=1a7">http://192.168.80.151:9099/v1-webhooks/endpoint?key=ajTY9M3GYC4geiy255UtQ0XuxluQtidIvp8mav96&amp;projectId=1a7</a></p><h4 id="4-4-2-2-服务添加标签"><a href="#4-4-2-2-服务添加标签" class="headerlink" title="4.4.2.2 服务添加标签"></a>4.4.2.2 服务添加标签</h4><p>最后，<strong>给我们的服务设置标签，删除之前的服务，重新添加服</strong>务 ，<strong>以及负载均衡器</strong></p><p>注意在下面标签下的内容，一致要和接收器设置的标签和值一致此服务才会触发升级</p><p><strong>标签:  service      docker</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627001326171-1625530478564.png" alt="image-20210627001326171"></p><h4 id="4-4-2-3-测试服务升级"><a href="#4-4-2-3-测试服务升级" class="headerlink" title="4.4.2.3 测试服务升级"></a>4.4.2.3 测试服务升级</h4><p>通过POSTMAN进行测试</p><p>在触发请求时还需要携带一些必要的参数:</p><ol><li>镜像的标签 tag: 这个标签的值要和上面接收器中的标签值一致才可以触发</li><li>仓库的名称 repo_name: 镜像的仓库名称</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;push_data&quot;: &#123;</span><br><span class="line">        &quot;tag&quot;: &quot;1.0.0-SNAPSHOT&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;repository&quot;: &#123;</span><br><span class="line">        &quot;repo_name&quot;: &quot;192.168.80.151:5000/docker-demo&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210627001556812-1625530478564.png" alt="image-20210627001556812"></p><p>点击完毕后观察rancher中服务列表变化，会发现服务将自动完成升级</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627002142463-1625530478564.png" alt="image-20210627002142463"></p><h4 id="4-4-2-4-配置jenkins的后置处理"><a href="#4-4-2-4-配置jenkins的后置处理" class="headerlink" title="4.4.2.4 配置jenkins的后置处理"></a>4.4.2.4 配置jenkins的后置处理</h4><p>最后，让jenkins来触发rancher,修改jenkins中的配置</p><ol><li>在构建完毕的后置处理步骤中添加 执行Shell脚本</li><li>选择Run only if build succeeds 仅在构建成功时运行下面脚本</li><li>执行脚本</li></ol><p>注意: 调用的路径是我们接收器所生成的路径</p><p>tag: 是镜像的tag标签</p><p>repo_name: 是对应镜像的仓库名称</p><p>要根据自己的实际情况修改哦~~~~~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://192.168.80.151:9099/v1-webhooks/endpoint?key=KoA2vrxiAycydPNDwlb3DLkZ5Kghdshs58lN2lia&amp;projectId=1a13&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;Content-Type:application/json&quot;</span> \</span><br><span class="line">-d <span class="string">&quot;&#123;\&quot;push_data\&quot;: &#123;\&quot;tag\&quot;: \&quot;1.0.0-SNAPSHOT\&quot;&#125;,\&quot;repository\&quot;: &#123;\&quot;repo_name\&quot;: \&quot;192.168.80.151:5000/docker-demo\&quot;&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627002516069-1625530478564.png" alt="image-20210627002516069"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627002549319-1625530478564.png" alt="image-20210627002549319"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627002730322-1625530478564.png" alt="image-20210627002730322"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627002831259-1625530478564.png" alt="image-20210627002831259"></p><h3 id="4-4-3-自动集成-amp-自动部署演示"><a href="#4-4-3-自动集成-amp-自动部署演示" class="headerlink" title="4.4.3 自动集成&amp;自动部署演示"></a><strong>4.4.3 自动集成&amp;自动部署演示</strong></h3><p>操作步骤:</p><ol><li>变更代码并上传到git </li><li>注意jenkins任务是否被触发</li><li>注意rancher自动升级是否被触发</li><li>访问项目查看变更是否生效</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/sqmxvOw23L-1625530478564.gif" alt="sqmxvOw23L"></p><p>OK，如果成功了，说明你只需要提交代码就可以了， 和部署相关的 <strong>编译，测试，构建，上传镜像，服务升级，扩容缩容</strong>全部交给工具吧~~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker高级&quot;&gt;&lt;a href=&quot;#Docker高级&quot; class=&quot;headerlink&quot; title=&quot;Docker高级&quot;&gt;&lt;/a&gt;Docker高级&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;学习目标&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="Docker Compose" scheme="http://example.com/tags/Docker-Compose/"/>
    
    <category term="Docker Swarm" scheme="http://example.com/tags/Docker-Swarm/"/>
    
    <category term="jenkins" scheme="http://example.com/tags/jenkins/"/>
    
    <category term="Rancher" scheme="http://example.com/tags/Rancher/"/>
    
  </entry>
  
  <entry>
    <title>numpy-小练习</title>
    <link href="http://example.com/2022/05/23/numpy-%E5%B0%8F%E7%BB%83%E4%B9%A0/"/>
    <id>http://example.com/2022/05/23/numpy-%E5%B0%8F%E7%BB%83%E4%B9%A0/</id>
    <published>2022-05-23T15:20:55.000Z</published>
    <updated>2022-05-24T13:02:36.105Z</updated>
    
    <content type="html"><![CDATA[<p>以练习为导向，感觉更能吸收，就是做题，以解决问题为导向去学。</p><p>问题：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 打印当前Numpy版本</span></span><br><span class="line"><span class="comment">#2 构造一个全零的矩阵，并打印其占用的内存大小</span></span><br><span class="line"><span class="comment">#3 打印一个函数的帮助文档，比如numpy.add</span></span><br><span class="line"><span class="comment">#4 创建一个10-49的数组，并将其倒序排列</span></span><br><span class="line"><span class="comment">#5 找到一个数组中不为0的索引</span></span><br><span class="line"><span class="comment">#6 随机构造一个3*3矩阵，并打印其中最大与最小值</span></span><br><span class="line"><span class="comment">#7 构造一个5*5的矩阵，令其值都为1，并在最外层加上一圈0</span></span><br><span class="line"><span class="comment">#8 构建一个shape为（6，7，8）的矩阵，并找到第100个元素的索引值</span></span><br><span class="line"><span class="comment">#9 对一个5*5的矩阵做归一化操作 ###############归一化！！！</span></span><br><span class="line"><span class="comment">#9 找到两个数组中相同的值</span></span><br><span class="line"><span class="comment">#10 得到今天 明天 昨天的日期   牛，但是有啥用</span></span><br><span class="line"><span class="comment">#11 得到一个月中所有的天   牛，但是有啥用</span></span><br><span class="line"><span class="comment">#12 得到数组的整数部分</span></span><br><span class="line"><span class="comment">#13 构造一个数组，让它不能被改变</span></span><br><span class="line"><span class="comment">#14 打印大数据的部分值，全部值</span></span><br><span class="line"><span class="comment">#15 找到在一个数组中，最接近一个数的索引</span></span><br><span class="line"><span class="comment">#16 32位float类型和32位int类型转换</span></span><br><span class="line"><span class="comment">#17 #### 打印数组元素位置坐标与数值  ：枚举操作</span></span><br><span class="line"><span class="comment">#18按照数组的某一列进行排序,按照某一行排序似乎不行啊。！解答：需要转置</span></span><br><span class="line"><span class="comment">#19 按照数组的某一列进行倒序排序</span></span><br><span class="line"><span class="comment">#20 第一行从小到大排序：</span></span><br><span class="line"><span class="comment">    # *1，先把矩阵转置，这样本来是行的数据就变成列的数据，列的数据就变成行的数据</span></span><br><span class="line"><span class="comment">    # *2，对转置后的矩阵进行按某列排序</span></span><br><span class="line"><span class="comment">    # *3. 排序后的矩阵在做一次转置，转回来后的矩阵就是原矩阵按某行排序的矩阵了。</span></span><br><span class="line"><span class="comment">#21 统计数组中每个数值出现的次数</span></span><br><span class="line"><span class="comment">#22  如何对一个四维数组的最后两维来求和</span></span><br><span class="line"><span class="comment">#23 交换矩阵中的两行，两列。</span></span><br><span class="line"><span class="comment">#24 #### 找到一个数组中最常出现的数字   先统计，然后argmax。</span></span><br><span class="line"><span class="comment">#25 #### 快速查找最大的 n个数。</span></span><br><span class="line"><span class="comment">#26 去除掉一个数组中，所有元素都相同的数据</span></span><br><span class="line"><span class="comment"># 27   切片  （左闭右开）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>答案代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ## Numpy练习题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1 打印当前Numpy版本</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">print</span> (np.__version__)</span><br><span class="line"><span class="comment"># 1.21.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 构造一个全零的矩阵，并打印其占用的内存大小</span></span><br><span class="line"></span><br><span class="line">z = np.zeros((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;%d bytes&#x27;</span>%(z.size * z.itemsize))</span><br><span class="line"><span class="comment"># 200 bytes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 打印一个函数的帮助文档，比如numpy.add</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">help</span>(np.info(np.add)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4 创建一个10-49的数组，并将其倒序排列</span></span><br><span class="line"></span><br><span class="line">tang_array = np.arange(<span class="number">10</span>,<span class="number">50</span>,<span class="number">1</span>)</span><br><span class="line">tang_array = tang_array[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26</span></span><br><span class="line"><span class="string"> 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5 找到一个数组中不为0的索引</span></span><br><span class="line"><span class="built_in">print</span>(np.nonzero([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1234</span>,<span class="number">0</span>,<span class="number">1</span>]))</span><br><span class="line"><span class="comment"># (array([ 0,  1,  2,  3,  4,  8, 10], dtype=int64),)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6 随机构造一个3*3矩阵，并打印其中最大与最小值</span></span><br><span class="line">tang_array = np.random.random((<span class="number">3</span>,<span class="number">3</span>)) <span class="comment"># 3,3用括号括起来</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">min</span>())</span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">max</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.08211621080378706</span></span><br><span class="line"><span class="string">0.8640808100395988</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7 构造一个5*5的矩阵，令其值都为1，并在最外层加上一圈0</span></span><br><span class="line">tang_array = np.ones((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">tang_array = np.pad(tang_array,pad_width = <span class="number">1</span>,mode = <span class="string">&#x27;constant&#x27;</span>,constant_values = <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1. 1. 1. 1. 1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1. 1. 1. 1. 1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1. 1. 1. 1. 1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1. 1. 1. 1. 1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1. 1. 1. 1. 1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#print (help(np.pad))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#8 构建一个shape为（6，7，8）的矩阵，并找到第100个元素的索引值</span></span><br><span class="line"><span class="built_in">print</span>(np.unravel_index(<span class="number">100</span>,(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)))</span><br><span class="line"><span class="comment"># (1, 5, 4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9 对一个5*5的矩阵做归一化操作 ###########################归一化！！！</span></span><br><span class="line">tang_array = np.random.random((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">tang_max = tang_array.<span class="built_in">max</span>()</span><br><span class="line">tang_min = tang_array.<span class="built_in">min</span>()</span><br><span class="line">tang_array = (tang_array-tang_min)/(tang_max - tang_min)</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0.19461805 0.03000903 0.23819004 0.92564896 0.        ]</span></span><br><span class="line"><span class="string"> [0.79544296 0.43644027 1.         0.0806151  0.47350085]</span></span><br><span class="line"><span class="string"> [0.08006743 0.59546849 0.42222949 0.04184319 0.54103702]</span></span><br><span class="line"><span class="string"> [0.7829385  0.3421277  0.02534175 0.86729348 0.37760322]</span></span><br><span class="line"><span class="string"> [0.83126287 0.9005157  0.75409234 0.37235985 0.47388025]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9 找到两个数组中相同的值</span></span><br><span class="line">z1 = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>) </span><br><span class="line">z2 = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (z1)</span><br><span class="line"><span class="built_in">print</span> (z2)</span><br><span class="line"><span class="built_in">print</span> (np.intersect1d(z1,z2))<span class="comment"># 即在z1，又在z2 的数字</span></span><br><span class="line"><span class="comment"># print(help(np.intersect1d))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[0 1 3 7 3 7 4 2 3 9]</span></span><br><span class="line"><span class="string">[6 5 6 8 6 7 9 9 7 4]</span></span><br><span class="line"><span class="string">[4 7 9]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#10 得到今天 明天 昨天的日期   牛，但是有啥用</span></span><br><span class="line">yesterday = np.datetime64(<span class="string">&#x27;today&#x27;</span>,<span class="string">&#x27;D&#x27;</span>) - np.timedelta64(<span class="number">1</span>,<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">today = np.datetime64(<span class="string">&#x27;today&#x27;</span>,<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">tommorow = np.datetime64(<span class="string">&#x27;today&#x27;</span>,<span class="string">&#x27;D&#x27;</span>) + np.timedelta64(<span class="number">1</span>,<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(yesterday)</span><br><span class="line"><span class="built_in">print</span>(today)</span><br><span class="line"><span class="built_in">print</span>(tommorow)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2022-05-23</span></span><br><span class="line"><span class="string">2022-05-24</span></span><br><span class="line"><span class="string">2022-05-25</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#11 得到一个月中所有的天</span></span><br><span class="line">alldays = np.arange(<span class="string">&#x27;2017-10&#x27;</span>,<span class="string">&#x27;2017-11&#x27;</span>,dtype=<span class="string">&#x27;datetime64[D]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(alldays)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;2017-10-01&#x27; &#x27;2017-10-02&#x27; &#x27;2017-10-03&#x27; &#x27;2017-10-04&#x27; &#x27;2017-10-05&#x27;</span></span><br><span class="line"><span class="string"> &#x27;2017-10-06&#x27; &#x27;2017-10-07&#x27; &#x27;2017-10-08&#x27; &#x27;2017-10-09&#x27; &#x27;2017-10-10&#x27;</span></span><br><span class="line"><span class="string"> &#x27;2017-10-11&#x27; &#x27;2017-10-12&#x27; &#x27;2017-10-13&#x27; &#x27;2017-10-14&#x27; &#x27;2017-10-15&#x27;</span></span><br><span class="line"><span class="string"> &#x27;2017-10-16&#x27; &#x27;2017-10-17&#x27; &#x27;2017-10-18&#x27; &#x27;2017-10-19&#x27; &#x27;2017-10-20&#x27;</span></span><br><span class="line"><span class="string"> &#x27;2017-10-21&#x27; &#x27;2017-10-22&#x27; &#x27;2017-10-23&#x27; &#x27;2017-10-24&#x27; &#x27;2017-10-25&#x27;</span></span><br><span class="line"><span class="string"> &#x27;2017-10-26&#x27; &#x27;2017-10-27&#x27; &#x27;2017-10-28&#x27; &#x27;2017-10-29&#x27; &#x27;2017-10-30&#x27;</span></span><br><span class="line"><span class="string"> &#x27;2017-10-31&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#12 得到数组的整数部分</span></span><br><span class="line">z = np.random.uniform(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[5.27873394 9.01058594 6.38898515 1.72810253 1.2273001  8.39480848</span></span><br><span class="line"><span class="string"> 9.72538005 9.89814708 0.59691519 7.43148905]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(np.floor(z))</span><br><span class="line"><span class="comment"># [5. 9. 6. 1. 1. 8. 9. 9. 0. 7.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#13 构造一个数组，让它不能被改变</span></span><br><span class="line">z = np.zeros(<span class="number">5</span>)</span><br><span class="line">z.flags.writeable = <span class="literal">False</span></span><br><span class="line"><span class="comment"># z[0] = 1  #会报错。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#14 打印大数据的部分值，全部值</span></span><br><span class="line">z = np.zeros((<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">np.set_printoptions(threshold=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0. 0. 0. ... 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. ... 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. ... 0. 0. 0.]</span></span><br><span class="line"><span class="string"> ...</span></span><br><span class="line"><span class="string"> [0. 0. 0. ... 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. ... 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. ... 0. 0. 0.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">np.set_printoptions(threshold=z.size)</span><br><span class="line"><span class="comment"># np.set_printoptions(threshold=15)  #还是只显示一部分</span></span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(z.shape)</span><br><span class="line"><span class="comment"># (15, 15)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(z.shape))</span><br><span class="line"><span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(z.shape[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(z.shape[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 15</span></span><br><span class="line"><span class="comment"># 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#15 找到在一个数组中，最接近一个数的索引</span></span><br><span class="line">z = np.arange(<span class="number">100</span>)</span><br><span class="line">v = np.random.uniform(<span class="number">0</span>,<span class="number">100</span>) <span class="comment">#######这里是[0-100)中随机产生一个数哦，而不是很多个数。</span></span><br><span class="line"><span class="built_in">print</span> (v)</span><br><span class="line"><span class="comment"># 29.4891706982606</span></span><br><span class="line">index = (np.<span class="built_in">abs</span>(z-v)).argmin()</span><br><span class="line"><span class="built_in">print</span> (z[index])</span><br><span class="line"><span class="comment"># 29</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#16 32位float类型和32位int类型转换</span></span><br><span class="line">z = np.arange(<span class="number">10</span>,dtype=np.int32)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="built_in">print</span> (z.dtype)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="string">int32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">z = z.astype(np.float32)</span><br><span class="line"><span class="comment"># z.dtype = np.float32   # #会以科学计数法输出，好奇怪。</span></span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="built_in">print</span> (z.dtype)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[0. 1. 2. 3. 4. 5. 6. 7. 8. 9.]</span></span><br><span class="line"><span class="string">float32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#17 #### 打印数组元素位置坐标与数值  ：枚举操作</span></span><br><span class="line">z = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> np.ndenumerate(z):</span><br><span class="line">    <span class="built_in">print</span> (index,value)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(0, 0) 0</span></span><br><span class="line"><span class="string">(0, 1) 1</span></span><br><span class="line"><span class="string">(0, 2) 2</span></span><br><span class="line"><span class="string">(1, 0) 3</span></span><br><span class="line"><span class="string">(1, 1) 4</span></span><br><span class="line"><span class="string">(1, 2) 5</span></span><br><span class="line"><span class="string">(2, 0) 6</span></span><br><span class="line"><span class="string">(2, 1) 7</span></span><br><span class="line"><span class="string">(2, 2) 8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#18 按照数组的某一列进行排序,按照某一行排序似乎不行啊。！解答：需要转置：</span></span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span> (z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 6 0]</span></span><br><span class="line"><span class="string"> [7 1 6]</span></span><br><span class="line"><span class="string"> [5 2 4]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">a = z[:,<span class="number">1</span>].argsort()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1 2 0]</span></span><br><span class="line"><span class="built_in">print</span> (z[a])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[7 1 6]</span></span><br><span class="line"><span class="string"> [5 2 4]</span></span><br><span class="line"><span class="string"> [1 6 0]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># a = z[1,:].argsort()</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"><span class="comment"># print(z[a])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#19 按照数组的某一列进行倒序排序</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">a = np.array(a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a[np.argsort(-a[:,<span class="number">1</span>])])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[2 3 1]</span></span><br><span class="line"><span class="string"> [5 6 1]</span></span><br><span class="line"><span class="string"> [3 2 3]</span></span><br><span class="line"><span class="string"> [0 0 0]]</span></span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="string">[[5 6 1]</span></span><br><span class="line"><span class="string"> [2 3 1]</span></span><br><span class="line"><span class="string"> [3 2 3]</span></span><br><span class="line"><span class="string"> [0 0 0]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#20 第一行从小到大排序：</span></span><br><span class="line"><span class="comment"># *1，先把矩阵转置，这样本来是行的数据就变成列的数据，列的数据就变成行的数据</span></span><br><span class="line"><span class="comment"># *2，对转置后的矩阵进行按某列排序</span></span><br><span class="line"><span class="comment"># *3. 排序后的矩阵在做一次转置，转回来后的矩阵就是原矩阵按某行排序的矩阵了。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=[[<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>]]</span><br><span class="line">a =np.array(a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.T[np.argsort(a.T[:,<span class="number">0</span>])].T)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[3 2 3]</span></span><br><span class="line"><span class="string"> [0 0 0]</span></span><br><span class="line"><span class="string"> [2 3 1]</span></span><br><span class="line"><span class="string"> [5 6 1]]</span></span><br><span class="line"><span class="string">----------------------------</span></span><br><span class="line"><span class="string">[[2 3 3]</span></span><br><span class="line"><span class="string"> [0 0 0]</span></span><br><span class="line"><span class="string"> [3 2 1]</span></span><br><span class="line"><span class="string"> [6 5 1]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#21 统计数组中每个数值出现的次数</span></span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,size = <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="comment"># [4 0 6 8 1 8 6 0 1 4]</span></span><br><span class="line">np.set_printoptions(threshold=<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(np.bincount(z))     <span class="comment">#######从0，到最大的个数进行统计。</span></span><br><span class="line"><span class="comment"># [2 2 0 0 2 0 2 0 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#22  如何对一个四维数组的最后两维来求和</span></span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line">res = z.<span class="built_in">sum</span>(axis=(-<span class="number">2</span>,-<span class="number">1</span>)) <span class="comment">############求和结果肯定也是减少了两个维度啦啦啦。</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[85 64 75 62]</span></span><br><span class="line"><span class="string"> [76 70 61 89]</span></span><br><span class="line"><span class="string"> [86 96 93 90]</span></span><br><span class="line"><span class="string"> [52 84 80 83]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#23 交换矩阵中的两行，两列。</span></span><br><span class="line">z = np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 0  1  2  3  4]</span></span><br><span class="line"><span class="string"> [ 5  6  7  8  9]</span></span><br><span class="line"><span class="string"> [10 11 12 13 14]</span></span><br><span class="line"><span class="string"> [15 16 17 18 19]</span></span><br><span class="line"><span class="string"> [20 21 22 23 24]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">z[[<span class="number">0</span>,<span class="number">1</span>]] = z[[<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 5  6  7  8  9]</span></span><br><span class="line"><span class="string"> [ 0  1  2  3  4]</span></span><br><span class="line"><span class="string"> [10 11 12 13 14]</span></span><br><span class="line"><span class="string"> [15 16 17 18 19]</span></span><br><span class="line"><span class="string"> [20 21 22 23 24]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">z = np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 0  1  2  3  4]</span></span><br><span class="line"><span class="string"> [ 5  6  7  8  9]</span></span><br><span class="line"><span class="string"> [10 11 12 13 14]</span></span><br><span class="line"><span class="string"> [15 16 17 18 19]</span></span><br><span class="line"><span class="string"> [20 21 22 23 24]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">z[:,[<span class="number">2</span>,<span class="number">3</span>]] = z[:,[<span class="number">3</span>,<span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 0  1  3  2  4]</span></span><br><span class="line"><span class="string"> [ 5  6  8  7  9]</span></span><br><span class="line"><span class="string"> [10 11 13 12 14]</span></span><br><span class="line"><span class="string"> [15 16 18 17 19]</span></span><br><span class="line"><span class="string"> [20 21 23 22 24]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#24 #### 找到一个数组中最常出现的数字   先统计，然后argmax。</span></span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">bin</span> = np.bincount(z)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>)</span><br><span class="line"><span class="comment"># [2 6 7 5 4 2 5 3 8 8]</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">bin</span>.argmax())</span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#25 #### 快速查找最大的 n个数。</span></span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,<span class="number">1000</span>)</span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span> (z[np.argpartition(-z,n)[:n]])</span><br><span class="line"><span class="comment"># [99 99 99 99 99]</span></span><br><span class="line"></span><br><span class="line">z = np.arange(<span class="number">1000</span>)</span><br><span class="line">np.random.shuffle(z)</span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span> (z[np.argpartition(-z,n)[:n]])</span><br><span class="line"><span class="comment"># [998 997 999 996 995]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#26 去除掉一个数组中，所有元素都相同的数据</span></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">all</span>(a == b)) <span class="comment">#全部相同才会返回True。</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">any</span>(a == b))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">np.set_printoptions(threshold=<span class="number">10000</span>)</span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">3</span>,(<span class="number">10</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 1]</span></span><br><span class="line"><span class="string"> [0 1 1]</span></span><br><span class="line"><span class="string"> [2 1 2]</span></span><br><span class="line"><span class="string"> [0 0 0]</span></span><br><span class="line"><span class="string"> [1 1 1]</span></span><br><span class="line"><span class="string"> [2 0 0]</span></span><br><span class="line"><span class="string"> [2 1 1]</span></span><br><span class="line"><span class="string"> [1 0 2]</span></span><br><span class="line"><span class="string"> [1 0 2]</span></span><br><span class="line"><span class="string"> [1 1 0]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 27   切片  （左闭右开）</span></span><br><span class="line"><span class="built_in">print</span>(z[:,<span class="number">1</span>:])<span class="comment">#打印第二列到最后一列</span></span><br><span class="line"><span class="built_in">print</span>(z[:,:-<span class="number">1</span>])<span class="comment">#打印第1列到倒数第二列</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 1]</span></span><br><span class="line"><span class="string"> [0 2]</span></span><br><span class="line"><span class="string"> [2 0]</span></span><br><span class="line"><span class="string"> [1 0]</span></span><br><span class="line"><span class="string"> [1 2]</span></span><br><span class="line"><span class="string"> [1 2]</span></span><br><span class="line"><span class="string"> [1 1]</span></span><br><span class="line"><span class="string"> [0 1]</span></span><br><span class="line"><span class="string"> [2 1]</span></span><br><span class="line"><span class="string"> [0 1]]</span></span><br><span class="line"><span class="string">[[0 1]</span></span><br><span class="line"><span class="string"> [2 0]</span></span><br><span class="line"><span class="string"> [0 2]</span></span><br><span class="line"><span class="string"> [1 1]</span></span><br><span class="line"><span class="string"> [2 1]</span></span><br><span class="line"><span class="string"> [0 1]</span></span><br><span class="line"><span class="string"> [1 1]</span></span><br><span class="line"><span class="string"> [1 0]</span></span><br><span class="line"><span class="string"> [0 2]</span></span><br><span class="line"><span class="string"> [0 0]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以练习为导向，感觉更能吸收，就是做题，以解决问题为导向去学。&lt;/p&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="http://example.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy-读写</title>
    <link href="http://example.com/2022/05/23/numpy-%E8%AF%BB%E5%86%99/"/>
    <id>http://example.com/2022/05/23/numpy-%E8%AF%BB%E5%86%99/</id>
    <published>2022-05-23T15:20:14.000Z</published>
    <updated>2022-05-24T13:05:05.892Z</updated>
    
    <content type="html"><![CDATA[<p>numpy与txt文件的交互，以及保存为npy，npz文件（npz文件其实就是对一个或者多个npy文件进行压缩）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 使用Numpy读写数据     </span></span><br><span class="line"><span class="comment"># #### 哇哇哇，这样子就能写出来一个文件了。</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;hui.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;1 2 3 4 5 6\n2 3 5 8 7 9&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ####  常规做法，先读取数据（每一行数据转为数组，然后再转为np.array类型）。</span></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hui.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        fileds = line.split()</span><br><span class="line">        cur_data = [<span class="built_in">float</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> fileds]</span><br><span class="line">        data.append(cur_data)</span><br><span class="line">data = np.array(data)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1. 2. 3. 4. 5. 6.]</span></span><br><span class="line"><span class="string"> [2. 3. 5. 8. 7. 9.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #### 高级做法，直接用np提供的loadtxt 函数</span></span><br><span class="line">data = np.loadtxt(<span class="string">&#x27;hui.txt&#x27;</span>) <span class="comment">####默认以空隔为分隔符。</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1. 2. 3. 4. 5. 6.]</span></span><br><span class="line"><span class="string"> [2. 3. 5. 8. 7. 9.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;hui1.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;1,2,3,4,5,6\n2,3,5,8,7,9&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(<span class="string">&#x27;hui1.txt&#x27;</span>,delimiter = <span class="string">&#x27;,&#x27;</span>) <span class="comment">########指定分隔符。</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1. 2. 3. 4. 5. 6.]</span></span><br><span class="line"><span class="string"> [2. 3. 5. 8. 7. 9.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># * &#x27;hui2.txt&#x27;:路径最好放到和代码一起</span></span><br><span class="line"><span class="comment"># * skiprows : 去掉几行               ps：行数从1 开始，列数从0开始</span></span><br><span class="line"><span class="comment"># * delimiter = &#x27;,&#x27; :分隔符</span></span><br><span class="line"><span class="comment"># * usecols = (0,1,4) ：指定使用哪几列</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;hui2.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;x,y,z,w,a,b\n1,2,3,4,5,6\n2,3,5,8,7,9&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line">data = np.loadtxt(<span class="string">&#x27;hui2.txt&#x27;</span>,delimiter = <span class="string">&#x27;,&#x27;</span>,skiprows = <span class="number">1</span>,usecols=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">#去掉第一行,只使用2,3,4列，注意这个参数不能用切片。</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[2. 3. 4.]</span></span><br><span class="line"><span class="string"> [3. 5. 8.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 保存 文件</span></span><br><span class="line">tang_array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">np.savetxt(<span class="string">&#x27;hui31.txt&#x27;</span>,tang_array) <span class="comment">############默认为科学计数法，然后间隔是一个空隔。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;  hui31.txt 文件内容</span></span><br><span class="line"><span class="string">1.000000000000000000e+00 2.000000000000000000e+00 3.000000000000000000e+00</span></span><br><span class="line"><span class="string">4.000000000000000000e+00 5.000000000000000000e+00 6.000000000000000000e+00</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">np.savetxt(<span class="string">&#x27;hui32.txt&#x27;</span>,tang_array,fmt=<span class="string">&#x27;%d&#x27;</span>) <span class="comment">#######改为int型。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; hui32.txt 内容</span></span><br><span class="line"><span class="string">1 2 3</span></span><br><span class="line"><span class="string">4 5 6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">np.savetxt(<span class="string">&#x27;hui33.txt&#x27;</span>,tang_array,fmt=<span class="string">&#x27;%d&#x27;</span>,delimiter = <span class="string">&#x27;,&#x27;</span>) <span class="comment">####分隔符改为 逗号。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;hui33.txt 内容</span></span><br><span class="line"><span class="string">1,2,3</span></span><br><span class="line"><span class="string">4,5,6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">np.savetxt(<span class="string">&#x27;hui34.txt&#x27;</span>,tang_array,fmt=<span class="string">&#x27;%.2f&#x27;</span>,delimiter = <span class="string">&#x27;,&#x27;</span>) <span class="comment">########保留两位小数点的浮点数。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;hui34.txt 内容</span></span><br><span class="line"><span class="string">1.00,2.00,3.00</span></span><br><span class="line"><span class="string">4.00,5.00,6.00</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 读写array结构</span></span><br><span class="line"><span class="comment"># #### 1 文件格式为：npy。  只有一个np.array</span></span><br><span class="line">tang_array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">np.save(<span class="string">&#x27;gaominghui.npy&#x27;</span>,tang_array)</span><br><span class="line"></span><br><span class="line">tang = np.load(<span class="string">&#x27;gaominghui.npy&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tang)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #### 2 文件格式为npz  将不同的np.array压缩到一起。访问时，用变量名</span></span><br><span class="line"><span class="comment"># #### 本质就是一个压缩文件，压缩包 tang.npz 里面包含两个文件：a.npy以及b.npy</span></span><br><span class="line">tang_array2 = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(tang_array2)</span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line">np.savez(<span class="string">&#x27;tang.npz&#x27;</span>,a=tang_array,b=tang_array2)</span><br><span class="line"></span><br><span class="line">data = np.load(<span class="string">&#x27;tang.npz&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data.keys())<span class="comment">#######输出[&#x27;b&#x27;,&#x27;a&#x27;]才对的。但是输出：KeysView(&lt;numpy.lib.npyio.NpzFile object at 0x000002831749B5C0&gt;)</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;numpy与txt文件的交互，以及保存为npy，npz文件（npz文件其实就是对一个或者多个npy文件进行压缩）&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="http://example.com/tags/numpy/"/>
    
  </entry>
  
</feed>
