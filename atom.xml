<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-01T09:32:46.400Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>高明辉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>乐优商城项目-用户中心-JWT登录01</title>
    <link href="http://example.com/2022/07/01/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-JWT%E7%99%BB%E5%BD%9501/"/>
    <id>http://example.com/2022/07/01/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-JWT%E7%99%BB%E5%BD%9501/</id>
    <published>2022-07-01T09:28:17.000Z</published>
    <updated>2022-07-01T09:32:46.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">了解什么是无状态登录</span></span><br><span class="line"><span class="meta">-</span> <span class="string">了解JWT原理</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现登录授权功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现首页登录状态判断</span></span><br></pre></td></tr></table></figure><h1 id="1-无状态登录原理"><a href="#1-无状态登录原理" class="headerlink" title="1.无状态登录原理"></a>1.无状态登录原理</h1><h2 id="1-1-什么是有状态？"><a href="#1-1-什么是有状态？" class="headerlink" title="1.1.什么是有状态？"></a>1.1.什么是有状态？</h2><p>有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如tomcat中的session。</p><p>例如登录：用户登录后，我们把登录者的信息保存在服务端session中，并且给用户一个cookie值，记录对应的session。然后下次请求，用户携带cookie值来，我们就能识别到对应session，从而找到用户的信息。</p><p><strong>关于cookie跟session的描述：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/weixin_62304567/article/details/122205094</span></span><br></pre></td></tr></table></figure><p>缺点是什么？</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">服务端保存大量数据，增加服务端压力</span></span><br><span class="line"><span class="meta">-</span> <span class="string">服务端保存用户状态，无法进行水平扩展</span></span><br><span class="line"><span class="meta">-</span> <span class="string">客户端请求依赖服务端，多次请求必须访问同一台服务器</span></span><br></pre></td></tr></table></figure><h2 id="1-2-什么是无状态"><a href="#1-2-什么是无状态" class="headerlink" title="1.2.什么是无状态"></a>1.2.什么是无状态</h2><p>微服务集群中的每个服务，对外提供的都是Rest风格的接口。而Rest风格的一个最重要的规范就是：服务的无状态性，即：</p><ul><li><strong>服务端不保存任何客户端请求者信息</strong></li><li>客户端的每次请求必须具备<code>自描述信息</code>，通过这些信息识别客户端身份</li></ul><p>带来的好处是什么呢？</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">客户端请求不依赖服务端的信息，任何多次请求不需要必须访问到同一台服务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">服务端的集群和状态对客户端透明</span></span><br><span class="line"><span class="meta">-</span> <span class="string">服务端可以任意的迁移和伸缩</span></span><br><span class="line"><span class="meta">-</span> <span class="string">减小服务端存储压力</span></span><br></pre></td></tr></table></figure><h2 id="1-3-如何实现无状态"><a href="#1-3-如何实现无状态" class="headerlink" title="1.3.如何实现无状态"></a>1.3.如何实现无状态</h2><p>无状态登录的流程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证</span></span><br><span class="line"><span class="meta">-</span> <span class="string">以后每次请求，客户端都携带认证的token</span></span><br><span class="line"><span class="meta">-</span> <span class="string">服务端对token进行解密，判断是否有效。</span></span><br></pre></td></tr></table></figure><p>流程图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527300483893.png" alt="1527300483893"></p><p>整个登录过程中，最关键的点是什么？</p><p><strong>token的安全性</strong></p><p>token是识别客户端身份的唯一标示，如果加密不够严密，被人伪造那就完蛋了。</p><p>采用何种方式加密才是安全可靠的呢？</p><p>我们将采用<code>JWT</code>来生成token，保证token的安全性</p><h2 id="1-4-JWT"><a href="#1-4-JWT" class="headerlink" title="1.4.JWT"></a>1.4.JWT</h2><h3 id="1-4-1-简介"><a href="#1-4-1-简介" class="headerlink" title="1.4.1.简介"></a>1.4.1.简介</h3><p>JWT，全称是Json Web Token， 是JSON风格轻量级的授权和身份认证规范，可实现无状态、分布式的Web应用授权；官网：<a href="https://jwt.io/">https://jwt.io</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527301027008.png" alt="1527301027008"></p><p>GitHub上jwt的java客户端：<a href="https://github.com/jwtk/jjwt">https://github.com/jwtk/jjwt</a></p><h3 id="1-4-2-数据格式"><a href="#1-4-2-数据格式" class="headerlink" title="1.4.2.数据格式"></a>1.4.2.数据格式</h3><p>JWT包含三部分数据：</p><ul><li><p><strong>1 Header：头部，通常头部有两部分信息：</strong></p><ul><li>token类型，这里是JWT</li><li>签名算法，自定义</li></ul><p>我们会对头部进行base64加密（可解密），得到第一部分数据</p></li><li><p><strong>2 Payload：载荷，就是有效数据，一般包含下面信息：</strong></p><ul><li>标准载荷：JWT规定的信息，jwt的元数据：<ul><li>JTI: JWT的id，当前jwt的唯一标识（像身份证号）</li><li>IAT:  issue at 签发时间 </li><li>EXP：过期时间</li><li>SUB：签发人</li><li>…</li></ul></li><li>自定义载荷：<ul><li>用户身份信息，（注意，这里因为采用base64加密，可解密，因此不要存放敏感信息）</li></ul></li></ul><p>这部分也会采用base64加密，得到第二部分数据</p></li><li><p><strong>3 Signature：签名，是整个数据的认证信息。</strong>一般根据前两步的数据，再加上服务的的密钥（secret）（不要泄漏，最好周期性更换），通过加密算法生成。用于验证整个数据完整和可靠性</p></li></ul><p>生成的数据格式：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527322512370.png" alt="1527322512370"></p><p>可以看到分为3段，每段就是上面的一部分数据。</p><h2 id="1-5-JWT登录流程"><a href="#1-5-JWT登录流程" class="headerlink" title="1.5.JWT登录流程"></a>1.5.JWT登录流程</h2><p>登录一般包含授权、鉴权两部分：</p><ul><li><p>登录：也就是授权，authorize –&gt; authorization 授权</p></li><li><p>验证登录：也就是鉴权，authenticate –&gt; authentication 鉴权</p></li></ul><p>流程图如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200614172855833.png" alt="image-20200614172855833"></p><ul><li><p>授权流程authorize：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1、用户请求登录，携带用户名密码到`授权中心`</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2、`授权中心`携带用户名密码，到`用户中心`查询用户</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3、查询如果正确，`生成JWT`凭证</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4、把JWT写入用户cookie，这里的cookie就是令牌的意思。</span></span><br></pre></td></tr></table></figure></li><li><p>鉴权流程authenticate：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1、用户请求某微服务功能，携带JWT</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2、微服务验证JWT是否有效</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3、微服务判断校验结果，成功或失败</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4、失败则直接返回401</span></span><br><span class="line"><span class="meta">-</span> <span class="string">5、成功则处理业务并返回</span></span><br></pre></td></tr></table></figure></li></ul><p>因为JWT签发的token中已经包含了用户的身份信息，并且每次请求都会携带，这样,微服务就无需保存用户信息，甚至无需去数据库查询，完全符合了Rest的无状态规范。</p><p>拓展：<strong>微服务如何验证JWT有效性</strong>，</p><p>也就是说授权中心具体如何生成jwt的第三部分（签名部分），微服务又如何来解析验证你的签名有没有效？？？</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</span></span><br><span class="line">    <span class="attr">header</span> <span class="string">(base64后的)</span></span><br><span class="line">    <span class="attr">payload</span> <span class="string">(base64后的)</span></span><br><span class="line">    <span class="attr">secret</span></span><br><span class="line"></span><br><span class="line"><span class="attr">这个部分需要base64加密后的header和base64加密后的payload使用.</span></span><br><span class="line"><span class="attr">连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。</span></span><br><span class="line"><span class="meta">将这三部分用.连接成一个完整的字符串,构成了最终的jwt</span>:<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="attr">注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，</span></span><br><span class="line"><span class="attr">secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，</span></span><br><span class="line"><span class="attr">在任何场景都不应该流露出去。</span></span><br><span class="line"><span class="meta">一旦客户端得知这个secret,</span> <span class="string">那就意味着客户端是可以自我签发jwt了。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">拿到secret密钥后，对签名</span> <span class="string">解密，跟jwt前面两部分内容比对，一致，那么就表名身份合法。</span></span><br></pre></td></tr></table></figure><h1 id="2-编写JWT工具"><a href="#2-编写JWT工具" class="headerlink" title="2.编写JWT工具"></a>2.编写JWT工具</h1><p>因为生成jwt，解析jwt这样的行为以后在其它微服务中也会用到，因此我们会抽取成工具，放到<code>ly-auth-pojo</code>中。 </p><p>我们会用到比较流行的java语言的JWT工具，jjwt，官网如下：</p><h2 id="2-1-依赖"><a href="#2-1-依赖" class="headerlink" title="2.1.依赖"></a>2.1.依赖</h2><p>我们需要先在<code>ly-auth-pojo</code>中引入JWT依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-载荷对象"><a href="#2-2-载荷对象" class="headerlink" title="2.2.载荷对象"></a>2.2.载荷对象</h2><p>JWT中，会保存载荷数据，我们计划存储2部分：</p><ul><li>jti：jwt的id</li><li>UserDetail：用户数据</li></ul><p>为了方便后期获取，我们定义一个类来封装。</p><p>我们在<code>ly-auth-pojo</code>中的<code>com.leyou.auth.dto</code>包下添加一个实体类，代表载荷信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payload</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String jti;</span><br><span class="line">    <span class="keyword">private</span> UserDetail userDetail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>载荷中的userInfo信息，也需要一个实体类表示，这里我们定义一个UserDetail类。</p><p>这里我们假设用户信息包含2部分：</p><ul><li>id：用户id</li><li>username：用户名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetail</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-工具"><a href="#2-3-工具" class="headerlink" title="2.3.工具"></a>2.3.工具</h2><p>我们在<code>ly-auth-pojo</code>中的<code>com.leyou.auth.utils</code>包下创建一个工具类，用来封装几个方法：</p><ul><li>createJwt() ：生成JWT</li><li>parseJwt() ：验证并解析JWT</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.Payload;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jws;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtParser;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.security.Keys;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT解析器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtParser jwtParser;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秘钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecretKey secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtUtils</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 生成秘钥</span></span><br><span class="line">        secretKey = Keys.hmacShaKeyFor(key.getBytes(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line">        <span class="comment">// JWT解析器</span></span><br><span class="line">        <span class="keyword">this</span>.jwtParser = Jwts.parserBuilder().setSigningKey(secretKey).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt，用默认的JTI</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDetails 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createJwt</span><span class="params">(Object userDetails)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createJwt(userDetails, <span class="number">1800</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt，自己指定的JTI</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDetails 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createJwt</span><span class="params">(Object userDetails, <span class="keyword">int</span> expireSeconds)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 生成token</span></span><br><span class="line">            <span class="keyword">return</span> Jwts.builder().signWith(secretKey)</span><br><span class="line">                    .setId(createJti())</span><br><span class="line">                    .claim(<span class="string">&quot;user&quot;</span>, mapper.writeValueAsString(userDetails))</span><br><span class="line">                    .setExpiration(DateTime.now().plusSeconds(expireSeconds).toDate())</span><br><span class="line">                    .compact();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析jwt，并将用户信息转为指定的Clazz类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt   token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 载荷，包含JTI和用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payload <span class="title">parseJwt</span><span class="params">(String jwt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jws&lt;Claims&gt; claimsJws = jwtParser.parseClaimsJws(jwt);</span><br><span class="line">            Claims claims = claimsJws.getBody();</span><br><span class="line"></span><br><span class="line">            Payload payload = <span class="keyword">new</span> Payload();</span><br><span class="line">            payload.setJti(claims.getId());</span><br><span class="line">            payload.setUserDetail(mapper.readValue(claims.get(<span class="string">&quot;user&quot;</span>, String.class), UserDetail.class));</span><br><span class="line">            <span class="keyword">return</span> payload;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createJti</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.replace(UUID.randomUUID().toString(), <span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4.测试"></a>2.4.测试</h2><p>我们在<code>ly-auth-service</code>中测试刚刚写的工具.</p><h3 id="2-4-1-引入依赖"><a href="#2-4-1-引入依赖" class="headerlink" title="2.4.1.引入依赖"></a>2.4.1.引入依赖</h3><p>我们在<code>ly-auth-service</code>中引入<code>ly-auth-pojo</code>的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--auth-api--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-配置秘钥"><a href="#2-4-2-配置秘钥" class="headerlink" title="2.4.2.配置秘钥"></a>2.4.2.配置秘钥</h3><p>然后在<code>ly-auth-service</code>的<code>application.yml</code>文件中配置秘钥：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">helloWorldJavaLeyouAuthServiceSecretKey</span></span><br></pre></td></tr></table></figure><p>然后，我们在<code>ly-auth-service</code>的<code>com.leyou.auth.config</code>中定义一个配置类，注册<code>JwtUtils</code>注入到Spring的容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ly.jwt.key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtUtils <span class="title">jwtUtils</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtUtils(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-测试类"><a href="#2-4-3-测试类" class="headerlink" title="2.4.3.测试类"></a>2.4.3.测试类</h3><p>然后在<code>ly-auth-service</code>中定义一个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.Payload;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 生成jwt</span></span><br><span class="line">        String jwt = jwtUtils.createJwt(UserDetail.of(<span class="number">1L</span>, <span class="string">&quot;Jack&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;jwt = &quot;</span> + jwt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jwt = &quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIzZTg1NWVlYmFiN2I0NDM1YjY2NzFiMzhmNDcwM2E5ZSIsInVzZXIiOiJ7XCJpZFwiOjEsXCJ1c2VybmFtZVwiOlwi6ams5LqRXCJ9In0.gnedpS9LE0VjetKVTyD2Opvi4eSyROOG_rSwQP0kDC0&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析jwt</span></span><br><span class="line">        Payload payload = jwtUtils.parseJwt(jwt);</span><br><span class="line">        System.out.println(<span class="string">&quot;payload = &quot;</span> + payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jwt = eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIzZTg1NWVlYmFiN2I0NDM1YjY2NzFiMzhmNDcwM2E5ZSIsInVzZXIiOiJ7XCJpZFwiOjEsXCJ1c2VybmFtZVwiOlwiSmFja1wifSJ9.gnedpS9LE0VjetKVTyD2Opvi4eSyROOG_rSwQP0kDC0</span><br><span class="line"></span><br><span class="line">payload = Payload(jti=3e855eebab7b4435b6671b38f4703a9e, userDetails=UserDetails(id=1, username=Jack))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-登录授权"><a href="#3-登录授权" class="headerlink" title="3.登录授权"></a>3.登录授权</h1><p>首先，我们来完成登录授权功能。这个功能要在我们的<code>ly-auth-service</code>项目中完成。</p><h2 id="3-1-思路分析"><a href="#3-1-思路分析" class="headerlink" title="3.1.思路分析"></a>3.1.思路分析</h2><p>在登录页面，用户会填写账号密码并提交，我们服务端接收后需要验证用户名和密码。如果验证通过则生成JWT并写入cookie中。不过验证用户名和密码需要去访问<code>ly-user</code>才可以，因此整体思路如下：</p><ul><li>用户提交用户名和密码到ly-auth</li><li>ly-auth远程访问ly-user，根据用户名和密码查询用户</li><li>ly-auth验证查询结果<ul><li>如果成功，生成jwt，并将JWT写入cookie</li><li>如果失败，返回401</li></ul></li></ul><h2 id="3-2-用户验证的接口"><a href="#3-2-用户验证的接口" class="headerlink" title="3.2.用户验证的接口"></a>3.2.用户验证的接口</h2><p>用户中心<code>ly-user</code>必须对外提供查询接口，<strong>方便<code>ly-auth</code>做用户名密码校验。</strong></p><h3 id="3-2-1-定义接口"><a href="#3-2-1-定义接口" class="headerlink" title="3.2.1.定义接口"></a>3.2.1.定义接口</h3><p>首先在<code>ly-user-api</code>定义接口：</p><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-openfeign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>ly-user-api</code>的<code>com.leyou.user.client</code>中，添加接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.user.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名和密码查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;info&quot;)</span></span><br><span class="line">    <span class="function">UserDTO <span class="title">queryUserByUsernameAndPassword</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-ly-auth引用接口"><a href="#3-2-2-ly-auth引用接口" class="headerlink" title="3.2.2.ly-auth引用接口"></a>3.2.2.ly-auth引用接口</h3><p>然后，在ly-auth-service中引入ly-user-interface和feign的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>ly-auth</code>的<code>com.leyou.auth</code>包下的启动类<code>LyAuthApplication</code>上添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.config.JwtProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.leyou.user.client&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.auth&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyAuthApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyAuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：对<code>FeignClient</code>的扫描包要添加到<code>@EnableFeignClients</code>注解里面！</p><h2 id="3-3-登录的controller"><a href="#3-3-登录的controller" class="headerlink" title="3.3.登录的controller"></a>3.3.登录的controller</h2><p>接下来，我们需要在<code>ly-auth-service</code>编写一个接口，对外提供登录授权服务，接收用户名和密码，生成JWT。</p><p>我们在<code>ly-auth</code>的<code>com.leyou.auth.web</code>下添加<code>UserAuthController</code>，并编写登录接口：</p><ul><li>请求方式：post</li><li>请求路径：/user/login</li><li>请求参数：username和password，另外写cookie要用到HttpServletResponse</li><li>返回结果：无，直接写入cookie</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.service.UserAuthService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserAuthService userAuthService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">login</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(&quot;password&quot;)</span> String password,</span></span></span><br><span class="line"><span class="params"><span class="function">            HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用service，完成登录</span></span><br><span class="line">        userAuthService.login(username, password, response);</span><br><span class="line">        <span class="comment">// 登录成功，无返回值, 204状态码</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-登录的service"><a href="#3-4-登录的service" class="headerlink" title="3.4.登录的service"></a>3.4.登录的service</h2><p>service的基本流程：</p><ul><li>去ly-user查询用户</li><li>判断用户结果，正确则生成jwt</li><li>把jwt写入cookie</li></ul><p>这里还有几个属性要配置，包括：</p><ul><li>cookie名称</li><li>cookie的domain属性，决定cookie在哪些域名下生效</li></ul><p>这三个属性我们定义到一个常量类中，放到<code>ly-auth-pojo</code>下的 <code>com.leyou.auth.constants</code>中 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.constants;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtConstants</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户token的cookie名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COOKIE_NAME = <span class="string">&quot;LY_TOKEN&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户token的cookie的domain</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOMAIN = <span class="string">&quot;leyou.com&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：cookie的domain决定了cookie作用的域名，写成”<code>leyou.com</code>“可以让<code>leyou.com</code>下的所有二级以上域名共享cookie</p><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service</code>包中定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserAuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(String username, String password, HttpServletResponse response)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service.impl</code>包中定义实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.service.UserAuthService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.constants.JwtConstants;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exception.LyException;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.client.UserClient;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> feign.FeignException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAuthServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserAuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserAuthServiceImpl</span><span class="params">(UserClient userClient, JwtUtils jwtUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userClient = userClient;</span><br><span class="line">        <span class="keyword">this</span>.jwtUtils = jwtUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username, String password, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.授权中心携带用户名密码，到用户中心查询用户</span></span><br><span class="line">            UserDTO user = userClient.queryUserByUsernameAndPassword(username, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.校验查询结果</span></span><br><span class="line">            <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.如果正确，生成JWT凭证，查询错误则返回400</span></span><br><span class="line">            <span class="comment">// 3.1.准备用户信息</span></span><br><span class="line">            UserDetail userDetails = UserDetail.of(user.getId(), user.getUsername());</span><br><span class="line">            <span class="comment">// 3.2.生成jwt</span></span><br><span class="line">            String jwt = jwtUtils.createJwt(userDetails);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 4.把JWT写入用户cookie</span></span><br><span class="line">            writeCookie(response, jwt);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FeignException e) &#123;</span><br><span class="line">            <span class="comment">// 把远程调用异常转换抛出</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(e.status(), e.contentUTF8());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeCookie</span><span class="params">(HttpServletResponse response, String token)</span> </span>&#123;</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(JwtConstants.COOKIE_NAME, token);</span><br><span class="line">        <span class="comment">// cookie的作用域</span></span><br><span class="line">        cookie.setDomain(JwtConstants.DOMAIN);<span class="comment">//#######域名+路径 符合配置，那么就会带着jwt访问微服务。</span></span><br><span class="line">        <span class="comment">// 是否禁止JS操作cookie，避免XSS攻击</span></span><br><span class="line">        cookie.setHttpOnly(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// cookie有效期，-1就是跟随当前会话，浏览器关闭就消失</span></span><br><span class="line">        cookie.setMaxAge(-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// cookie作用的路径，/代表一切路径,表示任何路径都会携带cookie令牌过来。</span></span><br><span class="line">        cookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-5-测试"><a href="#3-5-测试" class="headerlink" title="3.5.测试"></a>3.5.测试</h2><p>在登录页面填写信息，登录后跳转到首页，发现token成功写入了：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527521423469.png" alt="1527521423469"></p><p>小思考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">微服务会保存密钥吗？？？</span></span><br><span class="line"><span class="attr">（1）微服务向auth微服务发送密钥请求，如果授权中心信任这个微服务，</span></span><br><span class="line"><span class="attr">（校验微服务请求密钥时带过来的名称密码参数，</span></span><br><span class="line"><span class="attr">校验数据库的微服务名称以及微服务密码，一致则表明信任该微服务）</span></span><br><span class="line"><span class="attr">那么auth就会返回密钥给微服务。</span></span><br><span class="line"><span class="attr">微服务拿到密钥后就可以在微服本地进行jwt本解密校验了。</span></span><br><span class="line"><span class="attr">（2）有不被信任的微服，只能带着用户端的jwt去授权中心验证，直接得到认证结果</span></span><br><span class="line"><span class="attr">2</span> <span class="string">微服务根据钥匙解密后得到明文，校验的究竟是什么？？</span></span><br><span class="line"><span class="meta">拿到secret密钥后，对签名</span> <span class="string">解密，跟jwt前面两部分内容比对，一致，那么就表名身份合法。</span></span><br><span class="line"><span class="attr">3</span> <span class="string">微服务知道了我的身份合法，拿到我的身份信息，跟数据库连接，查询，就可以进行业务处理啦，哈哈哈！！！</span></span><br></pre></td></tr></table></figure><h1 id="4-秘钥管理"><a href="#4-秘钥管理" class="headerlink" title="4.秘钥管理"></a>4.秘钥管理</h1><p>用户访问微服务的时候会携带JWT，而微服务中需要对JWT做校验和解析，这个时候就会用到秘钥。</p><p>但是秘钥保存在ly-auth这个授权服务中，我们不能随意暴露秘钥，否则就会有秘钥泄露的风险。</p><p>那么，<strong>该如何管理秘钥，让我们的微服务安全获取秘钥呢</strong>？</p><h2 id="4-1-思路分析"><a href="#4-1-思路分析" class="headerlink" title="4.1.思路分析"></a>4.1.思路分析</h2><p>微服务要想安全获取秘钥，必须经过<code>ly-auth</code>的身份验证。因此，我们可以给每一个微服务都定义一份“<strong>身份信息</strong>”，这些身份信息保存在数据库中，结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for tb_client_info</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `tb_client_info`;</span><br><span class="line">CREATE TABLE `tb_client_info`  (</span><br><span class="line">  `id` int(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `client_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT &#x27;服务名称&#x27;,</span><br><span class="line">  `secret` varchar(60) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT &#x27;密钥&#x27;,</span><br><span class="line">  `info` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;服务介绍&#x27;,</span><br><span class="line">  `create_time` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_time` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  UNIQUE INDEX `uq_key_service_name`(`client_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = &#x27;服务信息表，记录微服务的id，名称，密文，用来做服务认证&#x27; ROW_FORMAT = Compact;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of tb_client_info</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (1, &#x27;user-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;用户微服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:16&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (2, &#x27;item-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;商品微服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:17&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (3, &#x27;page-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;静态页微服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:18&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (4, &#x27;search-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;搜索微服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:19&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (5, &#x27;cart-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;购物车微服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:20&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (6, &#x27;trade-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;订单微服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:20&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (7, &#x27;api-gateway&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;网关服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:21&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (8, &#x27;auth-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;授权服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:22&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (9, &#x27;pay-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;支付微服务&#x27;, &#x27;2019-04-10 15:56:38&#x27;, &#x27;2020-06-14 21:12:24&#x27;);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>核心字段介绍：</p><ul><li>clientId：微服务的客户端id，每个微服务都有唯一id</li><li>secret：客户端秘钥(密码)，微服务身份验证会用到</li></ul><p>一旦微服务有了<strong>身份</strong>，那么微服务申请秘钥的时候，ly-auth就可以<strong>对身份做验证</strong>，验证通过才发放秘钥，否则拿不到秘钥，流程如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200614210546978.png" alt="image-20200614210546978"></p><p>微服务申请秘钥流程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1.服务启动时向ly-auth申请秘钥，携带配置好的clientId和secret</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2.ly-auth接收请求，根据clientId去数据库查询</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3.验证clientId和secret</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4.如果验证通过，则返回秘钥</span></span><br></pre></td></tr></table></figure><p>我们需要做的准备包括：</p><ul><li>在ly-auth服务中提供一个接口，微服务调用时可以获取秘钥</li><li>微服务启动后，向ly-auth发送请求，获取秘钥</li></ul><h2 id="4-2-基本代码"><a href="#4-2-基本代码" class="headerlink" title="4.2.基本代码"></a>4.2.基本代码</h2><p>首先是client信息表相关的基本代码，包括实体类、mapper、service等。</p><h3 id="4-2-1-引入依赖"><a href="#4-2-1-引入依赖" class="headerlink" title="4.2.1.引入依赖"></a>4.2.1.引入依赖</h3><p>既然要访问数据库，需要在<code>ly-auth-service</code>中引入数据库访问所需要的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-配置文件"><a href="#4-2-2-配置文件" class="headerlink" title="4.2.2.配置文件"></a>4.2.2.配置文件</h3><p>然后是在<code>ly-auth-service</code>的yaml文件中添加数据库配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ly-mysql:3306/heima?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="attr">insert-strategy:</span> <span class="string">not_null</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.auth.entity</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-实体类"><a href="#4-2-3-实体类" class="headerlink" title="4.2.3.实体类"></a>4.2.3.实体类</h3><p>首先在<code>ly-auth-service</code>的<code>com.leyou.auth.entity</code>包中添加实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_client_info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientInfo</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-4-mapper"><a href="#4-2-4-mapper" class="headerlink" title="4.2.4.mapper"></a>4.2.4.mapper</h3><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.mapper</code>包中添加mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.entity.ClientInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClientMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">ClientInfo</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-5-service"><a href="#4-2-5-service" class="headerlink" title="4.2.5.service"></a>4.2.5.service</h3><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service</code>包中添加接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.entity.ClientInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClientService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">ClientInfo</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service.impl</code>包中添加接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.entity.ClientInfo;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.mapper.ClientMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.service.ClientService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">ClientMapper</span>, <span class="title">ClientInfo</span>&gt; <span class="keyword">implements</span> <span class="title">ClientService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-6-扫描包"><a href="#4-2-6-扫描包" class="headerlink" title="4.2.6.扫描包"></a>4.2.6.扫描包</h3><p>在<code>ly-auth-service</code>的启动类上添加注解，完成mapper扫描：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.leyou.auth.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.leyou.user.client&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.auth&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyAuthApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyAuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-7-密码加密"><a href="#4-2-7-密码加密" class="headerlink" title="4.2.7.密码加密"></a>4.2.7.密码加密</h3><p>数据库中的密码加密采用的是Bcrypt算法，这里也需要配置加密工具。</p><p>我们在<code>ly-auth-service</code>的<code>com.leyou.auth.config</code>包的<code>JwtConfig</code>中添加一个新的bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-申请秘钥的接口"><a href="#4-3-申请秘钥的接口" class="headerlink" title="4.3.申请秘钥的接口"></a>4.3.申请秘钥的接口</h2><p>我们在ly-auth中提供一个接口，提供给微服务调用，获取秘钥。</p><h3 id="4-2-1-定义接口"><a href="#4-2-1-定义接口" class="headerlink" title="4.2.1.定义接口"></a>4.2.1.定义接口</h3><p>在<code>ly-auth-api</code>中定义一个接口，格式如下：</p><ul><li>请求方式：Get</li><li>请求路径：/client/key</li><li>请求参数：<ul><li>clientId：微服务id</li><li>secret：微服务秘钥</li></ul></li><li>返回值：秘钥对象，SecretKey</li></ul><p>在<code>ly-auth-api</code>的pom文件中引入feign依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-openfeign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>com.leyou.auth.client</code>包中定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;auth-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/client/key&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">getSecretKey</span><span class="params">(<span class="meta">@RequestParam(&quot;clientId&quot;)</span> String clientId,<span class="meta">@RequestParam(&quot;secret&quot;)</span> String secret)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-controller"><a href="#4-2-2-controller" class="headerlink" title="4.2.2.controller"></a>4.2.2.controller</h3><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.web</code>包中定义controller，实现接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.service.ClientService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;client&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClientService clientService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientController</span><span class="params">(ClientService clientService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clientService = clientService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;key&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">getSecretKey</span><span class="params">(<span class="meta">@RequestParam(&quot;clientId&quot;)</span> String clientId, <span class="meta">@RequestParam(&quot;secret&quot;)</span> String secret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(clientService.getSecretKey(clientId, secret));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-3-Service"><a href="#4-2-3-Service" class="headerlink" title="4.2.3.Service"></a>4.2.3.Service</h3><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service</code>包中添加接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.entity.ClientInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClientService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">ClientInfo</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getSecretKey</span><span class="params">(String clientId, String secret)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service.impl</code>包中添加接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.entity.ClientInfo;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.mapper.ClientMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.service.ClientService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exceptions.LyException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">ClientMapper</span>, <span class="title">ClientInfo</span>&gt; <span class="keyword">implements</span> <span class="title">ClientService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ly.jwt.key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientServiceImpl</span><span class="params">(PasswordEncoder passwordEncoder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.passwordEncoder = passwordEncoder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSecretKey</span><span class="params">(String clientId, String secret)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.查询client信息</span></span><br><span class="line">        ClientInfo client = query().eq(<span class="string">&quot;client_id&quot;</span>, clientId).one();</span><br><span class="line">        <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">401</span>, <span class="string">&quot;客户端的信息有误，&quot;</span> + clientId + <span class="string">&quot;不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.校验client的secret</span></span><br><span class="line">        <span class="keyword">if</span> (!passwordEncoder.matches(secret, client.getSecret())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">401</span>, <span class="string">&quot;客户端的信息有误，secret不正确！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.返回秘钥</span></span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-申请秘钥"><a href="#4-4-申请秘钥" class="headerlink" title="4.4.申请秘钥"></a>4.4.申请秘钥</h2><p>我们把申请秘钥的功能写到<code>ly-auth-api</code>中，供其它微服务使用。<strong>其它微服务引入该依赖后，就会根据配置的clientId和secret，!!自动!!向<code>ly-auth</code>发起请求，申请秘钥</strong>。</p><p>我们<strong>约定</strong>微服务要在application.yml中配置自己的clientId和secret，格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">  <span class="attr">clientId:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><p>因此我们要在<code>ly-auth-api</code>的<code>com.leyou.auth.config</code>包中定义一个属性类，读取这两个属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;ly.auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外，我们需要在读取到clientId和secret以后，向<code>ly-auth</code>发出请求，申请秘钥，因此我们在<code>ly-auth-api</code>中定义一个配置类，完成秘钥加载，并完成对JwtUtils的初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.client.AuthClient;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;ly.auth&quot;, name = &#123;&quot;clientId&quot;, &quot;secret&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ClientProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthClient authClient;</span><br><span class="line">    <span class="keyword">private</span> ClientProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthConfiguration</span><span class="params">(AuthClient authClient, ClientProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authClient = authClient;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtUtils <span class="title">jwtUtils</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 查询秘钥</span></span><br><span class="line">            String key = authClient.getSecretKey(properties.getClientId(), properties.getSecret());</span><br><span class="line">            <span class="comment">// 创建JwtUtils</span></span><br><span class="line">            JwtUtils jwtUtils = <span class="keyword">new</span> JwtUtils(key);</span><br><span class="line">            log.info(<span class="string">&quot;秘钥加载成功。&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> jwtUtils;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;初始化JwtUtils失败，&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在配置类上的一个条件值的关注：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;ly.auth&quot;, name = &#123;&quot;clientId&quot;, &quot;secret&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p>条件注解，意思是环境中必须有<code>ly.auth</code>开头的属性，属性名称必须叫<code>clientId</code>和<code>secret</code>，确保<strong>使用者会在yml中配置clientId和secret时，当前配置才会生效</strong>。</p><p>还有这个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.leyou.auth.client&quot;)</span></span><br></pre></td></tr></table></figure><p>目的是引入刚刚编写的<code>AuthClient</code>，方便查询秘钥</p><p>最后，为了让这个配置被SpringBoot加载，我们需要在<code>ly-auth-api</code>的resources目录中创建一个文件夹：META-INF，然后创建一个文件：spring.factories，然后填写内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">com.leyou.auth.config.AuthConfiguration</span></span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200620083641159.png" alt="image-20200620083641159"> </p><p>另外，这样用户写yaml时是没有提示的，为了有提示，需要在META-INF下新建一个文件：<code>spring-configuration-metadata.json</code>，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;groups&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ly.auth&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;com.leyou.auth.config.ClientProperties&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;com.leyou.auth.config.ClientProperties&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ly.auth.clientId&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;com.leyou.auth.config.ClientProperties&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;授权客户端的id&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ly.auth.secret&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;com.leyou.auth.config.ClientProperties&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;授权客户端的secret&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ly.auth.includeFilterPaths&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;com.leyou.auth.config.ClientProperties&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;登录拦截要包含的路径&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ly.auth.secret&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.excludeFilterPaths&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;com.leyou.auth.config.ClientProperties&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;登录拦截放行的路径&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;hints&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5.测试"></a>4.5.测试</h2><p>我们在<code>ly-user</code>中测试下这个功能。</p><p>首先，在<code>ly-user-service</code>中引入相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ly-auth的API--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着，在<code>ly-user-service</code>的application.yml中配置客户端信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">user-service</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><p>修改启动类,添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># ...</span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyUserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyUserApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启<code>ly-user-service</code>，应该能看到日志输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2030-06-20 08:29:26.519  INFO 12232 --- [           main] com.leyou.auth.config.AuthConfig         : 秘钥加载成功。</span><br></pre></td></tr></table></figure><h3 id="思考总结："><a href="#思考总结：" class="headerlink" title="思考总结："></a>思考总结：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">办理业务的微服务想要向授权中心获取密钥，来解析前端用户带过来的jwt是否有效</span></span><br><span class="line"><span class="attr">可以在微服务本地写一个类来实现，但是想一想，每一个办理业务的微服务都需要jwt验证，</span></span><br><span class="line"><span class="attr">都需要这么一个类，那不是代码冗余嘛！！！这是失败的方式</span></span><br><span class="line"><span class="attr">因此我们将“获取jwt校验用的密钥”的公共代码抽取授权中心，</span></span><br><span class="line"><span class="meta">抽取到一个具有条件加载的配置类</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix</span> = <span class="string">&quot;ly.auth&quot;, name = &#123;&quot;clientId&quot;, &quot;secret&quot;&#125;)</span></span><br><span class="line">    <span class="attr">@EnableConfigurationProperties(ClientProperties.class)</span></span><br><span class="line">    <span class="attr">public</span> <span class="string">class AuthConfiguration &#123;</span></span><br><span class="line">    <span class="attr">...</span></span><br><span class="line"><span class="attr">那么，想要办理业务，向授权中心获取密钥的微服务，就可以导入授权中心的依赖库，</span></span><br><span class="line"><span class="meta">并在微服务本地配置文件中配置了ly.auth.clientId</span>   <span class="string">ly.auth.secret,</span></span><br><span class="line"></span><br><span class="line"><span class="meta">那么授权中心中的配置类就会被注入</span> <span class="string">AuthConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="meta">至于能不能返回密钥（微服务受不受信任），就要看配置的ly.auth.clientId</span>   <span class="string">ly.auth.secret</span></span><br><span class="line"><span class="attr">能否在微服务表格查找的到对象记录哈！！！</span></span><br></pre></td></tr></table></figure><h1 id="5-登录验证"><a href="#5-登录验证" class="headerlink" title="5.登录验证"></a>5.登录验证</h1><p>用户登录后，会携带JWT访问微服务，而微服务需要验证当前访问者的身份，如果验证通过则执行后续业务，验证失败，则拦截请求：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200620090019046.png" alt="image-20200620090019046"> </p><p>很多微服务都需要做用户登录状态验证，因此我们可以<strong>把这部分拦截和判断写到<code>ly-auth-api</code>中，作为工具</strong>。</p><h2 id="5-1-登录拦截器"><a href="#5-1-登录拦截器" class="headerlink" title="5.1.登录拦截器"></a>5.1.登录拦截器</h2><p>在<code>ly-auth-api</code>引入编写拦截器所需依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>ly-auth-api</code>的<code>com.leyou.auth.interceptors</code>中编写一个拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.constants.JwtConstants;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.Payload;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exception.LyException;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.CookieUtils;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginInterceptor</span><span class="params">(JwtUtils jwtUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jwtUtils = jwtUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取cookie中的jwt</span></span><br><span class="line">            String jwt = CookieUtils.getCookieValue(request, JwtConstants.COOKIE_NAME);</span><br><span class="line">            <span class="comment">// 验证并解析</span></span><br><span class="line">            Payload payload = jwtUtils.parseJwt(jwt);</span><br><span class="line">            <span class="comment">// 获取用户</span></span><br><span class="line">            UserDetail userDetail = payload.getUserDetail();</span><br><span class="line">            log.info(<span class="string">&quot;用户&#123;&#125;正在访问。&quot;</span>, userDetail.getUsername());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">401</span>, <span class="string">&quot;JWT无效或过期!&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">401</span>, <span class="string">&quot;用户未登录!&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-配置拦截器"><a href="#5-2-配置拦截器" class="headerlink" title="5.2.配置拦截器"></a>5.2.配置拦截器</h2><p>拦截器编写了还需要注册到SpringMVC中，因此我们<strong>编写配置类，完成拦截器注册</strong>。不过，拦截器的注册可能需要指定两个参数：</p><ul><li>拦截路径：指定拦截器对哪些路径生效</li><li>放行路径：指定拦截器对哪些路径放行</li></ul><p>我们<strong>约定</strong>用户会在application.yml中配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">user-service</span> <span class="comment"># 客户端id</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="number">1234</span> <span class="comment"># 客户端秘钥</span></span><br><span class="line">    <span class="attr">excludeFilterPaths:</span> <span class="comment"># 放行的路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/aa/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/bb/**</span></span><br><span class="line">    <span class="attr">includeFilterPaths:</span> <span class="comment"># 拦截的路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/xx/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/yy/**</span></span><br></pre></td></tr></table></figure><p>因此，我们要在ClientProperties中添加两个属性，来读取其中的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;ly.auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端秘钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截器拦截路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; includeFilterPaths;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截器放行路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; excludeFilterPaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>ly-auth-api</code>中的<code>com.leyou.auth.config</code>包下编写一个配置类，配置拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.interceptors.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JwtUtils jwtUtils;</span><br><span class="line">    <span class="keyword">private</span> ClientProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里产生了依赖循环，因此要加上@Lazy注解，JwtUtils使用到时才去注入。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MvcConfiguration</span><span class="params">(<span class="meta">@Lazy</span> JwtUtils jwtUtils, ClientProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jwtUtils = jwtUtils;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册拦截器，并得到拦截器注册器</span></span><br><span class="line">        InterceptorRegistration registration = registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor(jwtUtils));</span><br><span class="line">        <span class="comment">// 判断用户是否配置了拦截路径，如果没配置走默认，就是拦截 /**</span></span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(properties.getIncludeFilterPaths()))&#123;</span><br><span class="line">            registration.addPathPatterns(properties.getIncludeFilterPaths());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断用户是否配置了放行路径，如果没配置就是空</span></span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(properties.getExcludeFilterPaths()))&#123;</span><br><span class="line">            registration.excludePathPatterns(properties.getExcludeFilterPaths());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-拦截器开关"><a href="#5-3-拦截器开关" class="headerlink" title="5.3.拦截器开关"></a>5.3.拦截器开关</h2><p>我们通过自定义的<code>MvcConfiguration</code>向mvc中配置了拦截器，但是<code>MvcConfiguration</code>并没有被Spring扫描，因此<strong>配置并未生效</strong>。</p><p>要想让配置生效，必须得让spring扫描到<code>MvcConfiguration</code>这个类。</p><p>但是引用ly-auth-api的服务可能只是需要JwtUtils，不需要做登录拦截，因此我们需要<strong>定义一个开关，用来开启或关闭拦截器功能。</strong></p><p>在<code>ly-auth-api</code>的<code>com.leyou.auth.annotation</code>包中定义一个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.config.MvcConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启用JWT验证开关，会通过mvc的拦截器拦截用户请求，并获取用户信息，存入UserContext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(MvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableJwtVerification &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个注解通过<code>@Import(MvcConfiguration.class)</code>来加载<code>MvcConfiguration</code>类，因此<strong>任何项目只要引入了<code>@EnableJwtVerification</code>就可以使得<code>MvcConfiguration</code>生效，从而使拦截器生效</strong>。</p><h2 id="5-4-测试"><a href="#5-4-测试" class="headerlink" title="5.4.测试"></a>5.4.测试</h2><p>现在，我们在<code>ly-user-service</code>测试拦截器。</p><p>首先，在<code>ly-user-service</code>的启动类上，添加<code>@EnableJwtVerification</code>注解，开启登录拦截器功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.annotation.EnableJwtVerification;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableJwtVerification</span><span class="comment">//开启登录拦截器的支持！</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.leyou.auth.client&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.user&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.leyou.user.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyUserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyUserApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>ly-user-service</code>的<code>com.leyou.user.web</code>包中添加一个controller，方便测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;address&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;上海浦东新区航头镇航头路18号传智播客&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>ly-user-service</code>的<code>application.yml</code>中配置拦截和放行路径：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">user-service</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="number">1234</span></span><br><span class="line">    <span class="attr">includeFilterPaths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/address/**</span> <span class="comment"># 拦截 /address开头的地址</span></span><br></pre></td></tr></table></figure><p>重启<code>ly-user-service</code>服务，浏览器中访问地址：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200627152500736.png" alt="image-20200627152500736"> </p><p>然后登录一下，再次访问：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200627152512444.png" alt="image-20200627152512444"></p><p><strong>登录验证过程总结：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">用户登录后，会携带JWT访问微服务，</span></span><br><span class="line"><span class="attr">很多微服务都需要做用户登录状态验证，</span></span><br><span class="line"><span class="attr">因此我们可以把这部分拦截和判断抽离到`ly-auth-api`中，作为工具</span></span><br><span class="line"></span><br><span class="line"><span class="attr">2</span> <span class="string">在`ly-auth-api`的`com.leyou.auth.interceptors`中编写一个拦截器：（并导入响应依赖包）</span></span><br><span class="line"><span class="attr">拦截器里面能校验jwt，并且获取到UserDetail</span></span><br><span class="line"></span><br><span class="line"><span class="attr">3</span> <span class="string">拦截器编写了还需要注册到SpringMVC中，因此我们**编写配置类，完成拦截器注册**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">在ClientProperties中添加两个属性</span></span><br><span class="line"><span class="attr">package</span> <span class="string">com.leyou.auth.config;</span></span><br><span class="line"><span class="attr">@Data</span></span><br><span class="line"><span class="attr">@ConfigurationProperties(&quot;ly.auth&quot;)</span></span><br><span class="line"><span class="attr">public</span> <span class="string">class ClientProperties &#123;。。。</span></span><br><span class="line"><span class="attr">（这个属性类是给使用“要使用jwt登录认证”的微服务使用的。</span></span><br><span class="line"><span class="attr">微服务想要使用该功能，就要导入ly-auth依赖，然后会在application.yml中配置：</span></span><br><span class="line"><span class="attr">ly</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">auth</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">clientId</span>: <span class="string">user-service # 客户端id</span></span><br><span class="line">    <span class="attr">secret</span>: <span class="string">1234 # 客户端秘钥</span></span><br><span class="line">    <span class="attr">excludeFilterPaths</span>: <span class="string"># 放行的路径</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">/aa/**</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">/bb/**</span></span><br><span class="line">    <span class="attr">includeFilterPaths</span>: <span class="string"># 拦截的路径</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">/xx/**</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">/yy/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">4</span>  <span class="string">然后在`ly-auth-api`中的`com.leyou.auth.config`包下编写一个配置类，配置拦截器：</span></span><br><span class="line"><span class="attr">public</span> <span class="string">class MvcConfiguration implements WebMvcConfigurer &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">5</span> <span class="string">定义一个开关（添加一个注解），用来开启或关闭拦截器功能</span></span><br><span class="line"><span class="attr">package</span> <span class="string">com.leyou.auth.annotation;</span></span><br><span class="line"><span class="attr">@Import(MvcConfiguration.class)</span></span><br><span class="line"><span class="attr">public</span> <span class="string">@interface EnableJwtVerification &#123;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">任何项目只要引入了注解`@EnableJwtVerification`</span></span><br><span class="line"><span class="attr">就可以使得`MvcConfiguration`生效，从而使拦截器生效</span></span><br><span class="line"></span><br><span class="line"><span class="attr">6</span> <span class="string">微服务想要使用auth的登录拦截功能：</span></span><br><span class="line"><span class="meta">（0)</span> <span class="string">导入auth依赖。</span></span><br><span class="line"><span class="meta">（1）在微服务的启动类中</span> <span class="string"></span></span><br><span class="line"><span class="attr">添加`@EnableJwtVerification`注解，开启auth的登录拦截器功能</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages</span> = <span class="string">&quot;com.leyou.auth.client&quot;)微服之间调用需要这个注解</span></span><br><span class="line"><span class="attr">（2）微服务yml配置文件中配置好拦截和放行路径</span></span><br><span class="line"><span class="attr">ly</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">auth</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">clientId</span>: <span class="string">user-service</span></span><br><span class="line">    <span class="attr">secret</span>: <span class="string">1234</span></span><br><span class="line">    <span class="attr">includeFilterPaths</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">/address/** # 拦截 /address开头的地址</span></span><br><span class="line"><span class="attr">（3）微服务器中添加controller代码（路径是配置中的拦截路径，当前端访问该微服务的这个路径是，</span></span><br><span class="line"><span class="attr">就会被auth微服拦截，完成是否登录，以及登录后的jwt校验）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">理解误区：微服A导入了微服B的依赖，并且添加相关注释就可以使用微服B的相关方法，工具，</span></span><br><span class="line"><span class="attr">比如第四章，“微服将jwt带给auth，返回密钥”，一些工具可以使用auth的，</span></span><br><span class="line"><span class="attr">但是返回的密钥key还是要从远端的auth返回过来，并不是利用auth工具直接生成的哦。</span></span><br></pre></td></tr></table></figure><p>小思考：</p><p>这验证都在auth api里面完成了，第四章“密钥管理”不是说了：由授权中心返回密钥，然后在微服务本地进行验证嘛？？？？</p><h1 id="6-页面获取用户信息"><a href="#6-页面获取用户信息" class="headerlink" title="6.页面获取用户信息"></a>6.页面获取用户信息</h1><p>虽然cookie已经成功写入，但是我们首页的顶部，登录状态依然没能判断出用户信息：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527521794580.png" alt="1527521794580"></p><p>我们思考一下，应该如何获取用户信息呢？</p><h2 id="6-1-步骤分析"><a href="#6-1-步骤分析" class="headerlink" title="6.1.步骤分析"></a>6.1.步骤分析</h2><p>我们现在使用的是无状态登录，用户身份写入了jwt，解析JWT即可获取用户信息。但是jwt需要通过秘钥解析才知道是否有效，才可以解析用户身份。因此查询用户信息一定要发请求到服务端。</p><p>分析一下步骤：</p><ul><li>1）页面向后台发起请求，携带cookie</li><li>2）后台获取cookie中的jwt</li><li>3）校验jwt是否有效<ul><li>无效：登录失效或未登录，返回错误信息</li><li>有效：解析出里面的用户信息并返回</li></ul></li></ul><p>接下来，我们就分步实现上述功能。</p><h2 id="6-2-页面JS代码"><a href="#6-2-页面JS代码" class="headerlink" title="6.2.页面JS代码"></a>6.2.页面JS代码</h2><p>首先是页面发起请求，校验cookie。</p><p>页面的顶部已经被我们封装为一个独立的Vue组件，在<code>/js/pages/shortcut.js</code>中</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527522039407.png" alt="1527522039407"></p><p>打开js，发现里面已经定义好了Vue组件，并且在created函数中，查询用户信息：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200620104716345.png" alt="image-20200620104716345"></p><p>因为jwt在cookie中，因此本次请求肯定会携带jwt信息在cookie中。</p><h2 id="6-3-查询当前用户的接口"><a href="#6-3-查询当前用户的接口" class="headerlink" title="6.3.查询当前用户的接口"></a>6.3.查询当前用户的接口</h2><p>我们在<code>ly-user-service</code>中定义用户的校验接口，通过cookie获取jwt，然后校验通过返回用户信息。</p><ul><li>请求方式：GET</li><li>请求路径：/info/me</li><li>请求参数：无，不过我们需要从cookie中获取jwt信息</li><li>返回结果：校验成功返回用户；校验失败，则返回401</li></ul><p>在<code>ly-user-service</code>的<code>com.leyou.user.web</code>包的<code>UserController</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前登录的用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;me&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserDetail&gt; <span class="title">me</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改ly-user-service:的application.yml添加拦截路径，最新yml内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ly-mysql:3306/heima?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-mq</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="attr">insert-strategy:</span> <span class="string">not_null</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.user.entity</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">encoder:</span></span><br><span class="line">    <span class="attr">crypt:</span></span><br><span class="line">      <span class="attr">secret:</span> <span class="string">$&#123;random.uuid&#125;</span> <span class="comment"># 随机的密钥，使用uuid</span></span><br><span class="line">      <span class="attr">strength:</span> <span class="number">6</span> <span class="comment"># 加密强度4~31，决定盐加密时的运算强度，超过10以后加密耗时会显著增加</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">user-service</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="number">1234</span></span><br><span class="line">    <span class="attr">includeFilterPaths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/address/**</span> <span class="comment"># 拦截 /address开头的地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/info/me</span> <span class="comment"># 展示用户登录信息时需要拦截器生效</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-4-用户上下文"><a href="#6-4-用户上下文" class="headerlink" title="6.4.用户上下文"></a>6.4.用户上下文</h2><p>现在，我们接收了用户的请求，但是该如何获取当前登录用户信息呢？</p><h3 id="6-4-1-思路分析"><a href="#6-4-1-思路分析" class="headerlink" title="6.4.1.思路分析"></a>6.4.1.思路分析</h3><p>其实，在<code>ly-user-service</code>中已经引入了<code>ly-auth-api</code>的依赖，而<code>ly-auth-api</code>中提供了一个拦截器<code>LoginInterceptor</code>，已经拦截请求并且获取了用户信息。</p><p>拦截器放行后才会进入<code>UserController</code>的方法<code>me()</code>中。那么，我们为什么不能<strong>把拦截器中获取的用户信息，保存起来，然后在<code>UserController</code>中直接获取并使用</strong>呢，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200620111630238.png" alt="image-20200620111630238"></p><p>步骤如下：</p><ul><li>1.前端发出请求到服务端，查询登录用户信息</li><li>2.拦截器拦截请求，验证并解析JWT，得到用户信息UserDetails</li><li>3.<strong>将用户信息存入UserContext（需要自己实现）上下文</strong>，放行请求</li><li>4.controller处理请求，从UserContext获取用后，返回给前端</li></ul><h3 id="6-4-2-UserContext"><a href="#6-4-2-UserContext" class="headerlink" title="6.4.2.UserContext"></a>6.4.2.UserContext</h3><p>UserContext用来存储当前的用户信息，但是该如何保存呢？</p><p>要知道用户的请求肯定是<strong>多线程</strong>并发访问的，如果直接将UserDetail存入UserContext的成员变量，会存在<strong>线程并发安全问题</strong>。我们必须保证每一个请求（一个线程）都有自己的用户信息，互不干扰！</p><h4 id="1）ThreadLocal"><a href="#1）ThreadLocal" class="headerlink" title="1）ThreadLocal"></a>1）ThreadLocal</h4><p><code>ThreadLocal</code>恰好满足这个需求，那么ThreadLocal是如何实现这一需求的呢？</p><p>看下这幅图：</p><p>  <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1554964371849.png" alt="1554964371849"></p><p>关键点：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">每个线程（`Thread`）内部都持有一个`ThreadLocalMap`对象。</span></span><br><span class="line"><span class="meta">-</span> <span class="string">`ThreadLocalMap`的Key是某个`ThreadLocal`对象，值是任意Object。</span></span><br><span class="line"><span class="meta">-</span> <span class="string">不同线程，内部有自己的`ThreadLocalMap`，因此各线程资源互相不会干扰。</span></span><br></pre></td></tr></table></figure><p>当我们使用ThreadLocal存储数据时，ThreadLocal会先得到当前线程（currentThread)对象，然后获取线程中的<code>ThreadLocalMap</code>对象，接着把数据存储到这个<code>ThreadLocalMap</code>对象中，因此<strong>每个线程的用户都在线程自己的<code>ThreadLocalMap</code>对象中，互不干扰</strong>。</p><h4 id="2）UserContext"><a href="#2）UserContext" class="headerlink" title="2）UserContext"></a>2）UserContext</h4><p>接下来，我们实现UserContext。在<code>ly-auth-api</code>中的<code>com.leyou.auth.utils</code>定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserDetail&gt; TL = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储一个用户到当前线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(UserDetail user)</span> </span>&#123;</span><br><span class="line">        TL.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从当前线程获取一个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDetail <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TL.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从当前线程移除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TL.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-3-存储用户"><a href="#6-4-3-存储用户" class="headerlink" title="6.4.3.存储用户"></a>6.4.3.存储用户</h3><p>接下来，我们修改拦截器逻辑，获取用户后把用户存储在UserContext中。</p><p>修改<code>ly-auth-api</code>中的<code>LoginInterceptor</code>，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.constants.JwtConstants;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.Payload;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.UserContext;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exception.LyException;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.CookieUtils;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginInterceptor</span><span class="params">(JwtUtils jwtUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jwtUtils = jwtUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取cookie中的jwt</span></span><br><span class="line">            String jwt = CookieUtils.getCookieValue(request, JwtConstants.COOKIE_NAME);</span><br><span class="line">            <span class="comment">// 验证并解析</span></span><br><span class="line">            Payload payload = jwtUtils.parseJwt(jwt);</span><br><span class="line">            <span class="comment">// 获取用户</span></span><br><span class="line">            UserDetail userDetails = payload.getUserDetail();</span><br><span class="line">            log.info(<span class="string">&quot;用户&#123;&#125;正在访问。&quot;</span>, userDetails.getUsername());</span><br><span class="line">            <span class="comment">// 保存用户</span></span><br><span class="line">            UserContext.setUser(userDetails);<span class="comment">//###########将获取到的用户信息放到</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">401</span>, <span class="string">&quot;JWT无效或过期!&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">401</span>, <span class="string">&quot;用户未登录!&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 业务结束后，移除用户</span></span><br><span class="line">        UserContext.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-5-完成controller逻辑"><a href="#6-5-完成controller逻辑" class="headerlink" title="6.5.完成controller逻辑"></a>6.5.完成controller逻辑</h2><p>现在，让我们补充完成<code>ly-user-service</code>中的<code>UserController</code>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前登录的用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;me&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserDetails&gt; <span class="title">me</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(UserContext.getUser());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-6-测试"><a href="#6-6-测试" class="headerlink" title="6.6.测试"></a>6.6.测试</h2><p> 重启<code>ly-auth-service</code>后测试。</p><p>页面效果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527554017189.png" alt="1527554017189"></p><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">状态bean,bean中存了共享信息,并且是可変化的共享信息状态</span></span><br><span class="line"><span class="attr">bean会带来的问题是?数据污染例bean线程共享,线程不安全,</span></span><br><span class="line"></span><br><span class="line"><span class="meta">综上,我们直接把</span> <span class="string">userdetail作为状态bean的属性,不可以</span></span><br><span class="line"><span class="meta">状态bean,单例bean</span>=<span class="string">=&gt;单线程 ok</span></span><br><span class="line"><span class="meta">状态bean,单例bean,多线程</span>=<span class="string">=&gt;bug</span></span><br><span class="line"><span class="meta">状态bean,中的状态属存入</span> <span class="string">Threadlocal,单例bean,多线程==&gt;OK</span></span><br><span class="line"></span><br><span class="line"><span class="meta">ThreadLocal,持点</span>:<span class="string">一次请求,一个线程,每一个线程对应的一个独立的 threadlocal</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="JWT" scheme="http://example.com/tags/JWT/"/>
    
    <category term="登录" scheme="http://example.com/tags/%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-用户中心-注册</title>
    <link href="http://example.com/2022/06/30/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/"/>
    <id>http://example.com/2022/06/30/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/</id>
    <published>2022-06-30T03:13:05.000Z</published>
    <updated>2022-06-30T08:06:59.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户中心-注册"><a href="#用户中心-注册" class="headerlink" title="用户中心-注册"></a>用户中心-注册</h1><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">阿里SMS</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现数据校验功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现短信发送功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现注册功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现根据用户名和密码查询用户功能</span></span><br></pre></td></tr></table></figure><h1 id="1-阿里短信服务"><a href="#1-阿里短信服务" class="headerlink" title="1.阿里短信服务"></a>1.阿里短信服务</h1><p>之前我们已经学习过了阿里短信服务，但是大家真的掌握了企业中短信发送的正确方式吗？来看看我们在乐优商城中，如何实现短信发送功能。</p><h2 id="1-1-demo"><a href="#1-1-demo" class="headerlink" title="1.1.demo"></a>1.1.demo</h2><p>注册页面上有短信发送的按钮，当用户点击发送短信，我们需要生成验证码，发送给用户。我们将使用阿里提供的阿里大于来实现短信发送。</p><p>参考课前资料的《阿里短信.md》学习demo入门</p><h2 id="1-2-创建短信微服务"><a href="#1-2-创建短信微服务" class="headerlink" title="1.2.创建短信微服务"></a>1.2.创建短信微服务</h2><p>在以前，我们都是把发送短信功能抽取一个工具类，任何地方需要，直接调用工具类发送短信即可。这样的方式存在以下缺点：</p><ul><li>发送短信代码与业务代码耦合</li><li>短信发送功能会影响业务功能执行</li></ul><p>如果在业务代码中，嵌入发送短信的代码，那就是功能的耦合，不方便后期的维护。而且</p><p>因为短信发送是调用第三方的云服务，API调用成功与否、执行时长都是不确定的。如果执行发短信时，因为网络问题导致阻塞，那么我们自己的业务也会阻塞。</p><p>为了解决上述问题，提高程序的响应速度，短信发送我们都将采用异步发送方式，即：</p><ul><li>短信服务监听MQ消息</li><li>收到消息后发送短信，根据消息<code>routing_key</code>不同，发送不同类型的短信</li><li>其它服务要发送短信时，通过MQ通知短信微服务。</li></ul><h3 id="1-2-1-创建module"><a href="#1-2-1-创建module" class="headerlink" title="1.2.1.创建module"></a>1.2.1.创建module</h3><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553781676879.png" alt="1553781676879"></p><h3 id="1-2-2-pom"><a href="#1-2-2-pom" class="headerlink" title="1.2.2.pom"></a>1.2.2.pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-sms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-编写启动类"><a href="#1-2-3-编写启动类" class="headerlink" title="1.2.3.编写启动类"></a>1.2.3.编写启动类</h3><p>我们在<code>ly-sms</code>的<code>com.leyou.sms</code>包下，新建一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.sms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.sms&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LySmsApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LySmsApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-编写application-yml"><a href="#1-2-4-编写application-yml" class="headerlink" title="1.2.4.编写application.yml"></a>1.2.4.编写application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sms-service</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-mq</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><h2 id="1-3-编写短信工具类"><a href="#1-3-编写短信工具类" class="headerlink" title="1.3.编写短信工具类"></a>1.3.编写短信工具类</h2><p>接下来，我们把刚刚学习的Demo中代码抽取成一个工具，方便后期使用</p><h3 id="1-3-1-属性抽取"><a href="#1-3-1-属性抽取" class="headerlink" title="1.3.1.属性抽取"></a>1.3.1.属性抽取</h3><p>我们首先把一些常量抽取到application.yml中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">sms:</span></span><br><span class="line">    <span class="attr">accessKeyID:</span> <span class="string">LTAIfmmL26haCK0b</span> <span class="comment"># 你自己的accessKeyId</span></span><br><span class="line">    <span class="attr">accessKeySecret:</span> <span class="string">pX3RQns9ZwXs75M6Isae9sMgBLXDfY</span> <span class="comment"># 你自己的AccessKeySecret</span></span><br><span class="line">    <span class="attr">signName:</span> <span class="string">乐优商城</span> <span class="comment"># 签名名称</span></span><br><span class="line">    <span class="attr">verifyCodeTemplate:</span> <span class="string">SMS_143719983</span> <span class="comment"># 模板名称</span></span><br><span class="line">    <span class="attr">domain:</span> <span class="string">dysmsapi.aliyuncs.com</span> <span class="comment"># 域名</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">SendSMS</span> <span class="comment"># API类型，发送短信</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">2017-05-25</span> <span class="comment"># API版本，固定值</span></span><br><span class="line">    <span class="attr">regionID:</span> <span class="string">cn-hangzhou</span> <span class="comment"># 区域id</span></span><br></pre></td></tr></table></figure><p>然后在<code>com.leyou.sms.config</code>包下，定义一个类，读取yml文件的属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.sms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;ly.sms&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String accessKeyID;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String accessKeySecret;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String signName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String verifyCodeTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信请求的域名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String domain;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * API版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String version;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * API类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String action;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区域</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String regionID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-阿里客户端"><a href="#1-3-2-阿里客户端" class="headerlink" title="1.3.2.阿里客户端"></a>1.3.2.阿里客户端</h3><p>然后通过java配置，将发请求需要的客户端注册到Spring容器。</p><p>在<code>com.leyou.sms.config</code>包定义一个配置类，标记为<code>@Configuration</code>，并通过<code>@Bean</code>注册阿里客户端到Spring：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.sms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SmsProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAcsClient <span class="title">acsClient</span><span class="params">(SmsProperties prop)</span></span>&#123;</span><br><span class="line">        DefaultProfile profile = DefaultProfile.getProfile(</span><br><span class="line">                prop.getRegionID(), prop.getAccessKeyID(), prop.getAccessKeySecret());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-工具类"><a href="#1-3-3-工具类" class="headerlink" title="1.3.3.工具类"></a>1.3.3.工具类</h3><p>我们把阿里提供的demo进行简化和抽取，封装一个工具类。</p><p>在<code>com.leyou.sms.utils</code>包下，新建工具类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.sms.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.CommonRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.CommonResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ServerException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.http.MethodType;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.http.ProtocolType;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.JsonUtils;</span><br><span class="line"><span class="keyword">import</span> com.leyou.sms.config.SmsProperties;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.sms.constants.SmsConstants.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IAcsClient client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SmsProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsUtils</span><span class="params">(IAcsClient client, SmsProperties prop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">        <span class="keyword">this</span>.prop = prop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信验证码的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code  验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendVerifyCode</span><span class="params">(String phone, String code)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数</span></span><br><span class="line">        String param = String.format(VERIFY_CODE_PARAM_TEMPLATE, code);</span><br><span class="line">        <span class="comment">// 发送短信</span></span><br><span class="line">        sendMessage(phone, prop.getSignName(), prop.getVerifyCodeTemplate(), param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用的发送短信的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone    手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signName 签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> template 模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param    模板参数，json风格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String phone, String signName, String template, String param)</span> </span>&#123;</span><br><span class="line">        CommonRequest request = <span class="keyword">new</span> CommonRequest();</span><br><span class="line">        request.setProtocol(ProtocolType.HTTPS);</span><br><span class="line">        request.setMethod(MethodType.POST);</span><br><span class="line">        request.setDomain(prop.getDomain());</span><br><span class="line">        request.setVersion(prop.getVersion());</span><br><span class="line">        request.setAction(prop.getAction());</span><br><span class="line">        request.putQueryParameter(SMS_PARAM_KEY_PHONE, phone);</span><br><span class="line">        request.putQueryParameter(SMS_PARAM_KEY_SIGN_NAME, signName);</span><br><span class="line">        request.putQueryParameter(SMS_PARAM_KEY_TEMPLATE_CODE, template);</span><br><span class="line">        request.putQueryParameter(SMS_PARAM_KEY_TEMPLATE_PARAM, param);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CommonResponse response = client.getCommonResponse(request);</span><br><span class="line">            <span class="keyword">if</span> (response.getHttpStatus() &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;【SMS服务】发送短信失败。响应信息：&#123;&#125;&quot;</span>, response.getData());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取响应体</span></span><br><span class="line">            Map&lt;String, String&gt; resp = JsonUtils.toMap(response.getData(), String.class, String.class);</span><br><span class="line">            <span class="comment">// 判断是否是成功</span></span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.equals(OK, resp.get(SMS_RESPONSE_KEY_CODE))) &#123;</span><br><span class="line">                <span class="comment">// 不成功，</span></span><br><span class="line">                log.error(<span class="string">&quot;【SMS服务】发送短信失败，原因&#123;&#125;&quot;</span>, resp.get(SMS_RESPONSE_KEY_MESSAGE));</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;【SMS服务】发送短信成功，手机号：&#123;&#125;, 响应：&#123;&#125;&quot;</span>, phone, response.getData());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServerException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;【SMS服务】发送短信失败，服务端异常。&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;【SMS服务】发送短信失败，客户端异常。&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里把阿里SDK中会用到的一些参数KEY，响应KEY都定义成了常量，定义在<code>ly-sms</code>的<code>com.leyou.sms.constants</code>包下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.sms.constants;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsConstants</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_PARAM_KEY_PHONE = <span class="string">&quot;PhoneNumbers&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_PARAM_KEY_SIGN_NAME = <span class="string">&quot;SignName&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_PARAM_KEY_TEMPLATE_CODE = <span class="string">&quot;TemplateCode&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_PARAM_KEY_TEMPLATE_PARAM= <span class="string">&quot;TemplateParam&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_RESPONSE_KEY_CODE = <span class="string">&quot;Code&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_RESPONSE_KEY_MESSAGE = <span class="string">&quot;Message&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OK = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信验证码的参数的模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERIFY_CODE_PARAM_TEMPLATE = <span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;%s\&quot;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554515536227.png" alt="1554515536227"> </p><h2 id="1-4-编写消息监听器"><a href="#1-4-编写消息监听器" class="headerlink" title="1.4.编写消息监听器"></a>1.4.编写消息监听器</h2><p>接下来，在<code>com.leyou.sms.mq</code>包中编写消息监听器，当接收到消息后，我们发送短信。我们可以通过<code>routing_key</code>，监听不同类型消息，发送不同类型短信。</p><p>本例中，我们监听<code>VERIFY_CODE_KEY</code>，发送验证码短信。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.sms.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.RegexUtils;</span><br><span class="line"><span class="keyword">import</span> com.leyou.sms.utils.SmsUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.common.constants.MQConstants.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SmsUtils smsUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageListener</span><span class="params">(SmsUtils smsUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.smsUtils = smsUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = QueueConstants.SMS_VERIFY_CODE_QUEUE, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = ExchangeConstants.SMS_EXCHANGE_NAME, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = RoutingKeyConstants.VERIFY_CODE_KEY</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenVerifyCodeMessage</span><span class="params">(Map&lt;String,String&gt; msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(msg))&#123;</span><br><span class="line">            <span class="comment">// 如果消息为空，不处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 手机号</span></span><br><span class="line">        String phone = msg.get(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!RegexUtils.isPhone(phone)) &#123;</span><br><span class="line">            <span class="comment">// 手机号有误，不处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 验证码</span></span><br><span class="line">        String code = msg.get(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!RegexUtils.isCodeValid(code)) &#123;</span><br><span class="line">            <span class="comment">// 验证码有误，不处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发送短信</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            smsUtils.sendVerifyCode(phone, code);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 短信发送失败，我不想重试，异常捕获</span></span><br><span class="line">            log.error(<span class="string">&quot;【SMS服务】短信验证码发送失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到，消息体是一个Map，里面有两个属性：</p><ul><li>phone：电话号码</li><li>code：短信验证码</li></ul><h2 id="1-5-启动"><a href="#1-5-启动" class="headerlink" title="1.5.启动"></a>1.5.启动</h2><p>启动项目，然后查看RabbitMQ控制台，发现交换机已经创建：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1527239600218.png" alt="1527239600218"></p><h2 id="1-6-单元测试"><a href="#1-6-单元测试" class="headerlink" title="1.6.单元测试"></a>1.6.单元测试</h2><p>编写一个测试类，尝试发送一条短信消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;13000000000&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;ly.sms.exchange&quot;</span>, <span class="string">&quot;sms.verify.code&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">上面讲的都是测试后端给阿里云的短信服务发送短信验证功能，</span></span><br><span class="line"><span class="attr">至于阿里云sms服务的开通，请参考网上教程。</span></span><br><span class="line"><span class="attr">一定要学会看阿里云的官网里的SMS短信服务里面的详细教程,</span></span><br><span class="line"><span class="attr">里面还有让我们导入的java依赖包，java代码；这是我们迁移学习的能力</span></span><br><span class="line"><span class="attr">要学的东西太多了，以后还有很多第三方服务需要接入我们的项目，我们要学会如何上手，使用别人的服务！</span></span><br></pre></td></tr></table></figure><h1 id="2-创建用户中心"><a href="#2-创建用户中心" class="headerlink" title="2.创建用户中心"></a>2.创建用户中心</h1><p>用户搜索到自己心仪的商品，接下来就要去购买，但是购买必须先登录。所以接下来我们编写用户中心，实现用户的登录和注册功能。</p><p>用户中心的提供的服务：</p><ul><li>用户的注册</li><li>用户个人信息管理</li><li>修改密码</li><li>修改手机</li><li>用户地址管理</li><li>用户收藏管理</li><li>…</li></ul><p>这里我们暂时先实现基本的：<code>注册和登录</code>功能，其它功能大家可以自行补充完整。</p><p>因为用户中心的服务其它微服务也会调用，因此这里我们做聚合：</p><ul><li>ly-user：父工程，包含3个子工程：<ul><li>ly-user-api：接口</li><li>ly-user-pojo:实体</li><li>ly-user-service：业务和服务</li></ul></li></ul><h2 id="2-1-创建父module"><a href="#2-1-创建父module" class="headerlink" title="2.1.创建父module"></a>2.1.创建父module</h2><p>创建</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554386667625.png" alt="1554386667625"></p><p>位置：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554386686948.png" alt="1554386686948"></p><h2 id="2-1-创建ly-user-pojo"><a href="#2-1-创建ly-user-pojo" class="headerlink" title="2.1.创建ly-user-pojo"></a>2.1.创建ly-user-pojo</h2><p>项目坐标：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554386749299.png" alt="1554386749299"> </p><p>保存的位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554386775550.png" alt="1554386775550"></p><p>pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-创建ly-user-api"><a href="#2-2-创建ly-user-api" class="headerlink" title="2.2.创建ly-user-api"></a>2.2.创建ly-user-api</h2><p>创建module：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/image-20200316202316961.png" alt="image-20200316202316961"></p><p>位置：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/image-20200316202327368.png" alt="image-20200316202327368"></p><p>pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-创建ly-user-service"><a href="#2-3-创建ly-user-service" class="headerlink" title="2.3.创建ly-user-service"></a>2.3.创建ly-user-service</h2><p>创建module</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554386965099.png" alt="1554386965099"></p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554386981284.png" alt="1554386981284"></p><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>ly-user</code>的<code>com.leyou.user</code>包下创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.user&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.leyou.user.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyUserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyUserApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在application.yml文件中编写配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ly-mysql:3306/heima?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="attr">insert-strategy:</span> <span class="string">not_null</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.user.entity</span></span><br></pre></td></tr></table></figure><p>父工程ly-user的pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ly-user-pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ly-user-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ly-user-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-添加网关路由"><a href="#2-4-添加网关路由" class="headerlink" title="2.4.添加网关路由"></a>2.4.添加网关路由</h2><p>我们修改<code>ly-gateway</code>，添加路由规则，对<code>user-service</code>进行路由:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># ...略</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment"># ...略</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 用户服务</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br></pre></td></tr></table></figure><h1 id="3-用户中心功能"><a href="#3-用户中心功能" class="headerlink" title="3.用户中心功能"></a>3.用户中心功能</h1><h2 id="3-1-接口文档"><a href="#3-1-接口文档" class="headerlink" title="3.1.接口文档"></a>3.1.接口文档</h2><p>在我们的接口文档中，可以选择查看用户服务的接口：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/image-20200316214623458.png" alt="image-20200316214623458"></p><p>包含下面内容：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/image-20200316214541277.png" alt="image-20200316214541277"> </p><h2 id="3-2-数据结构"><a href="#3-2-数据结构" class="headerlink" title="3.2.数据结构"></a>3.2.数据结构</h2><p>大家把数据库中的<code>tb_user</code>删除，然后重新运行下面的SQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_user` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(32) NOT NULL COMMENT &#x27;用户名&#x27;,</span><br><span class="line">  `password` varchar(60) NOT NULL COMMENT &#x27;密码，加密存储&#x27;,</span><br><span class="line">  `phone` varchar(11) DEFAULT NULL COMMENT &#x27;注册手机号&#x27;,</span><br><span class="line">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `username` (`username`) USING BTREE,</span><br><span class="line">  UNIQUE KEY `phone` (`phone`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 COMMENT=&#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure><p>数据结构比较简单，因为根据用户名查询的频率较高，所以我们给用户名创建了索引</p><h2 id="3-3-基本代码"><a href="#3-3-基本代码" class="headerlink" title="3.3.基本代码"></a>3.3.基本代码</h2><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>在<code>ly-user-service</code>的<code>com.leyou.user.entity</code>包下，创建实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><p>在<code>ly-user-service</code>的<code>com.leyou.user.mapper</code>包下，创建Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>在<code>ly-user-service</code>的<code>com.leyou.user.service</code>包下，创建Service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-user-service</code>的<code>com.leyou.user.service.impl</code>包下，创建Service的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.service.UserService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-查询数据是否存在"><a href="#3-4-查询数据是否存在" class="headerlink" title="3.4.查询数据是否存在"></a>3.4.查询数据是否存在</h2><h3 id="3-4-1-接口说明："><a href="#3-4-1-接口说明：" class="headerlink" title="3.4.1.接口说明："></a>3.4.1.接口说明：</h3><p>用户注册时，用户输入自己的手机号或者用户名，此时我们前端会把数据发送到服务端，服务端查询数据库，判断数据是否存在，把结果返回到前端，提示用户。</p><p>接口路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /info/exists/&#123;data&#125;/&#123;type&#125;</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>data</td><td>要校验的数据，可能是手机或用户名</td><td>是</td><td>String</td><td>无</td></tr><tr><td>type</td><td>数据类型，1代表用户名，2代表手机</td><td>是</td><td>Integer</td><td>无</td></tr></tbody></table><p>返回结果：</p><p>返回布尔类型结果：</p><ul><li>true：存在</li><li>false：不存在</li></ul><p>状态码：</p><ul><li>200：校验成功</li><li>400：参数有误，比如type传递了3</li><li>500：服务器内部异常</li></ul><h3 id="3-4-2-controller"><a href="#3-4-2-controller" class="headerlink" title="3.4.2.controller"></a>3.4.2.controller</h3><p>根据接口文档信息，我们可以确定：</p><ul><li>请求方式：GET</li><li>请求路径：/info/exists/{data}/{type}</li><li>请求参数：data,type</li><li>返回结果：true或false</li></ul><p>在<code>ly-user-service</code>的<code>com.leyou.user.web</code>包中，创建一个<code>UserController</code>，并编写接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.user.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验手机号或用户名是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 用户名或手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 数据类型：1是用户名；2是手机；其它是参数有误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：可以使用; false：不可使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/exists/&#123;data&#125;/&#123;type&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Boolean&gt; <span class="title">exists</span><span class="params">(<span class="meta">@PathVariable(&quot;data&quot;)</span> String data, <span class="meta">@PathVariable(&quot;type&quot;)</span> Integer type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userService.exists(data, type));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-Service"><a href="#3-4-3-Service" class="headerlink" title="3.4.3.Service"></a>3.4.3.Service</h3><p>首先，在<code>ly-user</code>的<code>com.leyou.user.service</code>包中的<code>UserService</code>接口中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Boolean <span class="title">exists</span><span class="params">(String data, Integer type)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-user</code>的<code>com.leyou.user.service.impl</code>包中的<code>UserServiceImpl</code>接口中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">exists</span><span class="params">(String data, Integer type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(type != <span class="number">1</span> &amp;&amp; type != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;请求参数有误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 校验手机或用户名是否存在</span></span><br><span class="line">    <span class="keyword">return</span> query()</span><br><span class="line">        .eq(type == <span class="number">1</span>, <span class="string">&quot;username&quot;</span>, data)</span><br><span class="line">        .eq(type == <span class="number">2</span>, <span class="string">&quot;phone&quot;</span>, data)</span><br><span class="line">        .count() == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-发送短信功能"><a href="#3-5-发送短信功能" class="headerlink" title="3.5.发送短信功能"></a>3.5.发送短信功能</h2><h3 id="3-5-1-接口说明"><a href="#3-5-1-接口说明" class="headerlink" title="3.5.1.接口说明"></a>3.5.1.接口说明</h3><p>当用户输入手机号以后，点击发送短信验证码功能，前端会把用户手机号码发送到服务端，服务端需要生成一个验证码，然后发送到指定的手机号。</p><p>生成的验证码需要在服务端保存，下次用户提交验证码时，方便做校验。</p><p><strong>接口路径</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Post /info/code</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><p>form表单请求参数：</p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>phone</td><td>发短信的目标手机号码</td><td>是</td><td>String</td><td>无</td></tr></tbody></table><p><strong>返回结果：</strong></p><p>无</p><p><strong>状态码：</strong></p><ul><li>204：发送成功</li><li>400：参数有误</li><li>500：服务器内部异常</li></ul><p>这里的业务逻辑是这样的：</p><ul><li>1）我们接收页面发送来的手机号码</li><li>2）生成一个随机验证码</li><li>3）将验证码保存在服务端（要用redis代替session）</li><li>4）发送短信，将验证码发送到用户手机（向MQ发送消息）</li></ul><p>那么问题来了：验证码保存在哪里呢？</p><p>验证码有一定有效期，一般是5分钟，我们可以利用Redis的过期机制来保存。</p><h3 id="3-5-2-controller"><a href="#3-5-2-controller" class="headerlink" title="3.5.2.controller"></a>3.5.2.controller</h3><p>在<code>ly-user-service</code>的<code>com.leyou.user.web</code>包中的<code>UserController</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/code&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone)</span></span>&#123;</span><br><span class="line">    userService.sendCode(phone);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-Service"><a href="#3-5-3-Service" class="headerlink" title="3.5.3.Service"></a>3.5.3.Service</h3><p>这里的逻辑会稍微复杂：</p><ul><li>生成随机验证码</li><li>将验证码保存到Redis中，用来在注册的时候验证</li><li>发送验证码到<code>ly-sms-service</code>服务，发送短信</li></ul><p>因此，我们需要引入Redis和AMQP：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加RabbitMQ和Redis配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-mq</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><p>然后，在<code>ly-user</code>的<code>com.leyou.user.service</code>包中的<code>UserService</code>接口中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(String phone)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-user</code>的<code>com.leyou.user.service.impl</code>包中的<code>UserServiceImpl</code>中添加方法：</p><p>先引入<code>RedisTemplate</code>和<code>AmqpTemplate</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(StringRedisTemplate redisTemplate, AmqpTemplate amqpTemplate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    <span class="keyword">this</span>.amqpTemplate = amqpTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是业务代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.验证手机号格式</span></span><br><span class="line">    <span class="keyword">if</span> (!RegexUtils.isPhone(phone)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;请求参数有误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.使用Apache的工具类生成6位数字验证码</span></span><br><span class="line">    String code = RandomStringUtils.randomNumeric(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.保存验证码到redis</span></span><br><span class="line">    redisTemplate.opsForValue().set(KEY_PREFIX + phone, code, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.发送RabbitMQ消息到ly-sms</span></span><br><span class="line">    Map&lt;String, String&gt; msg = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;phone&quot;</span>, phone);</span><br><span class="line">    msg.put(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">    amqpTemplate.convertAndSend(SMS_EXCHANGE_NAME, VERIFY_CODE_KEY, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>手机号校验使用了ly-common中定义的正则工具类</li><li>要设置短信验证码在Redis的缓存有效时间</li></ul><p>拓展知识：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">我们利用阿里的短信发送服务，可以直接在后端向阿里云短信服务发请求（将验证码跟手机号作为参数带过去）</span></span><br><span class="line"><span class="attr">但如果并发量上来，阿里云短信服务容易产生问题时，验证码短信服务就会失败</span></span><br><span class="line"></span><br><span class="line"><span class="attr">为了提高我们的系统的健壮性，先随机生成验证码，将验证码保存到redis中并设置有效期5分钟，</span></span><br><span class="line"><span class="attr">然后将验证码跟手机号发给我们的MQ服务，</span></span><br><span class="line"><span class="attr">再写一个SMS微服务监听MQ，</span></span><br><span class="line"><span class="attr">SMS微服务监听到MQ有消息来之后，再向阿里短信服务发送请求，变成异步的。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">因此我们平时点击发送验证码，几乎不会看到究竟有没有发送验证码成功，或者延迟挺久才发送成功</span></span><br><span class="line"><span class="attr">因为将消息发送给了MQ就可以了，至于阿里云第三方有没有短信发送，我们前端是看不到的。</span></span><br></pre></td></tr></table></figure><h2 id="3-6-注册功能"><a href="#3-6-注册功能" class="headerlink" title="3.6.注册功能"></a>3.6.注册功能</h2><h3 id="3-6-1-接口说明"><a href="#3-6-1-接口说明" class="headerlink" title="3.6.1.接口说明"></a>3.6.1.接口说明</h3><p><strong>功能说明</strong></p><p>用户页面填写数据，发送表单到服务端，服务端对用户输入的短信验证码进行校验，对用户数据做校验，另外还需要对用户密码进行加密存储，使用MD5加密，加密过程中使用随机码作为salt加盐，步骤如下：</p><ul><li>验证短信验证码</li><li>校验用户数据</li><li>对密码加密</li><li>写入数据库</li></ul><p><strong>接口路径</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /info</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><p>form表单格式</p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>username</td><td>用户名，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr><tr><td>password</td><td>用户密码，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr><tr><td>phone</td><td>手机号码</td><td>是</td><td>String</td><td>无</td></tr><tr><td>code</td><td>短信验证码</td><td>是</td><td>String</td><td>无</td></tr></tbody></table><p><strong>返回结果：</strong></p><p>无返回值。</p><p>状态码：</p><ul><li>201：注册成功</li><li>400：参数有误，注册失败</li><li>500：服务器内部异常，注册失败</li></ul><h3 id="3-6-2-controller"><a href="#3-6-2-controller" class="headerlink" title="3.6.2.controller"></a>3.6.2.controller</h3><p>在<code>ly-user-service</code>的<code>com.leyou.user.web</code>包中的<code>UserController</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">register</span><span class="params">(User user, <span class="meta">@RequestParam(&quot;code&quot;)</span> String code)</span></span>&#123;</span><br><span class="line">    userService.register(user, code);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-3-Service"><a href="#3-6-3-Service" class="headerlink" title="3.6.3.Service"></a>3.6.3.Service</h3><p>基本逻辑：</p><ul><li>1）校验短信验证码</li><li>2）对密码加密</li><li>3）写入数据库</li></ul><p>密码加密：</p><p>密码加密使用传统的MD5加密并不安全，这里我们使用的是<strong>Spring提供的BCryptPasswordEncoder加密算法</strong>，分成加密和验证两个过程：</p><ul><li><p>加密：算法会对明文密码随机生成一个salt，使用salt结合密码来加密，得到最终的密文。</p></li><li><p>验证密码：需要先拿到加密后的密码和要验证的密码，根据已加密的密码来推测出salt，然后利用相同的算法和salt对要验证码的密码加密，与已加密的密码对比即可。</p></li></ul><p>为了防止有人能根据密文推测出salt，我们需要在使用BCryptPasswordEncoder时配置随即密钥，在<code>com.leyou.user.config</code>包中创建一个配置类，注册<code>BCryptPasswordEncoder</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;ly.encoder.crypt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> strength;</span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 利用密钥生成随机安全码</span></span><br><span class="line">        SecureRandom secureRandom = <span class="keyword">new</span> SecureRandom(secret.getBytes());</span><br><span class="line">        <span class="comment">// 初始化BCryptPasswordEncoder</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder(strength, secureRandom);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中配置属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">encoder:</span></span><br><span class="line">    <span class="attr">crypt:</span></span><br><span class="line">      <span class="attr">secret:</span> <span class="string">$&#123;random.uuid&#125;</span> <span class="comment"># 随机的密钥，使用uuid</span></span><br><span class="line">      <span class="attr">strength:</span> <span class="number">6</span> <span class="comment"># 加密强度4~31，决定盐加密时的运算强度，超过10以后加密耗时会显著增加</span></span><br></pre></td></tr></table></figure><p>然后，在<code>ly-user</code>的<code>com.leyou.user.service</code>包中的<code>UserService</code>接口中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(User user, String code)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-user</code>的<code>com.leyou.user.service.impl</code>包中的<code>UserServiceImpl</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user, String code)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.校验验证码</span></span><br><span class="line">    <span class="comment">// 1.1 取出redis中的验证码</span></span><br><span class="line">    String cacheCode = redisTemplate.opsForValue().get(KEY_PREFIX + user.getPhone());</span><br><span class="line">    <span class="comment">// 1.2 比较验证码</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.equals(code, cacheCode)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.对密码加密</span></span><br><span class="line">    user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.写入数据库</span></span><br><span class="line">    save(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-服务端数据校验"><a href="#3-7-服务端数据校验" class="headerlink" title="3.7.服务端数据校验"></a>3.7.服务端数据校验</h2><p>刚才虽然实现了注册，但是服务端并没有进行数据校验，而前端的校验是很容易被有心人绕过的。所以我们必须在后台添加数据校验功能：</p><p>我们这里会使用Hibernate-Validator框架完成数据校验：</p><p>而SpringBoot的web启动器中已经集成了相关依赖：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1527244265451.png" alt="1527244265451"></p><h3 id="3-7-1-什么是Hibernate-Validator"><a href="#3-7-1-什么是Hibernate-Validator" class="headerlink" title="3.7.1.什么是Hibernate Validator"></a>3.7.1.什么是Hibernate Validator</h3><p>Hibernate Validator是Hibernate提供的一个开源框架，使用注解方式非常方便的实现服务端的数据校验。</p><p>官网：<a href="http://hibernate.org/validator/">http://hibernate.org/validator/</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1527244393041.png" alt="1527244393041"></p><p><strong>hibernate Validator</strong> 是 Bean Validation 的参考实现 。</p><p>Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint（约束） 的实现，除此之外还有一些附加的 constraint。</p><p>在日常开发中，Hibernate Validator经常用来验证bean的字段，基于注解，方便快捷高效。</p><h3 id="3-7-2-Bean校验的注解"><a href="#3-7-2-Bean校验的注解" class="headerlink" title="3.7.2.Bean校验的注解"></a>3.7.2.Bean校验的注解</h3><p>常用注解如下：</p><table><thead><tr><th><strong>Constraint</strong></th><th><strong>详细信息</strong></th></tr></thead><tbody><tr><td><strong>@Valid</strong></td><td>被注释的元素是一个对象，需要检查此对象的所有字段值</td></tr><tr><td><strong>@Null</strong></td><td>被注释的元素必须为 null</td></tr><tr><td><strong>@NotNull</strong></td><td>被注释的元素必须不为 null</td></tr><tr><td><strong>@AssertTrue</strong></td><td>被注释的元素必须为 true</td></tr><tr><td><strong>@AssertFalse</strong></td><td>被注释的元素必须为 false</td></tr><tr><td><strong>@Min(value)</strong></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><strong>@Max(value)</strong></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><strong>@DecimalMin(value)</strong></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><strong>@DecimalMax(value)</strong></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><strong>@Size(max,   min)</strong></td><td>被注释的元素的大小必须在指定的范围内</td></tr><tr><td><strong>@Digits   (integer, fraction)</strong></td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td><strong>@Past</strong></td><td>被注释的元素必须是一个过去的日期</td></tr><tr><td><strong>@Future</strong></td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td><strong>@Pattern(value)</strong></td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td><strong>@Email</strong></td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td><strong>@Length</strong></td><td>被注释的字符串的大小必须在指定的范围内</td></tr><tr><td><strong>@NotEmpty</strong></td><td>被注释的字符串的必须非空</td></tr><tr><td><strong>@Range</strong></td><td>被注释的元素必须在合适的范围内</td></tr><tr><td><strong>@NotBlank</strong></td><td>被注释的字符串的必须非空</td></tr><tr><td><strong>@URL(protocol=,host=,   port=,regexp=, flags=)</strong></td><td>被注释的字符串必须是一个有效的url</td></tr><tr><td><strong>@CreditCardNumber</strong></td><td>被注释的字符串必须通过Luhn校验算法，银行卡，信用卡等号码一般都用Luhn计算合法性</td></tr></tbody></table><h3 id="3-7-3-给User添加校验"><a href="#3-7-3-给User添加校验" class="headerlink" title="3.7.3.给User添加校验"></a>3.7.3.给User添加校验</h3><p>我们在User对象的部分属性上添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.constants.RegexPatterns;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Pattern(regexp = RegexPatterns.USERNAME_REGEX, message = &quot;用户名格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Pattern(regexp = RegexPatterns.USERNAME_REGEX, message = &quot;密码格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Pattern(regexp = RegexPatterns.PHONE_REGEX, message = &quot;手机号格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>RegexPatterns</code>是我们在<code>ly-common</code>中定义的正则表达式常量，其中还包括：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.constants;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexPatterns</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号正则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PHONE_REGEX = <span class="string">&quot;^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d&#123;8&#125;$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱正则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EMAIL_REGEX = <span class="string">&quot;^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名正则。4~32位的字母、数字、下划线</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME_REGEX = <span class="string">&quot;^\\w&#123;4,32&#125;$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码正则。4~32位的字母、数字、下划线</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD_REGEX = <span class="string">&quot;^\\w&#123;4,32&#125;$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码正则, 6位数字或字母</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERIFY_CODE_REGEX = <span class="string">&quot;^[a-zA-Z\\d]&#123;6&#125;$&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-4-在controller上进行控制"><a href="#3-7-4-在controller上进行控制" class="headerlink" title="3.7.4.在controller上进行控制"></a>3.7.4.在controller上进行控制</h3><p>在controller中只需要给User添加 @Valid注解即可。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/image-20200316211916679.png" alt="image-20200316211916679"></p><h3 id="3-7-5-测试"><a href="#3-7-5-测试" class="headerlink" title="3.7.5.测试"></a>3.7.5.测试</h3><p>我们故意填错：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1527247422251.png" alt="1527247422251"></p><p>然后SpringMVC会自动返回错误信息：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1527247492172.png" alt="1527247492172"></p><p>如果需要自定义返回结果，可以这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;register&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">register</span><span class="params">(<span class="meta">@Valid</span> User user, BindingResult result, <span class="meta">@RequestParam(&quot;code&quot;)</span> String code)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        String msg = result.getFieldErrors().stream().map(FieldError::getDefaultMessage)</span><br><span class="line">            .collect(Collectors.joining(<span class="string">&quot;|&quot;</span>));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    userService.register(user, code);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在User参数后面跟一个BindingResult参数，不管校验是否通过，都会进入方法内部。如何判断校验是否通过呢？</p><p>BindingResult中会封装错误结果，我们通过result.hashErrors来判断是否有错误，然后荣光result.getFieldErrors来获取错误信息。</p><p>再次测试：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554547576246.png" alt="1554547576246"></p><p>结果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554547592656.png" alt="1554547592656"></p><h2 id="3-8-根据用户名和密码查询用户"><a href="#3-8-根据用户名和密码查询用户" class="headerlink" title="3.8.根据用户名和密码查询用户"></a>3.8.根据用户名和密码查询用户</h2><h3 id="3-8-1-接口说明"><a href="#3-8-1-接口说明" class="headerlink" title="3.8.1.接口说明"></a>3.8.1.接口说明</h3><h4 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h4><p>查询功能，根据参数中的用户名和密码查询指定用户，验证用户名和密码是否正确，如果正确我们返回用户信息，如果不正确，返回异常</p><h4 id="接口路径"><a href="#接口路径" class="headerlink" title="接口路径"></a>接口路径</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /info</span><br></pre></td></tr></table></figure><h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><p>form表单格式</p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>username</td><td>用户名，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr><tr><td>password</td><td>用户密码，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr></tbody></table><h4 id="返回结果："><a href="#返回结果：" class="headerlink" title="返回结果："></a>返回结果：</h4><p>用户的json格式数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">6572312</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>:<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;phone&quot;</span>:<span class="string">&quot;13000000000&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态码：</p><ul><li>200：查询成功</li><li>400：用户名或密码错误</li><li>500：服务器内部异常，查询失败</li></ul><p>这里要返回的结果与数据库字段不一致，需要在<code>ly-user-pojo</code>中定义一个dto：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;UserDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.stream().map(UserDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-2-controller"><a href="#3-8-2-controller" class="headerlink" title="3.8.2.controller"></a>3.8.2.controller</h3><p>在<code>ly-user-service</code>的<code>com.leyou.user.web</code>包中的<code>UserController</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据手机号和密码查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserDTO&gt; <span class="title">queryUserByPhoneAndPassword</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userService.queryUserByPhoneAndPassword(username, password));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-3-service"><a href="#3-8-3-service" class="headerlink" title="3.8.3.service"></a>3.8.3.service</h3><p>然后，在<code>ly-user</code>的<code>com.leyou.user.service</code>包中的<code>UserService</code>接口中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UserDTO <span class="title">queryUserByPhoneAndPassword</span><span class="params">(String phone, String password)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-user</code>的<code>com.leyou.user.service.impl</code>包中的<code>UserServiceImpl</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> UserDTO <span class="title">queryUserByPhoneAndPassword</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.根据用户名查询</span></span><br><span class="line">    User user = getOne(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().eq(<span class="string">&quot;username&quot;</span>, username));</span><br><span class="line">    <span class="comment">// 2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户名错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.校验密码</span></span><br><span class="line">    <span class="keyword">if</span>(!passwordEncoder.matches(password, user.getPassword()))&#123;</span><br><span class="line">        <span class="comment">// 密码错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.转换DTO</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserDTO(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意，<strong>查询时也要对密码进行加密后判断是否一致</strong>。</p><p><strong>注册业务总结：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">注册业务：</span></span><br><span class="line"><span class="attr">1</span> <span class="string">前端输入手机号，用户名，要先校验是否已经存在过手机或者用户名，</span></span><br><span class="line"><span class="attr">（通过查询用户表便可知道是否存在，很容易实现）</span></span><br><span class="line"><span class="attr">2</span> <span class="string">前端只有都不存在时前端才允许点击“发送验证码”；</span></span><br><span class="line"><span class="attr">3</span> <span class="string">点击“发送验证码”之后，后端保存验证码到redis中（并设置5分钟有效），同时通过阿里第三方发送短信</span></span><br><span class="line"></span><br><span class="line"><span class="attr">4</span> <span class="string">前端填好验证码之后点击注册，将手机号，用户名，密码，验证码带给后端</span></span><br><span class="line"></span><br><span class="line"><span class="attr">5</span> <span class="string">后端首先校验验证码，是否存在key，key的value对不对</span></span><br><span class="line"><span class="attr">6</span> <span class="string">验证码校验成功后就可以删除redis中的验证码了（节省内存）</span></span><br><span class="line"><span class="attr">7</span> <span class="string">然后将手机号，用户名，密码 保存到用户表中完成注册，当然密码要先加密。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">8</span> <span class="string">加密方式是Spring提供的BCryptPasswordEncoder加密算法。加盐加密。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">9</span> <span class="string">盐分为静态盐和动态盐，但是动态盐是的盐不同，得到的密文也不同</span></span><br><span class="line"><span class="attr">因此Spring保证了随机因子是一样的（配置文件中配置了随机因子），</span></span><br><span class="line"><span class="attr">因此由随机因子产生的动态盐是一样的。</span></span><br><span class="line"><span class="attr">只要服务器不重启，那么配置文件的随机因子就不会变，每次产生的盐就不会变。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">10最后：登录查询校验密码时：spring根据密码获取上次的盐，跟明文再次加密，然后才去数据库用户表校验密码</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用户中心-注册&quot;&gt;&lt;a href=&quot;#用户中心-注册&quot; class=&quot;headerlink&quot; title=&quot;用户中心-注册&quot;&gt;&lt;/a&gt;用户中心-注册&lt;/h1&gt;&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="阿里短信服务" scheme="http://example.com/tags/%E9%98%BF%E9%87%8C%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="md5加密" scheme="http://example.com/tags/md5%E5%8A%A0%E5%AF%86/"/>
    
    <category term="注册" scheme="http://example.com/tags/%E6%B3%A8%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-OpenResty与商品详情页</title>
    <link href="http://example.com/2022/06/28/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-OpenResty%E4%B8%8E%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/"/>
    <id>http://example.com/2022/06/28/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-OpenResty%E4%B8%8E%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/</id>
    <published>2022-06-28T14:10:45.000Z</published>
    <updated>2022-06-29T13:12:34.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="商品详情页"><a href="#商品详情页" class="headerlink" title="商品详情页"></a>商品详情页</h1><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">实现商品详情页几种解决办法</span></span><br><span class="line"><span class="meta">-</span> <span class="string">学会OpenResty的使用</span></span><br><span class="line"><span class="meta">-</span> <span class="string">学会Lua的基本语法</span></span><br><span class="line"><span class="meta">-</span> <span class="string">理解Nginx模板渲染功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">学会OpenResty操作Redis</span></span><br><span class="line"><span class="meta">-</span> <span class="string">学会Canal的使用</span></span><br></pre></td></tr></table></figure><h1 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1.实现思路"></a>1.实现思路</h1><p>用户搜索到商品后，就会点击商品，查看商品详情内容，就会访问到商品详情页。商品详情页是展示商品详细信息的一个页面，承载在网站的大部分流量和订单的入口。</p><p>因此，商品详情页必须能够应对高并发的压力。那么如何才能实现一个满足千万级并发量的商品详情页面呢？</p><p>接下来，我们就一起分析下商品详情页的设计思路。</p><h2 id="1-1-传统模式"><a href="#1-1-传统模式" class="headerlink" title="1.1.传统模式"></a>1.1.传统模式</h2><p>首先，来看下传统模式下，一个页面的加载和渲染过程：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310173422202.png" alt="image-20200310173422202"></p><p>基本流程如下：</p><ul><li>用户请求Nginx服务，获取到静态页面</li><li>然后页面发起ajax，向Tomcat服务获取数据</li><li>Tomcat查询数据库</li><li>页面渲染</li></ul><p>这种模式下，数据库称为了瓶颈，高并发情况下， 数据库难以支撑，因此我们可能会在服务之前加入缓存，减小数据库压力：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310173700012.png" alt="image-20200310173700012"></p><p>此时，整个服务的并发能力，就受限于Tomcat了，业务经常受到依赖的服务不稳定而导致的性能抖动。</p><h2 id="1-2-静态化页面"><a href="#1-2-静态化页面" class="headerlink" title="1.2.静态化页面"></a>1.2.静态化页面</h2><p>为了解决上述问题，就有了页面静态化方案，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310174506082.png" alt="image-20200310174506082"></p><p>基本流程：</p><ul><li>商品修改发送消息到MQ</li><li>微服务监听MQ，得知商品变化，渲染并生成一个静态页面</li><li>用户请求Nginx</li><li>Nginx直接返回渲染好的静态Html</li></ul><p>优点：</p><ul><li>用户请求渲染好的Html，响应速度快</li><li>通过MQ异步更新，保证数据同步</li></ul><p>缺陷：</p><ul><li>小部分数据如价格变更，整个静态页都要重新生成</li><li>随着商品数量增加，页面会越来越多</li><li>页面模板变更，所有商品的静态页都要重新生成，非常困难</li></ul><p><strong>分析方法总结：</strong>（两种方案都不行，然后提出两种优化方法）</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/313d024d6eed3ba52bf255e109e39f1.png" alt="313d024d6eed3ba52bf255e109e39f1"></p><h2 id="1-3-动态模板，静态化数据"><a href="#1-3-动态模板，静态化数据" class="headerlink" title="1.3.动态模板，静态化数据"></a>1.3.动态模板，静态化数据</h2><p>我们要解决的问题：</p><ul><li>能迅速响瞬变的需求，和各种变态需求；</li><li>支持各种垂直化页面改版；</li><li>页面模块化；</li><li>高性能、水平扩容；</li></ul><p>怎么办？</p><ul><li>如何做到动态响应需求变化，页面变化？<ul><li>将页面模板动态化，需要的数据静态化</li></ul></li><li>如何避免整个页面的全量更新？<ul><li>我们把页面分成几部分：如顶部面包屑、商品SKU展示、商品描述、商品评论等，形成多个页面模板（模块）。对应的数据也分成几部分，这些数据可能来自不同的微服务。这样可以减少因局部变更引起的整个页面重新生成。</li></ul></li><li>如何应对Tomcat的并发能力低问题？<ul><li>将模板渲染、数据放到nginx中做，利用nginx的高并发能力提高系统吞吐量</li></ul></li><li>如何实现数据静态化？<ul><li>需要的数据可以缓存在Nginx的本地共享词典中（长期不会修改的数据），如果命中则直接渲染并返回。如果未命中，则查询Redis集群，获取数据。如果Redis集群依然未命中，再去查询后台微服务，由微服务获取数据，然后写入缓存中，保证下次Nginx可以从缓存中拿到数据。这样可以减少服务端压力。</li></ul></li><li>如何保证数据一致性？<ul><li>为了保证Redis数据与数据库数据一致，我们还要用到Canal技术，监听数据库变化，及时更新Redis数据。</li></ul></li></ul><p>流程图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310181707858.png" alt="image-20200310181707858"></p><p>因此，我们需要做的事情包括：</p><ul><li>静态页数据服务：一个收集商品相关数据，并更新Redis缓存的数据服务</li><li>Nginx服务：接收用户请求，查询模板数据，利用模板渲染商品页面</li><li>Canal服务：监听数据库变化，同步通知静态页数据服务，更新Redis数据</li></ul><p>上图中，如果redis有想要的缓存数据，直接返回给nginx</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">相比上上图的传统缓冲，使用redis性能大大提高</span></span><br><span class="line"><span class="attr">2</span> <span class="string">以前redis都是与后端代码交互的（这里更新写入时也是哈）</span></span><br><span class="line"><span class="attr">但是访问时，直接由nginx访问，都不用经过后端，效率可想而知！</span></span><br></pre></td></tr></table></figure><h1 id="2-静态页数据服务"><a href="#2-静态页数据服务" class="headerlink" title="2.静态页数据服务"></a>2.静态页数据服务</h1><p>我们搭建一个微服务，来做静态页数据处理。事实上，这样的页面静态化功能可以拓展至任何数据更新不频繁的其它页面，都可以在我们这个微服务完成数据处理。</p><h2 id="2-1-搭建微服务"><a href="#2-1-搭建微服务" class="headerlink" title="2.1.搭建微服务"></a>2.1.搭建微服务</h2><p>项目坐标：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310183315470.png" alt="image-20200310183315470"></p><p>位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310183319641.png" alt="image-20200310183319641"></p><p>依赖：</p><p>修改项目中的<code>pom.xml</code>文件，添加下面依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--商品微服务接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka客户端--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类：</p><p>在<code>ly-page</code>的<code>com.leyou.page</code>包下，添加一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.leyou.item.client&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.page&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyPageApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyPageApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件application.yml中，添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">page-service</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br></pre></td></tr></table></figure><h2 id="2-2-数据分析"><a href="#2-2-数据分析" class="headerlink" title="2.2.数据分析"></a>2.2.数据分析</h2><p>商品详情页渲染过程中，需要哪些数据呢？</p><h3 id="2-2-1-需要的数据"><a href="#2-2-1-需要的数据" class="headerlink" title="2.2.1.需要的数据"></a>2.2.1.需要的数据</h3><p>来看这张图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310183805526.png" alt="image-20200310183805526"></p><p>其中包含的如：商品三级分类、商品品牌、商品名称，这些数据主要是在<code>tb_spu</code>表中</p><p>而像：标题、价格、库存、特有规格参数、图片等数据，来自于<code>tb_sku</code>表</p><p>再往下看：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310184017361.png" alt="image-20200310184017361"></p><p>这里的商品介绍、规格保证、售后保障、通用的规格参数等数据，来自于<code>tb_spu_detail</code>表，当然，规格参数的名字是在<code>tb_spec_param</code>表中查询的，规格组信息是在<code>tb_spec_group</code>表。</p><h3 id="2-2-2-数据的格式"><a href="#2-2-2-数据的格式" class="headerlink" title="2.2.2.数据的格式"></a>2.2.2.数据的格式</h3><p>我们需要的数据在很多表中，不过我们希望将来不同的数据库更新，只更新对应的缓存数据。因此我们不能将这些数据一次从商品服务查询并放入缓存，而是分开来做。</p><p>1）与SPU有关的信息：</p><ul><li>id：spu的id</li><li>name：商品名称</li><li>cid1\cid2\cid3：分类的三级id</li><li>brandId：品牌id</li></ul><p>2）分类</p><ul><li>categories：商品有关的三级分类对象的集合，对象只包含id和name</li></ul><p>3）品牌</p><ul><li>brand：商品相关的品牌对象，id和name</li></ul><p>4）spu下的所有sku集合</p><p>5）spu的SpuDetail信息</p><p>6）规格组及组内的参数集合</p><ul><li><p>因为页面渲染知道<strong>参数名称、id</strong>，还有<strong>规格组名称</strong>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310190549005.png" alt="image-20200310190549005"> </p></li></ul><h2 id="2-3-查询商品信息，存入Redis"><a href="#2-3-查询商品信息，存入Redis" class="headerlink" title="2.3.查询商品信息，存入Redis"></a>2.3.查询商品信息，存入Redis</h2><p>接下来，我们在静态页数据服务中，提供对Nginx访问的接口。当Nginx访问时，我们查询商品信息，存入Redis，然后把结果返回给Nginx。</p><h3 id="2-3-1-业务分析"><a href="#2-3-1-业务分析" class="headerlink" title="2.3.1.业务分析"></a>2.3.1.业务分析</h3><p>service业务中，我们需要做的事情包括：</p><ul><li>根据spuId查询spu</li><li>根据spuId查询detail</li><li>根据spuId查询Sku</li><li>根据categoryId集合查询Category对象集合</li><li>根据brandId查询Brand</li><li>根据categoryId查询规格组及组内参数</li><li>把上述数据<code>分别</code>存入Redis</li></ul><p>为了保证将来可以做到数据的局部修改，我们处理数据要分开到不同的业务方法中，分别查询、分别存储。</p><h3 id="2-3-2-DTO"><a href="#2-3-2-DTO" class="headerlink" title="2.3.2.DTO"></a>2.3.2.DTO</h3><p>缓存到redis的数据要尽可能简化，因此我们不能直接把从商品微服务查询的数据写入Redis，而是要简单处理下。</p><p>我们从商品微服务查询的规格参数信息数据较臃肿，这里要处理一下，封装到两个新的DTO中。</p><p>规格参数的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecParamNameDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean numeric;</span><br><span class="line">    <span class="keyword">private</span> Boolean generic;</span><br><span class="line">    <span class="keyword">private</span> String unit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规格组的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecGroupNameDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;SpecParamNameDTO&gt; params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-定义Service"><a href="#2-3-3-定义Service" class="headerlink" title="2.3.3.定义Service"></a>2.3.3.定义Service</h3><p>在<code>ly-page</code>的<code>com.leyou.page.service</code>包下的<code>GoodsPageService</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsPageService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载spu到redis中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId 商品id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">loadSpuData</span><span class="params">(Long spuId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载spuDetail到redis中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId 商品id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">loadSpuDetailData</span><span class="params">(Long spuId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载sku信息到redis中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId 商品id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">loadSkuListData</span><span class="params">(Long spuId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载分类信息到redis中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids 商品分类的三级分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">loadCategoriesData</span><span class="params">(List&lt;Long&gt; ids)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载品牌信息到redis中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brandId 品牌id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">loadBrandData</span><span class="params">(Long brandId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载规格参数信息到redis中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId 商品第三级分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">loadSpecData</span><span class="params">(Long categoryId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-page</code>的<code>com.leyou.page.service</code>包下的<code>GoodsPageServiceImpl</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.BeanHelper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.JsonUtils;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.client.ItemClient;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.dto.*;</span><br><span class="line"><span class="keyword">import</span> com.leyou.page.service.GoodsPageService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.page.service.dto.SpecGroupNameDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.page.service.dto.SpecParamNameDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsPageServiceImpl</span> <span class="keyword">implements</span> <span class="title">GoodsPageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ItemClient itemClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX_SPU = <span class="string">&quot;page:spu:id:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX_SKU = <span class="string">&quot;page:sku:id:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX_DETAIL = <span class="string">&quot;page:detail:id:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX_CATEGORY = <span class="string">&quot;page:category:id:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX_BRAND = <span class="string">&quot;page:brand:id:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX_SPEC = <span class="string">&quot;page:spec:id:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GoodsPageServiceImpl</span><span class="params">(ItemClient itemClient, StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.itemClient = itemClient;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loadSpuData</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询信息</span></span><br><span class="line">        SpuDTO spu = itemClient.querySpuById(spuId);</span><br><span class="line">        <span class="comment">// 组织数据</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, spu.getId());</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, spu.getName());</span><br><span class="line">        map.put(<span class="string">&quot;categoryIds&quot;</span>, spu.getCategoryIds());</span><br><span class="line">        map.put(<span class="string">&quot;brandId&quot;</span>, spu.getBrandId());</span><br><span class="line">        String json = JsonUtils.toJson(map);</span><br><span class="line">        <span class="comment">// 存入redis, 如果数据量逐渐增多，可以用SSDB代替</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY_PREFIX_SPU + spuId, json);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loadSpuDetailData</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询信息</span></span><br><span class="line">        SpuDetailDTO detail = itemClient.querySpuDetailById(spuId);</span><br><span class="line">        String json = JsonUtils.toJson(detail);</span><br><span class="line">        <span class="comment">// 存入redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY_PREFIX_DETAIL + spuId, json);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loadSkuListData</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询信息</span></span><br><span class="line">        List&lt;SkuDTO&gt; skuList = itemClient.querySkuBySpuId(spuId);</span><br><span class="line">        String json = JsonUtils.toJson(skuList);</span><br><span class="line">        <span class="comment">// 存入redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY_PREFIX_SKU + spuId, json);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loadCategoriesData</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询信息</span></span><br><span class="line">        List&lt;CategoryDTO&gt; list = itemClient.queryCategoryByIds(ids);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; categoryList = list.stream().map(categoryDTO -&gt; &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;id&quot;</span>, categoryDTO.getId());</span><br><span class="line">            map.put(<span class="string">&quot;name&quot;</span>, categoryDTO.getName());</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        String json = JsonUtils.toJson(categoryList);</span><br><span class="line">        <span class="comment">// 存入Redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY_PREFIX_CATEGORY + ids.get(<span class="number">2</span>), json);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loadBrandData</span><span class="params">(Long brandId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询信息</span></span><br><span class="line">        BrandDTO brand = itemClient.queryBrandById(brandId);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, brand.getId());</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, brand.getName());</span><br><span class="line">        String json = JsonUtils.toJson(map);</span><br><span class="line">        <span class="comment">// 存入Redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY_PREFIX_BRAND + brandId, json);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loadSpecData</span><span class="params">(Long categoryId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询信息</span></span><br><span class="line">        List&lt;SpecGroupDTO&gt; list = itemClient.querySpecList(categoryId);</span><br><span class="line"></span><br><span class="line">        List&lt;SpecGroupNameDTO&gt; groupList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SpecGroupDTO groupDTO : list) &#123;</span><br><span class="line">            SpecGroupNameDTO nameDTO = <span class="keyword">new</span> SpecGroupNameDTO();</span><br><span class="line">            nameDTO.setName(groupDTO.getName());</span><br><span class="line">            nameDTO.setParams(BeanHelper.copyWithCollection(groupDTO.getParams(), SpecParamNameDTO.class));</span><br><span class="line">            groupList.add(nameDTO);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String json = JsonUtils.toJson(groupList);</span><br><span class="line">        <span class="comment">// 存入Redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY_PREFIX_SPEC + categoryId, json);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-定义controller"><a href="#2-3-4-定义controller" class="headerlink" title="2.3.4.定义controller"></a>2.3.4.定义controller</h3><p>在<code>ly-page</code>的<code>com.leyou.page.web</code>中，添加一个<code>PageController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.page.service.GoodsPageService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GoodsPageService goodsPageService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageController</span><span class="params">(GoodsPageService goodsPageService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.goodsPageService = goodsPageService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品spu数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> spu数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/spu/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">querySpuPageData</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long spuId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsPageService.loadSpuData(spuId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品sku数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> sku数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sku/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">querySkuPageData</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long spuId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsPageService.loadSkuListData(spuId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品spuDetail数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> spu数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/detail/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">queryDetailPageData</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long spuId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsPageService.loadSpuDetailData(spuId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品分类数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids 商品分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/categories&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">queryCategoryPageData</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsPageService.loadCategoriesData(ids));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询品牌数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 品牌id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> spu数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/brand/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">queryBrandPageData</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsPageService.loadBrandData(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询规格数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 规格参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/spec/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">queryGoodsPageData</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long categoryId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsPageService.loadSpecData(categoryId));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-OpenResty渲染静态页"><a href="#3-OpenResty渲染静态页" class="headerlink" title="3.OpenResty渲染静态页"></a>3.OpenResty渲染静态页</h1><p>之前分析中，我们计划使用Nginx来完成<strong>静态页面模板的渲染</strong>，不过我们之前学习过Nginx的web服务器功能、反向代理功能、负载均衡功能。</p><p>但是如何利用Nginx查询Redis缓存？如何利用Nginx完成页面模板渲染？</p><p>nginx中有一个模块叫做<strong>ngx_lua</strong>，可以将Lua嵌入到Nginx中，从而可以使用Lua来编写脚本，这样就可以<strong>使用Lua编写应用逻辑，操作Redis、MySQL</strong>等等；这样就可以使用Lua语言开发高性能Web应用了。</p><p>那么OpenResty是什么呢？</p><h2 id="3-1-介绍OpenResty"><a href="#3-1-介绍OpenResty" class="headerlink" title="3.1.介绍OpenResty"></a>3.1.介绍OpenResty</h2><p>OpenResty官网地址：<a href="http://openresty.org/cn/">http://openresty.org/cn/</a></p><p>OpenResty® 是一个基于 <a href="http://openresty.org/cn/nginx.html">Nginx</a> 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p><p>OpenResty® 通过汇聚各种设计精良的 <a href="http://openresty.org/cn/nginx.html">Nginx</a> 模块（主要由 OpenResty 团队自主开发），从而将 <a href="http://openresty.org/cn/nginx.html">Nginx</a> 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 <a href="http://openresty.org/cn/nginx.html">Nginx</a> 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 <strong>1000K 以上单机并发</strong>连接的高性能 Web 应用系统。</p><p><strong>OpenResty® 的目标是让你的Web服务直接跑在 <a href="http://openresty.org/cn/nginx.html">Nginx</a> 服务内部</strong>，充分利用 <a href="http://openresty.org/cn/nginx.html">Nginx</a> 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。性能这么高，那以后Tomcat不得被完全取代了？？？</p><h2 id="3-2-安装OpenResty（先拍照！！！）"><a href="#3-2-安装OpenResty（先拍照！！！）" class="headerlink" title="3.2.安装OpenResty（先拍照！！！）"></a>3.2.安装OpenResty（先拍照！！！）</h2><p><strong>形成好习惯，安装前都要拍照。</strong></p><p>首先你的Linux虚拟机必须联网，这里建议大家统一使用CentOS7版本。</p><p>1）安装开发库:</p><p>首先要安装OpenResty的依赖开发库，执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre-devel openssl-devel gcc curl</span><br></pre></td></tr></table></figure><p>2）安装OpenResty仓库</p><p>你可以在你的 CentOS 系统中添加 <code>openresty</code> 仓库，这样就可以便于未来安装或更新我们的软件包（通过 <code>yum check-update</code> 命令）。运行下面的命令就可以添加我们的仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo</span><br></pre></td></tr></table></figure><p>3）安装OpenResty</p><p>然后就可以像下面这样安装软件包，比如 <code>openresty</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openresty</span><br></pre></td></tr></table></figure><p>4）安装opm工具</p><p>opm是OpenResty的一个管理工具，可以帮助我们安装一个第三方的Lua模块。</p><p>如果你想安装命令行工具 <code>opm</code>，那么可以像下面这样安装 <code>openresty-opm</code> 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openresty-opm</span><br></pre></td></tr></table></figure><p>5）目录结构</p><p>默认情况下，OpenResty安装的目录是：/usr/local/openresty</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310225539214.png" alt="image-20200310225539214"> </p><p>看到里面的nginx目录了吗，<strong>OpenResty就是在Nginx基础上集成了一些Lua模块</strong>。</p><p><strong>4）配置nginx的环境变量</strong></p><p>打开配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>在最下面加入两行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NGINX_HOME=/usr/<span class="built_in">local</span>/openresty/nginx</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;NGINX_HOME&#125;</span>/sbin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>NGINX_HOME：后面是OpenResty安装目录下的nginx的目录</p><p>然后让配置生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="3-3-Lua语言"><a href="#3-3-Lua语言" class="headerlink" title="3.3.Lua语言"></a>3.3.Lua语言</h2><p>OpenResty的开发和使用离不开Lua脚本，那么Lua又是什么呢？</p><h3 id="3-3-1-Lua介绍"><a href="#3-3-1-Lua介绍" class="headerlink" title="3.3.1.Lua介绍"></a>3.3.1.Lua介绍</h3><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p>Lua 是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组于 1993 年开发的，该小组成员有：Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo。</p><h3 id="3-3-2-语法入门"><a href="#3-3-2-语法入门" class="headerlink" title="3.3.2.语法入门"></a>3.3.2.语法入门</h3><p>Lua的详细语法大家可以参考网站上的一些教学，例如：<a href="https://www.runoob.com/lua/lua-tutorial.html">Lua菜鸟教程</a>，任何语言都是从基本的如：变量、数据类型、循环、逻辑判断、运算、数组等入手。相信熟悉java的你应该可以快速上手Lua。</p><p>因此我们从这几块入手，看一些简单命令即可：</p><p>1）变量声明</p><p>声明一个局部变量，用local关键字即可：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义数字</span></span><br><span class="line"><span class="keyword">local</span> a = <span class="number">123</span></span><br><span class="line"><span class="comment">-- 定义字符串</span></span><br><span class="line"><span class="keyword">local</span> b = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment">-- 定义数组</span></span><br><span class="line"><span class="keyword">local</span> c = &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;lua&quot;</span>&#125;</span><br><span class="line"><span class="comment">-- 定义table</span></span><br><span class="line"><span class="keyword">local</span> d = &#123;</span><br><span class="line">    name = <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    age = <span class="number">21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）打印结果</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3）条件控制</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( 布尔表达式 <span class="number">1</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="comment">--[ 在布尔表达式 1 为 true 时执行该语句块 --]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elseif</span>( 布尔表达式 <span class="number">2</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="comment">--[ 在布尔表达式 2 为 true 时执行该语句块 --]</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">   <span class="comment">--[ 如果以上布尔表达式都不为 true 则执行该语句块 --]</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>4）循环语句：</p><p>遍历数字</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>遍历数组：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--打印数组a的所有值  </span></span><br><span class="line"><span class="keyword">local</span> a = &#123;<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i, v)</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">-- 遍历时，i是角标，v是元素。Lua中数组角标从1开始</span></span><br></pre></td></tr></table></figure><p>遍历table：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义table</span></span><br><span class="line"><span class="keyword">local</span> b = &#123;</span><br><span class="line">    name = <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    age = <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(b) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">-- 遍历时，k是key，v是值。</span></span><br></pre></td></tr></table></figure><h2 id="3-4-OpenResty快速入门"><a href="#3-4-OpenResty快速入门" class="headerlink" title="3.4.OpenResty快速入门"></a>3.4.OpenResty快速入门</h2><p>为了不影响OpenResty安装目录的结构，我们在新的目录中来启动和配置。</p><h3 id="3-4-1-基本配置"><a href="#3-4-1-基本配置" class="headerlink" title="3.4.1.基本配置"></a>3.4.1.基本配置</h3><p>我们创建一个新的目录：/usr/resty</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr</span><br><span class="line">mkdir resty</span><br></pre></td></tr></table></figure><p>然后在这个目录下创建几个新目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> resty</span><br><span class="line">mkdir conf logs lua</span><br></pre></td></tr></table></figure><p>然后新建一个配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/resty</span><br><span class="line">vi conf/nginx.conf</span><br></pre></td></tr></table></figure><p>添加下面的内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="attribute">error_log</span> logs/error.log;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">lua_package_path</span> <span class="string">&quot;/usr/local/openresty/lualib/?.lua;;&quot;</span>;  <span class="comment">#lua 模块  </span></span><br><span class="line">    <span class="attribute">lua_package_cpath</span> <span class="string">&quot;/usr/local/openresty/lualib/?.so;;&quot;</span>;  <span class="comment">#c模块 </span></span><br><span class="line"><span class="attribute">lua_shared_dict</span> item_local_cache <span class="number">50m</span>; <span class="comment">#共享全局变量，在所有worker间共享</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">default_type</span>  text/html; <span class="comment"># 默认响应类型是html</span></span><br><span class="line">    <span class="attribute">include</span> lua.conf;    <span class="comment"># 引入一个lua.conf文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过include导入另一个配置，不在nginx.conf中写入太多内容。</p><h3 id="3-4-2-监听端口"><a href="#3-4-2-监听端口" class="headerlink" title="3.4.2.监听端口"></a>3.4.2.监听端口</h3><p>现在，<code>lua.conf</code>已经被引入，我们的所有配置都写到这个里面。</p><p>新建一个文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/resty</span><br><span class="line">vi conf/lua.conf</span><br></pre></td></tr></table></figure><p>添加下面的内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 响应数据由 lua/test.lua这个文件来指定</span></span><br><span class="line">        <span class="attribute">content_by_lua_file</span> lua/test.lua;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3第一个lua脚本"><a href="#3-4-3第一个lua脚本" class="headerlink" title="3.4.3第一个lua脚本"></a>3.4.3第一个lua脚本</h3><p>现在，响应数据已经交给 <code>lua/test.lua</code>来处理了，我们编写<code>lua/test.lua</code>文件，返回你想返回的任何内容即可。</p><p>新建一个文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/resty</span><br><span class="line">vi lua/test.lua</span><br></pre></td></tr></table></figure><p>写入下面内容：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx.say(<span class="string">&quot;&lt;h1&gt;hello, &lt;/h1&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>ngx.say()</code>可以理解成<code>HttpServletResponse</code>中的<code>response.getWriter().println()</code></p><h3 id="3-4-4-启动并访问"><a href="#3-4-4-启动并访问" class="headerlink" title="3.4.4.启动并访问"></a>3.4.4.启动并访问</h3><p>当前必须在<code>/usr/resty</code>目录中，然后执行命令</p><p>运行启动命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf</span><br></pre></td></tr></table></figure><ul><li><code>-p `pwd` </code>：-p 指定运行时路径前缀，pwd代表当前路径</li><li><code>-c conf/nginx.conf</code>：-c 指定运行时配置文件，这里指定了<code>conf/nginx.conf</code></li></ul><p>重新加载配置命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><p>停止命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s stop</span><br></pre></td></tr></table></figure><p>访问你的虚拟机地址，例如：<a href="http://192.168.206.99/%EF%BC%8C%E7%9C%8B%E5%88%B0%E8%BF%99%E4%B8%AA%E8%AF%B4%E6%98%8E%E6%88%90%E5%8A%9F%E4%BA%86%EF%BC%9A">http://192.168.206.99/，看到这个说明成功了：</a></p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200724220724841.png" alt="image-20200724220724841"></p><h2 id="3-5-获取请求参数"><a href="#3-5-获取请求参数" class="headerlink" title="3.5.获取请求参数"></a>3.5.获取请求参数</h2><p>Nginx接收到请求后，会帮我们解析并存储到内置变量中，只需要调用这些变量或方法就可以拿到。</p><ul><li><p><code>ngx.var</code> ： nginx变量，如果要赋值如ngx.var.b = 2，此变量必须提前声明；另外对于nginx location中使用正则捕获的捕获组可以使用ngx.var[捕获组数字]获取；</p></li><li><p><code>ngx.req.get_headers()</code>：获取请求头，获取带中划线的请求头时请使用如headers.user_agent这种方式；如果一个请求头有多个值，则返回的是table；</p></li><li><p><code>ngx.req.get_uri_args()</code>：获取url请求参数，其用法和<code>get_headers</code>类似；?name=jack</p></li><li><p><code>ngx.req.get_post_args()</code>：获取post请求内容体，其用法和<code>get_headers</code>类似，但是必须提前调用<code>ngx.req.read_body()</code>来读取body体（也可以选择在nginx配置文件使用<code>lua_need_request_body</code> on;开启读取body体，但是官方不推荐）；</p></li><li><p><code>ngx.req.get_body_data()</code>：为解析的请求body体内容字符串。</p></li></ul><h3 id="3-5-1-编写映射规则"><a href="#3-5-1-编写映射规则" class="headerlink" title="3.5.1.编写映射规则"></a>3.5.1.编写映射规则</h3><p>现在，我们在lua.conf中编写一条规则，来监听请求：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用正则表达式映射路径，有两个(\d+)，分别是第1组、第2组正则</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /lua_request/(\d+)/(\d+)</span> &#123;  </span><br><span class="line">    <span class="comment"># $1代表获取第1组正则捕获的内容，set $a $1代表把$1的值赋值给$a这个变量</span></span><br><span class="line">    <span class="attribute">set</span> $a <span class="variable">$1</span>;</span><br><span class="line">    <span class="comment"># $2代表获取第2组正则捕获的内容，set $b $2代表把$2的值赋值给$b这个变量</span></span><br><span class="line">    <span class="attribute">set</span> $b <span class="variable">$2</span>; </span><br><span class="line">    <span class="comment">#nginx内容处理  </span></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> lua/test_request.lua;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-编写脚本"><a href="#3-5-2-编写脚本" class="headerlink" title="3.5.2.编写脚本"></a>3.5.2.编写脚本</h3><p>然后在新建test_request.lua文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/resty</span><br><span class="line">vi lua/test_request.lua</span><br></pre></td></tr></table></figure><p>添加内容：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义一个函数，打印table数据,,-- 获取路径占位符中通过正则得到的参数,,-- 获取请求url参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayTables</span><span class="params">(val)</span></span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(val) <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">ngx.say(k, <span class="string">&quot; : &quot;</span>, <span class="built_in">table</span>.<span class="built_in">concat</span>(v, <span class="string">&quot;, &quot;</span>), <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ngx.say(k, <span class="string">&quot; : &quot;</span>, v, <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ngx.say(<span class="string">&#x27;&lt;header&gt;&#x27;</span>)</span><br><span class="line">ngx.say(<span class="string">&#x27;&lt;meta charset=&quot;utf-8&quot;&gt;&#x27;</span>)</span><br><span class="line">ngx.say(<span class="string">&#x27;&lt;/header&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ngx.say(<span class="string">&quot;&lt;h1&gt; -----请求路径占位符参数------- &lt;/h1&gt;&quot;</span>);</span><br><span class="line">ngx.say(<span class="string">&quot;&lt;h4&gt;&quot;</span>)</span><br><span class="line">ngx.say(<span class="string">&quot;ngx.var.a : &quot;</span>, ngx.var.a, <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br><span class="line">ngx.say(<span class="string">&quot;ngx.var.b : &quot;</span>, ngx.var.b, <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br><span class="line">ngx.say(<span class="string">&quot;ngx.var[1] : &quot;</span>, ngx.var[<span class="number">1</span>], <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br><span class="line">ngx.say(<span class="string">&quot;ngx.var[2] : &quot;</span>, ngx.var[<span class="number">2</span>], <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br><span class="line">ngx.say(<span class="string">&quot;&lt;/h4&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ngx.say(<span class="string">&quot;&lt;h1&gt; -----请求url参数------- &lt;/h1&gt;&quot;</span>);</span><br><span class="line">ngx.say(<span class="string">&quot;&lt;h4&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> params = ngx.req.get_uri_args()</span><br><span class="line">sayTables(params)</span><br><span class="line">ngx.say(<span class="string">&quot;&lt;/h4&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ngx.<span class="built_in">exit</span>(<span class="number">200</span>) </span><br></pre></td></tr></table></figure><h3 id="3-5-3-重启测试"><a href="#3-5-3-重启测试" class="headerlink" title="3.5.3.重启测试"></a>3.5.3.重启测试</h3><p>重启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><p>通过浏览器访问：</p><p><a href="http://192.168.206.99/lua_request/110/120?name=jack&amp;age=22">http://192.168.206.99/lua_request/110/120?name=jack&amp;age=22</a></p><p>结果：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200724221338944.png" alt="image-20200724221338944"></p><h2 id="3-6-OpenResty模板渲染模块"><a href="#3-6-OpenResty模板渲染模块" class="headerlink" title="3.6.OpenResty模板渲染模块"></a>3.6.OpenResty模板渲染模块</h2><p>动态web网页开发是Web开发中一个常见的场景，我们的商品详情页就需要nginx来完成页面的动态渲染，这要用到模板渲染模块。</p><p>我们会使用<a href="https://github.com/bungle/lua-resty-template">lua-resty-template</a>来完成。</p><h3 id="3-6-1-安装模板渲染模块"><a href="#3-6-1-安装模板渲染模块" class="headerlink" title="3.6.1.安装模板渲染模块"></a>3.6.1.安装模板渲染模块</h3><p>模板渲染组件并不是OpenResty自带的，需要我们自己来安装。</p><p>确保自己已经安装过OPM命令（参考安装OpenResty部分）。</p><p>输入命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opm get bungle/lua-resty-template</span><br></pre></td></tr></table></figure><h3 id="3-6-2-定义模板位置"><a href="#3-6-2-定义模板位置" class="headerlink" title="3.6.2.定义模板位置"></a>3.6.2.定义模板位置</h3><p>模板渲染与服务端的JSP类似，需要知道的信息包括：</p><ul><li>模板文件的位置</li><li>模板中的数据（上下文Context）</li></ul><p>我们先在<code>lua.conf</code>文件的server部分，定义全局的模板文件位置信息：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">set</span> $template_root <span class="string">&quot;/usr/resty/templates&quot;</span>; </span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200311121942817.png" alt="image-20200311121942817"></p><p>然后需要在<code>/usr/resty</code>目录下创建<code>templates</code>目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/resty</span><br><span class="line">mkdir templates</span><br></pre></td></tr></table></figure><h3 id="3-6-3-模板渲染"><a href="#3-6-3-模板渲染" class="headerlink" title="3.6.3.模板渲染"></a>3.6.3.模板渲染</h3><p>在<code>/usr/resty/conf/lua.conf</code>中定义一个location映射：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ /lua_template/(.*)</span> &#123;</span><br><span class="line">    <span class="comment"># 关闭lua代码缓存</span></span><br><span class="line">    <span class="attribute">lua_code_cache</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 指定请求交给lua/test_template.lua脚本来处理</span></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> lua/test_template.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建<code>test_template.lua</code>文件，编写脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/resty</span><br><span class="line">vi lua/test_template.lua</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入template模块,类似java导包</span></span><br><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">&quot;resty.template&quot;</span>)  </span><br><span class="line"><span class="comment">--渲染模板需要的上下文(数据)  </span></span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">    title = <span class="string">&quot;template test&quot;</span>, </span><br><span class="line">    msg = <span class="string">&quot;&lt;h1&gt;hello,&quot;</span>..ngx.var[<span class="number">1</span>]..<span class="string">&quot;&lt;/h1&gt;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--渲染模板 ，指定模板文件名称，指定所需要的数据，table格式</span></span><br><span class="line">template.render(<span class="string">&quot;t1.html&quot;</span>, context)  </span><br></pre></td></tr></table></figure><p>在<code>/usr/resty/templates</code>下新建模板文件：<code>t1.html</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/resty/templates/t1.html</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;*msg*&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-6-4-测试"><a href="#3-6-4-测试" class="headerlink" title="3.6.4.测试"></a>3.6.4.测试</h3><p>重启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><p>通过浏览器访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.206.99/lua_template/社会我拓哥</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200724221823448.png" alt="image-20200724221823448">  </p><h2 id="3-7-OpenResty的Redis模块"><a href="#3-7-OpenResty的Redis模块" class="headerlink" title="3.7.OpenResty的Redis模块"></a>3.7.OpenResty的Redis模块</h2><p>渲染页面时，需要的数据要从redis中获取，而OpenResty中整合了操作Redis的模块，可以直接使用。</p><p>前置条件：你的Linux上已经安装了Redis</p><p>如果你的redis装在windows，关闭windows防火墙，知道window的ip地址</p><h3 id="3-7-1-定义映射规则"><a href="#3-7-1-定义映射规则" class="headerlink" title="3.7.1.定义映射规则"></a>3.7.1.定义映射规则</h3><p>现在，我们在<code>lua.conf</code>中编写一条规则，来监听请求：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ /lua_redis/(.*)</span> &#123;</span><br><span class="line">    <span class="comment"># 关闭lua代码缓存</span></span><br><span class="line"><span class="attribute">lua_code_cache</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 指定请求交给lua/test_template.lua脚本来处理</span></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> lua/test_redis.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-2-使用Redis模块功能"><a href="#3-7-2-使用Redis模块功能" class="headerlink" title="3.7.2.使用Redis模块功能"></a>3.7.2.使用Redis模块功能</h3><p>然后在<code>lua</code>目录下创建文件：<code>test_redis.lua</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/resty/lua/test_redis.lua</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入redis模块</span></span><br><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span>(<span class="string">&quot;resty.redis&quot;</span>)</span><br><span class="line"><span class="comment">-- 定义释放redis连接的方法</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">close_redis</span><span class="params">(red)</span></span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> red <span class="keyword">then</span>  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="keyword">local</span> ok, err = red:<span class="built_in">close</span>()  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">        ngx.say(<span class="string">&quot;close redis error : &quot;</span>, err)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">--创建实例  </span></span><br><span class="line"><span class="keyword">local</span> red = redis:new()  </span><br><span class="line"><span class="comment">--设置超时（毫秒）  </span></span><br><span class="line">red:set_timeout(<span class="number">1000</span>)  </span><br><span class="line"><span class="comment">--建立连接 ,这里要指定redis的安装的ip和端口</span></span><br><span class="line"><span class="keyword">local</span> ip = <span class="string">&quot;127.0.0.1&quot;</span>  </span><br><span class="line"><span class="keyword">local</span> port = <span class="number">6379</span>  </span><br><span class="line"><span class="keyword">local</span> ok, err = red:connect(ip, port)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">    ngx.say(<span class="string">&quot;connect to redis error : &quot;</span>, err)  </span><br><span class="line">    <span class="keyword">return</span> close_redis(red)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">--调用API进行处理  </span></span><br><span class="line">ok, err = red:set(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello,&quot;</span>..ngx.var[<span class="number">1</span>])  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">    ngx.say(<span class="string">&quot;set msg error : &quot;</span>, err)  </span><br><span class="line">    <span class="keyword">return</span> close_redis(red)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">--调用API获取数据  </span></span><br><span class="line"><span class="keyword">local</span> resp, err = red:get(<span class="string">&quot;msg&quot;</span>)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span>  </span><br><span class="line">    ngx.say(<span class="string">&quot;get msg error : &quot;</span>, err)  </span><br><span class="line">    <span class="keyword">return</span> close_redis(red)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">--得到的数据为空处理  </span></span><br><span class="line"><span class="keyword">if</span> resp == ngx.null <span class="keyword">then</span>  </span><br><span class="line">    resp = <span class="string">&#x27;default&#x27;</span>  <span class="comment">--比如默认值  </span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">ngx.say(<span class="string">&quot;msg : &quot;</span>, resp)  </span><br><span class="line">  </span><br><span class="line">close_redis(red)  </span><br></pre></td></tr></table></figure><h3 id="3-7-3-测试"><a href="#3-7-3-测试" class="headerlink" title="3.7.3.测试"></a>3.7.3.测试</h3><p>重启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><p>通过浏览器访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.206.99/lua_redis/jack</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200724222028688.png" alt="image-20200724222028688"></p><h2 id="3-8-OpenResty-内部-请求代理"><a href="#3-8-OpenResty-内部-请求代理" class="headerlink" title="3.8.OpenResty  内部  请求代理"></a>3.8.OpenResty  内部  请求代理</h2><p>按照之前分析的实现原理，获取页面渲染数据时，我们先从redis拿，如果获取失败则请求tomcat，也就是之前我们准备的<code>ly-page</code>服务。</p><p>小结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">至此，浏览器发送请求，到达了windows的nginx，然后由第三方的openresty（安装在linux上）进行页面渲染</span></span><br><span class="line"><span class="attr">进行渲染前要先获取数据，要么从linux上的redis获取，这由上面的lua脚本语言可以实现。</span></span><br><span class="line"><span class="attr">但是当redis没有对应的缓存数据时，openresty需要从windows上的Tomcat服务器获取数据，这可如何是好？？？？</span></span><br></pre></td></tr></table></figure><p>那么<strong>如何在OpenResty内部主动发送一个http请求呢？</strong></p><h3 id="3-8-1-两种实现方案"><a href="#3-8-1-两种实现方案" class="headerlink" title="3.8.1.两种实现方案"></a>3.8.1.两种实现方案</h3><p>在OpenResty中有两种主动发送http请求的方案：</p><ul><li>利用http模块：利用第三方提供的http模块工具，模拟一个http请求</li><li>利用内部请求代理：利用nginx自带的capture功能</li></ul><p>这里我们使用nginx的capture功能，也就是<strong>内部请求代理</strong></p><h3 id="3-8-2-内部请求代理"><a href="#3-8-2-内部请求代理" class="headerlink" title="3.8.2.内部请求代理"></a>3.8.2.内部请求代理</h3><p>nginx的capture功能语法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> resp = ngx.location.capture(<span class="string">&quot;/path&quot;</span>,&#123;</span><br><span class="line">    method = ngx.HTTP_GET,   #请求方式</span><br><span class="line">    args = &#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;,  #get方式传参数</span><br><span class="line">    body = <span class="string">&quot;c=3&amp;d=4&quot;</span> #post方式传参数</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回的响应内容包括：</p><ul><li>resp.status：响应状态码</li><li>resp.header：响应头，是一个table</li><li>resp.body：响应体，就是响应数据</li></ul><p>不过，capture功能发起的请求<strong>只能指向nginx的内部，不能访问外部请求</strong>（例如百度）。该怎么解决？</p><p>我们可以<strong>将capture请求的地址指向一个内部的location，然后在这个location中做反向代理，指向目标地址</strong>（外部网站地址）。</p><h3 id="3-8-3-示例"><a href="#3-8-3-示例" class="headerlink" title="3.8.3.示例"></a>3.8.3.示例</h3><p>假设我们希望在nginx内部向百度发请求，然后把结果输出到页面，大概思路是这样的：</p><ul><li>利用capture向某个路径发请求，指向内部的一个location，比如 <code>/baidu</code></li><li>定义个location，接收 <code>/baidu</code>开头的请求</li><li>将请求反向代理到 <a href="https://www.baidu.com/">https://www.baidu.com</a></li></ul><p>1）定义location</p><p>我们先定义一个内部的location，用来处理内部请求，然后反向代理到百度。修改lua.conf文件，添加内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ /baidu/(.*)</span> &#123;</span><br><span class="line">    <span class="comment"># 重写路径，去掉路径前面的 /baidu</span></span><br><span class="line">    <span class="attribute">rewrite</span> /baidu(/.*) <span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">    <span class="comment"># 禁止响应体压缩</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Accept-Encoding <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment"># 反向代理到百度</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> https://www.baidu.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）内部代理</p><p>然后我们再次修改lua.conf，添加一个location，作为测试接口：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ /lua_http/(.*)</span> &#123;</span><br><span class="line">    <span class="comment"># 关闭lua代码缓存</span></span><br><span class="line">    <span class="attribute">lua_code_cache</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 指定请求交给lua/test_http.lua脚本来处理</span></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> lua/test_http.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里接收请求，并执行<code>lua/test_http.lua</code>这个文件。我们新建一个<code>lua/test_http.lua</code>文件，内容如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 向 /baidu 这个location发请求，并且携带请求参数</span></span><br><span class="line"><span class="keyword">local</span> resp = ngx.location.capture(<span class="string">&quot;/baidu/s?wd=&quot;</span>..ngx.var[<span class="number">1</span>], &#123;  </span><br><span class="line">method = ngx.HTTP_GET</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询失败的处理</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span></span><br><span class="line">ngx.say(<span class="string">&quot;request error&quot;</span>); </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">-- 查询成功的处理，这里是打印响应体</span></span><br><span class="line">ngx.say(resp.body)</span><br></pre></td></tr></table></figure><p>3）测试</p><p>打开浏览器，访问：<a href="http://192.168.206.99/lua_http/hello%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%86%85%E5%AE%B9%EF%BC%9A">http://192.168.206.99/lua_http/hello，可以看到内容：</a></p><p><img src="image-20200724222759304.png" alt="image-20200724222759304"></p><p>承接上面的小结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">至此，我们想要实现的步骤：浏览器发送请求，到达了windows的nginx，</span></span><br><span class="line"><span class="attr">然后转到第三方的openresty（安装在linux上）进行页面渲染（上图是直接访问linux的openresty了）</span></span><br><span class="line"><span class="attr">进行渲染前要先获取数据，要么从linux上的redis获取，这由上面的lua脚本语言可以实现。</span></span><br><span class="line"><span class="attr">但是当redis没有对应的缓存数据时，openresty需要从windows上的Tomcat服务器获取数据，这可如何是好？？？？</span></span><br><span class="line"></span><br><span class="line"><span class="attr">使用nginx自带的capture功能来实现。</span></span><br><span class="line"><span class="attr">当请求达到openresty时，匹配lua_http路径，到达指定的test_http.lua文件，然后利用capture指向一个内部的location，然后反向代理到百度网址，百度网址拼接上子路径以及参数作为完整的url去访问百度！！</span></span><br></pre></td></tr></table></figure><h2 id="3-8-实现商品详情页渲染"><a href="#3-8-实现商品详情页渲染" class="headerlink" title="3.8.实现商品详情页渲染"></a>3.8.实现商品详情页渲染</h2><p>接下来我们利用OpenResty实现商品详情页渲染，大概需要这样的步骤：</p><ul><li>监听用户请求，进入定义好的lua脚本</li><li>lua脚本中尝试读取redis数据</li><li>读取数据失败，尝试从<code>ly-page</code>微服务读取数据<ul><li>获取数据失败：返回404</li><li>获取数据成功：开始渲染</li></ul></li><li>把数据和模板交给template模块渲染，然后返回</li></ul><p>我们要做的事情包括：</p><ul><li><p>配置内部请求代理</p></li><li><p>定义通用工具模块：</p><ul><li>访问Redis的工具</li><li>访问<code>ly-page</code>的http工具</li></ul></li><li><p>定义商品详情页面模板</p></li><li><p>编写商品页面请求的路径映射</p></li><li><p>编写处理请求，查询数据，处理数据，渲染模板的lua脚本</p></li></ul><h3 id="3-8-1-内部请求代理配置"><a href="#3-8-1-内部请求代理配置" class="headerlink" title="3.8.1.内部请求代理配置"></a>3.8.1.内部请求代理配置</h3><p>我们计划采用内部请求代理实现对微服务的访问，因此需要定义一个location，拦截内部请求，转发到<code>ly-page</code>微服务。这里我们约定，这个内部的location地址为：<code>/backend/*</code></p><p>为了与之前的demo分离，我们修改<code>nginx.conf</code>，注释以前的<code>lua.conf</code>文件，并添加一个新的<code>leyou.conf</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/resty/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="attribute">error_log</span> logs/error.log;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123; </span><br><span class="line">    <span class="attribute">lua_package_path</span> <span class="string">&quot;/usr/local/openresty/lualib/?.lua;;&quot;</span>;  <span class="comment">#lua 模块  </span></span><br><span class="line">    <span class="attribute">lua_package_cpath</span> <span class="string">&quot;/usr/local/openresty/lualib/?.so;;&quot;</span>;  <span class="comment">#c模块 </span></span><br><span class="line"><span class="attribute">lua_shared_dict</span> shared_data <span class="number">20m</span>; <span class="comment">#共享全局变量，在所有worker间共享</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">default_type</span>  text/html; <span class="comment"># 默认响应类型是html</span></span><br><span class="line">    <span class="comment">#include lua.conf;    # 引入一个lua.conf文件</span></span><br><span class="line">    <span class="attribute">include</span> leyou.conf;    <span class="comment"># 引入一个leyou.conf文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>/usr/resty/conf/leyou.conf</code>中编写location监听：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/resty/conf/leyou.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;  </span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8084</span> max_fails=<span class="number">5</span> fail_timeout=<span class="number">10s</span> weight=<span class="number">1</span>;    </span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">100</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>; </span><br><span class="line"><span class="attribute">set</span> $template_root <span class="string">&quot;/usr/resty/templates&quot;</span>; </span><br><span class="line">  <span class="comment"># 我们要求内部请求以 /backend开头，与其他请求区分</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /backend/(.*)</span> &#123;  </span><br><span class="line">        <span class="comment">#internal;  </span></span><br><span class="line">        <span class="attribute">keepalive_timeout</span>   <span class="number">30s</span>;  </span><br><span class="line">        <span class="attribute">keepalive_requests</span>  <span class="number">1000</span>;  </span><br><span class="line">        <span class="comment">#支持keep-alive  </span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;  </span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="attribute">rewrite</span> /backend(/.*) <span class="variable">$1</span> <span class="literal">break</span>;  </span><br><span class="line">        <span class="attribute">proxy_pass_request_headers</span> <span class="literal">off</span>;  </span><br><span class="line">        <span class="comment">#more_clear_input_headers Accept-Encoding;  </span></span><br><span class="line">        <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout;  </span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，上面配置的backend集群中，ip地址必须是你<strong>自己的宿主机地址,VM-NET8的虚拟主机地址，一般地址为:网段.1</strong>，不要直接拷贝。</p><p>请求处理大概过程：</p><ul><li><p>假如我们内部访问：/backend/page/spu/1</p></li><li><p>地址被监听到后，会处理成：<a href="http://backend/page/spu/1">http://backend/page/spu/1</a></p></li><li><p>而后进入 backend的upstream集群</p><ul><li>集群默认利用轮询策略对集群负载均衡，例如本例中的地址：192.168.206.99:8084</li><li>发送请求到：http//192.168.206.99:8084/page/spu/1，就是宿主机</li></ul></li><li><p>这样就被宿主机的<code>ly-page</code>微服务接收到了</p></li></ul><p>重启nginx：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><p>测试，在浏览器访问：<a href="http://192.168.206.99/backend/page/spu/5">http://192.168.206.99/backend/page/spu/5</a></p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200724224019970.png" alt="image-20200724224019970"> </p><p><strong>注意注意注意：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">要将六个API都测一遍哦，不要偷懒了！</span></span><br><span class="line"><span class="attr">注意注意：linux系统上有一个openresty，里面已经包含nginx了，这里要卸载原来的nginx哦。</span></span><br></pre></td></tr></table></figure><h3 id="3-8-2-编写通用工具模块"><a href="#3-8-2-编写通用工具模块" class="headerlink" title="3.8.2.编写通用工具模块"></a>3.8.2.编写通用工具模块</h3><p>接下来，编写一个通用的工具模块，方便后期连接Redis，查询tomcat</p><p>脚本要定义到<code>/usr/local/openresty/lualib</code>目录，因为这里的lua会被扫描到模块库，供其它脚本共享使用。</p><p>新建脚本文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/openresty/lualib/common.lua</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入redis模块</span></span><br><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span>(<span class="string">&quot;resty.redis&quot;</span>)  </span><br><span class="line"><span class="comment">-- 日志</span></span><br><span class="line"><span class="keyword">local</span> ngx_log = ngx.<span class="built_in">log</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_ERR = ngx.ERR  </span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">close_redis</span><span class="params">(red)</span></span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> red <span class="keyword">then</span>  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="comment">--释放连接(连接池实现)  </span></span><br><span class="line">    <span class="keyword">local</span> pool_max_idle_time = <span class="number">10000</span> <span class="comment">--毫秒  </span></span><br><span class="line">    <span class="keyword">local</span> pool_size = <span class="number">100</span> <span class="comment">--连接池大小  </span></span><br><span class="line">    <span class="keyword">local</span> ok, err = red:set_keepalive(pool_max_idle_time, pool_size)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;set redis keepalive error : &quot;</span>, err)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">-- 查询redis的方法 ip和port是redis地址，keys是查询的key，数组格式</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_redis</span><span class="params">(ip, port, keys)</span></span>  </span><br><span class="line"><span class="comment">-- 获取一个连接</span></span><br><span class="line">    <span class="keyword">local</span> red = redis:new()  </span><br><span class="line">    red:set_timeout(<span class="number">1000</span>)  </span><br><span class="line">    <span class="keyword">local</span> ok, err = red:connect(ip, port)  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;connect to redis error : &quot;</span>, err)  </span><br><span class="line">        <span class="keyword">return</span> close_redis(red)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="keyword">local</span> resp = <span class="literal">nil</span></span><br><span class="line"><span class="comment">-- 判断key数量，如果多个key，就利用mget批量查询</span></span><br><span class="line">    <span class="keyword">if</span> #keys == <span class="number">1</span> <span class="keyword">then</span>  </span><br><span class="line">        resp, err = red:get(keys[<span class="number">1</span>])  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        resp, err = red:mget(keys)  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 查询失败处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;get redis content error : &quot;</span>, err)  </span><br><span class="line">        <span class="keyword">return</span> close_redis(red)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">--得到的数据为空处理  </span></span><br><span class="line">    <span class="keyword">if</span> resp == ngx.null <span class="keyword">then</span>  </span><br><span class="line">        resp = <span class="literal">nil</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    close_redis(red)  </span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">-- 查询http请求的方法，path是请求路径，args是参数，table格式</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_http</span><span class="params">(path, args)</span></span> </span><br><span class="line"><span class="comment">-- 默认查询地址走 /backend/page/,内部转发到8084端口</span></span><br><span class="line">    <span class="keyword">local</span> resp = ngx.location.capture(<span class="string">&quot;/backend/page&quot;</span>..<span class="built_in">path</span>, &#123;  </span><br><span class="line">        method = ngx.HTTP_GET,  </span><br><span class="line">        args = args  </span><br><span class="line">    &#125;)  </span><br><span class="line"><span class="comment">-- 查询失败的处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;request error&quot;</span>)  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 返回状态码不是200就报错</span></span><br><span class="line">    <span class="keyword">if</span> resp.<span class="built_in">status</span> ~= <span class="number">200</span> <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;request error, status :&quot;</span>, resp.<span class="built_in">status</span>)  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> resp.body  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">-- 将方法导出</span></span><br><span class="line"><span class="keyword">local</span> _M = &#123;  </span><br><span class="line">    read_redis = read_redis,  </span><br><span class="line">    read_http = read_http  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> _M </span><br></pre></td></tr></table></figure><p>核心方法有两个：</p><ul><li>read_redis(ip, port, keys)：查询redis数据，参数：<ul><li>ip：就是redis的ip地址</li><li>port：就是redis的端口</li><li>keys：查询用到的key，数组，可以同时查询多个</li></ul></li><li>read_http(path, args)：http请求查询，内部会转发到<code>ly-page</code>参数：<ul><li>path：请求路径，方法内部会在path前拼接：/backend/page</li><li>args：请求参数，table类型</li></ul></li></ul><h3 id="3-8-3-页面模板"><a href="#3-8-3-页面模板" class="headerlink" title="3.8.3.页面模板"></a>3.8.3.页面模板</h3><p>我已经提前写好了一个页面模板，在课前资料中获取：item.html,<strong>上传item.html到 /usr/resty/templates</strong></p><p>其中需要的参数包括：</p><ul><li>spu：商品spu，需要的是spu中的name，分类id、品牌id</li><li>skuList：商品spu下的sku</li><li>spuDetail：商品详情</li><li>categories：商品分类</li><li>brand：品牌</li><li>specs：规格组包含规格参数</li></ul><h3 id="3-8-4-数据处理脚本"><a href="#3-8-4-数据处理脚本" class="headerlink" title="3.8.4.数据处理脚本"></a>3.8.4.数据处理脚本</h3><p>下面，我们编写数据处理的脚本。</p><p>新建脚本文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/resty/lua/item.lua</span><br></pre></td></tr></table></figure><p>内容：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入模块</span></span><br><span class="line"><span class="keyword">local</span> common = <span class="built_in">require</span>(<span class="string">&quot;common&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> read_redis = common.read_redis  </span><br><span class="line"><span class="keyword">local</span> read_http = common.read_http</span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span>(<span class="string">&quot;cjson&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">&quot;resty.template&quot;</span>)  </span><br><span class="line"><span class="comment">-- 常用变量和方法</span></span><br><span class="line"><span class="keyword">local</span> ngx_log = ngx.<span class="built_in">log</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_ERR = ngx.ERR  </span><br><span class="line"><span class="keyword">local</span> ngx_exit = ngx.<span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_print = ngx.<span class="built_in">print</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_re_match = ngx.re.<span class="built_in">match</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取商品id</span></span><br><span class="line"><span class="keyword">local</span> spuId = ngx.var.spuId</span><br><span class="line"><span class="comment">-- 获取spu</span></span><br><span class="line"><span class="keyword">local</span> spuKey = <span class="string">&quot;page:spu:id:&quot;</span>..spuId </span><br><span class="line"><span class="keyword">local</span> spuInfoStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, &#123;spuKey&#125;)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> spuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found spu info, back to http, spuId : &quot;</span>, spuId)  </span><br><span class="line">   spuInfoStr = read_http(<span class="string">&quot;/spu/&quot;</span>..spuId, &#123;&#125;)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> spuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found spuInfoStr info, spuId : &quot;</span>, spuId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取sku</span></span><br><span class="line"><span class="keyword">local</span> skuKey = <span class="string">&quot;page:sku:id:&quot;</span>..spuId </span><br><span class="line"><span class="keyword">local</span> skuInfoStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, &#123;skuKey&#125;)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> skuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found sku info, back to http, spuId : &quot;</span>, spuId)  </span><br><span class="line">   skuInfoStr = read_http(<span class="string">&quot;/sku/&quot;</span>..spuId, &#123;&#125;)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> skuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found skuInfoStr info, spuId : &quot;</span>, spuId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取spuDetail</span></span><br><span class="line"><span class="keyword">local</span> detailKey = <span class="string">&quot;page:detail:id:&quot;</span>..spuId </span><br><span class="line"><span class="keyword">local</span> detailInfoStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, &#123;detailKey&#125;)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> detailInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found detail info, back to http, spuId : &quot;</span>, spuId)  </span><br><span class="line">   detailInfoStr = read_http(<span class="string">&quot;/detail/&quot;</span>..spuId, &#123;&#125;)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> detailInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found detailInfoStr info, spuId : &quot;</span>, spuId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取categories</span></span><br><span class="line"><span class="keyword">local</span> spuInfo = cjson.decode(spuInfoStr)  </span><br><span class="line"><span class="keyword">local</span> cid3 = spuInfo[<span class="string">&quot;categoryIds&quot;</span>][<span class="number">3</span>]</span><br><span class="line"><span class="keyword">local</span> categoryKey = <span class="string">&quot;page:category:id:&quot;</span>..cid3 </span><br><span class="line"><span class="keyword">local</span> categoryStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, &#123;categoryKey&#125;)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> categoryStr <span class="keyword">then</span>  </span><br><span class="line">   <span class="keyword">local</span> idStr = <span class="built_in">table</span>.<span class="built_in">concat</span>(spuInfo[<span class="string">&quot;categoryIds&quot;</span>],<span class="string">&quot;,&quot;</span>);</span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found category info, back to http, categoryIds : &quot;</span>, idStr)  </span><br><span class="line">   categoryStr = read_http(<span class="string">&quot;/categories/&quot;</span>, &#123;ids  = idStr&#125;)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> categoryStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found categoryStr info, categoryId : &quot;</span>, cid3)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取品牌  </span></span><br><span class="line"><span class="keyword">local</span> brandId = spuInfo[<span class="string">&quot;brandId&quot;</span>]</span><br><span class="line"><span class="keyword">local</span> brandKey = <span class="string">&quot;page:brand:id:&quot;</span>..brandId </span><br><span class="line"><span class="keyword">local</span> brandStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, &#123;brandKey&#125;)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> brandStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found brand info, back to http, brandId : &quot;</span>, brandId)  </span><br><span class="line">   brandStr = read_http(<span class="string">&quot;/brand/&quot;</span>..brandId, &#123;&#125;)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> brandStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found brandStr info, brandId : &quot;</span>, brandId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取规格</span></span><br><span class="line"><span class="keyword">local</span> specKey = <span class="string">&quot;page:spec:id:&quot;</span>..cid3 </span><br><span class="line"><span class="keyword">local</span> specStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, &#123;specKey&#125;)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> specStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found spec info, back to http, cid3 : &quot;</span>, cid3)  </span><br><span class="line">   specStr = read_http(<span class="string">&quot;/spec/&quot;</span>..cid3, &#123;&#125;)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> specStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found specStr info, cid3 : &quot;</span>, cid3)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 组织数据</span></span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">name = spuInfo[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">skuList =  skuInfoStr,</span><br><span class="line">detail =  detailInfoStr,</span><br><span class="line">categories =  categoryStr,</span><br><span class="line">brand =  brandStr,</span><br><span class="line">specs =  specStr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--渲染模板  ##########################################</span></span><br><span class="line">template.render(<span class="string">&quot;item.html&quot;</span>, context)</span><br></pre></td></tr></table></figure><h3 id="3-8-5-路径映射"><a href="#3-8-5-路径映射" class="headerlink" title="3.8.5.路径映射"></a>3.8.5.路径映射</h3><p>最后，我们监听页面请求，把商品页面交给模板来处理.</p><p>在<code>/usr/resty/conf/leyou.conf</code>中添加映射：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ /item/(\d+).html$</span> &#123;</span><br><span class="line">    <span class="comment"># 获取路径参数</span></span><br><span class="line">    <span class="attribute">set</span> $spuId <span class="variable">$1</span>;</span><br><span class="line">    <span class="comment"># 禁止除了www.leyou.com以外的请求访问</span></span><br><span class="line">    <span class="attribute">if</span> ($host !<span class="regexp">~ &quot;^www\.leyou\.com$&quot;)</span> &#123;  </span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 关闭缓存/打开缓存</span></span><br><span class="line">    <span class="attribute">lua_code_cache</span> <span class="literal">on</span>; </span><br><span class="line">    <span class="attribute">default_type</span> <span class="string">&#x27;text/html&#x27;</span>;  </span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    <span class="comment"># 指定请求交给lua/item.lua脚本来处理</span></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> lua/item.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-6-修改宿主机路径映射"><a href="#3-8-6-修改宿主机路径映射" class="headerlink" title="3.8.6.修改宿主机路径映射"></a>3.8.6.修改宿主机路径映射</h3><p>现在，OpenResty已经准备就绪，不过我们在浏览器中输入：</p><p><a href="http://www.leyou.com/item/141.html">http://www.leyou.com/item/141.html</a></p><p>这个商品地址时，目前依然走的是<code>ly-portal</code>。我们需要把请求地址修改到你的虚拟机地址，例如我的地址是：<code>192.168.206.99</code></p><p>修改宿主机中的<code>leyou.conf</code>文件，修改原来的 <a href="http://www.leyou.com的域名解析部分：">www.leyou.com的域名解析部分：</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  www.leyou.com;</span><br><span class="line"><span class="attribute">location</span> /item &#123;</span><br><span class="line"><span class="comment"># 携带hosts地址，避免因代理导致host丢失</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> Host       $host;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://192.168.206.99;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> C:\develop\idea-space\leyou3\leyou-portal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><p>通过浏览器访问：</p><p><a href="http://www.leyou.com/item/127.html">http://www.leyou.com/item/127.html</a></p><p>结果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200311202533350.png" alt="image-20200311202533350"></p><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">请求url中的127.html</span> <span class="string">的127就是商品的spuid，</span></span><br><span class="line"><span class="attr">根据这个spuid可以得到spu，spudetail，skus，brand，category，spec六种数据</span></span><br><span class="line"></span><br><span class="line"><span class="attr">浏览器发起请求，请求先到达本地nginx，接着反向代理到centos的openresty，</span></span><br><span class="line"><span class="attr">通过openresty相关配置文件的location进行路径映射，交由指定的lua脚本文件执行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">在lua脚本文件中，先尝试去centos的redis访问，访问到就先保存数据</span></span><br><span class="line"><span class="attr">访问不到就发送http请求，需要借助capture来将web请求路径转发到指定location，</span></span><br><span class="line"><span class="attr">再反向代理到page微服务，从而获取到上面说的六种数据</span></span><br><span class="line"><span class="attr">获取到的数据存放redis中，并组织六种数据，给openresty的模板页面item.html，</span></span><br><span class="line"><span class="attr">然后将渲染之后的页面返回给浏览器！</span></span><br></pre></td></tr></table></figure><h3 id="3-8-7-优化（理解即可）"><a href="#3-8-7-优化（理解即可）" class="headerlink" title="3.8.7.优化（理解即可）"></a>3.8.7.优化（理解即可）</h3><p>虽然已经实现了页面静态化，不过依然有值得优化的地方：</p><ul><li>在Nginx中设置本地缓存，把几乎不变的数据直接存储在nginx内部，例如：<ul><li>商品分类数据</li><li>品牌数据</li><li>规格参数数据</li></ul></li><li>在nginx中对生成的页面做缓存或静态化，做CDN服务，页面不变的时候，减少渲染对CPU的消耗</li><li>随着商品数据的日益增多，Redis可能难以支持海量商品信息，此时可以用SSDB来代替，SSDB存储基于磁盘存储，查询性能与Redis差不多，因此可以作为海量数据的缓存库</li></ul><p>参考：本地缓存的实现：</p><p>修改nginx.conf，配置本地缓存大小和名称：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="attribute">error_log</span> logs/error.log;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">lua_package_path</span> <span class="string">&quot;/usr/local/openresty/lualib/?.lua;;&quot;</span>;  <span class="comment">#lua 模块  </span></span><br><span class="line">    <span class="attribute">lua_package_cpath</span> <span class="string">&quot;/usr/local/openresty/lualib/?.so;;&quot;</span>;  <span class="comment">#c模块 </span></span><br><span class="line">    <span class="comment">#本地缓存，名称叫做：item_local_cache，大小50m</span></span><br><span class="line"><span class="attribute">lua_shared_dict</span> item_local_cache <span class="number">50m</span>; </span><br><span class="line"></span><br><span class="line">    <span class="attribute">default_type</span>  text/html; <span class="comment"># 默认响应类型是html</span></span><br><span class="line">    <span class="comment">#include lua.conf;    # 引入一个lua.conf文件</span></span><br><span class="line">    <span class="attribute">include</span> leyou.conf;    <span class="comment"># 引入一个leyou.conf文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改common.lua，添加数据查询方法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入redis模块</span></span><br><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span>(<span class="string">&quot;resty.redis&quot;</span>) </span><br><span class="line"><span class="comment">-- 配置商品的本地缓存 </span></span><br><span class="line"><span class="keyword">local</span> local_cache = ngx.shared.item_local_cache</span><br><span class="line"><span class="comment">-- 日志</span></span><br><span class="line"><span class="keyword">local</span> ngx_log = ngx.<span class="built_in">log</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_ERR = ngx.ERR</span><br><span class="line"><span class="comment">-- 读取本地缓存</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">cache_get</span><span class="params">(key)</span></span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> local_cache <span class="keyword">then</span>  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="keyword">return</span> local_cache:get(key)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 写入本地缓存</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">cache_set</span><span class="params">(key, value)</span></span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> local_cache <span class="keyword">then</span>  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="keyword">return</span> local_cache:set(key, value, <span class="number">10</span> * <span class="number">60</span>) <span class="comment">--10分钟  </span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">close_redis</span><span class="params">(red)</span></span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> red <span class="keyword">then</span>  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="comment">--释放连接(连接池实现)  </span></span><br><span class="line">    <span class="keyword">local</span> pool_max_idle_time = <span class="number">10000</span> <span class="comment">--毫秒  </span></span><br><span class="line">    <span class="keyword">local</span> pool_size = <span class="number">100</span> <span class="comment">--连接池大小  </span></span><br><span class="line">    <span class="keyword">local</span> ok, err = red:set_keepalive(pool_max_idle_time, pool_size)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;set redis keepalive error : &quot;</span>, err)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">-- 查询本地缓存，没有则查询redis, ip和port是redis地址，key是查询的key</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_cache</span><span class="params">(ip, port, key)</span></span> </span><br><span class="line"><span class="comment">-- 尝试读本地缓存</span></span><br><span class="line"><span class="keyword">local</span> resp = cache_get(key)</span><br><span class="line"><span class="comment">-- ngx_log(ngx_ERR, &quot;debug local cache data : &quot;, resp) </span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span></span><br><span class="line">ngx_log(ngx_ERR, <span class="string">&quot;read local cache fail , key&quot;</span>, key)</span><br><span class="line"><span class="comment">-- 获取一个redis连接</span></span><br><span class="line"><span class="keyword">local</span> red = redis:new()  </span><br><span class="line">red:set_timeout(<span class="number">1000</span>)  </span><br><span class="line"><span class="keyword">local</span> ok, err = red:connect(ip, port)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">ngx_log(ngx_ERR, <span class="string">&quot;connect to redis error : &quot;</span>, err)  </span><br><span class="line"><span class="keyword">return</span> close_redis(red)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 利用get查询</span></span><br><span class="line">resp, err = red:get(key) </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 查询失败处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;get redis content error : &quot;</span>, err)  </span><br><span class="line">        <span class="keyword">return</span> close_redis(red)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">--得到的数据为空处理  </span></span><br><span class="line">    <span class="keyword">if</span> resp == ngx.null <span class="keyword">then</span>  </span><br><span class="line">        resp = <span class="literal">nil</span>  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">cache_set(key, resp)</span><br><span class="line">    close_redis(red)  </span><br><span class="line">    <span class="keyword">return</span> resp  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 查询redis的方法 ip和port是redis地址，keys是查询的key，数组格式</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_redis</span><span class="params">(ip, port, key)</span></span>  </span><br><span class="line"><span class="comment">-- 获取一个连接</span></span><br><span class="line">    <span class="keyword">local</span> red = redis:new()  </span><br><span class="line">    red:set_timeout(<span class="number">1000</span>)  </span><br><span class="line">    <span class="keyword">local</span> ok, err = red:connect(ip, port)  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;connect to redis error : &quot;</span>, err)  </span><br><span class="line">        <span class="keyword">return</span> close_redis(red)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="keyword">local</span> resp = <span class="literal">nil</span></span><br><span class="line"><span class="comment">-- 利用get查询 </span></span><br><span class="line">    resp, err = red:get(key)  </span><br><span class="line"><span class="comment">-- 查询失败处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;get redis content error : &quot;</span>, err)  </span><br><span class="line">        <span class="keyword">return</span> close_redis(red)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">--得到的数据为空处理  </span></span><br><span class="line">    <span class="keyword">if</span> resp == ngx.null <span class="keyword">then</span>  </span><br><span class="line">        resp = <span class="literal">nil</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    close_redis(red)  </span><br><span class="line">    <span class="keyword">return</span> resp  </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">-- 查询http请求的方法，path是请求路径，args是参数，table格式</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_http</span><span class="params">(path, args)</span></span> </span><br><span class="line"><span class="comment">-- 默认查询地址走 /backend/page/,内部转发到8083端口</span></span><br><span class="line">    <span class="keyword">local</span> resp = ngx.location.capture(<span class="string">&quot;/backend/page&quot;</span>..<span class="built_in">path</span>, &#123;  </span><br><span class="line">        method = ngx.HTTP_GET,  </span><br><span class="line">        args = args  </span><br><span class="line">    &#125;)  </span><br><span class="line"><span class="comment">-- 查询失败的处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;request error&quot;</span>)  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 返回状态码不是200就报错</span></span><br><span class="line">    <span class="keyword">if</span> resp.<span class="built_in">status</span> ~= <span class="number">200</span> <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;request error, status :&quot;</span>, resp.<span class="built_in">status</span>)  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> resp.body  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">-- 将方法导出</span></span><br><span class="line"><span class="keyword">local</span> _M = &#123;  </span><br><span class="line">    read_redis = read_redis,  </span><br><span class="line">    read_cache = read_cache,  </span><br><span class="line">    read_http = read_http  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> _M </span><br></pre></td></tr></table></figure><p>改造<code>item.lua</code>，将分类、品牌、规格查询走本地缓存</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入模块</span></span><br><span class="line"><span class="keyword">local</span> common = <span class="built_in">require</span>(<span class="string">&quot;common&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> read_redis = common.read_redis  </span><br><span class="line"><span class="keyword">local</span> read_http = common.read_http</span><br><span class="line"><span class="keyword">local</span> read_cache = common.read_cache</span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span>(<span class="string">&quot;cjson&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">&quot;resty.template&quot;</span>)  </span><br><span class="line"><span class="comment">-- 常用变量和方法</span></span><br><span class="line"><span class="keyword">local</span> ngx_log = ngx.<span class="built_in">log</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_ERR = ngx.ERR  </span><br><span class="line"><span class="keyword">local</span> ngx_exit = ngx.<span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_print = ngx.<span class="built_in">print</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_re_match = ngx.re.<span class="built_in">match</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取商品id</span></span><br><span class="line"><span class="keyword">local</span> spuId = ngx.var.spuId</span><br><span class="line"><span class="comment">-- 获取spu</span></span><br><span class="line"><span class="keyword">local</span> spuKey = <span class="string">&quot;page:spu:id:&quot;</span>..spuId </span><br><span class="line"><span class="keyword">local</span> spuInfoStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, spuKey)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> spuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found spu info, back to http, spuId : &quot;</span>, spuId)  </span><br><span class="line">   spuInfoStr = read_http(<span class="string">&quot;/spu/&quot;</span>..spuId, &#123;&#125;)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> spuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found spuInfoStr info, spuId : &quot;</span>, spuId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取sku</span></span><br><span class="line"><span class="keyword">local</span> skuKey = <span class="string">&quot;page:sku:id:&quot;</span>..spuId </span><br><span class="line"><span class="keyword">local</span> skuInfoStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, skuKey)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> skuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found sku info, back to http, spuId : &quot;</span>, spuId)  </span><br><span class="line">   skuInfoStr = read_http(<span class="string">&quot;/sku/&quot;</span>..spuId, &#123;&#125;)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> skuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found skuInfoStr info, spuId : &quot;</span>, spuId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取spuDetail</span></span><br><span class="line"><span class="keyword">local</span> detailKey = <span class="string">&quot;page:detail:id:&quot;</span>..spuId </span><br><span class="line"><span class="keyword">local</span> detailInfoStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, detailKey)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> detailInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found detail info, back to http, spuId : &quot;</span>, spuId)  </span><br><span class="line">   detailInfoStr = read_http(<span class="string">&quot;/detail/&quot;</span>..spuId, &#123;&#125;)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> detailInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found detailInfoStr info, spuId : &quot;</span>, spuId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取categories</span></span><br><span class="line"><span class="keyword">local</span> spuInfo = cjson.decode(spuInfoStr)  </span><br><span class="line"><span class="keyword">local</span> cid3 = spuInfo[<span class="string">&quot;categoryIds&quot;</span>][<span class="number">3</span>]</span><br><span class="line"><span class="keyword">local</span> categoryKey = <span class="string">&quot;page:category:id:&quot;</span>..cid3 </span><br><span class="line"><span class="keyword">local</span> categoryStr = read_cache(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, categoryKey)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> categoryStr <span class="keyword">then</span>  </span><br><span class="line">   <span class="keyword">local</span> idStr = <span class="built_in">table</span>.<span class="built_in">concat</span>(spuInfo[<span class="string">&quot;categoryIds&quot;</span>],<span class="string">&quot;,&quot;</span>);</span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found category info, back to http, categoryIds : &quot;</span>, idStr)  </span><br><span class="line">   categoryStr = read_http(<span class="string">&quot;/categories/&quot;</span>, &#123;ids  = idStr&#125;)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> categoryStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found categoryStr info, categoryId : &quot;</span>, cid3)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取品牌  </span></span><br><span class="line"><span class="keyword">local</span> brandId = spuInfo[<span class="string">&quot;brandId&quot;</span>]</span><br><span class="line"><span class="keyword">local</span> brandKey = <span class="string">&quot;page:brand:id:&quot;</span>..brandId </span><br><span class="line"><span class="keyword">local</span> brandStr = read_cache(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, brandKey)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> brandStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found brand info, back to http, brandId : &quot;</span>, brandId)  </span><br><span class="line">   brandStr = read_http(<span class="string">&quot;/brand/&quot;</span>..brandId, &#123;&#125;)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> brandStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found brandStr info, brandId : &quot;</span>, brandId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取规格</span></span><br><span class="line"><span class="keyword">local</span> specKey = <span class="string">&quot;page:spec:id:&quot;</span>..cid3 </span><br><span class="line"><span class="keyword">local</span> specStr = read_cache(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, specKey)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> specStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found spec info, back to http, cid3 : &quot;</span>, cid3)  </span><br><span class="line">   specStr = read_http(<span class="string">&quot;/spec/&quot;</span>..cid3, &#123;&#125;)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> specStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found specStr info, cid3 : &quot;</span>, cid3)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 组织数据1</span></span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">name = spuInfo[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">skuList =  skuInfoStr,</span><br><span class="line">detail =  detailInfoStr,</span><br><span class="line">categories =  categoryStr,</span><br><span class="line">brand =  brandStr,</span><br><span class="line">specs =  specStr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--渲染模板  1</span></span><br><span class="line">template.render(<span class="string">&quot;item.html&quot;</span>, context)  </span><br></pre></td></tr></table></figure><h1 id="4-缓存数据同步"><a href="#4-缓存数据同步" class="headerlink" title="4.缓存数据同步"></a>4.缓存数据同步</h1><p>当商品、分类、品牌、规格等数据改变时，<strong>mysql数据会变化，Redis中数据也必须同步改变</strong>，如何做到呢？</p><p>这里我们会采用Canal这个框架来实现</p><h2 id="4-1-什么是Canal"><a href="#4-1-什么是Canal" class="headerlink" title="4.1.什么是Canal"></a>4.1.什么是Canal</h2><p>**canal [kə’næl]**，译意为水道/管道/沟渠，canal是阿里巴巴旗下的一款开源项目，基于Java开发。基于数据库增量日志解析，提供增量数据订阅&amp;消费。</p><p>基于日志增量订阅和消费的业务包括</p><ul><li>数据库镜像</li><li>数据库实时备份</li><li>索引构建和实时维护(拆分异构索引、倒排索引等)</li><li>业务 cache 刷新</li><li>带业务逻辑的增量数据处理</li></ul><p>当前的 canal 支持源端 MySQL 版本包括 5.1.x , 5.5.x , 5.6.x , 5.7.x , 8.0.x</p><p>在GitHub的地址：<a href="https://github.com/alibaba/canal">https://github.com/alibaba/canal</a></p><p>基本原理如下图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200311220739591.png" alt="image-20200311220739591"></p><p>MySQL主备复制原理</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">MySQL master 将**数据变更**写入二进制日志( binary log, 其中记录叫做二进制日志事件binary log events，</span></span><br><span class="line"><span class="meta">可以通过</span> <span class="string">show binlog events 进行查看)</span></span><br><span class="line"><span class="meta">-</span> <span class="string">MySQL slave 将 master 的 binary log events 拷贝到它的中继日志(relay log)</span></span><br><span class="line"><span class="meta">-</span> <span class="string">MySQL slave 重放 relay log 中事件，将数据变更反映它自己的数据</span></span><br></pre></td></tr></table></figure><p>canal 工作原理</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议</span></span><br><span class="line"><span class="meta">-</span> <span class="string">MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</span></span><br><span class="line"><span class="meta">-</span> <span class="string">canal 解析 binary log 对象(原始为 byte 流)</span></span><br></pre></td></tr></table></figure><h2 id="4-2-设置主从同步"><a href="#4-2-设置主从同步" class="headerlink" title="4.2.设置主从同步"></a>4.2.设置主从同步</h2><p>下面我们就开启mysql的主从同步机制，让Canal来模拟salve</p><p>这里以linux版本的mysql为例</p><h3 id="4-2-1-设置binary-log"><a href="#4-2-1-设置binary-log" class="headerlink" title="4.2.1.设置binary log"></a>4.2.1.设置binary log</h3><p>根据上面介绍的原理，我们首先要开启mysql的binary log日志。</p><p>打开mysql容器挂载的日志文件，我的在<code>/home/leyou/mysql/conf</code>目录:</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200311221433314.png" alt="image-20200311221433314"> </p><p>修改文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/leyou/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure><p>最新内容为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line">skip-name-resolve</span><br><span class="line"><span class="attr">character_set_server</span>=utf8</span><br><span class="line"><span class="attr">datadir</span>=/var/lib/mysql</span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log-bin</span>=/var/lib/mysql/mysql-bin</span><br><span class="line"><span class="attr">binlog-do-db</span>=heima</span><br></pre></td></tr></table></figure><p>配置解读：</p><ul><li><code>log-bin=/var/lib/mysql/mysql-bin</code>：设置binary log文件的存放地址</li><li><code>server-id=1000</code>：设置当前服务id</li><li><code>binlog-do-db=heima</code>：设置生成binary log的database名称，这里设置的是heima</li></ul><p>效果截图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200725214927404.png" alt="image-20200725214927404"> </p><h3 id="4-2-2-设置账号权限"><a href="#4-2-2-设置账号权限" class="headerlink" title="4.2.2.设置账号权限"></a>4.2.2.设置账号权限</h3><p>接下来添加一个仅用于数据同步的账户，出于安全考虑，这里仅提供对heima这个库的操作权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it ly-mysql /bin/bash</span><br></pre></td></tr></table></figure><p>链接mysql:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user canal@&#x27;%&#x27; IDENTIFIED by &#x27;canal&#x27;;</span><br><span class="line">GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT,SUPER ON *.* TO &#x27;canal&#x27;@&#x27;%&#x27; identified by &#x27;canal&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>两次<code>exit</code>退出mysql，退出容器,到宿主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>重启mysql容器即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure><p>测试设置是否成功：在mysql控制台，或者Navicat中，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200327094735948.png" alt="image-20200327094735948"> </p><h2 id="4-3-安装canal"><a href="#4-3-安装canal" class="headerlink" title="4.3.安装canal"></a>4.3.安装canal</h2><p>拉取镜像：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull canal/canal-server</span><br></pre></td></tr></table></figure><p>运行容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 11111:11111 --name canal \</span><br><span class="line">-e canal.destinations=<span class="built_in">test</span> \</span><br><span class="line">-e canal.instance.master.address=172.17.0.5:3306 \</span><br><span class="line">-e canal.instance.dbUsername=canal \</span><br><span class="line">-e canal.instance.dbPassword=canal \</span><br><span class="line">-e canal.instance.connectionCharset=UTF-8 \</span><br><span class="line">-e canal.instance.tsdb.enable=<span class="literal">true</span> \</span><br><span class="line">-e canal.instance.gtidon=<span class="literal">false</span>  \</span><br><span class="line">-e canal.instance.filter.regex=heima.tb_spu,heima.tb_sku,heima.tb_spu_detail,heima.tb_category,heima.tb_brand,heima.tb_spec_param \</span><br><span class="line">--network bridge \</span><br><span class="line">-d canal/canal-server</span><br></pre></td></tr></table></figure><p>说明:</p><ul><li><code>-p 11111:11111</code>：这是canal的默认监听端口</li><li><code>-e canal.instance.master.address=172.17.0.4:3306</code>：数据库地址和端口，如果不知道mysql容器地址，可以通过<code>docker inspect 容器id</code>来查看</li><li><code>-e canal.instance.dbUsername=canal</code>：数据库用户名</li><li><code>-e canal.instance.dbPassword=canal</code> ：数据库密码</li><li><code>-e canal.instance.filter.regex=</code>：要监听的表名称</li></ul><p>表名称监听支持的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql 数据解析关注的表，Perl正则表达式.</span><br><span class="line">多个正则之间以逗号(,)分隔，转义符需要双斜杠(\\) </span><br><span class="line">常见例子：</span><br><span class="line">1.  所有表：.*   or  .*\\..*</span><br><span class="line">2.  canal schema下所有表： canal\\..*</span><br><span class="line">3.  canal下的以canal打头的表：canal\\.canal.*</span><br><span class="line">4.  canal schema下的一张表：canal.test1</span><br><span class="line">5.  多个规则组合使用然后以逗号隔开：canal\\..*,mysql.test1,mysql.test2 </span><br></pre></td></tr></table></figure><p>设置canal的自动启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=always canal</span><br></pre></td></tr></table></figure><p>现在，canal就会去监听我们的数据库变化，并通知canal客户端。</p><h2 id="4-4-编写canal客户端"><a href="#4-4-编写canal客户端" class="headerlink" title="4.4.编写canal客户端"></a>4.4.编写canal客户端</h2><p>我们在<code>ly-page</code>中配置canal客户端，当数据库变化时我们就能得到通知。</p><h3 id="4-4-1引入依赖"><a href="#4-4-1引入依赖" class="headerlink" title="4.4.1引入依赖"></a>4.4.1引入依赖</h3><p>在<code>ly-page</code>的<code>pom.xml</code>中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.javatool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写<code>ly-page</code>的配置文件<code>application.yml</code>，指定canal服务端地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># top.javatool.canal: warn # 关闭心跳日志</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span> <span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">canal:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">test</span>  <span class="comment">############这里要跟启动canal容器时的destination一致。</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">ly-canal:11111</span> <span class="comment"># canal地址    ####注意要去hosts文件配置ly-canal 域名的ip地址。</span></span><br></pre></td></tr></table></figure><h3 id="4-4-2-添加Redis操作方法"><a href="#4-4-2-添加Redis操作方法" class="headerlink" title="4.4.2.添加Redis操作方法"></a>4.4.2.添加Redis操作方法</h3><p>等会监听到表的操作包括：增、删、改</p><ul><li>增、改：我们写入数据到redis</li><li>删：我们把数据从redis删除</li></ul><p>这里要监听的数据比较多，业务代码较多，我们以sku为例来给大家介绍。</p><p>给<code>ly-page</code>中的<code>GoodsPageService</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把Sku从Redis删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function">Boolean <span class="title">deleteSku</span><span class="params">(Long spuId)</span></span>;</span><br></pre></td></tr></table></figure><p>然后在<code>GoodsPageServiceImpl</code>中实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">deleteSku</span><span class="params">(Long spuId)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.delete(KEY_PREFIX_SKU + spuId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-编写监听器"><a href="#4-4-2-编写监听器" class="headerlink" title="4.4.2.编写监听器"></a>4.4.2.编写监听器</h3><p>我们在ly-page的<code>com.leyou.page.canal</code>包下，新增一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page.canal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.page.service.GoodsPageService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> top.javatool.canal.client.annotation.CanalTable;</span><br><span class="line"><span class="keyword">import</span> top.javatool.canal.client.context.CanalContext;</span><br><span class="line"><span class="keyword">import</span> top.javatool.canal.client.handler.EntryHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CanalTable(value = &quot;all&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanalHandler</span> <span class="keyword">implements</span> <span class="title">EntryHandler</span>&lt;<span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">String</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsPageService goodsPageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Map&lt;String,String&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取表的名称</span></span><br><span class="line">        String table = CanalContext.getModel().getTable();</span><br><span class="line">        <span class="comment">// 如果表是tb_sku</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;tb_sku&quot;</span>.equals(table))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;sku新增了&#123;&#125;&quot;</span>, model);</span><br><span class="line">            goodsPageService.loadSkuListData(Long.valueOf(model.get(<span class="string">&quot;spu_id&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Map&lt;String,String&gt; before, Map&lt;String,String&gt; after)</span> </span>&#123;</span><br><span class="line">        String table = CanalContext.getModel().getTable();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;tb_sku&quot;</span>.equals(table))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;sku修改了&#123;&#125;&quot;</span>, after);</span><br><span class="line">            goodsPageService.loadSkuListData(Long.valueOf(after.get(<span class="string">&quot;spu_id&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Map&lt;String,String&gt; model)</span> </span>&#123;</span><br><span class="line">        String table = CanalContext.getModel().getTable();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;tb_sku&quot;</span>.equals(table))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;sku删除了&#123;&#125;&quot;</span>, model);</span><br><span class="line">            goodsPageService.deleteSku(Long.valueOf(model.get(<span class="string">&quot;spu_id&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">将mysql中的heima数据库设置为master</span></span><br><span class="line"><span class="attr">2</span> <span class="string">在centos中安装canal 模拟mysql的slave，向master发送请求</span></span><br><span class="line"><span class="attr">3</span> <span class="string">canal将请求放到test中，供客户端访问（只要heima数据库有增删改就会更新test内容）</span></span><br><span class="line"><span class="attr">4</span> <span class="string">page微服务器就是客户端，经过canal依赖包以及一些配置绑定canal的test，然后编写监听器</span></span><br><span class="line"><span class="attr">只要test内容变化，就将监听到的增删改变化更新到redis中。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;商品详情页&quot;&gt;&lt;a href=&quot;#商品详情页&quot; class=&quot;headerlink&quot; title=&quot;商品详情页&quot;&gt;&lt;/a&gt;商品详情页&lt;/h1&gt;&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Canal" scheme="http://example.com/tags/Canal/"/>
    
    <category term="OpenResty" scheme="http://example.com/tags/OpenResty/"/>
    
    <category term="Lua" scheme="http://example.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-ElesticSear数据搜索以及es与mysql数据同步</title>
    <link href="http://example.com/2022/06/26/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-ElesticSear%E6%95%B0%E6%8D%AE%E6%90%9C%E7%B4%A2%E4%BB%A5%E5%8F%8Aes%E4%B8%8Emysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    <id>http://example.com/2022/06/26/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-ElesticSear%E6%95%B0%E6%8D%AE%E6%90%9C%E7%B4%A2%E4%BB%A5%E5%8F%8Aes%E4%B8%8Emysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</id>
    <published>2022-06-26T07:42:13.000Z</published>
    <updated>2022-06-27T09:17:52.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搜索过滤及数据同步"><a href="#搜索过滤及数据同步" class="headerlink" title="搜索过滤及数据同步"></a>搜索过滤及数据同步</h1><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">利用elasticsearch，实现搜索框自动补全功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">利用elasticsearch，实现基本搜索功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现数据库与elasticsearch的数据同步</span></span><br></pre></td></tr></table></figure><h1 id="1-搜索框补全"><a href="#1-搜索框补全" class="headerlink" title="1.搜索框补全"></a>1.搜索框补全</h1><p>在首页或者网站的其它大部分页面，都会在顶部显示一个搜索框：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200308191132549.png" alt="image-20200308191132549"></p><p>当用户在输入框中输入字母或文字式，我们应该弹出一系列相关提示，补全用户想要搜索的内容，这样用户体验比较好，像这样：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200308191306038.png" alt="image-20200308191306038"> </p><h2 id="1-1-需求分析"><a href="#1-1-需求分析" class="headerlink" title="1.1.需求分析"></a>1.1.需求分析</h2><p>要实现这个功能，大概流程是这样的：</p><ul><li>页面发请求到服务端，携带用户输入的关键字</li><li>服务端根据关键字查询elasticsearch，得到自动补全的提示信息</li><li>服务端返回信息到页面，在页面完成渲染</li></ul><p>接下来，我们逐步完成上面的思路</p><h2 id="1-2-页面请求"><a href="#1-2-页面请求" class="headerlink" title="1.2.页面请求"></a>1.2.页面请求</h2><p>页面顶部搜索条是一个共享的组件，因此我们定义到了一个叫做<code>js/pages/top.js</code>的文件中：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200308192005549.png" alt="image-20200308192005549"> </p><p>打开文件，找到搜索输入框部分：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309110753555-1589717028877.png" alt="image-20200309110753555"></p><p>可以看到这里绑定了键盘事件，同时使用<code>v-model</code>关联了一个变量：<code>key</code>.</p><p>而在下面的键盘对应的事件里，我们会判断用户按下的键，如果是字母数字这样的按钮，就会去调用<code>getSuggestion()</code>方法，查询提示内容：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309112302642.png" alt="image-20200309112302642"></p><p> <code>getSuggestion</code>方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getSuggestion</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    axios.get(<span class="string">&quot;/search/goods/suggestion?key=&quot;</span> + <span class="built_in">this</span>.key)</span><br><span class="line">        .then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.options = resp.data;</span><br><span class="line">            <span class="built_in">this</span>.showOption = resp.data &amp;&amp; resp.data.length &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">            <span class="built_in">this</span>.options = resp.data</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每当用户按下对应按键，输入文字，就会触发，发送请求到服务端：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200308192612522.png" alt="image-20200308192612522"> </p><p>现在，页面请求已经发出了，接下来就可以再服务端接收，并且去Elasticsearch查询了。</p><h2 id="1-3-实现服务端查询"><a href="#1-3-实现服务端查询" class="headerlink" title="1.3.实现服务端查询"></a>1.3.实现服务端查询</h2><p>接下来，我们来完成服务端代码。</p><h3 id="1-4-1-controller"><a href="#1-4-1-controller" class="headerlink" title="1.4.1.controller"></a>1.4.1.controller</h3><p>首先对页面请求做简单的分析：</p><ul><li>请求方式：GET</li><li>请求路径：/goods/suggestion</li><li>请求参数：key，就是用户输入的关键字</li><li>返回值：提示给用户看的词条列表，应该是一个字符串的集合，需要Mono封装</li></ul><p>我们在<code>ly-search</code>的<code>SearchController</code>中定义方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询自动补全数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 用户输入的关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 补全的内容列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/suggestion&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;List&lt;String&gt;&gt; getSuggestion(<span class="meta">@RequestParam(&quot;key&quot;)</span> String key) &#123;</span><br><span class="line">    <span class="keyword">return</span> searchService.getSuggestion(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-service"><a href="#1-4-2-service" class="headerlink" title="1.4.2.service"></a>1.4.2.service</h3><p>我们要先定义到一个常量类，把一些索引库字段名称定义为常量.</p><p>我们在<code>ly-search</code>的<code>com.leyou.search.constants</code>包中添加<code>SearchConstants</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.search.constants;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchConstants</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动补全的模板id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUGGESTION_TEMPLATE_ID = <span class="string">&quot;goods_suggest_template&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动补全的模板参数1名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUGGESTION_PARAM_PREFIX_KEY = <span class="string">&quot;prefix_key&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动补全的模板参数2名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUGGESTION_PARAM_FIELD = <span class="string">&quot;suggest_field&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动补全的自动名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUGGESTION_FIELD = <span class="string">&quot;suggestion&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的查询字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SEARCH_FIELD = <span class="string">&quot;title&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类字段名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CATEGORY_FIELD_NAME = <span class="string">&quot;categoryId&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌字段名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BRAND_FIELD_NAME = <span class="string">&quot;brandId&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 规格参数字段路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPEC_FIELD_PATH = <span class="string">&quot;specs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 规格参数名称字段的name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPEC_NAME_FIELD_NAME = <span class="string">&quot;specs.name&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 规格参数值字段路径name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPEC_VALUE_FIELD_NAME = <span class="string">&quot;specs.value&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认查询的source字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_SOURCE_FIELD = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;id&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;image&quot;</span>, <span class="string">&quot;prices&quot;</span>, <span class="string">&quot;sold&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高亮时的标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PRE_TAG = <span class="string">&quot;&lt;am&gt;&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高亮时的标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_POST_TAG = <span class="string">&quot;&lt;/am&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>ly-search</code>的<code>com.leyou.search.service</code>包中的<code>SearchService</code>接口中添加一个<code>getSuggestion()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询补全数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 补全数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Mono&lt;List&lt;String&gt;&gt; getSuggestion(String key);</span><br></pre></td></tr></table></figure><p>我们在<code>ly-search</code>的<code>com.leyou.search.service.impl</code>包中的<code>SearchServiceImpl</code>中顶部使用静态导入，导入需要的常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.search.constants.SearchConstants.*;</span><br></pre></td></tr></table></figure><p>我们在<code>ly-search</code>的<code>com.leyou.search.service.impl</code>包中的<code>SearchServiceImpl</code>添加一个<code>getSuggestion()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;List&lt;String&gt;&gt; getSuggestion(String keyPrefix) &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(keyPrefix)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;请求参数不能为空！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> repository.suggestBySingleField(SUGGESTION_FIELD, keyPrefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们在浏览器测试下：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200308232328812.png" alt="image-20200308232328812"> </p><h2 id="1-4-完成页面渲染（了解）"><a href="#1-4-完成页面渲染（了解）" class="headerlink" title="1.4.完成页面渲染（了解）"></a>1.4.完成页面渲染（了解）</h2><h3 id="1-4-1-基本渲染"><a href="#1-4-1-基本渲染" class="headerlink" title="1.4.1.基本渲染"></a>1.4.1.基本渲染</h3><p>数据返回到页面，首先保存到data的属性中：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309112814359.png" alt="image-20200309112814359"></p><p>然后，在页面通过for循环遍历并渲染：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200308232622495.png" alt="image-20200308232622495"></p><p>看下效果：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200308232715757.png" alt="image-20200308232715757"> </p><h3 id="1-4-2-背景变色"><a href="#1-4-2-背景变色" class="headerlink" title="1.4.2.背景变色"></a>1.4.2.背景变色</h3><p>为了提升用户体验，我们需要在用户选中时，给提示项背景变色，因此我们需要先记录当前鼠标选中的是哪一个提示项.</p><h4 id="1）记录选中的提示项"><a href="#1）记录选中的提示项" class="headerlink" title="1）记录选中的提示项"></a>1）记录选中的提示项</h4><p>在data中定义一个变量，来记录选中的提示项的角标：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309113419926.png" alt="image-20200309113419926"> </p><p>然后，给选项添加动态样式，当<strong>选中项</strong>角标等于<strong>当前选项</strong>角标时，背景高亮：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309113645165.png" alt="image-20200309113645165"></p><h4 id="2）鼠标移动选中提示项"><a href="#2）鼠标移动选中提示项" class="headerlink" title="2）鼠标移动选中提示项"></a>2）鼠标移动选中提示项</h4><p>然后，给提示项添加鼠标悬停事件，悬停到当前提示项时，<strong>把index值改成自己的角标</strong>，那么自己就高亮了:</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309113808652.png" alt="image-20200309113808652"></p><h4 id="3）键盘控制光标"><a href="#3）键盘控制光标" class="headerlink" title="3）键盘控制光标"></a>3）键盘控制光标</h4><p>有时候用户手正放在键盘上输入，所以可能希望通过==“↑”==或者==“↓”==两个按键来控制选中的提示项。</p><p>我们需要在之前的键盘事件中，添加对==“↑”==或者==“↓”==两个按键的判断：</p><ul><li>点击==“↓”==：index就<code>+1</code>，光标就下移</li><li>点击==“↑”==：index就<code>-1</code>，光标就上移</li></ul><p>不过，还要加入健壮性判断，如果超出了options的长度或者小于0就麻烦了：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309114228046.png" alt="image-20200309114228046"></p><p>最终的效果：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309114257466.png" alt="image-20200309114257466"> </p><h4 id="4）输入框内容跟随光标变化"><a href="#4）输入框内容跟随光标变化" class="headerlink" title="4）输入框内容跟随光标变化"></a>4）输入框内容跟随光标变化</h4><p>光标上下移动，选中的提示项改变了，那么输入框内容也要一起改变。</p><p>我们可以watch监控index的变化，然后动态修改key的值即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    <span class="function"><span class="title">index</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (val !== -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = <span class="built_in">this</span>.options[val];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果如图：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\auto_complete.gif"> </p><p>自己小结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">小技巧：</span></span><br><span class="line"><span class="attr">调试功能时，可以创建分支，然后在分支里面改代码，改好了merge到主分支。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">商品：spu+sku</span>   <span class="string">由item-service 访问数据库，然后提供给客户端访问，或者其他微服务访问。</span></span><br><span class="line"><span class="meta">搜索系统（微服务）</span> <span class="string">需要搜索商品，那么就需要首先导入数据，需要访问item-service 微服务来获取数据。</span></span><br><span class="line"><span class="meta">搜索系统</span> <span class="string">中需要导入 openfeign 依赖，</span></span><br><span class="line"><span class="meta">通过feignClient注解来指定item-service</span> <span class="string">微服务名称，就可以访问相关url来访问数据了。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">每个商品名称都对应</span> <span class="string">完整名称，首字母缩写，字母全拼 的索引，</span></span><br><span class="line"><span class="attr">当前端搜索栏输入时，就回去elasticSearch中查找对应的索引的商品名称那一条数据，</span></span><br><span class="line"><span class="attr">将每一条数据的名称封装到Goods对象的suggestion属性中，带回给前端，</span></span><br><span class="line"><span class="attr">那么前端中的suggestion属性里面的商品名称就是自动补全信息。</span></span><br></pre></td></tr></table></figure><h1 id="2-基本搜索"><a href="#2-基本搜索" class="headerlink" title="2.基本搜索"></a>2.基本搜索</h1><p>给用户提示信息后，接下来用户就会去搜索数据了，大概的实现步骤是这样的：</p><ul><li>用户点击提示的内容或自己输入内容点击搜索</li><li>页面跳转到搜索列表页，并携带搜索关键字</li><li>搜索列表页发起请求到服务端，携带搜索参数</li><li>服务端利用搜索关键字，向ElasticSearch发起请求，查询数据</li><li>返回数据到页面，完成渲染</li></ul><p>我们来看看如何实现</p><h2 id="2-1-页面跳转（了解）"><a href="#2-1-页面跳转（了解）" class="headerlink" title="2.1.页面跳转（了解）"></a>2.1.页面跳转（了解）</h2><h3 id="2-1-1-提示框条目点击事件"><a href="#2-1-1-提示框条目点击事件" class="headerlink" title="2.1.1.提示框条目点击事件"></a>2.1.1.提示框条目点击事件</h3><p>用户点击提示框内的选项，我们要实现跳转，因此需要给提示框内容绑定点击事件：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309102742547.png" alt="image-20200309102742547"></p><p>在事件中，获取选中的项，也就是搜索的关键字，关闭提示框，然后跳转到搜索页面：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309103500536.png" alt="image-20200309103500536"> </p><h3 id="2-1-2-搜索按钮和输入框事件"><a href="#2-1-2-搜索按钮和输入框事件" class="headerlink" title="2.1.2.搜索按钮和输入框事件"></a>2.1.2.搜索按钮和输入框事件</h3><p>除了点击提示内容可以跳转，用户按回车或点击搜索按钮，也应该实现跳转，我们需要：</p><ul><li>给输入框绑定键盘监听事件，监听回车键</li><li>需要给搜索按钮绑定点击事件：</li></ul><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309110753555.png" alt="image-20200309110753555"></p><p>在<code>handlekey</code>方法中，判断用户输入的按钮是不是回车键：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309114941379.png" alt="image-20200309114941379"> </p><p>如果是回车键，这里调用<code>this.search()</code>方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">search</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">window</span>.location = <span class="string">&#x27;/search.html?key=&#x27;</span> + <span class="built_in">this</span>.key;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>方法中，实现页面跳转，携带请求参数。</p><h2 id="2-2-查询请求分析（了解）"><a href="#2-2-查询请求分析（了解）" class="headerlink" title="2.2.查询请求分析（了解）"></a>2.2.查询请求分析（了解）</h2><p>跳转到search.html以后，会在当前页面的生命周期钩子中，获取请求参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求参数</span></span><br><span class="line">    <span class="keyword">let</span> key = ly.getUrlParam(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 获取其它参数</span></span><br><span class="line">    <span class="keyword">let</span> params = ly.parse(location.hash.substring(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 初始化其它请求参数</span></span><br><span class="line">    params.page = params.page ? <span class="built_in">parseInt</span>(params.page) : <span class="number">1</span>;</span><br><span class="line">    params.key = key;</span><br><span class="line">    params.filters = params.filters || &#123;&#125;;</span><br><span class="line">    params.sortBy = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    params.desc = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 赋值给本地变量</span></span><br><span class="line">    <span class="built_in">this</span>.params = params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这里除了获取<code>key</code>这个参数以为，还会获取一些其他参数，这些我们在后面会用到。然后参数被赋值给了本地变量：<code>params</code>。</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309120018951.png" alt="image-20200309120018951"> </p><p>而代码中通过<code>watch</code>监控了参数的变化，并发起请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    <span class="string">&quot;params.key&quot;</span>(val, oldVal) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!oldVal) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取商品数据</span></span><br><span class="line">        <span class="built_in">this</span>.searchData();</span><br><span class="line">        <span class="comment">// 获取过滤项数据</span></span><br><span class="line">        <span class="built_in">this</span>.getFilters();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>this.searchData()</code>方法中，搜索的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">searchData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    axios.post(<span class="string">&quot;/search/goods/list&quot;</span>, <span class="built_in">this</span>.params)</span><br><span class="line">        .then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 分页数据</span></span><br><span class="line">            <span class="built_in">this</span>.total = resp.data.total;</span><br><span class="line">            <span class="built_in">this</span>.totalPage = <span class="built_in">Math</span>.floor((<span class="built_in">this</span>.total + <span class="number">19</span>) / <span class="number">20</span>);</span><br><span class="line">            <span class="comment">// 商品</span></span><br><span class="line">            <span class="built_in">this</span>.goodsList = resp.data.content;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面请求已经发出：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309133630658.png" alt="image-20200309133630658"> </p><h2 id="2-3-查询的业务实现"><a href="#2-3-查询的业务实现" class="headerlink" title="2.3.查询的业务实现"></a>2.3.查询的业务实现</h2><h3 id="2-3-1-接口分析"><a href="#2-3-1-接口分析" class="headerlink" title="2.3.1.接口分析"></a>2.3.1.接口分析</h3><p>先来看下请求接口：</p><ul><li><p>请求方式：POST</p></li><li><p>请求路径：/goods/list</p></li><li><p>请求参数：json风格，包含5个参数：</p><ul><li>page：当前页</li><li>key：搜索关键字</li><li>filters：过滤项</li><li>sortBy：排序字段，可以为空，就是按照默认打分排序</li><li>desc：是否降序，默认true</li></ul></li><li><p>返回值：分页查询，需要返回分页结果对象，包括2个字段:</p><ul><li>total：总条数</li><li>content：当前页数据</li></ul><p>在自定义的es的starter中，包含了一个PageInfo类，符合这样的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageInfo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这里需要准备接收请求参数的对象，我们在<code>ly-search</code>的<code>com.leyou.search.dto</code>包中，准备DTO对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.search.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 搜索的请求参数对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchParamDTO</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页大小，不从页面接收，而是固定大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEFAULT_SIZE = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PAGE = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页码最大不能超过100</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_MAX_VALUE = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索的关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer page = DEFAULT_PAGE;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为降序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean desc;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; filters;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer from;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(page == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> DEFAULT_PAGE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPage</span><span class="params">(Integer page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.page = Math.min(Math.max(DEFAULT_PAGE, page), PAGE_MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DEFAULT_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getFilters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilters</span><span class="params">(Map&lt;String, String&gt; filters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filters = filters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSortBy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sortBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSortBy</span><span class="params">(String sortBy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sortBy = sortBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(Boolean desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getFrom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (page - <span class="number">1</span>) * getSize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，对象中包含几个特殊方法：</p><ul><li>getFrom()：根据page和size计算分页的开始索引</li><li>getSize()：返回默认的每页大小，20</li></ul><h3 id="2-3-2-controller"><a href="#2-3-2-controller" class="headerlink" title="2.3.2.controller"></a>2.3.2.controller</h3><p>我们在<code>ly-search</code>的<code>com.leyou.search.web</code>的<code>SearchController</code>中定义方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页搜索商品数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;PageInfo&lt;Goods&gt;&gt; searchGoods(<span class="meta">@RequestBody</span> SearchParamDTO request)&#123;</span><br><span class="line">    <span class="keyword">return</span> searchService.searchGoods(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-service"><a href="#2-3-3-service" class="headerlink" title="2.3.3.service"></a>2.3.3.service</h3><p>在实现搜索时，我们会调用<code>GoodsRepository</code>中提供的<code>queryBySourceBuilderForPageHighlight()</code>方法，其返回值是一个<code>PageInfo&lt;T&gt;</code>对象，这里的T应该就是<code>Goods</code>对象。</p><p>不过，页面渲染不需要Goods的全部数据，需要的参数包括：</p><ul><li>商品id</li><li>商品标题</li><li>商品价格</li><li>商品图片</li><li>销量</li></ul><p>因此，我们需要在查询时候，添加source过滤，限制elasticsearch返回的字段数量。</p><p>接下来，在<code>ly-search</code>的<code>com.leyou.search.service</code>包下的<code>SearchService</code>接口中，添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询商品数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 请求参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品分页数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Mono&lt;PageInfo&lt;Goods&gt;&gt; searchGoods(SearchParamDTO param);</span><br></pre></td></tr></table></figure><p>在<code>ly-search</code>的<code>com.leyou.search.service.impl</code>包下的<code>SearchServiceImpl</code>中，实现方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;PageInfo&lt;Goods&gt;&gt; searchGoods(SearchParamDTO param) &#123;</span><br><span class="line">    <span class="comment">// 1.构建查询条件的工厂对象</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">// 1.1.source过滤</span></span><br><span class="line">    sourceBuilder.fetchSource(DEFAULT_SOURCE_FIELD, <span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// 1.2.查询条件</span></span><br><span class="line">    String key = param.getKey();</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isBlank(key))&#123;</span><br><span class="line">        <span class="comment">// 搜索条件为null，返回异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;搜索条件不能为空！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sourceBuilder.query(QueryBuilders.matchQuery(DEFAULT_SEARCH_FIELD, key));</span><br><span class="line">    <span class="comment">// 1.3.分页条件</span></span><br><span class="line">    sourceBuilder.from(param.getFrom());</span><br><span class="line">    sourceBuilder.size(param.getSize());</span><br><span class="line">    <span class="comment">// 1.4.排序条件</span></span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotBlank(param.getSortBy()))&#123;</span><br><span class="line">        <span class="comment">// 排序字段存在，才去排序</span></span><br><span class="line">        sourceBuilder.sort(param.getSortBy(), param.getDesc() ? SortOrder.DESC: SortOrder.ASC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1.5.高亮条件</span></span><br><span class="line">    sourceBuilder.highlighter(<span class="keyword">new</span> HighlightBuilder().field(DEFAULT_SEARCH_FIELD)</span><br><span class="line">                              .preTags(DEFAULT_PRE_TAG).postTags(DEFAULT_POST_TAG));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.查询</span></span><br><span class="line">    <span class="keyword">return</span> repository.queryBySourceBuilderForPageHighlight(sourceBuilder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-页面渲染查询数据"><a href="#2-4-页面渲染查询数据" class="headerlink" title="2.4.页面渲染查询数据"></a>2.4.页面渲染查询数据</h2><p>我们重启服务，在页面访问试试：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309154002433.png" alt="image-20200309154002433"></p><p>不过，查看控制台响应的结果，发现一些问题：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309145902472.png" alt="image-20200309145902472"> </p><p>我们不需要返回的结果没有值，但是返回了null到页面，看起来很糟糕。怎样才能在对象序列化为JSON的时候，忽略null字段呢？</p><p>我们可以再在<code>ly-search</code>的<code>application.yml</code>文件中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">search-service</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span> <span class="comment"># json处理忽略null字段</span></span><br></pre></td></tr></table></figure><p>重启后再试试效果：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309150245754.png" alt="image-20200309150245754"></p><h5 id="搜索功能小结："><a href="#搜索功能小结：" class="headerlink" title="搜索功能小结："></a>搜索功能小结：</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">我们的基本搜索功能：</span></span><br><span class="line"><span class="meta">当点击关键词进行搜索时，ly-search</span> <span class="string">就会将相关索引信息</span></span><br><span class="line"><span class="attr">（由ly-service导入数据并使用es的搜索功能搜索数据，得到商品的索引信息）</span></span><br><span class="line"><span class="attr">封装带给前端，由前端渲染，</span></span><br><span class="line"><span class="attr">注意：带给前端的图片信息只是传图片的路径，图片放在nginx的静态资源访问路径中！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">小</span> <span class="string">tip:</span></span><br><span class="line"><span class="attr">在接受前端post数据时，可以用Map对象来接收，可以使用java类对象来接收。</span></span><br><span class="line"><span class="attr">如果接收的是稳定的key-val，或者json，那么可以使用java类对象来接收</span></span><br><span class="line"><span class="attr">如果接收的是不稳定的key-val，或者json，那么使用Map对象来接收</span></span><br><span class="line"></span><br><span class="line"><span class="attr">搜索栏自动补全功能：</span></span><br><span class="line"><span class="attr">使用的是并集，输入”小米手机“，先分词，然后根据全称名，全称拼音，首字母缩写来查询索引信息</span></span><br><span class="line"><span class="attr">搜索栏查询时使用交集：（默认使用的是并集）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">并集：如输入“小米手机”，凡是小米，手机相关的索引都查出来了，</span></span><br><span class="line"><span class="attr">如，搜&quot;小米手机&quot;时只出来小米手机，同时也会出来华为手机</span></span><br><span class="line"><span class="attr">使用交集：（and），只会出来跟“小米手机”相关的商品。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">返回值</span> <span class="string">Mono&lt;Map&lt;String,List&lt;Object&gt;&gt;&gt;与List&lt;Map&lt;String,List&lt;Object&gt;&gt;&gt;区别</span></span><br><span class="line"><span class="attr">前者是异步返回，后者是同步返回。</span></span><br></pre></td></tr></table></figure><p>############################################</p><p>注意：还有一部分功能，这里可以加入，就是：<strong>利用规格参数的选取作为过滤条件进行再次精准查询</strong></p><p>这里就不具体讲解前后端代码了，只是简单的说一下整个业务流程！</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">想要利用规格参数的选取作为过滤条件进行再次精准查询</span></span><br><span class="line"><span class="attr">2</span> <span class="string">那么就需要对“搜索框中输入信息得到的搜索结果”的一些规格参数进行聚合，</span></span><br><span class="line"><span class="attr">3</span> <span class="string">聚合的意思就是，搜索结果中的规格参数都有哪些值，把它单独聚合出来</span></span><br><span class="line"><span class="attr">4</span> <span class="string">我们根据这些聚合参数（每种规格参数有哪些值，比如搜索手机时，有一个规格参数为内存，4G，8G...）再次精准查询</span></span><br></pre></td></tr></table></figure><p>比如：<br>从搜索结果中对品牌id进行聚合，得到品牌id的集合。<br>得到了品牌id集合后，再去service-item中查询响应的paramsDTO，转为SearchParamDTO，然后带给前端。</p><p>############################################</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\1656317226(1).jpg" alt="1656317226(1)"></p><h1 id="3-数据同步"><a href="#3-数据同步" class="headerlink" title="3.数据同步"></a>3.数据同步</h1><p>我们已经完成了搜索的基本功能，但是一个问题摆在我们的面前：</p><p>搜索功能依赖的商品数据是存储在ElasticSearch中的，但是数据库中也有一份商品数据。当我们对商品做增、删、改这样的操作时，ElasticSearch并未感知到，此时就会出现<strong>数据库数据与索引库数据的不一致</strong>。</p><h2 id="3-1-同步问题分析"><a href="#3-1-同步问题分析" class="headerlink" title="3.1.同步问题分析"></a>3.1.同步问题分析</h2><p>大家首先的想法也许是这样的：我们可以再商品做增、删、改的时候，去修改索引库数据啊，同样把商品增删改到索引库中。</p><p>不过，我们并不需要在商品增、删、改的时候都对索引库做处理，因为索引库中只需要上架的商品，如果一个商品新增了，并不代表也上架了。而且，商品要修改和删除前必须先下架，商品新增后还要上架。</p><p>所以，我们需要做的是：</p><ul><li>商品上架：在索引库新增数据</li><li>商品下架：把数据从索引库删除</li></ul><p>但新的问题来了：商品的上架和下架时商品微服务<code>ly-item</code>中处理的，索引库数据是在<code>ly-search</code>中处理的。我们如何在上架时修改索引库呢？</p><p>这里有两种解决方案：</p><ul><li><p>方案1：在商品微服务的上下架业务后，加入修改索引库数据</p></li><li><p>方案2：搜索服务对外提供操作索引库，商品微服务在商品上下架后，调用接口。</p></li></ul><p>以上两种方式都有同一个严重问题：就是<strong>代码耦合</strong>，（<strong>还会将item-service 业务时间拖长，而且异常时事务回滚，这就会导致问题</strong>）后台服务中需要嵌入搜索和商品页面服务，违背了微服务的<code>独立</code>原则，而且严重违背了开闭原则。</p><p>所以，我们会通过另外一种方式来解决这个问题：消息队列</p><h2 id="3-2-流程分析"><a href="#3-2-流程分析" class="headerlink" title="3.2.流程分析"></a>3.2.流程分析</h2><p>如何利用MQ来实现数据同步呢？来看一个流程图：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\image-20200309215326045.png" alt="image-20200309215326045"></p><p>商品微服务在完成上架、下架后，发送消息到MQ，通知是哪个商品更新了，自己的业务就结束了，商品微服务不需要知道，也不关心到底是谁在监听这条消息。</p><p>搜索微服务在接收到消息后，更新索引库数据即可，同样不需要关心别人。</p><p>两个微服务之间没有直接调用，<strong>没有业务的耦合</strong>。</p><p>不过，这里有几个问题需要思考：</p><ul><li><p>什么时候发消息？</p><ul><li>当商品服务对商品进行上下架的时候，需要发送一条消息，通知其它服务</li></ul></li><li><p>商品微服务发送消息的内容是什么？</p><ul><li>对商品的增删改时其它服务可能需要新的商品数据，但是如果消息内容中包含全部商品信息，数据量太大，而且并不是每个服务都需要全部的信息。因此我们<strong>只发送商品id</strong>，其它服务可以根据id查询自己需要的信息。</li></ul></li><li><p>搜索微服务接收消息后如何处理？</p><ul><li>上架：添加新的数据到索引库</li><li>下架：删除索引库数据</li></ul></li></ul><p><strong>利用mq消息中间件来同步elasticSearch跟mysql</strong>（同步search-service以及item-service）总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">search-service 微服务发生异常时，item-service 看不到，</span></span><br><span class="line"><span class="attr">2</span> <span class="string">item-service 发送消息后就返回，变成了异步</span></span><br><span class="line"><span class="attr">3</span> <span class="string">耦合性降低。item-service只管发，后面不管有多少个消费者，不关联。</span></span><br></pre></td></tr></table></figure><p>附录：docker安装RabbitMQ的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=leyou \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123321 \</span><br><span class="line"> --name ly-mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure><p><strong>对于这些中间件，都是面向服务编程的，安装启动就好，对外提供访问接口！</strong></p><h2 id="3-3-消息队列常量"><a href="#3-3-消息队列常量" class="headerlink" title="3.3.消息队列常量"></a>3.3.消息队列常量</h2><p>在<code>ly-common</code>的<code>com.leyou.common.constants</code>包中编写一个常量类，记录将来会用到的Exchange名称、Queue名称、routing_key名称.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.constants;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MQConstants</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangeConstants</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 商品服务交换机名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_EXCHANGE_NAME = <span class="string">&quot;ly.item.exchange&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消息服务交换机名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_EXCHANGE_NAME = <span class="string">&quot;ly.sms.exchange&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 订单业务的交换机</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ORDER_EXCHANGE_NAME = <span class="string">&quot;ly.order.exchange&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 死信队列交换机名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_EXCHANGE_NAME = <span class="string">&quot;ly.dead.exchange&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingKeyConstants</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 商品上架的routing-key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_UP_KEY = <span class="string">&quot;item.up&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 商品下架的routing-key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_DOWN_KEY = <span class="string">&quot;item.down&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 商品下架的routing-key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERIFY_CODE_KEY = <span class="string">&quot;sms.verify.code&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 清理订单routing-key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVICT_ORDER_KEY = <span class="string">&quot;order.evict&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueConstants</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 搜索服务，商品上架的队列</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEARCH_ITEM_UP = <span class="string">&quot;search.item.up.queue&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 搜索服务，商品下架的队列</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEARCH_ITEM_DOWN = <span class="string">&quot;search.item.down.queue&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 搜索服务，商品下架的队列</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_VERIFY_CODE_QUEUE = <span class="string">&quot;sms.verify.code.queue&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 订单死信队列名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_ORDER_QUEUE = <span class="string">&quot;ly.dead.order.queue&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 订单清理队列名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVICT_ORDER_QUEUE = <span class="string">&quot;ly.evict.order.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-商品微服务发送消息"><a href="#3-4-商品微服务发送消息" class="headerlink" title="3.4.商品微服务发送消息"></a>3.4.商品微服务发送消息</h2><p>我们先在商品微服务<code>ly-item-service</code>中实现发送消息。</p><h3 id="3-4-1-引入依赖"><a href="#3-4-1-引入依赖" class="headerlink" title="3.4.1.引入依赖"></a>3.4.1.引入依赖</h3><p>在<code>ly-item-service</code>的pom.xml文件中，添加RabbitMQ依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-2-配置文件"><a href="#3-4-2-配置文件" class="headerlink" title="3.4.2.配置文件"></a>3.4.2.配置文件</h3><p>我们在<code>ly-item-service</code>的<code>application.yml</code>中添加一些有关RabbitMQ的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-mq</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">initial-interval:</span> <span class="string">10000ms</span></span><br><span class="line">        <span class="attr">max-interval:</span> <span class="string">80000ms</span></span><br><span class="line">        <span class="attr">multiplier:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">publisher-confirms:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>template：有关<code>AmqpTemplate</code>的配置<ul><li>retry：失败重试<ul><li>enabled：开启失败重试</li><li>initial-interval：第一次重试的间隔时长</li><li>max-interval：最长重试间隔，超过这个间隔将不再重试</li><li>multiplier：下次重试间隔的倍数，此处是2即下次重试间隔是上次的2倍</li></ul></li><li>exchange：缺省的交换机名称，此处配置后，发送消息如果不指定交换机就会使用这个</li></ul></li><li>publisher-confirms：生产者确认机制，确保消息会正确发送，如果发送失败会有错误回执，从而触发重试</li></ul><h3 id="3-4-3-Json消息转换器"><a href="#3-4-3-Json消息转换器" class="headerlink" title="3.4.3.Json消息转换器"></a>3.4.3.Json消息转换器</h3><p>需要注意的是，默认情况下，AMQP会使用JDK的序列化方式对发送的消息进行处理，传输数据比较大，效率太低，可读性差。我们可以自定义消息转换器，使用JSON来处理.</p><p>我们在<code>ly-item-service</code>的<code>com.leyou.item.config</code>包下，添加一个配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jackson2JsonMessageConverter <span class="title">messageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>位置：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\1553261106957.png" alt="1553261106957"> </p><h3 id="3-4-4-改造SpuServiceImpl"><a href="#3-4-4-改造SpuServiceImpl" class="headerlink" title="3.4.4.改造SpuServiceImpl"></a>3.4.4.改造SpuServiceImpl</h3><p>改造SpuServiceImpl中的商品上下架功能，发送消息，两个注意点：</p><ul><li><p>注入AmqpTemplate</p></li><li><p>注意用静态导入方式，导入在ly-common中定义的常量：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.common.constants.MQConstants.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateSaleable</span><span class="params">(Long id, Boolean saleable)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.修改spu</span></span><br><span class="line">    Spu spu = <span class="keyword">new</span> Spu();</span><br><span class="line">    spu.setId(id);</span><br><span class="line">    spu.setSaleable(saleable);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> success = updateById(spu);</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;更新失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.修改sku</span></span><br><span class="line">    success = skuService.update().set(<span class="string">&quot;saleable&quot;</span>, saleable)</span><br><span class="line">        .eq(<span class="string">&quot;spu_id&quot;</span>, id).update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;更新失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.发送MQ消息</span></span><br><span class="line">    String routingKey = saleable ? RoutingKeyConstants.ITEM_UP_KEY : RoutingKeyConstants.ITEM_DOWN_KEY;</span><br><span class="line">    amqpTemplate.convertAndSend(ExchangeConstants.ITEM_EXCHANGE_NAME, routingKey, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启商品微服务。</p><h2 id="3-5-搜索服务接收消息"><a href="#3-5-搜索服务接收消息" class="headerlink" title="3.5.搜索服务接收消息"></a>3.5.搜索服务接收消息</h2><p>搜索服务接收到消息后要做的事情：</p><ul><li>上架：添加新的数据到索引库</li><li>下架：删除索引库数据</li></ul><p>我们需要两个不同队列，监听不同类型消息。</p><h3 id="3-5-1-引入依赖"><a href="#3-5-1-引入依赖" class="headerlink" title="3.5.1.引入依赖"></a>3.5.1.引入依赖</h3><p>在<code>ly-search</code>的pom.xml文件中，添加RabbitMQ依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-2-添加配置"><a href="#3-5-2-添加配置" class="headerlink" title="3.5.2.添加配置"></a>3.5.2.添加配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-mq</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><p>这里只是接收消息而不发送，所以不用配置template相关内容。</p><h3 id="3-5-3-消息转换器"><a href="#3-5-3-消息转换器" class="headerlink" title="3.5.3.消息转换器"></a>3.5.3.消息转换器</h3><p>不过，不要忘了消息转换器：</p><p><img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\1553262961034.png" alt="1553262961034"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jackson2JsonMessageConverter <span class="title">messageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-4-编写监听器"><a href="#3-5-4-编写监听器" class="headerlink" title="3.5.4.编写监听器"></a>3.5.4.编写监听器</h3><p> <img src="F:\java\01-重要部分：2021基础就业\06阶段：樂樂项目\day08_elasticsearch搜索及数据同步\笔记\assets\1553263050354.png" alt="1553263050354"> </p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.search.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.search.service.SearchService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.common.constants.MQConstants.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = QueueConstants.SEARCH_ITEM_UP, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = ExchangeConstants.ITEM_EXCHANGE_NAME, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = RoutingKeyConstants.ITEM_UP_KEY</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenItemUp</span><span class="params">(Long spuId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (spuId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 商品上架，我们新增商品到索引库</span></span><br><span class="line">            searchService.saveGoodsById(spuId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = QueueConstants.SEARCH_ITEM_DOWN, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = ExchangeConstants.ITEM_EXCHANGE_NAME, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = RoutingKeyConstants.ITEM_DOWN_KEY</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenItemDown</span><span class="params">(Long spuId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (spuId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 商品下架，我们删除商品</span></span><br><span class="line">            searchService.deleteGoodsById(spuId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-5-编写创建和删除索引方法"><a href="#3-5-5-编写创建和删除索引方法" class="headerlink" title="3.5.5.编写创建和删除索引方法"></a>3.5.5.编写创建和删除索引方法</h3><p>在<code>ly-search</code>的<code>com.leyou.search.service</code>包的<code>SearchService</code>接口中添加两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增一个商品到索引库</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveGoodsById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从索引库删除一个商品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteGoodsById</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-search</code>的<code>com.leyou.search.service.impl</code>包的<code>SearchServiceImpl</code>中实现这两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveGoodsById</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需要spu</span></span><br><span class="line">    SpuDTO spu = itemClient.queryGoodsById(spuId);</span><br><span class="line">    <span class="comment">// 构建goods</span></span><br><span class="line">    Goods goods = buildGoods(spu);</span><br><span class="line">    <span class="comment">// 写入索引库</span></span><br><span class="line">    repository.save(goods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteGoodsById</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">    repository.deleteById(spuId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搜索过滤及数据同步&quot;&gt;&lt;a href=&quot;#搜索过滤及数据同步&quot; class=&quot;headerlink&quot; title=&quot;搜索过滤及数据同步&quot;&gt;&lt;/a&gt;搜索过滤及数据同步&lt;/h1&gt;&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="乐优商城项目" scheme="http://example.com/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-ElesticSearch实现基本搜索</title>
    <link href="http://example.com/2022/06/26/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-ElesticSearch%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E6%90%9C%E7%B4%A2/"/>
    <id>http://example.com/2022/06/26/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-ElesticSearch%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E6%90%9C%E7%B4%A2/</id>
    <published>2022-06-26T07:39:55.000Z</published>
    <updated>2022-06-26T07:51:52.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">理解索引库数据结构设计</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能够把商品数据导入到索引库</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能实现搜索补全功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能实现基本搜索功能</span></span><br></pre></td></tr></table></figure><h1 id="1-ElasticSearch的starter"><a href="#1-ElasticSearch的starter" class="headerlink" title="1.ElasticSearch的starter"></a>1.ElasticSearch的starter</h1><p>ElasticSearch的异步API代码编写比较复杂，因此我们需要封装成工具，方便后期的使用。而且最好与SpringBoot整合，完成自动配置的starter。最终达成与MybatisPlus一样的效果：</p><ul><li>用户定义接口并继承我们的接口，获取CRUD的方法</li><li>我们实现接口中的方法</li><li>通过动态代理来代理用户接口，并注入Spring容器</li><li>实现自动配置</li></ul><p>我们大概会经过这样几个步骤来完成：</p><ul><li>定义工具类</li><li>与spring整合</li><li>形成starter</li></ul><h2 id="1-1-搭建工程"><a href="#1-1-搭建工程" class="headerlink" title="1.1.搭建工程"></a>1.1.搭建工程</h2><p>SpringBoot的starter结构一般如下：</p><ul><li>spring-boot-xxx-autoconfigure：实现自动配置的代码、工具类、配置类等</li><li>spring-boot-starter-xxx：管理spring-boot-xxx-autoconfigure及其它所需依赖的版本</li></ul><p>因此我们如果要自定义工具类，并且实现starter，项目结构也是如此，包含：</p><ul><li>leyou-starters：父工程，起聚合作用，方便开发<ul><li>elastic-spring-boot-autoconfigure：工具类、配置类等</li><li>elastic-spring-boot-starter：引入spring-boot-xxx-autoconfigure及其它所需依赖</li></ul></li></ul><p>补充：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">项目里使用官方提供的elasticSearch版本，高级特性用不了，</span></span><br><span class="line"><span class="attr">比如说显示提示，因为是绑定了springBoot版本的，</span></span><br><span class="line"><span class="meta">但是我又想要使用elasticSearch高级特性，怎么办？？？自定义elasticSearch</span> <span class="string">start 启动依赖包！！！</span></span><br></pre></td></tr></table></figure><h3 id="1-1-1-创建父工程："><a href="#1-1-1-创建父工程：" class="headerlink" title="1.1.1.创建父工程："></a>1.1.1.创建父工程：</h3><p>创建一个普通maven工程</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200517111029233.png" alt="image-20200517111029233"></p><p>位置：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200517111050389.png" alt="image-20200517111050389"></p><p>pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-starters<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.1.12.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-2-AutoConfigure"><a href="#1-1-2-AutoConfigure" class="headerlink" title="1.1.2.AutoConfigure"></a>1.1.2.AutoConfigure</h3><p>然后是搭建AutoConfigure模块。</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200517111202030.png" alt="image-20200517111202030"> </p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200517111215955.png" alt="image-20200517111215955"></p><p>坐标：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200517111222004.png" alt="image-20200517111222004"></p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-starters<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot 自动配置基本依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--elasticsearch依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JSON依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通用模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--响应式API 依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-netty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.8.15.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志相关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jul-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-3-Starter模块"><a href="#1-1-3-Starter模块" class="headerlink" title="1.1.3.Starter模块"></a>1.1.3.Starter模块</h3><p>然后是starter模块，与AutoConfigure模块一样，是一个普通maven模块</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200517111258427.png" alt="image-20200517111258427"></p><p>依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-starters<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-定义工具类"><a href="#1-2-定义工具类" class="headerlink" title="1.2.定义工具类"></a>1.2.定义工具类</h2><p>课程中为了时间考虑，我们只把核心需要的几个功能封装，并不追求功能的完整性，包括下列方法：</p><ul><li>创建索引库和映射</li><li>删除索引库</li><li>新增文档</li><li>查询文档</li><li>删除文档</li><li>搜索并实现分页、高亮、排序</li><li>自动补全查询</li></ul><p>因为包含分页查询，因此需要一个DTO，代表分页结果，</p><p>我们在<code>com.leyou.starter.elastic.entity</code>包下定义一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.starter.elastic.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageInfo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageInfo</span><span class="params">(<span class="keyword">long</span> total, List&lt;T&gt; content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(<span class="keyword">long</span> total)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(List&lt;T&gt; content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-1-定义工具接口"><a href="#1-2-1-定义工具接口" class="headerlink" title="1.2.1.定义工具接口"></a>1.2.1.定义工具接口</h3><p>首先我们在<code>com.leyou.starter.elastic.repository</code>包中定义一个接口，声明需要的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.starter.elastic.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.starter.elastic.dto.PageInfo;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义了操作Elasticsearch的CRUD的功能 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * 泛型说明 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * T：实体类类型</span></span><br><span class="line"><span class="comment"> * ID：实体类中的id类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source setting和mapping的json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否创建成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">createIndex</span><span class="params">(String source)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除当前实体类相关的索引库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否删除成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">deleteIndex</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 要新增的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否新增成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">save</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量新增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> iterable 要新增的数据结婚</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否新增成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">saveAll</span><span class="params">(Iterable&lt;T&gt; iterable)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否删除成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(ID id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步功能，根据id查询数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含实体类的Mono实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Mono&lt;T&gt; <span class="title">queryById</span><span class="params">(ID id)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据&#123;<span class="doctag">@link</span> SearchSourceBuilder&#125;查询数据，返回分页结果&#123;<span class="doctag">@link</span> PageInfo&#125;，其中的数据已经高亮处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceBuilder 查询条件构建器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果处理器处理后的的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;PageInfo&lt;T&gt;&gt; queryBySourceBuilderForPageHighlight(SearchSourceBuilder sourceBuilder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定的prefixKey对单个指定suggestField 做自动补全，返回推荐结果的列表&#123;<span class="doctag">@link</span> List&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> suggestField 补全字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefixKey 关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回推荐结果列表&#123;<span class="doctag">@link</span> List&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;List&lt;String&gt;&gt; suggestBySingleField(String suggestField, String prefixKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-定义实现类"><a href="#1-2-2-定义实现类" class="headerlink" title="1.2.2.定义实现类"></a>1.2.2.定义实现类</h3><p>我们在<code>com.leyou.starter.elastic.repository</code>包中定义实现类，暂时不实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.starter.elastic.repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryHandler</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">implements</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Elasticsearch的客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestHighLevelClient client;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 索引库名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String indexName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RepositoryHandler</span><span class="params">(RestHighLevelClient client, String indexName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">        <span class="keyword">this</span>.indexName = indexName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解读：</p><p>通过构造函数我们注入了两个属性：</p><ul><li>RestHighLevelClient client：操作elasticsearch需要用到的客户端</li><li>String indexName：要操作的索引库名称</li></ul><h3 id="1-2-3-创建和删除索引库"><a href="#1-2-3-创建和删除索引库" class="headerlink" title="1.2.3.创建和删除索引库"></a>1.2.3.创建和删除索引库</h3><p>先来实现索引库操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">createIndex</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 发起请求，准备创建索引库</span></span><br><span class="line">        CreateIndexResponse response = client.indices().create(</span><br><span class="line">            <span class="keyword">new</span> CreateIndexRequest(indexName).source(source, XContentType.JSON),</span><br><span class="line">            RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 返回执行结果</span></span><br><span class="line">        <span class="keyword">return</span> response.isAcknowledged();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">deleteIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 发起请求，删除索引库</span></span><br><span class="line">        AcknowledgedResponse response = client.indices()</span><br><span class="line">            .delete(<span class="keyword">new</span> DeleteIndexRequest(indexName), RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 返回执行结果</span></span><br><span class="line">        <span class="keyword">return</span> response.isAcknowledged();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个都是同步操作，没有调用异步的API。</p><h3 id="1-2-4-新增文档"><a href="#1-2-4-新增文档" class="headerlink" title="1.2.4.新增文档"></a>1.2.4.新增文档</h3><p>新增文档代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从对象中获取id</span></span><br><span class="line">        String id = getID(t);</span><br><span class="line">        <span class="comment">// 把对象转为JSON</span></span><br><span class="line">        String json = toJson(t);</span><br><span class="line">        <span class="comment">// 准备请求</span></span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(indexName)</span><br><span class="line">            .id(id)</span><br><span class="line">            .source(json, XContentType.JSON);</span><br><span class="line">        <span class="comment">// 发出请求</span></span><br><span class="line">        IndexResponse response = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 判断是否有失败</span></span><br><span class="line">        <span class="keyword">return</span> response.getShardInfo().getFailed() == <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，新增的时候需要做两件事情：</p><ul><li><p>获取文档数据中的ID属性：这里通过一个getID()方法来获取，这个方法暂时空实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getID</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO 待完成</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将文档转为JSON格式：这里通过Jackson的ObjectMapper来封装方法toJson()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">toJson</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.writeValueAsString(o);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">fromJson</span><span class="params">(String json)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.readValue(json, clazz);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2-5-批量新增"><a href="#1-2-5-批量新增" class="headerlink" title="1.2.5.批量新增"></a>1.2.5.批量新增</h3><p>批量新增时利用BulkRequest，把多个IndexRequest封装，然后一次请求中发出，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveAll</span><span class="params">(Iterable&lt;T&gt; iterable)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建批处理请求</span></span><br><span class="line">    BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    <span class="comment">// 遍历要处理的文档集合，然后创建成IndexRequest，逐个添加到BulkRequest中</span></span><br><span class="line">    iterable.forEach(t -&gt; request.add(<span class="keyword">new</span> IndexRequest(indexName).id(getID(t)).source(toJson(t), XContentType.JSON)));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 发送批处理请求</span></span><br><span class="line">        BulkResponse bulkResponse = client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 判断结果</span></span><br><span class="line">        <span class="keyword">if</span>(bulkResponse.status() != RestStatus.OK)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bulkResponse.hasFailures())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(bulkResponse.buildFailureMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-6-删除文档"><a href="#1-2-6-删除文档" class="headerlink" title="1.2.6.删除文档"></a>1.2.6.删除文档</h3><p>这里采用根据id删除文档的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(ID id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 准备请求</span></span><br><span class="line">        DeleteRequest request = <span class="keyword">new</span> DeleteRequest(indexName, id.toString());</span><br><span class="line">        <span class="comment">// 发出请求</span></span><br><span class="line">        DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 判断是否有失败</span></span><br><span class="line">        <span class="keyword">return</span> response.getShardInfo().getFailed() == <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-7-根据id查询文档"><a href="#1-2-7-根据id查询文档" class="headerlink" title="1.2.7.根据id查询文档"></a>1.2.7.根据id查询文档</h3><p>查询业务采用异步操作，并将结果用Mono封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;T&gt; <span class="title">queryById</span><span class="params">(ID id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过Mono.create函数来构建一个Mono，sink用来发布查询到的数据或失败结果</span></span><br><span class="line">    <span class="keyword">return</span> Mono.create(sink -&gt; &#123;</span><br><span class="line">        <span class="comment">// 开启异步查询</span></span><br><span class="line">        client.getAsync(</span><br><span class="line">            <span class="keyword">new</span> GetRequest(indexName, id.toString()),</span><br><span class="line">            RequestOptions.DEFAULT,</span><br><span class="line">            <span class="comment">// 异步回调</span></span><br><span class="line">            <span class="keyword">new</span> ActionListener&lt;GetResponse&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(GetResponse response)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 判断查询是否成功</span></span><br><span class="line">                    <span class="keyword">if</span> (!response.isExists()) &#123;</span><br><span class="line">                        <span class="comment">// 不成功则返回错误</span></span><br><span class="line">                        sink.error(<span class="keyword">new</span> RuntimeException(<span class="string">&quot;文档不存在！&quot;</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 成功时的回调，</span></span><br><span class="line">                    sink.success(fromJson(response.getSourceAsString()));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 失败时的回调</span></span><br><span class="line">                    sink.error(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-8-搜索并分页、高亮、排序"><a href="#1-2-8-搜索并分页、高亮、排序" class="headerlink" title="1.2.8.搜索并分页、高亮、排序"></a>1.2.8.搜索并分页、高亮、排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO 等待后续完成</span></span><br><span class="line"><span class="comment"> * T 类型的字节码，将来需要知道，这样才能把查询到的JSON的反序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;PageInfo&lt;T&gt;&gt; queryBySourceBuilderForPageHighlight(SearchSourceBuilder sourceBuilder) &#123;</span><br><span class="line">    <span class="keyword">return</span> Mono.create(sink -&gt; &#123;</span><br><span class="line">        <span class="comment">// 准备搜索请求，并接受用户提交的查询参数</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(indexName).source(sourceBuilder);</span><br><span class="line">        <span class="comment">// 发送异步请求</span></span><br><span class="line">        client.searchAsync(request, RequestOptions.DEFAULT, <span class="keyword">new</span> ActionListener&lt;SearchResponse&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(SearchResponse response)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 成功的回调函数</span></span><br><span class="line">                <span class="keyword">if</span> (response.status() != RestStatus.OK) &#123;</span><br><span class="line">                    sink.error(<span class="keyword">new</span> RuntimeException(<span class="string">&quot;查询失败&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 处理返回结果</span></span><br><span class="line">                <span class="comment">// 获取命中的结果</span></span><br><span class="line">                SearchHits searchHits = response.getHits();</span><br><span class="line">                <span class="comment">// 总条数</span></span><br><span class="line">                <span class="keyword">long</span> total = searchHits.getTotalHits().value;</span><br><span class="line">                <span class="comment">// 数据</span></span><br><span class="line">                SearchHit[] hits = searchHits.getHits();</span><br><span class="line">                <span class="comment">// 处理数据</span></span><br><span class="line">                List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(hits.length);</span><br><span class="line">                <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">                    T t = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 把查询到的json反序列化为T类型</span></span><br><span class="line">                        t = mapper.readValue(hit.getSourceAsString(), clazz);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        sink.error(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    list.add(t);</span><br><span class="line">                    <span class="comment">// 获取高亮结果的集合</span></span><br><span class="line">                    Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">                    <span class="comment">// 判断是否有高亮</span></span><br><span class="line">                    <span class="keyword">if</span> (!CollectionUtils.isEmpty(highlightFields)) &#123;</span><br><span class="line">                        <span class="comment">// 遍历高亮字段</span></span><br><span class="line">                        <span class="keyword">for</span> (HighlightField highlightField : highlightFields.values()) &#123;</span><br><span class="line">                            <span class="comment">// 获取字段名称</span></span><br><span class="line">                            String fieldName = highlightField.getName();</span><br><span class="line">                            <span class="comment">// 获取高亮值</span></span><br><span class="line">                            String value = StringUtils.join(highlightField.getFragments());</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="comment">// 把高亮值注入 t 中</span></span><br><span class="line">                                BeanUtils.setProperty(t, fieldName, value);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                sink.error(e);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 发布分页结果</span></span><br><span class="line">                sink.success(<span class="keyword">new</span> PageInfo&lt;&gt;(total, list));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 失败回调</span></span><br><span class="line">                sink.error(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-9-自动补全"><a href="#1-2-9-自动补全" class="headerlink" title="1.2.9.自动补全"></a>1.2.9.自动补全</h3><p>异步实现查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;List&lt;String&gt;&gt; suggestBySingleField(String suggestField, String prefixKey) &#123;</span><br><span class="line">    <span class="keyword">return</span> Mono.create(sink -&gt; &#123;</span><br><span class="line">        <span class="comment">// 准备查询条件</span></span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        sourceBuilder.suggest(<span class="keyword">new</span> SuggestBuilder()</span><br><span class="line">                              .addSuggestion(<span class="string">&quot;mySuggestion&quot;</span>,</span><br><span class="line">                                             SuggestBuilders.completionSuggestion(suggestField).prefix(prefixKey)</span><br><span class="line">                                             .size(<span class="number">30</span>).skipDuplicates(<span class="keyword">true</span>)));</span><br><span class="line">        <span class="comment">// 准备请求对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(indexName).source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送异步请求</span></span><br><span class="line">        client.searchAsync(request, RequestOptions.DEFAULT, <span class="keyword">new</span> ActionListener&lt;SearchResponse&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(SearchResponse response)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 成功的回调函数</span></span><br><span class="line">                <span class="keyword">if</span> (response.status() != RestStatus.OK) &#123;</span><br><span class="line">                    sink.error(<span class="keyword">new</span> RuntimeException(<span class="string">&quot;查询失败&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 处理结果</span></span><br><span class="line">                List&lt;String&gt; list = handleSuggestResponse(response);</span><br><span class="line">                <span class="comment">// 发布数据</span></span><br><span class="line">                sink.success(list);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                sink.error(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">handleSuggestResponse</span><span class="params">(SearchResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> StreamSupport.stream(response.getSuggest().spliterator(), <span class="keyword">true</span>)</span><br><span class="line">        .map(s -&gt; (CompletionSuggestion) s)</span><br><span class="line">        .map(CompletionSuggestion::getOptions)</span><br><span class="line">        .flatMap(List::stream)</span><br><span class="line">        .map(CompletionSuggestion.Entry.Option::getText)</span><br><span class="line">        .map(Text::string)</span><br><span class="line">        .distinct()</span><br><span class="line">        .filter(StringUtils::isNotBlank)</span><br><span class="line">        .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="1-2-10-获取泛型中的类型信息（了解）"><a href="#1-2-10-获取泛型中的类型信息（了解）" class="headerlink" title="1.2.10.获取泛型中的类型信息（了解）"></a>1.2.10.获取泛型中的类型信息（了解）</h3><p>在之前开发工具类的时候，我们发现需要获取泛型T和ID的具体类型，这两个东西只有在用户实现我们的接口时指定。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">IndexData</span>, <span class="title">Long</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>我们可以利用反射来拿到接口上的泛型，不过需要用户把自己定义的MyRepository接口字节码通过构造函数传递给我们：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RepositoryHandler</span><span class="params">(RestHighLevelClient client, Class&lt;?&gt; repositoryInterface)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.client = client;</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们就可以利用反射来拿到泛型信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * T对应的字节码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; clazz;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ID对应的字节码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class&lt;ID&gt; idType;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RepositoryHandler</span><span class="params">(RestHighLevelClient client, Class&lt;?&gt; repositoryInterface)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.client = client;</span><br><span class="line">    <span class="comment">// 参数的接口应该是这样的：interface MyRepository extends Repository&lt;IndexData, Long&gt;</span></span><br><span class="line">    <span class="comment">// 反射获取接口声明的泛型</span></span><br><span class="line">    ParameterizedType parameterizedType = (ParameterizedType) repositoryInterface.getGenericInterfaces()[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 获取泛型对应的真实类型,这里有2个，&lt;IndexData, Long&gt;</span></span><br><span class="line">    Type[] actualType = parameterizedType.getActualTypeArguments();</span><br><span class="line">    <span class="comment">// 我们取数组的第一个，肯定是T的类型，即实体类类型</span></span><br><span class="line">    <span class="keyword">this</span>.clazz = (Class&lt;T&gt;) actualType[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 我们取数组的第一个，肯定是ID的类型，即ID的类型</span></span><br><span class="line">    <span class="keyword">this</span>.idType = (Class&lt;ID&gt;) actualType[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-11-获取索引库名称和ID属性（了解）"><a href="#1-2-11-获取索引库名称和ID属性（了解）" class="headerlink" title="1.2.11.获取索引库名称和ID属性（了解）"></a>1.2.11.获取索引库名称和ID属性（了解）</h3><p>索引库操作必须知道两个东西：</p><ul><li>索引库名称</li><li>文档中哪个属性是ID</li></ul><p>我们定义工具的时候是不确定的，将来由使用者来告诉我们，之前是通过通过构造函数传递？太low了！我们可以这样做：</p><ul><li><p>自定义注解，用来获取索引库、ID信息</p><ul><li>@Index：加在与索引库相关的实体类上，声明索引库名称</li><li>@Id：加在实体类的某个字段上，声明这个字段作为ID</li></ul></li><li><p>使用者准备实体类，并在实体类上使用我们的注解，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Index(&quot;myIndex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexData</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们利用反射获取IndexData注解信息，即可得知索引库和ID信息</p></li></ul><h4 id="1）自定义注解"><a href="#1）自定义注解" class="headerlink" title="1）自定义注解"></a>1）自定义注解</h4><p>我们在<code>com.leyou.starter.elastic.annotaions</code>包下自定义两个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.starter.elastic.annotaions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标记一个索引库信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Index &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 索引库名称，必填</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 索引库名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ID的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.starter.elastic.annotaions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标记实体类中的id字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Id &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）反射获取注解信息"><a href="#2）反射获取注解信息" class="headerlink" title="2）反射获取注解信息"></a>2）反射获取注解信息</h4><p>继续在RepositoryHandler的构造函数中完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * id字段名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * id字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Field idField;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 索引库的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String indexName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RepositoryHandler</span><span class="params">(RestHighLevelClient client, Class&lt;?&gt; repositoryInterface)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.client = client;</span><br><span class="line">    <span class="comment">// 参数的接口应该是这样的：interface MyRepository extends Repository&lt;IndexData, Long&gt;</span></span><br><span class="line">    <span class="comment">// 反射获取接口声明的泛型。&lt;IndexData, Long&gt;</span></span><br><span class="line">    ParameterizedType parameterizedType = (ParameterizedType) repositoryInterface.getGenericInterfaces()[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 获取泛型对应的真实类型,这里有2个，&lt;IndexData, Long&gt;</span></span><br><span class="line">    Type[] actualType = parameterizedType.getActualTypeArguments();</span><br><span class="line">    <span class="comment">// 我们取数组的第一个，肯定是T的类型，即实体类类型</span></span><br><span class="line">    <span class="keyword">this</span>.clazz = (Class&lt;T&gt;) actualType[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 我们取数组的第一个，肯定是ID的类型，即ID的类型</span></span><br><span class="line">    <span class="keyword">this</span>.idType = (Class&lt;ID&gt;) actualType[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用反射获取注解</span></span><br><span class="line">    <span class="keyword">if</span> (clazz.isAnnotationPresent(Index.class)) &#123;</span><br><span class="line">        <span class="comment">// 获取@Index注解</span></span><br><span class="line">        Index indices = clazz.getAnnotation(Index.class);</span><br><span class="line">        <span class="comment">// 获取索引库及类型名称</span></span><br><span class="line">        indexName = indices.value();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有注解，我们用类名称首字母小写，作为索引库名称</span></span><br><span class="line">        String simpleName = clazz.getSimpleName();</span><br><span class="line">        indexName = simpleName.substring(<span class="number">0</span>, <span class="number">1</span>).toLowerCase() + simpleName.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取带有@Id注解的字段：</span></span><br><span class="line">    <span class="comment">// 获取所有字段</span></span><br><span class="line">    Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 判断是否包含@Id注解</span></span><br><span class="line">        <span class="keyword">if</span> (field.isAnnotationPresent(Id.class)) &#123;</span><br><span class="line">            id = field.getName();</span><br><span class="line">            idField = field;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有发现包含@Id的字段，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(id)) &#123;</span><br><span class="line">        <span class="comment">// 没有找到id字段，则抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;实体类中必须有一个字段标记@IndexID注解。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）getId方法"><a href="#3）getId方法" class="headerlink" title="3）getId方法"></a>3）getId方法</h4><p>之前有一个getId的方法未完成，现在可以写完了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getID</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t.getClass().getName() + <span class="string">&quot;实例不能为null！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object value = idField.get(t);</span><br><span class="line">        <span class="keyword">return</span> value == <span class="keyword">null</span> ? <span class="keyword">null</span> : value.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;实体类中没有id字段或者id字段没有get方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-与spring整合（了解）"><a href="#1-3-与spring整合（了解）" class="headerlink" title="1.3.与spring整合（了解）"></a>1.3.与spring整合（了解）</h2><p>在这一部分我们需要利用动态代理动态的给Repository接口生成实现类，并且注入到Spring容器。</p><h3 id="1-3-1-动态代理"><a href="#1-3-1-动态代理" class="headerlink" title="1.3.1.动态代理"></a>1.3.1.动态代理</h3><p>用户使用的时候会定义接口并继承我们的接口，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">IndexData</span>, <span class="title">Long</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>而我们要动态代理来生成<code>MyRepository</code>的实现类。动态代理的API如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxy.newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) </span><br></pre></td></tr></table></figure><p>需要三个参数：</p><ul><li>ClassLoader loader：类加载器，用当前类的类加载器即可</li><li>Class&lt;?&gt;[] interfaces：要代理的接口，这里就是Repository接口</li><li>InvocationHandler h：代理处理器，执行真正的业务逻辑</li></ul><p>我们可以把刚刚的RepositoryHandler作为InvocationHandler来实现，简单改造下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryHandler</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">implements</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;, <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ....略</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// object 方法，走原生方法</span></span><br><span class="line">        <span class="keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>,args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其它走本地代理</span></span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成动态代理对象可以这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Proxy.newProxyInstance(</span><br><span class="line">    <span class="comment">// 类加载器</span></span><br><span class="line">    Repository.getClass().getClassLoader(),</span><br><span class="line">    <span class="comment">// 接口</span></span><br><span class="line">    <span class="keyword">new</span> Class[]&#123;Repository.class&#125;,</span><br><span class="line">    <span class="comment">// 代理处理器，构造函数需要一些参数</span></span><br><span class="line">    <span class="keyword">new</span> RepositoryHandler(clazz, client)</span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="1-3-2-FactoryBean"><a href="#1-3-2-FactoryBean" class="headerlink" title="1.3.2.FactoryBean"></a>1.3.2.FactoryBean</h3><p>为了方便与Spring整合，我们需要定义一个创建bean的工厂：<code>FactoryBean&lt;Repository&gt;</code>.</p><p>在<code>com.leyou.starter.elastic.repository</code>包中定义FactoryBean代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.starter.elastic.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryFactory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">// 日志记录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(RepositoryFactory.class);</span><br><span class="line"><span class="comment">// 被代理的接口，就是例子中的MyRepository</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; interfaceType;</span><br><span class="line">    <span class="comment">// elasticsearch客户端</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RepositoryFactory</span><span class="params">(Class&lt;T&gt; interfaceType, RestHighLevelClient client)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;RepositoryFactory init ...&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.interfaceType = interfaceType;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;RepositoryBean proxy init ...&quot;</span>);</span><br><span class="line">        <span class="comment">// 生成动态代理对象并返回</span></span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(interfaceType.getClassLoader(), <span class="keyword">new</span> Class[]&#123;interfaceType&#125;,</span><br><span class="line">                <span class="keyword">new</span> RepositoryHandler(client, interfaceType));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> interfaceType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-注入Bean到容器"><a href="#1-3-3-注入Bean到容器" class="headerlink" title="1.3.3.注入Bean到容器"></a>1.3.3.注入Bean到容器</h3><p>实现动态代理并注入spring分这样几步：</p><ul><li>扫描包，找到项目中的接口</li><li>过滤出所有的继承了<code>Repository</code>接口的接口，例如<code>MyRepository</code></li><li>给扫描到的接口生成 <code>BeanDefinition</code></li><li>将<code>BeanDefinition</code>注册到Spring容器</li></ul><h4 id="1）完整代码"><a href="#1）完整代码" class="headerlink" title="1）完整代码"></a>1）完整代码</h4><p>在<code>com.leyou.starter.elastic.scanner</code>中定义一个扫描器<code>RepositoryScanner</code>，完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.starter.elastic.scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.starter.elastic.repository.Repository;</span><br><span class="line"><span class="keyword">import</span> com.leyou.starter.elastic.repository.RepositoryFactory;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.GenericBeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigurationPackages;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ResourceLoaderAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.CachingMetadataReaderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReaderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ClassUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryScanner</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_RESOURCE_PATTERN = <span class="string">&quot;**/*.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MetadataReaderFactory metadataReaderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResourcePatternResolver resourcePatternResolver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RepositoryScanner</span><span class="params">(RestHighLevelClient client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry beanDefinitionRegistry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取启动类所在包</span></span><br><span class="line">        List&lt;String&gt; packages = AutoConfigurationPackages.get(applicationContext);</span><br><span class="line">        <span class="comment">// 开始扫描包，获取字节码</span></span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; beanClazzSet = scannerPackages(packages.get(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (Class beanClazz : beanClazzSet) &#123;</span><br><span class="line">            <span class="comment">// 判断是否是repository</span></span><br><span class="line">            <span class="keyword">if</span>(isNotElasticsearchRepository(beanClazz))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// BeanDefinition构建器</span></span><br><span class="line">            BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(beanClazz);</span><br><span class="line">            GenericBeanDefinition definition = (GenericBeanDefinition) builder.getRawBeanDefinition();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在这里，我们可以给该对象的属性注入对应的实例。</span></span><br><span class="line">            definition.getConstructorArgumentValues().addGenericArgumentValue(beanClazz);</span><br><span class="line">            definition.getConstructorArgumentValues().addIndexedArgumentValue(<span class="number">1</span>, client);</span><br><span class="line">            <span class="comment">// 定义Bean工程</span></span><br><span class="line">            definition.setBeanClass(RepositoryFactory.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这里采用的是byType方式注入，类似的还有byName等</span></span><br><span class="line">            definition.setAutowireMode(GenericBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class="line">            String simpleName = beanClazz.getSimpleName();</span><br><span class="line">            simpleName = simpleName.substring(<span class="number">0</span>, <span class="number">1</span>).toLowerCase() + simpleName.substring(<span class="number">1</span>);</span><br><span class="line">            beanDefinitionRegistry.registerBeanDefinition(simpleName, definition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNotElasticsearchRepository</span><span class="params">(Class beanClazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !beanClazz.isInterface() || beanClazz.getInterfaces().length &lt;= <span class="number">0</span> || beanClazz.getInterfaces()[<span class="number">0</span>] != Repository.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据包路径获取包及子包下的所有类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePackage basePackage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Set&lt;Class&lt;?&gt;&gt; Set&lt;Class&lt;?&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Class&lt;?&gt;&gt; scannerPackages(String basePackage) &#123;</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">                resolveBasePackage(basePackage) + <span class="string">&#x27;/&#x27;</span> + DEFAULT_RESOURCE_PATTERN;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Resource[] resources = <span class="keyword">this</span>.resourcePatternResolver.getResources(packageSearchPath);</span><br><span class="line">            <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">                <span class="keyword">if</span> (resource.isReadable()) &#123;</span><br><span class="line">                    MetadataReader metadataReader = <span class="keyword">this</span>.metadataReaderFactory.getMetadataReader(resource);</span><br><span class="line">                    String className = metadataReader.getClassMetadata().getClassName();</span><br><span class="line">                    Class&lt;?&gt; clazz;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        clazz = Class.forName(className);</span><br><span class="line">                        set.add(clazz);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">resolveBasePackage</span><span class="params">(String basePackage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ClassUtils.convertClassNameToResourcePath(</span><br><span class="line">                <span class="keyword">this</span>.applicationContext.getEnvironment().resolveRequiredPlaceholders(basePackage));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader);</span><br><span class="line">        <span class="keyword">this</span>.metadataReaderFactory = <span class="keyword">new</span> CachingMetadataReaderFactory(resourceLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）扫描包"><a href="#2）扫描包" class="headerlink" title="2）扫描包"></a>2）扫描包</h4><p>扫描启动类所在的包，加载所有的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据包路径获取包及子包下的所有类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePackage basePackage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Set&lt;Class   &lt;   ?&gt;&gt; Set&lt;Class&lt;?&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Class&lt;?&gt;&gt; scannerPackages(String basePackage) &#123;</span><br><span class="line">    <span class="comment">// 准备集合，装扫描到的类</span></span><br><span class="line">    Set&lt;Class&lt;?&gt;&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">// 设置要扫描的文件路径匹配模板 classpath*:/xx/xx/**/*.class</span></span><br><span class="line">    String packageSearchPath =</span><br><span class="line">        <span class="comment">// classpath*:</span></span><br><span class="line">        ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">        <span class="comment">// 启动类所在包</span></span><br><span class="line">        resolveBasePackage(basePackage) +</span><br><span class="line">        <span class="comment">// **/*.class</span></span><br><span class="line">        <span class="string">&#x27;/&#x27;</span> + DEFAULT_RESOURCE_PATTERN;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 读取符合匹配模板的所有文件</span></span><br><span class="line">        Resource[] resources = <span class="keyword">this</span>.resourcePatternResolver.getResources(packageSearchPath);</span><br><span class="line">        <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">            <span class="keyword">if</span> (resource.isReadable()) &#123;</span><br><span class="line">                MetadataReader metadataReader = <span class="keyword">this</span>.metadataReaderFactory.getMetadataReader(resource);</span><br><span class="line">                <span class="comment">// 读取类名称</span></span><br><span class="line">                String className = metadataReader.getClassMetadata().getClassName();</span><br><span class="line">                Class&lt;?&gt; clazz;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 加载为字节码</span></span><br><span class="line">                    clazz = Class.forName(className);</span><br><span class="line">                    set.add(clazz);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> set;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）定义BeanDefinition并注册"><a href="#3）定义BeanDefinition并注册" class="headerlink" title="3）定义BeanDefinition并注册"></a>3）定义BeanDefinition并注册</h4><p>要注册BeanDefinition，可以通过实现<strong>后处理器</strong><code>BeanDefinitionRegistryPostProcessor</code>来达成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个接口允许你在Spring容器中注册更多的Bean。通过BeanDefinitionRegistry中的方法来</span></span><br><span class="line"><span class="comment"> * 完成注册</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的<code>RepositoryScanner</code>实现了这个接口：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200718212814098.png" alt="image-20200718212814098"></p><p>并且实现了对应的方法：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200517211638324.png" alt="image-20200517211638324"></p><p>在这个方法中，我们过滤出哪些实现了Repository接口的class：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200517210608698.png" alt="image-20200517210608698"></p><p>isNotElasticsearchRepository方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNotElasticsearchRepository</span><span class="params">(Class beanClazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !beanClazz.isInterface() || beanClazz.getInterfaces().length &lt;= <span class="number">0</span> || beanClazz.getInterfaces()[<span class="number">0</span>] != Repository.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且通过BeanDefinitionBuilder来构建BeanDefinition:</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200517211823253.png" alt="image-20200517211823253"></p><h2 id="1-4-编写starter-了解"><a href="#1-4-编写starter-了解" class="headerlink" title="1.4.编写starter(了解)"></a>1.4.编写starter(了解)</h2><p>starter的目的是减少用户要做的配置，并且让这些配置自动被扫描生效。在当前案例中，我们需要让之前写的<code>RepositoryScanner</code>这个类可以被实例化，并注册为一个Spring的Bean。而<code>RepositoryScanner</code>在实例化的时候又需要1个东西：</p><ul><li>HighLevelRestClient对象</li></ul><p>而HighLevelRestClient对象在初始化的过程中，又需要知道elasticsearch集群的地址信息。</p><h3 id="1-4-1-读取elasticsearch地址"><a href="#1-4-1-读取elasticsearch地址" class="headerlink" title="1.4.1.读取elasticsearch地址"></a>1.4.1.读取elasticsearch地址</h3><p>我们约定用户会在yml文件中添加这样的配置来指定elasticsearch的地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">hosts:</span> <span class="string">http://192.168.206.99:9200</span></span><br></pre></td></tr></table></figure><p>那么我们就必须通过代码去读取这些配置。</p><p>我们在<code>com.leyou.starter.elastic.config</code>包中，创建一个配置类<code>ElasticSearchAutoConfiguration</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.starter.elastic.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"><span class="comment">// elasticsearch的地址，默认是本机</span></span><br><span class="line">    <span class="keyword">private</span> String hosts = <span class="string">&quot;http://127.0.0.1:9200&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 读取配置文件中的 &quot;ly.elasticsearch.hosts&quot;属性</span></span><br><span class="line">        <span class="keyword">this</span>.hosts = applicationContext.getEnvironment().getProperty(<span class="string">&quot;ly.elasticsearch.hosts&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解读：</p><ul><li><code>ApplicationContextAware</code>接口：<ul><li>spring中的Aware类型接口，Spring发现一个类实现了Aware接口，就会调用该接口的方法：<code>setApplicationContext(ApplicationContext applicationContext)</code>，并且将<code>ApplicationContext applicationContext</code>实例作为参数。这样我们就能拿到spring的容器了。</li></ul></li><li><code>applicationContext.getEnvironment().getProperty(&quot;ly.elasticsearch.hosts&quot;)</code>：读取配置环境中的属性，这里是读取”ly.elasticsearch.hosts”属性。</li></ul><h3 id="1-4-2-配置HighLevelRestClient"><a href="#1-4-2-配置HighLevelRestClient" class="headerlink" title="1.4.2.配置HighLevelRestClient"></a>1.4.2.配置HighLevelRestClient</h3><p>有了属性，接下来就可以创建HighLevelRestClient的实例了，接着在上面的配置类：<code>ElasticSearchAutoConfiguration</code>中编写代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.starter.elastic.config;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"> <span class="comment">// ...略</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                <span class="comment">// 利用Builder构建器来初始化，接收HttpHost数组</span></span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="comment">// 将地址以 , 分割得到其中的每个地址</span></span><br><span class="line">                        Stream.of(StringUtils.split(hosts, <span class="string">&quot;,&quot;</span>))</span><br><span class="line">                                <span class="comment">// 将单个地址封装为HttpHost对象</span></span><br><span class="line">                                .map(HttpHost::create)</span><br><span class="line">                                <span class="comment">// 转为HttpHost数组</span></span><br><span class="line">                                .toArray(HttpHost[]::<span class="keyword">new</span>)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">// ...略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-4-3-注册RepositoryScanner"><a href="#1-4-3-注册RepositoryScanner" class="headerlink" title="1.4.3.注册RepositoryScanner"></a>1.4.3.注册<code>RepositoryScanner</code></h3><p>最后，我们来讲RepositoryScanner创建对象，并注入到Spring中。接着在上面的配置类：<code>ElasticSearchAutoConfiguration</code>中编写代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.starter.elastic.config;</span><br><span class="line"><span class="comment">// ...略</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;Mono.class, Flux.class, RestHighLevelClient.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...略</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RepositoryScanner <span class="title">repositoryScanner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RepositoryScanner(restHighLevelClient());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，类上我们加了注解：</p><ul><li><code>@ConditionalOnClass(&#123;Mono.class, Flux.class, RestHighLevelClient.class&#125;)</code>：当这些类存在配置才生效</li></ul><h3 id="1-4-4-配置spring-factories"><a href="#1-4-4-配置spring-factories" class="headerlink" title="1.4.4.配置spring.factories"></a>1.4.4.配置spring.factories</h3><p>最后，为了让引用当前starter的项目可以读取到我们写的配置类，我们需要在classpath下的META-INF文件夹下，新增一个spring.factories文件，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">com.leyou.starter.elastic.config.ElasticSearchAutoConfiguration</span></span><br></pre></td></tr></table></figure><p>另外，为了让用户编写application.yml文件时有提示，我们可以在META-INF文件夹下再新建一个文件，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ly.elasticsearch.hosts&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;elasticsearch集群中节点信息，多个以,隔开&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span>: <span class="string">&quot;http://127.0.0.1:9200&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构如图：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200605213500742.png" alt="image-20200605213500742"> </p><h1 id="2-安装es的starter到仓库"><a href="#2-安装es的starter到仓库" class="headerlink" title="2.安装es的starter到仓库"></a>2.安装es的starter到仓库</h1><h2 id="2-1-安装到本地仓库"><a href="#2-1-安装到本地仓库" class="headerlink" title="2.1.安装到本地仓库"></a>2.1.安装到本地仓库</h2><p>最后，我们把整个项目install到本地仓库中。</p><p>如果大家没有完成，可以使用课前资料提供的<code>elasticsearch-spring-boot-starter</code>项目即可：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200605213737162.png" alt="image-20200605213737162"> </p><p>然后有两种安装方式。</p><h3 id="2-1-1-IDEA导入"><a href="#2-1-1-IDEA导入" class="headerlink" title="2.1.1.IDEA导入"></a>2.1.1.IDEA导入</h3><p>你可以使用Idea直接打开项目，查看源码：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200313121102412.png" alt="image-20200313121102412"> </p><p>然后在窗口的右侧，通过maven窗口中的install命令，安装代码到本地仓库：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200313121243671.png" alt="image-20200313121243671"> </p><h3 id="2-1-2-命令行导入"><a href="#2-1-2-命令行导入" class="headerlink" title="2.1.2.命令行导入"></a>2.1.2.命令行导入</h3><p>IDEA方式安装本地仓库并不包含源码，如果要把源码也安装到本地仓库，需要执行mvn命令。</p><p>在项目根目录下，打开控制台，输入命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="built_in">source</span>:jar install -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200313121817564.png" alt="image-20200313121817564"></p><p>打开本地仓库目录，可以看到已经安装完毕：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200313121953687.png" alt="image-20200313121953687"> </p><h2 id="2-2-功能测试"><a href="#2-2-功能测试" class="headerlink" title="2.2.功能测试"></a>2.2.功能测试</h2><p>下面，我们通过案例来演示下如何使用。</p><h3 id="2-2-1-创建demo工程"><a href="#2-2-1-创建demo工程" class="headerlink" title="2.2.1.创建demo工程"></a>2.2.1.创建demo工程</h3><p>首先，我们创建一个新的工程：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200313194238042.png" alt="image-20200313194238042"></p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200313194243560.png" alt="image-20200313194243560"></p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200313194229515.png" alt="image-20200313194229515"></p><p>在pom文件中加入自定义的starter的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义elasticsearch的starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外，SpringBoot会自定义es的版本为6.4.3，这里要强制修改为7.4.2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>es-starter-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>es-starter-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义elasticsearch的starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>cn.itcast</code>包创建启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsStarterDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EsStarterDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在application.yml中配置日志级别：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">cn.itcast:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-初始化"><a href="#2-2-2-初始化" class="headerlink" title="2.2.2.初始化"></a>2.2.2.初始化</h3><h4 id="1）配置地址"><a href="#1）配置地址" class="headerlink" title="1）配置地址"></a>1）配置地址</h4><p>接下来，我们在<code>application.yml</code>中添加elasticsearch地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">cn.itcast:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">http://192.168.206.99:9200</span></span><br></pre></td></tr></table></figure><h4 id="2）编写实体类"><a href="#2）编写实体类" class="headerlink" title="2）编写实体类"></a>2）编写实体类</h4><p>我们准备一个实体类，测试数据CRUD：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.starter.elastic.annotation.IndexID;</span><br><span class="line"><span class="keyword">import</span> com.leyou.starter.elastic.annotation.Indices;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Indexed;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Indices(&quot;goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IndexID</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意，我们的自定义starter会帮我们实现各种增删改查的功能，不过需要通过两个注解来声明索引库信息：</p><ul><li><code>@Index(&quot;goods&quot;)</code>：声明实体类相关的索引库名称，如果没指定，会以类名首字母小写后做索引库名称</li><li><code>@Id</code>：实体类中的id字段的类型，名称可以不叫id，只要加注解就可以</li></ul><h4 id="3）准备客户端Repository"><a href="#3）准备客户端Repository" class="headerlink" title="3）准备客户端Repository"></a>3）准备客户端Repository</h4><p>我们在<code>cn.itcast.demo.repository</code>包中创建一个接口：<code>GoodsRepository</code>，然后要继承工具包中的接口：Repository，将来该接口就会被动态代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.pojo.Goods;</span><br><span class="line"><span class="keyword">import</span> com.leyou.starter.elastic.repository.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Goods</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-3-创建索引库"><a href="#2-2-3-创建索引库" class="headerlink" title="2.2.3.创建索引库"></a>2.2.3.创建索引库</h3><p>先来测试创建索引库代码:</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200314203242102.png" alt="image-20200314203242102"> </p><p>说明，这里索引库名称会根据Repository泛型的实体类来判断，因此其它配置如：settings、mapping需要通过参数指定。参数的格式是json字符串，与kibana中的参数一致，我们可以把kibana中的json复制，粘贴进去即可:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;my_pinyin&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;filter&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;py&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;py&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pinyin&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;limit_first_letter_length&quot;</span>: <span class="number">16</span>,</span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;completion&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_pinyin&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_pinyin&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;price&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.pojo.Goods;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.repository.GoodsRepository;</span><br><span class="line"><span class="keyword">import</span> com.leyou.starter.elastic.dto.PageInfo;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsStarterDemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建索引库</span></span><br><span class="line">        repository.createIndex(<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;settings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;analysis\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;analyzer\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;my_pinyin\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;tokenizer\&quot;: \&quot;ik_smart\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;filter\&quot;: [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;py\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          ]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;filter\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;py\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;type\&quot;: \&quot;pinyin\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;keep_full_pinyin\&quot;: false,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;keep_joined_full_pinyin\&quot;: true,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;keep_original\&quot;: true,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;limit_first_letter_length\&quot;: 16,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;remove_duplicated_term\&quot;: true\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;name\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;completion\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;my_pinyin\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;title\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;my_pinyin\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;search_analyzer\&quot;: \&quot;ik_smart\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;long\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-4-文档的CRUD"><a href="#2-2-4-文档的CRUD" class="headerlink" title="2.2.4.文档的CRUD"></a>2.2.4.文档的CRUD</h3><p>文档操作主要是新增文档、删除文档、查询文档</p><h4 id="1）新增文档"><a href="#1）新增文档" class="headerlink" title="1）新增文档"></a>1）新增文档</h4><p>API：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200314204715647.png" alt="image-20200314204715647"> </p><p>一个是单个增、一个是批量增。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个文档的新增，id存在时会修改</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddDocument</span><span class="params">()</span></span>&#123;</span><br><span class="line">    repository.save(<span class="keyword">new</span> Goods(<span class="number">1L</span>, <span class="string">&quot;红米9&quot;</span>, <span class="string">&quot;红米9手机 数码&quot;</span>, <span class="number">1499L</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 批量增</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddBatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Goods&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Goods(<span class="number">1L</span>, <span class="string">&quot;红米9&quot;</span>, <span class="string">&quot;红米9手机 数码&quot;</span>, <span class="number">1499L</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Goods(<span class="number">2L</span>, <span class="string">&quot;三星 Galaxy A90&quot;</span>, <span class="string">&quot;三星 Galaxy A90 手机 数码 疾速5G 骁龙855&quot;</span>, <span class="number">3099L</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Goods(<span class="number">3L</span>, <span class="string">&quot;Sony WH-1000XM3&quot;</span>, <span class="string">&quot;Sony WH-1000XM3 降噪耳机 数码&quot;</span>, <span class="number">2299L</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Goods(<span class="number">4L</span>, <span class="string">&quot;松下剃须刀&quot;</span>, <span class="string">&quot;松下电动剃须刀高转速磁悬浮马达&quot;</span>, <span class="number">599L</span>));</span><br><span class="line"></span><br><span class="line">    repository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）文档删除"><a href="#2）文档删除" class="headerlink" title="2）文档删除"></a>2）文档删除</h4><p>API：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200314210057075.png" alt="image-20200314210057075"> </p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    repository.deleteById(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）根据id查询"><a href="#3）根据id查询" class="headerlink" title="3）根据id查询"></a>3）根据id查询</h4><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200314214423045.png" alt="image-20200314214423045"> </p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetById</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;开始查询。。。&quot;</span>);</span><br><span class="line">    Mono&lt;Goods&gt; mono = repository.queryById(<span class="number">2L</span>);</span><br><span class="line">    mono.subscribe(System.out::println);</span><br><span class="line">    log.info(<span class="string">&quot;查询结束。。。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开始查询</span><br><span class="line">查询代码完成</span><br><span class="line">Goods(id=2, name=三星A90, title=三星 Galaxy A90 手机 数码 疾速5G, price=2499)</span><br></pre></td></tr></table></figure><p>注意：<strong>使用subscribe订阅返回，：：：测试案例有订阅，开发中坚决不能写订阅；如果写了订阅相当于破坏了异步逻辑。</strong></p><h3 id="2-2-5-条件查询"><a href="#2-2-5-条件查询" class="headerlink" title="2.2.5.条件查询"></a>2.2.5.条件查询</h3><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 搜索条件的构建器</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">// 1.查询条件</span></span><br><span class="line">    sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;红米手机&quot;</span>));</span><br><span class="line">    <span class="comment">// 2.分页条件</span></span><br><span class="line">    sourceBuilder.from(<span class="number">0</span>);</span><br><span class="line">    sourceBuilder.size(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 3.高亮条件</span></span><br><span class="line">    sourceBuilder.highlighter(<span class="keyword">new</span> HighlightBuilder().field(<span class="string">&quot;title&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;开始查询。。。&quot;</span>);</span><br><span class="line">    Mono&lt;PageInfo&lt;Goods&gt;&gt; mono = repository.queryBySourceBuilderForPageHighlight(sourceBuilder);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mono.subscribe(info -&gt; &#123;</span><br><span class="line">        <span class="keyword">long</span> total = info.getTotal();</span><br><span class="line">        System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line">        List&lt;Goods&gt; list = info.getContent();</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;结束查询。。。&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开始查询。。。</span><br><span class="line">结束查询。。。</span><br><span class="line">total = 2</span><br><span class="line">Goods(id=1, name=红米9, title=&lt;em&gt;红&lt;/em&gt;&lt;em&gt;米&lt;/em&gt;9&lt;em&gt;手机&lt;/em&gt; 数码, price=1499)</span><br><span class="line">Goods(id=2, name=三星 Galaxy A90, title=三星 Galaxy A90 &lt;em&gt;手机&lt;/em&gt; 数码 疾速5G 骁龙855, price=3099)</span><br></pre></td></tr></table></figure><h3 id="2-2-6-自动补全"><a href="#2-2-6-自动补全" class="headerlink" title="2.2.6.自动补全"></a>2.2.6.自动补全</h3><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSuggest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;开始查询&quot;</span>);</span><br><span class="line">    Mono&lt;List&lt;String&gt;&gt; mono = repository.suggestBySingleField(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;s&quot;</span>);</span><br><span class="line">    mono.subscribe(list -&gt; list.forEach(System.out::println));</span><br><span class="line">    log.info(<span class="string">&quot;结束查询&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-06-05 23:06:00.645  INFO 35188 --- [           main] c.i.demo.EsStarterDemoApplicationTests   : 开始查询</span><br><span class="line">2020-06-05 23:06:00.806  INFO 35188 --- [           main] c.i.demo.EsStarterDemoApplicationTests   : 结束查询</span><br><span class="line">Sony WH-1000XM3</span><br><span class="line">三星 Galaxy A90</span><br><span class="line">松下剃须刀</span><br></pre></td></tr></table></figure><p>注意：</p><pre><code>搜索支持容错自动补全不支持容错</code></pre><h1 id="3-数据导入"><a href="#3-数据导入" class="headerlink" title="3.数据导入"></a>3.数据导入</h1><h2 id="3-1-前台门户"><a href="#3-1-前台门户" class="headerlink" title="3.1.前台门户"></a>3.1.前台门户</h2><p>门户系统面向的是用户，安全性很重要，而且搜索引擎对于单页应用并不友好。因此我们的门户系统不再采用与后台系统类似的SPA（单页应用）。</p><p>依然是前后端分离，不过前端的页面会使用独立的html，在每个页面中使用vue来做页面渲染。</p><h3 id="3-1-1-解压"><a href="#3-1-1-解压" class="headerlink" title="3.1.1.解压"></a>3.1.1.解压</h3><p>将课前资料中的leyou-portal解压，并把结果复制到工作空间的目录</p><p> <img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/1526460560069.png" alt="1526460560069"></p><p>然后通过idea打开，可以看到项目结构：</p><p> <img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/1526460701617.png" alt="1526460701617"></p><h3 id="3-1-2-启动"><a href="#3-1-2-启动" class="headerlink" title="3.1.2.启动"></a>3.1.2.启动</h3><p>我们把静态资源代码用nginx去部署加载，即可在每次启动项目时直接访问到。</p><p>假设你的静态资源代码位置如图：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/1563965104443.png" alt="1563965104443"> </p><p>然后修改hosts文件，添加一行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.leyou.com</span><br></pre></td></tr></table></figure><p>修改nginx配置，将<a href="http://www.leyou.com反向代理到你的目录中,不要出现中文目录：">www.leyou.com反向代理到你的目录中,不要出现中文目录：</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.leyou.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>C://develop//idea-projects/leyou-portal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新加载nginx配置：<code>nginx.exe -s reload</code></p><p>然后访问即可：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/1526462774092.png" alt="1526462774092"></p><p>首页顶部的搜索框，是用户购买商品最常见的入口，下面我们就来实现搜索功能。</p><h2 id="3-2-搭建搜索微服务"><a href="#3-2-搭建搜索微服务" class="headerlink" title="3.2.搭建搜索微服务"></a>3.2.搭建搜索微服务</h2><p>项目坐标：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200301203756276.png" alt="image-20200301203756276"></p><p>存放路径：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200301203808451.png" alt="image-20200301203808451"></p><p>pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-search<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>ly-search</code>的<code>com.leyou.search</code>包下添加启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.search&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LySearchApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LySearchApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加配置文件<code>application.yml</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">search-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">http://ly-es:9200</span></span><br></pre></td></tr></table></figure><p>在<code>ly-gateway</code>的<code>application.yml</code>文件中添加路由配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">search-service</span> <span class="comment"># 搜索服务</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://search-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/search/**</span></span><br></pre></td></tr></table></figure><h2 id="3-3-索引库数据结构"><a href="#3-3-索引库数据结构" class="headerlink" title="3.3.索引库数据结构"></a>3.3.索引库数据结构</h2><p>我们存入elasticsearch的数据包含spu、sku、spuDetail等信息，必须组织成一个实体，然后写入。</p><p>这个实体中要包含的内容，一般需要通过搜索业务的需求来分析。来看下搜索页面：</p><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200625192928829.png" alt="image-20200625192928829"></p><p>搜索的需求主要包括搜索和展示，因此其中的数据也是根据这两个需求来划分：</p><ul><li>用来参与搜索的数据<ul><li>① 标题：用户输入关键字搜索时根据商品标题分词查询<ul><li>② 分类：过滤条件<ul><li>③ 品牌：过滤条件</li><li>④ 规格参数：过滤条件，会随着商品变化而变化</li><li>⑤ 销量：排序条件</li><li>⑥ 更新时间：排序条件</li><li>⑦ 价格：排序条件</li></ul></li></ul></li></ul></li></ul><p><img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day07_elasticsearch数据导入/笔记/assets/image-20200625193240254.png" alt="image-20200625193240254"> </p><ul><li>用来参与展示的数据<pre><code>图片、价格、标题、销量、商品id</code></pre></li></ul><p>我们存入Elasticsearch的最终实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.search.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.starter.elastic.annotation.IndexID;</span><br><span class="line"><span class="keyword">import</span> com.leyou.starter.elastic.annotation.Indices;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Indices(&quot;goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品的id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@IndexID</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品标题，用于搜索</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品预览图，从sku中取出一个即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动补全的候选字段，可以包含多个值，例如分类名称、品牌名称、商品名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; suggestion;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品分类，包含id和name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品品牌，包含id和name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long brandId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 规格参数的key和value对，用于过滤</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String,Object&gt;&gt; specs;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品spu中的所有sku的价格集合（滤重）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Long&gt; prices;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * spu下的多个sku的销量之和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long sold;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特殊字段说明：</p><ul><li><p>title：商品搜索字段，包含商品的各种信息，需要分词，并且分词器为自定义的拼音分词器</p></li><li><p>suggestion：自动补全字段，包含商品名称、分类、品牌等信息，使用completion类型</p></li><li><p>prices：价格，一个SPU可能包含多个价格信息，因此这里采用set集合</p></li><li><p>sold：效率，当前spu下的多个sku的销量之和。</p></li><li><p>specs：规格参数，因为商品规格参数数量较多，而且都是键值对格式，计划的数据格式是这样的：</p><ul><li>```json<br>[<pre><code>&#123;&quot;name&quot;:&quot;CPU频率&quot;, &quot;value&quot;: &quot;2.5Hz&quot;&#125;,&#123;&quot;name&quot;:&quot;CPU品牌&quot;, &quot;value&quot;: &quot;骁龙&quot;&#125;,&#123;&quot;name&quot;:&quot;内存大小&quot;, &quot;value&quot;: &quot;6GB&quot;&#125;</code></pre>]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 这样的JSON风格，对应到Java中，就是List中嵌套Map：`List&lt;Map&lt;String,Object&gt;&gt;`</span><br><span class="line"></span><br><span class="line">  - 对象数组在写入elasticsearch时，必须使用Nested格式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对应的mapping映射：</span><br><span class="line"></span><br><span class="line">```json</span><br><span class="line">PUT /goods</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;my_pinyin&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">          &quot;filter&quot;: [</span><br><span class="line">            &quot;py&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;py&quot;: &#123;</span><br><span class="line">  &quot;type&quot;: &quot;pinyin&quot;,</span><br><span class="line">          &quot;keep_full_pinyin&quot;: true,</span><br><span class="line">          &quot;keep_joined_full_pinyin&quot;: true,</span><br><span class="line">          &quot;keep_original&quot;: true,</span><br><span class="line">          &quot;limit_first_letter_length&quot;: 16,</span><br><span class="line">          &quot;remove_duplicated_term&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;suggestion&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;completion&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;my_pinyin&quot;,</span><br><span class="line">        &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;title&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;my_pinyin&quot;,</span><br><span class="line">        &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;image&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;updateTime&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;specs&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;nested&quot;,</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;name&quot;:&#123;&quot;type&quot;: &quot;keyword&quot; &#125;,</span><br><span class="line">          &quot;value&quot;:&#123;&quot;type&quot;: &quot;keyword&quot; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-4-接入Feign客户端"><a href="#3-4-接入Feign客户端" class="headerlink" title="3.4.接入Feign客户端"></a>3.4.接入Feign客户端</h2><p>构建Goods时需要的数据都来自于商品微服务，主要包括下面的查询功能：</p><ul><li>批量查询Spu</li><li>查询Spu包含的Sku</li><li>查询Spu的规格参数键值对信息</li></ul><p>商品微服务需要对外提供这样的接口，我们在其它微服务中才可以调用。而远程调用需要通过Feign完成，因此我们要在ly-item-api项目中，编写Feign客户端。</p><h3 id="3-4-1-ly-item提供Feign客户端"><a href="#3-4-1-ly-item提供Feign客户端" class="headerlink" title="3.4.1.ly-item提供Feign客户端"></a>3.4.1.ly-item提供Feign客户端</h3><p>在于<code>ly-item-api</code>中创建包：<code>com.leyou.item.client</code>，然后创建<code>ItemClient</code>接口，引入下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.PageDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.dto.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Feign的原理: 对 http 请求的伪装</span></span><br><span class="line"><span class="comment"> * 需要知道：localhost:8081/goods/spu/page?page=1</span></span><br><span class="line"><span class="comment"> *  - 主机和端口：通过<span class="doctag">@FeignClient</span>(&quot;item-service&quot;)得到服务名称，去eureka根据服务名称拉取服务列表</span></span><br><span class="line"><span class="comment"> *  - 请求方式： <span class="doctag">@GetMapping</span></span></span><br><span class="line"><span class="comment"> *  - 请求路径：<span class="doctag">@GetMapping</span>(&quot;/goods/spu/page&quot;)</span></span><br><span class="line"><span class="comment"> *  - 请求参数：<span class="doctag">@RequestParam</span>(value = &quot;page&quot;, defaultValue = &quot;1&quot;) Integer page</span></span><br><span class="line"><span class="comment"> *  - 返回值类型：响应体的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;item-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 品牌的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 品牌对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/brand/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">BrandDTO <span class="title">queryBrandById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id的查询商品分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品分类的id集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/category/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">CategoryDTO <span class="title">queryCategoryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询spu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rows 每页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saleable 上架商品或下降商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前页商品数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/spu/page&quot;)</span></span><br><span class="line">    <span class="function">PageDTO&lt;SpuDTO&gt; <span class="title">querySpuByPage</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span> Integer page,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value = &quot;rows&quot;, defaultValue = &quot;5&quot;)</span> Integer rows,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value = &quot;saleable&quot;, required = false)</span> Boolean saleable,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value = &quot;categoryId&quot;, required = false)</span> Long categoryId,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value = &quot;brandId&quot;, required = false)</span> Long brandId,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value = &quot;id&quot;, required = false)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spuID查询spuDetail</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id spuID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SpuDetail</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/spu/detail&quot;)</span></span><br><span class="line">    <span class="function">SpuDetailDTO <span class="title">querySpuDetailById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spuID查询sku</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id spuID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> sku的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/sku/of/spu&quot;)</span></span><br><span class="line">    <span class="function">List&lt;SkuDTO&gt; <span class="title">querySkuBySpuId</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询规格参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupId 组id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searching 是否用于搜索</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 规格组集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/spec/params&quot;)</span></span><br><span class="line">    <span class="function">List&lt;SpecParamDTO&gt; <span class="title">querySpecParams</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value = &quot;categoryId&quot;, required = false)</span> Long categoryId,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value = &quot;groupId&quot;, required = false)</span> Long groupId,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value = &quot;searching&quot;, required = false)</span> Boolean searching</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spuId查询spu的所有规格参数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id spu的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searching 是否参与搜索</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 规格参数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/spec/value&quot;)</span></span><br><span class="line">    <span class="function">List&lt;SpecParamDTO&gt; <span class="title">querySpecsValues</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(&quot;id&quot;)</span> Long id,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value = &quot;searching&quot;, required = false)</span> Boolean searching)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询分类集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList id集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> category集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/category/list&quot;)</span></span><br><span class="line">    <span class="function">List&lt;CategoryDTO&gt; <span class="title">queryCategoryByIds</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; idList)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据品牌id查询分类集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList id集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> category集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/brand/list&quot;)</span></span><br><span class="line">    <span class="function">List&lt;BrandDTO&gt; <span class="title">queryBrandByIds</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; idList)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id批量查询sku</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids skuId的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> sku的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/sku/list&quot;)</span></span><br><span class="line">    <span class="function">List&lt;SkuDTO&gt; <span class="title">querySkuByIds</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">SpuDTO <span class="title">queryGoodsById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询spu，不包含别的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> spu</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/spu/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">SpuDTO <span class="title">querySpuById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询规格组及组内参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 组及组内参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/spec/list&quot;)</span></span><br><span class="line">    <span class="function">List&lt;SpecGroupDTO&gt; <span class="title">querySpecList</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-ly-search引入Feign客户端"><a href="#3-4-2-ly-search引入Feign客户端" class="headerlink" title="3.4.2.ly-search引入Feign客户端"></a>3.4.2.ly-search引入Feign客户端</h3><p>接下来，我们在ly-search中引入刚刚定义的Feign客户端</p><h4 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h4><p>在<code>ly-search</code>的<code>pom.xml</code>中引入<code>ly-item-api</code>和<code>OpenFeign</code>的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）启用FeignClient功能"><a href="#2）启用FeignClient功能" class="headerlink" title="2）启用FeignClient功能"></a>2）启用FeignClient功能</h4><p>在启动类<code>LySearchApplication</code>上添加注解，开启Feign功能：</p><p><code>@EnableFeignClients(basePackages = &quot;com.leyou.item.client&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.leyou.item.client&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.search&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LySearchApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LySearchApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）单元测试"><a href="#3）单元测试" class="headerlink" title="3）单元测试"></a>3）单元测试</h4><p>我们编写一个单元测试，看看是否好用。</p><p>在<code>ly-search</code>的<code>test</code>下的<code>com.leyou.search.client</code>包下新建一个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.search.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.client.ItemClient;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.dto.SpecParamDTO;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemClient itemClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuerySpecValues</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;SpecParamDTO&gt; list = itemClient.querySpecsValues(<span class="number">114L</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-完成数据导入"><a href="#3-5-完成数据导入" class="headerlink" title="3.5.完成数据导入"></a>3.5.完成数据导入</h2><p>接下来我们就查询数据，并完成索引库数据导入。</p><p>先来个小结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Good类对应一个索引库里面的文档，Good字段</span> <span class="string">包含了spu，spuDetail，sku，brand，category 所有字段信息。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">通过访问微服务item-service</span> <span class="string">获取到mysql中的数据，</span></span><br><span class="line"><span class="meta">然后通过定义好的</span> <span class="string">访问操作elasticSearch的 service接口代码 </span></span><br><span class="line"><span class="meta">把数据加载到elasticSearch，并进行</span> <span class="string">es的检索功能。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">通过item-service</span> <span class="string">查询到的spuDTO 转为 GoodDTO时，GoodDTO还有好几个字段为空的，</span></span><br><span class="line"><span class="attr">因此再根据spuDTO，再次封装属性到GoodDTO中，</span></span><br></pre></td></tr></table></figure><h3 id="3-5-1-创建Repository"><a href="#3-5-1-创建Repository" class="headerlink" title="3.5.1.创建Repository"></a>3.5.1.创建Repository</h3><p>首先，我们需要创建一个Repository，继承ElasticsearchRepository。</p><p>我们在<code>ly-search</code>的<code>com.leyou.search.repository</code>中定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.search.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.search.entity.Goods;</span><br><span class="line"><span class="keyword">import</span> com.leyou.starter.elastic.repository.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Goods</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-创建索引库"><a href="#3-5-2-创建索引库" class="headerlink" title="3.5.2.创建索引库"></a>3.5.2.创建索引库</h3><p>我们在<code>ly-search</code>的<code>com.leyou.search.service</code>包中创建一个<code>SearchService</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.search.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引库并设置映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createIndexAndMapping</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载数据到索引库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里定义了两个方法，一个用来创建索引库，一个用来加载数据到索引库</p><p>然后我们在<code>ly-search</code>的<code>com.leyou.search.service.impl</code>包中创建一个<code>SearchServiceImpl</code>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.search.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.search.repository.GoodsRepository;</span><br><span class="line"><span class="keyword">import</span> com.leyou.search.service.SearchService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchServiceImpl</span> <span class="keyword">implements</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GoodsRepository goodsRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ItemClient itemClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchServiceImpl</span><span class="params">(GoodsRepository goodsRepository, ItemClient itemClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.goodsRepository = goodsRepository;</span><br><span class="line">        <span class="keyword">this</span>.itemClient = itemClient;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexAndMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 删除已经存在的索引库</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            repository.deleteIndex();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;删除失败，可能索引库不存在！&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 然后创建一个新的</span></span><br><span class="line">        goodsRepository.createIndex(<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;settings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;analysis\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;analyzer\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;my_pinyin\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;tokenizer\&quot;: \&quot;ik_smart\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;filter\&quot;: [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;py\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          ]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;filter\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;py\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\t\t  \&quot;type\&quot;: \&quot;pinyin\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;keep_full_pinyin\&quot;: true,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;keep_joined_full_pinyin\&quot;: true,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;keep_original\&quot;: true,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;limit_first_letter_length\&quot;: 16,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;remove_duplicated_term\&quot;: true\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;suggestion\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;completion\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;my_pinyin\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;search_analyzer\&quot;: \&quot;ik_smart\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;title\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;my_pinyin\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;search_analyzer\&quot;: \&quot;ik_smart\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;image\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;updateTime\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;date\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;specs\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;nested\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;name\&quot;:&#123;\&quot;type\&quot;: \&quot;keyword\&quot; &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;value\&quot;:&#123;\&quot;type\&quot;: \&quot;keyword\&quot; &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-批量导入"><a href="#3-5-3-批量导入" class="headerlink" title="3.5.3.批量导入"></a>3.5.3.批量导入</h3><p>我们在<code>ly-search</code>的<code>com.leyou.search.service.impl</code>包中的<code>SearchServiceImpl</code>的<code>loadData()</code>方法中完成数据导入逻辑：</p><ul><li>批量查询Spu</li><li>将查询到的Spu的集合转为Goods对象的集合</li><li>调用repository的saveAll方法，批量存入Elasticsearch</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> page = <span class="number">1</span>, rows = <span class="number">100</span>;</span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">           log.info(<span class="string">&quot;开始导入第&#123;&#125;页数据&quot;</span>, page);</span><br><span class="line">           <span class="comment">// 分页查询已经上架的spu</span></span><br><span class="line">           PageDTO&lt;SpuDTO&gt; result = itemClient.querySpuByPage(page, rows, <span class="keyword">true</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">           List&lt;SpuDTO&gt; list = result.getItems();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 遍历Spu集合，把SpuDTO通过buildGoods方法转为Goods</span></span><br><span class="line">           List&lt;Goods&gt; goodsList = list.stream()</span><br><span class="line">                   .map(<span class="keyword">this</span>::buildGoods).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 批量写入Elasticsearch</span></span><br><span class="line">           repository.saveAll(goodsList);</span><br><span class="line">           log.info(<span class="string">&quot;导入第&#123;&#125;页数据结束。&quot;</span>, page);</span><br><span class="line">           <span class="comment">// 翻页</span></span><br><span class="line">           page++;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 获取总页数</span></span><br><span class="line">           Long totalPage = result.getTotalPage();</span><br><span class="line">           <span class="comment">// 判断是否还有spu没有查询</span></span><br><span class="line">           <span class="keyword">if</span> (page &gt; totalPage) &#123;</span><br><span class="line">               <span class="comment">// 没有则结束</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在方法执行过程中，需要调用buildGoods方法，将查询到的Spu变为Goods对象，因此我们要定义一个这样的方法。</p><h3 id="3-5-4-构建Goods"><a href="#3-5-4-构建Goods" class="headerlink" title="3.5.4.构建Goods"></a>3.5.4.构建Goods</h3><p>我们要定义一个方法，将查询到的Spu变为Goods对象。</p><p>我们在<code>ly-search</code>的<code>com.leyou.search.service.impl</code>包中的<code>SearchServiceImpl</code>添加一个<code>buildGoods()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Goods <span class="title">buildGoods</span><span class="params">(SpuDTO spu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.自动补全的提示字段</span></span><br><span class="line">        List&lt;String&gt; suggestion = <span class="keyword">new</span> ArrayList&lt;&gt;(</span><br><span class="line">                Arrays.asList(StringUtils.split(spu.getCategoryName(), <span class="string">&quot;/&quot;</span>)));</span><br><span class="line">        suggestion.add(spu.getName());</span><br><span class="line">        suggestion.add(spu.getBrandName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.sku的价格集合</span></span><br><span class="line">        <span class="comment">// 2.1.查询sku集合</span></span><br><span class="line">        List&lt;SkuDTO&gt; skuList = spu.getSkus();</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(skuList)) &#123;</span><br><span class="line">            <span class="comment">// 没有sku，我们去查询</span></span><br><span class="line">            skuList = itemClient.querySkuBySpuId(spu.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.2.获取价格集合</span></span><br><span class="line">        Set&lt;Long&gt; prices = skuList.stream().map(SkuDTO::getPrice).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.商品销量</span></span><br><span class="line">        <span class="keyword">long</span> sold = skuList.stream().mapToLong(SkuDTO::getSold).sum();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.sku的某个图片</span></span><br><span class="line">        String image = StringUtils.substringBefore(skuList.get(<span class="number">0</span>).getImages(), <span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.规格参数</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; specs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 5.1.查询规格参数name和value键值对，只查询参与搜索的</span></span><br><span class="line">        List&lt;SpecParamDTO&gt; params = itemClient.querySpecsValues(spu.getId(), <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 5.2.封装</span></span><br><span class="line">        <span class="keyword">for</span> (SpecParamDTO param : params) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">            map.put(<span class="string">&quot;name&quot;</span>, param.getName());</span><br><span class="line">            map.put(<span class="string">&quot;value&quot;</span>, chooseSegment(param));</span><br><span class="line">            specs.add(map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Goods对象，并封装数据</span></span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line">        goods.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">// 自动补全的提示字段</span></span><br><span class="line">        goods.setSuggestion(suggestion);</span><br><span class="line">        <span class="comment">// 规格参数</span></span><br><span class="line">        goods.setSpecs(specs);</span><br><span class="line">        <span class="comment">// 商品销量</span></span><br><span class="line">        goods.setSold(sold);</span><br><span class="line">        <span class="comment">// 商品标题</span></span><br><span class="line">        goods.setTitle(spu.getTitle() + StringUtils.join(suggestion, <span class="string">&quot; &quot;</span>));</span><br><span class="line">        <span class="comment">// sku的价格集合</span></span><br><span class="line">        goods.setPrices(prices);</span><br><span class="line">        <span class="comment">// sku的某个图片</span></span><br><span class="line">        goods.setImage(image);</span><br><span class="line">        goods.setCategoryId(spu.getCid3());</span><br><span class="line">        goods.setBrandId(spu.getBrandId());</span><br><span class="line">        goods.setId(spu.getId());</span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中有一部分处理数字value的代码，被封装到了另两个方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">chooseSegment</span><span class="params">(SpecParamDTO p)</span> </span>&#123;</span><br><span class="line">        Object value = p.getValue();</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span> || StringUtils.isBlank(value.toString())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;其它&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!p.getNumeric() || StringUtils.isBlank(p.getSegments()) || value <span class="keyword">instanceof</span> Collection) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> val = parseDouble(value.toString());</span><br><span class="line">        String result = <span class="string">&quot;其它&quot;</span>;</span><br><span class="line">        <span class="comment">// 保存数值段</span></span><br><span class="line">        <span class="keyword">for</span> (String segment : p.getSegments().split(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">            String[] segs = segment.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取数值范围</span></span><br><span class="line">            <span class="keyword">double</span> begin = parseDouble(segs[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">double</span> end = Double.MAX_VALUE;</span><br><span class="line">            <span class="keyword">if</span> (segs.length == <span class="number">2</span>) &#123;</span><br><span class="line">                end = parseDouble(segs[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断是否在范围内</span></span><br><span class="line">            <span class="keyword">if</span> (val &gt;= begin &amp;&amp; val &lt; end) &#123;</span><br><span class="line">                <span class="keyword">if</span> (segs.length == <span class="number">1</span>) &#123;</span><br><span class="line">                    result = segs[<span class="number">0</span>] + p.getUnit() + <span class="string">&quot;以上&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (begin == <span class="number">0</span>) &#123;</span><br><span class="line">                    result = segs[<span class="number">1</span>] + p.getUnit() + <span class="string">&quot;以下&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result = segment + p.getUnit();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">parseDouble</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>（可选的优化）另外，我们写入索引库的数据，将来参与展示的字段只包含：</p><ul><li>id</li><li>title</li><li>image</li><li>price</li><li>sold</li></ul><p>其它字段不包含，也就不需要存储的。</p><p>如果要控制存储到索引库的数据，可以通过在创建mapping时，限制<code>_source</code>来实现</p><h3 id="3-5-5-定义controller"><a href="#3-5-5-定义controller" class="headerlink" title="3.5.5.定义controller"></a>3.5.5.定义controller</h3><p>为了方便后期同学们导入数据，我们定义一个controller，调用刚才的功能。</p><p>我们在<code>ly-search</code>的<code>com.leyou.search.web</code>包中编写<code>SearchController</code>功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.search.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.search.service.SearchService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchController</span><span class="params">(SearchService searchService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.searchService = searchService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化索引库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;initialization&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        searchService.createIndexAndMapping();</span><br><span class="line">        searchService.loadData();</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;导入成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="乐优商城项目" scheme="http://example.com/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch进阶和WebFlux</title>
    <link href="http://example.com/2022/06/23/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-ElasticSearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/"/>
    <id>http://example.com/2022/06/23/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-ElasticSearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/</id>
    <published>2022-06-23T07:18:06.000Z</published>
    <updated>2022-06-26T07:44:06.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch进阶和WebFlux"><a href="#Elasticsearch进阶和WebFlux" class="headerlink" title="Elasticsearch进阶和WebFlux"></a>Elasticsearch进阶和WebFlux</h1><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>学会拼音分词器的使用</li><li>学会suggest查询</li><li>知道nested结构的特点</li><li>学会elasticsearch的异步API</li><li>能搭建WebFlux项目</li></ul><h1 id="1-Elasticsearch进阶"><a href="#1-Elasticsearch进阶" class="headerlink" title="1.Elasticsearch进阶"></a>1.Elasticsearch进阶</h1><p>虽然之前已经学习了ElasticSearch的使用，但是依然有一些elasticsearch的高级搜索功能等待大家探索。我们今天就会挑选几个比较常用的来学习。</p><p>详细文档我们可以参考官方文档：</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/index.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.x/index.html</a></p><h2 id="1-0-安装Elasticsearch"><a href="#1-0-安装Elasticsearch" class="headerlink" title="1.0.安装Elasticsearch"></a>1.0.安装Elasticsearch</h2><p>建议所有同学使用我提供的镜像从新安装elasticsearch，我的版本是7.4.2</p><p>参考课前资料文档：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200419165205131.png" alt="image-20200419165205131"> </p><h2 id="1-1-特殊数据类型"><a href="#1-1-特殊数据类型" class="headerlink" title="1.1.特殊数据类型"></a>1.1.特殊数据类型</h2><p>在之前的学习中，我们了解了Elasticsearch的基本数据类型，今天我们来看看ES中提供的特殊数据类型：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200217202847313.png" alt="image-20200217202847313"> </p><h3 id="1-1-1-Object类型"><a href="#1-1-1-Object类型" class="headerlink" title="1.1.1.Object类型"></a>1.1.1.Object类型</h3><p>相关文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/object.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/object.html</a></p><p>当我们向ES中存入JSON数据时，大多数情况下，数据都是简单JSON类型，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_doc/<span class="number">1</span></span><br><span class="line">&#123; </span><br><span class="line">  <span class="attr">&quot;region&quot;</span>: <span class="string">&quot;US&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;John Smith&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，写入ES的文档就包含3个字段，分别是：region、age、name</p><p>但是，如果我们存入ES的数据比较复杂，包含对象，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_doc/<span class="number">1</span></span><br><span class="line">&#123; </span><br><span class="line">  <span class="attr">&quot;region&quot;</span>: <span class="string">&quot;US&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: &#123; </span><br><span class="line">     <span class="attr">&quot;first&quot;</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;last&quot;</span>:  <span class="string">&quot;Smith&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，写入ES的文档包含3个字段：</p><ul><li>region：普通字符串</li><li>age：普通数字</li><li>name：是一个内部嵌套的对象，包含两个属性：<ul><li>first：普通字符串</li><li>last：普通字符串</li></ul></li></ul><p>因为Lucene是不支持对象数据的，因此ES会将数据扁平化处理，变成这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">&quot;region&quot;</span>: <span class="string">&quot;US&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">&quot;name.first&quot;</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name.last&quot;</span>:  <span class="string">&quot;Smith&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，文档的映射类型（mapping）大概是这样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;properties&quot;</span>: &#123; </span><br><span class="line">            <span class="attr">&quot;region&quot;</span>: &#123;<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span>&#125;,</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>:  &#123;<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span> &#125;,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123; </span><br><span class="line">                <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;first&quot;</span>: &#123; <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span> &#125;,</span><br><span class="line">                    <span class="attr">&quot;last&quot;</span>:  &#123; <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，如果我们要根据名称做match搜索，我们需要这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name.first&quot;</span>: <span class="string">&quot;John&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-nested类型"><a href="#1-1-2-nested类型" class="headerlink" title="1.1.2.nested类型"></a>1.1.2.nested类型</h3><p>Nested类型其实是Object类型的一种特殊版本，它允许包含一组属性相似Object的数组中的每个对象，可以被独立的搜索，互不影响。</p><p>文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/nested.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/nested.html</a></p><h4 id="1）Object数组的问题"><a href="#1）Object数组的问题" class="headerlink" title="1）Object数组的问题"></a>1）Object数组的问题</h4><p>我们先来看一个文档数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;group&quot;</span> : <span class="string">&quot;fans&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;user&quot;</span> : [ </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;first&quot;</span> : <span class="string">&quot;张&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;last&quot;</span> :  <span class="string">&quot;学有&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;first&quot;</span> : <span class="string">&quot;刘&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;last&quot;</span> :  <span class="string">&quot;德华&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为user是一个数组，而数组中是Object类型，因此此时Use会被认定为Object类型，然后会被展开，处理成这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;group&quot;</span> :        <span class="string">&quot;fans&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;user.first&quot;</span> : [ <span class="string">&quot;张&quot;</span>, <span class="string">&quot;刘&quot;</span> ],</span><br><span class="line">  <span class="attr">&quot;user.last&quot;</span> :  [ <span class="string">&quot;学有&quot;</span>, <span class="string">&quot;德华&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，user.first和user.last被处理成两个数组类型的字段，因此名字<code>Alice</code>和Smith之间的关联就丢失了。</p><p>当你搜索<code>张德华</code>时，也能搜索到数据，这显然是不对的。</p><p>我们试试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;user.first&quot;</span>: <span class="string">&quot;张&quot;</span> &#125;&#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;user.last&quot;</span>:  <span class="string">&quot;德华&quot;</span> &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个搜索时要搜first名称为张，last名称为德华的人，是不存在的，但是结果却搜索到了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">22</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.8630463</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;my_index&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.8630463</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;group&quot;</span> : <span class="string">&quot;fans&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;user&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;first&quot;</span> : <span class="string">&quot;张&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;last&quot;</span> : <span class="string">&quot;学有&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;first&quot;</span> : <span class="string">&quot;刘&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;last&quot;</span> : <span class="string">&quot;德华&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2）Nested解决Object数组问题"><a href="#2）Nested解决Object数组问题" class="headerlink" title="2）Nested解决Object数组问题"></a>2）Nested解决Object数组问题</h4><p>如果你想要使用对象数组格式，同时又想保持数组中每个Object的独立性。那么你应该使用nested类型。nested类型会把数组中的每个object用隐式的独立Document来保存，因此可以互不干扰的查询，但必须用nested方式查询。</p><p>首先，我们设置一个nested类型的字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;user&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;nested&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;first&quot;</span>:&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span>&#125;,</span><br><span class="line">          <span class="attr">&quot;last&quot;</span>:&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，再次填充数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;group&quot;</span> : <span class="string">&quot;fans&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;user&quot;</span> : [ </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;first&quot;</span> : <span class="string">&quot;张&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;last&quot;</span> :  <span class="string">&quot;学有&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;first&quot;</span> : <span class="string">&quot;刘&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;last&quot;</span> :  <span class="string">&quot;德华&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索的时候，必须使用nested搜索，并制定对象的名称：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;nested&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;user.first&quot;</span>: <span class="string">&quot;刘&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;user.last&quot;</span>: <span class="string">&quot;德华&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法说明：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200217213003706.png" alt="image-20200217213003706"> </p><p>这次就搜索不到数据了，因为没有名为<code>Alice Smith</code>的人。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-自动补全和提示"><a href="#1-2-自动补全和提示" class="headerlink" title="1.2.自动补全和提示"></a>1.2.自动补全和提示</h2><p>ES的推荐功能（Suggester）包含三种不同方式，不过用的最多的，还是Completion模式，实现自动补全和基于上下文的提示功能。</p><p>相关文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/search-suggesters.html#completion-suggester">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/search-suggesters.html#completion-suggester</a></p><h3 id="1-2-1-准备数据"><a href="#1-2-1-准备数据" class="headerlink" title="1.2.1.准备数据"></a>1.2.1.准备数据</h3><p>理想中，自动补全功能需要在用户键入一个字符时，尽可能快速的给用户返回提示信息。因此自动补全很注重查询的速度。为了提高suggester的速度，相关的数据必须在内存中缓存起来，数据的类型也不再是普通类型，而是completion类型。</p><p>首先我们要定义一个索引库，并设置用于自动补全的字段为completion类型。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT articles</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;suggestion&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;completion&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个名为<code>articles</code>的索引库，并且有一个字段为<code>suggestion</code>，类型是<code>completion</code></p><p>然后批量插入一些数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST articles/_bulk</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span> : &#123; &#125; &#125;</span><br><span class="line">&#123; <span class="attr">&quot;suggestion&quot;</span>: [<span class="string">&quot;lucene&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;very&quot;</span>, <span class="string">&quot;cool&quot;</span>]&#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span> : &#123; &#125; &#125;</span><br><span class="line">&#123; <span class="attr">&quot;suggestion&quot;</span>: [<span class="string">&quot;Elasticsearch&quot;</span>, <span class="string">&quot;builds&quot;</span>, <span class="string">&quot;on&quot;</span>, <span class="string">&quot;lucene&quot;</span>]&#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span> : &#123; &#125; &#125;</span><br><span class="line">&#123; <span class="attr">&quot;suggestion&quot;</span>: [<span class="string">&quot;Elasticsearch&quot;</span>, <span class="string">&quot;rocks&quot;</span>]&#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span> : &#123; &#125; &#125;</span><br><span class="line">&#123; <span class="attr">&quot;suggestion&quot;</span>: [<span class="string">&quot;elastic&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;the&quot;</span>, <span class="string">&quot;company&quot;</span>, <span class="string">&quot;behind&quot;</span>, <span class="string">&quot;ELK&quot;</span>]&#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span> : &#123; &#125; &#125;</span><br><span class="line">&#123; <span class="attr">&quot;suggestion&quot;</span>: [<span class="string">&quot;Elk&quot;</span>, <span class="string">&quot;stack&quot;</span>, <span class="string">&quot;rocks&quot;</span>]&#125;</span><br></pre></td></tr></table></figure><p>在一个文档中，completion类型的字段，其值可以有多个，它的每一个值都可以成为自动补全的推荐结果。</p><h3 id="1-2-2-查询推荐值"><a href="#1-2-2-查询推荐值" class="headerlink" title="1.2.2.查询推荐值"></a>1.2.2.查询推荐值</h3><p>如果我们要为用户输入的字符补全完整字符，可以向ES发起请求，指定要在哪个completion类型的字段上进行查询，示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST articles/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;suggest&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;article-suggester&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;el &quot;</span>,</span><br><span class="line">      <span class="attr">&quot;completion&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;suggestion&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>suggest：代表接下来的查询是一个suggest类型的查询<ul><li>article-suggester：这次查询的名称，自定义<ul><li>prefix：用来补全的词语前缀，本例中搜索以 el开头的内容</li><li>completion：代表是completion类型的suggest，其它类型还有：Term、Phrase<ul><li>field：要查询的字段</li></ul></li></ul></li></ul></li></ul><h3 id="1-2-3-推荐结果"><a href="#1-2-3-推荐结果" class="headerlink" title="1.2.3.推荐结果"></a>1.2.3.推荐结果</h3><p>上面的查询返回结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;suggest&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;article-suggester&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;text&quot;</span> : <span class="string">&quot;el&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;length&quot;</span> : <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;options&quot;</span> : [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;text&quot;</span> : <span class="string">&quot;Elasticsearch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;articles&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;ZvxiWHABGZL7VTV2dPvC&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">            <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;suggestion&quot;</span> : [</span><br><span class="line">                <span class="string">&quot;Elasticsearch&quot;</span>,</span><br><span class="line">                <span class="string">&quot;builds&quot;</span>,</span><br><span class="line">                <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                <span class="string">&quot;lucene&quot;</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;text&quot;</span> : <span class="string">&quot;Elasticsearch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;articles&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;Z_xiWHABGZL7VTV2dPvC&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">            <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;suggestion&quot;</span> : [</span><br><span class="line">                <span class="string">&quot;Elasticsearch&quot;</span>,</span><br><span class="line">                <span class="string">&quot;rocks&quot;</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;text&quot;</span> : <span class="string">&quot;Elk&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;articles&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;afxiWHABGZL7VTV2dPvC&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">            <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;suggestion&quot;</span> : [</span><br><span class="line">                <span class="string">&quot;Elk&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stack&quot;</span>,</span><br><span class="line">                <span class="string">&quot;rocks&quot;</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;text&quot;</span> : <span class="string">&quot;elastic&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;articles&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;aPxiWHABGZL7VTV2dPvC&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">            <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;suggestion&quot;</span> : [</span><br><span class="line">                <span class="string">&quot;elastic&quot;</span>,</span><br><span class="line">                <span class="string">&quot;is&quot;</span>,</span><br><span class="line">                <span class="string">&quot;the&quot;</span>,</span><br><span class="line">                <span class="string">&quot;company&quot;</span>,</span><br><span class="line">                <span class="string">&quot;behind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ELK&quot;</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回结果中的<code>options</code>数组就是推荐的结果，其中<code>text</code>是推荐的文本，<code>_source</code>是文档原始数据。</p><p>本例中有四条推荐结果：</p><ul><li><code>Elasticsearch</code>，文档的内容是：”Elasticsearch”,  “builds”, “on”,  “lucene”</li><li><code>Elasticsearch</code>，文档的内容是：”Elasticsearch”, “rocks”</li><li><code>ELK</code>，文档内容是：”Elk”,  “stack”,  “rocks”</li><li><code>elastic</code>，文档内容是：”elastic is the company behind ELK stack”</li></ul><h2 id="1-3-拼音搜索"><a href="#1-3-拼音搜索" class="headerlink" title="1.3.拼音搜索"></a>1.3.拼音搜索</h2><p>拼音搜索的关键是汉字与拼音的转换，只要找到这样的elasticsearch插件就可以了。在GitHub上恰好有这样的拼音插件。地址：<a href="https://github.com/medcl/elasticsearch-analysis-pinyin">https://github.com/medcl/elasticsearch-analysis-pinyin</a></p><h3 id="1-3-1-安装拼音插件"><a href="#1-3-1-安装拼音插件" class="headerlink" title="1.3.1.安装拼音插件"></a>1.3.1.安装拼音插件</h3><p>首先下载ES版本对应的拼音插件。在GitHub页面中找到releases：<a href="https://github.com/medcl/elasticsearch-analysis-pinyin/releases">https://github.com/medcl/elasticsearch-analysis-pinyin/releases</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200220211906563.png" alt="image-20200220211906563"></p><p>当然，课前资料提供的也有：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200220213042209.png" alt="image-20200220213042209"> </p><p>与安装IK分词器一样，把这个拷贝到<code>$&#123;ES_HOME&#125;/plugins/</code>即可。</p><p><code>$&#123;ES_HOME&#125;</code>：elasticsearch的安装目录，如果你使用了Docker安装，请找到你的<code>plugins</code>挂载的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/docker/volumes/es-plugins/_data</span><br></pre></td></tr></table></figure><p>我的目录如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200220213228398.png" alt="image-20200220213228398"> </p><p>然后重启你的elasticsearch即可。</p><h3 id="1-3-2-测试"><a href="#1-3-2-测试" class="headerlink" title="1.3.2.测试"></a>1.3.2.测试</h3><p>在kibana中，输入命令测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: [<span class="string">&quot;张学友&quot;</span>, <span class="string">&quot;刘德华&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;pinyin&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;zhang&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;word&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;zxy&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;word&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;xue&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;word&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;you&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;word&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;liu&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;word&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;ldh&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;word&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;de&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;word&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;hua&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;word&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-组合分词器"><a href="#1-3-3-组合分词器" class="headerlink" title="1.3.3.组合分词器"></a>1.3.3.组合分词器</h3><p>在分词处理时，会用到analyzer，我们以前称它为分词器。但其实它叫分析器，一般包含两部分：</p><ul><li>Tokenizer：分词器，对文本内容分词，得到词条Term</li><li>filter：过滤器，对分好的词条做进一步处理，例如拼音转换、同义词转换等</li></ul><p>我们可以把各种下载的分词插件组合，作为tokenizer或者filter，来完成自定义分词效果。</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">PUT /goods</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;my_pinyin&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;filter&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;py&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;py&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pinyin&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;limit_first_letter_length&quot;</span>: <span class="number">16</span>,</span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;completion&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_pinyin&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_pinyin&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;price&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200220214815975.png" alt="image-20200220214815975"> </p><h3 id="1-3-4-测试自定义分词器"><a href="#1-3-4-测试自定义分词器" class="headerlink" title="1.3.4.测试自定义分词器"></a>1.3.4.测试自定义分词器</h3><p>我们在kibana中运行测试，看看分词效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /goods/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;你好,华为&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_pinyin&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;你好&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;nihao&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;nh&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;华为&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;huawei&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;hw&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-5-测试拼音补全"><a href="#1-3-5-测试拼音补全" class="headerlink" title="1.3.5.测试拼音补全"></a>1.3.5.测试拼音补全</h3><p>一旦有了拼音分词器，尽管用户使用拼音，我们也能完成自动补全了。</p><p>先插入一部分数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /goods/_bulk</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_id&quot;</span>:<span class="number">1</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;手机&quot;</span>,<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;小米手机&quot;</span>&#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_id&quot;</span>:<span class="number">2</span> &#125; &#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;空调&quot;</span>,<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;小米空调&quot;</span>&#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_id&quot;</span>:<span class="number">3</span> &#125; &#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;sony&quot;</span>,<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;sony播放器&quot;</span>&#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span> : &#123;<span class="attr">&quot;_id&quot;</span>:<span class="number">4</span> &#125; &#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;松下&quot;</span>,<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;松下电视&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>然后来一个自动补全的查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /goods/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;suggest&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name_suggest&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;s&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;completion&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;name&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，我们输入的关键字是字母：<code>s</code></p><p>看结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;suggest&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;name_suggest&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;text&quot;</span> : <span class="string">&quot;s&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;length&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;options&quot;</span> : [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;text&quot;</span> : <span class="string">&quot;sony&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;3&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">            <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;id&quot;</span> : <span class="number">3</span>,</span><br><span class="line">              <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;sony&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;sony播放器&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;text&quot;</span> : <span class="string">&quot;手机&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">            <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;id&quot;</span> : <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;手机&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米手机&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;text&quot;</span> : <span class="string">&quot;松下&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;4&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">            <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;id&quot;</span> : <span class="number">4</span>,</span><br><span class="line">              <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;松下&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;松下电视&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回的提示包括：<code>sony</code>、<code>松下</code>、<code>手机</code>，都是以<code>s</code>开头，是不是很酷炫呢！</p><h1 id="2-RestAPI"><a href="#2-RestAPI" class="headerlink" title="2.RestAPI"></a>2.RestAPI</h1><p>ES提供的Java客户端包括两种：</p><p>在elasticsearch官网中提供了各种语言的客户端：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p><p>而Java的客户端就有两个：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200104164045946.png" alt="image-20200104164045946"> </p><p>不过Java API这个客户端（Transport Client）已经在7.0以后过期了，而且在8.0版本中将直接废弃。所以我们会学习Java REST Client：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200104164428873.png" alt="image-20200104164428873"> </p><p>然后再选择High Level REST Client这个。</p><h2 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1.初始化"></a>2.1.初始化</h2><h3 id="2-1-1-引入依赖"><a href="#2-1-1-引入依赖" class="headerlink" title="2.1.1.引入依赖"></a>2.1.1.引入依赖</h3><p>创建一个新的maven工程，并在pom 文件中引入下列依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Junit单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--elastic客户端--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JSON工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--common工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并在resources中新建文件：log4j2.xml，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-创建ES的客户端"><a href="#2-1-2-创建ES的客户端" class="headerlink" title="2.1.2.创建ES的客户端"></a>2.1.2.创建ES的客户端</h3><p>在官网上可以看到连接ES的初始化教程：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-getting-started-initialization.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-getting-started-initialization.html</a></p><p>首先需要与ES建立连接，ES提供了一个客户端RestHighLevelClient。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">&quot;192.168.206.99&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>ES中的所有操作都是通过RestHighLevelClient来完成的：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200105103815463.png" alt="image-20200105103815463"> </p><p>为了后面测试方便，我们写到一个单元测试中，并且通过<code>@Before</code>注解来初始化客户端连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">&quot;192.168.206.99&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭客户端连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-准备实体类"><a href="#2-1-3-准备实体类" class="headerlink" title="2.1.3.准备实体类"></a>2.1.3.准备实体类</h3><p>索引库的CRUD需要用一个实体类来封装数据，我们准备一个实体类Goods：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-创建库和映射"><a href="#2-2-创建库和映射" class="headerlink" title="2.2.创建库和映射"></a>2.2.创建库和映射</h2><p>开发中，往往库和映射的操作一起完成，官网详细文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/_index_apis.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/_index_apis.html</a></p><p>这里我们主要实现库和映射的创建。查询、删除等功能大家可参考文档自己实现。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200105093038617.png" alt="image-20200105093038617"> </p><h3 id="2-2-1-思路分析"><a href="#2-2-1-思路分析" class="headerlink" title="2.2.1.思路分析"></a>2.2.1.思路分析</h3><p>按照官网给出的步骤，创建索引包括下面几个步骤：</p><ul><li>1）创建CreateIndexRequest对象，并指定索引库名称</li><li>2）指定settings配置</li><li>3）指定mapping配置</li><li>4）发起请求，得到响应</li></ul><p>其实仔细分析，与我们在Kibana中的Rest风格API完全一致：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /heima</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-设计映射规则"><a href="#2-2-2-设计映射规则" class="headerlink" title="2.2.2.设计映射规则"></a>2.2.2.设计映射规则</h3><p>Java代码中设置mapping，依然与REST中一致，需要JSON风格的映射规则。因此我们先在kibana中给Goods实体类定义好映射规则。</p><p>Goods包括下面的字段：</p><ul><li>Id：主键，在ES中是唯一标示</li><li>name：商品的名称，字符串类型，不需要分词，将来可以用作自动补全功能</li><li>title：商品标题，字符串类型，可以分词</li><li>price：价格，数值类型</li></ul><p>映射如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">PUT /goods</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;my_pinyin&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;filter&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;py&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;py&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pinyin&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;limit_first_letter_length&quot;</span>: <span class="number">16</span>,</span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;completion&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_pinyin&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_pinyin&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;price&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-代码实现"><a href="#2-2-3-代码实现" class="headerlink" title="2.2.3.代码实现"></a>2.2.3.代码实现</h3><p>我们在上面新建的ElasticDemo类中新建单元测试，完成代码，思路就是之前分析的4步骤：</p><ul><li>1）创建CreateIndexRequest对象，并指定索引库名称</li><li>2）指定settings配置</li><li>3）指定mapping配置</li><li>4）发起请求，得到响应</li></ul><p>运行之前，<strong>不要忘了删除以前的Goods索引库</strong>！！</p><p>运行之前，<strong>不要忘了删除以前的Goods索引库</strong>！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建CreateIndexRequest对象，并指定索引库名称</span></span><br><span class="line">    CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备参加索引的JSON请求体，包括settings和mapping</span></span><br><span class="line">    request.source(<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;settings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;analysis\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;analyzer\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;my_pinyin\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;tokenizer\&quot;: \&quot;ik_smart\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;filter\&quot;: [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;py\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          ]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;filter\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;py\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;type\&quot;: \&quot;pinyin\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;keep_full_pinyin\&quot;: false,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;keep_joined_full_pinyin\&quot;: true,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;keep_original\&quot;: true,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;limit_first_letter_length\&quot;: 16,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          \&quot;remove_duplicated_term\&quot;: true\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;name\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;completion\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;my_pinyin\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;search_analyzer\&quot;: \&quot;ik_smart\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;title\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;my_pinyin\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;search_analyzer\&quot;: \&quot;ik_smart\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;long\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>, XContentType.JSON);</span><br><span class="line">    <span class="comment">// 3.发起请求，得到响应</span></span><br><span class="line">    CreateIndexResponse response = client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;response = &quot;</span> + response.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = true</span><br></pre></td></tr></table></figure><h2 id="2-3-导入文档数据"><a href="#2-3-导入文档数据" class="headerlink" title="2.3.导入文档数据"></a>2.3.导入文档数据</h2><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBulkDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.准备文档数据</span></span><br><span class="line">    List&lt;Goods&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Goods(<span class="number">1L</span>, <span class="string">&quot;红米9&quot;</span>, <span class="string">&quot;红米9手机 数码&quot;</span>, <span class="number">1499L</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Goods(<span class="number">2L</span>, <span class="string">&quot;三星 Galaxy A90&quot;</span>, <span class="string">&quot;三星 Galaxy A90 手机 数码 疾速5G 骁龙855&quot;</span>, <span class="number">3099L</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Goods(<span class="number">3L</span>, <span class="string">&quot;Sony WH-1000XM3&quot;</span>, <span class="string">&quot;Sony WH-1000XM3 降噪耳机 数码&quot;</span>, <span class="number">2299L</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Goods(<span class="number">4L</span>, <span class="string">&quot;松下剃须刀&quot;</span>, <span class="string">&quot;松下电动剃须刀高转速磁悬浮马达&quot;</span>, <span class="number">599L</span>));</span><br><span class="line">    <span class="comment">// 2.创建BulkRequest对象</span></span><br><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    <span class="comment">// 3.创建多个IndexRequest对象，并添加到BulkRequest中</span></span><br><span class="line">    <span class="keyword">for</span> (Goods goods : list) &#123;</span><br><span class="line">        bulkRequest.add(<span class="keyword">new</span> IndexRequest(<span class="string">&quot;goods&quot;</span>)</span><br><span class="line">                        .id(goods.getId().toString())</span><br><span class="line">                        .source(JSON.toJSONString(goods), XContentType.JSON)</span><br><span class="line">                       );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.发起请求</span></span><br><span class="line">    BulkResponse bulkResponse = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;status: &quot;</span> + bulkResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-基本查询"><a href="#2-4-基本查询" class="headerlink" title="2.4.基本查询"></a>2.4.基本查询</h2><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBasicSearchWithSortAndPage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建SearchSourceBuilder对象</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">// 1.0.source过滤</span></span><br><span class="line">    sourceBuilder.fetchSource(<span class="keyword">new</span> String[<span class="number">0</span>], <span class="keyword">new</span> String[]&#123;<span class="string">&quot;name&quot;</span>&#125;);</span><br><span class="line">    <span class="comment">// 1.1.添加查询条件QueryBuilders，这里选择布尔查询，查询标题包含“数码”，并且价格小于3000</span></span><br><span class="line">    <span class="comment">// 1.1.1.定义布尔查询</span></span><br><span class="line">    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">// 1.1.2.添加match查询</span></span><br><span class="line">    boolQueryBuilder.must(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;数码&quot;</span>));</span><br><span class="line">    <span class="comment">// 1.1.3.添加价格过滤</span></span><br><span class="line">    boolQueryBuilder.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).lte(<span class="number">3000</span>));</span><br><span class="line">    sourceBuilder.query(boolQueryBuilder);</span><br><span class="line">    <span class="comment">// 1.2.添加排序、分页等其它条件</span></span><br><span class="line">    sourceBuilder.sort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC);</span><br><span class="line">    <span class="comment">// 1.3.添加分页条件</span></span><br><span class="line">    <span class="keyword">int</span> page = <span class="number">1</span>, size = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> from = (page - <span class="number">1</span>) * size;</span><br><span class="line">    sourceBuilder.from(from);</span><br><span class="line">    sourceBuilder.size(size);</span><br><span class="line">    <span class="comment">// 1.4.高亮</span></span><br><span class="line">    sourceBuilder.highlighter(<span class="keyword">new</span> HighlightBuilder().field(<span class="string">&quot;title&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.创建SearchRequest对象，并制定索引库名称</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.1.添加SearchSourceBuilder对象到SearchRequest对象中</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.发起请求，得到结果</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.解析结果</span></span><br><span class="line">    SearchHits searchHits = response.getHits();</span><br><span class="line">    <span class="comment">//  4.1.获取总条数</span></span><br><span class="line">    <span class="keyword">long</span> total = searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line">    <span class="comment">//  4.2.获取SearchHits数组，并遍历</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">//  - 获取其中的`_source`，是JSON数据</span></span><br><span class="line">        String json = hit.getSourceAsString();</span><br><span class="line">        <span class="comment">//  - 把`_source`反序列化为User对象</span></span><br><span class="line">        Goods goods = JSON.parseObject(json, Goods.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取高亮结果</span></span><br><span class="line">        Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">        <span class="comment">// 遍历高亮字段</span></span><br><span class="line">        <span class="keyword">for</span> (HighlightField field : highlightFields.values()) &#123;</span><br><span class="line">            <span class="comment">// 获取字段名</span></span><br><span class="line">            String fieldName = field.getName();</span><br><span class="line">            <span class="comment">// 获取字段值</span></span><br><span class="line">            String fieldValue = StringUtils.join(field.getFragments());</span><br><span class="line">            <span class="comment">// 注入对象中</span></span><br><span class="line">            BeanUtils.setProperty(goods, fieldName, fieldValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;goods = &quot;</span> + goods);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的 BeanUtils用到了一个依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-Suggest查询"><a href="#2-5-Suggest查询" class="headerlink" title="2.5.Suggest查询"></a>2.5.Suggest查询</h2><p>这里以Completion Suggest查询为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示自动补全查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSuggest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建 查询条件工厂（封装查询条件） 的对象</span></span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.1.准备Suggest，需要指定四个内容：</span></span><br><span class="line">    <span class="comment">// 1）自动补全的名称：name_suggest</span></span><br><span class="line">    <span class="comment">// 2）自动补全的类型：SuggestBuilders.completionSuggestion</span></span><br><span class="line">    <span class="comment">// 3）自动补全的字段：completionSuggestion(&quot;name&quot;)</span></span><br><span class="line">    <span class="comment">// 4）自动补全的前缀：.prefix(&quot;s&quot;)</span></span><br><span class="line">    SuggestBuilder suggestBuilder = <span class="keyword">new</span> SuggestBuilder();</span><br><span class="line">    suggestBuilder.addSuggestion(<span class="string">&quot;name_suggest&quot;</span>,</span><br><span class="line">                                 SuggestBuilders.completionSuggestion(<span class="string">&quot;name&quot;</span>).prefix(<span class="string">&quot;s&quot;</span>).size(<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.2.添加suggest条件</span></span><br><span class="line">    searchSourceBuilder.suggest(suggestBuilder);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.构建 搜索的请求 对象，把sourceBuilder放进去</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line">    request.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.发请求</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.解析结果</span></span><br><span class="line">    Suggest suggest = response.getSuggest();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.1.根据名称获取suggest结果</span></span><br><span class="line">    Suggest.Suggestion&lt;? extends Suggest.Suggestion.Entry&lt;? extends Suggest.Suggestion.Entry.Option&gt;&gt; nameSuggest =</span><br><span class="line">        suggest.getSuggestion(<span class="string">&quot;name_suggest&quot;</span>);</span><br><span class="line">    <span class="comment">// 4.2.遍历结果</span></span><br><span class="line">    nameSuggest.forEach(suggestion -&gt; &#123;</span><br><span class="line">        <span class="comment">// 获取其中的options</span></span><br><span class="line">        List&lt;? extends Suggest.Suggestion.Entry.Option&gt; options = suggestion.getOptions();</span><br><span class="line">        System.out.println(<span class="string">&quot;补全的结果如下： &quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历options</span></span><br><span class="line">        <span class="keyword">for</span> (Suggest.Suggestion.Entry.Option option : options) &#123;</span><br><span class="line">            Text text = option.getText();</span><br><span class="line">            System.out.println(<span class="string">&quot;\t&quot;</span> + text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">补全的结果如下： </span><br><span class="line">Sony </span><br><span class="line">手机</span><br><span class="line">松下</span><br></pre></td></tr></table></figure><h2 id="2-6-异步API"><a href="#2-6-异步API" class="headerlink" title="2.6.异步API"></a>2.6.异步API</h2><p>之前我们使用的API都是同步阻塞调用的，也就是说调用api时，除非ES返回结果，否则代码就一直阻塞。</p><p>当然，ES也提供了异步调用的API，利用回调函数来处理执行结果。其底层是异步的Http请求，并且将执行结果用<code>Future&lt;T&gt;</code>来封装。</p><p>因此我们在发出请求后，无需等待结果，而是去执行其它业务。当ES服务端返回结果时再去处理，可以提供CPU的利用率，减少不必要的等待时间。</p><p>异步API与同步API从调用来看，最大的区别是对结果的处理方式。其它如：创建请求、组织请求参数、发出请求等基本一致。</p><h3 id="2-6-1-异步新增"><a href="#2-6-1-异步新增" class="headerlink" title="2.6.1.异步新增"></a>2.6.1.异步新增</h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsyncAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 准备文档</span></span><br><span class="line">    Goods goods = <span class="keyword">new</span> Goods(<span class="number">5L</span>, <span class="string">&quot;松下电吹风&quot;</span>, <span class="string">&quot;松下电吹风 网红电吹风&quot;</span>, <span class="number">1599L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建请求</span></span><br><span class="line">    IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;goods&quot;</span>)</span><br><span class="line">        .id(goods.getId().toString())</span><br><span class="line">        .source(JSON.toJSONString(goods), XContentType.JSON);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行请求，第三个参数是回调处理</span></span><br><span class="line">    client.indexAsync(request, RequestOptions.DEFAULT, <span class="keyword">new</span> ActionListener&lt;IndexResponse&gt;() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行成功时的回调，参数是IndexResponse结果</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> indexResponse 执行结果</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(IndexResponse indexResponse)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是成功的回调！&quot;</span> + indexResponse);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行失败时的回调，参数是异常信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> e 异常信息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是失败的回调！&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;我的异步方法调用完成~~&quot;</span>);</span><br><span class="line">    <span class="comment">// 因为我们的程序结束会立即停止，接收不到回调结果，这里我们休眠一下，等待下回调结果</span></span><br><span class="line">    Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我的异步方法调用完成~~</span><br><span class="line">我是成功的回调！IndexResponse[index=goods,type=_doc,id=5,version=1,result=created,seqNo=29,primaryTerm=1,shards=&#123;&quot;total&quot;:2,&quot;successful&quot;:1,&quot;failed&quot;:0&#125;]</span><br></pre></td></tr></table></figure><h3 id="2-6-2-异步删除"><a href="#2-6-2-异步删除" class="headerlink" title="2.6.2.异步删除"></a>2.6.2.异步删除</h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsyncDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建请求</span></span><br><span class="line">    DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;goods&quot;</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行请求，第三个参数是回调处理</span></span><br><span class="line">    client.deleteAsync(request, RequestOptions.DEFAULT, <span class="keyword">new</span> ActionListener&lt;DeleteResponse&gt;() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行成功时的回调，参数是IndexResponse结果</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> indexResponse 执行结果</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(DeleteResponse indexResponse)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是成功的回调！&quot;</span> + indexResponse);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行失败时的回调，参数是异常信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> e 异常信息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是失败的回调！&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;我的异步方法调用完成~~&quot;</span>);</span><br><span class="line">    <span class="comment">// 因为我们的程序结束会立即停止，接收不到回调结果，这里我们休眠一下，等待下回调结果</span></span><br><span class="line">    Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我的异步方法调用完成~~</span><br><span class="line">我是成功的回调！DeleteResponse[index=goods,type=_doc,id=5,version=1,result=not_found,shards=ShardInfo&#123;total=2, successful=1, failures=[]&#125;]</span><br></pre></td></tr></table></figure><h3 id="2-6-3-异步查询"><a href="#2-6-3-异步查询" class="headerlink" title="2.6.3.异步查询"></a>2.6.3.异步查询</h3><p>这里演示一个异步的模板查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetDocumentByIdAsync</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;准备开始查询&quot;</span>);</span><br><span class="line">    <span class="comment">// 准备一个查询文档的请求</span></span><br><span class="line">    GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;goods&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// 异步查询一个文档，耗时50ms</span></span><br><span class="line">    client.getAsync(request, RequestOptions.DEFAULT, <span class="keyword">new</span> ActionListener&lt;GetResponse&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(GetResponse response)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 获取source</span></span><br><span class="line">            String json = response.getSourceAsString();</span><br><span class="line">            <span class="comment">// 把json反序列化</span></span><br><span class="line">            Goods goods = JSON.parseObject(json, Goods.class);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;查询结束，得到结果： &quot;</span> + goods);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;请求已经发出，等待执行结果！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我的异步方法调用完成~~</span><br><span class="line">我是成功的回调！</span><br><span class="line">推荐结果如下：</span><br><span class="line">Sony WH-1000XM3</span><br><span class="line">三星 Galaxy A90</span><br><span class="line">松下剃须刀</span><br></pre></td></tr></table></figure><h1 id="3-WebFlux"><a href="#3-WebFlux" class="headerlink" title="3.WebFlux"></a>3.WebFlux</h1><p>是不是感觉Elasticsearch的异步API感觉很别扭，而且似乎没什么用处？</p><p>那是因为我们之前学习的所有Web程序组件，都是同步阻塞的编程方式。包括：Tomcat、Servlet、SpringMVC、Mybatis等等。</p><p>因此在同步阻塞运行大环境下，使用异步API，就难以发挥异步调用的长处。</p><p>同步和异步执行，到底有怎样的差异呢？</p><h2 id="3-1-同步和异步"><a href="#3-1-同步和异步" class="headerlink" title="3.1.同步和异步"></a>3.1.同步和异步</h2><p>那么同步和异步之间究竟有怎样的差异呢？</p><h3 id="3-1-1-同步请求"><a href="#3-1-1-同步请求" class="headerlink" title="3.1.1.同步请求"></a>3.1.1.同步请求</h3><p>一个典型的请求同步处理过程：</p><ul><li>1.开启线程，接收用户</li><li>2.处理业务</li><li>3.调用DB（比如elasticsearch）</li><li>4.等待DB返回数据（无效的等待）</li><li>5.返回数据给用户</li></ul><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200226230629880.png" alt="image-20200226230629880"></p><h3 id="3-1-2-异步请求"><a href="#3-1-2-异步请求" class="headerlink" title="3.1.2.异步请求"></a>3.1.2.异步请求</h3><p>一个典型的请求异步处理过程：</p><ul><li>1.开启线程，接收用户</li><li>2.处理业务</li><li>3.调用DB（比如elasticsearch）</li><li>4.不等待，处理其他请求（同时DB准备数据）</li><li>5.DB返回数据，传递给<code>异步回调</code>函数</li><li>6.返回给用户</li></ul><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200226231512179.png" alt="image-20200226231512179"></p><p>虽然处理过程麻烦了，但是无疑我们可以同时服务更多请求了，系统的吞吐量得到了提升。</p><h3 id="3-1-3-总结"><a href="#3-1-3-总结" class="headerlink" title="3.1.3.总结"></a>3.1.3.总结</h3><p>异步执行相对于同步执行，可以大大提高CPU的利用率，减少CPU空置时间，<strong>提高服务的吞吐量</strong>，但是并<strong>不能减少单次请求的执行耗时</strong>。</p><p>那么，有没有一套可以取代tomcat、SpringMVC，实现异步编程的Web应用方案呢？</p><h3 id="3-1-4-异步Servlet（了解）"><a href="#3-1-4-异步Servlet（了解）" class="headerlink" title="3.1.4.异步Servlet（了解）"></a>3.1.4.异步Servlet（了解）</h3><p>在Servlet3.0已经支持了异步编程，来看一个同步和异步Servlet的实例。</p><p>新建一个web项目，并在其中创建两个servlet：</p><h4 id="1）同步运行的servlet"><a href="#1）同步运行的servlet" class="headerlink" title="1）同步运行的servlet"></a>1）同步运行的servlet</h4><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;SyncServlet&quot;, urlPatterns = &quot;/sync&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> javax.servlet.ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> javax.servlet.ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> b = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 执行业务</span></span><br><span class="line">        doSomething(response);</span><br><span class="line">        <span class="comment">// 打印耗时时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;sync use: &quot;</span> + (System.currentTimeMillis() - b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟延迟</span></span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="comment">// 模拟业务</span></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;sync, hello !&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在业务中，休眠3秒来模拟业务的执行。</p><h4 id="2）异步运行的Servlet"><a href="#2）异步运行的Servlet" class="headerlink" title="2）异步运行的Servlet"></a>2）异步运行的Servlet</h4><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.AsyncContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;AsyncServlet&quot;, asyncSupported = true, urlPatterns = &quot;/async&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> javax.servlet.ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> javax.servlet.ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> b = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 开启异步任务</span></span><br><span class="line">        AsyncContext asyncContext = request.startAsync();</span><br><span class="line">        <span class="comment">// 执行业务</span></span><br><span class="line">        asyncContext.start(() -&gt; doSomething(asyncContext));</span><br><span class="line">        <span class="comment">// 打印耗时时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;async use:&quot;</span> + (System.currentTimeMillis() - b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(AsyncContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟延迟</span></span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="comment">// 模拟业务</span></span><br><span class="line">            context.getResponse().getWriter().write(<span class="string">&quot;async, hello !&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 结束业务</span></span><br><span class="line">        context.complete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意关键点：</p><ul><li><code>asyncSupported</code>：在<code>@WebServlet</code>注解上，通过<code>asyncSupported=true</code>来开启异步支持</li><li><code>AsyncContext</code>：通过<code>request.startAsync()</code>来初始化一个AsyncContext对象，并创建异步运行环境。</li><li><code>asyncContext.start()</code>：通过AsyncContext的start(Runnable task)方法来开启一个异步任务，</li><li><code>context.complete()</code>：通过context.complete()来标记业务结束</li></ul><h4 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a>3）测试</h4><p>启动项目，并分别访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localhost:8080/sync</span><br><span class="line">localhost:8080/async</span><br></pre></td></tr></table></figure><p>虽然浏览器返回结果都是耗时3秒：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200227001639456.png" alt="image-20200227001639456"></p><p>不过，在服务端AsyncServlet的执行却并没有阻塞：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200227001721210.png" alt="image-20200227001721210"> </p><p>由此可见，异步执行的Servlet不需要阻塞等待任务执行结果，而是处理其它请求，应用的并发能力就得到了提升。</p><h2 id="3-2-认识WebFlux"><a href="#3-2-认识WebFlux" class="headerlink" title="3.2.认识WebFlux"></a>3.2.认识WebFlux</h2><p>Spring框架中包含的原始Web框架Spring Web MVC是专门为Servlet API和Servlet容器而构建的，是一套同步阻塞的Web应用方案。</p><p>响应式Web框架Spring WebFlux在更高版本5.0中添加，它是完全非阻塞的，支持 <a href="https://www.reactive-streams.org/">Reactive Streams</a>、背压，并在Netty，Undertow和Servlet 3.1+容器等服务器上运行。</p><p>Spring的Reactive技术栈与传统Servlet技术栈：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200227195254458.png" alt="image-20200227195254458"></p><h3 id="3-2-1-为什么需要WebFlux"><a href="#3-2-1-为什么需要WebFlux" class="headerlink" title="3.2.1.为什么需要WebFlux"></a>3.2.1.为什么需要WebFlux</h3><p>虽然Servlet3.0也支持异步编程，但是Spring的WebFlux却并不推荐继续使用Servlet容器，而是默认使用Netty，为什么呢？</p><p>Spring官网给出的原因有两点：</p><ul><li>Servlet虽然支持异步API，但是其中的<code>Filter</code>、<code>Listener</code>等组件依然是同步的。而且如<code>getParameter()</code>这样的方法是阻塞的。而WebFlux中使用Netty作为容器，其中的API都是异步或非阻塞式的。</li><li>JDK8中引入了stream的API、函数式编程的新特性。而这些恰好为非阻塞应用和链式编程提供了便捷。而Spring的WebFlux完全支持这些新的特性。</li></ul><h3 id="3-2-2-什么是响应式"><a href="#3-2-2-什么是响应式" class="headerlink" title="3.2.2.什么是响应式"></a>3.2.2.什么是响应式</h3><p>我们知道什么是非阻塞、函数式编程。那么什么是响应式编程呢？</p><p>在<strong>传统的</strong>编程范式中，我们一般通过迭代器（Iterator）模式来遍历一个序列。这种遍历方式是由调用者来控制节奏的，采用的是<code>拉</code>的方式。每次由调用者通过 next()方法来获取序列中的下一个值。</p><p><strong>响应式</strong>流采用的则是<code>推</code>的方式，即常见的发布者-订阅者模式。当发布者有新的数据产生时，这些数据会被<code>主动</code>推送到订阅者来进行处理。在响应式流上可以添加各种不同的操作来对数据进行处理，形成数据处理链。</p><blockquote><p>比如，我们调用elasticsearch的异步API，获取一个Future结果，这个结果就是数据的发布者，将来的某一刻会把从elasticsearch中拿到的数据发布出去。</p><p>而我们的web应用就可以作为消息的订阅者，订阅elasticsearch的数据，当有数据到来的时候写入response中，响应给用户。</p><p>在elasticsearch查询并处理数据的时候，我们的web应用可以去做其它事情，无需阻塞等待，提高CPU利用率</p></blockquote><p>反应式编程最早由 .NET 平台上的 Reactive Extensions (Rx) 库来实现。后来迁移到 Java 平台之后就产生了著名的 RxJava 库，并产生了很多其他编程语言上的对应实现。在这些实现的基础上产生了后来的反应式流（Reactive Streams）规范。该规范定义了反应式流的相关接口，并将集成到 Java 9 中。</p><h3 id="3-2-3-Reactor-Project"><a href="#3-2-3-Reactor-Project" class="headerlink" title="3.2.3.Reactor Project"></a>3.2.3.Reactor Project</h3><p>Project Reactor是Java中非常流行的响应式编程库，官网：<a href="https://projectreactor.io/">https://projectreactor.io/</a></p><p>前面提到的 RxJava 库是 JVM 上反应式编程的先驱，也是反应式流规范的基础。不过 RxJava 库也有其不足的地方。</p><p>Reactor 则是完全基于反应式流规范设计和实现的库，没有 RxJava 那样的历史包袱，在使用上更加的直观易懂。Reactor 也是 Spring 5 中反应式编程的基础。学习和掌握 Reactor 可以更好地理解 Spring 5 中的相关概念，建议大家以后又机会多多学习该框架。</p><h3 id="3-2-4-Flux-和-Mono"><a href="#3-2-4-Flux-和-Mono" class="headerlink" title="3.2.4.Flux 和 Mono"></a>3.2.4.Flux 和 Mono</h3><p>Flux 和 Mono 是 Reactor 中的两个基本概念。</p><p>Flux 表示的是包含 0 到 N 个元素的异步序列，是一个数据的发布者（publisher）。可以通过subscribe()函数来订阅该发布者的数据。当数据产生时，订阅者的处理方法会执行。</p><p>Mono 表示的是包含 0 或者 1 个元素的异步序列。与Flux类似，也是一个数据的发布者（publisher）。</p><p>WebFlux的Controller中，业务处理的返回值必须是Mono或者Flux。而我们可以把service或dao中数据查询的过程封装到Mono或Flux中，数据查询成功后由Mono或Flux将数据发布出去。</p><p>然后Spring的WebFlux会订阅Mono或Flux数据，接收数据后写入Response，响应给用户</p><h2 id="3-3-WebFlux入门"><a href="#3-3-WebFlux入门" class="headerlink" title="3.3.WebFlux入门"></a>3.3.WebFlux入门</h2><p>接下来，我们来看看如何构建一个基于WebFlux的web应用。</p><h3 id="3-3-1-搭建工程"><a href="#3-3-1-搭建工程" class="headerlink" title="3.3.1.搭建工程"></a>3.3.1.搭建工程</h3><p>使用spring的initialize来搭建：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200227135858380.png" alt="image-20200227135858380"></p><p>项目名称：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200227135910241.png" alt="image-20200227135910241"></p><p>选择依赖：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200227135919635.png" alt="image-20200227135919635"></p><p>注意，这里必须选择<code>Spring Reactive Web</code>而不是<code>Spring Web</code>依赖。</p><p>然后，点击Next完成项目创建。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200227140032169.png" alt="image-20200227140032169"> </p><h3 id="3-3-2-Mono的Demo"><a href="#3-3-2-Mono的Demo" class="headerlink" title="3.3.2.Mono的Demo"></a>3.3.2.Mono的Demo</h3><p>为了降低学习难度，WebFlux开发时可以使用SpringMVC中的注解，因此Controller定义与以前差别不大，来看一个示例.</p><p>首先准备一个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1）一个传统的Handler"><a href="#1）一个传统的Handler" class="headerlink" title="1）一个传统的Handler"></a>1）一个传统的Handler</h4><p>我们先写一个同步阻塞的Handler：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sync&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserSync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;sync 开始执行&quot;</span>);</span><br><span class="line">        User user = getUser();</span><br><span class="line">        log.info(<span class="string">&quot;sync 执行完毕&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生成user的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟业务耗时1秒</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> User.of(<span class="string">&quot;Rose&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2）异步的Handler"><a href="#2）异步的Handler" class="headerlink" title="2）异步的Handler"></a>2）异步的Handler</h4><p>我们再来写一个异步的Handler：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/mono&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title">getUserMono</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;mono 开始执行&quot;</span>);</span><br><span class="line">    Mono&lt;User&gt; mono = Mono.fromSupplier(<span class="keyword">this</span>::getUser);</span><br><span class="line">    log.info(<span class="string">&quot;mono 执行完毕&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mono;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码要点：</p><ul><li>返回值：这里的返回值我们写的是<code>Mono&lt;User&gt;</code>，是一个只包含一个User元素的Publisher，它会将结果推送给客户端。</li><li><code>Mono.fromSupplier(this::getUser)</code>：构建Mono，参数是一个Supplier（无参有返回值的函数式接口），本例中是把<code>getUser()</code>方法作为数据的提供者。</li></ul><h4 id="3）测试结果"><a href="#3）测试结果" class="headerlink" title="3）测试结果"></a>3）测试结果</h4><p>启动项目，分别访问下面地址:</p><p><a href="http://localhost:8080/hello/sync">http://localhost:8080/hello/sync</a></p><p><a href="http://localhost:8080/hello/mono">http://localhost:8080/hello/mono</a></p><p>可以看到控制台的信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/image-20200227141049622.png" alt="image-20200227141049622"></p><p>可以发现，传统的Handler执行getOne()方法，耗时2秒，而Mono方式执行耗时不足1毫秒</p><h3 id="3-3-3-Flux的Demo"><a href="#3-3-3-Flux的Demo" class="headerlink" title="3.3.3.Flux的Demo"></a>3.3.3.Flux的Demo</h3><p>Mono代表返回值是一个元素，而Flux则代表返回值是一串元素，来看一个示例。</p><h4 id="1）普通Flux模式"><a href="#1）普通Flux模式" class="headerlink" title="1）普通Flux模式"></a>1）普通Flux模式</h4><p>首先看下基本的Flux模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/flux&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">getUserFlux</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;flux 开始执行&quot;</span>);</span><br><span class="line">    Flux&lt;User&gt; flux = getUserWithFlux();</span><br><span class="line">    log.info(<span class="string">&quot;flux 执行完毕&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> flux;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Flux&lt;User&gt; <span class="title">getUserWithFlux</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Flux.interval(Duration.ofSeconds(<span class="number">1</span>))<span class="comment">// 每隔1秒发射一个元素</span></span><br><span class="line">        .take(<span class="number">3</span>) <span class="comment">// 取前3个元素</span></span><br><span class="line">        <span class="comment">// 将元素转为一个User对象</span></span><br><span class="line">        .map(i -&gt; User.of(<span class="string">&quot;user_&quot;</span> + i, <span class="number">20</span> + i.intValue()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过<code>getUserWithFlux()</code>方法生成了包含3个元素的Flux，生成每个元素的间隔是1秒，模拟任务耗时。</p><p>来看下页面效果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/flux.gif"> </p><p>发现在请求发出3秒后，浏览器拿到完整数据，并组织成了一个json的数组</p><h4 id="2）通过EventStream格式化的Flux"><a href="#2）通过EventStream格式化的Flux" class="headerlink" title="2）通过EventStream格式化的Flux"></a>2）通过EventStream格式化的Flux</h4><p>上面的请求中，响应结果并没有像流一样，逐个返回到页面，而是在3秒后将结果组织为一个JSON数组返回。</p><p>如果我们希望数据像流一样，不断生成并返回到页面，我们设置响应模式为：<code>text/event-stream</code>类型。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/stream&quot;, produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">getUserStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;stream 开始执行&quot;</span>);</span><br><span class="line">    Flux&lt;User&gt; flux = getUserWithFlux();</span><br><span class="line">    log.info(<span class="string">&quot;stream 执行完毕&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> flux;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<code>MediaType.TEXT_EVENT_STREAM_VALUE</code>枚举的值就是<code>text/event-stream</code></p><p>效果图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/6Elasticsearch%E8%BF%9B%E9%98%B6%E5%92%8CWebFlux/stream.gif"> </p><p>可以看到，请求发出后，数据会逐条返回到客户端，并渲染在页面，真的像数据流一样。最终实现数据从服务端向客户端的持续推送，类似看视频直播一样，这个就是HTML5中的SSE技术：<a href="https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html">Server Sent Events</a>。</p><p>SSE： 服务端到客户端的持续推流，基于http协议</p><p>WebSocket：服务端与客户端的双向持续交互，额外的一种协议</p><h2 id="3-4-Flux和Mono的API"><a href="#3-4-Flux和Mono的API" class="headerlink" title="3.4.Flux和Mono的API"></a>3.4.Flux和Mono的API</h2><p>在WebFlux应用中，我们会的返回值通常都会用Flux或者Mono来封装，那么构建Flux和Mono的方式有哪些呢？</p><h3 id="3-4-1-创建Flux的API"><a href="#3-4-1-创建Flux的API" class="headerlink" title="3.4.1.创建Flux的API"></a>3.4.1.创建Flux的API</h3><h4 id="1）简单方法"><a href="#1）简单方法" class="headerlink" title="1）简单方法"></a>1）简单方法</h4><p>首先是一些简单静态方法，这些方法添加一些包含固定元素的Flux或者简单数字的Flux。包括：</p><ul><li>just()：可以指定序列中包含的全部元素。创建出来的 Flux 序列在发布这些元素之后会自动结束。</li><li>fromArray()，fromIterable()和 fromStream()：可以从一个数组、Iterable 对象或 Stream 对象中创建 Flux 对象。</li><li>empty()：创建一个不包含任何元素，只发布结束消息的序列。</li><li>error(Throwable error)：创建一个只包含错误消息的序列。</li><li>never()：创建一个不包含任何消息通知的序列。</li><li>range(int start, int count)：创建包含从 start 起始的 count 个数量的 Integer 对象的序列。</li><li>interval(Duration period)和 interval(Duration delay, Duration period)：创建一个包含了从 0 开始递增的 Long 对象的序列。其中包含的元素按照指定的间隔来生成</li></ul><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成包含两个字符串的Flux：&quot;Hello&quot;, &quot;World&quot;</span></span><br><span class="line">Flux.just(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>).subscribe(System.out::println);</span><br><span class="line"><span class="comment">// 从一个Integer数组中创建Flux</span></span><br><span class="line">Flux.fromArray(<span class="keyword">new</span> Integer[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).subscribe(System.out::println);</span><br><span class="line"><span class="comment">// 空的Flux</span></span><br><span class="line">Flux.empty().subscribe(System.out::println);</span><br><span class="line"><span class="comment">// 创建一个包含1到10的整数Integer类型的Flux</span></span><br><span class="line">Flux.range(<span class="number">1</span>, <span class="number">10</span>).subscribe(System.out::println);</span><br><span class="line"><span class="comment">// 每隔1秒生成一个元素</span></span><br><span class="line">Flux.interval(Duration.ofSeconds(<span class="number">1</span>)).subscribe(System.out::println)</span><br></pre></td></tr></table></figure><p>如果生成元素的逻辑比较复杂，建议使用<code>generate</code>方法或者<code>create</code>方法</p><h4 id="2）generate方法"><a href="#2）generate方法" class="headerlink" title="2）generate方法"></a>2）generate方法</h4><p><code>generate()</code>方法通过同步和逐一的方式来产生 Flux 序列。序列的产生是通过调用所提供的 <code>SynchronousSink</code> 对象的 <code>next()</code>，<code>complete()</code>和 <code>error(Throwable)</code>方法来完成的。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Flux&lt;String&gt; flux = Flux.generate(sink -&gt; &#123;</span><br><span class="line">    <span class="comment">// 添加一个元素</span></span><br><span class="line">    sink.next(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="comment">// 结束</span></span><br><span class="line">    sink.complete();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个方法的含义是生成一个Flux，但是只包含一个元素：<code>&quot;hello&quot;</code>;</p><p><code>generate()</code>方法的另外一种形式 <code>generate(Callable&lt;S&gt; stateSupplier, BiFunction&lt;S,SynchronousSink&lt;T&gt;,S&gt; generator)</code>，其中 <code>stateSupplier</code> 用来提供初始的状态对象。在进行序列生成时，状态对象会作为 <code>generator</code> 使用的第一个参数传入，可以在对应的逻辑中对该状态对象进行修改以供下一次生成时使用。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个随机生成器</span></span><br><span class="line"><span class="keyword">final</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="comment">// 把集合的构造函数作为初始化方法，形成的初始化变量，会传递给第二个函数作为参数</span></span><br><span class="line">Flux&lt;Integer&gt; flux = Flux.generate(ArrayList::<span class="keyword">new</span>, (list, sink) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 生成随机数</span></span><br><span class="line">    <span class="keyword">int</span> value = random.nextInt(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 加入集合</span></span><br><span class="line">    list.add(value);</span><br><span class="line">    <span class="comment">// 加入Flux</span></span><br><span class="line">    sink.next(value);</span><br><span class="line">    <span class="keyword">if</span> (list.size() == <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">// 当集合元素数量等于10，则停止</span></span><br><span class="line">        sink.complete();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个方法的最终结果，是生成一个包含10个随机数的Flux</p><p>Generate方法比较抽象，有点类似于reduce方法。如果不好理解，建议使用create方法。</p><h4 id="3）create方法"><a href="#3）create方法" class="headerlink" title="3）create方法"></a>3）create方法</h4><p>create()方法与 generate()方法的不同之处在于所使用的是 FluxSink 对象。FluxSink 支持同步和异步的消息产生，并且可以在一次调用中产生多个元素。在代码清单 3 中，在一次调用中就产生了全部的 10 个元素。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Flux&lt;Integer&gt; flux = Flux.create(sink -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 将循环遍历得到的数字，添加到flux</span></span><br><span class="line">        sink.next(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环结束，任务完成</span></span><br><span class="line">    sink.complete();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 会生成一个包含从0到9的int元素的Flux</span></span><br><span class="line">flux.subscribe(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="3-4-2-创建Mono的API"><a href="#3-4-2-创建Mono的API" class="headerlink" title="3.4.2.创建Mono的API"></a>3.4.2.创建Mono的API</h3><p>Mono中只包含一个元素，因此创建起来更加简单，其中包含一些与Flux类似的API：</p><ul><li>just()：指定Mono中的固定元素</li><li>empty()：创建一个不包含任何元素，但会发送消息的Mono。</li><li>error(Throwable error)：创建一个只包含错误消息的Mono。</li><li>never()：创建一个不包含任何元素的Mono。</li><li>create()：通过MonoSink来构建包含一个元素的Mono，可以使用MonoSink的success()、error()等方法。</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mono&lt;String&gt; mono = Mono.just(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">Mono&lt;Object&gt; mono = Mono.create(monoSink -&gt; monoSink.success(<span class="string">&quot;hello&quot;</span>));</span><br></pre></td></tr></table></figure><p>但Mono也有一些独特的方法：</p><ul><li>fromCallable()、fromCompletionStage()、fromFuture()、fromRunnable()和 fromSupplier()：分别从 Callable、CompletionStage、CompletableFuture、Runnable 和 Supplier 中创建 Mono。</li><li>delay(Duration duration)和 delayMillis(long duration)：创建一个 Mono 序列，在指定的延迟时间之后，产生数字 0 作为唯一值。</li><li>ignoreElements(Publisher<T> source)：创建一个 Mono 序列，忽略作为源的 Publisher 中的所有元素，只产生结束消息。</li><li>justOrEmpty(Optional&lt;? extends T&gt; data)和 justOrEmpty(T data)：从一个 Optional 对象或可能为 null 的对象中创建 Mono。只有 Optional 对象中包含值或对象不为 null 时，Mono 序列才产生对应的元素。</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mono&lt;String&gt; mono = Mono.fromSupplier(() -&gt; <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">Mono&lt;String&gt; mono = Mono.fromFuture(CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;hello&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Elasticsearch进阶和WebFlux&quot;&gt;&lt;a href=&quot;#Elasticsearch进阶和WebFlux&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch进阶和WebFlux&quot;&gt;&lt;/a&gt;Elasticsearch进阶和W</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="WebFlux" scheme="http://example.com/tags/WebFlux/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-商品数据结构设计</title>
    <link href="http://example.com/2022/06/20/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2022/06/20/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-06-20T07:37:39.000Z</published>
    <updated>2022-06-22T09:07:09.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="乐优商城项目-商品数据结构设计"><a href="#乐优商城项目-商品数据结构设计" class="headerlink" title="乐优商城项目-商品数据结构设计"></a>乐优商城项目-商品数据结构设计</h1><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">理解商品规格参数数据结构</span></span><br><span class="line"><span class="meta">-</span> <span class="string">理解商品SPU和SKU数据结构</span></span><br><span class="line"><span class="meta">-</span> <span class="string">完成规格参数的业务接口</span></span><br><span class="line"><span class="meta">-</span> <span class="string">完成商品的业务接口</span></span><br></pre></td></tr></table></figure><h1 id="1-商品数据结构设计"><a href="#1-商品数据结构设计" class="headerlink" title="1.商品数据结构设计"></a>1.商品数据结构设计</h1><p>商品是电商的核心，而商品数据结构的设计也决定了一个电商网站的很多业务走向。</p><h2 id="1-1-商品数据分析"><a href="#1-1-商品数据分析" class="headerlink" title="1.1.商品数据分析"></a>1.1.商品数据分析</h2><p>我们先看一下我们乐优商城的商品页面结构：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200214184852185.png" alt="image-20200214184852185"></p><p>包括的数据：</p><ul><li>①：商品分类信息</li><li>②：商品品牌信息</li><li>③：商品名称</li><li>④：商品图片</li><li>⑤：商品标题</li><li>⑥：商品价格</li><li>⑦：商品库存</li><li>⑧：商品属性<ul><li>颜色</li><li>内存</li><li>机身存储</li></ul></li></ul><p>我们是不是可以这样设计商品表，把商品的内容都作为商品表的字段：</p><table><thead><tr><th>id</th><th>分类</th><th>品牌</th><th>名称</th><th>图片</th><th>价格</th><th>库存</th><th>颜色</th><th>内存</th><th>存储</th><th></th></tr></thead><tbody><tr><td>1</td><td>手机</td><td>小米</td><td>红米5</td><td>xx.jpg</td><td>1099</td><td>99</td><td>玫瑰金</td><td>3G</td><td>32G</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>但是如果这个商品不是手机，而是一个空调呢？</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200214185719167.png" alt="image-20200214185719167"></p><p>空调中会多出两个属性：</p><ul><li>匹数</li><li>系列</li></ul><p>电视呢？可能会多出：尺寸、型号这样的属性</p><p>衣服呢？可能会多出：尺码、颜色这样的属性</p><p>水果呢？可能会多出：重量、品种这样的属性</p><p>于是，商品表设计就会变成这样：</p><table><thead><tr><th>id</th><th>分类</th><th>品牌</th><th>名称</th><th>图片</th><th>价格</th><th>库存</th><th>颜色</th><th>内存</th><th>存储</th><th>尺寸</th><th>型号</th><th>尺码</th><th>重量</th><th>品种</th><th>..</th></tr></thead><tbody><tr><td>1</td><td>手机</td><td>小米</td><td>红米5</td><td>xx.jpg</td><td>1099</td><td>99</td><td>玫瑰金</td><td>3G</td><td>32G</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td>电视</td><td>TCL</td><td>TCL55V6</td><td>yy.jpg</td><td>2399</td><td>12</td><td></td><td></td><td></td><td>55</td><td>55英寸声控v6</td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td>卫衣</td><td>ED.HD</td><td>ED.HD卫衣男</td><td>zz.jpg</td><td>109</td><td>99</td><td>黄色</td><td></td><td></td><td></td><td></td><td>XL</td><td></td><td></td><td></td></tr><tr><td>4</td><td>苹果</td><td>京觅</td><td>京觅烟台红富士</td><td>11.jpg</td><td>38.80</td><td>66</td><td></td><td></td><td></td><td></td><td></td><td></td><td>190~240g</td><td>红富士</td><td></td></tr></tbody></table><p>发现问题了吗？</p><p><strong>不同种类的商品，有不同的属性，如果这样设计表，那么表中的字段会存在问题</strong>：</p><ul><li><strong>字段过多</strong>：随着商品分类越来越多，表的字段数量越来越多，达到数万个字段</li><li><strong>字段不确定</strong>：商品分类是会改变的，因此属性也会变，字段就要跟着变</li><li><strong>字段利用率低</strong>：如果商品是手机，只会用到跟手机有关字段，其他字段就无用</li></ul><p>那么我们该怎么设计商品表呢？</p><p>既然不同分类商品，其属性不同，说明属性是与商品无关的字段，应该与商品分类有关。</p><p>这样商品表的设计就不包含属性字段，就简化了：</p><table><thead><tr><th>id</th><th>分类</th><th>品牌</th><th>名称</th><th>图片</th><th>价格</th><th>库存</th><th>..</th></tr></thead><tbody><tr><td>1</td><td>手机</td><td>小米</td><td>红米5</td><td>xx.jpg</td><td>1099</td><td>99</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>那么商品的属性怎么办？</p><p>每一个种类的商品，就有一套对应的属性。我们把这个分类对应的一套属性，称为一套规格参数（specification）模板，设计一张独立的表，而后与商品分类关联。</p><p>当需要知道一个商品的属性有哪些，只要知道商品属于哪个商品分类，然后找到该商品分类对应的规格参数模板即可！</p><h2 id="1-2-商品规格参数设计"><a href="#1-2-商品规格参数设计" class="headerlink" title="1.2.商品规格参数设计"></a>1.2.商品规格参数设计</h2><p>规格参数模板与<code>分类</code>有关，我们可以<strong>设计规格参数表</strong>，然后与<strong>商品分类关联</strong>。一个分类，对应多个规格参数，形成一对多关系，让商品规格与商品分类关联即可。</p><p>商品规格表设计如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_spec_param` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `category_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品分类id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;规格参数所属的组id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;参数名&#x27;</span>,</span><br><span class="line">  `<span class="type">numeric</span>` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否是数字类型参数，true或false&#x27;</span>,</span><br><span class="line">  `unit` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;数字类型参数的单位，非数字类型可以为空&#x27;</span>,</span><br><span class="line">  `generic` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否是sku通用属性，true或false&#x27;</span>,</span><br><span class="line">  `searching` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否用于搜索过滤，true或false&#x27;</span>,</span><br><span class="line">  `segments` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;数值类型参数，如果需要搜索，则添加分段间隔值，如CPU频率区间：0.5-1.0,1.1~1.5&#x27;</span>,</span><br><span class="line">  `options` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;参数的可选值，不允许用户自己填值&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `key_group` (`group_id`),</span><br><span class="line">  KEY `key_category` (`category_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">42</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;规格参数组下的参数名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这张表中，除了id、name、category_id外，还多出了一些字段，我们一一解释。</p><h3 id="1-2-1-规格组"><a href="#1-2-1-规格组" class="headerlink" title="1.2.1.规格组"></a>1.2.1.规格组</h3><p>一个商品分类，包含的规格参数其实远不止3个，例如：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200214201947118.png" alt="image-20200214201947118"> </p><p>为了方便管理，我们需要<strong>对规格参数分组</strong>，定义了一个**规格组表(tb_spec_group)**。一个规格组对应多个规格参数，一对多关系，在规格参数中持有规格组的id：</p><ul><li>group_id：当前规格参数所属的规格组的id</li></ul><p>规格组与分类有关，表结构如下：</p><p>tb_spec_group:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_spec_group` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `category_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品分类id,一个分类包含多个规格组&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;规格组的名称&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `key_category` (`category_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">19</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;规格参数的分组表,每个商品分类下有多个规格参数组&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-数值类型"><a href="#1-2-2-数值类型" class="headerlink" title="1.2.2.数值类型"></a>1.2.2.数值类型</h3><p>某些规格参数可能为数值类型，我们需要标记出来，并且记录单位：</p><p>​     <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/1534636623281.png" alt="1534636623281"></p><p>我们有两个字段来描述：</p><ul><li><strong>numberic：是否为数值类型</strong><ul><li>true：数值类型</li><li>false：不是数值类型</li></ul></li><li><strong>unit：参数的单位</strong></li></ul><h3 id="1-2-3-搜索字段"><a href="#1-2-3-搜索字段" class="headerlink" title="1.2.3.搜索字段"></a>1.2.3.搜索字段</h3><p>打开一个搜索页，我们来看看过滤的条件：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/1526090072535.png" alt="1526090072535"></p><p>你会发现，过滤条件中的屏幕尺寸、运行内存、网路、机身内存、电池容量、CPU核数等，在规格参数中都能找到：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/1526090228171.png" alt="1526090228171"></p><p>也就是说，<strong>规格参数中的数据，将来会有一部分作为搜索条件来使用</strong>。我们可以在设计时，将这部分属性标记出来，将来做搜索的时候，作为过滤条件。</p><p>与搜索相关的有两个字段：</p><ul><li><strong>searching：标记是否用作过滤</strong><ul><li>true：用于过滤搜索</li><li>false：不用于过滤</li></ul></li><li><strong>segments：某些数值类型的参数，在搜索时需要按区间划分</strong>，这里提前确定好划分区间<ul><li>比如电池容量，0<del>2000mAh，2000mAh</del>3000mAh，3000mAh~4000mAh</li></ul></li></ul><h3 id="1-2-4-通用属性"><a href="#1-2-4-通用属性" class="headerlink" title="1.2.4.通用属性"></a>1.2.4.通用属性</h3><p>商品的规格属性有很多：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200214201947118.png" alt="image-20200214201947118"> </p><p>但是，大部分属性都是比较通用的属性，但是有少数属性，用于区分商品，例如手机颜色、内存等。这样的属性会出现在页面上供用户选择：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200214202614364.png" alt="image-20200214202614364"> </p><p>这种是特殊属性。</p><p>为了区分通用属性和特殊属性，我们定义了一个字段：</p><ul><li><strong>generic：是否是通用属性</strong>，布尔类型。true：通用属性，false：特殊属性。</li></ul><h3 id="1-2-5-待选项"><a href="#1-2-5-待选项" class="headerlink" title="1.2.5.待选项"></a>1.2.5.待选项</h3><p>有一些规格属性，<strong>在用户填写属性值时，不能任意填写，需要在规定的数据内选择</strong>。所以我们可以定义一些供选择待选项。</p><ul><li>options：规格参数的值的待选项</li></ul><p>例如，手机的机身存储，我们给出了下列待选项：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200214202956982.png" alt="image-20200214202956982"></p><h2 id="1-3-商品设计"><a href="#1-3-商品设计" class="headerlink" title="1.3.商品设计"></a>1.3.商品设计</h2><p>现在，每个种类的商品，都有了自己的一套规格参数。不过，该分类下的具体每个商品，其规格参数的值不同，这个值显然是跟商品有关的，需要记录在商品表中。</p><p>不过，我们需要先设计商品表才可以。而商品，离不开SPU和SKU这两个概念。</p><h3 id="1-3-1-什么是SPU和SKU"><a href="#1-3-1-什么是SPU和SKU" class="headerlink" title="1.3.1.什么是SPU和SKU"></a>1.3.1.什么是SPU和SKU</h3><p><strong>SPU：</strong>Standard Product Unit <strong>（标准产品单位）</strong> ，一组具有共同属性的商品集</p><p><strong>SKU：</strong>Stock Keeping Unit（<strong>库存量单位</strong>），SPU商品集因具体特性不同而细分的每个商品</p><p>以图为例来看：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/1526085541996.png" alt="1526085541996"></p><ul><li>本页的 华为Mate10 就是一个商品集，即SPU。</li><li>因为颜色、内存等不同，而细分出不同的Mate10，如亮黑色128G版、亮黑色64G版本。这就是不同的SKU。</li></ul><p>可以看出：</p><ul><li><p>一个SPU中包含多个SKU</p></li><li><p>SPU是一个抽象的商品集概念，为了方便后台的管理。</p></li><li><p>SKU才是具体要销售的商品，每一个SKU的价格、库存可能会不一样，<strong>用户购买的是SKU而不是SPU</strong></p></li></ul><h3 id="1-3-2-为什么需要SPU和SKU"><a href="#1-3-2-为什么需要SPU和SKU" class="headerlink" title="1.3.2.为什么需要SPU和SKU"></a>1.3.2.为什么需要SPU和SKU</h3><p>虽然一个SPU中包含多个SKU，例如亮黑色128G版Mate10、亮黑色64G版本的Mate10。但是，不同SKU的属性其实大部分是相同的，例如：</p><ul><li>商品所属分类</li><li>商品品牌</li><li>商品名称</li><li>商品描述</li><li>商品包装</li><li>商品售后</li><li>商品重量、CPU、屏幕尺寸、电池容量等规格参数值信息</li></ul><p>如果只有sku表，那么每个SKU都保存自己的一份数据，将会有大量的数据重复，而且不方便后期的维护和管理。因此，我们用SPU来整合一组SKU，方便管理SKU的共性数据，<strong>SKU表只记录每个SKU的特有属性</strong>。</p><p>因此，SPU和SKU表保存的数据也不一样：</p><ul><li><strong>SPU：一组SKU的共性数据</strong></li><li><strong>SKU：每个SKU的特有数据</strong></li></ul><h3 id="1-3-3-SPU数据结构"><a href="#1-3-3-SPU数据结构" class="headerlink" title="1.3.3.SPU数据结构"></a>1.3.3.SPU数据结构</h3><p>spu保存的是一组SKU的共性数据，例如：</p><ul><li>商品所属分类</li><li>商品品牌</li><li>商品名称</li><li>商品描述</li><li>商品包装</li><li>商品售后</li><li>商品重量、CPU、屏幕尺寸、电池容量等规格参数值信息</li></ul><p>其数据结构如下：</p><p><code>tb_spu</code>表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_spu` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;spu id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;商品标签,搜索关键字信息&#x27;</span>,</span><br><span class="line">  `cid1` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;1级类目id&#x27;</span>,</span><br><span class="line">  `cid2` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;2级类目id&#x27;</span>,</span><br><span class="line">  `cid3` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;3级类目id&#x27;</span>,</span><br><span class="line">  `brand_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品所属品牌id&#x27;</span>,</span><br><span class="line">  `saleable` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否上架，0下架，1上架&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;添加时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">190</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;spu表;</span></span><br></pre></td></tr></table></figure><p>与我们前面分析的基本类似，但是似乎少了一些字段，比如:</p><ul><li>商品描述</li><li>包装清单</li><li>售后服务</li><li>规格参数值信息</li></ul><p>我们做了表的垂直拆分，<strong>将SPU的详情放到了另一张表</strong>：<code>tb_spu_detail</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_spu_detail` (</span><br><span class="line">  `spu_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品spu的id，与spu表一对一&#x27;</span>,</span><br><span class="line">  `description` text COMMENT <span class="string">&#x27;商品描述信息&#x27;</span>,</span><br><span class="line">  `specification` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;规格参数值&#x27;</span>,</span><br><span class="line">  `packing_list` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;包装清单&#x27;</span>,</span><br><span class="line">  `after_service` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;售后服务&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`spu_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>这张表中的数据都比较大，为了不影响主表的查询效率我们拆分出这张表。</p><p>需要注意的字段是<code>specification</code>字段，其中保存的是该商品对应的规格参数值。</p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;1&quot;</span>: <span class="string">&quot;OPPO&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2&quot;</span>: <span class="string">&quot;V20&quot;</span>,</span><br><span class="line"><span class="attr">&quot;3&quot;</span>: <span class="string">&quot;2018&quot;</span>,</span><br><span class="line"><span class="attr">&quot;5&quot;</span>: <span class="string">&quot;189&quot;</span>,</span><br><span class="line"><span class="attr">&quot;6&quot;</span>: <span class="string">&quot;陶瓷&quot;</span>,</span><br><span class="line"><span class="attr">&quot;7&quot;</span>: <span class="string">&quot;安卓&quot;</span>,</span><br><span class="line"><span class="attr">&quot;8&quot;</span>: <span class="string">&quot;骁龙&quot;</span>,</span><br><span class="line"><span class="attr">&quot;9&quot;</span>: <span class="string">&quot;骁龙970&quot;</span>,</span><br><span class="line"><span class="attr">&quot;10&quot;</span>: <span class="string">&quot;6&quot;</span>,</span><br><span class="line"><span class="attr">&quot;11&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line"><span class="attr">&quot;14&quot;</span>: <span class="string">&quot;5.5&quot;</span>,</span><br><span class="line"><span class="attr">&quot;15&quot;</span>: <span class="string">&quot;2180*1280&quot;</span>,</span><br><span class="line"><span class="attr">&quot;16&quot;</span>: <span class="string">&quot;1200&quot;</span>,</span><br><span class="line"><span class="attr">&quot;17&quot;</span>: <span class="string">&quot;2000&quot;</span>,</span><br><span class="line"><span class="attr">&quot;18&quot;</span>: <span class="string">&quot;3250&quot;</span>,</span><br><span class="line"><span class="attr">&quot;4&quot;</span>: [<span class="string">&quot;炫丽红&quot;</span>, <span class="string">&quot;极夜黑&quot;</span>],</span><br><span class="line"><span class="attr">&quot;12&quot;</span>: [<span class="string">&quot;4GB&quot;</span>, <span class="string">&quot;6GB&quot;</span>],</span><br><span class="line"><span class="attr">&quot;13&quot;</span>: [<span class="string">&quot;64GB&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>json结构，其中都是键值对：</p><ul><li>key：该商品所属商品分类的规格参数的id</li><li>value：对应规格参数的值</li></ul><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200214212536380.png" alt="image-20200214212536380"></p><h3 id="1-3-4-SKU数据结构"><a href="#1-3-4-SKU数据结构" class="headerlink" title="1.3.4.SKU数据结构"></a>1.3.4.SKU数据结构</h3><p>sku中保存的是每个SKU不同的属性，包括：</p><ul><li>商品标题</li><li>商品价格</li><li>商品库存</li><li>商品图片</li><li>商品特有的规格属性，比如具体的颜色、内存等</li><li>spu表id，要与SPU表关联</li></ul><p>表结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_sku` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `spu_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;spu表的id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;商品sku的标题&#x27;</span>,</span><br><span class="line">  `images` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;商品的图片，多个图片以‘,’分割&#x27;</span>,</span><br><span class="line">  `stock` <span class="type">int</span>(<span class="number">8</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;9999&#x27;</span> COMMENT <span class="string">&#x27;库存&#x27;</span>,</span><br><span class="line">  `price` <span class="type">bigint</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;销售价格，单位为分&#x27;</span>,</span><br><span class="line">  `indexes` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;属性下标&#x27;</span>,</span><br><span class="line">  `sold` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;销量&#x27;</span>,</span><br><span class="line">  `special_spec` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;sku的特有规格参数键值对，json格式&#x27;</span>,</span><br><span class="line">  `saleable` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否上架，0下架，1上架&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;添加时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `key_spu_id` (`spu_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">27359021573</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;sku表,该表表示具体的商品实体,如黑色的 64g的iphone 8&#x27;</span>;</span><br></pre></td></tr></table></figure><p>其中，比较特殊的字段是：<code>special_spec</code>，其数据结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;4&quot;</span>:<span class="string">&quot;炫丽红&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;12&quot;</span>:<span class="string">&quot;4GB&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;13&quot;</span>:<span class="string">&quot;64GB&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们与SPU中的Specification对比：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200214213020889.png" alt="image-20200214213020889"> </p><p>spu记录的是这个spu下的<strong>sku具备的所有颜色、内存的可能性</strong></p><p>sku记录的是<strong>当前sku的具体颜色、内存值</strong></p><h2 id="1-4-导入商品图片数据"><a href="#1-4-导入商品图片数据" class="headerlink" title="1.4.导入商品图片数据"></a>1.4.导入商品图片数据</h2><p>我们的商品表中，有很多的商品图片信息，例如：</p><p><a href="http://image.leyou.com/images/8/11/1524297319952.jpg">http://image.leyou.com/images/8/11/1524297319952.jpg</a></p><p>这个图片对应的url地址是不存在的，但是我们课前资料中提供了这些图片：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200318165920905.png" alt="image-20200318165920905"> </p><p>因此，我们可以把这些图片解压出来，放到一个web服务器，对外开放即可。</p><p>这里，我们可以选择Nginx作为web服务器，吧images解压到nginx的html目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200318170450325.png" alt="image-20200318170450325"> </p><p>接下来，就是让 image.leyou.com 能够指向nginx下的html目录：</p><ul><li><p>让image.leyou.com 指向127.0.0.1，域名解析</p></li><li><p>在nginx中配置反向代理，指向HTML目录：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  image.leyou.com;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="comment"># 默认资源去nginx目录下的html目录寻找</span></span><br><span class="line"><span class="attribute">root</span>   html;</span><br><span class="line"><span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-规格参数业务"><a href="#2-规格参数业务" class="headerlink" title="2.规格参数业务"></a>2.规格参数业务</h1><p>查看规格参数相关接口：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200214221612350.png" alt="image-20200214221612350"> </p><h2 id="2-1-基本代码"><a href="#2-1-基本代码" class="headerlink" title="2.1.基本代码"></a>2.1.基本代码</h2><h3 id="2-1-1-实体类"><a href="#2-1-1-实体类" class="headerlink" title="2.1.1.实体类"></a>2.1.1.实体类</h3><p>在<code>ly-item-servicce</code>的<code>com.leyou.item.entity</code>包下，添加实体类</p><p>规格组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;tb_spec_group&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecGroup</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规格参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;tb_spec_param&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecParam</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="keyword">private</span> Long groupId;</span><br><span class="line">    <span class="meta">@TableField(&quot;`name`&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(&quot;`numeric`&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean numeric;</span><br><span class="line">    <span class="keyword">private</span> String unit;</span><br><span class="line">    <span class="keyword">private</span> Boolean generic;</span><br><span class="line">    <span class="keyword">private</span> Boolean searching;</span><br><span class="line">    <span class="keyword">private</span> String segments;</span><br><span class="line">    <span class="keyword">private</span> String options;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，<strong>numeric是数据库关键字</strong>，为了防止查询语句出错，需要给字段加上转义字符：==`==</p><h3 id="2-1-2-DTO"><a href="#2-1-2-DTO" class="headerlink" title="2.1.2.DTO"></a>2.1.2.DTO</h3><p>在<code>ly-item-pojo</code>的<code>com.leyou.item.dto</code>包下，添加DTO</p><p>规格组的DTO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecGroupDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SpecParamDTO&gt; params;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpecGroupDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具类。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;SpecGroupDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> list.stream().map(SpecGroupDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规格参数DTO：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecParamDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="keyword">private</span> Long groupId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean numeric;</span><br><span class="line">    <span class="keyword">private</span> String unit;</span><br><span class="line">    <span class="keyword">private</span> Boolean generic;</span><br><span class="line">    <span class="keyword">private</span> Boolean searching;</span><br><span class="line">    <span class="keyword">private</span> String segments;</span><br><span class="line">    <span class="keyword">private</span> String options;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpecParamDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;SpecParamDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> list.stream().map(SpecParamDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-mapper"><a href="#2-1-3-mapper" class="headerlink" title="2.1.3.mapper"></a>2.1.3.mapper</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.mapper</code>包下，添加mapper。</p><p>规格组mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.SpecGroup;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecGroupMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">SpecGroup</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规格参数Mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.SpecParam;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecParamMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">SpecParam</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-4-service"><a href="#2-1-4-service" class="headerlink" title="2.1.4.service"></a>2.1.4.service</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包中，添加<code>service</code>接口：</p><p>规格组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.SpecGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecGroupService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">SpecGroup</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规格参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.SpecParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecParamService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">SpecParam</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>com.leyou.item.service.impl</code>包中，添加<code>service</code>的实现类：</p><p>规格组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.SpecGroup;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.mapper.SpecGroupMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.SpecGroupService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecGroupServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">SpecGroupMapper</span>, <span class="title">SpecGroup</span>&gt; <span class="keyword">implements</span> <span class="title">SpecGroupService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规格参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.SpecParam;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.mapper.SpecParamMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.SpecParamService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecParamServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">SpecParamMapper</span>, <span class="title">SpecParam</span>&gt; <span class="keyword">implements</span> <span class="title">SpecParamService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-5-controller"><a href="#2-1-5-controller" class="headerlink" title="2.1.5.controller"></a>2.1.5.controller</h3><p>在<code>ly-item-service</code>的<code> com.leyou.item.web</code>包中，添加controller代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exception.LyException;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.dto.SpecGroupDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.dto.SpecParamDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.SpecGroup;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.SpecParam;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.SpecGroupService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.SpecParamService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;spec&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SpecGroupService groupService;</span><br><span class="line">    <span class="keyword">private</span> SpecParamService paramService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpecController</span><span class="params">(SpecGroupService groupService, SpecParamService paramService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.groupService = groupService;</span><br><span class="line">        <span class="keyword">this</span>.paramService = paramService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2-根据分类查询规格组"><a href="#2-2-根据分类查询规格组" class="headerlink" title="2.2.根据分类查询规格组"></a>2.2.根据分类查询规格组</h2><p><strong>这里的分类指的是商品的id哈！</strong>，向<strong>规格组表格</strong>查询！</p><h3 id="2-2-1接口声明"><a href="#2-2-1接口声明" class="headerlink" title="2.2.1接口声明"></a>2.2.1接口声明</h3><ul><li>接口地址： <code>/spec/groups/of/category</code></li><li>请求方式 ：<code>GET</code></li><li>请求参数 ：<code>long</code>，商品分类id</li><li>返回值类型 ：<code>[&quot;application/json&quot;]</code></li></ul><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>id</td><td>商品分类id</td><td>query</td><td>true</td><td>integer</td><td></td></tr></tbody></table><p><strong>实体</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th><th>schema</th></tr></thead><tbody><tr><td>categoryId</td><td>商品分类id</td><td>integer(int64)</td><td>integer(int64)</td></tr><tr><td>id</td><td>规格租id</td><td>integer(int64)</td><td>integer(int64)</td></tr><tr><td>name</td><td>规格组名称</td><td>string</td><td></td></tr></tbody></table><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-2-2-业务实现"><a href="#2-2-2-业务实现" class="headerlink" title="2.2.2.业务实现"></a>2.2.2.业务实现</h3><p>在<code>ly-item-service</code>的<code> com.leyou.item.web</code>包的<code>SpecController</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据商品分类查询规格组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 规格组集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/groups/of/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecGroupDTO&gt;&gt; queryGroupByCategory(</span><br><span class="line">    <span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(</span><br><span class="line">        SpecGroupDTO.convertEntityList(</span><br><span class="line">            groupService.query().eq(<span class="string">&quot;category_id&quot;</span>, id).list()</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-查询规格参数集合"><a href="#2-3-查询规格参数集合" class="headerlink" title="2.3.查询规格参数集合"></a>2.3.查询规格参数集合</h2><h3 id="2-3-1接口声明"><a href="#2-3-1接口声明" class="headerlink" title="2.3.1接口声明"></a>2.3.1接口声明</h3><ul><li>接口地址： <code>/spec/params</code></li><li>请求方式 ：<code>GET</code></li><li>请求参数类型：<code>基本类型包装类</code></li><li>返回值类型 ：<code>[&quot;application/json&quot;]</code></li></ul><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>categoryId</td><td>商品分类id</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>groupId</td><td>规格租id</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>searching</td><td>是否搜索</td><td>query</td><td>false</td><td>boolean</td><td></td></tr></tbody></table><p><strong>响应参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th><th>schema</th></tr></thead><tbody><tr><td>categoryId</td><td>商品分类ID</td><td>integer(int64)</td><td>integer(int64)</td></tr><tr><td>generic</td><td>是否是普通参数</td><td>boolean</td><td></td></tr><tr><td>groupId</td><td>规格组ID</td><td>integer(int64)</td><td>integer(int64)</td></tr><tr><td>id</td><td>规格参数ID</td><td>integer(int64)</td><td>integer(int64)</td></tr><tr><td>name</td><td>规格参数名称</td><td>string</td><td></td></tr><tr><td>numeric</td><td>是否是数值类型</td><td>boolean</td><td></td></tr><tr><td>options</td><td>规格参数待选项</td><td>string</td><td></td></tr><tr><td>searching</td><td>是否参与搜索</td><td>boolean</td><td></td></tr><tr><td>segments</td><td>可选数值范围</td><td>string</td><td></td></tr><tr><td>unit</td><td></td><td>数值单位</td><td>数值单位</td></tr></tbody></table><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;generic&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;groupId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;numeric&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;options&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;searching&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;segments&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;unit&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-3-2-业务实现"><a href="#2-3-2-业务实现" class="headerlink" title="2.3.2.业务实现"></a>2.3.2.业务实现</h3><p>在<code>ly-item-service</code>的<code> com.leyou.item.web</code>包的<code>SpecController</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询规格参数集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupId 规格组id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searching 是否搜索</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 参数集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;params&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecParamDTO&gt;&gt; querySpecParams(</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;categoryId&quot;, required = false)</span> Long categoryId,</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;groupId&quot;, required = false)</span> Long groupId,</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;searching&quot;, required = false)</span> Boolean searching</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(paramService.queryParams(categoryId, groupId, searching));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code> com.leyou.item.service</code>包的<code>SpecParamService</code>接口中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;SpecParamDTO&gt; <span class="title">queryParams</span><span class="params">(Long categoryId, Long groupId, Boolean searching)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code> com.leyou.item.service.impl</code>包的<code>SpecParamServiceImpl</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SpecParamDTO&gt; <span class="title">queryParams</span><span class="params">(Long categoryId, Long groupId, Boolean searching)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 健壮性判断</span></span><br><span class="line">    <span class="keyword">if</span>(categoryId == <span class="keyword">null</span> &amp;&amp; groupId == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 条件不能都为空</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;查询条件不能为空！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    List&lt;SpecParam&gt; list = query()</span><br><span class="line">        .eq(categoryId != <span class="keyword">null</span>, <span class="string">&quot;category_id&quot;</span>, categoryId)</span><br><span class="line">        .eq(groupId != <span class="keyword">null</span>, <span class="string">&quot;group_id&quot;</span>, groupId)</span><br><span class="line">        .eq(searching != <span class="keyword">null</span>, <span class="string">&quot;searching&quot;</span>, searching)</span><br><span class="line">        .list();</span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">return</span> SpecParamDTO.convertEntityList(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-新增规格组"><a href="#2-4-新增规格组" class="headerlink" title="2.4.新增规格组"></a>2.4.新增规格组</h2><h3 id="2-4-1接口声明"><a href="#2-4-1接口声明" class="headerlink" title="2.4.1接口声明"></a>2.4.1接口声明</h3><ul><li>接口地址 ： <code>/spec/group</code></li><li>请求方式 ：<code>POST</code></li><li>请求参数类型 ：<code>[&quot;application/json&quot;]</code></li><li>返回值类型 ：无</li></ul><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>groupDTO</td><td>groupDTO</td><td>Object</td><td>true</td><td>SpecGroupDTO</td><td>SpecGroupDTO</td></tr></tbody></table><p><strong>SpecGroupDTO</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>categoryId</td><td>商品分类id</td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>id</td><td>规格租id</td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>name</td><td>规格组名称</td><td>body</td><td>false</td><td>string</td><td></td></tr></tbody></table><p><strong>响应状态</strong></p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>201</td><td>新增成功</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr></tbody></table><p><strong>响应参数</strong></p><p>暂无</p><h3 id="2-4-2-业务实现"><a href="#2-4-2-业务实现" class="headerlink" title="2.4.2.业务实现"></a>2.4.2.业务实现</h3><p>在<code>ly-item-service</code>的<code> com.leyou.item.web</code>包的<code>SpecController</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增规格组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupDTO 规格组信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;group&quot;)</span></span><br><span class="line"><span class="comment">//这里是Void而不是void哈！</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveGroup</span><span class="params">(<span class="meta">@RequestBody</span> SpecGroupDTO groupDTO)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 新增规格组</span></span><br><span class="line">    groupService.save(groupDTO.toEntity(SpecGroup.class));</span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-修改规格组"><a href="#2-5-修改规格组" class="headerlink" title="2.5.修改规格组"></a>2.5.修改规格组</h2><h3 id="2-5-1接口声明"><a href="#2-5-1接口声明" class="headerlink" title="2.5.1接口声明"></a>2.5.1接口声明</h3><ul><li>接口地址 ： <code>/spec/group</code></li><li>请求方式 ：<code>PUT</code></li><li>请求参数类型 ：<code>[&quot;application/json&quot;]</code></li><li>返回值类型 ：无</li></ul><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>groupDTO</td><td>groupDTO</td><td>Object</td><td>true</td><td>SpecGroupDTO</td><td>SpecGroupDTO</td></tr></tbody></table><p><strong>SpecGroupDTO</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>categoryId</td><td>商品分类id</td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>id</td><td>规格租id</td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>name</td><td>规格组名称</td><td>body</td><td>false</td><td>string</td><td></td></tr></tbody></table><p><strong>响应状态</strong></p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>204</td><td>修改成功</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr></tbody></table><p><strong>响应参数</strong></p><p>暂无</p><h3 id="2-5-2-业务实现"><a href="#2-5-2-业务实现" class="headerlink" title="2.5.2.业务实现"></a>2.5.2.业务实现</h3><p>在<code>ly-item-service</code>的<code> com.leyou.item.web</code>包的<code>SpecController</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改规格组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupDTO 规格组信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;group&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateGroup</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@RequestBody</span> SpecGroupDTO groupDTO)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 更新规格组</span></span><br><span class="line">    groupService.updateById(groupDTO.toEntity(SpecGroup.class));</span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-新增规格参数"><a href="#2-6-新增规格参数" class="headerlink" title="2.6.新增规格参数"></a>2.6.新增规格参数</h2><h3 id="2-6-1接口声明"><a href="#2-6-1接口声明" class="headerlink" title="2.6.1接口声明"></a>2.6.1接口声明</h3><ul><li>接口地址：<code>/spec/param</code></li><li>请求方式 ： <code>POST</code></li><li>请求参数 ： <code>[&quot;application/json&quot;]</code></li><li>返回值类型 ：无</li></ul><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>body</td><td>paramDTO</td><td>body</td><td>true</td><td>SpecParamDTO</td><td>SpecParamDTO</td></tr></tbody></table><p><strong>SpecParamDTO</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>categoryId</td><td>商品分类ID</td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>generic</td><td>是否是普通参数</td><td>body</td><td>false</td><td>boolean</td><td></td></tr><tr><td>groupId</td><td>规格组ID</td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>id</td><td>规格参数ID</td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>name</td><td>规格参数名称</td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>numeric</td><td>是否是数值类型</td><td>body</td><td>false</td><td>boolean</td><td></td></tr><tr><td>options</td><td>规格参数待选项</td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>searching</td><td>是否参与搜索</td><td>body</td><td>false</td><td>boolean</td><td></td></tr><tr><td>segments</td><td>可选数值范围</td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>unit</td><td></td><td>body</td><td>false</td><td>数值单位</td><td></td></tr></tbody></table><p><strong>响应状态</strong></p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>201</td><td>新增成功</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr></tbody></table><p><strong>响应参数</strong></p><p>暂无</p><h3 id="2-6-2-业务实现"><a href="#2-6-2-业务实现" class="headerlink" title="2.6.2.业务实现"></a>2.6.2.业务实现</h3><p>在<code>ly-item-service</code>的<code> com.leyou.item.web</code>包的<code>SpecController</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增规格参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramDTO 规格组信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveParam</span><span class="params">(<span class="meta">@RequestBody</span> SpecParamDTO paramDTO)</span></span>&#123;</span><br><span class="line">    paramService.save(paramDTO.toEntity(SpecParam.class));</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-修改规格参数"><a href="#2-7-修改规格参数" class="headerlink" title="2.7.修改规格参数"></a>2.7.修改规格参数</h2><h3 id="2-7-1接口声明"><a href="#2-7-1接口声明" class="headerlink" title="2.7.1接口声明"></a>2.7.1接口声明</h3><ul><li>接口地址：<code>/spec/param</code></li><li>请求方式 ： <code>PUT</code></li><li>请求参数 ： <code>[&quot;application/json&quot;]</code></li><li>返回值类型 ：无</li></ul><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>body</td><td>paramDTO</td><td>body</td><td>true</td><td>SpecParamDTO</td><td>SpecParamDTO</td></tr></tbody></table><p><strong>SpecParamDTO</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>categoryId</td><td>商品分类ID</td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>generic</td><td>是否是普通参数</td><td>body</td><td>false</td><td>boolean</td><td></td></tr><tr><td>groupId</td><td>规格组ID</td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>id</td><td>规格参数ID</td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>name</td><td>规格参数名称</td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>numeric</td><td>是否是数值类型</td><td>body</td><td>false</td><td>boolean</td><td></td></tr><tr><td>options</td><td>规格参数待选项</td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>searching</td><td>是否参与搜索</td><td>body</td><td>false</td><td>boolean</td><td></td></tr><tr><td>segments</td><td>可选数值范围</td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>unit</td><td></td><td>body</td><td>false</td><td>数值单位</td><td></td></tr></tbody></table><p><strong>响应状态</strong></p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>204</td><td>修改成功</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr></tbody></table><p><strong>响应参数</strong></p><p>暂无</p><h3 id="2-7-2-业务实现"><a href="#2-7-2-业务实现" class="headerlink" title="2.7.2.业务实现"></a>2.7.2.业务实现</h3><p>在<code>ly-item-service</code>的<code> com.leyou.item.web</code>包的<code>SpecController</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改规格参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramDTO 规格组信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateParam</span><span class="params">(<span class="meta">@RequestBody</span> SpecParamDTO paramDTO)</span></span>&#123;</span><br><span class="line">    paramService.updateById(paramDTO.toEntity(SpecParam.class));</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-8-查询规格组及规格参数"><a href="#2-8-查询规格组及规格参数" class="headerlink" title="2.8.查询规格组及规格参数"></a>2.8.查询规格组及规格参数</h2><p>根据<strong>商品分类id</strong>查询<strong>规格组及组内参数</strong></p><h3 id="2-8-1接口声明"><a href="#2-8-1接口声明" class="headerlink" title="2.8.1接口声明"></a>2.8.1接口声明</h3><ul><li>接口地址： <code>/spec/list</code></li><li>请求方式 ：<code>GET</code></li><li>请求参数类型：<code>基本类型包装类</code></li><li>返回值类型 ：<code>[&quot;application/json&quot;]</code></li></ul><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>id</td><td>商品分类id</td><td>query</td><td>false</td><td>integer</td><td></td></tr></tbody></table><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span>: <span class="number">76</span>,</span><br><span class="line"><span class="attr">&quot;generic&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;groupId&quot;</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;屏幕尺寸&quot;</span>,</span><br><span class="line"><span class="attr">&quot;numeric&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;options&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;searching&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;segments&quot;</span>: <span class="string">&quot;0-3.5,3.6-4.3,4.4-4.7,4.8-5.5,5.6-5.9,6.0-&quot;</span>,</span><br><span class="line"><span class="attr">&quot;unit&quot;</span>: <span class="string">&quot;英寸&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-3-2-业务实现-1"><a href="#2-3-2-业务实现-1" class="headerlink" title="2.3.2.业务实现"></a>2.3.2.业务实现</h3><p>在<code>ly-item-service</code>的<code> com.leyou.item.web</code>包的<code>SpecController</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询规格组及组内参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 规格组集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecGroupDTO&gt;&gt; querySpecList(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long categoryId) &#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(groupService.querySpecList(categoryId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code> com.leyou.item.service</code>包的<code>SpecGroupService</code>接口中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;SpecGroupDTO&gt; <span class="title">querySpecList</span><span class="params">(Long categoryId)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code> com.leyou.item.service.impl</code>包的<code>SpecGroupServiceImpl</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SpecGroupDTO&gt; <span class="title">querySpecList</span><span class="params">(Long categoryId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询规格组</span></span><br><span class="line">    List&lt;SpecGroupDTO&gt; groupList = SpecGroupDTO.convertEntityList(query().eq(<span class="string">&quot;category_id&quot;</span>, categoryId).list());</span><br><span class="line">    <span class="keyword">if</span>(CollectionUtils.isEmpty(groupList))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">404</span>, <span class="string">&quot;该分类下的规格组不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询规格参数</span></span><br><span class="line">    List&lt;SpecParamDTO&gt; paramList = paramService.queryParams(categoryId, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 对规格参数分组，groupId一致的在一组</span></span><br><span class="line">    Map&lt;Long, List&lt;SpecParamDTO&gt;&gt; map = paramList.stream().collect(Collectors.groupingBy(SpecParamDTO::getGroupId));</span><br><span class="line">    <span class="comment">// 把参数放入group#############这里最好用stream流来完成遍历设置参数哈！！！</span></span><br><span class="line">    <span class="keyword">for</span> (SpecGroupDTO groupDTO : groupList) &#123;</span><br><span class="line">        groupDTO.setParams(map.get(groupDTO.getId()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> groupList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据<strong>商品分类id</strong>来查询<strong>规格参数组</strong>以及组对应的<strong>组内参数</strong>的小结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">上面的代码是比较合理的或者说是优化后的代码，普通代码(优化前代码)：</span></span><br><span class="line"><span class="attr">根据商品id查询规格组表，将查询到的数组封装到specGroupDTO中，</span></span><br><span class="line"><span class="attr">但是specGroupDTO中的params参数为空，因此还得去参数表中，根据specGroupDTO中的组id去查询参数表格，</span></span><br><span class="line"><span class="attr">得到对应的组id的所有参数（有哪些参数变量，并不是具体的参数哦，目前讲的都是spu，不是sku）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">代码优化：</span></span><br><span class="line"><span class="attr">上面的查询方式是每遍历一个specGroupDTO的组id然后再查询对应的参数类型，这样子每一个组都要去查询参数表，</span></span><br><span class="line"><span class="attr">效率比较低，因此可以：先根据商品id查询参数表得到该商品的所有参数信息，</span></span><br><span class="line"><span class="meta">再通过java</span> <span class="string">se的聚合函数以及stream的映射方法，</span></span><br><span class="line"><span class="attr">就可以得到每个组对应的参数信息了。再封装到specGroupDTO的params变量中去！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">普遍意义的代码优化：</span></span><br><span class="line"><span class="attr">1</span> <span class="string">代码更精简</span></span><br><span class="line"><span class="attr">2</span> <span class="string">时间，空间能达到最优，特别是面试算法题对复杂度的考察！</span></span><br><span class="line"><span class="attr">复杂度的优化除了本身的变量所占用的内存，运行次数，还要从一下两个点进行优化：</span></span><br><span class="line"><span class="attr">（1）减少IO，数据库的访问次数</span></span><br><span class="line"><span class="attr">（2）加入缓存！</span></span><br></pre></td></tr></table></figure><p>上面所有的<strong>业务逻辑代码小结</strong>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">后端到底如何解析传递过来的url参数，</span></span><br><span class="line"><span class="attr">是取决于url发起请求的请求头content-type字段的内容决定的，</span></span><br><span class="line"><span class="attr">如果content-type是json格式，那么就以json来解析请求信息。</span></span><br><span class="line"><span class="attr">否则就是普通k-v形式来解析参数。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">2</span> <span class="string">事务隔离</span></span><br><span class="line"><span class="attr">service层代码属于是最底层的业务出来代码，因此尽量不要在service层调用service层的方法。</span></span><br></pre></td></tr></table></figure><h2 id="2-9-页面测试"><a href="#2-9-页面测试" class="headerlink" title="2.9.页面测试"></a>2.9.页面测试</h2><p>再次强调，所有的测试都是现在<strong>maven管理的test目录下先测试service层代码，然后借助标准测试工具测试web层，最后是前端的测试</strong>，这里只是为了方便做笔记，将测试环节放到一起了！</p><p>在首页左侧的菜单中，我们点击菜单中的<code>规格参数</code>：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200712232701199.png" alt="image-20200712232701199"></p><p>可以看到页面发生了变化：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/1552659142800.png" alt="1552659142800"></p><p>可以看到规格参数页面的左侧是一个商品分类的树，右侧暂时是空白。那么问题来了：</p><p>我们这里是规格管理，为什么会显示商品分类信息呢？</p><p>因为规格是跟商品分类绑定的，我们在看到规格参数时，肯定希望知道接下来要管理的是哪个分类下的规格参数。</p><p>所以首先会展现商品分类树，并且提示你要选择商品分类，才能看到规格参数的模板。</p><h3 id="2-9-1-查询规格组测试"><a href="#2-9-1-查询规格组测试" class="headerlink" title="2.9.1.查询规格组测试"></a>2.9.1.查询规格组测试</h3><p>此时，我们点击分类，当点击到某个3级分类时，页面发生了变化：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/1529552321813.png" alt="1529552321813"></p><p>这里验证了根据分类查询规格组的接口没有问题。</p><h3 id="2-9-2-查询规格参数测试"><a href="#2-9-2-查询规格参数测试" class="headerlink" title="2.9.2.查询规格参数测试"></a>2.9.2.查询规格参数测试</h3><p>在刚才的表格中，只显示了规格组信息，但是却没有看到组内的规格参数，那么规格参数信息又保存在哪里呢？</p><p>我们在页面点击某个规格组信息，发现页面发生了变化：</p><p>在页面刷新：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/1529554002905.png" alt="1529554002905"></p><h1 id="3-商品业务"><a href="#3-商品业务" class="headerlink" title="3.商品业务"></a>3.商品业务</h1><p>查看商品业务相关接口：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200215130253735.png" alt="image-20200215130253735"> </p><h2 id="3-1-基本代码"><a href="#3-1-基本代码" class="headerlink" title="3.1.基本代码"></a>3.1.基本代码</h2><h3 id="3-1-1-实体类"><a href="#3-1-1-实体类" class="headerlink" title="3.1.1.实体类"></a>3.1.1.实体类</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.entity</code>包中，添加实体类。</p><p>商品SPU</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_spu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spu</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long brandId;</span><br><span class="line">    <span class="keyword">private</span> Long cid1;<span class="comment">// 1级类目</span></span><br><span class="line">    <span class="keyword">private</span> Long cid2;<span class="comment">// 2级类目</span></span><br><span class="line">    <span class="keyword">private</span> Long cid3;<span class="comment">// 3级类目</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1 三级分类，所以表格有三个cidx</span></span><br><span class="line"><span class="comment">    最终决定的是第三级分类。</span></span><br><span class="line"><span class="comment">    虽然有三个cidx看起来冗余，但是查询显示时，方便多了；</span></span><br><span class="line"><span class="comment">    因为我们最后展示是展示三个分类级别的信息，只有一个cid的话要遍历父类id。。。。。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 商品名称</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">// 搜索标题</span></span><br><span class="line">    <span class="keyword">private</span> Boolean saleable;<span class="comment">// 是否上架</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品详情SpuDetail</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_spu_detail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpuDetail</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long spuId;<span class="comment">// 对应的SPU的id</span></span><br><span class="line">    <span class="keyword">private</span> String description;<span class="comment">// 商品描述</span></span><br><span class="line">    <span class="keyword">private</span> String packingList;<span class="comment">// 包装清单</span></span><br><span class="line">    <span class="keyword">private</span> String afterService;<span class="comment">// 售后服务</span></span><br><span class="line">    <span class="keyword">private</span> String specification;<span class="comment">// 规格参数值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品SKU</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;tb_sku&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sku</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long spuId;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String images;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> Long sold;</span><br><span class="line">    <span class="keyword">private</span> Integer stock;</span><br><span class="line">    <span class="keyword">private</span> String specialSpec;</span><br><span class="line">    <span class="keyword">private</span> String indexes;</span><br><span class="line">    <span class="keyword">private</span> Boolean saleable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-DTO"><a href="#3-1-2-DTO" class="headerlink" title="3.1.2.DTO"></a>3.1.2.DTO</h3><p>在<code>ly-item-pojo</code>的<code>com.leyou.item.dto</code>包中，添加实体类。</p><p>商品SpuDTO，因为<strong>一个SPU包含多个SKU</strong>，而<strong>SPU和SpuDetail是一对一关系</strong>。所以<strong>在SPU的DTO中，持有了SkuDTO的集合，还持有了SpuDetailDTO对象</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpuDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long brandId;</span><br><span class="line">    <span class="keyword">private</span> Long cid1;<span class="comment">// 1级类目</span></span><br><span class="line">    <span class="keyword">private</span> Long cid2;<span class="comment">// 2级类目</span></span><br><span class="line">    <span class="keyword">private</span> Long cid3;<span class="comment">// 3级类目</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 名称</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> Boolean saleable;<span class="comment">// 是否上架</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName; <span class="comment">// 商品分类名称拼接#########</span></span><br><span class="line">    <span class="keyword">private</span> String brandName;<span class="comment">// 品牌名称###############</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品详情########################################</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SpuDetailDTO spuDetail;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * spu下的sku的集合 ##############################</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SkuDTO&gt; skus;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方便同时获取3级分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 3级分类的id集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Long&gt; <span class="title">getCategoryIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(cid1, cid2, cid3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpuDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;SpuDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> list.stream().map(SpuDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品SpuDetailDTO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpuDetailDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long spuId;<span class="comment">// 对应的SPU的id</span></span><br><span class="line">    <span class="keyword">private</span> String description;<span class="comment">// 商品描述</span></span><br><span class="line">    <span class="keyword">private</span> String packingList;<span class="comment">// 包装清单</span></span><br><span class="line">    <span class="keyword">private</span> String afterService;<span class="comment">// 售后服务</span></span><br><span class="line">    <span class="keyword">private</span> String specification;<span class="comment">// 规格参数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpuDetailDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品SkuDTO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkuDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long spuId;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String images;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> String specialSpec;<span class="comment">// 商品特殊规格的键值对</span></span><br><span class="line">    <span class="keyword">private</span> String indexes;<span class="comment">// 商品特殊规格的下标</span></span><br><span class="line">    <span class="keyword">private</span> Boolean saleable;<span class="comment">// 是否有效，逻辑删除用</span></span><br><span class="line">    <span class="keyword">private</span> Integer stock; <span class="comment">// 库存</span></span><br><span class="line">    <span class="keyword">private</span> Long sold; <span class="comment">// 销量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SkuDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;SkuDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.stream().map(SkuDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-mapper"><a href="#3-1-3-mapper" class="headerlink" title="3.1.3.mapper"></a>3.1.3.mapper</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.mapper</code>包中，添加mapper接口。</p><p>SpuMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Spu;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpuMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Spu</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpuDetailMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.SpuDetail;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpuDetailMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">SpuDetail</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SkuMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Sku;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkuMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Sku</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-4-service"><a href="#3-1-4-service" class="headerlink" title="3.1.4.service"></a>3.1.4.service</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包中，添加Service接口。</p><p>SpuService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.PageDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.dto.SpuDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Spu;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpuService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Spu</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SpuDetailService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.SpuDetail;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpuDetailService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">SpuDetail</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SkuService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Sku;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkuService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Sku</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在<code>ly-item-service</code>的<code>com.leyou.item.service.impl</code>包中，添加ServiceImpl实现类。</p><p>SpuServiceImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> （略）</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpuServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">SpuMapper</span>, <span class="title">Spu</span>&gt; <span class="keyword">implements</span> <span class="title">SpuService</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SpuDetailServiceImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> （略）</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpuDetailServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">SpuDetailMapper</span>, <span class="title">SpuDetail</span>&gt; <span class="keyword">implements</span> <span class="title">SpuDetailService</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SkuServiceImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> （略）</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkuServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">SkuMapper</span>, <span class="title">Sku</span>&gt; <span class="keyword">implements</span> <span class="title">SkuService</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-1-5-controller"><a href="#3-1-5-controller" class="headerlink" title="3.1.5.controller"></a>3.1.5.controller</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.web</code>包中，添加Conroller。先注入service层对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> （略）</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpuService spuService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpuDetailService detailService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SkuService skuService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GoodsController</span><span class="params">(SpuService SpuService, SpuDetailService detailService, SkuService skuService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.spuService = SpuService;</span><br><span class="line">        <span class="keyword">this</span>.detailService = detailService;</span><br><span class="line">        <span class="keyword">this</span>.skuService = skuService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-商品分页查询"><a href="#3-2-商品分页查询" class="headerlink" title="3.2.商品分页查询"></a>3.2.商品分页查询</h2><p>点击左侧菜单的商品列表按钮，可以看到商品的列表查询页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200712233759159.png" alt="image-20200712233759159"> </p><p>并且控制台也已经发出请求：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200215223254488.png" alt="image-20200215223254488"></p><h3 id="3-2-1-接口声明"><a href="#3-2-1-接口声明" class="headerlink" title="3.2.1.接口声明"></a>3.2.1.接口声明</h3><p><strong>请求信息：</strong></p><ul><li><p>接口地址： <code>/goods/spu/page</code></p></li><li><p>请求方式： <code>GET</code></p></li><li><p>请求格式：<code>form</code></p></li><li><p>响应格式： <code>application/json</code></p></li></ul><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>brandId</td><td>品牌id</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>categoryId</td><td>商品分类id</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>id</td><td>商品spu的ID</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>page</td><td>当前页码</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>rows</td><td>每页大小</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>saleable</td><td>是否上架</td><td>query</td><td>false</td><td>boolean</td><td></td></tr></tbody></table><p><strong>响应参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th><th>schema</th></tr></thead><tbody><tr><td>items</td><td>当前页数据</td><td>array</td><td>PageSpuDTO</td></tr><tr><td>total</td><td>总条数</td><td>integer(int64)</td><td>integer(int64)</td></tr><tr><td>totalPage</td><td>总页数</td><td>integer(int64)</td><td>integer(int64)</td></tr></tbody></table><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;items&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;brandId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;brandName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;cid1&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;cid2&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;cid3&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;saleable&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;total&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;totalPage&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应到DTO中的：<code>PageDTO&lt;SpuDTO&gt;</code></p><h3 id="3-2-2-controller"><a href="#3-2-2-controller" class="headerlink" title="3.2.2.controller"></a>3.2.2.controller</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.web</code>包下的<code>GoodsController</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询spu</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page     当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rows     每页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saleable 上架商品或下降商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brandId 品牌id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  spu的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前页商品数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/spu/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;PageDTO&lt;SpuDTO&gt;&gt; querySpuByPage(</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span> Integer page,</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;rows&quot;, defaultValue = &quot;5&quot;)</span> Integer rows,</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;saleable&quot;, required = false)</span> Boolean saleable,</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;categoryId&quot;, required = false)</span> Long categoryId,</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;brandId&quot;, required = false)</span> Long brandId,</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;id&quot;, required = false)</span> Long id) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(spuService.querySpuByPage(page, rows, saleable, categoryId, brandId, id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-service"><a href="#3-2-3-service" class="headerlink" title="3.2.3.service"></a>3.2.3.service</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下的<code>SpuService</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PageDTO&lt;SpuDTO&gt; <span class="title">querySpuByPage</span><span class="params">(Integer page, Integer rows, Boolean saleable, Long categoryId, Long brandId, Long id)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下的<code>SpuServiceImpl</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageDTO&lt;SpuDTO&gt; <span class="title">querySpuByPage</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            Integer page, Integer rows, Boolean saleable, Long categoryId, Long brandId, Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.健壮性</span></span><br><span class="line">        <span class="keyword">int</span> current = Math.max(page, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> size = Math.max(rows, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.准备查询条件， SELECT * FROM tb_spu WHERE saleable = ? AND category_id = ? AND brand_id = ? AND id = ?</span></span><br><span class="line">        Page&lt;Spu&gt; result = query()</span><br><span class="line">                .eq(saleable != <span class="keyword">null</span>, <span class="string">&quot;saleable&quot;</span>, saleable)</span><br><span class="line">                .eq(categoryId != <span class="keyword">null</span>, <span class="string">&quot;cid3&quot;</span>, categoryId)</span><br><span class="line">                .eq(brandId != <span class="keyword">null</span>, <span class="string">&quot;brand_id&quot;</span>, brandId)</span><br><span class="line">                .eq(id != <span class="keyword">null</span>, <span class="string">&quot;id&quot;</span>, id)</span><br><span class="line">                <span class="comment">// 3.准备分页条件 LIMIT ?, ?</span></span><br><span class="line">                .page(<span class="keyword">new</span> Page&lt;&gt;(current, size));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.解析查询结果</span></span><br><span class="line">        <span class="keyword">long</span> total = result.getTotal();</span><br><span class="line">        <span class="keyword">long</span> pages = result.getPages();</span><br><span class="line">        List&lt;Spu&gt; list = result.getRecords();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.转换DTO</span></span><br><span class="line">        List&lt;SpuDTO&gt; dtoList = SpuDTO.convertEntityList(list);</span><br><span class="line">        <span class="keyword">for</span> (SpuDTO spuDTO : dtoList) &#123;</span><br><span class="line">            <span class="comment">// 查询spu的分类和品牌的名称</span></span><br><span class="line">            handleCategoryAndBrandName(spuDTO);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.封装分页结果并返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageDTO&lt;&gt;(total, pages, dtoList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中，给SPU中添加分类和品牌名称的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCategoryAndBrandName</span><span class="params">(SpuDTO spuDTO)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据品牌id查询品牌名称</span></span><br><span class="line">    Brand brand = brandService.getById(spuDTO.getBrandId());</span><br><span class="line">    <span class="keyword">if</span>(brand != <span class="keyword">null</span>) &#123;</span><br><span class="line">        spuDTO.setBrandName(brand.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据三级分类id查询分类集合</span></span><br><span class="line">    List&lt;Category&gt; categories = categoryService.listByIds(spuDTO.getCategoryIds());</span><br><span class="line">    <span class="keyword">if</span>(!CollectionUtils.isEmpty(categories)) &#123;</span><br><span class="line">        <span class="comment">//注意，根据IDS查到的是CategoryDTO集合，要用Stream流映射为String，也就是只取对象名称。</span></span><br><span class="line">        <span class="comment">// 取出分类的名称，拼接起来</span></span><br><span class="line">        String names = categories.stream().map(Category::getName).collect(Collectors.joining(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        spuDTO.setCategoryName(names);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>商品分页查询总结：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">商品分页查询，查询到的Page&lt;Spu&gt; 还要转为PageDTO&lt;spuDTO&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">而Spu转spuDTO需要额外的商品分类名称以及品牌名称</span> <span class="string">属性值的补充！（因此利用到前面将的tb_brand跟tb_category表）</span></span><br><span class="line">    <span class="attr">前面的DTO属性都是比数据库表字段少；</span></span><br><span class="line">    <span class="attr">而这里的DTO字段比数据库表格字段多，</span></span><br><span class="line"><span class="attr">因此要额外查询然后通过set参数的方法将额外查询的商品分类名称以及品牌名称封装到DTO中！</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-商品新增"><a href="#3-3-商品新增" class="headerlink" title="3.3.商品新增"></a>3.3.商品新增</h2><p>点击商品列表页顶部的新增按钮，即可进入商品新增的表单：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200215223423294.png" alt="image-20200215223423294"></p><p>填写表单信息，然后报存，即可看到请求发出：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200215230043576.png" alt="image-20200215230043576"></p><h3 id="3-3-1-接口声明"><a href="#3-3-1-接口声明" class="headerlink" title="3.3.1.接口声明"></a>3.3.1.接口声明</h3><p><strong>请求信息：</strong></p><ul><li><p>接口地址： <code>/goods</code></p></li><li><p>请求方式： <code>POST</code></p></li><li><p>请求格式：<code>application/json</code></p></li><li><p>响应格式： 无</p></li></ul><p><strong>请求参数</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;brandId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;brandName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;cid1&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;cid2&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;cid3&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;saleable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;skus&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;images&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;indexes&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;price&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;saleable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;specialSpec&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;spuId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;stock&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;spuDetail&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;afterService&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;packingList&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;specification&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;spuId&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-controller"><a href="#3-3-2-controller" class="headerlink" title="3.3.2.controller"></a>3.3.2.controller</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.web</code>包下的<code>GoodsController</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuDTO 页面提交商品信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;spu&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveGoods</span><span class="params">(<span class="meta">@RequestBody</span> SpuDTO spuDTO)</span> </span>&#123;</span><br><span class="line">    spuService.saveGoods(spuDTO);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-service"><a href="#3-3-3-service" class="headerlink" title="3.3.3.service"></a>3.3.3.service</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下的<code>SpuService</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveGoods</span><span class="params">(SpuDTO spuDTO)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下的<code>SpuServiceImpl</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveGoods</span><span class="params">(SpuDTO spuDTO)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.新增Spu</span></span><br><span class="line">    Spu spu = spuDTO.toEntity(Spu.class);</span><br><span class="line">    spu.setSaleable(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">boolean</span> success = save(spu);</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;新增商品失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.新增SpuDetail</span></span><br><span class="line">    SpuDetail spuDetail = spuDTO.getSpuDetail().toEntity(SpuDetail.class);</span><br><span class="line">    spuDetail.setSpuId(spu.getId());</span><br><span class="line">    success = detailService.save(spuDetail);</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;新增商品详情失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.新增Sku</span></span><br><span class="line">    List&lt;Sku&gt; list = spuDTO.getSkus().stream().map(skuDTO -&gt; &#123;</span><br><span class="line">        Sku sku = skuDTO.toEntity(Sku.class);</span><br><span class="line">        sku.setSaleable(<span class="keyword">false</span>);</span><br><span class="line">        sku.setSpuId(spu.getId());</span><br><span class="line">        <span class="keyword">return</span> sku;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 批量新增</span></span><br><span class="line">    skuService.saveBatch(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品新增总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">新增商品，也是传递（spuDTO，spudetailDTO，skusDTO）三个对象过来，</span></span><br><span class="line"><span class="attr">但是spudetailDTO，skusDTO是封装到spuDTO里面的，</span></span><br><span class="line"><span class="attr">因此web层方法只传参spuDTO，我们将三者xxxDTO都转为xxx，然后利用API直接添加到数据库！</span></span><br><span class="line"><span class="attr">注意：后两个对象还要添加spuId值。</span></span><br><span class="line"><span class="attr">新增商品，默认是不上架的。</span></span><br></pre></td></tr></table></figure><h2 id="3-4-商品上下架"><a href="#3-4-商品上下架" class="headerlink" title="3.4.商品上下架"></a>3.4.商品上下架</h2><p>商品修改前，必须先下架，因此要完成商品的上架和下架功能，再完成商品修改。</p><h3 id="3-4-1-接口声明"><a href="#3-4-1-接口声明" class="headerlink" title="3.4.1.接口声明"></a>3.4.1.接口声明</h3><p><strong>请求信息：</strong></p><ul><li><p>接口地址： <code>/goods/saleable</code></p></li><li><p>请求方式： <code>PUT</code></p></li><li><p>请求格式：<code>form</code></p></li><li><p>响应格式： <code>无</code></p></li></ul><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>id</td><td>商品id</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>saleable</td><td>上架或下架</td><td>query</td><td>false</td><td>boolean</td><td></td></tr></tbody></table><p>注意： <strong>商品的上下架是根据spiId来修改spu表格以及sku表格！因为参数id表示的是spu的id。</strong></p><h3 id="3-4-2-controller"><a href="#3-4-2-controller" class="headerlink" title="3.4.2.controller"></a>3.4.2.controller</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.web</code>包下的<code>GoodsController</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改商品上下架</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品spu的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saleable true：上架；false：下架</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;saleable&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateSpuSaleable</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@RequestParam(&quot;id&quot;)</span> Long id,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@RequestParam(&quot;saleable&quot;)</span> Boolean saleable)</span> </span>&#123;</span><br><span class="line">    spuService.updateSaleable(id, saleable);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-service"><a href="#3-4-3-service" class="headerlink" title="3.4.3.service"></a>3.4.3.service</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下的<code>SpuService</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateSaleable</span><span class="params">(Long id, Boolean saleable)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下的<code>SpuServiceImpl</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateSaleable</span><span class="params">(Long id, Boolean saleable)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.更新SPU</span></span><br><span class="line">    Spu spu = <span class="keyword">new</span> Spu();</span><br><span class="line">    spu.setId(id);</span><br><span class="line">    spu.setSaleable(saleable);</span><br><span class="line">    <span class="keyword">boolean</span> success = updateById(spu);</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;更新失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.更新sku</span></span><br><span class="line">    <span class="comment">//update tb_sku set saleable=? where spu_id=?</span></span><br><span class="line">    success =skuService.update().eq(<span class="string">&quot;spu_id&quot;</span>, id).set(<span class="string">&quot;saleable&quot;</span>, saleable).update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;更新失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SPU下架时，其关联的SKU也必须保持下架状态，因此这里业务中不仅更新了SPU表，也更新了SKU表。</strong></p><h2 id="3-5-根据id查询商品"><a href="#3-5-根据id查询商品" class="headerlink" title="3.5.根据id查询商品"></a>3.5.根据id查询商品</h2><p>商品回显时，需要先<strong>根据spu的id查询到商品的spu、sku、spuDetail等信息，商品id也就是spuid。</strong></p><h3 id="3-5-1-接口声明"><a href="#3-5-1-接口声明" class="headerlink" title="3.5.1.接口声明"></a>3.5.1.接口声明</h3><p><strong>请求信息：</strong></p><ul><li><p>接口地址： <code>/goods/&#123;id&#125;</code></p></li><li><p>请求方式： <code>GET</code></p></li><li><p>请求格式：<code>path</code></p></li><li><p>响应格式： <code>application/json</code></p></li></ul><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;brandId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;brandName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;cid1&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;cid2&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;cid3&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;saleable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;skus&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;images&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;indexes&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;price&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;saleable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;specialSpec&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;spuId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;stock&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;spuDetail&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;afterService&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;packingList&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;specification&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;spuId&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-controller"><a href="#3-5-2-controller" class="headerlink" title="3.5.2.controller"></a>3.5.2.controller</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.web</code>包下的<code>GoodsController</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;SpuDTO&gt; <span class="title">queryGoodsById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(spuService.queryGoodsById(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-service"><a href="#3-5-3-service" class="headerlink" title="3.5.3.service"></a>3.5.3.service</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下的<code>SpuService</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SpuDTO <span class="title">queryGoodsById</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下的<code>SpuServiceImpl</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">商品查询：</span></span><br><span class="line"><span class="comment">根据商品id查询商品（spu，spudetail，sku）</span></span><br><span class="line"><span class="comment">查询spu封装到spuDTO中，然后再查询spudetail，sku，封装到spuDTO中</span></span><br><span class="line"><span class="comment">注意，还是跟新增商品一样，还要将商品的品牌名称跟 拼接的三级分类商品名称 封装到spuDTO中！</span></span><br><span class="line"><span class="comment">而想要得到 商品的品牌名称跟 拼接的三级分类商品名称 需要查询tb_brand 跟tb_category表格。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SpuDTO <span class="title">queryGoodsById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.查询spu</span></span><br><span class="line">    <span class="comment">// 1.1.查询</span></span><br><span class="line">    Spu spu = getById(id);</span><br><span class="line">    <span class="keyword">if</span> (spu == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;商品id不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1.2.转换DTO</span></span><br><span class="line">    SpuDTO spuDTO = <span class="keyword">new</span> SpuDTO(spu);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.查询spuDetail</span></span><br><span class="line">    SpuDetail detail = detailService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (detail == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;商品id不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    spuDTO.setSpuDetail(<span class="keyword">new</span> SpuDetailDTO(detail));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.查询sku</span></span><br><span class="line">    List&lt;Sku&gt; list = skuService.query().eq(<span class="string">&quot;spu_id&quot;</span>, id).list();</span><br><span class="line">    <span class="keyword">if</span>(CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;商品id不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    spuDTO.setSkus(SkuDTO.convertEntityList(list));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.准备商品分类和品牌名称</span></span><br><span class="line">    handleCategoryAndBrandName(spuDTO);<span class="comment">//该方法在前面“新增产品哈！！！！！！！！！</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> spuDTO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-6-商品修改"><a href="#3-6-商品修改" class="headerlink" title="3.6.商品修改"></a>3.6.商品修改</h2><p>在商品列表页面，点击修改后，进入商品表单，填写后保存，会发现请求已经发出。而且，如果你只修改了SKU信息，请求参数中只有sku：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200215232407944.png" alt="image-20200215232407944"></p><p>如果你修改了SPU，则参数中会有SPU中被修改的数据：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200215233340859.png" alt="image-20200215233340859"> </p><p>如果修改了SpuDetail相关数据，则参数中会有SpuDetail被修改的数据：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200215233514389.png" alt="image-20200215233514389"> </p><p>如果新增了SKU数据，则新增的数据不包含id，修改的数据保护ID：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200216000651955.png" alt="image-20200216000651955"></p><p>如果有sku的被删除，那么我们前端会获取这个sku的id，并且指定一个属性：saleable为false：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/4%E5%95%86%E5%93%81%E8%AE%BE%E8%AE%A1/image-20200319142641297.png" alt="image-20200319142641297"></p><p>要判断sku是否是删除，就看是否包含<code>saleable</code>字段</p><p>因此，我们需要在业务处理时，表单提交的数据做出判断：</p><ul><li><p>是否包含spu信息</p></li><li><p>是否包含spuDetail信息</p></li><li><p>是否包含sku信息</p><ul><li>sku中有没有saleable：<ul><li>有则删除的sku，</li><li>没有则是增或改的sku<ul><li>有id：改</li><li>无id：增</li></ul></li></ul></li></ul><p><strong>修改商品小结：</strong></p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">修改商品时</span></span><br><span class="line"><span class="attr">spu跟spudetail这两个对象是修改哪个变量就只带哪个变量给后端哦</span></span><br><span class="line"><span class="attr">但是sku的修改就比较麻烦，可能删除，修改，新增一起来！</span></span><br><span class="line"><span class="attr">步骤：</span></span><br><span class="line"><span class="attr">1</span> <span class="string">先判断想要修改什么</span></span><br><span class="line"><span class="attr">2</span> <span class="string">如果是spu，spudetail直接从DTO转为实体类，直接update修改；</span></span><br><span class="line">  <span class="attr">如果是修改sku时，将三种情况分离，分离到三个List中；然后再分别利用对应的API修改。</span></span><br></pre></td></tr></table></figure><h3 id="3-6-1-接口声明"><a href="#3-6-1-接口声明" class="headerlink" title="3.6.1.接口声明"></a>3.6.1.接口声明</h3><p><strong>请求信息：</strong></p><ul><li><p>接口地址： <code>/goods</code></p></li><li><p>请求方式： <code>PUT</code></p></li><li><p>请求格式：<code>JSON</code></p></li><li><p>响应格式： <code>无</code></p></li></ul><p><strong>请求参数</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;brandId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;brandName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;cid1&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;cid2&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;cid3&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;saleable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;skus&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;images&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;indexes&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;price&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;saleable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;specialSpec&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;spuId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;stock&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;spuDetail&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;afterService&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;packingList&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;specification&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;spuId&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-2-controller"><a href="#3-6-2-controller" class="headerlink" title="3.6.2.controller"></a>3.6.2.controller</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.web</code>包下的<code>GoodsController</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuDTO 页面提交商品信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;spu&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateGoods</span><span class="params">(<span class="meta">@RequestBody</span> SpuDTO spuDTO)</span> </span>&#123;</span><br><span class="line">    spuService.updateGoods(spuDTO);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-3-service"><a href="#3-6-3-service" class="headerlink" title="3.6.3.service"></a>3.6.3.service</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下的<code>SpuService</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateGoods</span><span class="params">(SpuDTO spuDTO)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下的<code>SpuServiceImpl</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateGoods</span><span class="params">(SpuDTO spuDTO)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.修改spu</span></span><br><span class="line">    <span class="comment">// 1.1.判断是否存在spu的id，有说明需要修改，没有说明不需要</span></span><br><span class="line">    Long spuId = spuDTO.getId();</span><br><span class="line">    <span class="keyword">if</span>(spuId != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 1.2.spu需要修改，更新spu, 转换dto</span></span><br><span class="line">        Spu spu = spuDTO.toEntity(Spu.class);</span><br><span class="line">        <span class="comment">// 1.3.更新</span></span><br><span class="line">        <span class="keyword">boolean</span> success = updateById(spu);</span><br><span class="line">        <span class="keyword">if</span>(!success)&#123;</span><br><span class="line">            <span class="comment">// 更新失败，抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;更新商品失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.修改spuDetail</span></span><br><span class="line">    SpuDetailDTO detailDTO = spuDTO.getSpuDetail();</span><br><span class="line">    <span class="comment">// 2.1.判断是否为null</span></span><br><span class="line">    <span class="keyword">if</span> (detailDTO != <span class="keyword">null</span> &amp;&amp; detailDTO.getSpuId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 2.2.spuDetail存在，需要修改，转换DTO</span></span><br><span class="line">        SpuDetail detail = detailDTO.toEntity(SpuDetail.class);</span><br><span class="line">        <span class="keyword">boolean</span> success = detailService.updateById(detail);</span><br><span class="line">        <span class="keyword">if</span>(!success)&#123;</span><br><span class="line">            <span class="comment">// 更新失败，抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;更新商品失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.修改sku</span></span><br><span class="line">    List&lt;SkuDTO&gt; dtoList = spuDTO.getSkus();</span><br><span class="line">    <span class="comment">// 3.1.判断是否包含sku</span></span><br><span class="line">    <span class="keyword">if</span>(CollectionUtils.isEmpty(dtoList))&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.2.转换DTO，并将sku根据saleable是否为null来分组。null，是新增或修改，不是null是删除</span></span><br><span class="line">    Map&lt;Boolean, List&lt;Sku&gt;&gt; map = dtoList.stream()</span><br><span class="line">        .map(skuDTO -&gt; skuDTO.toEntity(Sku.class))</span><br><span class="line">        .collect(Collectors.groupingBy(sku -&gt; sku.getSaleable() == <span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.3.获取要新增或修改的sku</span></span><br><span class="line">    List&lt;Sku&gt; insertOrUpdateList = map.get(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 如果不为空，则修改或新增</span></span><br><span class="line">    <span class="keyword">if</span>(!CollectionUtils.isEmpty(insertOrUpdateList)) &#123;</span><br><span class="line">        skuService.saveOrUpdateBatch(insertOrUpdateList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.4.获取要删除的sku</span></span><br><span class="line">    List&lt;Sku&gt; deleteSkuList = map.get(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span>(!CollectionUtils.isEmpty(deleteSkuList))&#123;</span><br><span class="line">        <span class="comment">// 存在要删除的sku</span></span><br><span class="line">        List&lt;Long&gt; idList = deleteSkuList.stream().map(Sku::getId).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        skuService.removeByIds(idList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-根据id查询SpuDetail"><a href="#3-7-根据id查询SpuDetail" class="headerlink" title="3.7.根据id查询SpuDetail"></a>3.7.根据id查询SpuDetail</h2><h3 id="3-7-1-接口声明"><a href="#3-7-1-接口声明" class="headerlink" title="3.7.1.接口声明"></a>3.7.1.接口声明</h3><p><strong>请求信息：</strong></p><ul><li><p>接口地址： <code>/goods/spu/detail</code></p></li><li><p>请求方式： <code>GET</code></p></li><li><p>请求格式：<code>form</code></p></li><li><p>响应格式： <code>JSON</code></p></li></ul><p><strong>请求参数</strong></p><table><thead><tr><th align="left">参数名称</th><th align="left">参数说明</th><th align="left">请求类型</th><th align="left">是否必须</th><th align="left">数据类型</th><th align="left">schema</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">商品id</td><td align="left">query</td><td align="left">true</td><td align="left">integer</td><td align="left"></td></tr></tbody></table><p><strong>响应结果</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;afterService&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;packingList&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;specification&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;spuId&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-2-controller"><a href="#3-7-2-controller" class="headerlink" title="3.7.2.controller"></a>3.7.2.controller</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.web</code>包下的<code>GoodsController</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询detail</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品的Detail</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/spu/detail&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;SpuDetailDTO&gt; <span class="title">querySpuDetailById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> SpuDetailDTO(detailService.getById(id)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-根据SpuId查询SKU集合"><a href="#3-8-根据SpuId查询SKU集合" class="headerlink" title="3.8.根据SpuId查询SKU集合"></a>3.8.根据SpuId查询SKU集合</h2><h3 id="3-8-1-接口声明"><a href="#3-8-1-接口声明" class="headerlink" title="3.8.1.接口声明"></a>3.8.1.接口声明</h3><p><strong>请求信息：</strong></p><ul><li><p>接口地址： <code>/goods/sku/of/spu</code></p></li><li><p>请求方式： <code>GET</code></p></li><li><p>请求格式：<code>form</code></p></li><li><p>响应格式： <code>JSON</code></p></li></ul><p><strong>请求参数</strong></p><table><thead><tr><th align="left">参数名称</th><th align="left">参数说明</th><th align="left">请求类型</th><th align="left">是否必须</th><th align="left">数据类型</th><th align="left">schema</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">商品id</td><td align="left">query</td><td align="left">true</td><td align="left">integer</td><td align="left"></td></tr></tbody></table><p><strong>响应结果</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;images&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;indexes&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;price&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;saleable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;specialSpec&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;spuId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;stock&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-8-2-controller"><a href="#3-8-2-controller" class="headerlink" title="3.8.2.controller"></a>3.8.2.controller</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.web</code>包下的<code>GoodsController</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spuID查询sku</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id spuID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> sku的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/sku/of/spu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SkuDTO&gt;&gt; querySkuBySpuId(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(</span><br><span class="line">        SkuDTO.convertEntityList(skuService.query().eq(<span class="string">&quot;spu_id&quot;</span>, id).list())</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-根据id集合查询SKU集合"><a href="#3-9-根据id集合查询SKU集合" class="headerlink" title="3.9.根据id集合查询SKU集合"></a>3.9.根据id集合查询SKU集合</h2><h3 id="3-9-1-接口声明"><a href="#3-9-1-接口声明" class="headerlink" title="3.9.1.接口声明"></a>3.9.1.接口声明</h3><p><strong>请求信息：</strong></p><ul><li><p>接口地址： <code>/goods/sku/list</code></p></li><li><p>请求方式： <code>GET</code></p></li><li><p>请求格式：<code>form</code></p></li><li><p>响应格式： <code>JSON</code></p></li></ul><p><strong>请求参数</strong></p><table><thead><tr><th align="left">参数名称</th><th align="left">参数说明</th><th align="left">请求类型</th><th align="left">是否必须</th><th align="left">数据类型</th><th align="left">schema</th></tr></thead><tbody><tr><td align="left">ids</td><td align="left">sku的id集合</td><td align="left">query</td><td align="left">true</td><td align="left">array</td><td align="left"></td></tr></tbody></table><p><strong>响应结果</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;images&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;indexes&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;price&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;saleable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;specialSpec&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;spuId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;stock&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-9-2-controller"><a href="#3-9-2-controller" class="headerlink" title="3.9.2.controller"></a>3.9.2.controller</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.web</code>包下的<code>GoodsController</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id批量查询sku</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids id的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> sku的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/sku/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SkuDTO&gt;&gt; querySkuBySpuId(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(</span><br><span class="line">        SkuDTO.convertEntityList(skuService.listByIds(ids))</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-10-查询商品规格参数键值对"><a href="#3-10-查询商品规格参数键值对" class="headerlink" title="3.10.查询商品规格参数键值对"></a>3.10.查询商品规格参数键值对</h2><p>根据spuId查询spu的所有规格参数键值对</p><h3 id="3-10-1-接口声明"><a href="#3-10-1-接口声明" class="headerlink" title="3.10.1.接口声明"></a>3.10.1.接口声明</h3><p><strong>请求信息：</strong></p><ul><li><p>接口地址： <code>/goods/spec/value</code></p></li><li><p>请求方式： <code>GET</code></p></li><li><p>请求格式：<code>form</code></p></li><li><p>响应格式： <code>application/json</code></p></li></ul><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>id</td><td>商品spu的ID</td><td>query</td><td>true</td><td>integer</td><td></td></tr><tr><td>searching</td><td>是否参与搜索</td><td>query</td><td>false</td><td>boolean</td><td></td></tr></tbody></table><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span>: <span class="number">76</span>,</span><br><span class="line"><span class="attr">&quot;generic&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;groupId&quot;</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;屏幕尺寸&quot;</span>,</span><br><span class="line"><span class="attr">&quot;numeric&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;options&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;searching&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;segments&quot;</span>: <span class="string">&quot;0-3.5,3.6-4.3,4.4-4.7,4.8-5.5,5.6-5.9,6.0-&quot;</span>,</span><br><span class="line"><span class="attr">&quot;unit&quot;</span>: <span class="string">&quot;英寸&quot;</span>,</span><br><span class="line"><span class="attr">&quot;value&quot;</span>: <span class="string">&quot;5.2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以看出来，这里返回的是一个集合，集合中似乎是SpecParam对象，不过仔细观察，结果中包含一个value属性，也就是规格参数的值。</p><p>这个需要在DTO中表示出来，我们来修改<code>SpecParamDTO</code>，添加value字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecParamDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="keyword">private</span> Long groupId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean numeric;</span><br><span class="line">    <span class="keyword">private</span> String unit;</span><br><span class="line">    <span class="keyword">private</span> Boolean generic;</span><br><span class="line">    <span class="keyword">private</span> Boolean searching;</span><br><span class="line">    <span class="keyword">private</span> String segments;</span><br><span class="line">    <span class="keyword">private</span> String options;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 规格参数值##################添加这个属性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpecParamDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;SpecParamDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.stream().map(SpecParamDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-controller-1"><a href="#3-2-2-controller-1" class="headerlink" title="3.2.2.controller"></a>3.2.2.controller</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.web</code>包下的<code>GoodsController</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spuId查询spu的所有规格参数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id spu的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 规格参数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/spec/value&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecParamDTO&gt;&gt; querySpecsValues(</span><br><span class="line">    <span class="meta">@RequestParam(&quot;id&quot;)</span> Long id, <span class="meta">@RequestParam(value = &quot;searching&quot;, required = false)</span> Boolean searching)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(detailService.querySpecValues(id, searching));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-service-1"><a href="#3-2-3-service-1" class="headerlink" title="3.2.3.service"></a>3.2.3.service</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下的<code>SpuDetailService</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;SpecParamDTO&gt; <span class="title">querySpecValues</span><span class="params">(Long id, Boolean searching)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下的<code>SpuDetailServiceImpl</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> （略）</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpuDetailServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">SpuDetailMapper</span>, <span class="title">SpuDetail</span>&gt; <span class="keyword">implements</span> <span class="title">SpuDetailService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpuMapper spuMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpecParamService paramService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpuDetailServiceImpl</span><span class="params">(SpuMapper spuMapper, SpecParamService paramService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.spuMapper = spuMapper;</span><br><span class="line">        <span class="keyword">this</span>.paramService = paramService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SpecParamDTO&gt; <span class="title">querySpecValues</span><span class="params">(Long id, Boolean searching)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.准备规格参数value</span></span><br><span class="line">        <span class="comment">// 1.1.根据id查询spuDetail</span></span><br><span class="line">        SpuDetail detail =  getById(id);</span><br><span class="line">        <span class="comment">// 1.2.获取其中的规格参数键值对，转为一个map</span></span><br><span class="line">        Map&lt;Long, Object&gt; specValues = JsonUtils.toMap(detail.getSpecification(), Long.class, Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.准备规格参数对象</span></span><br><span class="line">        <span class="comment">// 2.1.根据id查询spu，获取商品分类信息</span></span><br><span class="line">        Spu spu = spuMapper.selectById(id);</span><br><span class="line">        <span class="comment">// 2.2.根据分类id查询规格参数集合，如果searching不为空，还要加上searching条件</span></span><br><span class="line">        List&lt;SpecParamDTO&gt; params = paramService.queryParams(spu.getCid3(), <span class="keyword">null</span>, searching);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.找到param的value，并存储</span></span><br><span class="line">        <span class="keyword">for</span> (SpecParamDTO param : params) &#123;</span><br><span class="line">            param.setValue(specValues.get(param.getId()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-11-根据Id查询商品Spu"><a href="#3-11-根据Id查询商品Spu" class="headerlink" title="3.11.根据Id查询商品Spu"></a>3.11.根据Id查询商品Spu</h2><p>根据spuId查询spu，不包含其它信息</p><h3 id="3-11-1-接口声明"><a href="#3-11-1-接口声明" class="headerlink" title="3.11.1.接口声明"></a>3.11.1.接口声明</h3><p><strong>请求信息：</strong></p><ul><li><p>接口地址： <code>/goods/spu/&#123;id&#125;</code></p></li><li><p>请求方式： <code>GET</code></p></li><li><p>请求格式：<code>path</code></p></li><li><p>响应格式： <code>application/json</code></p></li></ul><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>id</td><td>商品spu的ID</td><td>path</td><td>true</td><td>integer</td><td></td></tr></tbody></table><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;brandId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;cid1&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;cid2&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;cid3&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;saleable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-11-2-controller"><a href="#3-11-2-controller" class="headerlink" title="3.11.2.controller"></a>3.11.2.controller</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.web</code>包下的<code>GoodsController</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/spu/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;SpuDTO&gt; <span class="title">querySpuById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> SpuDTO(spuService.getById(id)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;乐优商城项目-商品数据结构设计&quot;&gt;&lt;a href=&quot;#乐优商城项目-商品数据结构设计&quot; class=&quot;headerlink&quot; title=&quot;乐优商城项目-商品数据结构设计&quot;&gt;&lt;/a&gt;乐优商城项目-商品数据结构设计&lt;/h1&gt;&lt;h1 id=&quot;0-学习目标&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="乐优商城项目" scheme="http://example.com/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-品牌管理</title>
    <link href="http://example.com/2022/06/18/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/06/18/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/</id>
    <published>2022-06-18T14:42:34.000Z</published>
    <updated>2022-06-19T03:05:30.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="乐优商城项目-品牌管理"><a href="#乐优商城项目-品牌管理" class="headerlink" title="乐优商城项目-品牌管理"></a>乐优商城项目-品牌管理</h1><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>了解品牌表结构</li><li>实现品牌相关业务</li><li>实现图片上传的业务</li></ul><h1 id="1-品牌管理业务"><a href="#1-品牌管理业务" class="headerlink" title="1.品牌管理业务"></a>1.品牌管理业务</h1><p>商品都有自己的品牌，而商品分类、商品品牌、商品之间的关系是这样的：</p><ul><li>分类与品牌之间是多对多关系</li><li>分类与商品之间是一对多关系</li><li>品牌与商品之间也是一对多关系</li></ul><p>下面我们来完成品牌相关业务，包括下面的接口：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200127100920241.png" alt="image-20200127100920241"> </p><h2 id="1-1-表结构"><a href="#1-1-表结构" class="headerlink" title="1.1.表结构"></a>1.1.表结构</h2><p>来看下品牌的表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_brand` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;品牌id&#x27;,</span><br><span class="line">  `name` varchar(64) NOT NULL COMMENT &#x27;品牌名称&#x27;,</span><br><span class="line">  `image` varchar(256) DEFAULT &#x27;&#x27; COMMENT &#x27;品牌图片地址&#x27;,</span><br><span class="line">  `letter` char(1) DEFAULT &#x27;&#x27; COMMENT &#x27;品牌的首字母&#x27;,</span><br><span class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#x27;品牌表&#x27;;</span><br></pre></td></tr></table></figure><p>品牌与商品分类是一对多关系，因此他们需要一个中间表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_category_brand` (</span><br><span class="line">  `category_id` bigint(20) NOT NULL COMMENT &#x27;商品类目id&#x27;,</span><br><span class="line">  `brand_id` bigint(20) NOT NULL COMMENT &#x27;品牌id&#x27;,</span><br><span class="line">  PRIMARY KEY (`category_id`,`brand_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#x27;商品分类和品牌的中间表，两者是多对多关系&#x27;;</span><br></pre></td></tr></table></figure><h2 id="1-2-基础代码"><a href="#1-2-基础代码" class="headerlink" title="1.2.基础代码"></a>1.2.基础代码</h2><p>接下来，准备好PO、DTO、Mapper、Service、Controller等。</p><h3 id="1-2-1-实体类"><a href="#1-2-1-实体类" class="headerlink" title="1.2.1.实体类"></a>1.2.1.实体类</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.entity</code>中准备两个PO，分别对应品牌表和中间表：</p><p>品牌实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Brand</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Character letter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间表实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_category_brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryBrand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long brandId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-mapper"><a href="#1-2-2-mapper" class="headerlink" title="1.2.2.mapper"></a>1.2.2.mapper</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.mapper</code>中准备mapper：</p><p>首先是BrandMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Brand;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后是中间表的mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.CategoryBrand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryBrandMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">CategoryBrand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-service"><a href="#1-2-3-service" class="headerlink" title="1.2.3.service"></a>1.2.3.service</h3><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>中准备两个service接口：</p><p>品牌：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Brand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.CategoryBrand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryBrandService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">CategoryBrand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>com.leyou.item.service.impl</code>中准备两个service的实现类：</p><p>brand:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Brand;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.mapper.BrandMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.BrandService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">BrandMapper</span>, <span class="title">Brand</span>&gt; <span class="keyword">implements</span> <span class="title">BrandService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.CategoryBrand;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.mapper.CategoryBrandMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.CategoryBrandService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryBrandServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">CategoryBrandMapper</span>, <span class="title">CategoryBrand</span>&gt; <span class="keyword">implements</span> <span class="title">CategoryBrandService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-controller"><a href="#1-2-4-controller" class="headerlink" title="1.2.4.controller"></a>1.2.4.controller</h3><p>然后是brand的controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.BrandService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BrandService brandService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BrandController</span><span class="params">(BrandService brandService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brandService = brandService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-5-DTO"><a href="#1-2-5-DTO" class="headerlink" title="1.2.5.DTO"></a>1.2.5.DTO</h3><p>查询品牌后，返回的DTO对象，包括：</p><p>在<code>ly-common</code>中的<code>com.leyou.common.dto</code>中的用于封装分页结果的PageDTO：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageDTO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;<span class="comment">// 总条数</span></span><br><span class="line">    <span class="keyword">private</span> Long totalPage;<span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; items;<span class="comment">// 当前页数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageDTO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageDTO</span><span class="params">(Long total, List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageDTO</span><span class="params">(Long total, Long totalPage, List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = totalPage;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-api</code>中的<code>com.leyou.item.dto</code>中的BrandDTO：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Character letter;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; categoryIds;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BrandDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;BrandDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> list.stream().map(BrandDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-根据品牌id查询品牌"><a href="#1-3-根据品牌id查询品牌" class="headerlink" title="1.3.根据品牌id查询品牌"></a>1.3.根据品牌id查询品牌</h2><p>接口信息：</p><ul><li><p>请求方式：<code>Get</code></p></li><li><p>请求路径：<code>/brand/&#123;id&#125;</code></p></li><li><p>请求参数：id，品牌id</p></li><li><p>返回值类型：BrandDTO，并不包含id集合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;image&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;letter&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的BrandController中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 品牌的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 品牌对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;BrandDTO&gt; <span class="title">queryBrandById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> BrandDTO(brandService.getById(id)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-根据品牌id集合查询品牌集合"><a href="#1-4-根据品牌id集合查询品牌集合" class="headerlink" title="1.4.根据品牌id集合查询品牌集合"></a>1.4.根据品牌id集合查询品牌集合</h2><p>接口信息：</p><ul><li>请求方式：<code>Get</code></li><li>请求路径：<code>/brand/list</code></li><li>请求参数：ids，品牌id的集合</li><li>返回值类型：BrandDTO的集合</li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的BrandController中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据品牌id集合查询品牌集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList id集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BrandDTO 集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;BrandDTO&gt;&gt; queryBrandByIds(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; idList)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(BrandDTO.convertEntityList(brandService.listByIds(idList)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-分页查询品牌"><a href="#1-5-分页查询品牌" class="headerlink" title="1.5.分页查询品牌"></a>1.5.分页查询品牌</h2><p>接口信息：</p><ul><li><p>请求方式：<code>Get</code></p></li><li><p>请求路径：<code>/brand/page</code></p></li><li><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th></tr></thead><tbody><tr><td>key</td><td>搜索条件</td><td>query</td><td>false</td><td>string</td></tr><tr><td>page</td><td>当前页码</td><td>query</td><td>false</td><td>integer</td></tr><tr><td>rows</td><td>每页大小</td><td>query</td><td>false</td><td>integer</td></tr></tbody></table></li><li><p>返回值类型：分页结果PageDTO，其中包含BrandDTO集合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;items&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;image&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;letter&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;total&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;totalPage&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的<code>BrandController</code>中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 当前页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rows 每页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 品牌分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;PageDTO&lt;BrandDTO&gt;&gt; queryBrandByPage(</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span>Integer page,</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;rows&quot;, defaultValue = &quot;5&quot;)</span>Integer rows,</span><br><span class="line">    <span class="meta">@RequestParam(value = &quot;key&quot;, required = false)</span>String key</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity</span><br><span class="line">        .ok(brandService.queryBrandByPage(page,rows, key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service</code>的<code>BrandService</code>中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rows 每页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 搜索关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function">PageDTO&lt;BrandDTO&gt; <span class="title">queryBrandByPage</span><span class="params">(Integer page, Integer rows, String key)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service.impl</code>的<code>BrandServiceImpl</code>中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> PageDTO&lt;BrandDTO&gt; <span class="title">queryBrandByPage</span><span class="params">(Integer page, Integer rows, String key)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 1.分页信息的健壮性处理</span></span><br><span class="line">       page = Math.min(page, <span class="number">100</span>);</span><br><span class="line">       rows = Math.max(rows, <span class="number">5</span>);</span><br><span class="line">       <span class="comment">// 2.分页</span></span><br><span class="line">       Page&lt;Brand&gt; info = <span class="keyword">new</span> Page&lt;&gt;(page, rows);</span><br><span class="line">       <span class="comment">// 3.判断key是否存在</span></span><br><span class="line">       <span class="keyword">boolean</span> isKeyExists = StringUtils.isNoneBlank(key);</span><br><span class="line">       <span class="comment">// 4.如果key存在，添加like和eq的查询条件，否则不添加######动态sql</span></span><br><span class="line">       query().like(isKeyExists, <span class="string">&quot;name&quot;</span>, key)</span><br><span class="line">               .or()</span><br><span class="line">               .eq(isKeyExists, <span class="string">&quot;letter&quot;</span>, key)</span><br><span class="line">               .page(info);</span><br><span class="line">       <span class="comment">// 5.封装结果</span></span><br><span class="line">       List&lt;Brand&gt; list = info.getRecords();</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> PageDTO&lt;&gt;(info.getTotal(), info.getPages(), BrandDTO.convertEntityList(list));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-根据分类id查询品牌"><a href="#1-6-根据分类id查询品牌" class="headerlink" title="1.6.根据分类id查询品牌"></a>1.6.根据分类id查询品牌</h2><p>接口信息：</p><ul><li>请求方式：<code>Get</code></li><li>请求路径：<code>/brand/of/category</code></li><li>请求参数：id，分类的id</li><li>返回值类型：BrandDTO的集合</li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的BrandController中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类查询品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 品牌集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;BrandDTO&gt;&gt; queryBrandByCategory(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(brandService.queryBrandByCategory(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service</code>的<code>BrandService</code>中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 品牌集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function">List&lt;BrandDTO&gt; <span class="title">queryBrandByCategory</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure><p>分类和品牌之间是通过中间表联系的，因此要想实现这个功能，需要结合中间表完成查询，实现思路有两种：</p><ul><li><p>思路一：关联查询:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">b.id, b.name, b.letter, b.image </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">tb_category_brand cb </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">tb_brand b <span class="keyword">ON</span> b.id <span class="operator">=</span> cb.brand_id </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">cb.category_id <span class="operator">=</span> #&#123;cid&#125;</span><br></pre></td></tr></table></figure></li><li><p>思路二：子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">id,</span><br><span class="line">`name`,</span><br><span class="line">letter,</span><br><span class="line">image </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">tb_brand</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> brand_id <span class="keyword">FROM</span> tb_category_brand <span class="keyword">WHERE</span> category_id <span class="operator">=</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul><p>这里我们采用思路1.</p><p>首先在<code>ly-item-service</code>中的<code>com.leyou.item.mapper</code>的在<code>BrandMapper</code>中添加一个新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT b.id, b.name, b.letter, b.image FROM tb_category_brand cb INNER JOIN tb_brand b ON b.id = cb.brand_id WHERE cb.category_id = #&#123;cid&#125;&quot;)</span></span><br><span class="line"><span class="function">List&lt;Brand&gt; <span class="title">queryByCategoryId</span><span class="params">(<span class="meta">@Param(&quot;cid&quot;)</span> Long cid)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service.impl</code>的<code>BrandServiceImpl</code>中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;BrandDTO&gt; <span class="title">queryBrandByCategory</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    List&lt;Brand&gt; list = getBaseMapper().queryByCategoryId(id);</span><br><span class="line">    <span class="keyword">return</span> BrandDTO.convertEntityList(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-新增品牌"><a href="#1-7-新增品牌" class="headerlink" title="1.7.新增品牌"></a>1.7.新增品牌</h2><p>解析：<strong>新增品牌，应该是给tb_brand 表格添加信息，中间表tb_categorybrand添加数据</strong>。<strong>一个品牌有多种分类</strong>！！！</p><p>接口信息：</p><ul><li><p>请求方式：<code>POST</code></p></li><li><p>请求路径：<code>/brand</code></p></li><li><p>请求参数：BrandDTO对象</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>categoryIds</td><td>品牌相关的分类ID的集合</td><td>query</td><td>true</td><td>string</td><td></td></tr><tr><td>image</td><td>品牌LOGO</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>letter</td><td>品牌首字母</td><td>query</td><td>true</td><td>string</td><td></td></tr><tr><td>name</td><td>品牌名称</td><td>query</td><td>true</td><td>string</td><td></td></tr></tbody></table></li><li><p>返回值类型：无，状态码</p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>201</td><td>新增成功</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr></tbody></table></li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的BrandController中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brandDTO 品牌对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveBrand</span><span class="params">(BrandDTO brandDTO)</span> </span>&#123;</span><br><span class="line">    brandService.saveBrand(brandDTO);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();<span class="comment">//#####因为是新增，因此返回为null。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service</code>BrandService中添加新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增品牌和中间表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brand 品牌的DTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveBrand</span><span class="params">(BrandDTO brand)</span></span>;</span><br></pre></td></tr></table></figure><p>新增品牌的同时，还需要新增中间表，在<code>ly-item-service</code>中的<code>com.leyou.item.service.impl</code>的<code>BrandServiceImpl</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CategoryBrandService categoryBrandService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BrandServiceImpl</span><span class="params">(CategoryBrandService categoryBrandService)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.categoryBrandService = categoryBrandService;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>  <span class="comment">//###### 新增数据，那么必然是要求事务控制的！</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//##brandDTO对象属性包含了tb_brand 表格部分字段跟categoryBrands表格部分字段。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBrand</span><span class="params">(BrandDTO brandDTO)</span> </span>&#123;</span><br><span class="line">    Brand brand = brandDTO.toEntity(Brand.class);</span><br><span class="line">    <span class="comment">// 保存到表格tb_brand</span></span><br><span class="line">    <span class="keyword">this</span>.save(brand);</span><br><span class="line">    <span class="comment">//封装中间表对象的集合的低级写法：###############################</span></span><br><span class="line">    <span class="comment">/* // 2.获取分类id， 包含手机、空调、洗衣机</span></span><br><span class="line"><span class="comment">        List&lt;Long&gt; categoryIds = brandDTO.getCategoryIds();</span></span><br><span class="line"><span class="comment">        // 3.封装中间表对象集合</span></span><br><span class="line"><span class="comment">        Long brandId = brand.getId();// 小米</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        List&lt;CategoryBrand&gt; categoryBrands = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        for (Long categoryId : categoryIds) &#123;</span></span><br><span class="line"><span class="comment">            // 创建中间表对象</span></span><br><span class="line"><span class="comment">            CategoryBrand categoryBrand = CategoryBrand.of(categoryId, brandId);</span></span><br><span class="line"><span class="comment">            categoryBrands.add(categoryBrand);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    <span class="comment">// 封装中间表对象的集合的高级写法：###############################</span></span><br><span class="line">    List&lt;CategoryBrand&gt; list = brandDTO.getCategoryIds().stream()</span><br><span class="line">        .map(id -&gt; CategoryBrand.of(id, brand.getId()))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 批量写入中间表数据</span></span><br><span class="line">    categoryBrandService.saveBatch(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-8-更新品牌"><a href="#1-8-更新品牌" class="headerlink" title="1.8.更新品牌"></a>1.8.更新品牌</h2><p>接口信息：</p><ul><li><p>请求方式：<code>PUT</code></p></li><li><p>请求路径：<code>/brand</code></p></li><li><p>请求参数：BrandDTO对象</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th></tr></thead><tbody><tr><td>id</td><td>品牌的id</td><td>query</td><td>true</td><td>long</td></tr><tr><td>categoryIds</td><td>品牌相关的分类ID的集合</td><td>query</td><td>true</td><td>string</td></tr><tr><td>image</td><td>品牌LOGO</td><td>query</td><td>false</td><td>string</td></tr><tr><td>letter</td><td>品牌首字母</td><td>query</td><td>true</td><td>string</td></tr><tr><td>name</td><td>品牌名称</td><td>query</td><td>true</td><td>string</td></tr></tbody></table></li><li><p>返回值类型：无，状态码</p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>201</td><td>新增成功</td></tr><tr><td>401</td><td>Unauthorized</td></tr><tr><td>403</td><td>Forbidden</td></tr><tr><td>404</td><td>Not Found</td></tr></tbody></table></li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的BrandController中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改品牌</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brandDTO 品牌及分类信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span>  <span class="comment">//##########这里编程了Put</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateBrand</span><span class="params">(BrandDTO brandDTO)</span> </span>&#123;</span><br><span class="line">    brandService.updateBrand(brandDTO);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();<span class="comment">//还是返回null，但是状态变为NO_CONTENT</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service</code>BrandService中添加新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新品牌</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brandDTO 品牌的DTO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateBrand</span><span class="params">(BrandDTO brandDTO)</span></span>;</span><br></pre></td></tr></table></figure><p>更新品牌还需要同时完成中间表更新。而中间表本身没有其它属性，只包含品牌和分类的id，因此不能修改，只能先删除之前的数据，然后再新增。</p><p>在<code>ly-item-service</code>中的<code>com.leyou.item.service.impl</code>的<code>BrandServiceImpl</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>   <span class="comment">//###########还是事务控制，别忘了。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBrand</span><span class="params">(BrandDTO brandDTO)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.更新品牌</span></span><br><span class="line">    <span class="keyword">boolean</span> success = updateById(brandDTO.toEntity(Brand.class));</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">// 更新失败，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;更新品牌失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.根据品牌id删除中间表数据</span></span><br><span class="line">    success = categoryBrandService.remove(</span><br><span class="line">        <span class="keyword">new</span> QueryWrapper&lt;CategoryBrand&gt;().eq(<span class="string">&quot;brand_id&quot;</span>, brandDTO.getId()));</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">// 更新失败，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>,<span class="string">&quot;更新品牌失败，删除中间表数据出错&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.重新插入中间表数据</span></span><br><span class="line">    List&lt;CategoryBrand&gt; list = brandDTO.getCategoryIds().stream()</span><br><span class="line">        .map(id -&gt; CategoryBrand.of(id, brandDTO.getId()))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 批量写入中间表数据</span></span><br><span class="line">    categoryBrandService.saveBatch(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-9-根据ID删除品牌"><a href="#1-9-根据ID删除品牌" class="headerlink" title="1.9.根据ID删除品牌"></a>1.9.根据ID删除品牌</h2><p>接口信息：</p><ul><li>请求方式：<code>DELETE</code></li><li>请求路径：<code>/brand/&#123;id&#125;</code></li><li>请求参数：id，品牌的id</li><li>返回值类型：无</li></ul><p>在<code>ly-item-service</code>中的<code>com.leyou.item.web</code>的BrandController中，添加代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 要删除的品牌id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">deleteBrandById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 删除品牌表</span></span><br><span class="line">    brandService.removeById(id);</span><br><span class="line">    <span class="comment">// TODO 删除中间表</span></span><br><span class="line">    categoryBrandService.remove(</span><br><span class="line">        <span class="keyword">new</span> QueryWrapper&lt;CategoryBrand&gt;().eq(<span class="string">&quot;brand_id&quot;</span>, id));</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-10-品牌管理页面"><a href="#1-10-品牌管理页面" class="headerlink" title="1.10.品牌管理页面"></a>1.10.品牌管理页面</h2><p>打开后台管理系统，在左侧菜单中点击品牌管理，即可看到品牌管理页面，展示出品牌信息：</p><p> <img src="F:/java/01-重要部分：2021基础就业/06阶段：樂樂项目/day03_品牌管理/笔记/assets/image-20200712222915519.png" alt="image-20200712222915519"></p><p>在这里测试刚刚编写的接口是否可用。</p><p>注意，我们正常开发的测试流程应该是</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">先在maven给的test文件夹下先对每一个service进行测试，看数据库数据是否交互成功</span></span><br><span class="line"><span class="attr">2</span> <span class="string">借助标准测试工具，测试controller层</span></span><br><span class="line"><span class="attr">3</span> <span class="string">在前端进行controller层进行测试</span></span><br></pre></td></tr></table></figure><h1 id="2-图片上传"><a href="#2-图片上传" class="headerlink" title="2.图片上传"></a>2.图片上传</h1><p>点击页面的新增品牌按钮，发现表单中有一个品牌的LOGO图片需要上传：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200127123754172.png" alt="image-20200127123754172"> </p><p>之前我们的业务中并未处理品牌上传功能。</p><p>在早期的单点项目中，我们<strong>上传文件都是保存在tomcat所在服务器的</strong>。这样存在一些问题：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">单机器存储，存储能力有限</span></span><br><span class="line"><span class="meta">-</span> <span class="string">无法进行水平扩展，因为多台机器的文件无法共享,会出现访问不到的情况</span></span><br><span class="line"><span class="meta">-</span> <span class="string">数据没有备份，有单点故障风险</span></span><br><span class="line"><span class="meta">-</span> <span class="string">并发能力差</span></span><br></pre></td></tr></table></figure><p>这个时候，最好使用<strong>分布式文件存储</strong>来代替<strong>本地文件存储</strong>。</p><h2 id="2-1-分布式文件存储"><a href="#2-1-分布式文件存储" class="headerlink" title="2.1.分布式文件存储"></a>2.1.分布式文件存储</h2><p><strong>分布式文件系统</strong>（Distributed File System）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连。 </p><p>通俗来讲：</p><ul><li>传统文件系统管理的文件就存储在本机。</li><li>分布式文件系统管理的文件<strong>存储在很多机器，这些机器通过网络连接，要被统一管理。无论是上传或者访问文件，都需要通过管理中心来访问</strong>;说白了就是，<strong>我们项目，在网页中交互的图片上传，不是上传到本后端主机，而是使用第三方提供的服务，上传到第三方的分布式文件系统中去</strong>！</li></ul><p>常见的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）、FastDFS（淘宝）等。</p><p>不过，<strong>企业自己搭建分布式文件系统成本较高，对于一些中小型企业而言，使用云上的文件存储，是性价比更高的选</strong>择，比如我们今天要学习的<strong>阿里OSS</strong>。</p><h2 id="2-2-阿里云OSS"><a href="#2-2-阿里云OSS" class="headerlink" title="2.2.阿里云OSS"></a>2.2.阿里云OSS</h2><p>阿里的OSS就是一个文件云存储方案：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552265269170.png" alt="1552265269170"></p><p>简介：</p><blockquote><p>阿里云<strong>对象存储服务</strong>（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。其数据设计持久性不低于99.999999999%，服务设计可用性不低于99.99%。具有与平台无关的RESTful API接口，您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><p>您可以使用阿里云提供的API、SDK接口或者OSS迁移工具轻松地将海量数据移入或移出阿里云OSS。数据存储到阿里云OSS以后，您可以选择标准类型（Standard）的阿里云OSS服务作为移动应用、大型网站、图片分享或热点音视频的主要存储方式，也可以选择成本更低、存储期限更长的低频访问类型（Infrequent Access）和归档类型（Archive）的阿里云OSS服务作为不经常访问数据的备份和归档。</p></blockquote><h3 id="2-2-1-开通oss访问"><a href="#2-2-1-开通oss访问" class="headerlink" title="2.2.1 开通oss访问"></a>2.2.1 开通oss访问</h3><p>首先登陆阿里云，然后找到对象存储的产品：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552307302707.png" alt="1552307302707"></p><p>点击进入后，开通服务：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552307241886.png" alt="1552307241886"></p><p>随后即可进入管理控制台：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552307724634.png" alt="1552307724634"></p><h3 id="2-2-2-基本概念"><a href="#2-2-2-基本概念" class="headerlink" title="2.2.2.基本概念"></a>2.2.2.基本概念</h3><p>OSS中包含一些概念，我们来认识一下：</p><ul><li><p>存储类型（Storage Class）</p><p>OSS提供<strong>标准、低频访问、归档</strong>三种存储类型，全面覆盖从热到冷的各种数据存储场景。其中标准存储类型提供高可靠、高可用、高性能的对象存储服务，能够支持频繁的数据访问；低频访问存储类型适合长期保存不经常访问的数据（平均每月访问频率1到2次），存储单价低于标准类型；归档存储类型适合需要长期保存（建议半年以上）的归档数据，在三种存储类型中单价最低。详情请参见<a href="https://help.aliyun.com/document_detail/51374.html#concept-fcn-3xt-tdb">存储类型介绍</a>。</p></li><li><p><code>存储空间（Bucket）</code></p><p>存储空间是您用于存储对象（Object）的容器，所有的对象都必须隶属于某个存储空间。您可以设置和修改存储空间属性用来控制地域、访问权限、生命周期等，这些属性设置直接作用于该存储空间内所有对象，因此您可以通过灵活创建不同的存储空间来完成不同的管理功能。</p></li><li><p>对象/文件（Object）</p><p>对象是 OSS 存储数据的基本单元，也被称为OSS的文件。对象由元信息（Object Meta），用户数据（Data）和文件名（Key）组成。对象由存储空间内部唯一的Key来标识。对象元信息是一组键值对，表示了对象的一些属性，比如最后修改时间、大小等信息，同时您也可以在元信息中存储一些自定义的信息。</p></li><li><p>地域（Region）</p><p>地域表示 OSS 的数据中心所在物理位置。您可以根据费用、请求来源等综合选择数据存储的地域。详情请参见<a href="https://help.aliyun.com/document_detail/31837.html#concept-zt4-cvy-5db">OSS已开通的Region</a>。</p></li><li><p><code>访问域名（Endpoint</code>）</p><p>Endpoint 表示OSS对外服务的访问域名。OSS以HTTP RESTful API的形式对外提供服务，当访问不同地域的时候，需要不同的域名。通过内网和外网访问同一个地域所需要的域名也是不同的。具体的内容请参见<a href="https://help.aliyun.com/document_detail/31837.html#concept-zt4-cvy-5db">各个Region对应的Endpoint</a>。</p></li><li><p><code>访问密钥（AccessKey）</code></p><p>AccessKey，简称 AK，指的是访问身份验证中用到的AccessKeyId 和AccessKeySecret。OSS通过使用AccessKeyId 和AccessKeySecret对称加密的方法来验证某个请求的发送者身份。AccessKeyId用于标识用户，AccessKeySecret是用户用于加密签名字符串和OSS用来验证签名字符串的密钥，其中AccessKeySecret 必须保密。</p></li></ul><p>以上概念中，跟我们开发中密切相关的有三个：</p><ul><li>存储空间（Bucket）</li><li>访问域名（Endpoint）</li><li>访问密钥（AccessKey）：包含了AccessKeyId 和AccessKeySecret。</li></ul><h3 id="2-2-3-创建一个bucket"><a href="#2-2-3-创建一个bucket" class="headerlink" title="2.2.3.创建一个bucket"></a>2.2.3.创建一个bucket</h3><p>在控制台的右侧，可以看到一个<code>新建Bucket</code>按钮：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552308905874.png" alt="1552308905874"></p><p>点击后，弹出对话框，填写基本信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309049398.png" alt="1552309049398"></p><p>注意点：</p><ul><li>bucket：存储空间名称，名字只能是字母、数字、中划线</li><li>区域：即服务器的地址，这里选择了上海</li><li>Endpoint：选中区域后，会自动生成一个Endpoint地址，这将是我们访问OSS服务的域名的组成部分</li><li>存储类型：默认</li><li>读写权限：这里我们选择公共读，否则每次访问都需要额外生成签名并校验，比较麻烦。敏感数据不要请都设置为私有！</li><li>日志：不开通</li></ul><h3 id="2-2-4-创建AccessKey"><a href="#2-2-4-创建AccessKey" class="headerlink" title="2.2.4.创建AccessKey"></a>2.2.4.创建AccessKey</h3><p><strong>有了bucket就可以进行文件上传或下载了</strong>。不过，为了安全考虑，我们给阿里云账户开通一个子账户，并设置对OSS的读写权限。</p><p>点击屏幕右上角的个人图像，然后点击访问控制：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309424324.png" alt="1552309424324"></p><p>在跳转的页面中，选择用户，并新建一个用户：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309517332.png" alt="1552309517332"></p><p>然后填写用户信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309580867.png" alt="1552309580867"></p><p>然后会为你生成用户的AccessKeyID和AccessKeySecret：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309726968.png" alt="1552309726968"></p><p><strong>妥善保管，不要告诉任何人！</strong></p><p>接下来，我们需要给这个用户添加对OSS的控制权限。</p><p>进入这个新增的用户详情页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309892306.png" alt="1552309892306"></p><p>点击添加权限，会进入权限选择页面，输入oss进行搜索，然后选择<code>管理对象存储服务（OSS）</code>权限：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552309962457.png" alt="1552309962457"></p><h2 id="2-3-上传文件最佳实践"><a href="#2-3-上传文件最佳实践" class="headerlink" title="2.3.上传文件最佳实践"></a>2.3.上传文件最佳实践</h2><p>在控制台的右侧，点击<code>开发者指南</code>按钮，即可查看帮助文档：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552310900485.png" alt="1552310900485"></p><p>然后在弹出的新页面的左侧菜单中找到开发者指南：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552310990458.png" alt="1552310990458"> </p><p>可以看到上传文件中，支持多种上传方式，并且因为<strong>提供的Rest风格的API</strong>，<strong>任何语言都可以访问OSS实现上传</strong>。</p><p>我们可以直接<strong>使用java代码来实现把图片上传到OSS</strong>，不过这样以来<strong>文件会先从客户端浏览器上传到我们的服务端tomcat，然后再上传到OSS</strong>，效率较低，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552311281042.png" alt="1552311281042"></p><p>以上方法有三个缺点：</p><ul><li><strong>上传慢。</strong>先上传到应用服务器，再上传到OSS，网络传送比直传到OSS多了一倍。如果直传到OSS，不通过应用服务器，速度将大大提升，而且OSS采用BGP带宽，能保证各地各运营商的速度。</li><li><strong>扩展性差。</strong>如果后续用户多了，应用服务器会成为瓶颈。</li><li><strong>费用高。</strong>需要准备多台应用服务器。由于<strong>OSS上传流量是免费的</strong>，如果数据直传到OSS，不通过应用服务器，那么将能省下几台应用服务器。</li></ul><p>在阿里官方的最佳实践中，推荐了更好的做法：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552311136676.png" alt="1552311136676"> </p><p>阿里官方文档中，对于web前端直传又给出了3种不同方案：</p><ul><li><a href="https://help.aliyun.com/document_detail/31925.html?spm=a2c4g.11186623.2.10.6c5762121wgIAS#concept-frd-4gy-5db">JavaScript客户端签名直传</a>：客户端通过JavaScript代码完成签名，然后通过表单直传数据到OSS。</li><li><a href="https://help.aliyun.com/document_detail/31926.html?spm=a2c4g.11186623.2.11.6c5762121wgIAS#concept-en4-sjy-5db">服务端签名后直传</a>：客户端上传之前，由服务端完成签名，前端获取签名，然后通过表单直传数据到OSS。</li><li><a href="https://help.aliyun.com/document_detail/31927.html?spm=a2c4g.11186623.2.12.6c5762121wgIAS#concept-qp2-g4y-5db">服务端签名直传并设置上传回调</a>：服务端完成签名，并且服务端设置了上传后回调，然后通过表单直传数据到OSS。OSS回调完成后，再将应用服务器响应结果返回给客户端。</li></ul><p>各自有一些优缺点。</p><h3 id="2-3-1-web前端签名后直传"><a href="#2-3-1-web前端签名后直传" class="headerlink" title="2.3.1.web前端签名后直传"></a>2.3.1.web前端签名后直传</h3><p>客户端通过JavaScript代码完成签名，然后通过表单直传数据到OSS。无需访问应用服务器，对应用服务器压力较低。</p><p>流程图如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200127125730699.png" alt="image-20200127125730699"></p><ul><li>JavaScript客户端签名直传：<ul><li>优点：在客户端通过JavaScript代码完成签名，无需过多配置，即可实现直传，非常方便。</li><li>问题：客户端通过JavaScript把AccesssKeyID 和AccessKeySecret写在代码里面<strong>有泄露的风险</strong></li></ul></li><li></li></ul><p><strong>这里我们选择第二种</strong>，因为我们并不需要了解用户上传的文件的情况。</p><h3 id="2-3-2-服务端签名后直传流程"><a href="#2-3-2-服务端签名后直传流程" class="headerlink" title="2.3.2.服务端签名后直传流程"></a>2.3.2.服务端签名后直传流程</h3><p>服务端签名后直传的原理如下：</p><ol><li>用户发送上传Policy请求到应用服务器（我们的微服务）。</li><li>应用服务器返回上传Policy和签名给用户。</li><li>用户直接上传数据到OSS。</li></ol><p>流程图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/1552311833528.png" alt="1552311833528"></p><ul><li>服务端签名，JavaScript客户端直传：<ul><li>优点：Web端向服务端请求签名，然后直接上传，不会对服务端产生压力，而且安全可靠</li><li>问题：服务端无法实时了解用户上传了多少文件，上传了什么文件</li></ul></li></ul><p>在页面点击上传的按钮，可以看到请求已经发出：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200127132348077.png" alt="image-20200127132348077"> </p><p>这正是在<strong>向服务端申请签名</strong>，接下来我们需要在服务端接收请求，生成签名并返回。</p><p><strong>我们要做的事情包括：</strong></p><ul><li><strong>搭建微服务</strong></li><li><strong>在微服务中，提供一个接口，生成文件上传需要的签名</strong><ul><li>分析接口声明，分析请求方式、请求路径、请求参数、返回值类型</li><li>实现业务，生成签名<ul><li>把一些常量配置到yml文件</li><li>编写类，读取这些属性</li><li>把OSS客户端注入到spring容器</li><li>编写业务，实现签名的生成</li><li>解决跨域问题</li></ul></li></ul></li><li>前端，调用我们的接口，获取签名（已完成）</li><li>前端，携带签名，完成上传（已完成）</li></ul><h2 id="2-4-搭建授权签名微服务"><a href="#2-4-搭建授权签名微服务" class="headerlink" title="2.4.搭建授权签名微服务"></a>2.4.搭建授权签名微服务</h2><p>文件上传并不是商品微服务独有的业务，以后的其它业务也可能用到。而且阿里的AccessKey授权也会在多个地方用到。因此我们<strong>把签名授权功能封装到一个独立的微服务中</strong>，专门做各种授权功能。</p><p>为了方便其它微服务调用，我们依然搭建成聚合工程。</p><h3 id="2-4-1-创建父工程"><a href="#2-4-1-创建父工程" class="headerlink" title="2.4.1.创建父工程"></a>2.4.1.创建父工程</h3><h4 id="项目坐标"><a href="#项目坐标" class="headerlink" title="项目坐标"></a>项目坐标</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206191636648.png" alt="image-20200206191636648"></p><h4 id="存放目录"><a href="#存放目录" class="headerlink" title="存放目录"></a>存放目录</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206191651927.png" alt="image-20200206191651927"></p><h4 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h4><p>修改打包方式为POM即可:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-实体类模块"><a href="#2-4-2-实体类模块" class="headerlink" title="2.4.2.实体类模块"></a>2.4.2.实体类模块</h3><h4 id="项目坐标-1"><a href="#项目坐标-1" class="headerlink" title="项目坐标"></a>项目坐标</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206191824371.png" alt="image-20200206191824371"></p><h4 id="存放位置"><a href="#存放位置" class="headerlink" title="存放位置"></a>存放位置</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206191831294.png" alt="image-20200206191831294"></p><h4 id="pom文件-1"><a href="#pom文件-1" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3-API模块"><a href="#2-4-3-API模块" class="headerlink" title="2.4.3.API模块"></a>2.4.3.API模块</h3><p>坐标：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200418161726186.png" alt="image-20200418161726186"></p><p>存储位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200418161751265.png" alt="image-20200418161751265"></p><p>pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-4-业务模块"><a href="#2-4-4-业务模块" class="headerlink" title="2.4.4.业务模块"></a>2.4.4.业务模块</h3><h4 id="项目坐标-2"><a href="#项目坐标-2" class="headerlink" title="项目坐标"></a>项目坐标</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206192039899.png" alt="image-20200206192039899"></p><h4 id="存放位置-1"><a href="#存放位置-1" class="headerlink" title="存放位置"></a>存放位置</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206192044367.png" alt="image-20200206192044367"></p><h4 id="pom文件-2"><a href="#pom文件-2" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--阿里云OSS的SDK--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--auth-pojo--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通用工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><p>在<code>ly-auth-service</code>的<code>com.leyou.auth</code>包下，新建一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.auth&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyAuthApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyAuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在<code>ly-auth-service</code>的<code>resources</code>目录下，新建一个<code>application.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">auth-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h4 id="网关路由"><a href="#网关路由" class="headerlink" title="网关路由"></a>网关路由</h4><p>在<code>ly-gateway</code>的<code>application.yml</code>中，添加对<code>auth-service</code>的路由：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">auth-service</span> <span class="comment"># 授权服务</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://auth-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/auth/**</span></span><br></pre></td></tr></table></figure><h2 id="2-5-前端请求签名"><a href="#2-5-前端请求签名" class="headerlink" title="2.5.前端请求签名"></a>2.5.前端请求签名</h2><p>在品牌新增的表单中，点击图片上传：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206201955511.png" alt="image-20200206201955511"> </p><p>发现请求已经发出：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206201830638.png" alt="image-20200206201830638"> </p><h3 id="2-5-1-请求分析"><a href="#2-5-1-请求分析" class="headerlink" title="2.5.1.请求分析"></a>2.5.1.请求分析</h3><p>请求分析：</p><ul><li>请求方式：Get</li><li>请求路径：/auth/ali/oss/signature</li><li>请求参数：无（如果有登录用户，会携带登录用户信息）</li><li>返回值：这个需要参考阿里云的<a href="https://help.aliyun.com/document_detail/31927.html?spm=a2c4g.11186623.2.13.34f16e285th61w#concept-qp2-g4y-5db">文档</a>介绍</li></ul><h3 id="2-5-2-签名返回值"><a href="#2-5-2-签名返回值" class="headerlink" title="2.5.2.签名返回值"></a>2.5.2.签名返回值</h3><p>有关签名直传的文档部分：<a href="https://help.aliyun.com/document_detail/31927.html?spm=a2c4g.11186623.2.13.34f16e285th61w#concept-qp2-g4y-5db">https://help.aliyun.com/document_detail/31927.html?spm=a2c4g.11186623.2.13.34f16e285th61w#concept-qp2-g4y-5db</a></p><p>其中，服务端签名返回给服务端的内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;accessId&quot;</span>:<span class="string">&quot;6MKO******4AUk44&quot;</span>,</span><br><span class="line"><span class="attr">&quot;host&quot;</span>:<span class="string">&quot;http://post-test.oss-cn-hangzhou.aliyuncs.com&quot;</span>,</span><br><span class="line"><span class="attr">&quot;policy&quot;</span>:<span class="string">&quot;eyJleHBpcmF0aW9uIjoiMjAxNS0xMS0wNVQyMDo1Mjoy******Jjdb25kaXRpb25zIjpbWyJjdb250ZW50LWxlbmd0aC1yYW5nZSIsMCwxMDQ4NTc2MDAwXSxbInN0YXJ0cy13aXRoIiwiJGtleSIsInVzZXItZGlyXC8iXV19&quot;</span>,</span><br><span class="line"><span class="attr">&quot;signature&quot;</span>:<span class="string">&quot;VsxOcOudx******z93CLaXPz+4s=&quot;</span>,</span><br><span class="line"><span class="attr">&quot;expire&quot;</span>:<span class="number">1446727949</span>,</span><br><span class="line"><span class="attr">&quot;dir&quot;</span>:<span class="string">&quot;user-dirs/&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细解释：</p><ul><li><code>accessId</code>：用户的AccessKeyId</li><li><code>host</code>：申请的阿里OSS的bucket访问地址</li><li><code>policy</code>：文件上传的策略，主要包含对上传文件的要求，利用Base64加密后返回，<a href="https://help.aliyun.com/document_detail/31988.html?spm=a2c4g.11186623.2.22.58cd7eaer5eXWw#section-d5z-1ww-wdb">说明文档</a></li><li><code>signature</code>：生成的签名</li><li><code>expire</code>：本次签名的过期时间，客户端可以换成签名，在有效期内无需再次签名</li><li><code>dir</code>：要上传到bucket中的哪个目录</li></ul><p>我们在项目中定义个DTO用来封装这些结果属性：</p><p>在<code>ly-auth-pojo</code>的<code>com.leyou.auth.dto</code>中，添加新的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliOssSignatureDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String accessId;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> String policy;</span><br><span class="line">    <span class="keyword">private</span> String signature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> expire;</span><br><span class="line">    <span class="keyword">private</span> String dir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-服务端接口声明"><a href="#2-5-3-服务端接口声明" class="headerlink" title="2.5.3.服务端接口声明"></a>2.5.3.服务端接口声明</h3><p>根据上面的请求分析，我们可以定义出一个web接口了：</p><p>首先是controller，在<code>ly-auth-service</code>的<code>com.leyou.auth.web</code>包中，新增一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.AliOssSignatureDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里的相关授权接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;ali&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliAuthController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 申请oss签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含签名、图片验证策略等信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/oss/signature&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;AliOssSignatureDTO&gt; <span class="title">getAliSignature</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-服务端生成签名"><a href="#2-6-服务端生成签名" class="headerlink" title="2.6.服务端生成签名"></a>2.6.服务端生成签名</h2><p>根据之前的分析，我们来编写服务端代码，接收前端请求，返回签名结果。这个要参考官方文档中的Demo。</p><p>文档地址：<a href="https://help.aliyun.com/document_detail/91868.html?spm=a2c4g.11186623.2.16.58cd7eaer5eXWw#concept-ahk-rfz-2fb">https://help.aliyun.com/document_detail/91868.html?spm=a2c4g.11186623.2.16.58cd7eaer5eXWw#concept-ahk-rfz-2fb</a></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 基本属性</span></span><br><span class="line">    String accessId = <span class="string">&quot;&lt;yourAccessKeyId&gt;&quot;</span>; <span class="comment">// 请填写您的AccessKeyId。</span></span><br><span class="line">    String accessKey = <span class="string">&quot;&lt;yourAccessKeySecret&gt;&quot;</span>; <span class="comment">// 请填写您的AccessKeySecret。</span></span><br><span class="line">    String endpoint = <span class="string">&quot;oss-cn-hangzhou.aliyuncs.com&quot;</span>; <span class="comment">// 请填写您的 endpoint。</span></span><br><span class="line">    String bucket = <span class="string">&quot;bucket-name&quot;</span>; <span class="comment">// 请填写您的 bucketname 。</span></span><br><span class="line">    String host = <span class="string">&quot;https://&quot;</span> + bucket + <span class="string">&quot;.&quot;</span> + endpoint; <span class="comment">// host的格式为 bucketname.endpoint</span></span><br><span class="line">   </span><br><span class="line">    String dir = <span class="string">&quot;user-dir-prefix/&quot;</span>; <span class="comment">// 用户上传文件时指定的前缀。</span></span><br><span class="line"><span class="comment">// OSS客户端</span></span><br><span class="line">    OSS client = <span class="keyword">new</span> OSSClient(endpoint, accessId, accessKey);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 过期时间</span></span><br><span class="line">        <span class="keyword">long</span> expireTime = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">long</span> expireEndTime = System.currentTimeMillis() + expireTime * <span class="number">1000</span>;</span><br><span class="line">        Date expiration = <span class="keyword">new</span> Date(expireEndTime);</span><br><span class="line">        <span class="comment">// 上传策略条件</span></span><br><span class="line">        PolicyConditions policyConds = <span class="keyword">new</span> PolicyConditions();</span><br><span class="line">        <span class="comment">// 文件大小限制</span></span><br><span class="line">        policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, <span class="number">0</span>, <span class="number">1048576000</span>);</span><br><span class="line">        <span class="comment">// 文件目录限制</span></span><br><span class="line">        policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);</span><br><span class="line"><span class="comment">// 对策略加密</span></span><br><span class="line">        String postPolicy = client.generatePostPolicy(expiration, policyConds);</span><br><span class="line">        <span class="keyword">byte</span>[] binaryData = postPolicy.getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String encodedPolicy = BinaryUtil.toBase64String(binaryData);</span><br><span class="line"><span class="comment">// 生成签名</span></span><br><span class="line">        String postSignature = client.calculatePostSignature(postPolicy);</span><br><span class="line"><span class="comment">// 准备响应结果</span></span><br><span class="line">        Map&lt;String, String&gt; respMap = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">        respMap.put(<span class="string">&quot;accessid&quot;</span>, accessId);</span><br><span class="line">        respMap.put(<span class="string">&quot;policy&quot;</span>, encodedPolicy);</span><br><span class="line">        respMap.put(<span class="string">&quot;signature&quot;</span>, postSignature);</span><br><span class="line">        respMap.put(<span class="string">&quot;dir&quot;</span>, dir);</span><br><span class="line">        respMap.put(<span class="string">&quot;host&quot;</span>, host);</span><br><span class="line">        respMap.put(<span class="string">&quot;expire&quot;</span>, String.valueOf(expireEndTime / <span class="number">1000</span>));</span><br><span class="line"><span class="comment">// 把结果转JSON</span></span><br><span class="line">        JSONObject ja1 = JSONObject.fromObject(respMap);</span><br><span class="line"><span class="comment">// 写入response</span></span><br><span class="line">        response(request, response, ja1.toString());</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-1-配置属性"><a href="#2-6-1-配置属性" class="headerlink" title="2.6.1.配置属性"></a>2.6.1.配置属性</h3><p>在刚刚的Demo中，有许多是值或者与服务器环境有关，需要定义到配置文件中，在<code>application.yaml</code>中添加下面的属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">accessKeyId:</span> <span class="string">LTAI4FhtSrGpB2mq4N36XbGb</span></span><br><span class="line">    <span class="attr">accessKeySecret:</span> <span class="string">OEavFEiAyGm7OsGYff5TClHx88KJ28</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">http://ly-images.oss-cn-shanghai.aliyuncs.com</span> <span class="comment"># 访问oss的bucket的域名</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">oss-cn-shanghai.aliyuncs.com</span> <span class="comment"># 你选择的oss服务器的地址</span></span><br><span class="line">    <span class="attr">dir:</span> <span class="string">&quot;heima01&quot;</span> <span class="comment"># 保存到bucket的某个子目录</span></span><br><span class="line">    <span class="attr">expireTime:</span> <span class="number">1200000</span> <span class="comment"># 过期时间，单位是ms</span></span><br><span class="line">    <span class="attr">maxFileSize:</span> <span class="number">5242880</span> <span class="comment">#文件大小限制，这里是5M</span></span><br></pre></td></tr></table></figure><p>然后，通过一个类来加载这些属性，在<code>ly-auth-service</code>的<code>com.leyou.auth.config</code>中定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;ly.oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OSSProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String dir;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> expireTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxFileSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-2-配置OSS客户端"><a href="#2-6-2-配置OSS客户端" class="headerlink" title="2.6.2.配置OSS客户端"></a>2.6.2.配置OSS客户端</h3><p>OSS上传需要使用阿里提供的客户端API，其中核心是一个名为OSS的接口：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206224145079.png" alt="image-20200206224145079"></p><p>我们在<code>ly-auth-service</code>的<code>com.leyou.auth.config</code>定义一个配置类，将OSS注入到Spring容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OSSConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OSS <span class="title">ossClient</span><span class="params">(OSSProperties prop)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OSSClientBuilder()</span><br><span class="line">                .build(prop.getEndpoint(), prop.getAccessKeyId(), prop.getAccessKeySecret());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-3-service"><a href="#2-6-3-service" class="headerlink" title="2.6.3.service"></a>2.6.3.service</h3><p>定义业务代码，改造阿里提供的Demo，将结果封装为DTO返回.</p><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service</code>中定义Service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.AliOssSignatureDTO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AliAuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成OSS的文件签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">AliOssSignatureDTO <span class="title">getSignature</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service.impl</code>中定义Service的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.common.utils.BinaryUtil;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.MatchMode;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.PolicyConditions;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.config.OSSProperties;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.AliOssSignatureDTO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliAuthServiceImpl</span> <span class="keyword">implements</span> <span class="title">AliAuthService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OSSProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OSS client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AliAuthServiceImpl</span><span class="params">(OSSProperties ossProperties, OSS client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prop = ossProperties;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AliOssSignatureDTO <span class="title">getSignature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.计算过期时间</span></span><br><span class="line">            <span class="keyword">long</span> expireTime = prop.getExpireTime();</span><br><span class="line">            <span class="keyword">long</span> expireEndTime = System.currentTimeMillis() + expireTime;</span><br><span class="line">            Date expiration = <span class="keyword">new</span> Date(expireEndTime);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.设置上传策略</span></span><br><span class="line">            PolicyConditions policyConds = <span class="keyword">new</span> PolicyConditions();</span><br><span class="line">            <span class="comment">// 2.1.文件大小限制</span></span><br><span class="line">            policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, <span class="number">0</span>, prop.getMaxFileSize());</span><br><span class="line">            <span class="comment">// 2.2.上传目录</span></span><br><span class="line">            policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, prop.getDir());</span><br><span class="line">            <span class="comment">// 2.3.生成策略</span></span><br><span class="line">            String postPolicy = client.generatePostPolicy(expiration, policyConds);</span><br><span class="line">            <span class="comment">// 2.4.编码</span></span><br><span class="line">            <span class="keyword">byte</span>[] binaryData = postPolicy.getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            String encodedPolicy = BinaryUtil.toBase64String(binaryData);</span><br><span class="line">            <span class="comment">// 3.生成签名</span></span><br><span class="line">            String postSignature = client.calculatePostSignature(postPolicy);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4.封装要返回的结果</span></span><br><span class="line">            <span class="keyword">return</span> AliOssSignatureDTO.of(prop.getAccessKeyId(), prop.getHost(), encodedPolicy, postSignature, expireEndTime, prop.getDir());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;上传文件失败，原因：&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;文件上传失败！&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-4-补全controller"><a href="#2-6-4-补全controller" class="headerlink" title="2.6.4.补全controller"></a>2.6.4.补全controller</h3><p>我们给<code>ly-auth-service</code>的<code>com.leyou.auth.web</code>包中的<code>AliAuthController</code>补全业务，调用<code>AliAuthService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.AliOssSignatureDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.service.AliAuthService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里的相关授权接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;ali&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliAuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AliAuthService aliAuthService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AliAuthController</span><span class="params">(AliAuthService aliAuthService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aliAuthService = aliAuthService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 申请oss签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含签名、图片验证策略等信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/oss/signature&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;AliOssSignatureDTO&gt; <span class="title">getAliSignature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(aliAuthService.getSignature());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-启动测试"><a href="#2-7-启动测试" class="headerlink" title="2.7.启动测试"></a>2.7.启动测试</h2><p>启动<code>ly-auth-service</code>，并重启<code>ly-auth-gateway</code>，然后测试上传功能。</p><p>发现<strong>签名正确返回</strong>了：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206233442420.png" alt="image-20200206233442420"> </p><p>结果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206233516457.png" alt="image-20200206233516457"> </p><p>但是<strong>上传失败</strong>了，返回了403的状态码：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206233554422.png" alt="image-20200206233554422"> </p><p>浏览器的控制台也报错了：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206233646040.png" alt="image-20200206233646040"></p><p>这是<strong>跨域问题</strong>。</p><h2 id="2-8-解决跨域问题"><a href="#2-8-解决跨域问题" class="headerlink" title="2.8.解决跨域问题"></a>2.8.解决跨域问题</h2><p>我们在<code>manage.leyou.com</code>访问<code>aliyuncs.com</code>是跨域访问，需要设置跨域许可。</p><p>在阿里OSS的控制台看到这样的信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206233916516.png" alt="image-20200206233916516"></p><p>我们点击设置，进入设置页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206233947861.png" alt="image-20200206233947861"></p><p>点击创建规则，进入跨域请求填写表单：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206234147957.png" alt="image-20200206234147957"> </p><p>填写完成后，再次测试：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206234225867.png" alt="image-20200206234225867"> </p><p>回显：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/3%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/image-20200206234253715.png" alt="image-20200206234253715"> </p><p>上传成功！</p><h2 id="图片上传总结（第三方服务接入总结）"><a href="#图片上传总结（第三方服务接入总结）" class="headerlink" title="图片上传总结（第三方服务接入总结）"></a>图片上传总结（第三方服务接入总结）</h2><p>类比mysql，邮箱发送，OSS第三方服务使用都遵循这样子的流程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">在第三方进行注册，拥有了自己的账户，进行相关设置，开启服务</span></span><br><span class="line"><span class="attr">2</span> <span class="string">然后在代码端使用第三方服务，使用前要先认证再进行业务处理。</span></span><br><span class="line"><span class="attr">认证的方式主要分为两种：</span></span><br><span class="line"><span class="attr">1</span> <span class="string">在客户端中直接具有认证信息，直接连接第三方服务，</span></span><br><span class="line"><span class="attr">比如说实时用户输入认证信息，如mysql直接使用账号密码登录</span></span><br><span class="line"><span class="attr">但也有不安全的情况，比如说OSS服务，如果将认证信息放到客户端就不安全，</span></span><br><span class="line"><span class="attr">这里的认证信息不想mysql那样是用户实时输入的，而是写死在客户端的。</span></span><br><span class="line"><span class="attr">2</span> <span class="string">在后端，直接携带认证信息，认证的同时进行第三方服务的使用，比如邮箱发送。</span></span><br><span class="line"><span class="attr">在后端进行认证信息的存放就很安全了，因此前面说的OSS可以把认证信息保存在后端，</span></span><br><span class="line"><span class="attr">先向后端请求认证信息，然后再把业务跟认证信息一起带给第三方服务，这样子的方式使用第三方服务。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;乐优商城项目-品牌管理&quot;&gt;&lt;a href=&quot;#乐优商城项目-品牌管理&quot; class=&quot;headerlink&quot; title=&quot;乐优商城项目-品牌管理&quot;&gt;&lt;/a&gt;乐优商城项目-品牌管理&lt;/h1&gt;&lt;h1 id=&quot;0-学习目标&quot;&gt;&lt;a href=&quot;#0-学习目标&quot; cla</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="乐优商城项目" scheme="http://example.com/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-分类管理</title>
    <link href="http://example.com/2022/06/17/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/06/17/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/</id>
    <published>2022-06-17T12:24:29.000Z</published>
    <updated>2022-06-18T12:43:40.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h1><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">能利用Nginx实现反向代理</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能使用mybatis-plus完成数据库操作</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能实现商品分类查询业务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能使用Gateway解决跨域问题</span></span><br></pre></td></tr></table></figure><h1 id="1-域名访问"><a href="#1-域名访问" class="headerlink" title="1.域名访问"></a>1.域名访问</h1><p>我们现在访问页面使用的是：<a href="http://localhost:9001/">http://localhost:9001</a></p><p>有没有什么问题？</p><p>实际开发中，会有不同的环境：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">开发环境：自己的电脑</span></span><br><span class="line"><span class="meta">-</span> <span class="string">测试环境：提供给测试人员使用的环境</span></span><br><span class="line"><span class="meta">-</span> <span class="string">预发布环境：数据是和生成环境的数据一致，运行最新的项目代码进去测试</span></span><br><span class="line"><span class="meta">-</span> <span class="string">生产环境：项目最终发布上线的环境</span></span><br></pre></td></tr></table></figure><p>如果不同环境使用不同的ip去访问，可能会出现一些问题。为了<strong>保证所有环境的一致，我们会在各种环境下都使用域名来访问</strong>。</p><p>我们将使用以下域名：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">主域名是：www.leyou.com，</span></span><br><span class="line"><span class="meta">-</span> <span class="string">管理系统域名：manage.leyou.com</span></span><br><span class="line"><span class="meta">-</span> <span class="string">网关域名：api.leyou.com</span></span><br><span class="line"><span class="meta">-</span> <span class="string">图片的域名：image.leyou.com</span></span><br><span class="line"><span class="meta">-</span> <span class="string">...</span></span><br></pre></td></tr></table></figure><p>但是开发环境下，我们希望这些域名指向的还是我们本机的某个端口。</p><p>那么，当我们在<strong>浏览器输入一个域名时，浏览器是如何找到对应服务的ip和端口的呢？</strong></p><h2 id="1-1-域名解析"><a href="#1-1-域名解析" class="headerlink" title="1.1.域名解析"></a>1.1.域名解析</h2><p><strong>一个域名一定会被解析为一个或多个ip</strong>。这一般会包含两步：</p><ul><li><p><strong>本地域名解析</strong></p><p>浏览器会首先在本机的hosts文件中查找域名映射的IP地址，如果查找到就返回IP ，没找到则进行域名服务器解析，一般本地解析都会失败，因为默认这个文件是空的。</p><ul><li>Windows下的hosts文件地址：C:/Windows/System32/drivers/etc/hosts</li><li>Linux下的hosts文件所在路径： /etc/hosts </li></ul><p>样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># My hosts</span><br><span class="line">127.0.0.1 localhost</span><br><span class="line">0.0.0.0 account.jetbrains.com</span><br><span class="line">127.0.0.1 www.xmind.net</span><br></pre></td></tr></table></figure></li><li><p><strong>域名服务器解析</strong></p><p>本地解析失败，才会进行域名服务器解析，域名服务器就是网络中的一台计算机，里面记录了所有注册备案的域名和ip映射关系，一般只要域名是正确的，并且备案通过，一定能找到。</p></li></ul><p>我们可以伪造本地的hosts文件，实现对域名的解析。修改本地的host为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 api.leyou.com</span><br><span class="line">127.0.0.1 manage.leyou.com</span><br><span class="line">127.0.0.1 www.leyou.com</span><br><span class="line">127.0.0.1 image.leyou.com</span><br></pre></td></tr></table></figure><p>这样就实现了域名的关系映射了。</p><p>每次在C盘寻找hosts文件并修改是非常麻烦的，给大家推荐一个快捷修改host的工具，在课前资料中可以找到：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111172800276.png" alt="image-20200111172800276"></p><p>效果：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200710225451221.png" alt="image-20200710225451221"></p><p>我们添加了两个映射关系：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">`127.0.0.1 api.leyou.com` ：我们的网关gateway</span></span><br><span class="line"><span class="meta">-</span> <span class="string">`127.0.0.1 manage.leyou.com`：我们的后台系统地址</span></span><br><span class="line"><span class="meta">-</span> <span class="string">`127.0.0.1 www.leyou.com`：我们的首页地址</span></span><br><span class="line"><span class="meta">-</span> <span class="string">`127.0.0.1 image.leyou.com`：我们的图片地址</span></span><br></pre></td></tr></table></figure><p>现在，ping一下域名试试是否畅通：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/1526015211298.png" alt="1526015211298"></p><p>OK！</p><p>如果加上上一篇博客将的加入了hosts，现在hosts是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 ly-gateway</span><br><span class="line">127.0.0.1 ly-registry</span><br><span class="line">192.168.206.99 ly-mysql</span><br><span class="line">192.168.206.99 ly-redis</span><br><span class="line">192.168.206.99 ly-mq</span><br><span class="line">192.168.206.99 ly-es</span><br><span class="line">127.0.0.1 api.leyou.com</span><br><span class="line">127.0.0.1 manage.leyou.com</span><br><span class="line">127.0.0.1 www.leyou.com</span><br><span class="line">127.0.0.1 image.leyou.com</span><br></pre></td></tr></table></figure><h2 id="1-2-反向代理"><a href="#1-2-反向代理" class="headerlink" title="1.2.反向代理"></a>1.2.反向代理</h2><p>虽然域名解决了，但是现在如果我们要访问<strong>，还得自己加上端口</strong>：<code>http://manage.taotao.com:9001</code>。</p><p>这就不够优雅了。我们希望的是<strong>直接域名访问：<code>http://manage.taotao.com</code>。这种情况下端口默认是80</strong>，如何才能把请求转移到9001端口呢？</p><p>这里就要用到反向代理工具：Nginx（<strong>将反向代理的端口设置为http协议的默认端口80，那么浏览器浏览是就不用输入端口了</strong>）</p><h3 id="1-2-1-认识Nginx"><a href="#1-2-1-认识Nginx" class="headerlink" title="1.2.1.认识Nginx"></a>1.2.1.认识Nginx</h3><p><em>Nginx</em> (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>web服务器，同时也提供了IMAP/POP3/SMTP<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1/100571">服务</a>。</p><p>其特点是占有内存少，<a href="https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91/11024806">并发</a>能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、<a href="https://baike.baidu.com/item/%E4%BA%AC%E4%B8%9C/210931">京东</a>、<a href="https://baike.baidu.com/item/%E6%96%B0%E6%B5%AA/125692">新浪</a>、<a href="https://baike.baidu.com/item/%E7%BD%91%E6%98%93/185754">网易</a>、<a href="https://baike.baidu.com/item/%E8%85%BE%E8%AE%AF/112204">腾讯</a>、<a href="https://baike.baidu.com/item/%E6%B7%98%E5%AE%9D/145661">淘宝</a>等。它的<strong>常见作用包括：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">反向代理（反向代理多个域名+端口）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">负载均衡（对集群进行负载均衡）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">请求限流</span></span><br><span class="line"><span class="meta">-</span> <span class="string">...</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-反向代理原理"><a href="#1-2-2-反向代理原理" class="headerlink" title="1.2.2.反向代理原理"></a>1.2.2.反向代理原理</h3><p>什么是反向代理？</p><ul><li>代理：通过客户机的配置，实现让一台服务器代理客户机，客户的所有请求都交给代理服务器处理。</li><li>反向代理：用一台服务器，代理真实服务器，<strong>用户访问时，不再是访问真实服务器，而是代理服务器</strong>。</li></ul><p>nginx可以当做反向代理服务器来使用：</p><ul><li>我们需要提前在nginx中配置好反向代理的规则，<strong>不同的请求，交给不同的真实服务器处理</strong></li><li>当请求到达nginx，nginx会根据已经定义的规则进行请求的转发，从而<strong>实现路由功能</strong></li></ul><p><strong>利用反向代理，就可以解决我们前面所说的端口问题</strong>，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175118787.png" alt="image-20200111175118787"></p><p>如上面，<strong>nginx根据域名的不同代理了三个服务</strong></p><h2 id="1-3-安装Nginx"><a href="#1-3-安装Nginx" class="headerlink" title="1.3.安装Nginx"></a>1.3.安装Nginx</h2><p>安装非常简单，把课前资料提供的nginx直接解压即可：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175232233.png" alt="image-20200111175232233"> </p><p>绿色免安装，舒服！</p><p>解压后的目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175323969.png" alt="image-20200111175323969"> </p><p>nginx可以通过命令行来启动，打开CMD命令行，然后输入命令：</p><ul><li><p>启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nginx.exe</span><br></pre></td></tr></table></figure></li><li><p>停止： #########注意啊，<strong>每次启动前要先把nginx停掉，因为前面启动的在后台，你要先关闭</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s stop   </span><br></pre></td></tr></table></figure></li><li><p>重新加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure></li></ul><p>启动后，访问：<a href="http://localhost即可访问nginx的默认页面：">http://localhost即可访问nginx的默认页面：</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175634260.png" alt="image-20200111175634260"></p><p>（<strong>为什么访问localhost就会访问nginx呢？</strong>）因为nginx配置文件那里监听的域名+端口就是localhost:80</p><h2 id="1-4-配置nginx反向代理"><a href="#1-4-配置nginx反向代理" class="headerlink" title="1.4.配置nginx反向代理"></a>1.4.配置nginx反向代理</h2><p>进入nginx的配置目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111181528509.png" alt="image-20200111181528509"> </p><h3 id="1）导入自定义配置"><a href="#1）导入自定义配置" class="headerlink" title="1）导入自定义配置"></a>1）导入自定义配置</h3><p>打开<code>nginx.conf</code>文件，然后在文件的最后一行的<code>&#125;</code>上面引入配置：</p><p>(可以在源配置文件修改，但是我们<strong>一般使用外部文件配置，然后导入外部文件就好！</strong>)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> vhost/<span class="regexp">*.conf</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113092131269.png" alt="image-20200113092131269"> </p><p>这个配置的意思是 导入 <strong><code>vhost</code>目录下的所有以<code>.conf</code>为后缀的文件。这样可以做到多配置文件分离，方便管理</strong>。</p><p>现在，我们需要在<code>conf</code>目录中新建一个名为<code>vhost</code>的目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113092403750.png" alt="image-20200113092403750"> </p><p>并在<code>vhost</code>中创建配置文件，这里我们叫<code>leyou.conf</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113092450661.png" alt="image-20200113092450661"> </p><h3 id="2）配置反向代理"><a href="#2）配置反向代理" class="headerlink" title="2）配置反向代理"></a>2）配置反向代理</h3><p>在leyou.conf中写入下面配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  manage.leyou.com;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://127.0.0.1:9001;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  www.leyou.com;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://127.0.0.1:9002;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  api.leyou.com;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://127.0.0.1:10010;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置解读：</p><ul><li><code>server</code>：定义一个监听服务配置<ul><li><code>listen</code>：监听的端口</li><li><code>server_name</code>：监听的域名，端口一致，域名不同也不会处理</li><li><code>location</code>：匹配当前域名下的哪个路径。例如：<code>/</code>，代表的是一切路径<ul><li><code>proxy_pass</code>：监听并匹配成功后，反向代理的目的地，可以指向某个ip和port</li><li><code>proxy_connect_timeout</code>：反向代理后的连接超时时间</li><li><code>proxy_read_timeout</code>：反向代理后的读取超时时间</li></ul></li></ul></li></ul><h3 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a>3）测试</h3><p>由上面的配置可知：</p><ul><li>发送到<a href="http://manage.leyou.com的请求,会被代理到http//127.0.0.1:9001">http://manage.leyou.com的请求，会被代理到http://127.0.0.1:9001</a></li><li>发送到<a href="http://www.leyou.com的请求,会被代理到http//127.0.0.1:9002">http://www.leyou.com的请求，会被代理到http://127.0.0.1:9002</a></li><li>发送到<a href="http://api.leyou.com的请求,会被代理到http//127.0.0.1:10010">http://api.leyou.com的请求，会被代理到http://127.0.0.1:10010</a></li></ul><p>现在，我们重新加载Nginx配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure><p>然后启动leyou-manage，测试用域名访问：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113093320205.png" alt="image-20200113093320205"></p><h2 id="1-5-负载均衡（了解）"><a href="#1-5-负载均衡（了解）" class="headerlink" title="1.5.负载均衡（了解）"></a>1.5.负载均衡（了解）</h2><p>我们的nginx反向代理，目标服务器地址是通过IP和Port来指定，那么新的问题来了：</p><p>如果我们的<code>leyou-manage</code>不是单节点，而是一个<strong>服务集群</strong>，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113094533555.png" alt="image-20200113094533555"></p><p>此时该怎么办呢？nginx该如何配置访问集群中的哪个节点呢？</p><p> 这就需要<strong>负载均衡的策略配置</strong>了。</p><h3 id="1）负载均衡轮询策略"><a href="#1）负载均衡轮询策略" class="headerlink" title="1）负载均衡轮询策略"></a>1）负载均衡轮询策略</h3><p>首先定义负载均衡的集群节点信息，及负载均衡的策略，默认策略是轮询，顾名思义，所有请求都按照时间顺序分配到不同的服务上，如果服务Down掉，可以自动剔除，本例中配置四个节点轮询：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负载均衡配置，默认是轮询</span></span><br><span class="line"><span class="attribute">upstream</span> leyou-manage&#123;</span><br><span class="line"><span class="attribute">server</span><span class="number">127.0.0.1:9001</span>; <span class="comment"># 节点信息</span></span><br><span class="line">    <span class="comment">#server127.0.0.1:9002; # 节点信息</span></span><br><span class="line">    <span class="comment">#server127.0.0.1:9003; # 节点信息</span></span><br><span class="line">    <span class="comment">#server127.0.0.1:9004; # 节点信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后<strong>在反向代理时不要指向具体IP</strong>，而是这里配置的：<code>leyou-manage</code>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  manage.leyou.com;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://leyou-manage;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）加权轮询"><a href="#2）加权轮询" class="headerlink" title="2）加权轮询"></a>2）加权轮询</h3><p>指定每个服务的权重比例，weight和访问比率成正比，通常用于后端服务机器性能不统一，将性能好的分配权重高来发挥服务器最大性能，如下配置后9001服务的访问比率会是9002服务的二倍。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负载均衡配置，默认是轮询</span></span><br><span class="line"><span class="attribute">upstream</span> leyou-manage&#123;</span><br><span class="line"><span class="attribute">server</span><span class="number">127.0.0.1:9001</span> weight=<span class="number">1</span>; <span class="comment"># 节点信息</span></span><br><span class="line">    <span class="attribute">server</span><span class="number">127.0.0.1:9002</span> weight=<span class="number">2</span>; <span class="comment"># 节点信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）IP哈希"><a href="#3）IP哈希" class="headerlink" title="3）IP哈希"></a>3）IP哈希</h3><p>每个请求都根据访问ip的hash结果分配，经过这样的处理，每个访客固定访问一个后端服务</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span>  leyou-manage &#123;</span><br><span class="line">    ip_hash; </span><br><span class="line"><span class="attribute">server</span><span class="number">127.0.0.1:9001</span>; <span class="comment"># 节点信息</span></span><br><span class="line">    <span class="attribute">server</span><span class="number">127.0.0.1:9002</span>; <span class="comment"># 节点信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）最少连接"><a href="#4）最少连接" class="headerlink" title="4）最少连接"></a>4）最少连接</h3><p>将请求分配到连接数最少的服务上。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> leyou-manage&#123;</span><br><span class="line">    least_conn;</span><br><span class="line"><span class="attribute">server</span><span class="number">127.0.0.1:9001</span>; <span class="comment"># 节点信息</span></span><br><span class="line">    <span class="attribute">server</span><span class="number">127.0.0.1:9002</span>; <span class="comment"># 节点信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-MybatisPlus"><a href="#2-MybatisPlus" class="headerlink" title="2.MybatisPlus"></a>2.MybatisPlus</h1><p>mybatis作为持久层框架，其优势是灵活，我们可以<strong>灵活定制sql</strong>。但凡事有利有弊，<strong>灵活的带来的缺点是，很多单表的简单CRUD，依然需要我们自己来写，非常浪费时间</strong>。</p><p>因此我们接下来要学习一个<strong>mybatis的插件：MybatisPlus，可以大大提高Mybatis的开发效率</strong>。</p><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1.介绍"></a>2.1.介绍</h2><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。官网：<a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a></p><blockquote><p>愿景</p><p>我们的愿景是成为 MyBatis 最好的搭档，就像 <a href="https://mp.baomidou.com/img/contra.jpg">魂斗罗</a> 中的 1P、2P，基友搭配，效率翻倍。</p></blockquote><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113103722297.png" alt="image-20200113103722297"></p><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="2-2-快速入门"><a href="#2-2-快速入门" class="headerlink" title="2.2.快速入门"></a>2.2.快速入门</h2><h3 id="2-2-1-准备数据"><a href="#2-2-1-准备数据" class="headerlink" title="2.2.1.准备数据"></a>2.2.1.准备数据</h3><p>首先新建一个库，然后运行下面的sql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 建表</span><br><span class="line">DROP TABLE IF EXISTS user;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line">id BIGINT(20) NOT NULL COMMENT &#x27;主键ID&#x27;,</span><br><span class="line">name VARCHAR(30) NULL DEFAULT NULL COMMENT &#x27;姓名&#x27;,</span><br><span class="line">age INT(11) NULL DEFAULT NULL COMMENT &#x27;年龄&#x27;,</span><br><span class="line">email VARCHAR(50) NULL DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">PRIMARY KEY (id)</span><br><span class="line">);</span><br><span class="line"># 准备数据</span><br><span class="line"></span><br><span class="line">INSERT INTO user (id, name, age, email) VALUES</span><br><span class="line">(1, &#x27;Jone&#x27;, 18, &#x27;test1@baomidou.com&#x27;),</span><br><span class="line">(2, &#x27;Jack&#x27;, 20, &#x27;test2@baomidou.com&#x27;),</span><br><span class="line">(3, &#x27;Tom&#x27;, 28, &#x27;test3@baomidou.com&#x27;),</span><br><span class="line">(4, &#x27;Sandy&#x27;, 21, &#x27;test4@baomidou.com&#x27;),</span><br><span class="line">(5, &#x27;Billie&#x27;, 24, &#x27;test5@baomidou.com&#x27;);</span><br></pre></td></tr></table></figure><h3 id="2-2-2-准备Demo工程"><a href="#2-2-2-准备Demo工程" class="headerlink" title="2.2.2.准备Demo工程"></a>2.2.2.准备Demo工程</h3><p>新建maven工程</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113105132768.png" alt="image-20200113105132768"></p><p>坐标：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113105722583.png" alt="image-20200113105722583"></p><p>项目位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113105729539.png" alt="image-20200113105729539"></p><h3 id="2-2-3-引入依赖"><a href="#2-2-3-引入依赖" class="headerlink" title="2.2.3.引入依赖"></a>2.2.3.引入依赖</h3><p>在项目pom文件写入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus的springboot支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--简化代码的工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-配置"><a href="#2-2-4-配置" class="headerlink" title="2.2.4.配置"></a>2.2.4.配置</h3><p>在resources目录新建application.yml文件，写入下列配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mybatis-plus-demo</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ly-mysql:3306/heima?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">cn.itcast:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="2-2-5-实体类"><a href="#2-2-5-实体类" class="headerlink" title="2.2.5.实体类"></a>2.2.5.实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-6-mapper接口"><a href="#2-2-6-mapper接口" class="headerlink" title="2.2.6.mapper接口"></a>2.2.6.mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里继承了BaseMapper，是MybatisPlus提供的基础接口，里面准备了大量的CRUD方法。</p><h3 id="2-2-7-启动类"><a href="#2-2-7-启动类" class="headerlink" title="2.2.7.启动类"></a>2.2.7.启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.mp.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MpDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MpDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-8-单元测试"><a href="#2-2-8-单元测试" class="headerlink" title="2.2.8.单元测试"></a>2.2.8.单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println((<span class="string">&quot;----- selectAll method test ------&quot;</span>));</span><br><span class="line">        <span class="comment">// 使用BaseMapper提供的selectList方法</span></span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">5</span>, userList.size());</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里测试了BaseMapper提供的查询所有的方法，运行结果如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113111312151.png" alt="image-20200113111312151"></p><h2 id="2-3-一些注解"><a href="#2-3-一些注解" class="headerlink" title="2.3.一些注解"></a>2.3.一些注解</h2><p>上面我们虽然定义了Mapper接口，但是没有写任何SQL，<strong>MybatisPlus是如何知道该查询哪张表呢？</strong></p><p>来看看mapper的定义方式：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113111756204.png" alt="image-20200113111756204"> </p><p>我们在继承BaseMapper时，指定了泛型是<code>&lt;User&gt;</code>，BaseMapper基于反射获取到<code>User</code>的字节码，然后默认就<strong>把类的名称作为表名称</strong>、<strong>把类中的字段作为数据库字段</strong>。</p><p>如果<strong>类名或字段名与数据库不一致，我们可以通过注解来声明</strong>：</p><p>官方文档：<a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p><h3 id="2-3-1-TableName"><a href="#2-3-1-TableName" class="headerlink" title="2.3.1.@TableName"></a>2.3.1.@TableName</h3><p>这个注解用在类上，声明当前类关联的表名称，可以配置下列属性：</p><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th>描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>表名</td></tr><tr><td align="center">schema</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>schema</td></tr><tr><td align="center">keepGlobalPrefix</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td>是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值)</td></tr><tr><td align="center">resultMap</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>xml 中 resultMap 的 id</td></tr><tr><td align="center">autoResultMap</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td>是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)</td></tr></tbody></table><h3 id="2-3-2-TableId"><a href="#2-3-2-TableId" class="headerlink" title="2.3.2.@TableId"></a>2.3.2.@TableId</h3><ul><li>描述：主键注解</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">主键字段名</td></tr><tr><td align="center">type</td><td align="center">Enum</td><td align="center">否</td><td align="center">IdType.NONE</td><td align="center"><strong>主键类型</strong>，通过IdType枚举指定</td></tr></tbody></table><ul><li>IdType的枚举项：</li></ul><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">AUTO</td><td align="center"><strong>数据库ID自增</strong></td></tr><tr><td align="center">NONE</td><td align="center">无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td></tr><tr><td align="center">INPUT</td><td align="center">insert前自行set主键值</td></tr><tr><td align="center">ASSIGN_ID</td><td align="center">分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr><tr><td align="center">ASSIGN_UUID</td><td align="center">分配UUID,主键类型为String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认default方法)</td></tr></tbody></table><h3 id="2-3-3-TableField"><a href="#2-3-3-TableField" class="headerlink" title="2.3.3.@TableField"></a>2.3.3.@TableField</h3><ul><li>描述：字段注解(非主键)</li><li>属性：</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段名</td></tr><tr><td align="center">el</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">映射为原生 <code>#&#123; ... &#125;</code> 逻辑,相当于写在 xml 里的 <code>#&#123; ... &#125;</code> 部分</td></tr><tr><td align="center">exist</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否为数据库表字段</td></tr><tr><td align="center">condition</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>where</code> 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局的 <code>%s=#&#123;%s&#125;</code>,<a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/SqlCondition.java">参考</a></td></tr><tr><td align="center">update</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>update set</code> 部分注入, 例如：update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 <code>el</code> 属性)</td></tr><tr><td align="center">insertStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_NULL: <code>insert into table_a(column) values (#&#123;columnProperty&#125;)</code></td></tr><tr><td align="center">updateStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：IGNORED: <code>update table_a set column=#&#123;columnProperty&#125;</code></td></tr><tr><td align="center">whereStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_EMPTY: <code>where column=#&#123;columnProperty&#125;</code></td></tr><tr><td align="center">fill</td><td align="center">Enum</td><td align="center">否</td><td align="center">FieldFill.DEFAULT</td><td align="center">字段自动填充策略</td></tr><tr><td align="center">select</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否进行 select 查询</td></tr><tr><td align="center">keepGlobalFormat</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td align="center">是否保持使用全局的 format 进行处理</td></tr><tr><td align="center">jdbcType</td><td align="center">JdbcType</td><td align="center">否</td><td align="center">JdbcType.UNDEFINED</td><td align="center">JDBC类型 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">typeHandler</td><td align="center">Class&lt;? extends TypeHandler&gt;</td><td align="center">否</td><td align="center">UnknownTypeHandler.class</td><td align="center">类型处理器 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">numericScale</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">指定小数点后保留的位数</td></tr></tbody></table><h2 id="2-4-常见配置"><a href="#2-4-常见配置" class="headerlink" title="2.4.常见配置"></a>2.4.常见配置</h2><p>MyBatisPlus配置整合了部分原来的Mybatis配置，都可以通过yaml文件来配置。</p><p>详见文档：<a href="https://mp.baomidou.com/config/">https://mp.baomidou.com/config/</a></p><p>例如：mapper文件地址、别名扫描包等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.item.entity</span> <span class="comment"># 别名扫描包</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mappers/*.xml</span> <span class="comment"># mapper的xml文件地址</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># 全局主键策略，默认为自增长</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span> <span class="comment"># 更新时，只更新非null字段（不会将原来的字段设置为null）</span></span><br><span class="line">      <span class="attr">insert-strategy:</span> <span class="string">not_null</span> <span class="comment"># 新增时，只新增非null字段</span></span><br></pre></td></tr></table></figure><p>1  id-type 默认值为 <strong>id生成器生成</strong> 策略（worker），是<strong>根据雪花算法生成的id</strong>。但是如果带给数据库的数据id本身有值，那么woker策略也很聪明，就不用雪花算法生成了，直接使用本来的id。当数据库表id本来是主键自增，但是我们这里设置了默认策略，那还是<strong>按照mybatis-plus框架设置的主键策略优先</strong>，因为数据到达库中时，id已经生成了哈！</p><p>2  id-type配置为auto，那么在插入时id没有被带到数据库。</p><p>3  id-type 配置为input，表示插入表中的id由实体类对象的id决定。</p><p><strong>错误的用法：</strong>代码配置了自增，但是库没有自增，那么就会报错。因为代码配置了自增，就算插入的数据本来有id，那么框架也会把id值给去掉，意思是数据<strong>到达数据库时是不带id的</strong>，而数据库又 没有自增，那就gg了！</p><p><strong>全局配置</strong>：在配置文件中配置。</p><p><strong>局部配置</strong>：到实体类中进行配置，优先级高于全局配置。</p><p>比如说，有十张表是主键自增的，有一张不是主键自增的，那么就可以在配置文件中，id的type配置为auto，然后到另外一张表对应的实体类中的id字段上面的TableId注解中，添加type属性为input，或者woker。</p><h2 id="2-5-BaseMapper的CRUD"><a href="#2-5-BaseMapper的CRUD" class="headerlink" title="2.5.BaseMapper的CRUD"></a>2.5.BaseMapper的CRUD</h2><p>在MybatisPlus中，<strong>BaseMapper中定义</strong>了一些常用的CRUD方法，当我们<strong>自定义的Mapper接口继承BaseMapper后即可拥有了这些方法</strong>。</p><h3 id="2-5-1-新增"><a href="#2-5-1-新增" class="headerlink" title="2.5.1.新增"></a>2.5.1.新增</h3><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T entity)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr></tbody></table><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">6L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;Amy&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">16</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;amy@itcast.cn&quot;</span>);</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11:49:28.988 DEBUG 30192 --- [           main] cn.itcast.mp.mapper.UserMapper.insert    : ==&gt;  Preparing: INSERT INTO user ( id, name, email, age ) VALUES ( ?, ?, ?, ? ) </span><br><span class="line">11:49:29.004 DEBUG 30192 --- [           main] cn.itcast.mp.mapper.UserMapper.insert    : ==&gt; Parameters: 6(Long), Amy(String), amy@itcast.cn(String), 16(Integer)</span><br><span class="line">11:49:29.007 DEBUG 30192 --- [           main] cn.itcast.mp.mapper.UserMapper.insert    : &lt;==    Updates: 1</span><br></pre></td></tr></table></figure><h3 id="2-5-2-删除"><a href="#2-5-2-删除" class="headerlink" title="2.5.2.删除"></a>2.5.2.删除</h3><h4 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span></span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-10">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">wrapper</td><td align="center">实体对象封装操作类（可以为 null）</td></tr><tr><td align="center">Collection&lt;? extends Serializable&gt;</td><td align="center">idList</td><td align="center">主键ID列表(不能为 null 以及 empty)</td></tr><tr><td align="center">Serializable</td><td align="center">id</td><td align="center">主键ID</td></tr><tr><td align="center">Map&lt;String, Object&gt;</td><td align="center">columnMap</td><td align="center">表字段 map 对象</td></tr></tbody></table><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> count = userMapper.delete(</span><br><span class="line">              <span class="keyword">new</span> QueryWrapper&lt;User&gt;()</span><br><span class="line">                      .eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Amy&quot;</span>));</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-07-14 00:07:50.322 DEBUG 30156 --- [           main] cn.itcast.mp.mapper.UserMapper.delete    : ==&gt;  Preparing: DELETE FROM user WHERE (name = ?) </span><br><span class="line">2020-07-14 00:07:50.367 DEBUG 30156 --- [           main] cn.itcast.mp.mapper.UserMapper.delete    : ==&gt; Parameters: Amy(String)</span><br><span class="line">2020-07-14 00:07:50.371 DEBUG 30156 --- [           main] cn.itcast.mp.mapper.UserMapper.delete    : &lt;==    Updates: 1</span><br></pre></td></tr></table></figure><h3 id="2-5-3-修改"><a href="#2-5-3-修改" class="headerlink" title="2.5.3.修改"></a>2.5.3.修改</h3><h4 id="方法：-2"><a href="#方法：-2" class="headerlink" title="方法："></a>方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 修改</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象 (set 条件值,可为 null)</td></tr><tr><td align="center">Wrapper<T></td><td align="center">updateWrapper</td><td align="center">实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</td></tr></tbody></table><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">5L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> count = userMapper.updateById(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;修改成功!, count = &quot;</span> + count );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-07-14 00:12:03.403 DEBUG 6188 --- [           main] cn.itcast.mp.mapper.UserMapper.update    : ==&gt;  Preparing: UPDATE user SET name=? WHERE (age = ?) </span><br><span class="line">2020-07-14 00:12:03.438 DEBUG 6188 --- [           main] cn.itcast.mp.mapper.UserMapper.update    : ==&gt; Parameters: lisi(String), 24(Integer)</span><br><span class="line">2020-07-14 00:12:03.440 DEBUG 6188 --- [           main] cn.itcast.mp.mapper.UserMapper.update    : &lt;==    Updates: 1</span><br><span class="line">修改成功!, count = 1</span><br></pre></td></tr></table></figure><h3 id="2-5-4-查询单个"><a href="#2-5-4-查询单个" class="headerlink" title="2.5.4.查询单个"></a>2.5.4.查询单个</h3><h4 id="方法列表"><a href="#方法列表" class="headerlink" title="方法列表:"></a>方法列表:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line"><span class="function">T <span class="title">selectById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="function">T <span class="title">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="#参数说明:"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-12">#</a>参数说明:</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Serializable</td><td align="center">id</td><td align="center">主键ID</td></tr><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类（可以为 null）</td></tr></tbody></table><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 根据ID查询</span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-5-查询集合："><a href="#2-5-5-查询集合：" class="headerlink" title="2.5.5.查询集合："></a>2.5.5.查询集合：</h3><h4 id="方法列表："><a href="#方法列表：" class="headerlink" title="方法列表："></a>方法列表：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; selectMaps(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h4><p>1）根据id集合查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryByIdList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 根据ID查询</span></span><br><span class="line">    List&lt;User&gt; list = userMapper.selectBatchIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>));</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）根据wrapper查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryByWrapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义wrapper</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">// 模糊</span></span><br><span class="line">    wrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">        <span class="comment">// 范围</span></span><br><span class="line">        .le(<span class="string">&quot;age&quot;</span>, <span class="number">30</span>)</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        .orderByAsc(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(wrapper);</span><br><span class="line"></span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的sql：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name,email,age <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> (name <span class="keyword">LIKE</span> ? <span class="keyword">AND</span> age <span class="operator">&lt;=</span> ?) <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h3 id="2-5-6-分页查询"><a href="#2-5-6-分页查询" class="headerlink" title="2.5.6.分页查询"></a>2.5.6.分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="function">IPage&lt;T&gt; <span class="title">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="function">Integer <span class="title">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br></pre></td></tr></table></figure><p>分页查询需要引入额外的插件才能生效。</p><h4 id="1）引入分页插件"><a href="#1）引入分页插件" class="headerlink" title="1）引入分页插件"></a>1）引入分页插件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.optimize.JsqlParserCountOptimize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册mybatis plus的分页插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor = <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">        <span class="comment">// 开启 count 的 join 优化,只针对部分 left join</span></span><br><span class="line">        paginationInterceptor.setCountSqlParser(<span class="keyword">new</span> JsqlParserCountOptimize(<span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）测试分页"><a href="#2）测试分页" class="headerlink" title="2）测试分页"></a>2）测试分页</h4><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 分页条件</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;();</span><br><span class="line">    <span class="comment">// 当前页</span></span><br><span class="line">    page.setCurrent(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 每页大小</span></span><br><span class="line">    page.setSize(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 分页查询，结果会放到Page&lt;User&gt;中，因此无需返回</span></span><br><span class="line">    userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总条数</span></span><br><span class="line">    <span class="keyword">long</span> total = page.getTotal();</span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line"><span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">long</span> pages = page.getPages();</span><br><span class="line">    System.out.println(<span class="string">&quot;pages = &quot;</span> + pages);</span><br><span class="line">    <span class="comment">// 当前页结果</span></span><br><span class="line">    List&lt;User&gt; list = page.getRecords();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">01</span>-<span class="number">13</span> <span class="number">13</span>:<span class="number">23</span>:<span class="number">55.761</span> DEBUG <span class="number">41364</span> --- [           main] c.i.mp.mapper.UserMapper.selectPage      : ==&gt;  Preparing: <span class="function">SELECT <span class="title">COUNT</span><span class="params">(<span class="number">1</span>)</span> FROM user </span></span><br><span class="line"><span class="function">2020-01-13 13:23:55.776 DEBUG 41364 --- [           main] c.i.mp.mapper.UserMapper.selectPage      : </span>==&gt; Parameters: </span><br><span class="line"><span class="number">2020</span>-<span class="number">01</span>-<span class="number">13</span> <span class="number">13</span>:<span class="number">23</span>:<span class="number">55.787</span> DEBUG <span class="number">41364</span> --- [           main] c.i.mp.mapper.UserMapper.selectPage      : ==&gt;  Preparing: SELECT id,name,email,age FROM user LIMIT ?,? </span><br><span class="line"><span class="number">2020</span>-<span class="number">01</span>-<span class="number">13</span> <span class="number">13</span>:<span class="number">23</span>:<span class="number">55.788</span> DEBUG <span class="number">41364</span> --- [           main] c.i.mp.mapper.UserMapper.selectPage      : ==&gt; Parameters: <span class="number">0</span>(Long), <span class="number">3</span>(Long)</span><br><span class="line"><span class="number">2020</span>-<span class="number">01</span>-<span class="number">13</span> <span class="number">13</span>:<span class="number">23</span>:<span class="number">55.791</span> DEBUG <span class="number">41364</span> --- [           main] c.i.mp.mapper.UserMapper.selectPage      : &lt;==      Total: <span class="number">3</span></span><br><span class="line">total = <span class="number">5</span></span><br><span class="line">pages = <span class="number">2</span></span><br><span class="line">User(id=<span class="number">1</span>, name=Jone, age=<span class="number">18</span>, email=test1<span class="meta">@baomidou</span>.com)</span><br><span class="line">User(id=<span class="number">2</span>, name=Jack, age=<span class="number">20</span>, email=test2<span class="meta">@baomidou</span>.com)</span><br><span class="line">User(id=<span class="number">3</span>, name=Tom, age=<span class="number">28</span>, email=test3<span class="meta">@baomidou</span>.com)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-6-IService的CRUD"><a href="#2-6-IService的CRUD" class="headerlink" title="2.6.IService的CRUD"></a>2.6.IService的CRUD</h2><p>MybatisPlus除了提供BaseMapper，还提供了<strong>通用的Service接口：<code>IService</code></strong></p><p>也就是说：<strong>将业务前置到了service层！！！！！！！！</strong></p><h3 id="2-6-1-新增"><a href="#2-6-1-新增" class="headerlink" title="2.6.1.新增"></a>2.6.1.新增</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">save</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-3"><a href="#参数说明-3" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr><tr><td align="center">Collection<T></td><td align="center">entityList</td><td align="center">实体对象集合</td></tr><tr><td align="center">int</td><td align="center">batchSize</td><td align="center">插入批次数量</td></tr></tbody></table><h3 id="2-6-2-SaveOrUpdate"><a href="#2-6-2-SaveOrUpdate" class="headerlink" title="2.6.2.SaveOrUpdate"></a>2.6.2.SaveOrUpdate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-4"><a href="#参数说明-4" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-2">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr><tr><td align="center">Wrapper<T></td><td align="center">updateWrapper</td><td align="center">实体对象封装操作类 UpdateWrapper</td></tr><tr><td align="center">Collection<T></td><td align="center">entityList</td><td align="center">实体对象集合</td></tr><tr><td align="center">int</td><td align="center">batchSize</td><td align="center">插入批次数量</td></tr></tbody></table><h3 id="2-6-3-删除"><a href="#2-6-3-删除" class="headerlink" title="2.6.3.删除"></a>2.6.3.删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-5"><a href="#参数说明-5" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-3">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体包装类 QueryWrapper</td></tr><tr><td align="center">Serializable</td><td align="center">id</td><td align="center">主键ID</td></tr><tr><td align="center">Map&lt;String, Object&gt;</td><td align="center">columnMap</td><td align="center">表字段 map 对象</td></tr><tr><td align="center">Collection&lt;? extends Serializable&gt;</td><td align="center">idList</td><td align="center">主键ID列表</td></tr></tbody></table><h3 id="2-6-4-修改"><a href="#2-6-4-修改" class="headerlink" title="2.6.4.修改"></a>2.6.4.修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">update</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 选择修改</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateById</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-6"><a href="#参数说明-6" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-4">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">updateWrapper</td><td align="center">实体对象封装操作类 UpdateWrapper</td></tr><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr><tr><td align="center">Collection<T></td><td align="center">entityList</td><td align="center">实体对象集合</td></tr><tr><td align="center">int</td><td align="center">batchSize</td><td align="center">更新批次数量</td></tr></tbody></table><h3 id="2-6-5-查询单个"><a href="#2-6-5-查询单个" class="headerlink" title="2.6.5.查询单个"></a>2.6.5.查询单个</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line"><span class="function">T <span class="title">getById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span></span><br><span class="line"><span class="function">T <span class="title">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line"><span class="function">T <span class="title">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="keyword">boolean</span> throwEx)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">&lt;V&gt; <span class="function">V <span class="title">getObj</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="keyword">super</span> Object, V&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-7"><a href="#参数说明-7" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-5">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Serializable</td><td align="center">id</td><td align="center">主键ID</td></tr><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类 QueryWrapper</td></tr><tr><td align="center">boolean</td><td align="center">throwEx</td><td align="center">有多个 result 是否抛出异常</td></tr><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr><tr><td align="center">Function&lt;? super Object, V&gt;</td><td align="center">mapper</td><td align="center">转换函数</td></tr></tbody></table><h3 id="2-6-6-查询多个"><a href="#2-6-6-查询多个" class="headerlink" title="2.6.6.查询多个"></a>2.6.6.查询多个</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="function">Collection&lt;T&gt; <span class="title">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="function">Collection&lt;T&gt; <span class="title">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 查询所有列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMaps();</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMaps(Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">listObjs</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">&lt;V&gt; <span class="function">List&lt;V&gt; <span class="title">listObjs</span><span class="params">(Function&lt;? <span class="keyword">super</span> Object, V&gt; mapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">&lt;V&gt; <span class="function">List&lt;V&gt; <span class="title">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="keyword">super</span> Object, V&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="参数说明-8"><a href="#参数说明-8" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-6">#</a>参数说明</h5><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类 QueryWrapper</td></tr><tr><td align="center">Collection&lt;? extends Serializable&gt;</td><td align="center">idList</td><td align="center">主键ID列表</td></tr><tr><td align="center">Map&lt;?String, Object&gt;</td><td align="center">columnMap</td><td align="center">表字段 map 对象</td></tr><tr><td align="center">Function&lt;? super Object, V&gt;</td><td align="center">mapper</td><td align="center">转换函数</td></tr></tbody></table><h3 id="2-6-7-分页查询"><a href="#2-6-7-分页查询" class="headerlink" title="2.6.7.分页查询"></a>2.6.7.分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无条件翻页查询</span></span><br><span class="line"><span class="function">IPage&lt;T&gt; <span class="title">page</span><span class="params">(IPage&lt;T&gt; page)</span></span>;</span><br><span class="line"><span class="comment">// 翻页查询</span></span><br><span class="line"><span class="function">IPage&lt;T&gt; <span class="title">page</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 无条件翻页查询</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page);</span><br><span class="line"><span class="comment">// 翻页查询</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper);</span><br></pre></td></tr></table></figure><h5 id="参数说明-9"><a href="#参数说明-9" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-7">#</a>参数说明</h5><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IPage<T></td><td align="center">page</td><td align="center">翻页对象</td></tr><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类 QueryWrapper</td></tr></tbody></table><h3 id="2-6-8-查询数量"><a href="#2-6-8-查询数量" class="headerlink" title="2.6.8.查询数量"></a>2.6.8.查询数量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询总记录数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="参数说明-10"><a href="#参数说明-10" class="headerlink" title="#参数说明"></a><a href="https://mp.baomidou.com/guide/crud-interface.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-8">#</a>参数说明</h4><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类 QueryWrapper</td></tr></tbody></table><h3 id="2-6-9-链式查询"><a href="#2-6-9-链式查询" class="headerlink" title="2.6.9.链式查询"></a>2.6.9.链式查询</h3><p>query+在eq方法前面加个条件判断(一般是字段非空），当字段非空时，eq这个条件查询才算成立</p><p>因此，链式查询+字段非空判断组成了我们的<strong>动态查询sql</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式查询 普通</span></span><br><span class="line"><span class="function">QueryChainWrapper&lt;T&gt; <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 链式查询 lambda 式。注意：不支持 Kotlin</span></span><br><span class="line"><span class="function">LambdaQueryChainWrapper&lt;T&gt; <span class="title">lambdaQuery</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例： （相当于select ...... where id=value)</span></span><br><span class="line">query().eq(<span class="string">&quot;column&quot;</span>, value).one();</span><br><span class="line">lambdaQuery().eq(Entity::getId, value).list();</span><br></pre></td></tr></table></figure><h2 id="2-7-ServiceImpl"><a href="#2-7-ServiceImpl" class="headerlink" title="2.7.ServiceImpl"></a>2.7.ServiceImpl</h2><p>**上面的<code>IService</code>提供了service的默认方法接口，而<code>ServiceImpl</code>就是对<code>IService</code>的默认实现。我们在定义service时，一般先定义接口，继承<code>IService</code>，然后在定义实现类，继承<code>ServiceImpl</code>**。</p><p>例如，我们定义一个UserService接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200114101828802.png" alt="image-20200114101828802"> </p><p>单元测试：<strong>将业务前置到了service层，直接注入UserService接口就可以使用像 注入UserMapper接口一样的各种操作数据库方法了</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userService.list();</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-分类管理"><a href="#3-分类管理" class="headerlink" title="3.分类管理"></a>3.分类管理</h1><p>接下来，我们完成后台管理项目的业务内容。</p><h2 id="3-1-导入数据"><a href="#3-1-导入数据" class="headerlink" title="3.1.导入数据"></a>3.1.导入数据</h2><p>将课前资料中的sql文件运行，导入数据：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200113125947945.png" alt="image-20200113125947945"> </p><p>我们先看商品分类表：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/1525999774439.png" alt="1525999774439"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_category` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;类目id&#x27;,</span><br><span class="line">  `name` varchar(32) NOT NULL COMMENT &#x27;类目名称&#x27;,</span><br><span class="line">  `parent_id` bigint(20) NOT NULL COMMENT &#x27;父类目id,顶级类目填0&#x27;,</span><br><span class="line">  `is_parent` tinyint(1) NOT NULL COMMENT &#x27;是否为父节点，0为否，1为是&#x27;,</span><br><span class="line">  `sort` tinyint(2) NOT NULL COMMENT &#x27;排序指数，越小越靠前&#x27;,</span><br><span class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;数据创建时间&#x27;,</span><br><span class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;数据更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `key_parent_id` (`parent_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#x27;商品类目表，类目和商品(spu)是一对多关系，类目与品牌是多对多关系&#x27;;</span><br></pre></td></tr></table></figure><p>1 <strong>因为商品分类会有层级关系，因此这里我们加入了<code>parent_id</code>字段</strong>，对本表中的其它分类进行自关联。</p><p>2 几乎所有表格<strong>都有updatetime,createtime 字段</strong>，记录商品被添加时间！！！</p><p>3 数据表设计原则：<strong>以空间换时间</strong>！意思是维护多个字段，那么就不用另外查询，节省时间！</p><h2 id="3-2-引入mybatis-plus"><a href="#3-2-引入mybatis-plus" class="headerlink" title="3.2.引入mybatis-plus"></a>3.2.引入mybatis-plus</h2><p>我们在<code>ly-item-service</code>中引入有关<code>mybatis-plus</code>的配置，便于操作数据库</p><h3 id="1）依赖"><a href="#1）依赖" class="headerlink" title="1）依赖"></a>1）依赖</h3><p>首先在<code>ly-item-service</code>的pom中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）全局配置"><a href="#2）全局配置" class="headerlink" title="2）全局配置"></a>2）全局配置</h3><p>然后在<code>ly-item-service</code>的<code>application.yml</code>文件中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.item.entity</span> <span class="comment"># 别名扫描包</span></span><br><span class="line">  <span class="comment"># mapper-locations: classpath*: mappers/*.xml # mapper的xml文件地址</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># id默认为自增长（#########表中的对应id字段，必须是自增的）</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">NOT_EMPTY</span> <span class="comment"># 更新时，只更新非空字段</span></span><br><span class="line">      <span class="attr">insert-strategy:</span> <span class="string">NOT_EMPTY</span> <span class="comment"># 新增时，只新增非空字段</span></span><br></pre></td></tr></table></figure><h3 id="3）启动类的注解"><a href="#3）启动类的注解" class="headerlink" title="3）启动类的注解"></a>3）启动类的注解</h3><p>给<code>LyItemApplication</code>添加注解：<code>@MapperScan</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.leyou.item.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.item&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyItemApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyItemApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4）开启分页插件"><a href="#4）开启分页插件" class="headerlink" title="4）开启分页插件"></a>4）开启分页插件</h3><p>在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册mybatis plus的分页插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor = <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">        <span class="comment">// 开启 count 的 join 优化,只针对部分 left join</span></span><br><span class="line">        paginationInterceptor.setCountSqlParser(<span class="keyword">new</span> JsqlParserCountOptimize(<span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></span><br><span class="line">        paginationInterceptor.setLimit(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5）修改日志advice的切入点语法"><a href="#5）修改日志advice的切入点语法" class="headerlink" title="5）修改日志advice的切入点语法"></a>5）修改日志advice的切入点语法</h3><p>之前的切入点语法<strong>只对Service自己的方法有效，如果是继承自ServiceImpl的方法则失效</strong>。因此需要修改CommonLogAdvice中的切入点语法：</p><p>详解：<strong>前面讲的日志的实现是扫描所有service层的接口方法，并添加日志，但是有些业务必须要自己写方法（是在serviceImpl中定义）才能实现逻辑，因此我们的日志添加（切入点）应该包含自定义的service层方法。这里必须引入依赖哈！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exceptios.LyException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonLogAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;within(@org.springframework.stereotype.Service *) || within(com.baomidou.mybatisplus.extension.service.IService+)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">handleExceptionLog</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切入语法的意思是：</p><ul><li><code>within(@org.springframework.stereotype.Service *)</code>：切带有@Service注解的</li><li><code>within(com.baomidou.mybatisplus.extension.service.IService+)</code>：切IService的实现类</li><li><code>||</code> ：代表两者都可以，<code>或</code>的关系</li></ul><p>同时，在<code>ly-common</code>的<code>pom.xml</code>中<strong>引入IService的依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-基本代码"><a href="#3-3-基本代码" class="headerlink" title="3.3.基本代码"></a>3.3.基本代码</h2><p>基本代码是先添加代码框架，然后根据逻辑再在框架代码上慢慢补充！</p><h3 id="3-3-1-实体类"><a href="#3-3-1-实体类" class="headerlink" title="3.3.1.实体类"></a>3.3.1.实体类</h3><p>因为所有的表都会有<code>create_time</code>和<code>update_time</code>属性，因此我们会先<strong>定义一个通用的实体类</strong>，因为是通用的，因此放到<code>ly-common</code>这个项目的<code>com.leyou.common.entity</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode(onlyExplicitlyIncluded = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(Date updateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是商品分类对应的实体类，会继承上面的<code>BaseEntity</code>：</p><p><strong>继承关系，也就是说会继承父类的变量！</strong>也可以设置为不继承？？？？？？？？？？？？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line">    <span class="keyword">private</span> Boolean isParent;</span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-mapper"><a href="#3-3-2-mapper" class="headerlink" title="3.3.2.mapper"></a>3.3.2.mapper</h3><p>首先是mapper接口，在<code>ly-item-service</code>中添加<code>CategoryMapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Category;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Category</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-service"><a href="#3-3-3-service" class="headerlink" title="3.3.3.service"></a>3.3.3.service</h3><p>然后是service，在<code>ly-item-service</code>中添加<code>CategoryService</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Category;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Category</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.mapper.CategoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">CategoryMapper</span>, <span class="title">Category</span>&gt; <span class="keyword">implements</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-controller"><a href="#3-3-3-controller" class="headerlink" title="3.3.3.controller"></a>3.3.3.controller</h3><p>然后是controller，在<code>ly-item-service</code>中添加<code>CategoryController</code>，并注入<code>CategoryService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CategoryController</span><span class="params">(CategoryService categoryService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categoryService = categoryService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-接口文档"><a href="#3-4-接口文档" class="headerlink" title="3.4.接口文档"></a>3.4.接口文档</h2><p>企业开发中，都是<strong>前后端分离开发，因此需要提前编写好接口文档，方便前后端明确服务端的接口定义，同时开发</strong>。</p><p>在我们给大家准备的nginx中，已经准备好了静态的swagger文档。直接访问：<a href="http://localhost/api/doc.html">http://localhost/api/doc.html</a> 即可：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200712225901445.png" alt="image-20200712225901445"></p><p>可以看到，跟商品分类有关的接口包括：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200121183230162.png" alt="image-20200121183230162"> </p><p>下面我们分别实现这四个接口。</p><h2 id="3-5-根据id查询分类"><a href="#3-5-根据id查询分类" class="headerlink" title="3.5.根据id查询分类"></a>3.5.根据id查询分类</h2><h3 id="3-5-1-接口规范"><a href="#3-5-1-接口规范" class="headerlink" title="3.5.1.接口规范"></a>3.5.1.接口规范</h3><h4 id="1）基本信息"><a href="#1）基本信息" class="headerlink" title="1）基本信息"></a>1）基本信息</h4><p><strong>接口地址</strong> <code>/category/&#123;id&#125;</code></p><p><strong>请求方式</strong> <code>GET</code></p><p><strong>produces</strong> <code>[&quot;application/json&quot;]</code></p><h4 id="2）接口描述"><a href="#2）接口描述" class="headerlink" title="2）接口描述"></a>2）<strong>接口描述</strong></h4><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>id</td><td>分类的id</td><td>path</td><td>true</td><td>integer</td><td></td></tr></tbody></table><p><strong>响应状态</strong></p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>200</td><td>查询成功，返回商品分类对象</td><td>CategoryDTO</td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr></tbody></table><p><strong>响应参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th><th>schema</th></tr></thead><tbody><tr><td>id</td><td>分类ID</td><td>integer(int64)</td><td>integer(int64)</td></tr><tr><td>isParent</td><td>是否是父类目</td><td>boolean</td><td></td></tr><tr><td>name</td><td>分类名称</td><td>string</td><td></td></tr><tr><td>parentId</td><td>父类目id</td><td>integer(int64)</td><td>integer(int64)</td></tr><tr><td>sort</td><td>顺序</td><td>integer(int32)</td><td>integer(int32)</td></tr></tbody></table><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;isParent&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;parentId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;sort&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试时，<strong>在test文件夹下测试：先service层，在controller层，然后是前端测试，使用测试工具进行测试</strong>。</p><p>ps:    在serviceImpl类方法中可以使用快捷方式快速在test中生成测试代码框架哦。</p><h3 id="3-5-2-DTO对象"><a href="#3-5-2-DTO对象" class="headerlink" title="3.5.2.DTO对象"></a>3.5.2.DTO对象</h3><p>在开发中，根据对象作用的领域不同，会把实体类划分成这样：</p><ul><li>PO：<strong>P</strong>ersistent <strong>O</strong>bject 持久层对象，与数据库的表一一对应，完全一致，出现在DAO层和Service层</li><li>BO：<strong>B</strong>usiness <strong>O</strong>bject 业务层对象，用来组装PO，在业务层传递</li><li>DTO：<strong>D</strong>ata <strong>T</strong>ransfer <strong>O</strong>bject 数据转移对象，用于<strong>服务端和客户端间的数据传输，比如服务端返回数据到浏览器</strong></li></ul><p>DTO:说白了就是<strong>前端需要对象的什么属性，就什么属性，然后进行传递给前端</strong>！！！因此serice层方法返回类型从List<Category>改为List<CategoryDTO>;</p><p>这里我们把商品分类的返回值用CategoryDTO来表示，放到<code>ly-item-pojo</code>的<code>com.leyou.item.dto</code>包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span><span class="comment">//排除父类的属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Long parentId;</span><br><span class="line"><span class="keyword">private</span> Boolean isParent;</span><br><span class="line"><span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CategoryDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(entity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将PO集合转为DTO集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list PO对象的集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; PO的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> DTO集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;CategoryDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(list == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list.stream().map(CategoryDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<strong>经常会碰到DTO与PO转换的情况</strong>，所以我们<strong>在DTO中定义了工具方法，方便实现实体类转换</strong>。共有两个实体类PO和DTO转换的方法：</p><ul><li><p><code>CategoryDTO</code>继承了<code>BaseDTO</code>，在<code>BaseDTO</code>中定义了通用的单个对象的转换方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.BeanHelper;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本的DTO，提供了DTO和Entity之间的互相转换功能</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DTO转PO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass PO对象的字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; PO对象的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> PO对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">toEntity</span><span class="params">(Class&lt;T&gt; entityClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BeanHelper.copyProperties(<span class="keyword">this</span>, entityClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从Entity转为DTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 任意实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(entity != <span class="keyword">null</span>)&#123;</span><br><span class="line">            BeanUtils.copyProperties(entity, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDTO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>CategoryDTO</code>中定义了从PO集合转为DTO集合的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将PO集合转为DTO集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list PO对象的集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; PO的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> DTO集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;CategoryDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(list == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> list.stream().map(CategoryDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>转换原理：</strong>就是在Category对象中将相对应的属性赋值给CategoryDTO对象属性。其中用到了流处理，这里我们应该是毫无压力就可以读懂代码的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().map(CategoryDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-5-3-controller"><a href="#3-5-3-controller" class="headerlink" title="3.5.3.controller"></a>3.5.3.controller</h3><p>基于接口文档，定义controller中需要知道的信息包括：</p><ul><li>请求方式：<code>GET</code></li><li>请求路径：<code>/category/&#123;id&#125;</code></li><li>请求参数：<code>id</code></li><li>返回值：<code>CategoryDTO</code>，不过需要用ResponseEntity来封装</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;CategoryDTO&gt; <span class="title">queryCategoryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> CategoryDTO(categoryService.getById(id)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200214223031349.png" alt="image-20200214223031349"></p><p>注意：注入的categoryService 对象，有直接对应的方法能实现逻辑直接调用就好了，没有的话要去categoryService Impl类中定义能显示一定业务的方法来操作数据库！</p><h2 id="3-6-根据id集合查询分类"><a href="#3-6-根据id集合查询分类" class="headerlink" title="3.6.根据id集合查询分类"></a>3.6.根据id集合查询分类</h2><p>基于接口文档，定义controller中需要知道的信息包括：</p><ul><li>请求方式：<code>GET</code></li><li>请求路径：<code>/category/list</code></li><li>请求参数：<code>ids</code>，多个id集合</li><li>返回值：<code>List&lt;CategoryDTO&gt;</code>，不过需要用ResponseEntity来封装</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据分类id集合查询分类集合</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;CategoryDTO&gt;&gt; queryCategoryByIds(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(CategoryDTO.convertEntityList(categoryService.listByIds(ids)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200122115731545.png" alt="image-20200122115731545"></p><p>上面使用了<strong>转换工具类方法</strong></p><h2 id="3-7-根据父类目id查询子分类"><a href="#3-7-根据父类目id查询子分类" class="headerlink" title="3.7.根据父类目id查询子分类"></a>3.7.根据父类目id查询子分类</h2><p>基于接口文档，定义controller中需要知道的信息包括：</p><ul><li>请求方式：<code>GET</code></li><li>请求路径：<code>/category/of/parent</code></li><li>请求参数：<code> pid</code>，父类目id，就是商品分类表中的<code>parent_id</code>字段</li><li>返回值：<code>List&lt;CategoryDTO&gt;</code>，不过需要用ResponseEntity来封装</li></ul><p>parent_id是分类表中的普通字段，并不是主键，因此查询要选用 queryByWrapper。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父类目id查询子类目的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid 父类目的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 子类目的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/parent&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;CategoryDTO&gt;&gt; queryCategoryByParentId(<span class="meta">@RequestParam(&quot;pid&quot;)</span> Long pid)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="comment">// 封装并返回</span></span><br><span class="line">        CategoryDTO.convertEntityList(<span class="comment">// 把PO集合转为DTO集合</span></span><br><span class="line">            categoryService.query().eq(<span class="string">&quot;parent_id&quot;</span>, pid).list()<span class="comment">// 根据父类目id查询集合</span></span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-根据品牌id查询分类"><a href="#3-8-根据品牌id查询分类" class="headerlink" title="3.8.根据品牌id查询分类"></a>3.8.根据品牌id查询分类</h2><h3 id="3-8-1-业务分析"><a href="#3-8-1-业务分析" class="headerlink" title="3.8.1.业务分析"></a>3.8.1.业务分析</h3><p> 商品品牌和商品分类之间是多对多关系，在我们的数据库中有一个<strong>中间表来维护关系</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_category_brand` (</span><br><span class="line">  `category_id` bigint(20) NOT NULL COMMENT &#x27;商品类目id&#x27;,</span><br><span class="line">  `brand_id` bigint(20) NOT NULL COMMENT &#x27;品牌id&#x27;,</span><br><span class="line">  PRIMARY KEY (`category_id`,`brand_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#x27;商品分类和品牌的中间表，两者是多对多关系&#x27;;</span><br></pre></td></tr></table></figure><p>因此，要根据品牌id查询分类，有两种选择：</p><ul><li>方案一：先根据品牌id到中间表查询，得到分类id的集合，然后再根据分类id，到分类表查询</li><li>方案二：利用关联查询，一次查询完成。（<strong>需要我们自己在xml映射文件中写sql语句，mapper层代码，紧接着是service方法，将查询结果转DTO返回给controller</strong>，其实就是使用mybatis框架）</li></ul><p><strong>mybatis-plus并不支持多表关联查询</strong>，因此这里我们可以采用方案一。</p><p>解析：因为mybatis-plus是封装好的框架，查询代码自动生成，<strong>既然是框架，那么约定肯定比较多</strong>，不过好在能自己编写sql，自己扩展编写相关方法，在框架实现不了的逻辑下依然能够自定义业务逻辑代码。</p><h3 id="3-8-2-中间表代码"><a href="#3-8-2-中间表代码" class="headerlink" title="3.8.2.中间表代码"></a>3.8.2.中间表代码</h3><p>定义中间表的实体类、mapper、service等。</p><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><p>在<code>ly-item-service</code>的<code>com.leyou.item.entity</code>包下定义中间表的实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_category_brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryBrand</span> </span>&#123;</span><br><span class="line">    <span class="comment">// IdType.INPUT，代表主键采用自己填写而不是自增长。</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long brandId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h4><p>在<code>ly-item-service</code>的<code>com.leyou.item.mapper</code>包下定义中间表的mapper代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.CategoryBrand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryBrandMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">CategoryBrand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p>在<code>ly-item-service</code>的<code>com.leyou.item.service</code>包下定义中间表的service代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.CategoryBrand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryBrandService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">CategoryBrand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service实现类，先根据品牌id去中间表查询，得到分类id集合，再到分类表查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.CategoryBrand;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.mapper.CategoryBrandMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.CategoryBrandService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryBrandServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">CategoryBrandMapper</span>, <span class="title">CategoryBrand</span>&gt; <span class="keyword">implements</span> <span class="title">CategoryBrandService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-3-接口声明"><a href="#3-8-3-接口声明" class="headerlink" title="3.8.3.接口声明"></a>3.8.3.接口声明</h3><p>基于接口文档，定义controller中需要知道的信息包括：</p><ul><li>请求方式：<code>GET</code></li><li>请求路径：<code>/category/of/brand</code></li><li>请求参数：<code> id</code>，品牌id</li><li>返回值：<code>List&lt;CategoryDTO&gt;</code>，不过需要用ResponseEntity来封装</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据品牌id查询分类集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brandId 品牌id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;CategoryDTO&gt;&gt; queryCategoryByBrandId(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long brandId)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(categoryService.queryCategoryByBrandId(brandId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-4-业务实现"><a href="#3-8-4-业务实现" class="headerlink" title="3.8.4.业务实现"></a>3.8.4.业务实现</h3><p>先在CategoryService中定义方法声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Category</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;CategoryDTO&gt; <span class="title">queryCategoryByBrandId</span><span class="params">(Long brandId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在CategoryServiceImpl中编写方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">CategoryMapper</span>, <span class="title">Category</span>&gt; <span class="keyword">implements</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CategoryBrandService categoryBrandService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里采用了构造注入，也可以像以前那样，使用注解注入哈！</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CategoryServiceImpl</span><span class="params">(CategoryBrandService categoryBrandService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categoryBrandService = categoryBrandService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;CategoryDTO&gt; <span class="title">queryCategoryByBrandId</span><span class="params">(Long brandId)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.根据品牌id，查询中间表，得到中间表对象集合</span></span><br><span class="line">        List&lt;CategoryBrand&gt; categoryBrandList = categoryBrandService.query().eq(<span class="string">&quot;brand_id&quot;</span>, brandId).list();</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(categoryBrandList))&#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.获取分类id集合</span></span><br><span class="line">        List&lt;Long&gt; categoryIdList = categoryBrandList.stream()</span><br><span class="line">                .map(CategoryBrand::getCategoryId).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 3.根据分类id集合，查询分类对象集合</span></span><br><span class="line">        List&lt;Category&gt; categories = listByIds(categoryIdList);</span><br><span class="line">        <span class="comment">// 4.转换DTO</span></span><br><span class="line">        <span class="keyword">return</span> CategoryDTO.convertEntityList(categories);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-测试"><a href="#3-9-测试" class="headerlink" title="3.9.测试"></a>3.9.测试</h2><p>我们重启商品微服务，然后测试接口。</p><p>注意事项：<strong>启动项目后立马访问url，可能会响应超时</strong>，因为<strong>网关是周期性去注册中心拉取服务地址以及端口的信息的</strong>，启动成功只能表示微服务将地址端口注册到尤里克注册中心，网关并不一定有微服务的ip端口信息，因此需要等待30-60s时间才能正常访问url资源哈！</p><h3 id="3-9-1-接口测试"><a href="#3-9-1-接口测试" class="headerlink" title="3.9.1.接口测试"></a>3.9.1.接口测试</h3><p>例如查询商品分类的接口，地址：</p><p><a href="http://localhost:8081/category/of/parent?pid=0">http://localhost:8081/category/of/parent?pid=0</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200122135005285.png" alt="image-20200122135005285"> </p><h3 id="3-9-2-页面测试"><a href="#3-9-2-页面测试" class="headerlink" title="3.9.2.页面测试"></a>3.9.2.页面测试</h3><p>我们访问后台管理项目，点击商品管理下面的分类管理：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200711000945643.png" alt="image-20200711000945643"> </p><p>可以看到页面并未出现商品分类信息，打开浏览器控制台，发现这样的错误提示：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200122135552725.png" alt="image-20200122135552725"></p><p>发现页面发起的请求地址是：<a href="http://api.leyou.com/item/category/of/parent?pid=0%EF%BC%8C%E5%B9%B6%E4%B8%94**%E5%87%BA%E7%8E%B0%E4%BA%86%60blocked">http://api.leyou.com/item/category/of/parent?pid=0，并且**出现了`blocked</a> by CORS`这样的提示<strong>，这是怎么回事呢？</strong>浏览器不允许跨域请求呗！！！**</p><h1 id="4-CORS跨域"><a href="#4-CORS跨域" class="headerlink" title="4.CORS跨域"></a>4.CORS跨域</h1><h2 id="4-1-跨域问题"><a href="#4-1-跨域问题" class="headerlink" title="4.1.跨域问题"></a>4.1.跨域问题</h2><h3 id="4-1-1-什么是跨域"><a href="#4-1-1-什么是跨域" class="headerlink" title="4.1.1.什么是跨域"></a>4.1.1.什么是跨域</h3><p>跨域是指跨域名及端口的访问，以下情况都属于跨域：</p><table><thead><tr><th>跨域原因说明</th><th>示例</th></tr></thead><tbody><tr><td>一级或二级域名不同</td><td><code>www.jd.com</code> 与 <code>www.taobao.com</code></td></tr><tr><td>域名相同，端口不同</td><td><code>www.jd.com:8080</code> 与 <code>www.jd.com:8081</code></td></tr><tr><td>三级域名不同</td><td><code>item.jd.com</code> 与 <code>miaosha.jd.com</code></td></tr></tbody></table><p>如果<strong>域名和端口都相同，但是请求路径不同</strong>，不属于跨域，如：</p><p><code>www.jd.com/item</code> </p><p><code>www.jd.com/goods</code></p><p>而我们刚才是从<code>manage.leyou.com</code>去访问<code>api.leyou.com</code>，这<strong>属于三级域名不同，跨域了</strong>。</p><h3 id="4-1-2-为什么有跨域问题？"><a href="#4-1-2-为什么有跨域问题？" class="headerlink" title="4.1.2.为什么有跨域问题？"></a>4.1.2.为什么有跨域问题？</h3><p><strong>跨域不一定会有跨域问题</strong>。</p><p>因为跨域问题是浏览器对于ajax请求的一种安全限制：<strong>一个页面发起的ajax请求，只能是于当前页同域名的路径</strong>，这能<strong>有效的阻止跨站攻击</strong>。</p><p>因此：<strong>跨域问题 是针对ajax的一种限制</strong>。</p><p>但是这却<strong>给我们的开发带来了不便</strong>，而且<strong>在实际生成环境中，肯定会有很多台服务器之间交互，地址和端口都可能不同</strong>，怎么办？</p><p>注意：<strong>跨域请求只是浏览器对响应结果的一种限制（为了阻止跨域攻击），服务器还是能被正常访问并返回资源的，只是浏览器不允许我们将跨域资源进行显示而已</strong>！！！</p><h3 id="4-1-3-解决跨域问题的方案"><a href="#4-1-3-解决跨域问题的方案" class="headerlink" title="4.1.3.解决跨域问题的方案"></a>4.1.3.解决跨域问题的方案</h3><p>浏览器虽然会限制跨域请求，但是也给出了解决方案。<strong>如果你确实需要发送跨域的ajax，必须通过被访问的服务端同意才可以</strong>。浏览器与服务器间<strong>协商是否允许跨域，这样的方式就是CORS</strong>。</p><p>参考文档：<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><h2 id="4-2-CORS介绍"><a href="#4-2-CORS介绍" class="headerlink" title="4.2.CORS介绍"></a>4.2.CORS介绍</h2><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p><p>它允许浏览器向跨源服务器，发出<a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html"><code>XMLHttpRequest</code></a>请求，从而克服了AJAX只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">同源</a>使用的限制。</p><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p><ul><li><p><strong>浏览器端：</strong></p><p>目前，所有浏览器都支持该功能（IE10以下不行）。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。浏览器会在发出ajax时询问服务端是否允许当前网站的跨域请求，并根据服务端响应做出拦截或放行的处理。</p></li><li><p><strong>服务端：</strong></p><p>CORS通信与AJAX没有任何差别，因此你不需要改变以前的业务逻辑。只不过，浏览器会在请求中携带一些头信息，表明请求者的身份。服务端接收到以后，需要对这些信息做出判断，如果允许则需要在返回的头信息中携带一些许可的声明。</p></li></ul><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">要想进行跨域请求，</span></span><br><span class="line"><span class="attr">浏览器需要发送跨域请求（浏览器自动完成，在请求头添加信息，标明请求身份），</span></span><br><span class="line"><span class="attr">服务器根据这个身份，在作出响应时标明该资源是否能进行跨域请求</span></span><br><span class="line"><span class="meta">（在响应头添加：Access-Control-Allow-Origin</span>: <span class="string">http://manage.leyou.com),</span></span><br><span class="line"><span class="attr">浏览器根据响应头的Access-Control-Allow-Origin字段信息，决定是否展示资源！</span></span><br></pre></td></tr></table></figure><p>注意：<strong>跨域请求只是浏览器对响应结果的一种限制（为了阻止跨域攻击），服务器还是能被正常访问并返回资源的，只是浏览器不允许我们将跨域资源进行显示而已</strong>！！！</p><h2 id="4-3-SpringCloudGateway的CORS"><a href="#4-3-SpringCloudGateway的CORS" class="headerlink" title="4.3.SpringCloudGateway的CORS"></a>4.3.SpringCloudGateway的CORS</h2><p>在SpringCloudGateway中，已经提供了默认的CORS实现，我们只需要通过application.yml做简单配置即可。我们在<code>ly-gateway</code>中的<code>application.yml</code>中添加一些配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 。。。</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 是否将当前cors配置加入到SimpleUrlHandlerMapping中，解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://manage.leyou.com&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://www.leyou.com&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure><p>完整配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution.isolation.thread.timeoutInMilliseconds:</span> <span class="number">6000</span> <span class="comment"># 熔断超时时长：6000ms</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">500</span> <span class="comment"># ribbon链接超时时长</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># ribbon读取超时时长</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span> <span class="comment"># redis地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># redis端口</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 去除路由前缀</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span> <span class="comment"># 指定过滤工厂名称（可以是任意过滤工厂类型）</span></span><br><span class="line">        <span class="attr">args:</span> <span class="comment"># 指定过滤的参数</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">fallbackcmd</span>  <span class="comment"># hystrix的指令名</span></span><br><span class="line">          <span class="attr">fallbackUri:</span> <span class="string">forward:/hystrix/fallback</span> <span class="comment"># 失败后的跳转路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span> <span class="comment">#请求数限流 名字不能随便写</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span> <span class="comment"># 通过spEL表达式指定一个key生成器，#&#123;&#125;是spEL，@代表spring中的Bean</span></span><br><span class="line">          <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">2</span> <span class="comment"># 生成令牌的速率</span></span><br><span class="line">          <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span> <span class="comment"># 桶的容量</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 是否将当前cors配置加入到SimpleUrlHandlerMapping中，解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span> <span class="comment"># /** 代表拦截一切请求路径，都需要做CORS判断</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;http://manage.leyou.com&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;http://www.leyou.com&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">item-service</span> <span class="comment"># 商品微服务</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://item-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/item/**</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="4-4-再次测试"><a href="#4-4-再次测试" class="headerlink" title="4.4.再次测试"></a>4.4.再次测试</h2><p>重启网关，然后再次访问页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200711001156810.png" alt="image-20200711001156810"></p><h2 id="访问过程总结："><a href="#访问过程总结：" class="headerlink" title="访问过程总结："></a>访问过程总结：</h2><p>本来在浏览器中访问后台管理页面，访问的是http:manage.leyou.com/item/category/，紧接着点击某个分类，进行跨域请求（向后端微服务请求资源然后展示到浏览器中）；</p><p>其中跨域请求的<strong>url：http:api.leyou.com/item/category/of/parent?pid=0 然后回车，到浏览器中显示资源，中间经历了什么？？？？</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">访问api.leyou.com域名，得到ip以及host信息（host信息为api.leyou.com），浏览器请求的端口默认为80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">2</span> <span class="string">根据ip+端口，找到了目标机器的对应端口的服务。</span></span><br><span class="line"><span class="attr">3</span> <span class="string">由于目标机器配置的nginx监听的就是80端口，（nginx服务端口），于是接下来就是nginx的反向代理。</span></span><br><span class="line"><span class="attr">4</span> <span class="string">如何进行反向代理呢？？？根据host名称哈。由前面可知，host为api.leyou.com，结合nginx配置文件，</span></span><br><span class="line"><span class="meta">要反向代理到：http</span>:<span class="string">//127.0.0.1:10010，这是网关地址+ip</span></span><br><span class="line"><span class="attr">5</span> <span class="string">此时达到网关时，访问的完整url为：http://127.0.0.1:10010/item/category/of/parent?pid=0</span></span><br><span class="line"><span class="meta">这时候就要根据网关路由策略进行路由了，在网关服务的配置文件中可以知道</span> <span class="string">路由策略：/item/* </span></span><br><span class="line"><span class="attr">其对应的服务uri为item-service；网关根据注册中心拉取下来的微服务信息，</span></span><br><span class="line"><span class="attr">寻找item-service微服务的ip地址+端口</span></span><br><span class="line"><span class="attr">注意1，网关并不是去注册中心找微服务的ip+端口的,</span></span><br><span class="line"><span class="attr">网关去注册中心拉取服务以及对应的ip端口是周期性拉取的，</span></span><br><span class="line"><span class="attr">网关首先在本地注册中查找微服务uri对应的ip端口信息，找不到就超时咯</span></span><br><span class="line"><span class="attr">注意2，nginx除了反向代理，还可以负载均衡哦，这里没用到而已！</span></span><br><span class="line"><span class="attr">6</span> <span class="string">找到微服务的ip+端口，那么就可以进行最终url拼接了：http:微服务ip+微服务端口/category/of/parent?pid=0</span></span><br><span class="line"><span class="attr">注意，/item路由前缀要去掉哈！</span></span><br></pre></td></tr></table></figure><p>nginx与网关的区别：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">相同点：</span></span><br><span class="line"><span class="attr">网关跟nginx都可以做负载均衡，在springboot中，可以将网关配置为“利用ribbon进行负载均衡）</span></span><br><span class="line"><span class="attr">不同点：</span></span><br><span class="line"><span class="attr">网关做了集群，那么网关前面一定要有相关服务（如，nginx，网关）来给网关集群进行负载均衡，</span></span><br><span class="line"><span class="attr">而nginx做了集群也需要负载均衡，但是nginx内部已经有了负载均衡了，共同虚拟主机给集群中的nginx做负载均衡。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分类管理&quot;&gt;&lt;a href=&quot;#分类管理&quot; class=&quot;headerlink&quot; title=&quot;分类管理&quot;&gt;&lt;/a&gt;分类管理&lt;/h1&gt;&lt;h1 id=&quot;0-学习目标&quot;&gt;&lt;a href=&quot;#0-学习目标&quot; class=&quot;headerlink&quot; title=&quot;0.学习目</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="乐优商城项目" scheme="http://example.com/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-项目搭建</title>
    <link href="http://example.com/2022/06/15/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/06/15/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</id>
    <published>2022-06-15T12:55:12.000Z</published>
    <updated>2022-06-15T13:02:16.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-乐优商城项目环境搭建"><a href="#01-乐优商城项目环境搭建" class="headerlink" title="01-乐优商城项目环境搭建"></a>01-乐优商城项目环境搭建</h1><h1 id="本博客学习目标："><a href="#本博客学习目标：" class="headerlink" title="本博客学习目标："></a>本博客学习目标：</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">了解乐优商城项目架构</span></span><br><span class="line"><span class="meta">-</span> <span class="string">会搭建后台管理前端</span></span><br><span class="line"><span class="meta">-</span> <span class="string">会搭建微服务集群</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能完成统一异常处理</span></span><br><span class="line"><span class="meta">-</span> <span class="string">能够导入项目数据</span></span><br></pre></td></tr></table></figure><h1 id="1-了解电商行业"><a href="#1-了解电商行业" class="headerlink" title="1.了解电商行业"></a>1.了解电商行业</h1><p>我们要学习的乐优商城属于电商项目，因此我们来了解一下电商行业的一些信息。</p><h2 id="1-1-电商行业模式"><a href="#1-1-电商行业模式" class="headerlink" title="1.1.电商行业模式"></a>1.1.电商行业模式</h2><p>电商行业的一些常见模式：</p><ul><li><p><strong>B2C</strong></p><p>B2C就是企业通过网络销售产品或服务给个人消费者。企业厂商直接将产品或服务推上网络，并提供充足资讯与便利的接口吸引消费者选购，这也是一般最常见的<a href="https://baike.baidu.com/item/%E4%BD%9C%E4%B8%9A%E6%96%B9%E5%BC%8F">作业方式</a>，例如网络购物、证券公司网络下单作业、一般网站的资料查询作业等等，都是属于企业直接接触顾客的作业方式</p><p>代表：唯品会、乐蜂网、当当网</p></li><li><p><strong>B2B</strong></p><p>企业与企业之间的<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1/98106">电子商务</a>（Business to Business，即B2B）。B2B方式是电子商务应用最多和最受企业重视的形式，企业可以使用Internet或其他网络对每笔交易寻找最佳合作伙伴，完成从定购到结算的全部交易行为。</p><p>代表：马云的<a href="https://baike.baidu.com/item/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4/33">阿里巴巴</a>电子商务模式，B2B交易金额占整体电子商务市场份额的85%左右。</p></li><li><p><strong>C2C平台</strong></p><p>C2C是指消费者与消费者之间的互动交易行为，这种交易方式是多变的。例如消费者可同在某一竞标网站或拍卖网站中，共同在线上出价而由价高者得标。或由消费者自行在<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%96%B0%E9%97%BB">网络新闻</a>论坛或BBS上张贴布告以出售二手货品，甚至是新品，诸如此类因消费者间的互动而完成的交易，就是<a href="https://baike.baidu.com/item/C2C">C2C</a>的交易。</p><p>代表：闲鱼</p></li><li><p><strong>O2O</strong></p><p>线上与线下相结合的电子商务（Online to Offline，即O2O）。<a href="https://baike.baidu.com/item/O2O/8564117">O2O</a>通过网购导购机，把互联网与地面店完美对接，实现互联网落地。</p><p>例如：美图、饿了么</p></li><li><p><strong>P2P</strong></p><ul><li>个人对个人的金融借贷，</li></ul></li></ul><h2 id="1-2-电商的特点"><a href="#1-2-电商的特点" class="headerlink" title="1.2.电商的特点"></a>1.2.电商的特点</h2><p>近年来，世界经济正向数字化转型，大力发展数字经济成为全球共识。党的十九大报告明确提出要建设“数字中国”“网络强国”，我国数字经济发展进入新阶段，市场规模位居全球第二，数字经济与实体经济深度融合，有力促进了供给侧结构性改革。电子商务是数字经济的重要组成部分，是数字经济最活跃、最集中的表现形式之一。</p><p>近年来，电子商务规模逐步扩大，已经深入到我们生活的各个角落，特别是一些全民参与的购物庆典，其典型代表就是每年一度的双十一、6.18等活动。有图为证：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/timg.jpg" alt="img"></p><p>2018双11开场30分钟，创造<strong>每秒交易峰值21万笔</strong>。</p><p>2019年，阿里自研数据库OceanBase的峰值达到6100万次。</p><p>如此高的并发，对技术有很高的要求：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">技术范围广</span></span><br><span class="line"><span class="meta">-</span> <span class="string">技术新</span></span><br><span class="line"><span class="meta">-</span> <span class="string">要求双高：</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">高并发（分布式、静态化技术、CDN服务、缓存技术、异步并发、池化、队列）</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">高可用（集群、负载均衡、限流、降级、熔断）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">数据量大</span></span><br><span class="line"><span class="meta">-</span> <span class="string">业务复杂</span></span><br></pre></td></tr></table></figure><h1 id="2-乐优商城介绍"><a href="#2-乐优商城介绍" class="headerlink" title="2.乐优商城介绍"></a>2.乐优商城介绍</h1><h2 id="2-1-项目介绍"><a href="#2-1-项目介绍" class="headerlink" title="2.1.项目介绍"></a>2.1.项目介绍</h2><p>乐优商城是一个全品类电商购物网站<strong>（B2C）</strong>，目前提供了基于H5的购物网站，基于小程序的客户端正在开发中。服务端基于SpringCloud技术栈搭建微服务群，对外提供统一的REST风格接口，实现对多端的统一支持。</p><h2 id="2-2-业务架构图"><a href="#2-2-业务架构图" class="headerlink" title="2.2.业务架构图"></a>2.2.业务架构图</h2><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107161255077.png" alt="image-20200107161255077"></p><p>乐优商城采用了<strong>前后端分离</strong>的架构方式，</p><ul><li><p><strong>前端采用Vue技术栈</strong>，从使用者的角度，分为：</p><ul><li>前台门户系统：目前只支持H5，后期会加入微信小程序</li><li>后台管理系统：基于Vue实现的单页应用（SPA），实现管理功能</li></ul></li><li><p><strong>服务端采用SpringCloud技术栈形成微服务集群</strong>，会包括：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1 商品微服务：商品及商品分类、品牌、库存等的服务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2 搜索微服务：实现搜索功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3 交易微服务：实现订单相关业务、实现购物车相关业务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4 用户服务：用户的登录注册、用户信息管理等功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">5 短信服务：完成各种短信的发送任务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">6 支付服务：对接各大支付平台</span></span><br><span class="line"><span class="meta">-</span> <span class="string">7 授权服务：完成对用户的授权、鉴权等功能</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-3-技术架构图"><a href="#2-3-技术架构图" class="headerlink" title="2.3.技术架构图"></a>2.3.技术架构图</h2><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200414113210392.png" alt="image-20200414113210392"></p><p><strong>前端技术包括：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">基础的HTML、CSS、JavaScript（基于ES6标准）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">JQuery</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Vue.js 2.0</span></span><br><span class="line"><span class="meta">-</span> <span class="string">基于Vue的UI框架：Vuetify、类似于BootStrap、element-ui</span></span><br><span class="line"><span class="meta">-</span> <span class="string">前端构建工具：WebPack，项目编译、打包工具</span></span><br><span class="line"><span class="meta">-</span> <span class="string">前端安装包工具：NPM</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Vue脚手架：Vue-cli</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Vue路由：vue-router</span></span><br><span class="line"><span class="meta">-</span> <span class="string">ajax框架：axios</span></span><br><span class="line"><span class="meta">-</span> <span class="string">基于Vue的富文本框架：quill-editor</span></span><br></pre></td></tr></table></figure><p><strong>服务端技术包括：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">基础的SpringMVC、Spring和MyBatis（MybatisPlus）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Spring Boot 2</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Spring Cloud 技术栈</span></span><br><span class="line"><span class="meta">-</span> <span class="string">OpenResty（Nginx + Lua）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Redis、Jedis、Redission、Lua脚本</span></span><br><span class="line"><span class="meta">-</span> <span class="string">RabbitMQ</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Elasticsearch</span></span><br><span class="line"><span class="meta">-</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">-</span> <span class="string">MongoDB</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Canal</span></span><br><span class="line"><span class="meta">-</span> <span class="string">数据库PXC集群、Mysql读写分离集群</span></span><br><span class="line"><span class="meta">-</span> <span class="string">MyCat中间件</span></span><br><span class="line"><span class="meta">-</span> <span class="string">JWT</span></span><br><span class="line"><span class="meta">-</span> <span class="string">GrayLog日志系统</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Skywalking链路追踪</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Seata分布式事务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">阿里OSS、SMS等服务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">微信支付</span></span><br></pre></td></tr></table></figure><h1 id="3-后台管理页面"><a href="#3-后台管理页面" class="headerlink" title="3.后台管理页面"></a>3.后台管理页面</h1><p>后台管理页面面向的是公司内部管理人员，我们采用的是基于<strong>vue的单页应用架构</strong>（SPA）。整个项目的UI部分使用的是vuetify框架。如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20201103212737742.png" alt="image-20201103212737742"></p><h2 id="3-1-什么是SPA"><a href="#3-1-什么是SPA" class="headerlink" title="3.1.什么是SPA"></a>3.1.什么是SPA</h2><p>SPA，并不是去洗澡按摩，而是Single Page Application，即单页应用。整个系统只会有<strong>一个HTML页面，和一个根Vue实例</strong>。然后需要定义<strong>很多的Vue组件</strong>，<strong>页面由许多定义好的组件组合而成</strong>。</p><p>我们的后台管理系统就是一个基于Vue的SPA的模式，其中的<strong>UI交互式通过一个名为Vue-router完成的（组件。切换，也就是页面的切换）</strong></p><h2 id="3-2-导入项目资源"><a href="#3-2-导入项目资源" class="headerlink" title="3.2.导入项目资源"></a>3.2.导入项目资源</h2><p>我们已经提前准备好了项目源码，在课前资料中：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107165235605.png" alt="image-20200107165235605"> </p><p>接下来我们把这个项目导入，步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">解压缩</span></span><br><span class="line"><span class="meta">-</span> <span class="string">导入到Idea</span></span><br><span class="line"><span class="meta">-</span> <span class="string">运行</span></span><br></pre></td></tr></table></figure><h3 id="1）解压"><a href="#1）解压" class="headerlink" title="1）解压"></a>1）解压</h3><p>我们解压缩，放到工作目录中：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107165455292.png" alt="image-20200107165455292"> </p><p>然后在你喜欢的开发工具中打开即可。</p><h3 id="2）导入"><a href="#2）导入" class="headerlink" title="2）导入"></a>2）导入</h3><p>这里我们使用Idea来打开：</p><p>然后在IDE中导入新的工程：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107165723406.png" alt="image-20200107165723406"></p><p>选中我们的工程：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107165604253.png" alt="image-20200107165604253"> </p><p>项目结构如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107165835035.png" alt="image-20200107165835035"> </p><h3 id="3）运行"><a href="#3）运行" class="headerlink" title="3）运行"></a>3）运行</h3><p>运行这个项目有2种方式：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">直接输入命令运行</span></span><br><span class="line"><span class="meta">-</span> <span class="string">通过脚本运行</span></span><br></pre></td></tr></table></figure><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><p>在Idea开发工具的左下角，有一个termnal按钮，点击即可弹出窗口，然后在窗口输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107170305937.png" alt="image-20200107170305937"></p><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><p>在项目中，有一个package.json文件：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107170415381.png" alt="image-20200107170415381"> </p><p>打开文件，可以看到下面的信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107170836172.png" alt="image-20200107170836172"></p><p>点击前面的小绿色三角形，即可启动。</p><h3 id="4）页面"><a href="#4）页面" class="headerlink" title="4）页面"></a>4）页面</h3><p>运行完成后，自动弹出页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107171146619.png" alt="image-20200107171146619"></p><p><strong>浏览器访问的是http://+地址+端口+/  /自动路由到了login，然后去找login.vue组件加载！！！</strong></p><h2 id="3-3-项目结构"><a href="#3-3-项目结构" class="headerlink" title="3.3.项目结构"></a>3.3.项目结构</h2><p>在Idea中，观察项目结构：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107171315460.png" alt="image-20200107171315460"> </p><p>可以看到，整个项目<strong>除了一个<code>index.html</code>外没有任何的静态页面</strong>。页面的内容<strong>定义在Vue组件中</strong>，也就是后缀名为<code>.vue</code>的文件。</p><h3 id="3-3-1-单文件组件"><a href="#3-3-1-单文件组件" class="headerlink" title="3.3.1.单文件组件"></a>3.3.1.单文件组件</h3><p><code>.vue</code>文件是vue组件的特殊形式，在<strong>以前</strong>我们定义一个Vue组件是这样来写的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> com = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div style=&quot;background-ground-color:red&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;hello ...&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Vue.component(<span class="string">&quot;com&quot;</span>, com);</span><br></pre></td></tr></table></figure><p>这种定义方式虽然可以实现，<strong>但是html、css、js代码混合在一起，而且在JS中编写html和css显然不够优雅</strong>。</p><p>而**<code>.vue</code>文件是把三者做了分离**：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1552921477484.png" alt="1552921477484"></p><p>这样就可以方便我们定义组件内容了。</p><h3 id="3-3-2-页面菜单"><a href="#3-3-2-页面菜单" class="headerlink" title="3.3.2.页面菜单"></a>3.3.2.页面菜单</h3><p>点击登录，进入首页，可以看到页面的左侧：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200710221217031.png" alt="image-20200710221217031"></p><p>这个菜单的文字信息，在项目的src目录下，有一个menu.js文件，是页面的左侧菜单目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107172201239.png" alt="image-20200107172201239"> </p><p>内容如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107172413816.png" alt="image-20200107172413816"> </p><h3 id="3-3-3-组件路由"><a href="#3-3-3-组件路由" class="headerlink" title="3.3.3.组件路由"></a>3.3.3.组件路由</h3><p>可以看到<strong>每个菜单都有一个path属性，点击path属性时，如何路由到对应的组件呢</strong>？</p><p>在项目目录下有一个route.js文件：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107173345083.png" alt="image-20200107173345083"> </p><p>点击打开，内容如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107173503495.png" alt="image-20200107173503495"></p><p>这里通过Vue-Router配置了一些路由的path路径和组件的映射关系。组件默认的路径前缀是<code>src/views</code>。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route(<span class="string">&quot;/item/category&quot;</span>,<span class="string">&#x27;/item/Category&#x27;</span>,<span class="string">&quot;Category&quot;</span>),</span><br></pre></td></tr></table></figure><p>代表的意思是：</p><ul><li>path：<code>/item/category</code></li><li>组件：<code>./src/views</code>下的<code>/item/Category</code>文件</li></ul><p><strong>访问path：<code>/item/category</code>，会被路由到：<code>./src/views/item/Category</code>组件：</strong></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200107173907133.png" alt="image-20200107173907133"> </p><h1 id="4-搭建微服务集群"><a href="#4-搭建微服务集群" class="headerlink" title="4.搭建微服务集群"></a>4.搭建微服务集群</h1><h2 id="4-1-统一环境"><a href="#4-1-统一环境" class="headerlink" title="4.1.统一环境"></a>4.1.统一环境</h2><p>为了保证开发环境的统一，减少不必要BUG</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">IDE：我们使用Idea，推荐版本，2019.1.4</span></span><br><span class="line"><span class="meta">-</span> <span class="string">JDK：统一使用JDK1.8.xx</span></span><br><span class="line"><span class="meta">-</span> <span class="string">项目构建：maven 3.3.x以上版本即可</span></span><br></pre></td></tr></table></figure><p>idea大家可以在我的课前资料中找到。另外，使用帮助大家可以参考课前资料的《idea使用指南.md》</p><p>我们在开发的过程中，为了保证以后的生产、测试环境统一。尽量都采用域名来访问项目。</p><p>二级域名：leyou.com  乐优商城</p><p>三级域名：manage.leyou.com , api.leyou.com，image.leyou.com，<a href="http://www.leyou.com/">www.leyou.com</a>…</p><p>因此，我们项目的包名也会以域名倒置：<code>com.leyou.项目名.包名</code></p><p>另外，为了避免频繁修改配置文件中的IP地址，我们<strong>将注册中心、网关、mysql等服务的地址都配置在本地的hosts文件中</strong>：</p><ul><li>windows：修改 <strong>C:\Windows\System32\drivers\etc\hosts</strong></li><li>MAC：修改/etc/hosts</li></ul><p>不是你的虚拟机，是你自己开发的电脑。</p><p>添加下面内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">127.0.0.1</span> <span class="string">ly-gateway</span></span><br><span class="line"><span class="meta">127.0.0.1</span> <span class="string">ly-registry</span></span><br><span class="line"><span class="meta">192.168.159.131</span> <span class="string">ly-mysql</span></span><br><span class="line"><span class="meta">192.168.159.131</span> <span class="string">ly-redis</span></span><br><span class="line"><span class="meta">192.168.159.131</span> <span class="string">ly-mq</span></span><br><span class="line"><span class="meta">192.168.159.131</span> <span class="string">ly-es</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>ly-gateway：是网关的IP地址，肯定是本机</li><li>ly-registry：是注册中心的地址，肯定是本机</li><li>ly-mysql：是mysql的地址，<strong>请写你自己的mysql的正确地址</strong></li><li>ly-redis：是你的redis的地址，<strong>请写你自己的redis的正确地址</strong>，在本地就写127.0.0.1，在虚拟机就填虚拟机地址</li><li>ly-mq：是你的mq的地址，<strong>请写你自己的mq的正确地址</strong></li><li>ly-es：是你的elasticsearch的地址，<strong>请写你自己的elasticsearch的正确地址</strong></li></ul><h2 id="4-2-项目结构"><a href="#4-2-项目结构" class="headerlink" title="4.2.项目结构"></a>4.2.项目结构</h2><p>项目<strong>有许多微服务组成</strong>，而每个<strong>微服务的依赖及版本信息需要统一管理，因此需要有一个父工程</strong>。</p><p>而每个微服务本身有自己的业务，并且服务和服务间会有相互调用，需要<strong>将自身的实体类、Feign接口对外暴露出去，提供成jar包供别人加载</strong>，因此我们的项目结构是这样的：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108103538061.png" alt="image-20200108103538061"> </p><h2 id="4-3-父工程"><a href="#4-3-父工程" class="headerlink" title="4.3.父工程"></a>4.3.父工程</h2><p>创建统一的父工程：leyou，用来管理依赖及其版本，注意是<strong>创建project</strong>，而不是moudle</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239776553.png" alt="1551239776553"></p><p>填写工程信息：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239758795.png" alt="1551239758795"></p><p>保存的位置信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239769186.png" alt="1551239769186"></p><p>然后将pom文件修改成：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR5<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.plus.version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">mybatis.plus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">leyou.latest.version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">leyou.latest.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ali.oss.version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">ali.oss.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- springCloud --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;ali.oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!--这里再次指定版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现，我们在父工程中引入了SpringCloud等很多以后需要用到的依赖，以后创建的子工程就不需要自己引入了。</p><p>如果接下来创建的是一个需要<strong>运行和启动</strong>的子工程，需要加上SpringBoot的打包插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意，上面的启动插件，需要用到启动时的子工程才引入。并不是在父工程引用哦，否则本不需要启动的子工程会报错。</strong></p><h2 id="4-4-注册中心"><a href="#4-4-注册中心" class="headerlink" title="4.4.注册中心"></a>4.4.注册中心</h2><h3 id="4-4-1-创建工程"><a href="#4-4-1-创建工程" class="headerlink" title="4.4.1.创建工程"></a>4.4.1.创建工程</h3><p>这个大家应该比较熟悉了。</p><p>我们的注册中心，起名为：ly-registry，<strong>直接创建maven项目，自然会继承父类的依赖</strong>：</p><p>选择新建module：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239817387.png" alt="1551239817387"></p><p>选择maven安装，但是不要选择骨架：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239800177.png" alt="1551239800177"></p><p>然后填写项目坐标，我们的项目名称为ly-registry:</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239836496.png" alt="1551239836496"></p><p>选择安装目录，因为是聚合项目，目录应该是在父工程leyou的下面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239848532.png" alt="1551239848532"></p><h3 id="4-4-2-添加依赖"><a href="#4-4-2-添加依赖" class="headerlink" title="4.4.2.添加依赖"></a>4.4.2.添加依赖</h3><p>添加EurekaServer的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-registry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-4-编写启动类"><a href="#4-4-4-编写启动类" class="headerlink" title="4.4.4.编写启动类"></a>4.4.4.编写启动类</h3><p>创建一个包：com.leyou，然后新建一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyRegistry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyRegistry.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-5-配置文件"><a href="#4-4-5-配置文件" class="headerlink" title="4.4.5.配置文件"></a>4.4.5.配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-registry</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="4-4-6-项目的结构："><a href="#4-4-6-项目的结构：" class="headerlink" title="4.4.6.项目的结构："></a>4.4.6.项目的结构：</h3><p>目前，整个项目的结构如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239918685.png" alt="1551239918685"></p><p>注意：上面的注册中心能够跑动，需要<strong>将maven安装并且配置好环境变量，idea中选择安装路径</strong>；maven的介绍以及安装见：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2022/04/11/web-12-maven/</span></span><br></pre></td></tr></table></figure><p>但还是报错：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">main]</span> <span class="string">o.a.c.c.C.[Tomcat].[localhost].[/]       : Exception starting filter [servletContainer]</span></span><br></pre></td></tr></table></figure><h2 id="4-5-网关"><a href="#4-5-网关" class="headerlink" title="4.5.网关"></a>4.5.网关</h2><h3 id="4-5-1-搭建项目"><a href="#4-5-1-搭建项目" class="headerlink" title="4.5.1.搭建项目"></a>4.5.1.搭建项目</h3><p>步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">创建leyou的module，并命名</span></span><br><span class="line"><span class="meta">-</span> <span class="string">引入依赖</span></span><br><span class="line"><span class="meta">-</span> <span class="string">编写启动类</span></span><br><span class="line"><span class="meta">-</span> <span class="string">编写配置</span></span><br></pre></td></tr></table></figure><h4 id="1）创建module"><a href="#1）创建module" class="headerlink" title="1）创建module"></a>1）创建module</h4><p>与上面类似，选择maven方式创建Module，然后填写项目名称，我们命名为：ly-gateway</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239931675.png" alt="1551239931675"></p><p>填写保存的目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551239938112.png" alt="1551239938112"></p><h4 id="2）添加依赖"><a href="#2）添加依赖" class="headerlink" title="2）添加依赖"></a>2）添加依赖</h4><p>这里我们需要添加Zuul和EurekaClient的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3）编写启动类"><a href="#3）编写启动类" class="headerlink" title="3）编写启动类"></a>3）编写启动类</h4><p>创建一个包：<code>com.leyou.gateway</code>，然后新建一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.gateway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.SpringCloudApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyGateway</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyGateway.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4）配置文件"><a href="#4）配置文件" class="headerlink" title="4）配置文件"></a>4）配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution.isolation.thread.timeoutInMilliseconds:</span> <span class="number">6000</span> <span class="comment"># 熔断超时时长：6000ms</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">500</span> <span class="comment"># ribbon链接超时时长</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># ribbon读取超时时长</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 去除路由前缀</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="4-5-2-项目结构"><a href="#4-5-2-项目结构" class="headerlink" title="4.5.2.项目结构"></a>4.5.2.项目结构</h3><p>目前，leyou下有两个子模块：</p><ul><li>ly-registry：服务的注册中心（EurekaServer）</li><li>ly-api-gateway：服务网关（Zuul）</li></ul><p>目前，服务的结构如图所示：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240009768.png" alt="1551240009768"></p><h3 id="4-5-3-hystix降级配置"><a href="#4-5-3-hystix降级配置" class="headerlink" title="4.5.3.hystix降级配置"></a>4.5.3.hystix降级配置</h3><p>网关做请求路由转发，如果被调用的请求阻塞，需要通过Hystrix来做线程隔离和熔断，防止出现故障。</p><h4 id="1）Hystix降级过滤器"><a href="#1）Hystix降级过滤器" class="headerlink" title="1）Hystix降级过滤器"></a>1）Hystix降级过滤器</h4><p>可以通过default-filter来配置，会作用于所有的路由规则。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span> <span class="comment"># 指定过滤工厂名称（可以是任意过滤工厂类型）</span></span><br><span class="line">        <span class="attr">args:</span> <span class="comment"># 指定过滤的参数</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">fallbackcmd</span>  <span class="comment"># hystrix的指令名</span></span><br><span class="line">          <span class="attr">fallbackUri:</span> <span class="string">forward:/hystrix/fallback</span> <span class="comment"># 失败后的跳转路径</span></span><br></pre></td></tr></table></figure><p>触发降级后的fallback处理路径：/fhystrix/fallback</p><h4 id="2）处理fallback的controller"><a href="#2）处理fallback的controller" class="headerlink" title="2）处理fallback的controller"></a>2）处理fallback的controller</h4><p>定义一个controller，用来编写失败的处理逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.gateway.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FallbackController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的超时处理逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 超时提醒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/hystrix/fallback&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">fallBackController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.GATEWAY_TIMEOUT).body(<span class="string">&quot;请求超时！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的返回值是一个名为ResponseEntity的类型。</p><h4 id="3）ResponseEntity"><a href="#3）ResponseEntity" class="headerlink" title="3）ResponseEntity"></a>3）ResponseEntity</h4><p><strong>ResponseEntity是Spring提供的结果类型</strong>，用来封装返回的HttpResponse数据，包括：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">响应状态码：通过ResponseEntity#status(int)方法指定，可以直接指定int值，或者HttpStatus枚举</span></span><br><span class="line"><span class="meta">-</span> <span class="string">响应头：可以指定key、value结构</span></span><br><span class="line"><span class="meta">-</span> <span class="string">响应体：任意对象，处理方式类似于@ResponseBody</span></span><br></pre></td></tr></table></figure><p>这种返回值方式是符合REST风格的，用Http状态码作为结果状态，用响应体封装数据。</p><h3 id="4-5-4-网关限流-了解"><a href="#4-5-4-网关限流-了解" class="headerlink" title="4.5.4.网关限流(了解)"></a>4.5.4.网关限流(了解)</h3><p>网关除了请求路由、身份验证，还有一个非常重要的作用：请求限流。当系统面对高并发请求时，为了减少对业务处理服务的压力，需要在网关中对请求限流，按照一定的速率放行请求。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108155348648.png" alt="image-20200108155348648"></p><p>常见的限流算法包括：</p><ul><li>计数器算法</li><li>漏桶算法</li><li>令牌桶算法</li></ul><h4 id="4-5-4-1-令牌桶算法原理"><a href="#4-5-4-1-令牌桶算法原理" class="headerlink" title="4.5.4.1.令牌桶算法原理"></a>4.5.4.1.令牌桶算法原理</h4><p>SpringGateway中采用的是令牌桶算法，令牌桶算法原理：</p><ul><li>准备一个令牌桶，有固定容量，一般为服务并发上限</li><li>按照固定速率，生成令牌并存入令牌桶，如果桶中令牌数达到上限，就丢弃令牌。</li><li>每次请求调用需要先获取令牌，只有拿到令牌，才继续执行，否则选择选择等待或者直接拒绝。</li></ul><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108161959810.png" alt="image-20200108161959810"></p><h4 id="4-5-4-2-Gateway中限流"><a href="#4-5-4-2-Gateway中限流" class="headerlink" title="4.5.4.2.Gateway中限流"></a>4.5.4.2.Gateway中限流</h4><h5 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h5><p>SpringCloudGateway是采用令牌桶算法，其令牌相关信息记录在redis中，因此需要引入Redis有关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：这里<strong>不是普通的redis依赖，而是响应式的Redis依赖</strong>，因为SpringGateway是基于WebFlux的响应式项目。</p><h5 id="2）配置过滤条件key"><a href="#2）配置过滤条件key" class="headerlink" title="2）配置过滤条件key"></a>2）配置过滤条件key</h5><p>Gateway会在Redis中记录令牌相关信息，我们可以<strong>自己定义令牌桶的规则</strong>，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">给不同的请求URI路径设置不同令牌桶</span></span><br><span class="line"><span class="meta">-</span> <span class="string">给不同的登录用户设置不同令牌桶</span></span><br><span class="line"><span class="meta">-</span> <span class="string">给不同的请求IP地址设置不同令牌桶</span></span><br></pre></td></tr></table></figure><p>而SpringCloudGateway中给桶信息存入Redis时需要有一个KEY来标记，key的生成规则定义在<code>KeyResolver</code>接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KeyResolver</span> </span>&#123;</span><br><span class="line"><span class="function">Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口中的方法返回值就是给令牌桶生成的key。比如上面的三种令牌桶规则，生成key的方式如下：</p><ul><li><p>给不同的请求URI路径设置不同令牌桶，示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Mono.just(exchange.getRequest().getURI().getPath());<span class="comment">// 获取请求URI</span></span><br></pre></td></tr></table></figure></li><li><p>给不同的登录用户设置不同令牌桶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> exchange.getPrincipal().map(Principal::getName);<span class="comment">// 获取用户</span></span><br></pre></td></tr></table></figure></li><li><p>给不同的请求IP地址设置不同令牌桶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Mono.just(exchange.getRequest().getRemoteAddress().getHostName());<span class="comment">// 获取请求者IP</span></span><br></pre></td></tr></table></figure></li></ul><p>这里我们选择最后一种，<strong>使用IP地址的令牌桶key</strong>。</p><p>我们在<code>com.leyou.gateway.config</code>中定义一个类，配置一个KeyResolver的Bean实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个KeyResolver</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">ipKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyResolver() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// JDK8 的Lambda写法：</span></span><br><span class="line">        <span class="comment">// return exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3）配置桶参数"><a href="#3）配置桶参数" class="headerlink" title="3）配置桶参数"></a>3）配置桶参数</h5><p>另外，令牌桶的参数需要通过yaml文件来配置，参数有2个：</p><ul><li><p><code>replenishRate</code>：每秒钟生成令牌的速率，基本上就是每秒钟允许的最大请求数量</p></li><li><p><code>burstCapacity</code>：令牌桶的容量，就是令牌桶中存放的最大的令牌的数量</p></li></ul><p>完整配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 去除路由前缀</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span> <span class="comment"># 指定过滤工厂名称（可以是任意过滤工厂类型）</span></span><br><span class="line">        <span class="attr">args:</span> <span class="comment"># 指定过滤的参数</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">fallbackcmd</span>  <span class="comment"># hystrix的指令名</span></span><br><span class="line">          <span class="attr">fallbackUri:</span> <span class="string">forward:/hystrix/fallback</span> <span class="comment"># 失败后的跳转路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span> <span class="comment">#请求数限流 名字不能随便写</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span> <span class="comment"># 指定一个key生成器,#####跟上面ipKeyResolver方法同名。</span></span><br><span class="line">          <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">2</span> <span class="comment"># 生成令牌的速率</span></span><br><span class="line">          <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span> <span class="comment"># 桶的容量</span></span><br></pre></td></tr></table></figure><p>这里配置了一个<strong>过滤器：RequestRateLimiter，并设置了三个参数</strong>：</p><ul><li><p><code>key-resolver</code>：<code>&quot;#&#123;@ipKeyResolver&#125;&quot;</code>是SpEL表达式，写法是<code>#&#123;@bean的名称&#125;</code>，ipKeyResolver就是我们定义的Bean名称</p></li><li><p><code>redis-rate-limiter.replenishRate</code>：每秒钟生成令牌的速率</p></li><li><p><code>redis-rate-limiter.burstCapacity</code>：令牌桶的容量</p></li></ul><p>这样的限流配置可以<strong>达成的效果：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">每一个IP地址，每秒钟最多发起2次请求</span></span><br><span class="line"><span class="meta">-</span> <span class="string">每秒钟超过2次请求，则返回429的异常状态码</span></span><br></pre></td></tr></table></figure><p>4）配置redis地址</p><p>在application.yml文件中添加redis地址信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br></pre></td></tr></table></figure><h4 id="4-5-4-3-安装Redis"><a href="#4-5-4-3-安装Redis" class="headerlink" title="4.5.4.3.安装Redis"></a>4.5.4.3.安装Redis</h4><h5 id="1）导入镜像"><a href="#1）导入镜像" class="headerlink" title="1）导入镜像"></a>1）导入镜像</h5><p>方案一：如果自己网络不错，直接下载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p>方案二：如果网络不太行，可以使用别人下载好的镜像包：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200710000229823.png" alt="image-20200710000229823"></p><p>首先上传到Linux虚拟机，然后执行命令，导入即可；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i redis.tar</span><br></pre></td></tr></table></figure><h5 id="2）创建挂载目录"><a href="#2）创建挂载目录" class="headerlink" title="2）创建挂载目录"></a>2）创建挂载目录</h5><p>创建一个用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd leyou</span><br></pre></td></tr></table></figure><p>创建密码；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd leyou</span><br></pre></td></tr></table></figure><p>会要求你输入密码两次，确认后创建成功。</p><p>然后进入乐优目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/leyou</span><br></pre></td></tr></table></figure><p>创建一个文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir redis</span><br><span class="line">cd redis</span><br></pre></td></tr></table></figure><p>创建redis 的配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch redis.conf</span><br></pre></td></tr></table></figure><p>修改配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi redis.conf</span><br></pre></td></tr></table></figure><p>添加一些配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">databases 1</span><br></pre></td></tr></table></figure><h5 id="3）运行-1"><a href="#3）运行-1" class="headerlink" title="3）运行"></a>3）运行</h5><p>执行docker命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> <span class="literal">-p</span> <span class="number">6379</span>:<span class="number">6379</span> \</span><br><span class="line"> -<span class="literal">-name</span> ly<span class="literal">-redis</span> \</span><br><span class="line"> <span class="literal">-v</span>  <span class="variable">$PWD</span>/redis.conf:/usr/local/etc/redis/redis.conf \</span><br><span class="line"> -<span class="literal">-privileged</span> \</span><br><span class="line"> <span class="literal">-d</span> \</span><br><span class="line"> redis \</span><br><span class="line"> redis<span class="literal">-server</span> /usr/local/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h2 id="4-6-商品微服务"><a href="#4-6-商品微服务" class="headerlink" title="4.6.商品微服务"></a>4.6.商品微服务</h2><p>先看下之前的项目结构图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108165237708.png" alt="image-20200108165237708"> </p><p>可以知道商品微服务本身也是一个聚合工程，需要有3个子工程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">ly-item-service：编写业务功能，业务功能会依赖于pojo实体类模块</span></span><br><span class="line"><span class="meta">-</span> <span class="string">ly-item-api：对外提供的Feign客户端接口，接口会依赖于pojo实体类模块</span></span><br><span class="line"><span class="meta">-</span> <span class="string">ly-item-pojo：对外提供的实体类</span></span><br></pre></td></tr></table></figure><p>ly-item-api 就是controller层吧。</p><h3 id="4-6-1-创建父工程ly-item"><a href="#4-6-1-创建父工程ly-item" class="headerlink" title="4.6.1.创建父工程ly-item"></a>4.6.1.创建父工程ly-item</h3><p>依然是使用maven构建：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240063940.png" alt="1551240063940"></p><p>保存的位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240086739.png" alt="1551240086739"></p><p>不需要任何依赖，我们可以把项目打包方式设置为pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包方式：POM--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-6-2-创建ly-item-pojo"><a href="#4-6-2-创建ly-item-pojo" class="headerlink" title="4.6.2.创建ly-item-pojo"></a>4.6.2.创建ly-item-pojo</h3><p>在ly-item工程上点击右键，选择new &gt; module:</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240166926.png" alt="1551240166926"></p><p>依然是使用maven构建，注意父工程是ly-item：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240202115.png" alt="1551240202115"></p><p><strong>注意</strong>：接下来填写的目录结构需要自己手动完成，保存到<code>ly-item</code>下的<code>ly-item-pojo</code>目录中：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240220009.png" alt="1551240220009"></p><p>点击Finish完成。</p><p>此时的项目结构：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1544362076716.png" alt="1544362076716"> </p><h3 id="4-6-3-创建ly-item-api"><a href="#4-6-3-创建ly-item-api" class="headerlink" title="4.6.3.创建ly-item-api"></a>4.6.3.创建ly-item-api</h3><p>与<code>ly-item-pojo</code>类似，我们选择在<code>ly-item</code>上右键，新建module，然后填写项目信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108170005760.png" alt="image-20200108170005760"></p><p>填写项目存储位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108170037064.png" alt="image-20200108170037064"></p><p>pom中添加一些依赖（<strong>看清楚，不是在ly-item中添加，是ly-item-api</strong>）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--feign的核心依赖，不是starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-openfeign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--pojo--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-6-4-创建ly-item-service"><a href="#4-6-4-创建ly-item-service" class="headerlink" title="4.6.4.创建ly-item-service"></a>4.6.4.创建ly-item-service</h3><h4 id="1）创建module-1"><a href="#1）创建module-1" class="headerlink" title="1）创建module"></a>1）创建module</h4><p>与<code>ly-item-pojo</code>类似，我们选择在<code>ly-item</code>上右键，新建module，然后填写项目信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240269328.png" alt="1551240269328"></p><p>填写存储位置，是在<code>/ly-item/ly-item-service</code>目录</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551240283037.png" alt="1551240283037"></p><p>点击Finish完成。</p><h4 id="2）引入依赖"><a href="#2）引入依赖" class="headerlink" title="2）引入依赖"></a>2）引入依赖</h4><p>给ly-item-sepom中添加一些依赖（<strong>看清楚，不是在ly-item中添加，是ly-item-service</strong>）:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--实体类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3）启动类"><a href="#3）启动类" class="headerlink" title="3）启动类"></a>3）启动类</h4><p>在项目中创建包：<code>com.leyou.item</code>，然后创建一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyItemApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyItemApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4）yaml配置"><a href="#4）yaml配置" class="headerlink" title="4）yaml配置"></a>4）yaml配置</h4><p>在项目的<code>resources</code>目录中，新建application.yml文件，加入下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ly-mysql:3306/heima?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h4 id="5）网关路由"><a href="#5）网关路由" class="headerlink" title="5）网关路由"></a>5）网关路由</h4><p>最后，还要到ly-gateway的application.yml中给当前项目设置路由规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 去除路由前缀</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span> <span class="comment"># 指定过滤工厂名称（可以是任意过滤工厂类型）</span></span><br><span class="line">        <span class="attr">args:</span> <span class="comment"># 指定过滤的参数</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">fallbackcmd</span>  <span class="comment"># hystrix的指令名</span></span><br><span class="line">          <span class="attr">fallbackUri:</span> <span class="string">forward:/hystrix/fallback</span> <span class="comment"># 失败后的跳转路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span> <span class="comment">#请求数限流 名字不能随便写</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span></span><br><span class="line">          <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">item-service</span> <span class="comment"># 商品微服务</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://item-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/item/**</span></span><br></pre></td></tr></table></figure><p>这里的路由路径是：<code>/item/**</code>，因此<strong>要访问到商品微服务，请求路径需要以<code>/item</code>开头</strong>。</p><h3 id="4-6-5-项目结构"><a href="#4-6-5-项目结构" class="headerlink" title="4.6.5.项目结构"></a>4.6.5.项目结构</h3><p>整个商品微服务的结构图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108171637442.png" alt="image-20200108171637442"> </p><h2 id="4-7-通用工具模块"><a href="#4-7-通用工具模块" class="headerlink" title="4.7.通用工具模块"></a>4.7.通用工具模块</h2><p>有些工具类或通用的内容，我们希望各个服务共享，因此需要创建一个工具模块：<code>ly-common</code></p><h3 id="4-7-1-创建common工程"><a href="#4-7-1-创建common工程" class="headerlink" title="4.7.1.创建common工程"></a>4.7.1.创建common工程</h3><p>使用maven来构建module：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551241061737.png" alt="1551241061737"></p><p>位置信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1551241076840.png" alt="1551241076840"></p><h3 id="4-7-2-引入工具类"><a href="#4-7-2-引入工具类" class="headerlink" title="4.7.2.引入工具类"></a>4.7.2.引入工具类</h3><p>课前资料中提供了一些工具类：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200710000547989.png" alt="image-20200710000547989"></p><p>在<code>ly-common</code>中创建一个包：<code>com.leyou.common</code>，然后把资料中的四个文件夹拷贝进去：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200710223416978.png" alt="image-20200710223416978"></p><p>这些工具类有一些依赖的jar，需要在pom文件中引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-统一异常处理"><a href="#5-统一异常处理" class="headerlink" title="5.统一异常处理"></a>5.统一异常处理</h1><p>在项目中出现异常是在所难免的，但是出现异常后怎么处理，这就很有学问了。</p><p>以前的异常，通过try catch ，一大长串看不懂的异常提示内容，我们这里的异常处理，目的就是<strong>当异常发生时，将简单，简单，通俗易懂的意思展示出来</strong>；底层原理就是利用到了<strong>动态代理的增强功能</strong>。</p><h2 id="5-1-场景预设"><a href="#5-1-场景预设" class="headerlink" title="5.1.场景预设"></a>5.1.场景预设</h2><h3 id="5-1-1-场景"><a href="#5-1-1-场景" class="headerlink" title="5.1.1.场景"></a>5.1.1.场景</h3><p>我们预设这样一个场景，假如我们做新增商品，需要接收下面的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">price：价格</span><br><span class="line">name：名称</span><br></pre></td></tr></table></figure><p>然后对数据做简单校验：</p><ul><li>价格不能为空</li><li>名称不能为空</li></ul><p>新增时，自动形成ID，然后随商品对象一起返回</p><h3 id="5-1-2-代码"><a href="#5-1-2-代码" class="headerlink" title="5.1.2.代码"></a>5.1.2.代码</h3><p>在ly-item-service中编写实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.entity;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ly-item-service中编写业务：</p><p>service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Item;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">saveItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 判断价格是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(item.getPrice() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;价格不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(item.getName() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;名称不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机生成id，模拟数据库的新增</span></span><br><span class="line">        <span class="keyword">int</span> id = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">        item.setId(id);</span><br><span class="line">        <span class="comment">// 返回新增之后的对象，回显id</span></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>这里临时使用随机生成id，然后直接返回，没有做数据库操作</li></ul><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Item;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.ItemService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;item&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Item&gt; <span class="title">saveItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Item result = itemService.saveItem(item);</span><br><span class="line">            <span class="comment">// 新增成功, 返回201</span></span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 失败，返回400</span></span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ResponseEntity是一个Spring提供的，用于封装响应结果的实体类。可以自定义响应状态码、响应头、响应头。</p><ul><li><p><code>ResponseEntity.status(HttpStatus.CREATED)</code>：用于指定这次响应的状态码，HttpStatus枚举中定义了常见的返回状态码。另外，ResponseEntity提供了几个便捷方法，代表常用状态码：</p><ul><li><code>ResponseEntity.ok()</code>：代表200</li><li><code>ResponseEntity.noContent()</code>：代表204</li></ul></li><li><p><code>.body(result)</code>：用于指定这次响应的返回值结果，就是响应体</p></li></ul><h3 id="5-1-3-测试"><a href="#5-1-3-测试" class="headerlink" title="5.1.3.测试"></a>5.1.3.测试</h3><p>接下来，启动项目，通过任意Http客户端工具测试：</p><p>当请求正常时，得到201状态码，代表新增成功：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108174453168.png" alt="image-20200108174453168"></p><p>当缺少参数时：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108174520999.png" alt="image-20200108174520999"></p><p>得到400状态码，说明新增失败，请求参数有误</p><h2 id="5-2-统一异常处理"><a href="#5-2-统一异常处理" class="headerlink" title="5.2.统一异常处理"></a>5.2.统一异常处理</h2><p>我们虽然完成了异常的处理，但是<strong>每一个controller中的方法都要写类似异常捕获和处理代码</strong>。</p><p>实际开发中，会有非常多的类和方法，每个都写实在是不方便。</p><p>Spring提供了一个<strong>通用的异常处理器</strong><code>ControllerAdvice</code>，可以非常方便的帮助我们实现统一的异常处理。</p><h3 id="5-2-1-定义异常处理器"><a href="#5-2-1-定义异常处理器" class="headerlink" title="5.2.1.定义异常处理器"></a>5.2.1.定义异常处理器</h3><p>为了让这个异常处理可以在每一个微服务中使用，我们定义到<code>ly-common</code>中。在<code>ly-common</code>中创建一个新的包：<code>com.leyou.common.advice</code>，然后创建一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerExceptionAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统一异常处理方法，<span class="doctag">@ExceptionHandler</span>(RuntimeException.class)声明这个方法处理RuntimeException这样的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 捕获到的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回给页面的状态码和信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleLyException</span><span class="params">(RuntimeException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(<span class="number">400</span>).body(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解读：</p><ul><li><p><code>@ControllerAdvice</code>：添加了**@ControllerAdvice的类，默认情况下，会拦截所有加了<code>@Controller</code>的类**</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1534203615380.png" alt="1534203615380"></p></li><li><p><code>@ExceptionHandler(RuntimeException.class)</code>：作用在方法上，声明要处理的异常类型，这里指定的是<code>RuntimeException</code>。因此任意**<code>Controller</code>抛出<code>RuntimeException</code>都会被当前方法捕获和处理**</p><ul><li>参数：捕获到的异常</li><li>返回值：给页面的提示信息。这里返回值中不仅给出了状态码400，还给出了异常的message</li></ul></li></ul><h3 id="5-2-2-引入advice"><a href="#5-2-2-引入advice" class="headerlink" title="5.2.2.引入advice"></a>5.2.2.引入advice</h3><p>虽然写好了advice，但是是在<code>ly-common</code>中，要在商品微服务使用，比如引入依赖，并且让这个Bean加入Spring容器才可以。</p><h4 id="1）引入依赖-1"><a href="#1）引入依赖-1" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h4><p>首先在<code>ly-item-service</code>中引入<code>ly-common</code>的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ly-common--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）扫描包"><a href="#2）扫描包" class="headerlink" title="2）扫描包"></a>2）扫描包</h4><p>要。我们在<code>ly-item-service</code>的启动类的注解上添加扫描包信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.item&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyItemApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyItemApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里添加了两个扫描包：</p><ul><li>一个是当前项目扫描包</li><li>一个是刚刚定义的advice的扫描包</li></ul><h4 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a>3）测试</h4><p>首先删除ItemController中的异常处理代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Item;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.ItemService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;item&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Item&gt; <span class="title">saveItem</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        Item result = itemService.saveItem(item);</span><br><span class="line">        <span class="comment">// 新增成功, 返回201</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次启动项目，测试一下</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200108181004714.png" alt="image-20200108181004714"> </p><p>可以看到异常结果状态码和消息，说明统一异常处理成功了！</p><h2 id="5-3-自定义异常"><a href="#5-3-自定义异常" class="headerlink" title="5.3.自定义异常"></a>5.3.自定义异常</h2><p>在刚才的异常处理中，我们<strong>返回的状态码写死为400，这样显然是有问题的。不同的业务异常，应该返回不同状态码。</strong></p><h3 id="5-3-1-异常状态码"><a href="#5-3-1-异常状态码" class="headerlink" title="5.3.1.异常状态码"></a>5.3.1.异常状态码</h3><p>按照Rest风格，可以有下列状态：</p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>执行成功，一般是GET请求执行成功</td></tr><tr><td>201</td><td>新增业务成功，一般会返回资源访问路径</td></tr><tr><td>204</td><td>执行成功，但是没有返回值，比如删除成功后</td></tr><tr><td>400</td><td>请求参数有误</td></tr><tr><td>401</td><td>未登录或登录失效</td></tr><tr><td>403</td><td>没有访问权限</td></tr><tr><td>404</td><td>资源不存在</td></tr><tr><td>405</td><td>请求方式不正确，应该用GET的用了POST</td></tr><tr><td>406</td><td>响应格式与请求格式不匹配</td></tr><tr><td>413</td><td>请求体过大</td></tr><tr><td>500</td><td>服务端异常</td></tr><tr><td>502</td><td>请求超时</td></tr></tbody></table><h3 id="5-3-2-自定义异常"><a href="#5-3-2-自定义异常" class="headerlink" title="5.3.2.自定义异常"></a>5.3.2.自定义异常</h3><p>只有<strong>处理业务的时候知道应该返回怎样的状态码</strong>，因此需要<strong>在抛出异常的地方把状态码信息封装到异常中，并携带到统一异常处理的地方去获取</strong>。</p><p>但是<strong>普通异常并不能封装状态码，所以需要我们自定义异常</strong>。</p><p>我们在ly-common中定义一个自定义异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.exception;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常状态码信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LyException</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LyException</span><span class="params">(<span class="keyword">int</span> status, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LyException</span><span class="params">(<span class="keyword">int</span> status, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LyException</span><span class="params">(<span class="keyword">int</span> status, String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-3-使用自定义异常"><a href="#5-3-3-使用自定义异常" class="headerlink" title="5.3.3.使用自定义异常"></a>5.3.3.使用自定义异常</h3><p>我们修改ItemService代码，使用自定义异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">saveItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 判断价格是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(item.getPrice() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;价格不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(item.getName() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;名称不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机生成id，模拟数据库的新增</span></span><br><span class="line">        <span class="keyword">int</span> id = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">        item.setId(id);</span><br><span class="line">        <span class="comment">// 返回新增之后的对象，回显id</span></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-4-在ControllerAdvice接收异常信息"><a href="#5-3-4-在ControllerAdvice接收异常信息" class="headerlink" title="5.3.4.在ControllerAdvice接收异常信息"></a>5.3.4.在ControllerAdvice接收异常信息</h3><p>我们修改处理的异常类型为<code>LyException</code>，并从异常中获取状态码信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.advice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerExceptionAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统一异常处理方法，<span class="doctag">@ExceptionHandler</span>(RuntimeException.class)声明这个方法处理RuntimeException这样的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 捕获到的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回给页面的状态码和信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(LyException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleLyException</span><span class="params">(LyException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(e.getStatus()).body(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常总结：！！！！！！！！"><a href="#异常总结：！！！！！！！！" class="headerlink" title="异常总结：！！！！！！！！"></a>异常总结：！！！！！！！！</h3><p><strong>1 异常的目的：</strong>是为了<strong>包装美化</strong>返回给客户端的异常信息</p><p><strong>2 异常流程：</strong>在service层抛出异常，在controller层进行捕获，而捕获时不用比较low的try catch，通过注释，使用更高级的异常切面类进行统一处理。</p><p><strong>3 异常改进：</strong>在service层抛出的异常，抛出的是RunTimeException，捕获该异常对象时得到的信息，还有状态码，状态码是固定的状态码，比如说，500，提示的是服务器出错，而我们实际想要返回的状态码是根据业务不同而返回不同的状态码，比如说，访问资源某个参数为空时，我们返回一个异常信息“<strong>输入名称不能为空</strong>”，还有<strong>状态码600</strong>，而前面的方法只能灵活返回异常信息，异常状态码只能是固定的400，那么我们就要对异常处理进行改进，如何改进呢？？？？在service层抛出代码时，不要抛出系统自带的RunTimeException对象，而是抛出我们自定义的异常类对象，我们在异常类中定义状态变量，那么抛出异常时，除了定义异常信息，还可以附带状态变量，那么异常切面类给客户端返回信息时还可以返回我们自己根据业务异常自定义的状态码！</p><h3 id="5-3-5-统一日志记录"><a href="#5-3-5-统一日志记录" class="headerlink" title="5.3.5.统一日志记录"></a>5.3.5.统一日志记录</h3><p>在ly-common的<code>com.leyou.common.advice</code>包下，新建一个类，利用Aop拦截所有的Service方法，对执行结果日志进行记录。</p><p><strong>看下面Around注解上面的三行注释！！！</strong></p><p>然后在日志里面抛出异常时也很讲究，先catch的是最大的Throwable类，再去判断是不是我们自定义的异常类，不是的话也要抛出我们自定义的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exception.LyException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//ps:Aspect注释的类 表示切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonLogAdvice</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//下面一行代码表示：被service注解的类里面的方法，都是切面方法，那些方法被执行时都调用这里的处理器</span></span><br><span class="line">    <span class="comment">//Around注解表示环绕通知，所以这里的通知是环绕通知。</span></span><br><span class="line">    <span class="comment">//我们希望service层里面的方法执行都需要打印，或者记录，因此service层类需要service注解。</span></span><br><span class="line">    <span class="meta">@Around(&quot;within(@org.springframework.stereotype.Service *)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">handleExceptionLog</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 记录方法进入日志</span></span><br><span class="line">            log.debug(<span class="string">&quot;&#123;&#125;方法准备调用，参数: &#123;&#125;&quot;</span>, jp.getSignature(), Arrays.toString(jp.getArgs()));</span><br><span class="line">            <span class="keyword">long</span> a = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 调用切点方法</span></span><br><span class="line">            Object result = jp.proceed();</span><br><span class="line">            <span class="comment">// 记录方法结束日志</span></span><br><span class="line">            log.debug(<span class="string">&quot;&#123;&#125;方法调用成功，执行耗时&#123;&#125;&quot;</span>, jp.getSignature(), System.currentTimeMillis() - a);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;&#123;&#125;方法执行失败，原因：&#123;&#125;&quot;</span>, jp.getSignature(), throwable.getMessage(), throwable);</span><br><span class="line">            <span class="comment">// 判断异常是否是LyException</span></span><br><span class="line">            <span class="keyword">if</span>(throwable <span class="keyword">instanceof</span> LyException)&#123;</span><br><span class="line">                <span class="comment">// 如果是，不处理，直接抛</span></span><br><span class="line">                <span class="keyword">throw</span> throwable;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 如果不是，转为LyException</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日志总结："><a href="#日志总结：" class="headerlink" title="日志总结："></a>日志总结：</h2><p>就是使用一个切面类，切面类里面的处理器定义好<strong>哪些方法被增强</strong>，<strong>使用的是什么增强</strong>（上面是环绕增强），<strong>增强的内容是什么</strong>，然后<strong>使用注解@Slf4j来使用日志方法</strong>，打印增强处理的信息或者是保存信息到文件中!!!</p><h1 id="6-安装MySQL及导入数据"><a href="#6-安装MySQL及导入数据" class="headerlink" title="6.安装MySQL及导入数据"></a>6.安装MySQL及导入数据</h1><p>大家需要在Linux虚拟机中安装Mysql，因为后面我们要用到Linux中的mysql的一些功能。如果以前安装过，也请按照下面的步骤重新安装(先删除之前的docker容器)。</p><h2 id="6-1-导入mysql镜像"><a href="#6-1-导入mysql镜像" class="headerlink" title="6.1.导入mysql镜像"></a>6.1.导入mysql镜像</h2><p>如果网络环境很好的同学，可以自己拉取镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.25</span><br></pre></td></tr></table></figure><p>如果网络环境一般，可以使用课前资料提供的MySQL镜像包：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20200710000815483.png" alt="image-20200710000815483"></p><p>然后，上传到虚拟机中的<code>/tmp</code>目录，然后执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">docker load -i mysql.tar</span><br></pre></td></tr></table></figure><h2 id="6-2-创建本地卷"><a href="#6-2-创建本地卷" class="headerlink" title="6.2.创建本地卷"></a>6.2.创建本地卷</h2><p> 创建一个新用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd leyou</span><br></pre></td></tr></table></figure><p>设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd leyou</span><br></pre></td></tr></table></figure><p>然后会提示要求你输入密码，两次确认后密码设置完成。</p><p>进入leyou用户的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/leyou</span><br></pre></td></tr></table></figure><p>创建文件夹并进入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir mysql</span><br><span class="line">cd mysql</span><br></pre></td></tr></table></figure><h2 id="6-3-安装mysql"><a href="#6-3-安装mysql" class="headerlink" title="6.3.安装mysql"></a>6.3.安装mysql</h2><p>执行docker命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -p 3306:3306 \</span><br><span class="line"> --name ly-mysql \</span><br><span class="line"> -v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line"> -v $PWD/logs:/logs \</span><br><span class="line"> -v $PWD/data:/var/lib/mysql \</span><br><span class="line"> -e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line"> --privileged \</span><br><span class="line"> -d \</span><br><span class="line"> mysql:5.7.25</span><br></pre></td></tr></table></figure><p>关键信息说明：</p><ul><li><code> -v $PWD/conf:/etc/mysql/conf.d</code>：是将当前目录的<code>conf</code>目录与docker容器中的<code>/etc/mysql/conf.d</code><strong>目录绑定，可以自己指定配置文件</strong></li></ul><p>自定义配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi conf/my.cnf</span><br></pre></td></tr></table></figure><p>然后添加下面内容：（注意，[mysqld]可别漏了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line">character_set_server=utf8</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">server-id=1000</span><br></pre></td></tr></table></figure><p>重启mysql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure><h2 id="6-4-导入数据"><a href="#6-4-导入数据" class="headerlink" title="6.4.导入数据"></a>6.4.导入数据</h2><p>通过idea里面的Navicat连接MySQL，（或者使用SQLyog软件管理），并执行课前资料提供的leyou.sql脚本</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-乐优商城项目环境搭建&quot;&gt;&lt;a href=&quot;#01-乐优商城项目环境搭建&quot; class=&quot;headerlink&quot; title=&quot;01-乐优商城项目环境搭建&quot;&gt;&lt;/a&gt;01-乐优商城项目环境搭建&lt;/h1&gt;&lt;h1 id=&quot;本博客学习目标：&quot;&gt;&lt;a href=&quot;#本</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="乐优商城项目" scheme="http://example.com/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>使用学生邮箱来登录idea账号</title>
    <link href="http://example.com/2022/06/15/%E4%BD%BF%E7%94%A8%E5%AD%A6%E7%94%9F%E9%82%AE%E7%AE%B1%E6%9D%A5%E7%99%BB%E5%BD%95idea%E8%B4%A6%E5%8F%B7/"/>
    <id>http://example.com/2022/06/15/%E4%BD%BF%E7%94%A8%E5%AD%A6%E7%94%9F%E9%82%AE%E7%AE%B1%E6%9D%A5%E7%99%BB%E5%BD%95idea%E8%B4%A6%E5%8F%B7/</id>
    <published>2022-06-15T03:06:05.000Z</published>
    <updated>2022-06-15T03:24:02.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-找到自己所在的学校给自己分配的学生邮箱。"><a href="#1-找到自己所在的学校给自己分配的学生邮箱。" class="headerlink" title="1 找到自己所在的学校给自己分配的学生邮箱。"></a>1 找到自己所在的学校给自己分配的学生邮箱。</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">我是直接百度的，进入链接发现是内部网里面的公告，公文通</span></span><br><span class="line"><span class="attr">公告很清晰说明给我们分配的邮箱跟密码是多少</span></span><br></pre></td></tr></table></figure><h3 id="2-使用分配的邮箱去认证idea-如下是认证页面"><a href="#2-使用分配的邮箱去认证idea-如下是认证页面" class="headerlink" title="2 使用分配的邮箱去认证idea,如下是认证页面"></a>2 使用分配的邮箱去认证idea,如下是认证页面</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//www.jetbrains.com/shop/eform/students</span></span><br></pre></td></tr></table></figure><p>使用邮箱认证，填写信息就好。</p><h3 id="3-利用认证的学生邮箱注册一个idea账号"><a href="#3-利用认证的学生邮箱注册一个idea账号" class="headerlink" title="3 利用认证的学生邮箱注册一个idea账号"></a>3 利用认证的学生邮箱注册一个idea账号</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//account.jetbrains.com/signup-complete</span></span><br></pre></td></tr></table></figure><p>注册完账号就会提示，你这是学生账号，已经授权，享有哪些资源。</p><p><img src="/img/java/idea/1.png" alt="803e2a688844f57fa3fa425a70a122c"></p><h3 id="4-使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）"><a href="#4-使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）" class="headerlink" title="4 使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）"></a>4 使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）</h3><p>（账号密码跟学生邮箱密码是不同的一个密码，当然你也可以设为一样）</p><p><img src="/img/java/idea/2.png" alt="4428d753eebde9c4e8fe9d01e295981"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-找到自己所在的学校给自己分配的学生邮箱。&quot;&gt;&lt;a href=&quot;#1-找到自己所在的学校给自己分配的学生邮箱。&quot; class=&quot;headerlink&quot; title=&quot;1 找到自己所在的学校给自己分配的学生邮箱。&quot;&gt;&lt;/a&gt;1 找到自己所在的学校给自己分配的学生邮</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>yolov5s-无人机堤坝检测</title>
    <link href="http://example.com/2022/06/09/yolov5s-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2022/06/09/yolov5s-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B/</id>
    <published>2022-06-09T09:04:10.000Z</published>
    <updated>2022-06-09T15:09:49.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-yolov5环境配置："><a href="#1-yolov5环境配置：" class="headerlink" title="1 yolov5环境配置："></a>1 yolov5环境配置：</h2><p>（参考我前面的博客）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2021/10/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E7%9A%84ubuntu%E9%83%A8%E7%BD%B2yolov5-5-0/</span></span><br></pre></td></tr></table></figure><h2 id="2-数据集的制作"><a href="#2-数据集的制作" class="headerlink" title="2 数据集的制作"></a>2 数据集的制作</h2><p>(采用vcat工具，直接可以在视频上进行标注)（参考我前面的博客），</p><p>ps：配置vcat服务花费时间比较长，vcat这个工具不同于labelImg，后者是exe执行文件，直接就可以标注图片，但是vcat类似于面向服务编程，要安装docker，docker编排器拉取镜像，运行容器等等，最后将vcat服务跑起来，在浏览器访问，标注。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2022/06/08/vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/%E5%A0%A4%E5%9D%9D%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8Eyolov%E7%9B%AE%E5%BD%95%E5%85%B3%E7%B3%BB.png" alt="堤坝数据集与yolov目录关系"></p><h2 id="3-yolov5s训练自定义数据集方法"><a href="#3-yolov5s训练自定义数据集方法" class="headerlink" title="3 yolov5s训练自定义数据集方法"></a>3 yolov5s训练自定义数据集方法</h2><p>参考：（参考我前面的博客）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2021/11/13/yolov5-customData/</span></span><br></pre></td></tr></table></figure><h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4 效果"></a>4 效果</h2><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/frame_004750.PNG" alt="frame_004750"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/frame_004375.PNG" alt="frame_004375"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/frame_004650.PNG" alt="frame_004650"></p><p>可以看到效果并不算很好，原因主要是数据集太少了，别人训练一个模型需要几个G的数据集，我这只有几十兆</p><p>解决方法：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">数据增强，网上找方法，接下来的工作</span></span><br><span class="line"><span class="attr">2</span> <span class="string">想办法拍更多的视频，继续标注，构建更加庞大的数据集</span></span><br><span class="line"><span class="attr">3</span> <span class="string">拍出来的几乎是正常的堤坝，标注时几乎没有几张图是可以作为有问题的堤坝标签</span></span><br><span class="line"><span class="attr">4</span> <span class="string">除了拍多一点照片，还需要不同类型的堤坝照片</span></span><br><span class="line"><span class="attr">5</span> <span class="string">有了不同类型堤坝的照片，训练时注意要先打乱数据集的顺序，有助于更好的收敛</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-yolov5环境配置：&quot;&gt;&lt;a href=&quot;#1-yolov5环境配置：&quot; class=&quot;headerlink&quot; title=&quot;1 yolov5环境配置：&quot;&gt;&lt;/a&gt;1 yolov5环境配置：&lt;/h2&gt;&lt;p&gt;（参考我前面的博客）&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="yolov5" scheme="http://example.com/tags/yolov5/"/>
    
    <category term="自定义数据模型" scheme="http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>yolov5-黄瓜叶片病虫害识别</title>
    <link href="http://example.com/2022/06/09/yolov5-%E9%BB%84%E7%93%9C%E5%8F%B6%E7%89%87%E7%97%85%E8%99%AB%E5%AE%B3%E8%AF%86%E5%88%AB/"/>
    <id>http://example.com/2022/06/09/yolov5-%E9%BB%84%E7%93%9C%E5%8F%B6%E7%89%87%E7%97%85%E8%99%AB%E5%AE%B3%E8%AF%86%E5%88%AB/</id>
    <published>2022-06-09T08:58:46.000Z</published>
    <updated>2022-06-09T09:02:02.266Z</updated>
    
    <content type="html"><![CDATA[<p>前面做了voc数据集来训练yolov5的网络，现在自定义数据集来训练病虫害识别模型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">官方教程：https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data</span><br><span class="line"></span><br><span class="line">参考教程：https://blog.csdn.net/weixin_45569617/article/details/108125707</span><br></pre></td></tr></table></figure><h2 id="1-yolov5-环境搭建"><a href="#1-yolov5-环境搭建" class="headerlink" title="1 yolov5 环境搭建"></a>1 yolov5 环境搭建</h2><p>请参考我前面写的博客</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">（1）虚拟机上的ubuntu部署yolov5-5.0：</span></span><br><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2021/10/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E7%9A%84ubuntu%E9%83%A8%E7%BD%B2yolov5-5-0/</span></span><br></pre></td></tr></table></figure><h2 id="2-数据集制作（数据标注）"><a href="#2-数据集制作（数据标注）" class="headerlink" title="2 数据集制作（数据标注）"></a>2 数据集制作（数据标注）</h2><p>（1）标注工具</p><p><strong>labelImg工具</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">链接：https</span>:<span class="string">//pan.baidu.com/s/1MwDdnSlNLFIdW-lOfs1uOQ </span></span><br><span class="line"><span class="meta">提取码：6666</span> <span class="string"></span></span><br></pre></td></tr></table></figure><p><strong>vcat工具</strong></p><p>请参考我写的关于vcat标注工具的下载安装，使用教程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2022/06/08/vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</span></span><br></pre></td></tr></table></figure><p>ps:下面讲的都是用labelImg这款工具标注构建数据集的方法</p><p>（2）先把数据集的照片重命名，1.jpg；2.jpg等等，这样子方便点。</p><p>（3）数据分配情况：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">baban：119+107</span>=<span class="string">226张</span></span><br><span class="line"><span class="attr">shuangMei：30张</span></span><br><span class="line"><span class="attr">normal：225张</span></span><br><span class="line"></span><br><span class="line"><span class="attr">分配：</span></span><br><span class="line"><span class="attr">train：</span></span><br><span class="line"><span class="attr">200张baban（1-106）和（120-213）；</span></span><br><span class="line"><span class="attr">200张normal；（257-456）</span></span><br><span class="line"><span class="attr">25张shaugnMe。（227-237）以及（240-253）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">val：</span></span><br><span class="line"><span class="attr">24张baban；（107-118）及（214-225）</span></span><br><span class="line"><span class="meta">20张normal；（457-</span>  <span class="string">476）；</span></span><br><span class="line"><span class="attr">3张shuangMei。（238，254，255）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test：</span></span><br><span class="line"><span class="attr">两张banban，（119，226）</span></span><br><span class="line"><span class="attr">五张normal，（477-481）</span></span><br><span class="line"><span class="meta">两张shuangMei</span> <span class="string">。（239，256）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">感觉霜霉毒数据集太少了，可以不要这种，只需要正常叶片跟靶斑病毒二分类就好。</span></span><br><span class="line"><span class="attr">目前先三分类用着吧，看看效果。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">train，val，test</span> <span class="string">比例大概是25:5:1；</span></span><br><span class="line"><span class="attr">train，val按照一定比例就好，test随便，主要是测试模型精度如何。</span></span><br></pre></td></tr></table></figure><p>（4）标注数据（选用txt格式）</p><p>​        这里很奇怪，labelimg.exe在下载目录中解压打开就可以打开，但是拷贝到其他地方就打不开。</p><p>​        然后在保存label时提示编码错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 1288, in saveFile</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 1320, in _saveFile</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 810, in saveLabels</span><br><span class="line">UnicodeEncodeError: &#x27;ascii&#x27; codec can&#x27;t encode characters in position 38-43: ordinal not in range(128)</span><br></pre></td></tr></table></figure><p>但是实际上txt文件还是保存成功了的。就不知道保存的东西正不正确。应该正确的。</p><h2 id="3-文件结构"><a href="#3-文件结构" class="headerlink" title="3 文件结构"></a>3 文件结构</h2><p><strong>叶片数据集跟yolov5源码目录结构关系</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">datasets</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">images</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">train</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">val</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">test</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">labels</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">train</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">val</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">test</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">data.yaml</span></span><br><span class="line"><span class="meta">-</span> <span class="string">yolov5-5.0</span></span><br></pre></td></tr></table></figure><h2 id="4-data-yaml文件内容"><a href="#4-data-yaml文件内容" class="headerlink" title="4 data.yaml文件内容"></a>4 data.yaml文件内容</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">train:</span> <span class="string">../datasets/images/train</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">../datasets/images/val</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nc:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">names:</span> [<span class="string">&#x27;normal&#x27;</span>,<span class="string">&#x27;baban&#x27;</span>,<span class="string">&#x27;shuangmei&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="5-更改yolov5-models-yolov5-yaml-文件"><a href="#5-更改yolov5-models-yolov5-yaml-文件" class="headerlink" title="5 更改yolov5/models/yolov5*.yaml 文件"></a>5 更改yolov5/models/yolov5*.yaml 文件</h2><p><strong>如把文件./models/yolov5s.yaml的nc 参数，改成3，因为3分类。</strong></p><h2 id="6-输入命令进行训练"><a href="#6-输入命令进行训练" class="headerlink" title="6 输入命令进行训练"></a>6 输入命令进行训练</h2><p><strong>注意，</strong>参考前面讲的yolov5部署，这里要先进入annaconda创建的yolov5虚拟环境，python 环境就是yolov5虚拟环境里的python环境。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/%E8%AE%AD%E7%BB%83%E5%BC%80%E5%A7%8B.png" alt="训练开始"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/%E8%AE%AD%E7%BB%83%E5%BC%80%E5%A7%8B1.png" alt="训练开始1"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">python train.py --data ../datasets/datas.yaml --cfg ./models/yolov5s.yaml --batch-size 16</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具体每个参数的意思：</span></span><br><span class="line">--data 你自己创建数据集说明文件(yaml文件)的路径</span><br><span class="line">--weights 权重文件路径，我们要重新训练一个模型，该参数可以省略</span><br><span class="line">（如果想要利用迁移学习，就可以加上该参数，指定yolov5模型路径)</span><br><span class="line">--cfg moudles下的权重文件对应的yaml文件路径</span><br><span class="line">--epochs 迭代次数 就是模型要反复训练多少遍 默认为300</span><br><span class="line">--imgsz 这个值会影响模型的速度和精度 越大速度越低精度越高 必须为32的倍数 一般不变</span><br><span class="line">--batch-size 默认为8 使用cpu或显卡不是很好的建议设置为4 这个值越大 模型训练越快</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再举例，训练voc数据集时的训练命令行：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python train.py --data VOC.yaml --cfg yolov5s.yaml --weights <span class="string">&#x27;&#x27;</span> --batch-size 64</span></span><br><span class="line">                                         yolov5m                                40</span><br><span class="line">                                         yolov5l                                24</span><br><span class="line">                                         yolov5x                                16</span><br><span class="line"><span class="meta">#</span><span class="bash">当然啦，不止这些参数，看运行时的参数提示，或者看train文件，方法参数都有哪些值。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-训练完的结果"><a href="#7-训练完的结果" class="headerlink" title="7 训练完的结果"></a>7 训练完的结果</h2><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/%E8%AE%AD%E7%BB%83%E5%AE%8C%E6%88%90.png" alt="训练完成"></p><p>将结果保存到runs/train/exp10下面，可以看到训练过程的一些可视化照片</p><p>当然最重要的肯定是exp*/weight/下的<strong>权重文件best.pt</strong>啦！！！</p><h2 id="8-测试"><a href="#8-测试" class="headerlink" title="8 测试"></a>8 测试</h2><p>可以用detect.py，输入照片源以及刚训练好的模型进行测试一下哈！！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python detect.py --source ../datasets/images/test --weight ./runs/train/exp10/weights/best.pt</span><br></pre></td></tr></table></figure><p>将 test下的所有照片作为输入源，测试完成，看终端提示</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/%E6%B5%8B%E8%AF%95.png" alt="测试"></p><p>只有几百张照片，训练了300轮，效果还算可以</p><p>1 斑礵病毒</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/226.JPG" alt="226"></p><p>2 正常叶片</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/480.JPG" alt="480"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/2-yolov5-customDataSet/256.JPG" alt="256"></p><h2 id="9-模型精度问题"><a href="#9-模型精度问题" class="headerlink" title="9 模型精度问题"></a>9 模型精度问题</h2><p>现在整个流程跑通了，想要提高模型的精度，方法如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">增加数据集</span></span><br><span class="line"><span class="attr">（1）图像增强</span></span><br><span class="line"><span class="attr">（2）多拍一些照片咯。</span></span><br><span class="line"><span class="attr">2</span> <span class="string">标注的时候尤其要注意，什么时候该标注，标注的框的位置跟大小！！</span></span><br><span class="line"><span class="attr">3</span> <span class="string">修改参数，多训练几个epoch</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面做了voc数据集来训练yolov5的网络，现在自定义数据集来训练病虫害识别模型。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="yolov5" scheme="http://example.com/tags/yolov5/"/>
    
    <category term="自定义数据模型" scheme="http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>vcat标注工具的安装以及使用</title>
    <link href="http://example.com/2022/06/08/vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/06/08/vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2022-06-08T15:16:59.000Z</published>
    <updated>2022-06-09T07:51:01.236Z</updated>
    
    <content type="html"><![CDATA[<p>前面用yolov5训练自定义的数据集（病虫害识别）的时候，用的是labellmg这款软件，但是这款软件不能处理视频的标注，最近张老师要我搞无人机堤坝检测项目，因此今天就来写写在视频上进行标注，制作数据集更高级一点的标注工具：vcat。话不多说，赶紧上车！</p><h1 id="1-Ubuntu-18-04上安装vcat"><a href="#1-Ubuntu-18-04上安装vcat" class="headerlink" title="1 Ubuntu 18.04上安装vcat"></a>1 Ubuntu 18.04上安装vcat</h1><p>参考教程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//openvinotoolkit.github.io/cvat/docs/administration/basics/installation/</span></span><br></pre></td></tr></table></figure><h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1 安装docker"></a>1 安装docker</h2><p>分别执行如下命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get --no-install-recommends install -y \</span></span><br><span class="line"><span class="string">  apt-transport-https \</span></span><br><span class="line"><span class="string">  ca-certificates \</span></span><br><span class="line"><span class="string">  curl \</span></span><br><span class="line"><span class="string">  gnupg-agent \</span></span><br><span class="line"><span class="string">  software-properties-common</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">curl</span> <span class="string">-fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">add-apt-repository \</span></span><br><span class="line"><span class="string">  &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  $(lsb_release -cs) \</span></span><br><span class="line"><span class="string">  stable&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get --no-install-recommends install -y docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure><p>分组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>注销并重新登录（或重新启动），以便重新评估您的组成员身份。之后，您可以在终端窗口中键入<code>groups</code>命令并检查<code>docker</code>组是否在其输出中。</p><h2 id="2-安装-docker-compose（1-19-0-或更高版本）"><a href="#2-安装-docker-compose（1-19-0-或更高版本）" class="headerlink" title="2 安装 docker-compose（1.19.0 或更高版本）"></a>2 安装 docker-compose（1.19.0 或更高版本）</h2><p>Compose 是一个用于定义和运行多容器 docker 应用程序的工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --no-install-recommends install -y python3-pip python3-setuptools</span><br><span class="line">sudo python3 -m pip install setuptools docker-compose</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jason@jason-virtual-machine:~$ pwd</span><br><span class="line">/home/jason</span><br></pre></td></tr></table></figure><h2 id="3-克隆cvat源代码"><a href="#3-克隆cvat源代码" class="headerlink" title="3 克隆cvat源代码"></a>3 克隆cvat源代码</h2><p>在/home/jason下，从 <a href="https://github.com/opencv/cvat">GitHub 存储</a><em>库克隆 CVAT</em>源代码。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt-get --no-install-recommends install -y git</span></span><br><span class="line"><span class="attr">git</span> <span class="string">clone https://github.com/opencv/cvat</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">cvat</span></span><br></pre></td></tr></table></figure><p>在上面第二步克隆时发生如下错误,折腾了一下，发现还是没解决，就不折腾了，直接使用手动下载zip，然后解压缩到当前目录的cvat目录下！</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Failed</span> <span class="string">to connect to github.com port 443: 拒绝连接</span></span><br></pre></td></tr></table></figure><p>要通过网络或通过其他系统访问 CVAT，请导出<code>CVAT_HOST</code>环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CVAT_HOST=your-ip-address</span><br><span class="line">如：</span><br><span class="line"><span class="built_in">export</span> CVAT_HOST=192.168.1.138</span><br></pre></td></tr></table></figure><h2 id="4-运行-docker-容器。"><a href="#4-运行-docker-容器。" class="headerlink" title="4 运行 docker 容器。"></a>4 运行 docker 容器。</h2><p>前面下载了docker，还下载安装了docker-compose(容器编排)，这里就要利用容器编排来下载并且运行vcat所需要的镜像啦：从 DockerHub 下载最新的 CVAT 版本和其他所需的镜像（如 postgres、redis 等）并创建容器需要一些时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>但是好奇怪，发生如下报错，提示docker-compose 命令找不到，命名上面已经安装了docker-compose了</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jason@jason-virtual-machine</span>:<span class="string">~/cvat$ docker-compose up -d</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Command</span> <span class="string">&#x27;docker-compose&#x27; not found, but can be installed with:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">snap install docker          # version 20.10.14, or</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt  install docker-compose</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行sudo snap install docker之后再去执行docker-compose up -d命令，就可以将cvat相关镜像容器拉取并且运行起来</p><p>拉取并运行成功，执行 docker ps 命令可以看到正在运行的容器：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608151329919.png" alt="image-20220608151329919"></p><p>注意，这需要花费很长时间，因为拉取的几个镜像都很大，超1个G的镜像大小！</p><h2 id="5-创建一个超级用户"><a href="#5-创建一个超级用户" class="headerlink" title="5 创建一个超级用户"></a>5 创建一个超级用户</h2><p>超级用户可以使用管理面板为用户分配正确的组。请使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it cvat bash -ic &#x27;python3 ~/manage.py createsuperuser&#x27;</span><br></pre></td></tr></table></figure><p>需要输入超级用户的用户名以及邮箱，用户密码。邮箱输入自己的qq邮箱就好。用户名跟密码都是自己定的，比如admin，root分别是我的用户名跟密码。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608152304339.png" alt="image-20220608152304339"></p><p>到此为止，已经将cvat安装运行起来了</p><h2 id="6-访问vcat服务"><a href="#6-访问vcat服务" class="headerlink" title="6 访问vcat服务"></a>6 访问vcat服务</h2><p>vcat服务只支持谷歌浏览器访问，因此需要安装谷歌浏览器，当然，由于上面已经执行了命令：export CVAT_HOST=your-ip-address，因此，在ubuntu宿主机的windows系统上的谷歌浏览器也能访问ubuntu的cvat服务。刚开始浏览器访问：<a href="http://192.168.1.138:8080/%EF%BC%8C%E4%BC%9A%E6%8F%90%E7%A4%BA%E4%BD%A0%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%EF%BC%8C%E7%94%A8%E4%B8%8A%E9%9D%A2%E9%85%8D%E7%BD%AE%E7%9A%84%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E8%B7%9F%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E5%B0%B1%E5%A5%BD%E5%95%A6%E3%80%82">http://192.168.1.138:8080/，会提示你进行登录，用上面配置的超级用户的用户名跟密码登录就好啦。</a></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608155602684.png" alt="image-20220608155602684"></p><p>登录成功后显示如下页面</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608152905908.png" alt="image-20220608152905908"></p><p>当然，你也可以在ubuntu上安装谷歌浏览器，直接在ubuntu谷歌浏览器输入：<a href="http://127.0.0.1:8080/%E6%9D%A5%E8%AE%BF%E9%97%AEvcat%E6%9C%8D%E5%8A%A1%E3%80%82">http://127.0.0.1:8080/来访问vcat服务。</a></p><p>安装方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo apt-get -f install</span><br><span class="line"></span><br><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p>执行完后就可以在应用中找到,打开谷歌浏览器，将其添加到收藏夹就好啦。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608155111313.png" alt="image-20220608155111313"></p><h1 id="2-vcat服务标注工具的使用"><a href="#2-vcat服务标注工具的使用" class="headerlink" title="2 vcat服务标注工具的使用"></a>2 vcat服务标注工具的使用</h1><p>参考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/ZHUO__zhuo/article/details/125068660</span></span><br></pre></td></tr></table></figure><p>总结步骤为：</p><h2 id="1-开启cvat服务"><a href="#1-开启cvat服务" class="headerlink" title="1 开启cvat服务"></a>1 开启cvat服务</h2><p>ubuntu上开启cvat服务，然后windows登录进入cvat服务，然后新建任务</p><h2 id="2-对新任务进行设置"><a href="#2-对新任务进行设置" class="headerlink" title="2 对新任务进行设置"></a>2 对新任务进行设置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">任务名，</span></span><br><span class="line"><span class="attr">2</span> <span class="string">工程名，</span></span><br><span class="line"><span class="attr">3</span> <span class="string">添加标签</span></span><br><span class="line"><span class="attr">4</span> <span class="string">选择标注数据源（我这里是直接拖拽windows上的视频到浏览器中）</span></span><br><span class="line"><span class="attr">5</span> <span class="string">高级配置，我这里高级配置只设置了每隔25帧标注一次，起始帧</span></span><br><span class="line"><span class="attr">然后点击submit，任务就创建成功了。</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608170856792.png" alt="image-20220608170856792"></p><h2 id="3-标注"><a href="#3-标注" class="headerlink" title="3 标注"></a>3 标注</h2><p>点击相应Job就可以进行标注了</p><p>标注时点击左侧栏，如下图，点击shape就可以在图中进行标注了，然后可以选择标签类型，上下帧切换等，最好每画一个框都保存一次。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608220759657.png" alt="image-20220608220759657"></p><p>常用的快捷键，加快标注速度：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">保存：</span> <span class="string">Ctrl + S</span></span><br><span class="line"><span class="meta">删除：</span> <span class="string">Delete</span></span><br><span class="line"><span class="attr">缩放：鼠标滚轴，往上放大，向下缩小</span></span><br><span class="line"><span class="attr">拖动：鼠标左键点击并拖动图片，调整位置</span></span><br><span class="line"><span class="attr">下一帧：F</span></span><br><span class="line"><span class="attr">上一帧：D</span></span><br><span class="line"><span class="meta">向后跳十张</span>: <span class="string">Shift+Ctrl + V</span></span><br><span class="line"><span class="meta">向前跳十张</span>: <span class="string">Shift+Ctrl + C</span></span><br><span class="line"><span class="meta">复制框：Ctrl</span> <span class="string">+ C</span></span><br><span class="line"><span class="meta">粘贴框：Ctrl</span> <span class="string">+ V</span></span><br><span class="line"><span class="attr">重复上一次标注框参数：N，比如连续标一类头框，那么每次重复标时按N可以直接标下一个头框</span></span><br><span class="line"><span class="meta">对选定对象连续标注接下来所有帧内此对象：Ctrl</span> <span class="string">+ B</span></span><br><span class="line"><span class="attr">转换标签：Ctrl+(0..9)</span></span><br></pre></td></tr></table></figure><h2 id="4-导出："><a href="#4-导出：" class="headerlink" title="4 导出："></a>4 导出：</h2><p>导出时选择相应类型，然后下载为zip文件。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608222913963.png" alt="image-20220608222913963"></p><p>如下图，选择yolo 1.1 类型，下载的文件就是png的图片跟txt标注文件。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608222930991.png" alt="image-20220608222930991"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/1654745537(1).jpg" alt="1654745537(1)"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608223240874.png" alt="image-20220608223240874"></p><h2 id="5-注意："><a href="#5-注意：" class="headerlink" title="5  注意："></a>5  注意：</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">导出文件中，文件名就是原视频的第几帧，而网站中的当前帧就是提取后的帧的第几帧。</span></span><br><span class="line"><span class="attr">2</span> <span class="string">我们在创建任务时，设置的隔几帧标注一次，这个挺重要，如果设置的太低，那么很多图片几乎都是一样的</span></span><br><span class="line"><span class="attr">设置的太高，那么又容易错过一些数据集，因此看原视频本身的画面切换速度而定吧</span></span><br><span class="line"><span class="attr">3</span> <span class="string">保存时，会将所有的帧都保存下来，就算没有进行方框标注的帧也会保存下来（图片+txt标注文件）</span></span><br><span class="line"><span class="attr">如果原视频拍摄的比较多额外内容的话，保存下来的数据集可能会比较杂，这点要注意</span></span><br><span class="line"><span class="attr">确实比较杂时最后标注时记下来标注过的帧是第几帧，直接在导出保存的文件中，将我们标注过的数据集提取出来</span></span><br><span class="line"><span class="attr">这样子的数据集才比较纯净。</span></span><br><span class="line"><span class="attr">4</span> <span class="string">网上还看到一些数据增强方式，将导出下载的数据集再次进行增强，能多出六倍的数据集，这里读者可以自行测试一下</span></span><br><span class="line"><span class="attr">5</span> <span class="string">将标注过的数据集再次倒进来，再次继续标注，完善某些帧的标注，这里也请读者自己自行测试吧。</span></span><br></pre></td></tr></table></figure><h2 id="推荐阅读："><a href="#推荐阅读：" class="headerlink" title="推荐阅读："></a>推荐阅读：</h2><p>yolov5+vcat标注工具结合来训练自定义数据教程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.51cto.com/u_13565704/5136654</span></span><br></pre></td></tr></table></figure><p>常用数据标注工具：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//baijiahao.baidu.com/s?id=1727327620467031481&amp;wfr=spider&amp;for=pc</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面用yolov5训练自定义的数据集（病虫害识别）的时候，用的是labellmg这款软件，但是这款软件不能处理视频的标注，最近张老师要我搞无人机堤坝检测项目，因此今天就来写写在视频上进行标注，制作数据集更高级一点的标注工具：vcat。话不多说，赶紧上车！&lt;/p&gt;
&lt;h1 i</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="vcat" scheme="http://example.com/tags/vcat/"/>
    
  </entry>
  
  <entry>
    <title>pandas-轻松学pandas-快速入门</title>
    <link href="http://example.com/2022/06/01/pandas-%E8%BD%BB%E6%9D%BE%E5%AD%A6pandas-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/06/01/pandas-%E8%BD%BB%E6%9D%BE%E5%AD%A6pandas-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2022-06-01T08:51:36.000Z</published>
    <updated>2022-06-01T08:59:36.203Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># ps:下面是经过多次运行之后将输出答案以注释写到代码中，但是数据是随机生成的，所以有时候看到同一个变量不一样的输出！</span></span><br><span class="line"><span class="comment">############################################################# 1 创建数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 创建一个Series对象</span></span><br><span class="line">example = pd.Series([<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, np.nan, <span class="number">15</span>, <span class="number">16</span>])</span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    10.0</span></span><br><span class="line"><span class="string">1    11.0</span></span><br><span class="line"><span class="string">2    12.0</span></span><br><span class="line"><span class="string">3    13.0</span></span><br><span class="line"><span class="string">4     NaN</span></span><br><span class="line"><span class="string">5    15.0</span></span><br><span class="line"><span class="string">6    16.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(example)) <span class="comment"># 显示类型</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.series.Series&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 创建一个日期Series对象</span></span><br><span class="line">dt = pd.date_range(<span class="string">&#x27;20210120&#x27;</span>, periods=<span class="number">7</span>) <span class="comment"># 起始日期：2021-01-20 , ... , 截止日期 2020-01-26</span></span><br><span class="line"><span class="built_in">print</span>(dt)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DatetimeIndex([&#x27;2021-01-20&#x27;, &#x27;2021-01-21&#x27;, &#x27;2021-01-22&#x27;, &#x27;2021-01-23&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-24&#x27;, &#x27;2021-01-25&#x27;, &#x27;2021-01-26&#x27;],</span></span><br><span class="line"><span class="string">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dt))</span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.indexes.datetimes.DatetimeIndex&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 创建一个DataFrame对象，元素在[0, 10)之间，shape=(7, 5)############## 指定某一列(Series)为索引</span></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, size=(<span class="number">7</span>, <span class="number">5</span>)), index=dt, columns=<span class="built_in">list</span>(<span class="string">&#x27;abcde&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  7  7  4  6  2</span></span><br><span class="line"><span class="string">2021-01-21  1  0  9  9  6</span></span><br><span class="line"><span class="string">2021-01-22  5  8  2  8  8</span></span><br><span class="line"><span class="string">2021-01-23  6  4  9  8  1</span></span><br><span class="line"><span class="string">2021-01-24  7  9  1  6  5</span></span><br><span class="line"><span class="string">2021-01-25  1  4  3  4  0</span></span><br><span class="line"><span class="string">2021-01-26  2  3  2  0  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 创建一个DataFrame对象，数据由字典对象传递，每列的数据类型不同</span></span><br><span class="line">df2 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;aa&#x27;</span> : <span class="number">2.0</span>,</span><br><span class="line">    <span class="string">&#x27;bb&#x27;</span> : pd.to_datetime(<span class="string">&#x27;20210129&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;cc&#x27;</span> : pd.Series(<span class="number">3.0</span>, index=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>)), dtype=<span class="string">&#x27;float32&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;dd&#x27;</span> : np.array([<span class="number">4</span>] * <span class="number">5</span>, dtype=<span class="string">&#x27;int32&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;ee&#x27;</span> : <span class="string">&#x27;tommy&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    aa         bb   cc  dd     ee</span></span><br><span class="line"><span class="string">0  2.0 2021-01-29  3.0   4  tommy</span></span><br><span class="line"><span class="string">1  2.0 2021-01-29  3.0   4  tommy</span></span><br><span class="line"><span class="string">2  2.0 2021-01-29  3.0   4  tommy</span></span><br><span class="line"><span class="string">3  2.0 2021-01-29  3.0   4  tommy</span></span><br><span class="line"><span class="string">4  2.0 2021-01-29  3.0   4  tommy</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df2.dtypes)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">aa           float64</span></span><br><span class="line"><span class="string">bb    datetime64[ns]</span></span><br><span class="line"><span class="string">cc           float32</span></span><br><span class="line"><span class="string">dd             int32</span></span><br><span class="line"><span class="string">ee            object</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ############################################################# 2 查看数据</span></span><br><span class="line"><span class="built_in">print</span>(df) <span class="comment"># 显示全部数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  7  7  4  6  2</span></span><br><span class="line"><span class="string">2021-01-21  1  0  9  9  6</span></span><br><span class="line"><span class="string">2021-01-22  5  8  2  8  8</span></span><br><span class="line"><span class="string">2021-01-23  6  4  9  8  1</span></span><br><span class="line"><span class="string">2021-01-24  7  9  1  6  5</span></span><br><span class="line"><span class="string">2021-01-25  1  4  3  4  0</span></span><br><span class="line"><span class="string">2021-01-26  2  3  2  0  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.head()) <span class="comment"># 默认显示前5行数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  7  7  4  6  2</span></span><br><span class="line"><span class="string">2021-01-21  1  0  9  9  6</span></span><br><span class="line"><span class="string">2021-01-22  5  8  2  8  8</span></span><br><span class="line"><span class="string">2021-01-23  6  4  9  8  1</span></span><br><span class="line"><span class="string">2021-01-24  7  9  1  6  5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.tail()) <span class="comment"># 默认显示后5行数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-22  5  8  2  8  8</span></span><br><span class="line"><span class="string">2021-01-23  6  4  9  8  1</span></span><br><span class="line"><span class="string">2021-01-24  7  9  1  6  5</span></span><br><span class="line"><span class="string">2021-01-25  1  4  3  4  0</span></span><br><span class="line"><span class="string">2021-01-26  2  3  2  0  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.index) <span class="comment"># 显示索引</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DatetimeIndex([&#x27;2021-01-20&#x27;, &#x27;2021-01-21&#x27;, &#x27;2021-01-22&#x27;, &#x27;2021-01-23&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-24&#x27;, &#x27;2021-01-25&#x27;, &#x27;2021-01-26&#x27;],</span></span><br><span class="line"><span class="string">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.describe()) <span class="comment"># 数据统计</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">              a         b         c         d         e</span></span><br><span class="line"><span class="string">count  7.000000  7.000000  7.000000  7.000000  7.000000</span></span><br><span class="line"><span class="string">mean   4.142857  5.000000  4.285714  5.857143  3.142857</span></span><br><span class="line"><span class="string">std    2.734262  3.162278  3.352327  3.078342  3.184785</span></span><br><span class="line"><span class="string">min    1.000000  0.000000  1.000000  0.000000  0.000000</span></span><br><span class="line"><span class="string">25%    1.500000  3.500000  2.000000  5.000000  0.500000</span></span><br><span class="line"><span class="string">50%    5.000000  4.000000  3.000000  6.000000  2.000000</span></span><br><span class="line"><span class="string">75%    6.500000  7.500000  6.500000  8.000000  5.500000</span></span><br><span class="line"><span class="string">max    7.000000  9.000000  9.000000  9.000000  8.000000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.T) <span class="comment"># 数据转置（行列交换）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   2021-01-20  2021-01-21  2021-01-22  ...  2021-01-24  2021-01-25  2021-01-26</span></span><br><span class="line"><span class="string">a           7           1           5  ...           7           1           2</span></span><br><span class="line"><span class="string">b           7           0           8  ...           9           4           3</span></span><br><span class="line"><span class="string">c           4           9           2  ...           1           3           2</span></span><br><span class="line"><span class="string">d           6           9           8  ...           6           4           0</span></span><br><span class="line"><span class="string">e           2           6           8  ...           5           0           0</span></span><br><span class="line"><span class="string">[5 rows x 7 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  6  6  6  2  9</span></span><br><span class="line"><span class="string">2021-01-21  7  7  3  8  6</span></span><br><span class="line"><span class="string">2021-01-22  8  4  9  6  8</span></span><br><span class="line"><span class="string">2021-01-23  8  3  8  4  3</span></span><br><span class="line"><span class="string">2021-01-24  5  2  1  3  7</span></span><br><span class="line"><span class="string">2021-01-25  6  5  6  1  5</span></span><br><span class="line"><span class="string">2021-01-26  4  0  5  1  7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># axis=1 表示按列名的倒序排列，从 e --&gt; a</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            e  d  c  b  a</span></span><br><span class="line"><span class="string">2021-01-20  9  2  6  6  6</span></span><br><span class="line"><span class="string">2021-01-21  6  8  3  7  7</span></span><br><span class="line"><span class="string">2021-01-22  8  6  9  4  8</span></span><br><span class="line"><span class="string">2021-01-23  3  4  8  3  8</span></span><br><span class="line"><span class="string">2021-01-24  7  3  1  2  5</span></span><br><span class="line"><span class="string">2021-01-25  5  1  6  5  6</span></span><br><span class="line"><span class="string">2021-01-26  7  1  5  0  4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(by=<span class="string">&#x27;a&#x27;</span>, ascending=<span class="literal">False</span>)) <span class="comment"># 根据 列名a 进行排序</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-21  9  5  1  2  7</span></span><br><span class="line"><span class="string">2021-01-25  6  6  2  8  4</span></span><br><span class="line"><span class="string">2021-01-23  4  6  8  9  6</span></span><br><span class="line"><span class="string">2021-01-20  3  8  9  8  3</span></span><br><span class="line"><span class="string">2021-01-22  3  7  8  1  6</span></span><br><span class="line"><span class="string">2021-01-26  3  6  4  5  1</span></span><br><span class="line"><span class="string">2021-01-24  1  4  9  7  7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################### 3 数据检索</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.a) <span class="comment"># 获取a列的数据，类型是Series</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;a&#x27;</span>]) <span class="comment"># 与df.a 等同</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-01-20    3</span></span><br><span class="line"><span class="string">2021-01-21    9</span></span><br><span class="line"><span class="string">2021-01-22    3</span></span><br><span class="line"><span class="string">2021-01-23    4</span></span><br><span class="line"><span class="string">2021-01-24    1</span></span><br><span class="line"><span class="string">2021-01-25    6</span></span><br><span class="line"><span class="string">2021-01-26    3</span></span><br><span class="line"><span class="string">Freq: D, Name: a, dtype: int32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment"># 获取 0 ~ 3行 的数据【不包含3】</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  3  8  9  8  3</span></span><br><span class="line"><span class="string">2021-01-21  9  5  1  2  7</span></span><br><span class="line"><span class="string">2021-01-22  3  7  8  1  6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;20210120&#x27;</span> : <span class="string">&#x27;20210123&#x27;</span>]) <span class="comment"># 根据日期获取数据,根据索引切片</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  3  8  9  8  3</span></span><br><span class="line"><span class="string">2021-01-21  9  5  1  2  7</span></span><br><span class="line"><span class="string">2021-01-22  3  7  8  1  6</span></span><br><span class="line"><span class="string">2021-01-23  4  6  8  9  6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据label获取数据, a列，b列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[:, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b</span></span><br><span class="line"><span class="string">2021-01-20  3  8</span></span><br><span class="line"><span class="string">2021-01-21  9  5</span></span><br><span class="line"><span class="string">2021-01-22  3  7</span></span><br><span class="line"><span class="string">2021-01-23  4  6</span></span><br><span class="line"><span class="string">2021-01-24  1  4</span></span><br><span class="line"><span class="string">2021-01-25  6  6</span></span><br><span class="line"><span class="string">2021-01-26  3  6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据label获取数据，注意切片的用法</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;20210122&#x27;</span> : <span class="string">&#x27;20210125&#x27;</span>, [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            d  e</span></span><br><span class="line"><span class="string">2021-01-22  1  6</span></span><br><span class="line"><span class="string">2021-01-23  9  6</span></span><br><span class="line"><span class="string">2021-01-24  7  7</span></span><br><span class="line"><span class="string">2021-01-25  8  4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据 位置 获取数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df) <span class="comment"># 显示全部数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  4  4  6  2  1</span></span><br><span class="line"><span class="string">2021-01-21  3  2  6  1  5</span></span><br><span class="line"><span class="string">2021-01-22  3  7  0  2  8</span></span><br><span class="line"><span class="string">2021-01-23  6  0  6  3  0</span></span><br><span class="line"><span class="string">2021-01-24  3  4  0  4  5</span></span><br><span class="line"><span class="string">2021-01-25  1  8  8  2  8</span></span><br><span class="line"><span class="string">2021-01-26  1  5  2  6  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>]) <span class="comment"># 获取 index=0 （即第0行）的数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    4</span></span><br><span class="line"><span class="string">b    4</span></span><br><span class="line"><span class="string">c    6</span></span><br><span class="line"><span class="string">d    2</span></span><br><span class="line"><span class="string">e    1</span></span><br><span class="line"><span class="string">Name: 2021-01-20 00:00:00, dtype: int32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df.iloc[<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.series.Series&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">3</span>]) <span class="comment"># 切片</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            b  c</span></span><br><span class="line"><span class="string">2021-01-20  4  6</span></span><br><span class="line"><span class="string">2021-01-21  2  6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">3</span>]]) <span class="comment"># 切片，根据列表指定行和列获取数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            b  d</span></span><br><span class="line"><span class="string">2021-01-20  4  2</span></span><br><span class="line"><span class="string">2021-01-22  7  2</span></span><br><span class="line"><span class="string">2021-01-23  0  3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">1</span>:<span class="number">3</span>, :]) <span class="comment"># 切片，指定行号，所有列</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-21  3  2  6  1  5</span></span><br><span class="line"><span class="string">2021-01-22  3  7  0  2  8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[:, <span class="number">1</span>:<span class="number">3</span>]) <span class="comment"># 切片，所有行，指定列</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            b  c</span></span><br><span class="line"><span class="string">2021-01-20  4  6</span></span><br><span class="line"><span class="string">2021-01-21  2  6</span></span><br><span class="line"><span class="string">2021-01-22  7  0</span></span><br><span class="line"><span class="string">2021-01-23  0  6</span></span><br><span class="line"><span class="string">2021-01-24  4  0</span></span><br><span class="line"><span class="string">2021-01-25  8  8</span></span><br><span class="line"><span class="string">2021-01-26  5  2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">1</span>, <span class="number">1</span>]) <span class="comment"># 获取一个值，row=1, col=1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据布尔值获取数据</span></span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">5</span>]) <span class="comment"># 打印a列中，元素大于5的那些行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-23  6  0  6  3  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df[ df &gt; <span class="number">5</span>]) <span class="comment"># 判断所有元素中，哪些元素大于5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">              a    b    c    d    e</span></span><br><span class="line"><span class="string">2021-01-20  NaN  NaN  6.0  NaN  NaN</span></span><br><span class="line"><span class="string">2021-01-21  NaN  NaN  6.0  NaN  NaN</span></span><br><span class="line"><span class="string">2021-01-22  NaN  7.0  NaN  NaN  8.0</span></span><br><span class="line"><span class="string">2021-01-23  6.0  NaN  6.0  NaN  NaN</span></span><br><span class="line"><span class="string">2021-01-24  NaN  NaN  NaN  NaN  NaN</span></span><br><span class="line"><span class="string">2021-01-25  NaN  8.0  8.0  NaN  8.0</span></span><br><span class="line"><span class="string">2021-01-26  NaN  NaN  NaN  6.0  NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 方法 isin() 过滤</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&#x27;a&#x27;</span>].isin([<span class="number">3</span>, <span class="number">1</span>])]) <span class="comment"># 筛选出a列中元素为3,1 的那些行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-21  3  2  6  1  5</span></span><br><span class="line"><span class="string">2021-01-22  3  7  0  2  8</span></span><br><span class="line"><span class="string">2021-01-24  3  4  0  4  5</span></span><br><span class="line"><span class="string">2021-01-25  1  8  8  2  8</span></span><br><span class="line"><span class="string">2021-01-26  1  5  2  6  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ################################################################## 4 缺失值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e</span></span><br><span class="line"><span class="string">2021-01-20  7  5  2  3  4</span></span><br><span class="line"><span class="string">2021-01-21  4  4  4  4  4</span></span><br><span class="line"><span class="string">2021-01-22  1  2  3  9  0</span></span><br><span class="line"><span class="string">2021-01-23  4  0  6  1  3</span></span><br><span class="line"><span class="string">2021-01-24  5  8  7  6  4</span></span><br><span class="line"><span class="string">2021-01-25  7  8  5  2  1</span></span><br><span class="line"><span class="string">2021-01-26  6  1  7  4  7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 增加2列 f,g</span></span><br><span class="line">df = df.reindex(columns=<span class="built_in">list</span>(df.columns) + [<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>] )</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e   f   g</span></span><br><span class="line"><span class="string">2021-01-20  7  5  2  3  4 NaN NaN</span></span><br><span class="line"><span class="string">2021-01-21  4  4  4  4  4 NaN NaN</span></span><br><span class="line"><span class="string">2021-01-22  1  2  3  9  0 NaN NaN</span></span><br><span class="line"><span class="string">2021-01-23  4  0  6  1  3 NaN NaN</span></span><br><span class="line"><span class="string">2021-01-24  5  8  7  6  4 NaN NaN</span></span><br><span class="line"><span class="string">2021-01-25  7  8  5  2  1 NaN NaN</span></span><br><span class="line"><span class="string">2021-01-26  6  1  7  4  7 NaN NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># # 给 f列, g列 赋值</span></span><br><span class="line">df.loc[[<span class="string">&#x27;20210121&#x27;</span>, <span class="string">&#x27;20210122&#x27;</span>, <span class="string">&#x27;20210123&#x27;</span>, <span class="string">&#x27;20210125&#x27;</span>], <span class="string">&#x27;f&#x27;</span>] = <span class="number">1</span></span><br><span class="line">df.loc[[<span class="string">&#x27;20210124&#x27;</span>, <span class="string">&#x27;20210125&#x27;</span>], <span class="string">&#x27;g&#x27;</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e    f    g</span></span><br><span class="line"><span class="string">2021-01-20  7  5  2  3  4  NaN  NaN</span></span><br><span class="line"><span class="string">2021-01-21  4  4  4  4  4  1.0  NaN</span></span><br><span class="line"><span class="string">2021-01-22  1  2  3  9  0  1.0  NaN</span></span><br><span class="line"><span class="string">2021-01-23  4  0  6  1  3  1.0  NaN</span></span><br><span class="line"><span class="string">2021-01-24  5  8  7  6  4  NaN  2.0</span></span><br><span class="line"><span class="string">2021-01-25  7  8  5  2  1  1.0  2.0</span></span><br><span class="line"><span class="string">2021-01-26  6  1  7  4  7  NaN  NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 清理 df 中的 NaN，返回一个新的df,有NaN的所有行都去掉。</span></span><br><span class="line"><span class="built_in">print</span>(df.dropna(how=<span class="string">&#x27;any&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e    f    g</span></span><br><span class="line"><span class="string">2021-01-25  7  8  5  2  1  1.0  2.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df) <span class="comment"># 原来的数据不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充  NaN</span></span><br><span class="line"><span class="built_in">print</span>(df.fillna(value=<span class="number">999</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e    f    g</span></span><br><span class="line"><span class="string">2021-01-20  7  5  2  3  4  999  999</span></span><br><span class="line"><span class="string">2021-01-21  4  4  4  4  4  1.0  999</span></span><br><span class="line"><span class="string">2021-01-22  1  2  3  9  0  1.0  999</span></span><br><span class="line"><span class="string">2021-01-23  4  0  6  1  3  1.0  999</span></span><br><span class="line"><span class="string">2021-01-24  5  8  7  6  4  999  2.0</span></span><br><span class="line"><span class="string">2021-01-25  7  8  5  2  1  1.0  2.0</span></span><br><span class="line"><span class="string">2021-01-26  6  1  7  4  7  999  999</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否NaN，返回True 或 False</span></span><br><span class="line"><span class="built_in">print</span>(df.isna() )</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                a      b      c      d      e      f      g</span></span><br><span class="line"><span class="string">2021-01-20  False  False  False  False  False   True   True</span></span><br><span class="line"><span class="string">2021-01-21  False  False  False  False  False  False   True</span></span><br><span class="line"><span class="string">2021-01-22  False  False  False  False  False  False   True</span></span><br><span class="line"><span class="string">2021-01-23  False  False  False  False  False  False   True</span></span><br><span class="line"><span class="string">2021-01-24  False  False  False  False  False   True  False</span></span><br><span class="line"><span class="string">2021-01-25  False  False  False  False  False  False  False</span></span><br><span class="line"><span class="string">2021-01-26  False  False  False  False  False   True   True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># apply() 函数应用</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            a  b  c  d  e    f    g</span></span><br><span class="line"><span class="string">2021-01-20  7  5  2  3  4  NaN  NaN</span></span><br><span class="line"><span class="string">2021-01-21  4  4  4  4  4  1.0  NaN</span></span><br><span class="line"><span class="string">2021-01-22  1  2  3  9  0  1.0  NaN</span></span><br><span class="line"><span class="string">2021-01-23  4  0  6  1  3  1.0  NaN</span></span><br><span class="line"><span class="string">2021-01-24  5  8  7  6  4  NaN  2.0</span></span><br><span class="line"><span class="string">2021-01-25  7  8  5  2  1  1.0  2.0</span></span><br><span class="line"><span class="string">2021-01-26  6  1  7  4  7  NaN  NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.apply(np.<span class="built_in">sum</span>, axis=<span class="number">0</span>)) <span class="comment"># 按列累加</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    34.0</span></span><br><span class="line"><span class="string">b    28.0</span></span><br><span class="line"><span class="string">c    34.0</span></span><br><span class="line"><span class="string">d    29.0</span></span><br><span class="line"><span class="string">e    23.0</span></span><br><span class="line"><span class="string">f     4.0</span></span><br><span class="line"><span class="string">g     4.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.apply(np.<span class="built_in">sum</span>, axis=<span class="number">1</span>)) <span class="comment"># 按列累加</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-01-20    21.0</span></span><br><span class="line"><span class="string">2021-01-21    21.0</span></span><br><span class="line"><span class="string">2021-01-22    16.0</span></span><br><span class="line"><span class="string">2021-01-23    15.0</span></span><br><span class="line"><span class="string">2021-01-24    32.0</span></span><br><span class="line"><span class="string">2021-01-25    26.0</span></span><br><span class="line"><span class="string">2021-01-26    25.0</span></span><br><span class="line"><span class="string">Freq: D, dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># apply() 最大值 - 最小值</span></span><br><span class="line"><span class="built_in">print</span>(df.apply(<span class="keyword">lambda</span> x:x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>())) <span class="comment"># 每一列中的最大值 - 每一列中的最小值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    6.0</span></span><br><span class="line"><span class="string">b    8.0</span></span><br><span class="line"><span class="string">c    5.0</span></span><br><span class="line"><span class="string">d    8.0</span></span><br><span class="line"><span class="string">e    7.0</span></span><br><span class="line"><span class="string">f    0.0</span></span><br><span class="line"><span class="string">g    0.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ############################################################## 5 合并 Merge</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 concat()</span></span><br><span class="line">df3 = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">20</span>, size=(<span class="number">5</span>, <span class="number">4</span>)))</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0   1   2   3</span></span><br><span class="line"><span class="string">0  14  19  19  17</span></span><br><span class="line"><span class="string">1   5  12   1  17</span></span><br><span class="line"><span class="string">2   4   8  13  14</span></span><br><span class="line"><span class="string">3   6  14  14   1</span></span><br><span class="line"><span class="string">4   8  19   4   7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 数据切片</span></span><br><span class="line">test1 = df3[:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(test1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0   1   2   3</span></span><br><span class="line"><span class="string">0  14  19  19  17</span></span><br><span class="line"><span class="string">1   5  12   1  17</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">test2 = df3[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(test2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0   1   2   3</span></span><br><span class="line"><span class="string">2  4   8  13  14</span></span><br><span class="line"><span class="string">3  6  14  14   1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">test3 = df3[<span class="number">4</span>:]</span><br><span class="line"><span class="built_in">print</span>(test3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0   1  2  3</span></span><br><span class="line"><span class="string">4  8  19  4  7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line">all_test = [test1, test2, test3]</span><br><span class="line"><span class="built_in">print</span>(all_test)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[    0   1   2   3</span></span><br><span class="line"><span class="string">0  14  19  19  17</span></span><br><span class="line"><span class="string">1   5  12   1  17,    0   1   2   3</span></span><br><span class="line"><span class="string">2  4   8  13  14</span></span><br><span class="line"><span class="string">3  6  14  14   1,    0   1  2  3</span></span><br><span class="line"><span class="string">4  8  19  4  7]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(pd.concat(all_test)) <span class="comment"># 与原始数据一致</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0   1   2   3</span></span><br><span class="line"><span class="string">0  14  19  19  17</span></span><br><span class="line"><span class="string">1   5  12   1  17</span></span><br><span class="line"><span class="string">2   4   8  13  14</span></span><br><span class="line"><span class="string">3   6  14  14   1</span></span><br><span class="line"><span class="string">4   8  19   4   7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 2 merge()</span></span><br><span class="line">t1 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;tommy&quot;</span>:[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>],</span><br><span class="line">    <span class="string">&quot;hobby&quot;</span>:[<span class="string">&quot;jogging&quot;</span>, <span class="string">&quot;reading&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  tommy    hobby</span></span><br><span class="line"><span class="string">0     a  jogging</span></span><br><span class="line"><span class="string">1     b  reading</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">t2 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;tommy&quot;</span>:[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>],</span><br><span class="line">    <span class="string">&quot;info&quot;</span>:[<span class="string">&quot;shenzhen&quot;</span>,<span class="string">&quot;AI&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  tommy      info</span></span><br><span class="line"><span class="string">0     a  shenzhen</span></span><br><span class="line"><span class="string">1     b        AI</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并，指定键，进行合并</span></span><br><span class="line">mer = pd.merge(t1, t2, on=<span class="string">&quot;tommy&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(mer)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  tommy    hobby      info</span></span><br><span class="line"><span class="string">0     a  jogging  shenzhen</span></span><br><span class="line"><span class="string">1     b  reading        AI</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ##################################################################### 6 分组 Grouping</span></span><br><span class="line">df4 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;A&quot;</span> : [<span class="string">&quot;happy&quot;</span>, <span class="string">&quot;new&quot;</span>, <span class="string">&quot;year&quot;</span>, <span class="string">&quot;2021&quot;</span>,<span class="string">&quot;happy&quot;</span>, <span class="string">&quot;new&quot;</span>, <span class="string">&quot;year&quot;</span>, <span class="string">&quot;2021&quot;</span>],</span><br><span class="line">    <span class="string">&quot;B&quot;</span> : np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=<span class="number">8</span>),</span><br><span class="line">    <span class="string">&quot;C&quot;</span> : [<span class="string">&quot;新&quot;</span>, <span class="string">&quot;年&quot;</span>, <span class="string">&quot;快&quot;</span>, <span class="string">&quot;乐&quot;</span>, <span class="string">&quot;新&quot;</span>, <span class="string">&quot;年&quot;</span>, <span class="string">&quot;快&quot;</span>, <span class="string">&quot;乐&quot;</span>],</span><br><span class="line">    <span class="string">&quot;D&quot;</span> : np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=<span class="number">8</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(df4)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">       A  B  C  D</span></span><br><span class="line"><span class="string">0  happy  9  新  8</span></span><br><span class="line"><span class="string">1    new  4  年  5</span></span><br><span class="line"><span class="string">2   year  4  快  6</span></span><br><span class="line"><span class="string">3   2021  6  乐  1</span></span><br><span class="line"><span class="string">4  happy  2  新  1</span></span><br><span class="line"><span class="string">5    new  1  年  8</span></span><br><span class="line"><span class="string">6   year  2  快  6</span></span><br><span class="line"><span class="string">7   2021  5  乐  2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 对 C列 分组后求和 sum()(只对数值列求和，返回的也只有数值列）</span></span><br><span class="line"><span class="built_in">print</span>(df4.groupby(by=<span class="string">&quot;C&quot;</span>).<span class="built_in">sum</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    B   D</span></span><br><span class="line"><span class="string">C        </span></span><br><span class="line"><span class="string">乐  11   3</span></span><br><span class="line"><span class="string">年   5  13</span></span><br><span class="line"><span class="string">快   6  12</span></span><br><span class="line"><span class="string">新  11   9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 对 A列，C列 进行分组求和</span></span><br><span class="line"><span class="built_in">print</span>(df4.groupby(by=[<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>]).<span class="built_in">sum</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A     C        </span></span><br><span class="line"><span class="string">2021  乐  11   3</span></span><br><span class="line"><span class="string">happy 新  11   9</span></span><br><span class="line"><span class="string">new   年   5  13</span></span><br><span class="line"><span class="string">year  快   6  12</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ## ############################################################# 7 类型/分类数据 Categoricals</span></span><br><span class="line">df5 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : [<span class="number">18</span>, <span class="number">15</span>, <span class="number">27</span>, <span class="number">22</span>, <span class="number">20</span>, <span class="number">35</span>, <span class="number">29</span>, <span class="number">15</span>],</span><br><span class="line">    <span class="string">&quot;sex&quot;</span> : [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex</span></span><br><span class="line"><span class="string">0   18   m</span></span><br><span class="line"><span class="string">1   15   f</span></span><br><span class="line"><span class="string">2   27   m</span></span><br><span class="line"><span class="string">3   22   m</span></span><br><span class="line"><span class="string">4   20   f</span></span><br><span class="line"><span class="string">5   35   m</span></span><br><span class="line"><span class="string">6   29   f</span></span><br><span class="line"><span class="string">7   15   m</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df5.dtypes) <span class="comment"># 每列的数据类型</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">age     int64</span></span><br><span class="line"><span class="string">sex    object</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 将 sex 列转换为 category 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增加一列</span></span><br><span class="line">df5[<span class="string">&#x27;new_sex&#x27;</span>] = df5[<span class="string">&#x27;sex&#x27;</span>].astype(<span class="string">&#x27;category&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex new_sex</span></span><br><span class="line"><span class="string">0   18   m       m</span></span><br><span class="line"><span class="string">1   15   f       f</span></span><br><span class="line"><span class="string">2   27   m       m</span></span><br><span class="line"><span class="string">3   22   m       m</span></span><br><span class="line"><span class="string">4   20   f       f</span></span><br><span class="line"><span class="string">5   35   m       m</span></span><br><span class="line"><span class="string">6   29   f       f</span></span><br><span class="line"><span class="string">7   15   m       m</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df5.dtypes) <span class="comment"># 查看类型</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">age           int64</span></span><br><span class="line"><span class="string">sex          object</span></span><br><span class="line"><span class="string">new_sex    category</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 修改 分类类型数据值 , 将 &#x27;m&#x27;, &#x27;f&#x27;, 替换为 &#x27;aa&#x27;, &#x27;bb&#x27;</span></span><br><span class="line"></span><br><span class="line">df5[<span class="string">&#x27;new_sex&#x27;</span>].cat.categories = [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex new_sex</span></span><br><span class="line"><span class="string">0   18   m      bb</span></span><br><span class="line"><span class="string">1   15   f      aa</span></span><br><span class="line"><span class="string">2   27   m      bb</span></span><br><span class="line"><span class="string">3   22   m      bb</span></span><br><span class="line"><span class="string">4   20   f      aa</span></span><br><span class="line"><span class="string">5   35   m      bb</span></span><br><span class="line"><span class="string">6   29   f      aa</span></span><br><span class="line"><span class="string">7   15   m      bb</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据 new_sex 排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df5.sort_values(by=<span class="string">&#x27;new_sex&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex new_sex</span></span><br><span class="line"><span class="string">1   15   f      aa</span></span><br><span class="line"><span class="string">4   20   f      aa</span></span><br><span class="line"><span class="string">6   29   f      aa</span></span><br><span class="line"><span class="string">0   18   m      bb</span></span><br><span class="line"><span class="string">2   27   m      bb</span></span><br><span class="line"><span class="string">3   22   m      bb</span></span><br><span class="line"><span class="string">5   35   m      bb</span></span><br><span class="line"><span class="string">7   15   m      bb</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据 new_sex 分组</span></span><br><span class="line"><span class="built_in">print</span>(df5.groupby(<span class="string">&#x27;new_sex&#x27;</span>).<span class="built_in">sum</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">         age</span></span><br><span class="line"><span class="string">new_sex     </span></span><br><span class="line"><span class="string">aa        64</span></span><br><span class="line"><span class="string">bb       117</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df5.groupby(<span class="string">&#x27;new_sex&#x27;</span>).size())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">new_sex</span></span><br><span class="line"><span class="string">aa    3</span></span><br><span class="line"><span class="string">bb    5</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas-数据清洗</title>
    <link href="http://example.com/2022/06/01/pandas-%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    <id>http://example.com/2022/06/01/pandas-%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/</id>
    <published>2022-06-01T08:50:56.000Z</published>
    <updated>2022-06-01T08:57:20.875Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据清理：数据缺失、数据格式错误、错误数据或重复数据的处理。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID  ST_NUM     ST_NAME OWN_OCCUPIED NUM_BEDROOMS NUM_BATH SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0   104.0      PUTNAM            Y            3        1  1000</span></span><br><span class="line"><span class="string">1  100002000.0   197.0   LEXINGTON            N            3      1.5    --</span></span><br><span class="line"><span class="string">2  100003000.0     NaN   LEXINGTON            N          NaN        1   850</span></span><br><span class="line"><span class="string">3  100004000.0   201.0    BERKELEY           12            1      NaN   700</span></span><br><span class="line"><span class="string">4          NaN   203.0    BERKELEY            Y            3        2  1600</span></span><br><span class="line"><span class="string">5  100006000.0   207.0    BERKELEY            Y          NaN        1   800</span></span><br><span class="line"><span class="string">6  100007000.0     NaN  WASHINGTON          NaN            2   HURLEY   950</span></span><br><span class="line"><span class="string">7  100008000.0   213.0     TREMONT            Y            1        1   NaN</span></span><br><span class="line"><span class="string">8  100009000.0   215.0     TREMONT            Y           na        2  1800</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#分析：上表包含来四种空数据：n/a，NA，—，na</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####处理：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################ 1 首先：通过 isnull() 判断         某一列        的各个单元格是否为空。</span></span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0      3</span></span><br><span class="line"><span class="string">1      3</span></span><br><span class="line"><span class="string">2    NaN</span></span><br><span class="line"><span class="string">3      1</span></span><br><span class="line"><span class="string">4      3</span></span><br><span class="line"><span class="string">5    NaN</span></span><br><span class="line"><span class="string">6      2</span></span><br><span class="line"><span class="string">7      1</span></span><br><span class="line"><span class="string">8     na</span></span><br><span class="line"><span class="string">Name: NUM_BEDROOMS, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>].isnull())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    False</span></span><br><span class="line"><span class="string">1    False</span></span><br><span class="line"><span class="string">2     True</span></span><br><span class="line"><span class="string">3    False</span></span><br><span class="line"><span class="string">4    False</span></span><br><span class="line"><span class="string">5     True</span></span><br><span class="line"><span class="string">6    False</span></span><br><span class="line"><span class="string">7    False</span></span><br><span class="line"><span class="string">8    False</span></span><br><span class="line"><span class="string">Name: NUM_BEDROOMS, dtype: bool</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上例子中我们看到 Pandas 把 n/a 和 NA 当作空数据，na 不是空数据，不符合我们要求，我们可以在读取文件时 指定空数据类型：</span></span><br><span class="line">missing_values = [<span class="string">&quot;n/a&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;--&quot;</span>,<span class="string">&#x27;NaN&#x27;</span>]</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>, na_values = missing_values)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    3.0</span></span><br><span class="line"><span class="string">1    3.0</span></span><br><span class="line"><span class="string">2    NaN</span></span><br><span class="line"><span class="string">3    1.0</span></span><br><span class="line"><span class="string">4    3.0</span></span><br><span class="line"><span class="string">5    NaN</span></span><br><span class="line"><span class="string">6    2.0</span></span><br><span class="line"><span class="string">7    1.0</span></span><br><span class="line"><span class="string">8    NaN</span></span><br><span class="line"><span class="string">Name: NUM_BEDROOMS, dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>].isnull())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    False</span></span><br><span class="line"><span class="string">1    False</span></span><br><span class="line"><span class="string">2     True</span></span><br><span class="line"><span class="string">3    False</span></span><br><span class="line"><span class="string">4    False</span></span><br><span class="line"><span class="string">5     True</span></span><br><span class="line"><span class="string">6    False</span></span><br><span class="line"><span class="string">7    False</span></span><br><span class="line"><span class="string">8     True</span></span><br><span class="line"><span class="string">Name: NUM_BEDROOMS, dtype: bool</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################2 删除包含空字段的行：可以使用 dropna() 方法，语法格式如下</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DataFrame.dropna(axis=0, how=&#x27;any&#x27;, thresh=None, subset=None, inplace=False)</span></span><br><span class="line"><span class="string">参数说明：</span></span><br><span class="line"><span class="string">    axis：默认为 0，表示逢空值剔除整行，如果设置参数 axis＝1 表示逢空值去掉整列。</span></span><br><span class="line"><span class="string">    how：默认为 &#x27;any&#x27; 如果一行（或一列）里任何一个数据有出现 NA 就去掉整行，如果设置 how=&#x27;all&#x27; 一行（或列）都是 NA 才去掉这整行。</span></span><br><span class="line"><span class="string">    thresh：设置需要多少非空值的数据才可以保留下来的。 #############所以说设置该参数时就不用设置how参数了。或者说如果how参数有默认值的话，thresh优先级要大于。</span></span><br><span class="line"><span class="string">    subset：设置想要检查的列。如果是多个列，可以使用列名的 list 作为参数。           ###########指定列，默认为全部列</span></span><br><span class="line"><span class="string">    inplace：如果设置 True，将计算得到的值直接覆盖之前的值并返回 None，修改的是源数据。                                      </span></span><br><span class="line"><span class="string">返回值：返回的是去掉na之后的DataFrame数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">跳转如下函数定义时，会有每个参数的说明，以及例子哦！！！</span></span><br><span class="line"><span class="string">pd.DataFrame().dropna()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">new_df = df.dropna()</span><br><span class="line"><span class="built_in">print</span>(new_df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID  ST_NUM ST_NAME OWN_OCCUPIED  NUM_BEDROOMS NUM_BATH   SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0   104.0  PUTNAM            Y           3.0        1  1000.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dropna(inplace = <span class="literal">True</span>)) <span class="comment">#######返回的是None</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID  ST_NUM ST_NAME OWN_OCCUPIED  NUM_BEDROOMS NUM_BATH   SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0   104.0  PUTNAM            Y           3.0        1  1000.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 移除 ST_NUM 列中字段值为空的行：</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>)</span><br><span class="line">df.dropna(subset=[<span class="string">&#x27;ST_NUM&#x27;</span>], inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID  ST_NUM    ST_NAME OWN_OCCUPIED NUM_BEDROOMS NUM_BATH SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0   104.0     PUTNAM            Y            3        1  1000</span></span><br><span class="line"><span class="string">1  100002000.0   197.0  LEXINGTON            N            3      1.5    --</span></span><br><span class="line"><span class="string">3  100004000.0   201.0   BERKELEY           12            1      NaN   700</span></span><br><span class="line"><span class="string">4          NaN   203.0   BERKELEY            Y            3        2  1600</span></span><br><span class="line"><span class="string">5  100006000.0   207.0   BERKELEY            Y          NaN        1   800</span></span><br><span class="line"><span class="string">7  100008000.0   213.0    TREMONT            Y            1        1   NaN</span></span><br><span class="line"><span class="string">8  100009000.0   215.0    TREMONT            Y           na        2  1800</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#第六行不见了哈！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################3 fillna() 方法来替换一些空字段。</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>,na_values=missing_values)</span><br><span class="line"></span><br><span class="line"><span class="comment">#（1） 整个表控制用一个值来代替。</span></span><br><span class="line"><span class="comment"># new_df = df.fillna(&#x27;12345&#x27;)</span></span><br><span class="line">new_df = df.fillna(<span class="number">12345</span>)</span><br><span class="line"><span class="built_in">print</span>(new_df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID   ST_NUM     ST_NAME OWN_OCCUPIED  NUM_BEDROOMS NUM_BATH    SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0    104.0      PUTNAM            Y           3.0        1   1000.0</span></span><br><span class="line"><span class="string">1  100002000.0    197.0   LEXINGTON            N           3.0      1.5  12345.0</span></span><br><span class="line"><span class="string">2  100003000.0  12345.0   LEXINGTON            N       12345.0        1    850.0</span></span><br><span class="line"><span class="string">3  100004000.0    201.0    BERKELEY           12           1.0    12345    700.0</span></span><br><span class="line"><span class="string">4      12345.0    203.0    BERKELEY            Y           3.0        2   1600.0</span></span><br><span class="line"><span class="string">5  100006000.0    207.0    BERKELEY            Y       12345.0        1    800.0</span></span><br><span class="line"><span class="string">6  100007000.0  12345.0  WASHINGTON        12345           2.0   HURLEY    950.0</span></span><br><span class="line"><span class="string">7  100008000.0    213.0     TREMONT            Y           1.0        1  12345.0</span></span><br><span class="line"><span class="string">8  100009000.0    215.0     TREMONT            Y       12345.0        2   1800.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#（2） 指定列的空值代替</span></span><br><span class="line">df[<span class="string">&#x27;PID&#x27;</span>].fillna(<span class="number">123456789</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID  ST_NUM     ST_NAME OWN_OCCUPIED  NUM_BEDROOMS NUM_BATH   SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0   104.0      PUTNAM            Y           3.0        1  1000.0</span></span><br><span class="line"><span class="string">1  100002000.0   197.0   LEXINGTON            N           3.0      1.5     NaN</span></span><br><span class="line"><span class="string">2  100003000.0     NaN   LEXINGTON            N           NaN        1   850.0</span></span><br><span class="line"><span class="string">3  100004000.0   201.0    BERKELEY           12           1.0      NaN   700.0</span></span><br><span class="line"><span class="string">4  123456789.0   203.0    BERKELEY            Y           3.0        2  1600.0</span></span><br><span class="line"><span class="string">5  100006000.0   207.0    BERKELEY            Y           NaN        1   800.0</span></span><br><span class="line"><span class="string">6  100007000.0     NaN  WASHINGTON          NaN           2.0   HURLEY   950.0</span></span><br><span class="line"><span class="string">7  100008000.0   213.0     TREMONT            Y           1.0        1     NaN</span></span><br><span class="line"><span class="string">8  100009000.0   215.0     TREMONT            Y           NaN        2  1800.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(3) 一般使用均值，中位数，众数来填充数值。</span></span><br><span class="line">    <span class="comment">##Pandas使用 mean()、median() 和 mode() 方法计算列的均值（所有值加起来的平均值）、中位数值（排序后排在中间的数）和众数（出现频率最高的数）。</span></span><br><span class="line">x = df[<span class="string">&quot;ST_NUM&quot;</span>].mean()</span><br><span class="line">df[<span class="string">&quot;ST_NUM&quot;</span>].fillna(x, inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           PID      ST_NUM     ST_NAME OWN_OCCUPIED  NUM_BEDROOMS NUM_BATH   SQ_FT</span></span><br><span class="line"><span class="string">0  100001000.0  104.000000      PUTNAM            Y           3.0        1  1000.0</span></span><br><span class="line"><span class="string">1  100002000.0  197.000000   LEXINGTON            N           3.0      1.5     NaN</span></span><br><span class="line"><span class="string">2  100003000.0  191.428571   LEXINGTON            N           NaN        1   850.0</span></span><br><span class="line"><span class="string">3  100004000.0  201.000000    BERKELEY           12           1.0      NaN   700.0</span></span><br><span class="line"><span class="string">4  123456789.0  203.000000    BERKELEY            Y           3.0        2  1600.0</span></span><br><span class="line"><span class="string">5  100006000.0  207.000000    BERKELEY            Y           NaN        1   800.0</span></span><br><span class="line"><span class="string">6  100007000.0  191.428571  WASHINGTON          NaN           2.0   HURLEY   950.0</span></span><br><span class="line"><span class="string">7  100008000.0  213.000000     TREMONT            Y           1.0        1     NaN</span></span><br><span class="line"><span class="string">8  100009000.0  215.000000     TREMONT            Y           NaN        2  1800.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 4 Pandas 清洗格式错误数据</span></span><br><span class="line"><span class="comment"># 第三个日期格式错误</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;Date&quot;</span>: [<span class="string">&#x27;2020/12/01&#x27;</span>, <span class="string">&#x27;2020/12/02&#x27;</span> , <span class="string">&#x27;20201226&#x27;</span>],</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data, index = [<span class="string">&quot;day1&quot;</span>, <span class="string">&quot;day2&quot;</span>, <span class="string">&quot;day3&quot;</span>])</span><br><span class="line">df[<span class="string">&#x27;Date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;Date&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">           Date  duration</span></span><br><span class="line"><span class="string">day1 2020-12-01        50</span></span><br><span class="line"><span class="string">day2 2020-12-02        40</span></span><br><span class="line"><span class="string">day3 2020-12-26        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 5 Pandas 清洗错误数据</span></span><br><span class="line"><span class="comment"># 数据错误也是很常见的情况，我们可以对错误的数据进行替换或移除。</span></span><br><span class="line"><span class="comment"># （1）以下实例会替换错误年龄的数据：</span></span><br><span class="line">person = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span> , <span class="string">&#x27;Taobao&#x27;</span>],</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: [-<span class="number">50</span>, <span class="number">40</span>, <span class="number">12345</span>]    <span class="comment"># 12345 年龄数据是错误的</span></span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(person)</span><br><span class="line">df.loc[<span class="number">2</span>, <span class="string">&#x27;age&#x27;</span>] = <span class="number">30</span> <span class="comment"># ##################直接通过行列号来定位单元格，然后修改数据</span></span><br><span class="line">df.loc[<span class="number">0</span>,<span class="string">&#x27;age&#x27;</span>] = <span class="number">50</span></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     name  age</span></span><br><span class="line"><span class="string">0  Google   50</span></span><br><span class="line"><span class="string">1  Runoob   40</span></span><br><span class="line"><span class="string">2  Taobao   30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">df = pd.DataFrame(person)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> df.index:           <span class="comment">###########熟悉py语法，又熟悉了pandas库，要灵活运用一些小算法，灵活处理数据啦！！！</span></span><br><span class="line">    <span class="keyword">if</span> df.loc[x,<span class="string">&#x27;age&#x27;</span>]&gt;<span class="number">120</span>:</span><br><span class="line">        df.loc[x,<span class="string">&#x27;age&#x27;</span>]=<span class="number">120</span></span><br><span class="line">    <span class="keyword">if</span> df.loc[x,<span class="string">&#x27;age&#x27;</span>]&lt;<span class="number">0</span>:</span><br><span class="line">        df.loc[x,<span class="string">&#x27;age&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     name  age</span></span><br><span class="line"><span class="string">0  Google    1</span></span><br><span class="line"><span class="string">1  Runoob   40</span></span><br><span class="line"><span class="string">2  Taobao  120</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">## （2） 将有错误数据的一整行删除：</span></span><br><span class="line">df = pd.DataFrame(person)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> df.index:</span><br><span class="line">    <span class="keyword">if</span> (df.loc[x,<span class="string">&#x27;age&#x27;</span>]&gt;<span class="number">120</span>) <span class="keyword">or</span> (df.loc[x,<span class="string">&#x27;age&#x27;</span>]&lt;=<span class="number">0</span>):</span><br><span class="line">        df.drop(x,inplace=<span class="literal">True</span>) <span class="comment">#############################删除某一指定行的函数：df.drop()</span></span><br><span class="line"><span class="built_in">print</span>(df) <span class="comment">#只剩一行了。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     name  age</span></span><br><span class="line"><span class="string">1  Runoob   40</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 6 清洗重复数据。</span></span><br><span class="line">persons = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>],</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">23</span>],</span><br><span class="line">  <span class="string">&quot;hhh&quot;</span>:[<span class="number">30</span>,<span class="number">25</span>,<span class="number">25</span>,<span class="number">20</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(persons)</span><br><span class="line"><span class="comment">#（1） 查看重复元素               重复表示的是：一整行的数据都是重复的。</span></span><br><span class="line"><span class="built_in">print</span>(df.duplicated())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    False</span></span><br><span class="line"><span class="string">1    False</span></span><br><span class="line"><span class="string">2     True</span></span><br><span class="line"><span class="string">3    False</span></span><br><span class="line"><span class="string">dtype: bool</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.drop_duplicates())</span><br><span class="line"><span class="comment">#或：</span></span><br><span class="line">df.drop_duplicates(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0  Google   50   30</span></span><br><span class="line"><span class="string">1  Runoob   40   25</span></span><br><span class="line"><span class="string">3  Runoob   23   20</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">###上面dropna,drop,drop_duplicates 删除了行后，索引还是原来的，比如说删除了索引为2的行，则剩下的索引为：[0,1,3,4...]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#各个API在跳转到函数定义里面的各个参数都写得明明白白的，有的API还有例子，比如pd.drop()  很详细！！！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                       columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   A  B   C   D</span></span><br><span class="line"><span class="string">0  0  1   2   3</span></span><br><span class="line"><span class="string">1  4  5   6   7</span></span><br><span class="line"><span class="string">2  8  9  10  11</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.drop([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>],axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    C   D</span></span><br><span class="line"><span class="string">0   2   3</span></span><br><span class="line"><span class="string">1   6   7</span></span><br><span class="line"><span class="string">2  10  11</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.drop(columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]))<span class="comment">###跟上面的一样效果。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    C   D</span></span><br><span class="line"><span class="string">0   2   3</span></span><br><span class="line"><span class="string">1   6   7</span></span><br><span class="line"><span class="string">2  10  11</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">df.drop(index=[<span class="number">0</span>,<span class="number">2</span>],inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   A  B  C  D</span></span><br><span class="line"><span class="string">1  4  5  6  7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################排序：</span></span><br><span class="line"><span class="comment"># 1 按照索引。axis =0/1表示行或者列，ascending表示升序。</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;a&quot;</span>: [<span class="number">420</span>, <span class="number">380</span>, <span class="number">390</span>],</span><br><span class="line">  <span class="string">&quot;b&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data, index = [<span class="string">&quot;day1&quot;</span>, <span class="string">&quot;day2&quot;</span>, <span class="string">&quot;day3&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.sort_index(axis=<span class="number">0</span>,ascending=<span class="literal">False</span>,inplace=<span class="literal">False</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        a   b</span></span><br><span class="line"><span class="string">day3  390  45</span></span><br><span class="line"><span class="string">day2  380  40</span></span><br><span class="line"><span class="string">day1  420  50</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_index(axis=<span class="number">0</span>,ascending=<span class="literal">True</span>,inplace=<span class="literal">False</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        a   b</span></span><br><span class="line"><span class="string">day1  420  50</span></span><br><span class="line"><span class="string">day2  380  40</span></span><br><span class="line"><span class="string">day3  390  45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_index(axis=<span class="number">1</span>,ascending=<span class="literal">False</span>,inplace=<span class="literal">False</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">       b    a</span></span><br><span class="line"><span class="string">day1  50  420</span></span><br><span class="line"><span class="string">day2  40  380</span></span><br><span class="line"><span class="string">day3  45  390</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_index(axis=<span class="number">1</span>,ascending=<span class="literal">True</span>,inplace=<span class="literal">False</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        a   b</span></span><br><span class="line"><span class="string">day1  420  50</span></span><br><span class="line"><span class="string">day2  380  40</span></span><br><span class="line"><span class="string">day3  390  45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#2 按照某列的值排序！</span></span><br><span class="line"><span class="comment">#默认值： axis: int = 0,ascending: bool = True,inplace: bool = False</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(by=<span class="string">&#x27;a&#x27;</span>,ascending=<span class="literal">True</span>,inplace=<span class="literal">False</span>)) <span class="comment">#根据列a里面的值，升序进行排序！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########增加列</span></span><br><span class="line">df = df.reindex(columns = <span class="built_in">list</span>(df.columns)+[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        a   b   c   d   e</span></span><br><span class="line"><span class="string">day1  420  50 NaN NaN NaN</span></span><br><span class="line"><span class="string">day2  380  40 NaN NaN NaN</span></span><br><span class="line"><span class="string">day3  390  45 NaN NaN NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># df = df.reindex(indexs = list(df.index)+[&#x27;day4&#x27;,&#x27;day5&#x27;])   ###想要增加行，报错。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#赋值方法1：指定索引赋值</span></span><br><span class="line">df.loc[:,<span class="string">&#x27;c&#x27;</span>] = <span class="number">300</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        a   b    c   d   e</span></span><br><span class="line"><span class="string">day1  420  50  300 NaN NaN</span></span><br><span class="line"><span class="string">day2  380  40  300 NaN NaN</span></span><br><span class="line"><span class="string">day3  390  45  300 NaN NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#赋值方法2：填充函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;d&#x27;</span>].fillna(value=<span class="number">666</span>,inplace=<span class="literal">False</span>,))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">day1    666.0</span></span><br><span class="line"><span class="string">day2    666.0</span></span><br><span class="line"><span class="string">day3    666.0</span></span><br><span class="line"><span class="string">Name: d, dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.fillna(value=<span class="number">777</span>,inplace=<span class="literal">False</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        a   b    c      d      e</span></span><br><span class="line"><span class="string">day1  420  50  300  666.0  777.0</span></span><br><span class="line"><span class="string">day2  380  40  300  666.0  777.0</span></span><br><span class="line"><span class="string">day3  390  45  300  666.0  777.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.isnull())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          a      b      c     d     e</span></span><br><span class="line"><span class="string">day1  False  False  False  True  True</span></span><br><span class="line"><span class="string">day2  False  False  False  True  True</span></span><br><span class="line"><span class="string">day3  False  False  False  True  True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.isnull().<span class="built_in">sum</span>())  <span class="comment">#######统计每一列中空元素的数量。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    0</span></span><br><span class="line"><span class="string">b    0</span></span><br><span class="line"><span class="string">c    0</span></span><br><span class="line"><span class="string">d    3</span></span><br><span class="line"><span class="string">e    3</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按行相加</span></span><br><span class="line"><span class="built_in">print</span>(df.apply(np.<span class="built_in">sum</span>,axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">day1    770.0</span></span><br><span class="line"><span class="string">day2    720.0</span></span><br><span class="line"><span class="string">day3    735.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#按列相加</span></span><br><span class="line"><span class="built_in">print</span>(df.apply(np.<span class="built_in">sum</span>,axis=<span class="number">0</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    1190.0</span></span><br><span class="line"><span class="string">b     135.0</span></span><br><span class="line"><span class="string">c     900.0</span></span><br><span class="line"><span class="string">d       0.0</span></span><br><span class="line"><span class="string">e       0.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.apply(<span class="keyword">lambda</span> x:x.<span class="built_in">max</span>()-x.<span class="built_in">min</span>()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    40.0</span></span><br><span class="line"><span class="string">b    10.0</span></span><br><span class="line"><span class="string">c     0.0</span></span><br><span class="line"><span class="string">d     NaN</span></span><br><span class="line"><span class="string">e     NaN</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>,<span class="number">20</span>,size=(<span class="number">5</span>,<span class="number">4</span>)))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0   1   2   3</span></span><br><span class="line"><span class="string">0   9   2  15   3</span></span><br><span class="line"><span class="string">1   9  19  10   2</span></span><br><span class="line"><span class="string">2   7  18   5  18</span></span><br><span class="line"><span class="string">3  13   3   1  10</span></span><br><span class="line"><span class="string">4  15  10  13   3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#数据切片：</span></span><br><span class="line">df1 = df[:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0  12   4  7  6</span></span><br><span class="line"><span class="string">1  13  13  3  2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">df2 = df[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0   1   2  3</span></span><br><span class="line"><span class="string">2  11  15  15  7</span></span><br><span class="line"><span class="string">3  10   4   3  5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">df3 = df[<span class="number">4</span>:]</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0  1   2  3</span></span><br><span class="line"><span class="string">4  8  4  10  6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">new_df = [df1,df2,df3]</span><br><span class="line">df = pd.concat(new_df)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0   1   2   3</span></span><br><span class="line"><span class="string">0  10  18  12  14</span></span><br><span class="line"><span class="string">1  16   2  14  15</span></span><br><span class="line"><span class="string">2  15   4   3  16</span></span><br><span class="line"><span class="string">3  12   4  19   8</span></span><br><span class="line"><span class="string">4   4   2   6  10</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">t1 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;tommy&quot;</span>:[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>],</span><br><span class="line">    <span class="string">&quot;hobby&quot;</span>:[<span class="string">&quot;jogging&quot;</span>, <span class="string">&quot;reading&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">t2 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;tommy&quot;</span>:[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>],</span><br><span class="line">    <span class="string">&quot;info&quot;</span>:[<span class="string">&quot;shenzhen&quot;</span>,<span class="string">&quot;AI&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  tommy    hobby</span></span><br><span class="line"><span class="string">0     a  jogging</span></span><br><span class="line"><span class="string">1     b  reading</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  tommy      info</span></span><br><span class="line"><span class="string">0     a  shenzhen</span></span><br><span class="line"><span class="string">1     b        AI</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">new_df = pd.merge(t1,t2,on=<span class="string">&#x27;tommy&#x27;</span>)  <span class="comment">##############合并列，把Tommy这一列合并了（因为其相同），然后其他不同列加进来。concat上面是合并行。</span></span><br><span class="line"><span class="built_in">print</span>(new_df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  tommy    hobby      info</span></span><br><span class="line"><span class="string">0     a  jogging  shenzhen</span></span><br><span class="line"><span class="string">1     b  reading        AI</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############分组，Grouping</span></span><br><span class="line">df4 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;A&quot;</span> : [<span class="string">&quot;happy&quot;</span>, <span class="string">&quot;new&quot;</span>, <span class="string">&quot;year&quot;</span>, <span class="string">&quot;2021&quot;</span>,<span class="string">&quot;happy&quot;</span>, <span class="string">&quot;new&quot;</span>, <span class="string">&quot;year&quot;</span>, <span class="string">&quot;2021&quot;</span>],</span><br><span class="line">    <span class="string">&quot;B&quot;</span> : np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=<span class="number">8</span>),</span><br><span class="line">    <span class="string">&quot;C&quot;</span> : [<span class="string">&quot;新&quot;</span>, <span class="string">&quot;年&quot;</span>, <span class="string">&quot;快&quot;</span>, <span class="string">&quot;乐&quot;</span>, <span class="string">&quot;新&quot;</span>, <span class="string">&quot;年&quot;</span>, <span class="string">&quot;快&quot;</span>, <span class="string">&quot;乐&quot;</span>],</span><br><span class="line">    <span class="string">&quot;D&quot;</span> : np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=<span class="number">8</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(df4)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">       A  B  C  D</span></span><br><span class="line"><span class="string">0  happy  9  新  5</span></span><br><span class="line"><span class="string">1    new  3  年  3</span></span><br><span class="line"><span class="string">2   year  1  快  9</span></span><br><span class="line"><span class="string">3   2021  3  乐  8</span></span><br><span class="line"><span class="string">4  happy  7  新  1</span></span><br><span class="line"><span class="string">5    new  6  年  6</span></span><br><span class="line"><span class="string">6   year  2  快  2</span></span><br><span class="line"><span class="string">7   2021  1  乐  2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 对 C列 分组后求和 sum():意思是c有多少种，比如说有四种，分别是“新年快乐”四种，那其他的列跟据这四种相加起来就好啦。</span></span><br><span class="line"><span class="built_in">print</span>(df4.groupby(by=<span class="string">&quot;C&quot;</span>).<span class="built_in">sum</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    B   D</span></span><br><span class="line"><span class="string">C        </span></span><br><span class="line"><span class="string">乐   4  10</span></span><br><span class="line"><span class="string">年   9   9</span></span><br><span class="line"><span class="string">快   3  11</span></span><br><span class="line"><span class="string">新  16   6</span></span><br><span class="line"><span class="string">&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002928F15D630&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 A列，C列 进行分组求和</span></span><br><span class="line"><span class="built_in">print</span>(df4.groupby(by=[<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>]).<span class="built_in">sum</span>())  <span class="comment">######AC组合后的种类进行分组，其他列的相加起来！！！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          B   D</span></span><br><span class="line"><span class="string">A     C        </span></span><br><span class="line"><span class="string">2021  乐   4  10</span></span><br><span class="line"><span class="string">happy 新  16   6</span></span><br><span class="line"><span class="string">new   年   9   9</span></span><br><span class="line"><span class="string">year  快   3  11</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################时间序列：</span></span><br><span class="line"><span class="comment"># 案例1：</span></span><br><span class="line">time_data = pd.date_range(<span class="string">&#x27;1/1/2021&#x27;</span>, periods=<span class="number">100</span>, freq=<span class="string">&#x27;S&#x27;</span>) <span class="comment"># 按 秒</span></span><br><span class="line"><span class="built_in">print</span>(time_data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DatetimeIndex([&#x27;2021-01-01 00:00:00&#x27;, &#x27;2021-01-01 00:00:01&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:02&#x27;, &#x27;2021-01-01 00:00:03&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:04&#x27;, &#x27;2021-01-01 00:00:05&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:06&#x27;, &#x27;2021-01-01 00:00:07&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:08&#x27;, &#x27;2021-01-01 00:00:09&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:10&#x27;, &#x27;2021-01-01 00:00:11&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:12&#x27;, &#x27;2021-01-01 00:00:13&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:14&#x27;, &#x27;2021-01-01 00:00:15&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:16&#x27;, &#x27;2021-01-01 00:00:17&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:18&#x27;, &#x27;2021-01-01 00:00:19&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:20&#x27;, &#x27;2021-01-01 00:00:21&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:22&#x27;, &#x27;2021-01-01 00:00:23&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:24&#x27;, &#x27;2021-01-01 00:00:25&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:26&#x27;, &#x27;2021-01-01 00:00:27&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:28&#x27;, &#x27;2021-01-01 00:00:29&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:30&#x27;, &#x27;2021-01-01 00:00:31&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:32&#x27;, &#x27;2021-01-01 00:00:33&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:34&#x27;, &#x27;2021-01-01 00:00:35&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:36&#x27;, &#x27;2021-01-01 00:00:37&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:38&#x27;, &#x27;2021-01-01 00:00:39&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:40&#x27;, &#x27;2021-01-01 00:00:41&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:42&#x27;, &#x27;2021-01-01 00:00:43&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:44&#x27;, &#x27;2021-01-01 00:00:45&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:46&#x27;, &#x27;2021-01-01 00:00:47&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:48&#x27;, &#x27;2021-01-01 00:00:49&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:50&#x27;, &#x27;2021-01-01 00:00:51&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:52&#x27;, &#x27;2021-01-01 00:00:53&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:54&#x27;, &#x27;2021-01-01 00:00:55&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:56&#x27;, &#x27;2021-01-01 00:00:57&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:00:58&#x27;, &#x27;2021-01-01 00:00:59&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:00&#x27;, &#x27;2021-01-01 00:01:01&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:02&#x27;, &#x27;2021-01-01 00:01:03&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:04&#x27;, &#x27;2021-01-01 00:01:05&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:06&#x27;, &#x27;2021-01-01 00:01:07&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:08&#x27;, &#x27;2021-01-01 00:01:09&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:10&#x27;, &#x27;2021-01-01 00:01:11&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:12&#x27;, &#x27;2021-01-01 00:01:13&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:14&#x27;, &#x27;2021-01-01 00:01:15&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:16&#x27;, &#x27;2021-01-01 00:01:17&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:18&#x27;, &#x27;2021-01-01 00:01:19&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:20&#x27;, &#x27;2021-01-01 00:01:21&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:22&#x27;, &#x27;2021-01-01 00:01:23&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:24&#x27;, &#x27;2021-01-01 00:01:25&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:26&#x27;, &#x27;2021-01-01 00:01:27&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:28&#x27;, &#x27;2021-01-01 00:01:29&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:30&#x27;, &#x27;2021-01-01 00:01:31&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:32&#x27;, &#x27;2021-01-01 00:01:33&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:34&#x27;, &#x27;2021-01-01 00:01:35&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:36&#x27;, &#x27;2021-01-01 00:01:37&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-01-01 00:01:38&#x27;, &#x27;2021-01-01 00:01:39&#x27;],</span></span><br><span class="line"><span class="string">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;S&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据以上的时间数据，生成新的数据</span></span><br><span class="line"></span><br><span class="line">ts = pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">99</span>,size=<span class="built_in">len</span>(time_data)), index=time_data)</span><br><span class="line"><span class="built_in">print</span>(ts)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-01-01 00:00:00    52</span></span><br><span class="line"><span class="string">2021-01-01 00:00:01    93</span></span><br><span class="line"><span class="string">2021-01-01 00:00:02     1</span></span><br><span class="line"><span class="string">2021-01-01 00:00:03    12</span></span><br><span class="line"><span class="string">2021-01-01 00:00:04    67</span></span><br><span class="line"><span class="string">                       ..</span></span><br><span class="line"><span class="string">2021-01-01 00:01:35    73</span></span><br><span class="line"><span class="string">2021-01-01 00:01:36     6</span></span><br><span class="line"><span class="string">2021-01-01 00:01:37    67</span></span><br><span class="line"><span class="string">2021-01-01 00:01:38     9</span></span><br><span class="line"><span class="string">2021-01-01 00:01:39    19</span></span><br><span class="line"><span class="string">Freq: S, Length: 100, dtype: int32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(ts.resample(<span class="string">&quot;1Min&quot;</span>).<span class="built_in">sum</span>()) <span class="comment"># 统计每一分钟内的数据和</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-01-01 00:00:00    3181</span></span><br><span class="line"><span class="string">2021-01-01 00:01:00    2120</span></span><br><span class="line"><span class="string">Freq: T, dtype: int32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2：</span></span><br><span class="line">time_data2 = pd.date_range(<span class="string">&quot;1/1/2021&quot;</span>, periods=<span class="number">5</span>, freq=<span class="string">&#x27;M&#x27;</span>) <span class="comment"># 按 月</span></span><br><span class="line"><span class="built_in">print</span>(time_data2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DatetimeIndex([&#x27;2021-01-31&#x27;, &#x27;2021-02-28&#x27;, &#x27;2021-03-31&#x27;, &#x27;2021-04-30&#x27;,</span></span><br><span class="line"><span class="string">               &#x27;2021-05-31&#x27;],</span></span><br><span class="line"><span class="string">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;M&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 根据以上日期数据，生成新的数据</span></span><br><span class="line">ts2 = pd.Series(np.random.randint(<span class="number">1</span>,<span class="built_in">len</span>(time_data2)), index=time_data2)</span><br><span class="line"><span class="built_in">print</span>(ts2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-01-31    4</span></span><br><span class="line"><span class="string">2021-02-28    4</span></span><br><span class="line"><span class="string">2021-03-31    4</span></span><br><span class="line"><span class="string">2021-04-30    4</span></span><br><span class="line"><span class="string">2021-05-31    4</span></span><br><span class="line"><span class="string">Freq: M, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tp = ts2.to_period()  <span class="comment">######将后面的日期去掉。</span></span><br><span class="line"><span class="built_in">print</span>(tp)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-01    4</span></span><br><span class="line"><span class="string">2021-02    4</span></span><br><span class="line"><span class="string">2021-03    4</span></span><br><span class="line"><span class="string">2021-04    4</span></span><br><span class="line"><span class="string">2021-05    4</span></span><br><span class="line"><span class="string">Freq: M, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">df5 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : [<span class="number">18</span>, <span class="number">15</span>, <span class="number">27</span>, <span class="number">22</span>, <span class="number">20</span>, <span class="number">35</span>, <span class="number">29</span>, <span class="number">15</span>],</span><br><span class="line">    <span class="string">&quot;sex&quot;</span> : [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex</span></span><br><span class="line"><span class="string">0   18   m</span></span><br><span class="line"><span class="string">1   15   f</span></span><br><span class="line"><span class="string">2   27   m</span></span><br><span class="line"><span class="string">3   22   m</span></span><br><span class="line"><span class="string">4   20   f</span></span><br><span class="line"><span class="string">5   35   m</span></span><br><span class="line"><span class="string">6   29   f</span></span><br><span class="line"><span class="string">7   15   m</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 sex 列转换为 category 类型</span></span><br><span class="line"><span class="comment"># ##############################################################新增加一列</span></span><br><span class="line">df5[<span class="string">&#x27;new_sex&#x27;</span>] = df5[<span class="string">&#x27;sex&#x27;</span>].astype(<span class="string">&#x27;category&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex new_sex</span></span><br><span class="line"><span class="string">0   18   m       m</span></span><br><span class="line"><span class="string">1   15   f       f</span></span><br><span class="line"><span class="string">2   27   m       m</span></span><br><span class="line"><span class="string">3   22   m       m</span></span><br><span class="line"><span class="string">4   20   f       f</span></span><br><span class="line"><span class="string">5   35   m       m</span></span><br><span class="line"><span class="string">6   29   f       f</span></span><br><span class="line"><span class="string">7   15   m       m</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df5.dtypes) <span class="comment"># 查看类型</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">age           int64</span></span><br><span class="line"><span class="string">sex          object</span></span><br><span class="line"><span class="string">new_sex    category</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 分类类型数据值 , 将 &#x27;m&#x27;, &#x27;f&#x27;, 替换为 &#x27;aa&#x27;, &#x27;bb&#x27;</span></span><br><span class="line">df5[<span class="string">&#x27;new_sex&#x27;</span>].cat.categories = [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    m</span></span><br><span class="line"><span class="string">3   22   m       m</span></span><br><span class="line"><span class="string">4   20   f       f</span></span><br><span class="line"><span class="string">5   35   m       m</span></span><br><span class="line"><span class="string">6   29   f       f</span></span><br><span class="line"><span class="string">7   15   m       m</span></span><br><span class="line"><span class="string">age           int64</span></span><br><span class="line"><span class="string">sex          object</span></span><br><span class="line"><span class="string">new_sex    category</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">   age sex new_sex</span></span><br><span class="line"><span class="string">0   18   m      bb</span></span><br><span class="line"><span class="string">1   15   f      aa</span></span><br><span class="line"><span class="string">2   27   m      bb</span></span><br><span class="line"><span class="string">3   22   m      bb</span></span><br><span class="line"><span class="string">4   20   f      aa</span></span><br><span class="line"><span class="string">5   35   m      bb</span></span><br><span class="line"><span class="string">6   29   f      aa</span></span><br><span class="line"><span class="string">7   15   m      bb</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 new_sex 排序</span></span><br><span class="line"><span class="built_in">print</span>(df5.sort_values(by=<span class="string">&#x27;new_sex&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   age sex new_sex</span></span><br><span class="line"><span class="string">1   15   f      aa</span></span><br><span class="line"><span class="string">4   20   f      aa</span></span><br><span class="line"><span class="string">6   29   f      aa</span></span><br><span class="line"><span class="string">0   18   m      bb</span></span><br><span class="line"><span class="string">2   27   m      bb</span></span><br><span class="line"><span class="string">3   22   m      bb</span></span><br><span class="line"><span class="string">5   35   m      bb</span></span><br><span class="line"><span class="string">7   15   m      bb</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 new_sex 分组</span></span><br><span class="line"><span class="built_in">print</span>(df5.groupby(<span class="string">&#x27;new_sex&#x27;</span>).size()) <span class="comment">##列&#x27;new_sex&#x27;的种类’a‘含有的行数，以及包括’b‘的行数。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">new_sex</span></span><br><span class="line"><span class="string">aa    3</span></span><br><span class="line"><span class="string">bb    5</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####################还有一些高级pandas炒作，具体看机器学习实战，或者是“轻松写Pandas快速入门（二）。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandasJson</title>
    <link href="http://example.com/2022/06/01/pandasJson/"/>
    <id>http://example.com/2022/06/01/pandasJson/</id>
    <published>2022-06-01T08:50:29.000Z</published>
    <updated>2022-06-01T08:58:02.697Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">###############本文件描述了几种json相关数据以及json文件读取为DataFrame数据类型。</span></span><br><span class="line"><span class="comment"># ##############对比“3-DataFrame.py”文件里面的三种数据类型构建DataFrame文件，以及读取csv文件得到DataFrame文件哈，好多种。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 读取.json 文件</span></span><br><span class="line">df = pd.read_json(<span class="string">&#x27;sites.json&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     id    name             url  likes</span></span><br><span class="line"><span class="string">0  A001    菜鸟教程  www.runoob.com     61</span></span><br><span class="line"><span class="string">1  A002  Google  www.google.com    124</span></span><br><span class="line"><span class="string">2  A003      淘宝  www.taobao.com     45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 直接将JSON 字符串读取为DateFrame数据类型</span></span><br><span class="line">data =[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A001&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;菜鸟教程&quot;</span>,</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.runoob.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;likes&quot;</span>: <span class="number">61</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A002&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Google&quot;</span>,</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.google.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;likes&quot;</span>: <span class="number">124</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A003&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;淘宝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.taobao.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;likes&quot;</span>: <span class="number">45</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     id    name             url  likes</span></span><br><span class="line"><span class="string">0  A001    菜鸟教程  www.runoob.com     61</span></span><br><span class="line"><span class="string">1  A002  Google  www.google.com    124</span></span><br><span class="line"><span class="string">2  A003      淘宝  www.taobao.com     45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 3 直接将JSON 字典 读取为DateFrame数据类型</span></span><br><span class="line"><span class="comment"># 字典格式的 JSON</span></span><br><span class="line">s = &#123;</span><br><span class="line">    <span class="string">&quot;col1&quot;</span>:&#123;<span class="string">&quot;row1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;row2&quot;</span>:<span class="number">2</span>,<span class="string">&quot;row3&quot;</span>:<span class="number">3</span>&#125;,</span><br><span class="line">    <span class="string">&quot;col2&quot;</span>:&#123;<span class="string">&quot;row1&quot;</span>:<span class="string">&quot;x&quot;</span>,<span class="string">&quot;row2&quot;</span>:<span class="string">&quot;y&quot;</span>,<span class="string">&quot;row3&quot;</span>:<span class="string">&quot;z&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将JSON字典 转为 DataFrame</span></span><br><span class="line">df = pd.DataFrame(s)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      col1 col2</span></span><br><span class="line"><span class="string">row1     1    x</span></span><br><span class="line"><span class="string">row2     2    y</span></span><br><span class="line"><span class="string">row3     3    z</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 4 从 URL 中读取 JSON 数据：</span></span><br><span class="line">URL = <span class="string">&#x27;https://static.runoob.com/download/sites.json&#x27;</span></span><br><span class="line">df = pd.read_json(URL)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     id    name             url  likes</span></span><br><span class="line"><span class="string">0  A001    菜鸟教程  www.runoob.com     61</span></span><br><span class="line"><span class="string">1  A002  Google  www.google.com    124</span></span><br><span class="line"><span class="string">2  A003      淘宝  www.taobao.com     45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 5 读取内嵌的 JSON 数据                  ## 还有更复杂的json格式，这里就不细究了。</span></span><br><span class="line">df = pd.read_json(<span class="string">&#x27;nested_list.json&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          school_name   class                                                                     students</span></span><br><span class="line"><span class="string">0  ABC primary school  Year 1    &#123;&#x27;id&#x27;: &#x27;A001&#x27;, &#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;math&#x27;: 60, &#x27;physics&#x27;: 66, &#x27;chemistry&#x27;: 61&#125;</span></span><br><span class="line"><span class="string">1  ABC primary school  Year 1  &#123;&#x27;id&#x27;: &#x27;A002&#x27;, &#x27;name&#x27;: &#x27;James&#x27;, &#x27;math&#x27;: 89, &#x27;physics&#x27;: 76, &#x27;chemistry&#x27;: 51&#125;</span></span><br><span class="line"><span class="string">2  ABC primary school  Year 1  &#123;&#x27;id&#x27;: &#x27;A003&#x27;, &#x27;name&#x27;: &#x27;Jenny&#x27;, &#x27;math&#x27;: 79, &#x27;physics&#x27;: 90, &#x27;chemistry&#x27;: 78&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">###########因为：&quot;students&quot;: [],students 这一列里面有三元素，所以有三行哈。然后其他列只有一个元素的，直接copy到下面两行。而不是NaN，好奇怪。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 需要使用到 json_normalize() 方法将内嵌的数据完整的解析出来：</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;nested_list.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.loads(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展平数据</span></span><br><span class="line">df_nested_list = pd.json_normalize(data,record_path=[<span class="string">&#x27;students&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df_nested_list))</span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(df_nested_list)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     id   name  math  physics  chemistry</span></span><br><span class="line"><span class="string">0  A001    Tom    60       66         61</span></span><br><span class="line"><span class="string">1  A002  James    89       76         51</span></span><br><span class="line"><span class="string">2  A003  Jenny    79       90         78</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############把另外两个列也包含进来。</span></span><br><span class="line">df_nested_list = pd.json_normalize(</span><br><span class="line">    data,</span><br><span class="line">    record_path =[<span class="string">&#x27;students&#x27;</span>],</span><br><span class="line">    meta=[<span class="string">&#x27;school_name&#x27;</span>, <span class="string">&#x27;class&#x27;</span>]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(df_nested_list)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     id   name  math  physics  chemistry         school_name   class</span></span><br><span class="line"><span class="string">0  A001    Tom    60       66         61  ABC primary school  Year 1</span></span><br><span class="line"><span class="string">1  A002  James    89       76         51  ABC primary school  Year 1</span></span><br><span class="line"><span class="string">2  A003  Jenny    79       90         78  ABC primary school  Year 1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 接下来，让我们尝试读取更复杂的 JSON 数据，该数据嵌套了列表和字典，数据文件 nested_mix.json 如下：算了算了，不搞n那么复杂。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas-CVS文件</title>
    <link href="http://example.com/2022/06/01/pandas-CVS%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2022/06/01/pandas-CVS%E6%96%87%E4%BB%B6/</id>
    <published>2022-06-01T08:50:19.000Z</published>
    <updated>2022-06-01T08:58:49.460Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;nba.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df))</span><br><span class="line"><span class="comment">#&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(df)        <span class="comment">######################直接读取文件，返回的类型就是：DateFrame。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">              Name            Team  ...            College     Salary</span></span><br><span class="line"><span class="string">0    Avery Bradley  Boston Celtics  ...              Texas  7730337.0</span></span><br><span class="line"><span class="string">1      Jae Crowder  Boston Celtics  ...          Marquette  6796117.0</span></span><br><span class="line"><span class="string">2     John Holland  Boston Celtics  ...  Boston University        NaN</span></span><br><span class="line"><span class="string">3      R.J. Hunter  Boston Celtics  ...      Georgia State  1148640.0</span></span><br><span class="line"><span class="string">4    Jonas Jerebko  Boston Celtics  ...                NaN  5000000.0</span></span><br><span class="line"><span class="string">..             ...             ...  ...                ...        ...</span></span><br><span class="line"><span class="string">453   Shelvin Mack       Utah Jazz  ...             Butler  2433333.0</span></span><br><span class="line"><span class="string">454      Raul Neto       Utah Jazz  ...                NaN   900000.0</span></span><br><span class="line"><span class="string">455   Tibor Pleiss       Utah Jazz  ...                NaN  2900000.0</span></span><br><span class="line"><span class="string">456    Jeff Withey       Utah Jazz  ...             Kansas   947276.0</span></span><br><span class="line"><span class="string">457            NaN             NaN  ...                NaN        NaN</span></span><br><span class="line"><span class="string">[458 rows x 9 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string()) <span class="comment">#使用该函数，下面输出类型是一样的，但是会输出每一行每一列！！！  前面只显示前5行跟后5行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                         Name                    Team  Number Position   Age Height  Weight                College      Salary</span></span><br><span class="line"><span class="string">0               Avery Bradley          Boston Celtics     0.0       PG  25.0    6-2   180.0                  Texas   7730337.0</span></span><br><span class="line"><span class="string">1                 Jae Crowder          Boston Celtics    99.0       SF  25.0    6-6   235.0              Marquette   6796117.0</span></span><br><span class="line"><span class="string">2                John Holland          Boston Celtics    30.0       SG  27.0    6-5   205.0      Boston University         NaN</span></span><br><span class="line"><span class="string">3                 R.J. Hunter          Boston Celtics    28.0       SG  22.0    6-5   185.0          Georgia State   1148640.0</span></span><br><span class="line"><span class="string">4               Jonas Jerebko          Boston Celtics     8.0       PF  29.0   6-10   231.0                    NaN   5000000.0</span></span><br><span class="line"><span class="string">5                Amir Johnson          Boston Celtics    90.0       PF  29.0    6-9   240.0                    NaN  12000000.0</span></span><br><span class="line"><span class="string">6               Jordan Mickey          Boston Celtics    55.0       PF  21.0    6-8   235.0                    LSU   1170960.0</span></span><br><span class="line"><span class="string">7                Kelly Olynyk          Boston Celtics    41.0        C  25.0    7-0   238.0                Gonzaga   2165160.0</span></span><br><span class="line"><span class="string">8                Terry Rozier          Boston Celtics    12.0       PG  22.0    6-2   190.0             Louisville   1824360.0</span></span><br><span class="line"><span class="string">9                Marcus Smart          Boston Celtics    36.0       PG  22.0    6-4   220.0         Oklahoma State   3431040.0</span></span><br><span class="line"><span class="string">10            Jared Sullinger          Boston Celtics     7.0        C  24.0    6-9   260.0             Ohio State   2569260.0</span></span><br><span class="line"><span class="string">11              Isaiah Thomas          Boston Celtics     4.0       PG  27.0    5-9   185.0             Washington   6912869.0</span></span><br><span class="line"><span class="string">12                Evan Turner          Boston Celtics    11.0       SG  27.0    6-7   220.0             Ohio State   3425510.0</span></span><br><span class="line"><span class="string">13                James Young          Boston Celtics    13.0       SG  20.0    6-6   215.0               Kentucky   1749840.0</span></span><br><span class="line"><span class="string">14               Tyler Zeller          Boston Celtics    44.0        C  26.0    7-0   253.0         North Carolina   2616975.0</span></span><br><span class="line"><span class="string">15           Bojan Bogdanovic           Brooklyn Nets    44.0       SG  27.0    6-8   216.0                    NaN   3425510.0</span></span><br><span class="line"><span class="string">16               Markel Brown           Brooklyn Nets    22.0       SG  24.0    6-3   190.0         Oklahoma State    845059.0</span></span><br><span class="line"><span class="string">17            Wayne Ellington           Brooklyn Nets    21.0       SG  28.0    6-4   200.0         North Carolina   1500000.0</span></span><br><span class="line"><span class="string">18    Rondae Hollis-Jefferson           Brooklyn Nets    24.0       SG  21.0    6-7   220.0                Arizona   1335480.0</span></span><br><span class="line"><span class="string">19               Jarrett Jack           Brooklyn Nets     2.0       PG  32.0    6-3   200.0           Georgia Tech   6300000.0</span></span><br><span class="line"><span class="string">20             Sergey Karasev           Brooklyn Nets    10.0       SG  22.0    6-7   208.0                    NaN   1599840.0</span></span><br><span class="line"><span class="string">21            Sean Kilpatrick           Brooklyn Nets     6.0       SG  26.0    6-4   219.0             Cincinnati    134215.0</span></span><br><span class="line"><span class="string">22               Shane Larkin           Brooklyn Nets     0.0       PG  23.0   5-11   175.0             Miami (FL)   1500000.0</span></span><br><span class="line"><span class="string">23                Brook Lopez           Brooklyn Nets    11.0        C  28.0    7-0   275.0               Stanford  19689000.0</span></span><br><span class="line"><span class="string">24           Chris McCullough           Brooklyn Nets     1.0       PF  21.0   6-11   200.0               Syracuse   1140240.0</span></span><br><span class="line"><span class="string">25                Willie Reed           Brooklyn Nets    33.0       PF  26.0   6-10   220.0            Saint Louis    947276.0</span></span><br><span class="line"><span class="string">26            Thomas Robinson           Brooklyn Nets    41.0       PF  25.0   6-10   237.0                 Kansas    981348.0</span></span><br><span class="line"><span class="string">27                 Henry Sims           Brooklyn Nets    14.0        C  26.0   6-10   248.0             Georgetown    947276.0</span></span><br><span class="line"><span class="string">28               Donald Sloan           Brooklyn Nets    15.0       PG  28.0    6-3   205.0              Texas A&amp;M    947276.0</span></span><br><span class="line"><span class="string">29             Thaddeus Young           Brooklyn Nets    30.0       PF  27.0    6-8   221.0           Georgia Tech  11235955.0</span></span><br><span class="line"><span class="string">30              Arron Afflalo         New York Knicks     4.0       SG  30.0    6-5   210.0                   UCLA   8000000.0</span></span><br><span class="line"><span class="string">31               Lou Amundson         New York Knicks    17.0       PF  33.0    6-9   220.0                   UNLV   1635476.0</span></span><br><span class="line"><span class="string">32     Thanasis Antetokounmpo         New York Knicks    43.0       SF  23.0    6-7   205.0                    NaN     30888.0</span></span><br><span class="line"><span class="string">33            Carmelo Anthony         New York Knicks     7.0       SF  32.0    6-8   240.0               Syracuse  22875000.0</span></span><br><span class="line"><span class="string">34              Jose Calderon         New York Knicks     3.0       PG  34.0    6-3   200.0                    NaN   7402812.0</span></span><br><span class="line"><span class="string">35           Cleanthony Early         New York Knicks    11.0       SF  25.0    6-8   210.0          Wichita State    845059.0</span></span><br><span class="line"><span class="string">36          Langston Galloway         New York Knicks     2.0       SG  24.0    6-2   200.0         Saint Joseph&#x27;s    845059.0</span></span><br><span class="line"><span class="string">37               Jerian Grant         New York Knicks    13.0       PG  23.0    6-4   195.0             Notre Dame   1572360.0</span></span><br><span class="line"><span class="string">38                Robin Lopez         New York Knicks     8.0        C  28.0    7-0   255.0               Stanford  12650000.0</span></span><br><span class="line"><span class="string">39               Kyle O&#x27;Quinn         New York Knicks     9.0       PF  26.0   6-10   250.0          Norfolk State   3750000.0</span></span><br><span class="line"><span class="string">40         Kristaps Porzingis         New York Knicks     6.0       PF  20.0    7-3   240.0                    NaN   4131720.0</span></span><br><span class="line"><span class="string">41             Kevin Seraphin         New York Knicks     1.0        C  26.0   6-10   278.0                    NaN   2814000.0</span></span><br><span class="line"><span class="string">42               Lance Thomas         New York Knicks    42.0       SF  28.0    6-8   235.0                   Duke   1636842.0</span></span><br><span class="line"><span class="string">43              Sasha Vujacic         New York Knicks    18.0       SG  32.0    6-7   195.0                    NaN    947276.0</span></span><br><span class="line"><span class="string">44           Derrick Williams         New York Knicks    23.0       PF  25.0    6-8   240.0                Arizona   4000000.0</span></span><br><span class="line"><span class="string">45                Tony Wroten         New York Knicks     5.0       SG  23.0    6-6   205.0             Washington    167406.0</span></span><br><span class="line"><span class="string">46                Elton Brand      Philadelphia 76ers    42.0       PF  37.0    6-9   254.0                   Duke         NaN</span></span><br><span class="line"><span class="string">47              Isaiah Canaan      Philadelphia 76ers     0.0       PG  25.0    6-0   201.0           Murray State    947276.0</span></span><br><span class="line"><span class="string">48           Robert Covington      Philadelphia 76ers    33.0       SF  25.0    6-9   215.0        Tennessee State   1000000.0</span></span><br><span class="line"><span class="string">49                Joel Embiid      Philadelphia 76ers    21.0        C  22.0    7-0   250.0                 Kansas   4626960.0</span></span><br><span class="line"><span class="string">50               Jerami Grant      Philadelphia 76ers    39.0       SF  22.0    6-8   210.0               Syracuse    845059.0</span></span><br><span class="line"><span class="string">51             Richaun Holmes      Philadelphia 76ers    22.0       PF  22.0   6-10   245.0          Bowling Green   1074169.0</span></span><br><span class="line"><span class="string">52                Carl Landry      Philadelphia 76ers     7.0       PF  32.0    6-9   248.0                 Purdue   6500000.0</span></span><br><span class="line"><span class="string">53           Kendall Marshall      Philadelphia 76ers     5.0       PG  24.0    6-4   200.0         North Carolina   2144772.0</span></span><br><span class="line"><span class="string">54             T.J. McConnell      Philadelphia 76ers    12.0       PG  24.0    6-2   200.0                Arizona    525093.0</span></span><br><span class="line"><span class="string">55               Nerlens Noel      Philadelphia 76ers     4.0       PF  22.0   6-11   228.0               Kentucky   3457800.0</span></span><br><span class="line"><span class="string">56              Jahlil Okafor      Philadelphia 76ers     8.0        C  20.0   6-11   275.0                   Duke   4582680.0</span></span><br><span class="line"><span class="string">57                  Ish Smith      Philadelphia 76ers     1.0       PG  27.0    6-0   175.0            Wake Forest    947276.0</span></span><br><span class="line"><span class="string">58               Nik Stauskas      Philadelphia 76ers    11.0       SG  22.0    6-6   205.0               Michigan   2869440.0</span></span><br><span class="line"><span class="string">59            Hollis Thompson      Philadelphia 76ers    31.0       SG  25.0    6-8   206.0             Georgetown    947276.0</span></span><br><span class="line"><span class="string">60             Christian Wood      Philadelphia 76ers    35.0       PF  20.0   6-11   220.0                   UNLV    525093.0</span></span><br><span class="line"><span class="string">61            Bismack Biyombo         Toronto Raptors     8.0        C  23.0    6-9   245.0                    NaN   2814000.0</span></span><br><span class="line"><span class="string">62              Bruno Caboclo         Toronto Raptors    20.0       SF  20.0    6-9   205.0                    NaN   1524000.0</span></span><br><span class="line"><span class="string">63            DeMarre Carroll         Toronto Raptors     5.0       SF  29.0    6-8   212.0               Missouri  13600000.0</span></span><br><span class="line"><span class="string">64              DeMar DeRozan         Toronto Raptors    10.0       SG  26.0    6-7   220.0                    USC  10050000.0</span></span><br><span class="line"><span class="string">65              James Johnson         Toronto Raptors     3.0       PF  29.0    6-9   250.0            Wake Forest   2500000.0</span></span><br><span class="line"><span class="string">66                Cory Joseph         Toronto Raptors     6.0       PG  24.0    6-3   190.0                  Texas   7000000.0</span></span><br><span class="line"><span class="string">67                 Kyle Lowry         Toronto Raptors     7.0       PG  30.0    6-0   205.0              Villanova  12000000.0</span></span><br><span class="line"><span class="string">68             Lucas Nogueira         Toronto Raptors    92.0        C  23.0    7-0   220.0                    NaN   1842000.0</span></span><br><span class="line"><span class="string">69          Patrick Patterson         Toronto Raptors    54.0       PF  27.0    6-9   235.0               Kentucky   6268675.0</span></span><br><span class="line"><span class="string">70              Norman Powell         Toronto Raptors    24.0       SG  23.0    6-4   215.0                   UCLA    650000.0</span></span><br><span class="line"><span class="string">71              Terrence Ross         Toronto Raptors    31.0       SF  25.0    6-7   195.0             Washington   3553917.0</span></span><br><span class="line"><span class="string">72                 Luis Scola         Toronto Raptors     4.0       PF  36.0    6-9   240.0                    NaN   2900000.0</span></span><br><span class="line"><span class="string">73             Jason Thompson         Toronto Raptors     1.0       PF  29.0   6-11   250.0                  Rider    245177.0</span></span><br><span class="line"><span class="string">74          Jonas Valanciunas         Toronto Raptors    17.0        C  24.0    7-0   255.0                    NaN   4660482.0</span></span><br><span class="line"><span class="string">75               Delon Wright         Toronto Raptors    55.0       PG  24.0    6-5   190.0                   Utah   1509360.0</span></span><br><span class="line"><span class="string">76            Leandro Barbosa   Golden State Warriors    19.0       SG  33.0    6-3   194.0                    NaN   2500000.0</span></span><br><span class="line"><span class="string">77            Harrison Barnes   Golden State Warriors    40.0       SF  24.0    6-8   225.0         North Carolina   3873398.0</span></span><br><span class="line"><span class="string">78               Andrew Bogut   Golden State Warriors    12.0        C  31.0    7-0   260.0                   Utah  13800000.0</span></span><br><span class="line"><span class="string">79                  Ian Clark   Golden State Warriors    21.0       SG  25.0    6-3   175.0                Belmont    947276.0</span></span><br><span class="line"><span class="string">80              Stephen Curry   Golden State Warriors    30.0       PG  28.0    6-3   190.0               Davidson  11370786.0</span></span><br><span class="line"><span class="string">81               Festus Ezeli   Golden State Warriors    31.0        C  26.0   6-11   265.0             Vanderbilt   2008748.0</span></span><br><span class="line"><span class="string">82             Draymond Green   Golden State Warriors    23.0       PF  26.0    6-7   230.0         Michigan State  14260870.0</span></span><br><span class="line"><span class="string">83             Andre Iguodala   Golden State Warriors     9.0       SF  32.0    6-6   215.0                Arizona  11710456.0</span></span><br><span class="line"><span class="string">84           Shaun Livingston   Golden State Warriors    34.0       PG  30.0    6-7   192.0                    NaN   5543725.0</span></span><br><span class="line"><span class="string">85               Kevon Looney   Golden State Warriors    36.0       SF  20.0    6-9   220.0                   UCLA   1131960.0</span></span><br><span class="line"><span class="string">86       James Michael McAdoo   Golden State Warriors    20.0       SF  23.0    6-9   240.0         North Carolina    845059.0</span></span><br><span class="line"><span class="string">87               Brandon Rush   Golden State Warriors     4.0       SF  30.0    6-6   220.0                 Kansas   1270964.0</span></span><br><span class="line"><span class="string">88          Marreese Speights   Golden State Warriors     5.0        C  28.0   6-10   255.0                Florida   3815000.0</span></span><br><span class="line"><span class="string">89              Klay Thompson   Golden State Warriors    11.0       SG  26.0    6-7   215.0       Washington State  15501000.0</span></span><br><span class="line"><span class="string">90           Anderson Varejao   Golden State Warriors    18.0       PF  33.0   6-11   273.0                    NaN    289755.0</span></span><br><span class="line"><span class="string">91               Cole Aldrich    Los Angeles Clippers    45.0        C  27.0   6-11   250.0                 Kansas   1100602.0</span></span><br><span class="line"><span class="string">92                 Jeff Ayres    Los Angeles Clippers    19.0       PF  29.0    6-9   250.0          Arizona State    111444.0</span></span><br><span class="line"><span class="string">93             Jamal Crawford    Los Angeles Clippers    11.0       SG  36.0    6-5   195.0               Michigan   5675000.0</span></span><br><span class="line"><span class="string">94             Branden Dawson    Los Angeles Clippers    22.0       SF  23.0    6-6   225.0         Michigan State    525093.0</span></span><br><span class="line"><span class="string">95                 Jeff Green    Los Angeles Clippers     8.0       SF  29.0    6-9   235.0             Georgetown   9650000.0</span></span><br><span class="line"><span class="string">96              Blake Griffin    Los Angeles Clippers    32.0       PF  27.0   6-10   251.0               Oklahoma  18907726.0</span></span><br><span class="line"><span class="string">97             Wesley Johnson    Los Angeles Clippers    33.0       SF  28.0    6-7   215.0               Syracuse   1100602.0</span></span><br><span class="line"><span class="string">98             DeAndre Jordan    Los Angeles Clippers     6.0        C  27.0   6-11   265.0              Texas A&amp;M  19689000.0</span></span><br><span class="line"><span class="string">99   Luc Richard Mbah a Moute    Los Angeles Clippers    12.0       PF  29.0    6-8   230.0                   UCLA    947276.0</span></span><br><span class="line"><span class="string">100                Chris Paul    Los Angeles Clippers     3.0       PG  31.0    6-0   175.0            Wake Forest  21468695.0</span></span><br><span class="line"><span class="string">101               Paul Pierce    Los Angeles Clippers    34.0       SF  38.0    6-7   235.0                 Kansas   3376000.0</span></span><br><span class="line"><span class="string">102            Pablo Prigioni    Los Angeles Clippers     9.0       PG  39.0    6-3   185.0                    NaN    947726.0</span></span><br><span class="line"><span class="string">103                 JJ Redick    Los Angeles Clippers     4.0       SG  31.0    6-4   190.0                   Duke   7085000.0</span></span><br><span class="line"><span class="string">104             Austin Rivers    Los Angeles Clippers    25.0       PG  23.0    6-4   200.0                   Duke   3110796.0</span></span><br><span class="line"><span class="string">105               C.J. Wilcox    Los Angeles Clippers    30.0       SG  25.0    6-5   195.0             Washington   1159680.0</span></span><br><span class="line"><span class="string">106              Brandon Bass      Los Angeles Lakers     2.0       PF  31.0    6-8   250.0                    LSU   3000000.0</span></span><br><span class="line"><span class="string">107               Tarik Black      Los Angeles Lakers    28.0        C  24.0    6-9   250.0                 Kansas    845059.0</span></span><br><span class="line"><span class="string">108             Anthony Brown      Los Angeles Lakers     3.0       SF  23.0    6-7   210.0               Stanford    700000.0</span></span><br><span class="line"><span class="string">109               Kobe Bryant      Los Angeles Lakers    24.0       SF  37.0    6-6   212.0                    NaN  25000000.0</span></span><br><span class="line"><span class="string">110           Jordan Clarkson      Los Angeles Lakers     6.0       PG  24.0    6-5   194.0               Missouri    845059.0</span></span><br><span class="line"><span class="string">111               Roy Hibbert      Los Angeles Lakers    17.0        C  29.0    7-2   270.0             Georgetown  15592217.0</span></span><br><span class="line"><span class="string">112           Marcelo Huertas      Los Angeles Lakers     9.0       PG  33.0    6-3   200.0                    NaN    525093.0</span></span><br><span class="line"><span class="string">113                Ryan Kelly      Los Angeles Lakers     4.0       PF  25.0   6-11   230.0                   Duke   1724250.0</span></span><br><span class="line"><span class="string">114           Larry Nance Jr.      Los Angeles Lakers     7.0       PF  23.0    6-9   230.0                Wyoming   1155600.0</span></span><br><span class="line"><span class="string">115             Julius Randle      Los Angeles Lakers    30.0       PF  21.0    6-9   250.0               Kentucky   3132240.0</span></span><br><span class="line"><span class="string">116          D&#x27;Angelo Russell      Los Angeles Lakers     1.0       PG  20.0    6-5   195.0             Ohio State   5103120.0</span></span><br><span class="line"><span class="string">117              Robert Sacre      Los Angeles Lakers    50.0        C  27.0    7-0   270.0                Gonzaga    981348.0</span></span><br><span class="line"><span class="string">118            Louis Williams      Los Angeles Lakers    23.0       SG  29.0    6-1   175.0                    NaN   7000000.0</span></span><br><span class="line"><span class="string">119         Metta World Peace      Los Angeles Lakers    37.0       SF  36.0    6-7   260.0             St. John&#x27;s    947276.0</span></span><br><span class="line"><span class="string">120                Nick Young      Los Angeles Lakers     0.0       SF  31.0    6-7   210.0                    USC   5219169.0</span></span><br><span class="line"><span class="string">121              Eric Bledsoe            Phoenix Suns     2.0       PG  26.0    6-1   190.0               Kentucky  13500000.0</span></span><br><span class="line"><span class="string">122              Devin Booker            Phoenix Suns     1.0       SG  19.0    6-6   206.0               Kentucky   2127840.0</span></span><br><span class="line"><span class="string">123            Chase Budinger            Phoenix Suns    10.0       SF  28.0    6-7   209.0                Arizona    206192.0</span></span><br><span class="line"><span class="string">124            Tyson Chandler            Phoenix Suns     4.0        C  33.0    7-1   240.0                    NaN  13000000.0</span></span><br><span class="line"><span class="string">125            Archie Goodwin            Phoenix Suns    20.0       SG  21.0    6-5   200.0               Kentucky   1160160.0</span></span><br><span class="line"><span class="string">126              John Jenkins            Phoenix Suns    23.0       SG  25.0    6-4   215.0             Vanderbilt    981348.0</span></span><br><span class="line"><span class="string">127            Brandon Knight            Phoenix Suns     3.0       PG  24.0    6-3   189.0               Kentucky  13500000.0</span></span><br><span class="line"><span class="string">128                  Alex Len            Phoenix Suns    21.0        C  22.0    7-1   260.0               Maryland   3807120.0</span></span><br><span class="line"><span class="string">129                 Jon Leuer            Phoenix Suns    30.0       PF  27.0   6-10   228.0              Wisconsin   1035000.0</span></span><br><span class="line"><span class="string">130              Phil Pressey            Phoenix Suns    25.0       PG  25.0   5-11   175.0               Missouri     55722.0</span></span><br><span class="line"><span class="string">131              Ronnie Price            Phoenix Suns    14.0       PG  32.0    6-2   190.0            Utah Valley    947276.0</span></span><br><span class="line"><span class="string">132           Mirza Teletovic            Phoenix Suns    35.0       PF  30.0    6-9   242.0                    NaN   5500000.0</span></span><br><span class="line"><span class="string">133               P.J. Tucker            Phoenix Suns    17.0       SF  31.0    6-6   245.0                  Texas   5500000.0</span></span><br><span class="line"><span class="string">134               T.J. Warren            Phoenix Suns    12.0       SF  22.0    6-8   230.0   North Carolina State   2041080.0</span></span><br><span class="line"><span class="string">135             Alan Williams            Phoenix Suns    15.0        C  23.0    6-8   260.0       UC Santa Barbara     83397.0</span></span><br><span class="line"><span class="string">136                Quincy Acy        Sacramento Kings    13.0       SF  25.0    6-7   240.0                 Baylor    981348.0</span></span><br><span class="line"><span class="string">137            James Anderson        Sacramento Kings     5.0       SG  27.0    6-6   213.0         Oklahoma State   1015421.0</span></span><br><span class="line"><span class="string">138           Marco Belinelli        Sacramento Kings     3.0       SG  30.0    6-5   210.0                    NaN   6060606.0</span></span><br><span class="line"><span class="string">139              Caron Butler        Sacramento Kings    31.0       SF  36.0    6-7   228.0            Connecticut   1449187.0</span></span><br><span class="line"><span class="string">140               Omri Casspi        Sacramento Kings    18.0       SF  27.0    6-9   225.0                    NaN   2836186.0</span></span><br><span class="line"><span class="string">141       Willie Cauley-Stein        Sacramento Kings     0.0        C  22.0    7-0   240.0               Kentucky   3398280.0</span></span><br><span class="line"><span class="string">142           Darren Collison        Sacramento Kings     7.0       PG  28.0    6-0   175.0                   UCLA   5013559.0</span></span><br><span class="line"><span class="string">143          DeMarcus Cousins        Sacramento Kings    15.0        C  25.0   6-11   270.0               Kentucky  15851950.0</span></span><br><span class="line"><span class="string">144                Seth Curry        Sacramento Kings    30.0       SG  25.0    6-2   185.0                   Duke    947276.0</span></span><br><span class="line"><span class="string">145                Duje Dukan        Sacramento Kings    26.0       PF  24.0    6-9   220.0              Wisconsin    525093.0</span></span><br><span class="line"><span class="string">146                  Rudy Gay        Sacramento Kings     8.0       SF  29.0    6-8   230.0            Connecticut  12403101.0</span></span><br><span class="line"><span class="string">147              Kosta Koufos        Sacramento Kings    41.0        C  27.0    7-0   265.0             Ohio State   7700000.0</span></span><br><span class="line"><span class="string">148              Ben McLemore        Sacramento Kings    23.0       SG  23.0    6-5   195.0                 Kansas   3156600.0</span></span><br><span class="line"><span class="string">149             Eric Moreland        Sacramento Kings    25.0       PF  24.0   6-10   238.0           Oregon State    845059.0</span></span><br><span class="line"><span class="string">150               Rajon Rondo        Sacramento Kings     9.0       PG  30.0    6-1   186.0               Kentucky   9500000.0</span></span><br><span class="line"><span class="string">151          Cameron Bairstow           Chicago Bulls    41.0       PF  25.0    6-9   250.0             New Mexico    845059.0</span></span><br><span class="line"><span class="string">152              Aaron Brooks           Chicago Bulls     0.0       PG  31.0    6-0   161.0                 Oregon   2250000.0</span></span><br><span class="line"><span class="string">153              Jimmy Butler           Chicago Bulls    21.0       SG  26.0    6-7   220.0              Marquette  16407500.0</span></span><br><span class="line"><span class="string">154             Mike Dunleavy           Chicago Bulls    34.0       SG  35.0    6-9   230.0                   Duke   4500000.0</span></span><br><span class="line"><span class="string">155         Cristiano Felicio           Chicago Bulls     6.0       PF  23.0   6-10   275.0                    NaN    525093.0</span></span><br><span class="line"><span class="string">156                 Pau Gasol           Chicago Bulls    16.0        C  35.0    7-0   250.0                    NaN   7448760.0</span></span><br><span class="line"><span class="string">157                Taj Gibson           Chicago Bulls    22.0       PF  30.0    6-9   225.0                    USC   8500000.0</span></span><br><span class="line"><span class="string">158            Justin Holiday           Chicago Bulls     7.0       SG  27.0    6-6   185.0             Washington    947276.0</span></span><br><span class="line"><span class="string">159            Doug McDermott           Chicago Bulls     3.0       SF  24.0    6-8   225.0              Creighton   2380440.0</span></span><br><span class="line"><span class="string">160            Nikola Mirotic           Chicago Bulls    44.0       PF  25.0   6-10   220.0                    NaN   5543725.0</span></span><br><span class="line"><span class="string">161             E&#x27;Twaun Moore           Chicago Bulls    55.0       SG  27.0    6-4   191.0                 Purdue   1015421.0</span></span><br><span class="line"><span class="string">162               Joakim Noah           Chicago Bulls    13.0        C  31.0   6-11   232.0                Florida  13400000.0</span></span><br><span class="line"><span class="string">163              Bobby Portis           Chicago Bulls     5.0       PF  21.0   6-11   230.0               Arkansas   1391160.0</span></span><br><span class="line"><span class="string">164              Derrick Rose           Chicago Bulls     1.0       PG  27.0    6-3   190.0                Memphis  20093064.0</span></span><br><span class="line"><span class="string">165                Tony Snell           Chicago Bulls    20.0       SF  24.0    6-7   200.0             New Mexico   1535880.0</span></span><br><span class="line"><span class="string">166       Matthew Dellavedova     Cleveland Cavaliers     8.0       PG  25.0    6-4   198.0           Saint Mary&#x27;s   1147276.0</span></span><br><span class="line"><span class="string">167             Channing Frye     Cleveland Cavaliers     9.0       PF  33.0   6-11   255.0                Arizona   8193029.0</span></span><br><span class="line"><span class="string">168              Kyrie Irving     Cleveland Cavaliers     2.0       PG  24.0    6-3   193.0                   Duke  16407501.0</span></span><br><span class="line"><span class="string">169              LeBron James     Cleveland Cavaliers    23.0       SF  31.0    6-8   250.0                    NaN  22970500.0</span></span><br><span class="line"><span class="string">170         Richard Jefferson     Cleveland Cavaliers    24.0       SF  35.0    6-7   233.0                Arizona    947276.0</span></span><br><span class="line"><span class="string">171             Dahntay Jones     Cleveland Cavaliers    30.0       SG  35.0    6-6   225.0                   Duke         NaN</span></span><br><span class="line"><span class="string">172               James Jones     Cleveland Cavaliers     1.0       SG  35.0    6-8   218.0             Miami (FL)    947276.0</span></span><br><span class="line"><span class="string">173                Sasha Kaun     Cleveland Cavaliers    14.0        C  31.0   6-11   260.0                 Kansas   1276000.0</span></span><br><span class="line"><span class="string">174                Kevin Love     Cleveland Cavaliers     0.0       PF  27.0   6-10   251.0                   UCLA  19689000.0</span></span><br><span class="line"><span class="string">175              Jordan McRae     Cleveland Cavaliers    12.0       SG  25.0    6-5   179.0              Tennessee    111196.0</span></span><br><span class="line"><span class="string">176            Timofey Mozgov     Cleveland Cavaliers    20.0        C  29.0    7-1   275.0                    NaN   4950000.0</span></span><br><span class="line"><span class="string">177             Iman Shumpert     Cleveland Cavaliers     4.0       SG  25.0    6-5   220.0           Georgia Tech   8988765.0</span></span><br><span class="line"><span class="string">178                J.R. Smith     Cleveland Cavaliers     5.0       SG  30.0    6-6   225.0                    NaN   5000000.0</span></span><br><span class="line"><span class="string">179          Tristan Thompson     Cleveland Cavaliers    13.0        C  25.0    6-9   238.0                  Texas  14260870.0</span></span><br><span class="line"><span class="string">180               Mo Williams     Cleveland Cavaliers    52.0       PG  33.0    6-1   198.0                Alabama   2100000.0</span></span><br><span class="line"><span class="string">181              Joel Anthony         Detroit Pistons    50.0        C  33.0    6-9   245.0                   UNLV   2500000.0</span></span><br><span class="line"><span class="string">182               Aron Baynes         Detroit Pistons    12.0        C  29.0   6-10   260.0       Washington State   6500000.0</span></span><br><span class="line"><span class="string">183               Steve Blake         Detroit Pistons    22.0       PG  36.0    6-3   172.0               Maryland   2170465.0</span></span><br><span class="line"><span class="string">184             Lorenzo Brown         Detroit Pistons    17.0       PG  25.0    6-5   189.0   North Carolina State    111444.0</span></span><br><span class="line"><span class="string">185            Reggie Bullock         Detroit Pistons    25.0       SF  25.0    6-7   205.0         North Carolina   1252440.0</span></span><br><span class="line"><span class="string">186  Kentavious Caldwell-Pope         Detroit Pistons     5.0       SG  23.0    6-5   205.0                Georgia   2891760.0</span></span><br><span class="line"><span class="string">187         Spencer Dinwiddie         Detroit Pistons     8.0       PG  23.0    6-6   200.0               Colorado    845059.0</span></span><br><span class="line"><span class="string">188            Andre Drummond         Detroit Pistons     0.0        C  22.0   6-11   279.0            Connecticut   3272091.0</span></span><br><span class="line"><span class="string">189             Tobias Harris         Detroit Pistons    34.0       SF  23.0    6-9   235.0              Tennessee  16000000.0</span></span><br><span class="line"><span class="string">190           Darrun Hilliard         Detroit Pistons     6.0       SF  23.0    6-6   205.0              Villanova    600000.0</span></span><br><span class="line"><span class="string">191            Reggie Jackson         Detroit Pistons     1.0       PG  26.0    6-3   208.0         Boston College  13913044.0</span></span><br><span class="line"><span class="string">192           Stanley Johnson         Detroit Pistons     3.0       SF  20.0    6-7   245.0                Arizona   2841960.0</span></span><br><span class="line"><span class="string">193               Jodie Meeks         Detroit Pistons    20.0       SG  28.0    6-4   210.0               Kentucky   6270000.0</span></span><br><span class="line"><span class="string">194             Marcus Morris         Detroit Pistons    13.0       PF  26.0    6-9   235.0                 Kansas   5000000.0</span></span><br><span class="line"><span class="string">195          Anthony Tolliver         Detroit Pistons    43.0       PF  31.0    6-8   240.0              Creighton   3000000.0</span></span><br><span class="line"><span class="string">196               Lavoy Allen          Indiana Pacers     5.0       PF  27.0    6-9   255.0                 Temple   4050000.0</span></span><br><span class="line"><span class="string">197          Rakeem Christmas          Indiana Pacers    25.0       PF  24.0    6-9   250.0               Syracuse   1007026.0</span></span><br><span class="line"><span class="string">198               Monta Ellis          Indiana Pacers    11.0       SG  30.0    6-3   185.0                    NaN  10300000.0</span></span><br><span class="line"><span class="string">199               Paul George          Indiana Pacers    13.0       SF  26.0    6-9   220.0           Fresno State  17120106.0</span></span><br><span class="line"><span class="string">200               George Hill          Indiana Pacers     3.0       PG  30.0    6-3   188.0                  IUPUI   8000000.0</span></span><br><span class="line"><span class="string">201               Jordan Hill          Indiana Pacers    27.0        C  28.0   6-10   235.0                Arizona   4000000.0</span></span><br><span class="line"><span class="string">202              Solomon Hill          Indiana Pacers    44.0       SF  25.0    6-7   225.0                Arizona   1358880.0</span></span><br><span class="line"><span class="string">203                 Ty Lawson          Indiana Pacers    10.0       PG  28.0   5-11   195.0         North Carolina    211744.0</span></span><br><span class="line"><span class="string">204               Ian Mahinmi          Indiana Pacers    28.0        C  29.0   6-11   250.0                    NaN   4000000.0</span></span><br><span class="line"><span class="string">205                C.J. Miles          Indiana Pacers     0.0       SF  29.0    6-6   231.0                    NaN   4394225.0</span></span><br><span class="line"><span class="string">206        Glenn Robinson III          Indiana Pacers    40.0       SG  22.0    6-7   222.0               Michigan   1100000.0</span></span><br><span class="line"><span class="string">207            Rodney Stuckey          Indiana Pacers     2.0       PG  30.0    6-5   205.0     Eastern Washington   7000000.0</span></span><br><span class="line"><span class="string">208              Myles Turner          Indiana Pacers    33.0       PF  20.0   6-11   243.0                  Texas   2357760.0</span></span><br><span class="line"><span class="string">209        Shayne Whittington          Indiana Pacers    42.0       PF  25.0   6-11   250.0       Western Michigan    845059.0</span></span><br><span class="line"><span class="string">210                 Joe Young          Indiana Pacers     1.0       PG  23.0    6-2   180.0                 Oregon   1007026.0</span></span><br><span class="line"><span class="string">211     Giannis Antetokounmpo         Milwaukee Bucks    34.0       SF  21.0   6-11   222.0                    NaN   1953960.0</span></span><br><span class="line"><span class="string">212            Jerryd Bayless         Milwaukee Bucks    19.0       PG  27.0    6-3   200.0                Arizona   3000000.0</span></span><br><span class="line"><span class="string">213   Michael Carter-Williams         Milwaukee Bucks     5.0       PG  24.0    6-6   190.0               Syracuse   2399040.0</span></span><br><span class="line"><span class="string">214          Jared Cunningham         Milwaukee Bucks     9.0       SG  25.0    6-4   195.0           Oregon State    947276.0</span></span><br><span class="line"><span class="string">215               Tyler Ennis         Milwaukee Bucks    11.0       PG  21.0    6-3   194.0               Syracuse   1662360.0</span></span><br><span class="line"><span class="string">216               John Henson         Milwaukee Bucks    31.0       PF  25.0   6-11   229.0         North Carolina   2943221.0</span></span><br><span class="line"><span class="string">217             Damien Inglis         Milwaukee Bucks    17.0       SF  21.0    6-8   246.0                    NaN    855000.0</span></span><br><span class="line"><span class="string">218                 O.J. Mayo         Milwaukee Bucks     3.0       SG  28.0    6-5   210.0                    USC   8000000.0</span></span><br><span class="line"><span class="string">219           Khris Middleton         Milwaukee Bucks    22.0       SG  24.0    6-8   234.0              Texas A&amp;M  14700000.0</span></span><br><span class="line"><span class="string">220               Greg Monroe         Milwaukee Bucks    15.0        C  26.0   6-11   265.0             Georgetown  16407500.0</span></span><br><span class="line"><span class="string">221               Steve Novak         Milwaukee Bucks     6.0       SF  32.0   6-10   225.0              Marquette    295327.0</span></span><br><span class="line"><span class="string">222       Johnny O&#x27;Bryant III         Milwaukee Bucks    77.0       PF  23.0    6-9   257.0                    LSU    845059.0</span></span><br><span class="line"><span class="string">223             Jabari Parker         Milwaukee Bucks    12.0       PF  21.0    6-8   250.0                   Duke   5152440.0</span></span><br><span class="line"><span class="string">224             Miles Plumlee         Milwaukee Bucks    18.0        C  27.0   6-11   249.0                   Duke   2109294.0</span></span><br><span class="line"><span class="string">225           Greivis Vasquez         Milwaukee Bucks    21.0       PG  29.0    6-6   217.0               Maryland   6600000.0</span></span><br><span class="line"><span class="string">226             Rashad Vaughn         Milwaukee Bucks    20.0       SG  19.0    6-6   202.0                   UNLV   1733040.0</span></span><br><span class="line"><span class="string">227           Justin Anderson        Dallas Mavericks     1.0       SG  22.0    6-6   228.0               Virginia   1449000.0</span></span><br><span class="line"><span class="string">228                J.J. Barea        Dallas Mavericks     5.0       PG  31.0    6-0   185.0           Northeastern   4290000.0</span></span><br><span class="line"><span class="string">229              Jeremy Evans        Dallas Mavericks    21.0       SF  28.0    6-9   200.0       Western Kentucky   1100602.0</span></span><br><span class="line"><span class="string">230            Raymond Felton        Dallas Mavericks     2.0       PG  31.0    6-1   205.0         North Carolina   3950313.0</span></span><br><span class="line"><span class="string">231              Devin Harris        Dallas Mavericks    34.0       PG  33.0    6-3   185.0              Wisconsin   4053446.0</span></span><br><span class="line"><span class="string">232                 David Lee        Dallas Mavericks    42.0       PF  33.0    6-9   245.0                Florida   2085671.0</span></span><br><span class="line"><span class="string">233           Wesley Matthews        Dallas Mavericks    23.0       SG  29.0    6-5   220.0              Marquette  16407500.0</span></span><br><span class="line"><span class="string">234              JaVale McGee        Dallas Mavericks    11.0        C  28.0    7-0   270.0                 Nevada   1270964.0</span></span><br><span class="line"><span class="string">235               Salah Mejri        Dallas Mavericks    50.0        C  29.0    7-2   245.0                    NaN    525093.0</span></span><br><span class="line"><span class="string">236             Dirk Nowitzki        Dallas Mavericks    41.0       PF  37.0    7-0   245.0                    NaN   8333334.0</span></span><br><span class="line"><span class="string">237             Zaza Pachulia        Dallas Mavericks    27.0        C  32.0   6-11   275.0                    NaN   5200000.0</span></span><br><span class="line"><span class="string">238          Chandler Parsons        Dallas Mavericks    25.0       SF  27.0   6-10   230.0                Florida  15361500.0</span></span><br><span class="line"><span class="string">239             Dwight Powell        Dallas Mavericks     7.0       PF  24.0   6-11   240.0               Stanford    845059.0</span></span><br><span class="line"><span class="string">240        Charlie Villanueva        Dallas Mavericks     3.0       PF  31.0   6-11   232.0            Connecticut    947276.0</span></span><br><span class="line"><span class="string">241            Deron Williams        Dallas Mavericks     8.0       PG  31.0    6-3   200.0               Illinois   5378974.0</span></span><br><span class="line"><span class="string">242              Trevor Ariza         Houston Rockets     1.0       SF  30.0    6-8   215.0                   UCLA   8193030.0</span></span><br><span class="line"><span class="string">243           Michael Beasley         Houston Rockets     8.0       SF  27.0   6-10   235.0           Kansas State    306527.0</span></span><br><span class="line"><span class="string">244          Patrick Beverley         Houston Rockets     2.0       PG  27.0    6-1   185.0               Arkansas   6486486.0</span></span><br><span class="line"><span class="string">245              Corey Brewer         Houston Rockets    33.0       SG  30.0    6-9   186.0                Florida   8229375.0</span></span><br><span class="line"><span class="string">246              Clint Capela         Houston Rockets    15.0       PF  22.0   6-10   240.0                    NaN   1242720.0</span></span><br><span class="line"><span class="string">247                Sam Dekker         Houston Rockets     7.0       SF  22.0    6-9   230.0              Wisconsin   1646400.0</span></span><br><span class="line"><span class="string">248          Andrew Goudelock         Houston Rockets     0.0       PG  27.0    6-3   200.0             Charleston    200600.0</span></span><br><span class="line"><span class="string">249              James Harden         Houston Rockets    13.0       SG  26.0    6-5   220.0          Arizona State  15756438.0</span></span><br><span class="line"><span class="string">250          Montrezl Harrell         Houston Rockets    35.0       PF  22.0    6-8   240.0             Louisville   1000000.0</span></span><br><span class="line"><span class="string">251             Dwight Howard         Houston Rockets    12.0        C  30.0   6-11   265.0                    NaN  22359364.0</span></span><br><span class="line"><span class="string">252            Terrence Jones         Houston Rockets     6.0       PF  24.0    6-9   252.0               Kentucky   2489530.0</span></span><br><span class="line"><span class="string">253            K.J. McDaniels         Houston Rockets    32.0       SG  23.0    6-6   205.0                Clemson   3189794.0</span></span><br><span class="line"><span class="string">254        Donatas Motiejunas         Houston Rockets    20.0       PF  25.0    7-0   222.0                    NaN   2288205.0</span></span><br><span class="line"><span class="string">255                Josh Smith         Houston Rockets     5.0        C  30.0    6-9   225.0                    NaN    947276.0</span></span><br><span class="line"><span class="string">256               Jason Terry         Houston Rockets    31.0       SG  38.0    6-2   185.0                Arizona    947276.0</span></span><br><span class="line"><span class="string">257              Jordan Adams       Memphis Grizzlies     3.0       SG  21.0    6-5   209.0                   UCLA   1404600.0</span></span><br><span class="line"><span class="string">258                Tony Allen       Memphis Grizzlies     9.0       SG  34.0    6-4   213.0         Oklahoma State   5158539.0</span></span><br><span class="line"><span class="string">259            Chris Andersen       Memphis Grizzlies     7.0       PF  37.0   6-10   245.0          Blinn College   5000000.0</span></span><br><span class="line"><span class="string">260               Matt Barnes       Memphis Grizzlies    22.0       SF  36.0    6-7   226.0                   UCLA   3542500.0</span></span><br><span class="line"><span class="string">261              Vince Carter       Memphis Grizzlies    15.0       SG  39.0    6-6   220.0         North Carolina   4088019.0</span></span><br><span class="line"><span class="string">262               Mike Conley       Memphis Grizzlies    11.0       PG  28.0    6-1   175.0             Ohio State   9588426.0</span></span><br><span class="line"><span class="string">263              Bryce Cotton       Memphis Grizzlies     8.0       PG  23.0    6-1   165.0             Providence    700902.0</span></span><br><span class="line"><span class="string">264             Jordan Farmar       Memphis Grizzlies     4.0       PG  29.0    6-2   180.0                   UCLA         NaN</span></span><br><span class="line"><span class="string">265                Marc Gasol       Memphis Grizzlies    33.0        C  31.0    7-1   255.0                    NaN  19688000.0</span></span><br><span class="line"><span class="string">266            JaMychal Green       Memphis Grizzlies     0.0       PF  25.0    6-9   227.0                Alabama    845059.0</span></span><br><span class="line"><span class="string">267             P.J. Hairston       Memphis Grizzlies    19.0       SF  23.0    6-6   230.0         North Carolina   1201440.0</span></span><br><span class="line"><span class="string">268             Jarell Martin       Memphis Grizzlies    10.0       PF  22.0   6-10   239.0                    LSU   1230840.0</span></span><br><span class="line"><span class="string">269              Ray McCallum       Memphis Grizzlies     5.0       PG  24.0    6-3   190.0                Detroit         NaN</span></span><br><span class="line"><span class="string">270            Xavier Munford       Memphis Grizzlies    14.0       PG  24.0    6-3   180.0           Rhode Island         NaN</span></span><br><span class="line"><span class="string">271             Zach Randolph       Memphis Grizzlies    50.0       PF  34.0    6-9   260.0         Michigan State   9638555.0</span></span><br><span class="line"><span class="string">272          Lance Stephenson       Memphis Grizzlies     1.0       SF  25.0    6-5   230.0             Cincinnati   9000000.0</span></span><br><span class="line"><span class="string">273            Alex Stepheson       Memphis Grizzlies    35.0       PF  28.0   6-10   270.0                    USC         NaN</span></span><br><span class="line"><span class="string">274            Brandan Wright       Memphis Grizzlies    34.0       PF  28.0   6-10   210.0         North Carolina   5464000.0</span></span><br><span class="line"><span class="string">275             Alexis Ajinca    New Orleans Pelicans    42.0        C  28.0    7-2   248.0                    NaN   4389607.0</span></span><br><span class="line"><span class="string">276             Ryan Anderson    New Orleans Pelicans    33.0       PF  28.0   6-10   240.0             California   8500000.0</span></span><br><span class="line"><span class="string">277                 Omer Asik    New Orleans Pelicans     3.0        C  29.0    7-0   255.0                    NaN   9213483.0</span></span><br><span class="line"><span class="string">278              Luke Babbitt    New Orleans Pelicans     8.0       SF  26.0    6-9   225.0                 Nevada   1100602.0</span></span><br><span class="line"><span class="string">279               Norris Cole    New Orleans Pelicans    30.0       PG  27.0    6-2   175.0        Cleveland State   3036927.0</span></span><br><span class="line"><span class="string">280          Dante Cunningham    New Orleans Pelicans    44.0       PF  29.0    6-8   230.0              Villanova   2850000.0</span></span><br><span class="line"><span class="string">281             Anthony Davis    New Orleans Pelicans    23.0       PF  23.0   6-10   253.0               Kentucky   7070730.0</span></span><br><span class="line"><span class="string">282        Bryce Dejean-Jones    New Orleans Pelicans    31.0       SG  23.0    6-6   203.0             Iowa State    169883.0</span></span><br><span class="line"><span class="string">283             Toney Douglas    New Orleans Pelicans    16.0       PG  30.0    6-2   195.0          Florida State   1164858.0</span></span><br><span class="line"><span class="string">284               James Ennis    New Orleans Pelicans     4.0       SF  25.0    6-7   210.0       Long Beach State    845059.0</span></span><br><span class="line"><span class="string">285              Tyreke Evans    New Orleans Pelicans     1.0       SG  26.0    6-6   220.0                Memphis  10734586.0</span></span><br><span class="line"><span class="string">286               Tim Frazier    New Orleans Pelicans     2.0       PG  25.0    6-1   170.0             Penn State    845059.0</span></span><br><span class="line"><span class="string">287                Alonzo Gee    New Orleans Pelicans    15.0       SF  29.0    6-6   225.0                Alabama   1320000.0</span></span><br><span class="line"><span class="string">288               Eric Gordon    New Orleans Pelicans    10.0       SG  27.0    6-4   215.0                Indiana  15514031.0</span></span><br><span class="line"><span class="string">289           Jordan Hamilton    New Orleans Pelicans    25.0       SG  25.0    6-7   220.0                  Texas   1015421.0</span></span><br><span class="line"><span class="string">290              Jrue Holiday    New Orleans Pelicans    11.0       PG  25.0    6-4   205.0                   UCLA  10595507.0</span></span><br><span class="line"><span class="string">291           Orlando Johnson    New Orleans Pelicans     0.0       SG  27.0    6-5   220.0       UC Santa Barbara     55722.0</span></span><br><span class="line"><span class="string">292          Kendrick Perkins    New Orleans Pelicans     5.0        C  31.0   6-10   270.0                    NaN    947276.0</span></span><br><span class="line"><span class="string">293          Quincy Pondexter    New Orleans Pelicans    20.0       SF  28.0    6-7   220.0             Washington   3382023.0</span></span><br><span class="line"><span class="string">294         LaMarcus Aldridge       San Antonio Spurs    12.0       PF  30.0   6-11   240.0                  Texas  19689000.0</span></span><br><span class="line"><span class="string">295             Kyle Anderson       San Antonio Spurs     1.0       SF  22.0    6-9   230.0                   UCLA   1142880.0</span></span><br><span class="line"><span class="string">296               Matt Bonner       San Antonio Spurs    15.0        C  36.0   6-10   235.0                Florida    947276.0</span></span><br><span class="line"><span class="string">297                Boris Diaw       San Antonio Spurs    33.0        C  34.0    6-8   250.0                    NaN   7500000.0</span></span><br><span class="line"><span class="string">298                Tim Duncan       San Antonio Spurs    21.0        C  40.0   6-11   250.0            Wake Forest   5250000.0</span></span><br><span class="line"><span class="string">299             Manu Ginobili       San Antonio Spurs    20.0       SG  38.0    6-6   205.0                    NaN   2814000.0</span></span><br><span class="line"><span class="string">300               Danny Green       San Antonio Spurs    14.0       SG  28.0    6-6   215.0         North Carolina  10000000.0</span></span><br><span class="line"><span class="string">301             Kawhi Leonard       San Antonio Spurs     2.0       SF  24.0    6-7   230.0        San Diego State  16407500.0</span></span><br><span class="line"><span class="string">302          Boban Marjanovic       San Antonio Spurs    40.0        C  27.0    7-3   290.0                    NaN   1200000.0</span></span><br><span class="line"><span class="string">303              Kevin Martin       San Antonio Spurs    23.0       SG  33.0    6-7   199.0       Western Carolina    200600.0</span></span><br><span class="line"><span class="string">304              Andre Miller       San Antonio Spurs    24.0       PG  40.0    6-3   200.0                   Utah    250750.0</span></span><br><span class="line"><span class="string">305               Patty Mills       San Antonio Spurs     8.0       PG  27.0    6-0   185.0           Saint Mary&#x27;s   3578947.0</span></span><br><span class="line"><span class="string">306               Tony Parker       San Antonio Spurs     9.0       PG  34.0    6-2   185.0                    NaN  13437500.0</span></span><br><span class="line"><span class="string">307          Jonathon Simmons       San Antonio Spurs    17.0       SG  26.0    6-6   195.0                Houston    525093.0</span></span><br><span class="line"><span class="string">308                David West       San Antonio Spurs    30.0       PF  35.0    6-9   250.0                 Xavier   1499187.0</span></span><br><span class="line"><span class="string">309             Kent Bazemore           Atlanta Hawks    24.0       SF  26.0    6-5   201.0           Old Dominion   2000000.0</span></span><br><span class="line"><span class="string">310          Tim Hardaway Jr.           Atlanta Hawks    10.0       SG  24.0    6-6   205.0               Michigan   1304520.0</span></span><br><span class="line"><span class="string">311              Kirk Hinrich           Atlanta Hawks    12.0       SG  35.0    6-4   190.0                 Kansas   2854940.0</span></span><br><span class="line"><span class="string">312                Al Horford           Atlanta Hawks    15.0        C  30.0   6-10   245.0                Florida  12000000.0</span></span><br><span class="line"><span class="string">313            Kris Humphries           Atlanta Hawks    43.0       PF  31.0    6-9   235.0              Minnesota   1000000.0</span></span><br><span class="line"><span class="string">314               Kyle Korver           Atlanta Hawks    26.0       SG  35.0    6-7   212.0              Creighton   5746479.0</span></span><br><span class="line"><span class="string">315              Paul Millsap           Atlanta Hawks     4.0       PF  31.0    6-8   246.0         Louisiana Tech  18671659.0</span></span><br><span class="line"><span class="string">316              Mike Muscala           Atlanta Hawks    31.0       PF  24.0   6-11   240.0               Bucknell    947276.0</span></span><br><span class="line"><span class="string">317           Lamar Patterson           Atlanta Hawks    13.0       SG  24.0    6-5   225.0             Pittsburgh    525093.0</span></span><br><span class="line"><span class="string">318           Dennis Schroder           Atlanta Hawks    17.0       PG  22.0    6-1   172.0                    NaN   1763400.0</span></span><br><span class="line"><span class="string">319                Mike Scott           Atlanta Hawks    32.0       PF  27.0    6-8   237.0               Virginia   3333333.0</span></span><br><span class="line"><span class="string">320           Thabo Sefolosha           Atlanta Hawks    25.0       SF  32.0    6-7   220.0                    NaN   4000000.0</span></span><br><span class="line"><span class="string">321            Tiago Splitter           Atlanta Hawks    11.0        C  31.0   6-11   245.0                    NaN   9756250.0</span></span><br><span class="line"><span class="string">322            Walter Tavares           Atlanta Hawks    22.0        C  24.0    7-3   260.0                    NaN   1000000.0</span></span><br><span class="line"><span class="string">323               Jeff Teague           Atlanta Hawks     0.0       PG  27.0    6-2   186.0            Wake Forest   8000000.0</span></span><br><span class="line"><span class="string">324             Nicolas Batum       Charlotte Hornets     5.0       SG  27.0    6-8   200.0                    NaN  13125306.0</span></span><br><span class="line"><span class="string">325              Troy Daniels       Charlotte Hornets    30.0       SG  24.0    6-4   205.0  Virginia Commonwealth    947276.0</span></span><br><span class="line"><span class="string">326           Jorge Gutierrez       Charlotte Hornets    12.0       PG  27.0    6-3   189.0             California    189455.0</span></span><br><span class="line"><span class="string">327          Tyler Hansbrough       Charlotte Hornets    50.0       PF  30.0    6-9   250.0         North Carolina    947276.0</span></span><br><span class="line"><span class="string">328            Aaron Harrison       Charlotte Hornets     9.0       SG  21.0    6-6   210.0               Kentucky    525093.0</span></span><br><span class="line"><span class="string">329             Spencer Hawes       Charlotte Hornets     0.0       PF  28.0    7-1   245.0             Washington   6110034.0</span></span><br><span class="line"><span class="string">330              Al Jefferson       Charlotte Hornets    25.0        C  31.0   6-10   289.0                    NaN  13500000.0</span></span><br><span class="line"><span class="string">331        Frank Kaminsky III       Charlotte Hornets    44.0        C  23.0    7-0   240.0              Wisconsin   2612520.0</span></span><br><span class="line"><span class="string">332    Michael Kidd-Gilchrist       Charlotte Hornets    14.0       SF  22.0    6-7   232.0               Kentucky   6331404.0</span></span><br><span class="line"><span class="string">333               Jeremy Lamb       Charlotte Hornets     3.0       SG  24.0    6-5   185.0            Connecticut   3034356.0</span></span><br><span class="line"><span class="string">334              Courtney Lee       Charlotte Hornets     1.0       SG  30.0    6-5   200.0       Western Kentucky   5675000.0</span></span><br><span class="line"><span class="string">335                Jeremy Lin       Charlotte Hornets     7.0       PG  27.0    6-3   200.0                Harvard   2139000.0</span></span><br><span class="line"><span class="string">336              Kemba Walker       Charlotte Hornets    15.0       PG  26.0    6-1   184.0            Connecticut  12000000.0</span></span><br><span class="line"><span class="string">337           Marvin Williams       Charlotte Hornets     2.0       PF  29.0    6-9   237.0         North Carolina   7000000.0</span></span><br><span class="line"><span class="string">338               Cody Zeller       Charlotte Hornets    40.0        C  23.0    7-0   240.0                Indiana   4204200.0</span></span><br><span class="line"><span class="string">339                Chris Bosh              Miami Heat     1.0       PF  32.0   6-11   235.0           Georgia Tech  22192730.0</span></span><br><span class="line"><span class="string">340                 Luol Deng              Miami Heat     9.0       SF  31.0    6-9   220.0                   Duke  10151612.0</span></span><br><span class="line"><span class="string">341              Goran Dragic              Miami Heat     7.0       PG  30.0    6-3   190.0                    NaN  14783000.0</span></span><br><span class="line"><span class="string">342              Gerald Green              Miami Heat    14.0       SF  30.0    6-7   205.0                    NaN    947276.0</span></span><br><span class="line"><span class="string">343             Udonis Haslem              Miami Heat    40.0       PF  36.0    6-8   235.0                Florida   2854940.0</span></span><br><span class="line"><span class="string">344               Joe Johnson              Miami Heat     2.0       SF  34.0    6-7   240.0               Arkansas    261894.0</span></span><br><span class="line"><span class="string">345             Tyler Johnson              Miami Heat     8.0       SG  24.0    6-4   186.0           Fresno State    845059.0</span></span><br><span class="line"><span class="string">346            Josh McRoberts              Miami Heat     4.0       PF  29.0   6-10   240.0                   Duke   5543725.0</span></span><br><span class="line"><span class="string">347           Josh Richardson              Miami Heat     0.0       SG  22.0    6-6   200.0              Tennessee    525093.0</span></span><br><span class="line"><span class="string">348         Amar&#x27;e Stoudemire              Miami Heat     5.0       PF  33.0   6-10   245.0                    NaN    947276.0</span></span><br><span class="line"><span class="string">349               Dwyane Wade              Miami Heat     3.0       SG  34.0    6-4   220.0              Marquette  20000000.0</span></span><br><span class="line"><span class="string">350             Briante Weber              Miami Heat    12.0       PG  23.0    6-2   165.0  Virginia Commonwealth         NaN</span></span><br><span class="line"><span class="string">351          Hassan Whiteside              Miami Heat    21.0        C  26.0    7-0   265.0               Marshall    981348.0</span></span><br><span class="line"><span class="string">352           Justise Winslow              Miami Heat    20.0       SF  20.0    6-7   225.0                   Duke   2481720.0</span></span><br><span class="line"><span class="string">353             Dorell Wright              Miami Heat    11.0       SF  30.0    6-9   205.0                    NaN         NaN</span></span><br><span class="line"><span class="string">354            Dewayne Dedmon           Orlando Magic     3.0        C  26.0    7-0   245.0                    USC    947276.0</span></span><br><span class="line"><span class="string">355             Evan Fournier           Orlando Magic    10.0       SG  23.0    6-7   205.0                    NaN   2288205.0</span></span><br><span class="line"><span class="string">356              Aaron Gordon           Orlando Magic     0.0       PF  20.0    6-9   220.0                Arizona   4171680.0</span></span><br><span class="line"><span class="string">357             Mario Hezonja           Orlando Magic    23.0       SG  21.0    6-8   218.0                    NaN   3741480.0</span></span><br><span class="line"><span class="string">358            Ersan Ilyasova           Orlando Magic     7.0       PF  29.0   6-10   235.0                    NaN   7900000.0</span></span><br><span class="line"><span class="string">359          Brandon Jennings           Orlando Magic    55.0       PG  26.0    6-1   169.0                    NaN   8344497.0</span></span><br><span class="line"><span class="string">360              Devyn Marble           Orlando Magic    11.0       SF  23.0    6-6   200.0                   Iowa    845059.0</span></span><br><span class="line"><span class="string">361            Shabazz Napier           Orlando Magic    13.0       PG  24.0    6-1   175.0            Connecticut   1294440.0</span></span><br><span class="line"><span class="string">362          Andrew Nicholson           Orlando Magic    44.0       PF  26.0    6-9   250.0        St. Bonaventure   2380593.0</span></span><br><span class="line"><span class="string">363            Victor Oladipo           Orlando Magic     5.0       SG  24.0    6-4   210.0                Indiana   5192520.0</span></span><br><span class="line"><span class="string">364             Elfrid Payton           Orlando Magic     4.0       PG  22.0    6-4   185.0    Louisiana-Lafayette   2505720.0</span></span><br><span class="line"><span class="string">365               Jason Smith           Orlando Magic    14.0       PF  30.0    7-0   240.0         Colorado State   4300000.0</span></span><br><span class="line"><span class="string">366            Nikola Vucevic           Orlando Magic     9.0        C  25.0    7-0   260.0                    USC  11250000.0</span></span><br><span class="line"><span class="string">367               C.J. Watson           Orlando Magic    32.0       PG  32.0    6-2   175.0              Tennessee   5000000.0</span></span><br><span class="line"><span class="string">368             Alan Anderson      Washington Wizards     6.0       SG  33.0    6-6   220.0         Michigan State   4000000.0</span></span><br><span class="line"><span class="string">369              Bradley Beal      Washington Wizards     3.0       SG  22.0    6-5   207.0                Florida   5694674.0</span></span><br><span class="line"><span class="string">370              Jared Dudley      Washington Wizards     1.0       SF  30.0    6-7   225.0         Boston College   4375000.0</span></span><br><span class="line"><span class="string">371              Jarell Eddie      Washington Wizards     8.0       SG  24.0    6-7   218.0          Virginia Tech    561716.0</span></span><br><span class="line"><span class="string">372               Drew Gooden      Washington Wizards    90.0       PF  34.0   6-10   250.0                 Kansas   3300000.0</span></span><br><span class="line"><span class="string">373             Marcin Gortat      Washington Wizards    13.0        C  32.0   6-11   240.0                    NaN  11217391.0</span></span><br><span class="line"><span class="string">374                JJ Hickson      Washington Wizards    21.0        C  27.0    6-9   242.0   North Carolina State    273038.0</span></span><br><span class="line"><span class="string">375              Nene Hilario      Washington Wizards    42.0        C  33.0   6-11   250.0                    NaN  13000000.0</span></span><br><span class="line"><span class="string">376           Markieff Morris      Washington Wizards     5.0       PF  26.0   6-10   245.0                 Kansas   8000000.0</span></span><br><span class="line"><span class="string">377           Kelly Oubre Jr.      Washington Wizards    12.0       SF  20.0    6-7   205.0                 Kansas   1920240.0</span></span><br><span class="line"><span class="string">378           Otto Porter Jr.      Washington Wizards    22.0       SF  23.0    6-8   198.0             Georgetown   4662960.0</span></span><br><span class="line"><span class="string">379            Ramon Sessions      Washington Wizards     7.0       PG  30.0    6-3   190.0                 Nevada   2170465.0</span></span><br><span class="line"><span class="string">380            Garrett Temple      Washington Wizards    17.0       SG  30.0    6-6   195.0                    LSU   1100602.0</span></span><br><span class="line"><span class="string">381           Marcus Thornton      Washington Wizards    15.0       SF  29.0    6-4   205.0                    LSU    200600.0</span></span><br><span class="line"><span class="string">382                 John Wall      Washington Wizards     2.0       PG  25.0    6-4   195.0               Kentucky  15851950.0</span></span><br><span class="line"><span class="string">383            Darrell Arthur          Denver Nuggets     0.0       PF  28.0    6-9   235.0                 Kansas   2814000.0</span></span><br><span class="line"><span class="string">384             D.J. Augustin          Denver Nuggets    12.0       PG  28.0    6-0   183.0                  Texas   3000000.0</span></span><br><span class="line"><span class="string">385               Will Barton          Denver Nuggets     5.0       SF  25.0    6-6   175.0                Memphis   3533333.0</span></span><br><span class="line"><span class="string">386           Wilson Chandler          Denver Nuggets    21.0       SF  29.0    6-8   225.0                 DePaul  10449438.0</span></span><br><span class="line"><span class="string">387            Kenneth Faried          Denver Nuggets    35.0       PF  26.0    6-8   228.0         Morehead State  11235955.0</span></span><br><span class="line"><span class="string">388          Danilo Gallinari          Denver Nuggets     8.0       SF  27.0   6-10   225.0                    NaN  14000000.0</span></span><br><span class="line"><span class="string">389               Gary Harris          Denver Nuggets    14.0       SG  21.0    6-4   210.0         Michigan State   1584480.0</span></span><br><span class="line"><span class="string">390              Nikola Jokic          Denver Nuggets    15.0        C  21.0   6-10   250.0                    NaN   1300000.0</span></span><br><span class="line"><span class="string">391         Joffrey Lauvergne          Denver Nuggets    77.0        C  24.0   6-11   220.0                    NaN   1709719.0</span></span><br><span class="line"><span class="string">392               Mike Miller          Denver Nuggets     3.0       SG  36.0    6-8   218.0                Florida    947276.0</span></span><br><span class="line"><span class="string">393           Emmanuel Mudiay          Denver Nuggets     0.0       PG  20.0    6-5   200.0                    NaN   3102240.0</span></span><br><span class="line"><span class="string">394             Jameer Nelson          Denver Nuggets     1.0       PG  34.0    6-0   190.0         Saint Joseph&#x27;s   4345000.0</span></span><br><span class="line"><span class="string">395              Jusuf Nurkic          Denver Nuggets    23.0        C  21.0    7-0   280.0                    NaN   1842000.0</span></span><br><span class="line"><span class="string">396            JaKarr Sampson          Denver Nuggets     9.0       SG  23.0    6-9   214.0             St. John&#x27;s    258489.0</span></span><br><span class="line"><span class="string">397              Axel Toupane          Denver Nuggets     6.0       SG  23.0    6-7   210.0                    NaN         NaN</span></span><br><span class="line"><span class="string">398           Nemanja Bjelica  Minnesota Timberwolves    88.0       PF  28.0   6-10   240.0                    NaN   3950001.0</span></span><br><span class="line"><span class="string">399              Gorgui Dieng  Minnesota Timberwolves     5.0        C  26.0   6-11   241.0             Louisville   1474440.0</span></span><br><span class="line"><span class="string">400             Kevin Garnett  Minnesota Timberwolves    21.0       PF  40.0   6-11   240.0                    NaN   8500000.0</span></span><br><span class="line"><span class="string">401                Tyus Jones  Minnesota Timberwolves     1.0       PG  20.0    6-2   195.0                   Duke   1282080.0</span></span><br><span class="line"><span class="string">402               Zach LaVine  Minnesota Timberwolves     8.0       PG  21.0    6-5   189.0                   UCLA   2148360.0</span></span><br><span class="line"><span class="string">403          Shabazz Muhammad  Minnesota Timberwolves    15.0       SF  23.0    6-6   223.0                   UCLA   2056920.0</span></span><br><span class="line"><span class="string">404             Adreian Payne  Minnesota Timberwolves    33.0       PF  25.0   6-10   237.0         Michigan State   1938840.0</span></span><br><span class="line"><span class="string">405            Nikola Pekovic  Minnesota Timberwolves    14.0        C  30.0   6-11   307.0                    NaN  12100000.0</span></span><br><span class="line"><span class="string">406           Tayshaun Prince  Minnesota Timberwolves    12.0       SF  36.0    6-9   212.0               Kentucky    947276.0</span></span><br><span class="line"><span class="string">407               Ricky Rubio  Minnesota Timberwolves     9.0       PG  25.0    6-4   194.0                    NaN  12700000.0</span></span><br><span class="line"><span class="string">408              Damjan Rudez  Minnesota Timberwolves    10.0       SF  29.0    6-9   230.0                    NaN   1149500.0</span></span><br><span class="line"><span class="string">409                Greg Smith  Minnesota Timberwolves     4.0       PF  25.0   6-10   250.0           Fresno State         NaN</span></span><br><span class="line"><span class="string">410        Karl-Anthony Towns  Minnesota Timberwolves    32.0        C  20.0    7-0   244.0               Kentucky   5703600.0</span></span><br><span class="line"><span class="string">411            Andrew Wiggins  Minnesota Timberwolves    22.0       SG  21.0    6-8   199.0                 Kansas   5758680.0</span></span><br><span class="line"><span class="string">412              Steven Adams   Oklahoma City Thunder    12.0        C  22.0    7-0   255.0             Pittsburgh   2279040.0</span></span><br><span class="line"><span class="string">413             Nick Collison   Oklahoma City Thunder     4.0       PF  35.0   6-10   255.0                 Kansas   3750000.0</span></span><br><span class="line"><span class="string">414              Kevin Durant   Oklahoma City Thunder    35.0       SF  27.0    6-9   240.0                  Texas  20158622.0</span></span><br><span class="line"><span class="string">415                Randy Foye   Oklahoma City Thunder     6.0       SG  32.0    6-4   213.0              Villanova   3135000.0</span></span><br><span class="line"><span class="string">416              Josh Huestis   Oklahoma City Thunder    34.0       SF  24.0    6-7   230.0               Stanford   1140240.0</span></span><br><span class="line"><span class="string">417               Serge Ibaka   Oklahoma City Thunder     9.0       PF  26.0   6-10   245.0                    NaN  12250000.0</span></span><br><span class="line"><span class="string">418               Enes Kanter   Oklahoma City Thunder    11.0        C  24.0   6-11   245.0               Kentucky  16407500.0</span></span><br><span class="line"><span class="string">419              Mitch McGary   Oklahoma City Thunder    33.0       PF  24.0   6-10   255.0               Michigan   1463040.0</span></span><br><span class="line"><span class="string">420             Nazr Mohammed   Oklahoma City Thunder    13.0        C  38.0   6-10   250.0               Kentucky    222888.0</span></span><br><span class="line"><span class="string">421            Anthony Morrow   Oklahoma City Thunder     2.0       SG  30.0    6-5   210.0           Georgia Tech   3344000.0</span></span><br><span class="line"><span class="string">422             Cameron Payne   Oklahoma City Thunder    22.0       PG  21.0    6-3   185.0           Murray State   2021520.0</span></span><br><span class="line"><span class="string">423            Andre Roberson   Oklahoma City Thunder    21.0       SG  24.0    6-7   210.0               Colorado   1210800.0</span></span><br><span class="line"><span class="string">424              Kyle Singler   Oklahoma City Thunder     5.0       SF  28.0    6-8   228.0                   Duke   4500000.0</span></span><br><span class="line"><span class="string">425              Dion Waiters   Oklahoma City Thunder     3.0       SG  24.0    6-4   220.0               Syracuse   5138430.0</span></span><br><span class="line"><span class="string">426         Russell Westbrook   Oklahoma City Thunder     0.0       PG  27.0    6-3   200.0                   UCLA  16744218.0</span></span><br><span class="line"><span class="string">427           Cliff Alexander  Portland Trail Blazers    34.0       PF  20.0    6-8   240.0                 Kansas    525093.0</span></span><br><span class="line"><span class="string">428           Al-Farouq Aminu  Portland Trail Blazers     8.0       SF  25.0    6-9   215.0            Wake Forest   8042895.0</span></span><br><span class="line"><span class="string">429           Pat Connaughton  Portland Trail Blazers     5.0       SG  23.0    6-5   206.0             Notre Dame    625093.0</span></span><br><span class="line"><span class="string">430              Allen Crabbe  Portland Trail Blazers    23.0       SG  24.0    6-6   210.0             California    947276.0</span></span><br><span class="line"><span class="string">431                  Ed Davis  Portland Trail Blazers    17.0        C  27.0   6-10   240.0         North Carolina   6980802.0</span></span><br><span class="line"><span class="string">432          Maurice Harkless  Portland Trail Blazers     4.0       SF  23.0    6-9   215.0             St. John&#x27;s   2894059.0</span></span><br><span class="line"><span class="string">433          Gerald Henderson  Portland Trail Blazers     9.0       SG  28.0    6-5   215.0                   Duke   6000000.0</span></span><br><span class="line"><span class="string">434               Chris Kaman  Portland Trail Blazers    35.0        C  34.0    7-0   265.0       Central Michigan   5016000.0</span></span><br><span class="line"><span class="string">435            Meyers Leonard  Portland Trail Blazers    11.0       PF  24.0    7-1   245.0               Illinois   3075880.0</span></span><br><span class="line"><span class="string">436            Damian Lillard  Portland Trail Blazers     0.0       PG  25.0    6-3   195.0            Weber State   4236287.0</span></span><br><span class="line"><span class="string">437             C.J. McCollum  Portland Trail Blazers     3.0       SG  24.0    6-4   200.0                 Lehigh   2525160.0</span></span><br><span class="line"><span class="string">438              Luis Montero  Portland Trail Blazers    44.0       SG  23.0    6-7   185.0         Westchester CC    525093.0</span></span><br><span class="line"><span class="string">439             Mason Plumlee  Portland Trail Blazers    24.0        C  26.0   6-11   235.0                   Duke   1415520.0</span></span><br><span class="line"><span class="string">440             Brian Roberts  Portland Trail Blazers     2.0       PG  30.0    6-1   173.0                 Dayton   2854940.0</span></span><br><span class="line"><span class="string">441               Noah Vonleh  Portland Trail Blazers    21.0       PF  20.0    6-9   240.0                Indiana   2637720.0</span></span><br><span class="line"><span class="string">442             Trevor Booker               Utah Jazz    33.0       PF  28.0    6-8   228.0                Clemson   4775000.0</span></span><br><span class="line"><span class="string">443                Trey Burke               Utah Jazz     3.0       PG  23.0    6-1   191.0               Michigan   2658240.0</span></span><br><span class="line"><span class="string">444                Alec Burks               Utah Jazz    10.0       SG  24.0    6-6   214.0               Colorado   9463484.0</span></span><br><span class="line"><span class="string">445                Dante Exum               Utah Jazz    11.0       PG  20.0    6-6   190.0                    NaN   3777720.0</span></span><br><span class="line"><span class="string">446            Derrick Favors               Utah Jazz    15.0       PF  24.0   6-10   265.0           Georgia Tech  12000000.0</span></span><br><span class="line"><span class="string">447               Rudy Gobert               Utah Jazz    27.0        C  23.0    7-1   245.0                    NaN   1175880.0</span></span><br><span class="line"><span class="string">448            Gordon Hayward               Utah Jazz    20.0       SF  26.0    6-8   226.0                 Butler  15409570.0</span></span><br><span class="line"><span class="string">449               Rodney Hood               Utah Jazz     5.0       SG  23.0    6-8   206.0                   Duke   1348440.0</span></span><br><span class="line"><span class="string">450                Joe Ingles               Utah Jazz     2.0       SF  28.0    6-8   226.0                    NaN   2050000.0</span></span><br><span class="line"><span class="string">451             Chris Johnson               Utah Jazz    23.0       SF  26.0    6-6   206.0                 Dayton    981348.0</span></span><br><span class="line"><span class="string">452                Trey Lyles               Utah Jazz    41.0       PF  20.0   6-10   234.0               Kentucky   2239800.0</span></span><br><span class="line"><span class="string">453              Shelvin Mack               Utah Jazz     8.0       PG  26.0    6-3   203.0                 Butler   2433333.0</span></span><br><span class="line"><span class="string">454                 Raul Neto               Utah Jazz    25.0       PG  24.0    6-1   179.0                    NaN    900000.0</span></span><br><span class="line"><span class="string">455              Tibor Pleiss               Utah Jazz    21.0        C  26.0    7-3   256.0                    NaN   2900000.0</span></span><br><span class="line"><span class="string">456               Jeff Withey               Utah Jazz    24.0        C  26.0    7-0   231.0                 Kansas    947276.0</span></span><br><span class="line"><span class="string">457                       NaN                     NaN     NaN      NaN   NaN    NaN     NaN                    NaN         NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">##################傻仔，读出来的是</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df.to_string()))</span><br><span class="line"><span class="comment">#&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df))  <span class="comment">##############这里的类型肯定是DataFrame啊，df.to_string()返回str型，但是又不会改变df。。。</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.index)</span><br><span class="line"><span class="comment">#RangeIndex(start=0, stop=458, step=1)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df.index))</span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.indexes.range.RangeIndex&#x27;&gt;</span></span><br><span class="line">length = df.index</span><br><span class="line"><span class="built_in">print</span>(length) <span class="comment">#列表求长度也是这样子求哦。</span></span><br><span class="line"><span class="comment"># 458</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">range</span>(<span class="number">5</span>)))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">range(0, 5)</span></span><br><span class="line"><span class="string">&lt;class &#x27;range&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义新索引：</span></span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">459</span>):</span><br><span class="line">    a.append(i)</span><br><span class="line">df.index = a  <span class="comment">#改动索引哈！！！</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">              Name            Team  ...            College     Salary</span></span><br><span class="line"><span class="string">1    Avery Bradley  Boston Celtics  ...              Texas  7730337.0</span></span><br><span class="line"><span class="string">2      Jae Crowder  Boston Celtics  ...          Marquette  6796117.0</span></span><br><span class="line"><span class="string">3     John Holland  Boston Celtics  ...  Boston University        NaN</span></span><br><span class="line"><span class="string">4      R.J. Hunter  Boston Celtics  ...      Georgia State  1148640.0</span></span><br><span class="line"><span class="string">5    Jonas Jerebko  Boston Celtics  ...                NaN  5000000.0</span></span><br><span class="line"><span class="string">..             ...             ...  ...                ...        ...</span></span><br><span class="line"><span class="string">454   Shelvin Mack       Utah Jazz  ...             Butler  2433333.0</span></span><br><span class="line"><span class="string">455      Raul Neto       Utah Jazz  ...                NaN   900000.0</span></span><br><span class="line"><span class="string">456   Tibor Pleiss       Utah Jazz  ...                NaN  2900000.0</span></span><br><span class="line"><span class="string">457    Jeff Withey       Utah Jazz  ...             Kansas   947276.0</span></span><br><span class="line"><span class="string">458            NaN             NaN  ...                NaN        NaN</span></span><br><span class="line"><span class="string">[458 rows x 9 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################保存为 csv文件： 从字典转为 DataFrame 再转为 csv文件：</span></span><br><span class="line">name = [<span class="string">&#x27;google&#x27;</span>,<span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;taobao&#x27;</span>,<span class="string">&#x27;wiki&#x27;</span>]</span><br><span class="line">site = [<span class="string">&#x27;www.google.com&#x27;</span>,<span class="string">&#x27;www.runoob.com&#x27;</span>,<span class="string">&#x27;www.taobao.com&#x27;</span>,<span class="string">&#x27;www.wikipedia.org&#x27;</span>]</span><br><span class="line">age = [<span class="number">90</span>,<span class="number">40</span>,<span class="number">80</span>,<span class="number">89</span>]</span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;name&#x27;</span>:name,<span class="string">&#x27;site&#x27;</span>:site,<span class="string">&#x27;age&#x27;</span>:age&#125;</span><br><span class="line">df = pd.DataFrame(<span class="built_in">dict</span>)</span><br><span class="line">df.to_csv(<span class="string">&#x27;site.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     name               site  age</span></span><br><span class="line"><span class="string">0  google     www.google.com   90</span></span><br><span class="line"><span class="string">1  runoob     www.runoob.com   40</span></span><br><span class="line"><span class="string">2  taobao     www.taobao.com   80</span></span><br><span class="line"><span class="string">3    wiki  www.wikipedia.org   89</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;nba.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.head())  <span class="comment">#######默认显示前5行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            Name            Team  Number  ... Weight            College     Salary</span></span><br><span class="line"><span class="string">0  Avery Bradley  Boston Celtics     0.0  ...  180.0              Texas  7730337.0</span></span><br><span class="line"><span class="string">1    Jae Crowder  Boston Celtics    99.0  ...  235.0          Marquette  6796117.0</span></span><br><span class="line"><span class="string">2   John Holland  Boston Celtics    30.0  ...  205.0  Boston University        NaN</span></span><br><span class="line"><span class="string">3    R.J. Hunter  Boston Celtics    28.0  ...  185.0      Georgia State  1148640.0</span></span><br><span class="line"><span class="string">4  Jonas Jerebko  Boston Celtics     8.0  ...  231.0                NaN  5000000.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[5 rows x 9 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.head(<span class="number">10</span>)) <span class="comment">######显示前n==10行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            Name            Team  Number  ... Weight            College      Salary</span></span><br><span class="line"><span class="string">0  Avery Bradley  Boston Celtics     0.0  ...  180.0              Texas   7730337.0</span></span><br><span class="line"><span class="string">1    Jae Crowder  Boston Celtics    99.0  ...  235.0          Marquette   6796117.0</span></span><br><span class="line"><span class="string">2   John Holland  Boston Celtics    30.0  ...  205.0  Boston University         NaN</span></span><br><span class="line"><span class="string">3    R.J. Hunter  Boston Celtics    28.0  ...  185.0      Georgia State   1148640.0</span></span><br><span class="line"><span class="string">4  Jonas Jerebko  Boston Celtics     8.0  ...  231.0                NaN   5000000.0</span></span><br><span class="line"><span class="string">5   Amir Johnson  Boston Celtics    90.0  ...  240.0                NaN  12000000.0</span></span><br><span class="line"><span class="string">6  Jordan Mickey  Boston Celtics    55.0  ...  235.0                LSU   1170960.0</span></span><br><span class="line"><span class="string">7   Kelly Olynyk  Boston Celtics    41.0  ...  238.0            Gonzaga   2165160.0</span></span><br><span class="line"><span class="string">8   Terry Rozier  Boston Celtics    12.0  ...  190.0         Louisville   1824360.0</span></span><br><span class="line"><span class="string">9   Marcus Smart  Boston Celtics    36.0  ...  220.0     Oklahoma State   3431040.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[10 rows x 9 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.tail())<span class="comment">######默认显示最末尾5行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">             Name       Team  Number Position  ...  Height Weight  College     Salary</span></span><br><span class="line"><span class="string">453  Shelvin Mack  Utah Jazz     8.0       PG  ...     6-3  203.0   Butler  2433333.0</span></span><br><span class="line"><span class="string">454     Raul Neto  Utah Jazz    25.0       PG  ...     6-1  179.0      NaN   900000.0</span></span><br><span class="line"><span class="string">455  Tibor Pleiss  Utah Jazz    21.0        C  ...     7-3  256.0      NaN  2900000.0</span></span><br><span class="line"><span class="string">456   Jeff Withey  Utah Jazz    24.0        C  ...     7-0  231.0   Kansas   947276.0</span></span><br><span class="line"><span class="string">457           NaN        NaN     NaN      NaN  ...     NaN    NaN      NaN        NaN</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[5 rows x 9 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">10</span>))<span class="comment">######显示末尾n==10行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">               Name       Team  Number  ... Weight   College      Salary</span></span><br><span class="line"><span class="string">448  Gordon Hayward  Utah Jazz    20.0  ...  226.0    Butler  15409570.0</span></span><br><span class="line"><span class="string">449     Rodney Hood  Utah Jazz     5.0  ...  206.0      Duke   1348440.0</span></span><br><span class="line"><span class="string">450      Joe Ingles  Utah Jazz     2.0  ...  226.0       NaN   2050000.0</span></span><br><span class="line"><span class="string">451   Chris Johnson  Utah Jazz    23.0  ...  206.0    Dayton    981348.0</span></span><br><span class="line"><span class="string">452      Trey Lyles  Utah Jazz    41.0  ...  234.0  Kentucky   2239800.0</span></span><br><span class="line"><span class="string">453    Shelvin Mack  Utah Jazz     8.0  ...  203.0    Butler   2433333.0</span></span><br><span class="line"><span class="string">454       Raul Neto  Utah Jazz    25.0  ...  179.0       NaN    900000.0</span></span><br><span class="line"><span class="string">455    Tibor Pleiss  Utah Jazz    21.0  ...  256.0       NaN   2900000.0</span></span><br><span class="line"><span class="string">456     Jeff Withey  Utah Jazz    24.0  ...  231.0    Kansas    947276.0</span></span><br><span class="line"><span class="string">457             NaN        NaN     NaN  ...    NaN       NaN         NaN</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[10 rows x 9 columns]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.info()) <span class="comment">######显示出来具体信息。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;   ###########数据类型</span></span><br><span class="line"><span class="string">RangeIndex: 458 entries, 0 to 457       ################行数以及索引号</span></span><br><span class="line"><span class="string">Data columns (total 9 columns):         #########列数据统计，以及列数。</span></span><br><span class="line"><span class="string"> #   Column    Non-Null Count  Dtype  </span></span><br><span class="line"><span class="string">---  ------    --------------  -----  </span></span><br><span class="line"><span class="string"> 0   Name      457 non-null    object </span></span><br><span class="line"><span class="string"> 1   Team      457 non-null    object </span></span><br><span class="line"><span class="string"> 2   Number    457 non-null    float64</span></span><br><span class="line"><span class="string"> 3   Position  457 non-null    object </span></span><br><span class="line"><span class="string"> 4   Age       457 non-null    float64</span></span><br><span class="line"><span class="string"> 5   Height    457 non-null    object </span></span><br><span class="line"><span class="string"> 6   Weight    457 non-null    float64</span></span><br><span class="line"><span class="string"> 7   College   373 non-null    object </span></span><br><span class="line"><span class="string"> 8   Salary    446 non-null    float64      ##############列名，对一个的非空值数量，列数据类型！！</span></span><br><span class="line"><span class="string">dtypes: float64(4), object(5)               ##############每种数据类型的列数量。</span></span><br><span class="line"><span class="string">memory usage: 32.3+ KB</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas-DateFrame</title>
    <link href="http://example.com/2022/06/01/pandas-DateFrame/"/>
    <id>http://example.com/2022/06/01/pandas-DateFrame/</id>
    <published>2022-06-01T08:50:05.000Z</published>
    <updated>2022-06-01T08:58:32.597Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DataFrame 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值）。</span></span><br><span class="line"><span class="string">DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共同用一个索引）。</span></span><br><span class="line"><span class="string">Pandas DataFrame 是一个二维的数组结构，类似二维数组。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DataFrame 构造方法如下：</span></span><br><span class="line"><span class="string">pandas.DataFrame( data, index, columns, dtype, copy)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参数说明：(与Series相比 少了 name参数，多了列名参数：columns。</span></span><br><span class="line"><span class="string">    data：一组数据(ndarray、series, map, lists, dict 等类型)。</span></span><br><span class="line"><span class="string">    index：索引值，或者可以称为行标签。</span></span><br><span class="line"><span class="string">    columns：列标签，默认为 RangeIndex (0, 1, 2, …, n) 。</span></span><br><span class="line"><span class="string">    dtype：数据类型。</span></span><br><span class="line"><span class="string">    copy：拷贝数据，默认为 False。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span>  pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################第一种方式构造DataFrame</span></span><br><span class="line"><span class="comment"># 类似二维数组，二维列表嵌套构成数据，列表里面的每一列表表示表格中的一行的数据。</span></span><br><span class="line"><span class="comment"># 这种方法在实例化时要指名参数：column。</span></span><br><span class="line">data = [[<span class="string">&#x27;google&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;runoob&#x27;</span>,<span class="number">12</span>],[<span class="string">&#x27;wiki&#x27;</span>,<span class="number">13</span>]]</span><br><span class="line">df = pd.DataFrame(data,columns=[<span class="string">&#x27;Site&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>],dtype=<span class="built_in">float</span>) <span class="comment">#这里还指名数据类型，因为不指明的话应该默认识别出int。</span></span><br><span class="line">                                            <span class="comment">#然后 columns 参数也是一个list性。</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     Site   Age</span></span><br><span class="line"><span class="string">0  google  10.0</span></span><br><span class="line"><span class="string">1  runoob  12.0</span></span><br><span class="line"><span class="string">2    wiki  13.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.dtypes) <span class="comment">##########输出每一列的数据类型！！！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Site     object</span></span><br><span class="line"><span class="string">Age     float64</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">df.columns = [<span class="number">1</span>,<span class="number">2</span>] <span class="comment">###当然，列名也可以是整形数字。</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        1     2</span></span><br><span class="line"><span class="string">0  google  10.0</span></span><br><span class="line"><span class="string">1  runoob  12.0</span></span><br><span class="line"><span class="string">2    wiki  13.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################第二种种方式构造DataFrame</span></span><br><span class="line"><span class="comment"># 使用 ndarrays 创建</span></span><br><span class="line"><span class="comment"># ndarray 的长度必须相同， 如果传递了 index，则索引的长度应等于数组的长度。</span></span><br><span class="line"><span class="comment"># 如果没有传递索引，则默认情况下，索引将是range(n)，其中n是数组长度。</span></span><br><span class="line">data = &#123;<span class="string">&#x27;site&#x27;</span>:[<span class="string">&#x27;google&#x27;</span>,<span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;wiki&#x27;</span>],<span class="string">&#x27;Age&#x27;</span>:[<span class="number">10</span>,<span class="number">12</span>,<span class="number">13</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     site  Age</span></span><br><span class="line"><span class="string">0  google   10</span></span><br><span class="line"><span class="string">1  runoob   12</span></span><br><span class="line"><span class="string">2    wiki   13</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################第三种种方式构造DataFrame############类似于json字符串形式。</span></span><br><span class="line"><span class="comment"># 字典（key/value），其中字典的 key 为列名:</span></span><br><span class="line">data = [&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;,&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">6</span>&#125;]</span><br><span class="line"><span class="built_in">print</span>(pd.DataFrame(data,dtype=<span class="built_in">float</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     a    b    c</span></span><br><span class="line"><span class="string">0  1.0  2.0  3.0</span></span><br><span class="line"><span class="string">1  4.0  NaN  6.0      ##############没有的值表示为NaN</span></span><br><span class="line"><span class="string">                                    #注意：NaN跟None不是一个概念。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">##############################################################################数据检索：</span></span><br><span class="line"><span class="comment"># 1 行</span></span><br><span class="line"><span class="comment">#############使用 loc 属性返回指定行的数据</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="number">0</span>])  <span class="comment">#注意，这里时用[] 而不是（）</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="number">1</span>])   <span class="comment">### 返回结果其实就是一个 Pandas Series 数据。</span></span><br><span class="line">                  <span class="comment">### df的列名变成了索引，然后df的索引为name，</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">site    google</span></span><br><span class="line"><span class="string">Age         10</span></span><br><span class="line"><span class="string">Name: 0, dtype: object</span></span><br><span class="line"><span class="string">site    runoob</span></span><br><span class="line"><span class="string">Age         12</span></span><br><span class="line"><span class="string">Name: 1, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################################### 返回多行数据，使用 [[ ... ]] 格式，... 为各行的索引，以逗号隔开：</span></span><br><span class="line"><span class="comment"># 注意：返回结果其实就是一个 Pandas DataFrame 数据。有索引，有列名！！！</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;calories&quot;</span>: [<span class="number">420</span>, <span class="number">380</span>, <span class="number">390</span>],</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回第一行和第三行</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[[<span class="number">0</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   calories  duration</span></span><br><span class="line"><span class="string">0       420        50</span></span><br><span class="line"><span class="string">2       390        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################指定索引值。</span></span><br><span class="line">df = pd.DataFrame(data, index = [<span class="string">&quot;day1&quot;</span>, <span class="string">&quot;day2&quot;</span>, <span class="string">&quot;day3&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day2       380        40</span></span><br><span class="line"><span class="string">day3       390        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 指定索引访问数据。</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;day2&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">calories    380</span></span><br><span class="line"><span class="string">duration     40</span></span><br><span class="line"><span class="string">Name: day2, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="number">0</span>:<span class="number">2</span>]) <span class="comment">#查看0,1 两行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day2       380        40</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#等价于：</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;day1&#x27;</span>:<span class="string">&#x27;day2&#x27;</span>])  <span class="comment">##包括 &#x27;day2&#x27;这一行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day2       380        40</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 列</span></span><br><span class="line"><span class="comment">#查看有什么列。</span></span><br><span class="line"><span class="built_in">print</span>(df.columns)</span><br><span class="line"><span class="comment">#Index([&#x27;calories&#x27;, &#x27;duration&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class="line"><span class="comment">#第二个列名打印</span></span><br><span class="line"><span class="built_in">print</span>(df.columns[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># duration</span></span><br><span class="line"><span class="built_in">print</span>(df.calories) <span class="comment"># 打印第二列</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">day1    420</span></span><br><span class="line"><span class="string">day2    380</span></span><br><span class="line"><span class="string">day3    390</span></span><br><span class="line"><span class="string">Name: calories, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#等价于：</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;calories&#x27;</span>])</span><br><span class="line"><span class="comment">#还等价于：</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[:,<span class="string">&#x27;calories&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[:,[<span class="string">&#x27;calories&#x27;</span>,<span class="string">&#x27;duration&#x27;</span>]]) <span class="comment">#输出两列。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day2       380        40</span></span><br><span class="line"><span class="string">day3       390        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[[<span class="string">&#x27;day1&#x27;</span>,<span class="string">&#x27;day3&#x27;</span>],[<span class="string">&#x27;calories&#x27;</span>,<span class="string">&#x27;duration&#x27;</span>]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day3       390        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;day1&#x27;</span>:<span class="string">&#x27;day3&#x27;</span>,[<span class="string">&#x27;calories&#x27;</span>,<span class="string">&#x27;duration&#x27;</span>]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day2       380        40</span></span><br><span class="line"><span class="string">day3       390        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># print(df.loc[1,1])###报错。</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">1</span>,<span class="number">1</span>])  <span class="comment">#########获取到某个值###</span></span><br><span class="line"><span class="comment">#40</span></span><br><span class="line"><span class="comment"># print(df.iloc[&#x27;day1&#x27;,&#x27;duration&#x27;])  报错。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&#x27;duration&#x27;</span>]&gt;<span class="number">45</span>]) <span class="comment"># 返回duration这一列大于45的数据所在的行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df&gt;<span class="number">45</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1      True      True</span></span><br><span class="line"><span class="string">day2      True     False</span></span><br><span class="line"><span class="string">day3      True     False</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df[df&gt;<span class="number">45</span>])  <span class="comment">##每一个元素进行判断，不符合的就屏蔽（用NaN代替）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420      50.0</span></span><br><span class="line"><span class="string">day2       380       NaN</span></span><br><span class="line"><span class="string">day3       390       NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&#x27;calories&#x27;</span>].isin([<span class="number">420</span>,<span class="number">390</span>])])<span class="comment">#######查找某一列中存在的某些元素，存在的话就返回其中的行。isin里面的列表元素似乎不可以用切片。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">day3       390        45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################loc函数利用了很多加速方法，比for循环，列表等其他方式访问数据要快得多！！！</span></span><br><span class="line"><span class="comment">#还有pd.iloc 跟pd.loc 方法差不多，都是检索数据，一般利用切片技术。如df.iloc[0:2,0:3] 再如：df.iloc[[0,1],[0,1,2]].</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问索引：</span></span><br><span class="line"><span class="built_in">print</span>(df.index)</span><br><span class="line"><span class="comment"># Index([&#x27;day1&#x27;, &#x27;day2&#x27;, &#x27;day3&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(df.index[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#day1</span></span><br><span class="line"><span class="comment">#########高度总结就是 DataFrame是一个表格，有索引有列名（行跟号）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.describe())  <span class="comment">###对数据作统计，计算每一列的各种指标：均值，中位数等等。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">         calories  duration</span></span><br><span class="line"><span class="string">count    3.000000       3.0</span></span><br><span class="line"><span class="string">mean   396.666667      45.0</span></span><br><span class="line"><span class="string">std     20.816660       5.0</span></span><br><span class="line"><span class="string">min    380.000000      40.0</span></span><br><span class="line"><span class="string">25%    385.000000      42.5</span></span><br><span class="line"><span class="string">50%    390.000000      45.0</span></span><br><span class="line"><span class="string">75%    405.000000      47.5</span></span><br><span class="line"><span class="string">max    420.000000      50.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.T)  <span class="comment"># 表格转置。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          day1  day2  day3</span></span><br><span class="line"><span class="string">calories   420   380   390</span></span><br><span class="line"><span class="string">duration    50    40    45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas-Series</title>
    <link href="http://example.com/2022/06/01/pandas-Series/"/>
    <id>http://example.com/2022/06/01/pandas-Series/</id>
    <published>2022-06-01T08:49:53.000Z</published>
    <updated>2022-06-01T08:58:16.702Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Pandas 数据结构 - Series</span></span><br><span class="line"><span class="string">Pandas Series 类似表格中的一个列（column），类似于一维数组，可以保存任何数据类型。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">函数如下：</span></span><br><span class="line"><span class="string">pandas.Series( data, index, dtype, name, copy)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参数说明：</span></span><br><span class="line"><span class="string">    data：一组数据(ndarray 类型)。</span></span><br><span class="line"><span class="string">    index：数据索引标签，如果不指定，默认从 0 开始。</span></span><br><span class="line"><span class="string">    dtype：数据类型，默认会自己判断。</span></span><br><span class="line"><span class="string">    name：设置名称。</span></span><br><span class="line"><span class="string">    copy：拷贝数据，默认为 False。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单实例：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1新建列</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2讲列作为数据，建立pd.Series实例。</span></span><br><span class="line">myvar = pd.Series(a,name = <span class="string">&#x27;myvar&#x27;</span>) <span class="comment"># 还指定名称。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    1</span></span><br><span class="line"><span class="string">1    2</span></span><br><span class="line"><span class="string">2    3</span></span><br><span class="line"><span class="string">Name: myvar, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 根据索引读取数据：</span></span><br><span class="line"><span class="built_in">print</span>(myvar[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 指定索引值：列数据+列索引组成 Series实例。</span></span><br><span class="line"></span><br><span class="line">sites = [<span class="string">&#x27;google&#x27;</span>,<span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;wiki&#x27;</span>]</span><br><span class="line">myvar1 = pd.Series(sites,index=[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>],name=<span class="string">&#x27;myvar1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(myvar1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">x    google</span></span><br><span class="line"><span class="string">y    runoob</span></span><br><span class="line"><span class="string">z      wiki</span></span><br><span class="line"><span class="string">Name: myvar1, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在原有Series基础上 改动索引      这个是肯定可以的，只要明白python语法以及Series对象，就知道怎么回事！！！</span></span><br><span class="line">myvar1.index = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(myvar1.index)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Index([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    google</span></span><br><span class="line"><span class="string">b    runoob</span></span><br><span class="line"><span class="string">c      wiki</span></span><br><span class="line"><span class="string">Name: myvar1, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar1[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(myvar1[<span class="string">&quot;a&quot;</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">google</span></span><br><span class="line"><span class="string">google</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################################还可以用key/value 对象，类似字典来创建 Series</span></span><br><span class="line">sites = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;google&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;runoob&#x27;</span>,<span class="number">3</span>:<span class="string">&#x27;wiki&#x27;</span>&#125;</span><br><span class="line">myvar2 = pd.Series(sites,name = <span class="string">&quot;myvar2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(myvar2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    google   ############可知，索引是自己随便定的。</span></span><br><span class="line"><span class="string">2    runoob</span></span><br><span class="line"><span class="string">3      wiki</span></span><br><span class="line"><span class="string">Name: myvar2, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#只需要字典中的一部分数据，只需要指定需要数据的索引即可</span></span><br><span class="line">myvar3 = pd.Series(sites,index=[<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>],name=<span class="string">&#x27;myvar3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(myvar3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a    google</span></span><br><span class="line"><span class="string">3      wiki</span></span><br><span class="line"><span class="string">Name: myvar3, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####################注意，data（列表）里面的数据并不一定只有单一的类型</span></span><br><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;hhh&#x27;</span>]</span><br><span class="line">myvar4 = pd.Series(data,name = <span class="string">&#x27;myvar4&#x27;</span>) <span class="comment"># 还指定名称。</span></span><br><span class="line"><span class="built_in">print</span>(myvar4)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0      1</span></span><br><span class="line"><span class="string">1      2</span></span><br><span class="line"><span class="string">2    hhh</span></span><br><span class="line"><span class="string">Name: myvar4, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
</feed>
