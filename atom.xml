<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-26T13:56:11.172Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>高明辉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Yolov5之无人机堤坝检测</title>
    <link href="http://example.com/2022/08/20/Yolov5%E4%B9%8B%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2022/08/20/Yolov5%E4%B9%8B%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B/</id>
    <published>2022-08-20T13:42:52.000Z</published>
    <updated>2022-09-26T13:56:11.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-yolov5环境配置："><a href="#1-yolov5环境配置：" class="headerlink" title="1 yolov5环境配置："></a>1 yolov5环境配置：</h2><p>（参考我前面的博客）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2021/10/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E7%9A%84ubuntu%E9%83%A8%E7%BD%B2yolov5-5-0/</span></span><br></pre></td></tr></table></figure><h2 id="2-数据集的制作"><a href="#2-数据集的制作" class="headerlink" title="2 数据集的制作"></a>2 数据集的制作</h2><p>(采用vcat工具，直接可以在视频上进行标注)（参考我前面的博客），</p><p>ps：配置vcat服务花费时间比较长，vcat这个工具不同于labelImg，后者是exe执行文件，直接就可以标注图片，但是vcat类似于面向服务编程，要安装docker，docker编排器拉取镜像，运行容器等等，最后将vcat服务跑起来，在浏览器访问，标注。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2022/06/08/vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/%E5%A0%A4%E5%9D%9D%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8Eyolov%E7%9B%AE%E5%BD%95%E5%85%B3%E7%B3%BB.png" alt="堤坝数据集与yolov目录关系"></p><h2 id="3-yolov5s训练自定义数据集方法"><a href="#3-yolov5s训练自定义数据集方法" class="headerlink" title="3 yolov5s训练自定义数据集方法"></a>3 yolov5s训练自定义数据集方法</h2><p>参考：（参考我前面的博客）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2021/11/13/yolov5-customData/</span></span><br></pre></td></tr></table></figure><h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4 效果"></a>4 效果</h2><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/frame_004750.PNG" alt="frame_004750"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/frame_004375.PNG" alt="frame_004375"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/yolo/3-%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%A0%A4%E5%9D%9D%E6%A3%80%E6%B5%8B-yolov5%E9%83%A8%E5%88%86/frame_004650.PNG" alt="frame_004650"></p><p>可以看到效果并不算很好，原因主要是数据集太少了，别人训练一个模型需要几个G的数据集，我这只有几十兆</p><p>解决方法：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">数据增强，网上找方法，接下来的工作</span></span><br><span class="line"><span class="attr">2</span> <span class="string">想办法拍更多的视频，继续标注，构建更加庞大的数据集</span></span><br><span class="line"><span class="attr">3</span> <span class="string">拍出来的几乎是正常的堤坝，标注时几乎没有几张图是可以作为有问题的堤坝标签</span></span><br><span class="line"><span class="attr">4</span> <span class="string">除了拍多一点照片，还需要不同类型的堤坝照片</span></span><br><span class="line"><span class="attr">5</span> <span class="string">有了不同类型堤坝的照片，训练时注意要先打乱数据集的顺序，有助于更好的收敛</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-yolov5环境配置：&quot;&gt;&lt;a href=&quot;#1-yolov5环境配置：&quot; class=&quot;headerlink&quot; title=&quot;1 yolov5环境配置：&quot;&gt;&lt;/a&gt;1 yolov5环境配置：&lt;/h2&gt;&lt;p&gt;（参考我前面的博客）&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="yolov5" scheme="http://example.com/tags/yolov5/"/>
    
    <category term="自定义数据模型" scheme="http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Vcat标注工具的安装和使用</title>
    <link href="http://example.com/2022/08/19/Vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/08/19/Vcat%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2022-08-19T13:46:33.000Z</published>
    <updated>2022-09-26T13:54:38.019Z</updated>
    
    <content type="html"><![CDATA[<p>前面用yolov5训练自定义的数据集（病虫害识别）的时候，用的是labellmg这款软件，但是这款软件不能处理视频的标注，最近张老师要我搞无人机堤坝检测项目，因此今天就来写写在视频上进行标注，制作数据集更高级一点的标注工具：vcat。话不多说，赶紧上车！</p><h1 id="1-Ubuntu-18-04上安装vcat"><a href="#1-Ubuntu-18-04上安装vcat" class="headerlink" title="1 Ubuntu 18.04上安装vcat"></a>1 Ubuntu 18.04上安装vcat</h1><p>参考教程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//openvinotoolkit.github.io/cvat/docs/administration/basics/installation/</span></span><br></pre></td></tr></table></figure><h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1 安装docker"></a>1 安装docker</h2><p>分别执行如下命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get --no-install-recommends install -y \</span></span><br><span class="line"><span class="string">  apt-transport-https \</span></span><br><span class="line"><span class="string">  ca-certificates \</span></span><br><span class="line"><span class="string">  curl \</span></span><br><span class="line"><span class="string">  gnupg-agent \</span></span><br><span class="line"><span class="string">  software-properties-common</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">curl</span> <span class="string">-fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">add-apt-repository \</span></span><br><span class="line"><span class="string">  &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  $(lsb_release -cs) \</span></span><br><span class="line"><span class="string">  stable&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get --no-install-recommends install -y docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure><p>分组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>注销并重新登录（或重新启动），以便重新评估您的组成员身份。之后，您可以在终端窗口中键入<code>groups</code>命令并检查<code>docker</code>组是否在其输出中。</p><h2 id="2-安装-docker-compose（1-19-0-或更高版本）"><a href="#2-安装-docker-compose（1-19-0-或更高版本）" class="headerlink" title="2 安装 docker-compose（1.19.0 或更高版本）"></a>2 安装 docker-compose（1.19.0 或更高版本）</h2><p>Compose 是一个用于定义和运行多容器 docker 应用程序的工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --no-install-recommends install -y python3-pip python3-setuptools</span><br><span class="line">sudo python3 -m pip install setuptools docker-compose</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jason@jason-virtual-machine:~$ pwd</span><br><span class="line">/home/jason</span><br></pre></td></tr></table></figure><h2 id="3-克隆cvat源代码"><a href="#3-克隆cvat源代码" class="headerlink" title="3 克隆cvat源代码"></a>3 克隆cvat源代码</h2><p>在/home/jason下，从 <a href="https://github.com/opencv/cvat">GitHub 存储</a><em>库克隆 CVAT</em>源代码。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt-get --no-install-recommends install -y git</span></span><br><span class="line"><span class="attr">git</span> <span class="string">clone https://github.com/opencv/cvat</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">cvat</span></span><br></pre></td></tr></table></figure><p>在上面第二步克隆时发生如下错误,折腾了一下，发现还是没解决，就不折腾了，直接使用手动下载zip，然后解压缩到当前目录的cvat目录下！</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Failed</span> <span class="string">to connect to github.com port 443: 拒绝连接</span></span><br></pre></td></tr></table></figure><p>要通过网络或通过其他系统访问 CVAT，请导出<code>CVAT_HOST</code>环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CVAT_HOST=your-ip-address</span><br><span class="line">如：</span><br><span class="line"><span class="built_in">export</span> CVAT_HOST=192.168.1.138</span><br></pre></td></tr></table></figure><h2 id="4-运行-docker-容器。"><a href="#4-运行-docker-容器。" class="headerlink" title="4 运行 docker 容器。"></a>4 运行 docker 容器。</h2><p>前面下载了docker，还下载安装了docker-compose(容器编排)，这里就要利用容器编排来下载并且运行vcat所需要的镜像啦：从 DockerHub 下载最新的 CVAT 版本和其他所需的镜像（如 postgres、redis 等）并创建容器需要一些时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>但是好奇怪，发生如下报错，提示docker-compose 命令找不到，命名上面已经安装了docker-compose了</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jason@jason-virtual-machine</span>:<span class="string">~/cvat$ docker-compose up -d</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Command</span> <span class="string">&#x27;docker-compose&#x27; not found, but can be installed with:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo</span> <span class="string">snap install docker          # version 20.10.14, or</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt  install docker-compose</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行sudo snap install docker之后再去执行docker-compose up -d命令，就可以将cvat相关镜像容器拉取并且运行起来</p><p>拉取并运行成功，执行 docker ps 命令可以看到正在运行的容器：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608151329919.png" alt="image-20220608151329919"></p><p>注意，这需要花费很长时间，因为拉取的几个镜像都很大，超1个G的镜像大小！</p><h2 id="5-创建一个超级用户"><a href="#5-创建一个超级用户" class="headerlink" title="5 创建一个超级用户"></a>5 创建一个超级用户</h2><p>超级用户可以使用管理面板为用户分配正确的组。请使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it cvat bash -ic &#x27;python3 ~/manage.py createsuperuser&#x27;</span><br></pre></td></tr></table></figure><p>需要输入超级用户的用户名以及邮箱，用户密码。邮箱输入自己的qq邮箱就好。用户名跟密码都是自己定的，比如admin，root分别是我的用户名跟密码。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608152304339.png" alt="image-20220608152304339"></p><p>到此为止，已经将cvat安装运行起来了</p><h2 id="6-访问vcat服务"><a href="#6-访问vcat服务" class="headerlink" title="6 访问vcat服务"></a>6 访问vcat服务</h2><p>vcat服务只支持谷歌浏览器访问，因此需要安装谷歌浏览器，当然，由于上面已经执行了命令：export CVAT_HOST=your-ip-address，因此，在ubuntu宿主机的windows系统上的谷歌浏览器也能访问ubuntu的cvat服务。刚开始浏览器访问：<a href="http://192.168.1.138:8080/%EF%BC%8C%E4%BC%9A%E6%8F%90%E7%A4%BA%E4%BD%A0%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%EF%BC%8C%E7%94%A8%E4%B8%8A%E9%9D%A2%E9%85%8D%E7%BD%AE%E7%9A%84%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E8%B7%9F%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E5%B0%B1%E5%A5%BD%E5%95%A6%E3%80%82">http://192.168.1.138:8080/，会提示你进行登录，用上面配置的超级用户的用户名跟密码登录就好啦。</a></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608155602684.png" alt="image-20220608155602684"></p><p>登录成功后显示如下页面</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608152905908.png" alt="image-20220608152905908"></p><p>当然，你也可以在ubuntu上安装谷歌浏览器，直接在ubuntu谷歌浏览器输入：<a href="http://127.0.0.1:8080/%E6%9D%A5%E8%AE%BF%E9%97%AEvcat%E6%9C%8D%E5%8A%A1%E3%80%82">http://127.0.0.1:8080/来访问vcat服务。</a></p><p>安装方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo apt-get -f install</span><br><span class="line"></span><br><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p>执行完后就可以在应用中找到,打开谷歌浏览器，将其添加到收藏夹就好啦。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608155111313.png" alt="image-20220608155111313"></p><h1 id="2-vcat服务标注工具的使用"><a href="#2-vcat服务标注工具的使用" class="headerlink" title="2 vcat服务标注工具的使用"></a>2 vcat服务标注工具的使用</h1><p>参考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/ZHUO__zhuo/article/details/125068660</span></span><br></pre></td></tr></table></figure><p>总结步骤为：</p><h2 id="1-开启cvat服务"><a href="#1-开启cvat服务" class="headerlink" title="1 开启cvat服务"></a>1 开启cvat服务</h2><p>ubuntu上开启cvat服务，然后windows登录进入cvat服务，然后新建任务</p><h2 id="2-对新任务进行设置"><a href="#2-对新任务进行设置" class="headerlink" title="2 对新任务进行设置"></a>2 对新任务进行设置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">任务名，</span></span><br><span class="line"><span class="attr">2</span> <span class="string">工程名，</span></span><br><span class="line"><span class="attr">3</span> <span class="string">添加标签</span></span><br><span class="line"><span class="attr">4</span> <span class="string">选择标注数据源（我这里是直接拖拽windows上的视频到浏览器中）</span></span><br><span class="line"><span class="attr">5</span> <span class="string">高级配置，我这里高级配置只设置了每隔25帧标注一次，起始帧</span></span><br><span class="line"><span class="attr">然后点击submit，任务就创建成功了。</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608170856792.png" alt="image-20220608170856792"></p><h2 id="3-标注"><a href="#3-标注" class="headerlink" title="3 标注"></a>3 标注</h2><p>点击相应Job就可以进行标注了</p><p>标注时点击左侧栏，如下图，点击shape就可以在图中进行标注了，然后可以选择标签类型，上下帧切换等，最好每画一个框都保存一次。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608220759657.png" alt="image-20220608220759657"></p><p>常用的快捷键，加快标注速度：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">保存：</span> <span class="string">Ctrl + S</span></span><br><span class="line"><span class="meta">删除：</span> <span class="string">Delete</span></span><br><span class="line"><span class="attr">缩放：鼠标滚轴，往上放大，向下缩小</span></span><br><span class="line"><span class="attr">拖动：鼠标左键点击并拖动图片，调整位置</span></span><br><span class="line"><span class="attr">下一帧：F</span></span><br><span class="line"><span class="attr">上一帧：D</span></span><br><span class="line"><span class="meta">向后跳十张</span>: <span class="string">Shift+Ctrl + V</span></span><br><span class="line"><span class="meta">向前跳十张</span>: <span class="string">Shift+Ctrl + C</span></span><br><span class="line"><span class="meta">复制框：Ctrl</span> <span class="string">+ C</span></span><br><span class="line"><span class="meta">粘贴框：Ctrl</span> <span class="string">+ V</span></span><br><span class="line"><span class="attr">重复上一次标注框参数：N，比如连续标一类头框，那么每次重复标时按N可以直接标下一个头框</span></span><br><span class="line"><span class="meta">对选定对象连续标注接下来所有帧内此对象：Ctrl</span> <span class="string">+ B</span></span><br><span class="line"><span class="attr">转换标签：Ctrl+(0..9)</span></span><br></pre></td></tr></table></figure><h2 id="4-导出："><a href="#4-导出：" class="headerlink" title="4 导出："></a>4 导出：</h2><p>导出时选择相应类型，然后下载为zip文件。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608222913963.png" alt="image-20220608222913963"></p><p>如下图，选择yolo 1.1 类型，下载的文件就是png的图片跟txt标注文件。</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608222930991.png" alt="image-20220608222930991"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/1654745537(1).jpg" alt="1654745537(/img/深度学习/cvat/1654745537(1).jpg)"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/cvat/image-20220608223240874.png" alt="image-20220608223240874"></p><h2 id="5-注意："><a href="#5-注意：" class="headerlink" title="5  注意："></a>5  注意：</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">导出文件中，文件名就是原视频的第几帧，而网站中的当前帧就是提取后的帧的第几帧。</span></span><br><span class="line"><span class="attr">2</span> <span class="string">我们在创建任务时，设置的隔几帧标注一次，这个挺重要，如果设置的太低，那么很多图片几乎都是一样的</span></span><br><span class="line"><span class="attr">设置的太高，那么又容易错过一些数据集，因此看原视频本身的画面切换速度而定吧</span></span><br><span class="line"><span class="attr">3</span> <span class="string">保存时，会将所有的帧都保存下来，就算没有进行方框标注的帧也会保存下来（图片+txt标注文件）</span></span><br><span class="line"><span class="attr">如果原视频拍摄的比较多额外内容的话，保存下来的数据集可能会比较杂，这点要注意</span></span><br><span class="line"><span class="attr">确实比较杂时最后标注时记下来标注过的帧是第几帧，直接在导出保存的文件中，将我们标注过的数据集提取出来</span></span><br><span class="line"><span class="attr">这样子的数据集才比较纯净。</span></span><br><span class="line"><span class="attr">4</span> <span class="string">网上还看到一些数据增强方式，将导出下载的数据集再次进行增强，能多出六倍的数据集，这里读者可以自行测试一下</span></span><br><span class="line"><span class="attr">5</span> <span class="string">将标注过的数据集再次倒进来，再次继续标注，完善某些帧的标注，这里也请读者自己自行测试吧。</span></span><br></pre></td></tr></table></figure><h2 id="推荐阅读："><a href="#推荐阅读：" class="headerlink" title="推荐阅读："></a>推荐阅读：</h2><p>yolov5+vcat标注工具结合来训练自定义数据教程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.51cto.com/u_13565704/5136654</span></span><br></pre></td></tr></table></figure><p>常用数据标注工具：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//baijiahao.baidu.com/s?id=1727327620467031481&amp;wfr=spider&amp;for=pc</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面用yolov5训练自定义的数据集（病虫害识别）的时候，用的是labellmg这款软件，但是这款软件不能处理视频的标注，最近张老师要我搞无人机堤坝检测项目，因此今天就来写写在视频上进行标注，制作数据集更高级一点的标注工具：vcat。话不多说，赶紧上车！&lt;/p&gt;
&lt;h1 i</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="vcat" scheme="http://example.com/tags/vcat/"/>
    
  </entry>
  
  <entry>
    <title>windows中安装多个nodejs</title>
    <link href="http://example.com/2022/08/19/windows%E4%B8%AD%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAnodejs/"/>
    <id>http://example.com/2022/08/19/windows%E4%B8%AD%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAnodejs/</id>
    <published>2022-08-19T13:38:16.000Z</published>
    <updated>2022-09-26T13:39:50.928Z</updated>
    
    <content type="html"><![CDATA[<p>搞elasticsearch 需要用到kibana 的可视化操作，但是需要下载对应的nodejs版本，但原来用作hexo博客的nodejs也需要维护一个nodejs版本，因此使用nvm来同时安装并且随意切换nodejs版本！</p><h3 id="1-下载nvm"><a href="#1-下载nvm" class="headerlink" title="1.下载nvm"></a>1.下载nvm</h3><p>下载地址：（选择下载<a href="https://github.com/coreybutler/nvm-windows/releases/download/1.1.9/nvm-setup.exe">nvm-setup.exe</a>）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//github.com/coreybutler/nvm-windows/releases</span></span><br></pre></td></tr></table></figure><p>注意：安装前，这里有一点需要注意，如果以前安装过node，需要先卸载(卸载方法就是像普通软件那样卸载就好啦），并且要把目录清理干净删除下面2个文件夹：C:\Program Files\nodejs和 C:\Users\AppData\Roaming\npm</p><h3 id="2-nvm安装目录"><a href="#2-nvm安装目录" class="headerlink" title="2 nvm安装目录"></a>2 nvm安装目录</h3><p><img src="https://img-blog.csdnimg.cn/20210317172150617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgxNjMwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-nodejs-安装目录"><a href="#3-nodejs-安装目录" class="headerlink" title="3 nodejs 安装目录"></a>3 nodejs 安装目录</h3><p>（利用nvm下载的nodejs目录），这里上下两个路径都不要有特殊字符以及空格以及中文，而且<strong>原路径要存在</strong>！！！</p><p><img src="https://img-blog.csdnimg.cn/20210317172221993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgxNjMwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-查看当前已经安装的nodejs的版本"><a href="#4-查看当前已经安装的nodejs的版本" class="headerlink" title="4 查看当前已经安装的nodejs的版本"></a>4 查看当前已经安装的nodejs的版本</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt;nvm list</span></span><br><span class="line"><span class="attr">No</span> <span class="string">installations recognized.</span></span><br></pre></td></tr></table></figure><p>因为是第一次安装，所以并没有安装任何版本的。</p><h3 id="5-配置淘宝镜像源："><a href="#5-配置淘宝镜像源：" class="headerlink" title="5 配置淘宝镜像源："></a>5 配置淘宝镜像源：</h3><p>在你nvm-windows安装的目录下找到settings.txt文件，打开后加上</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node_mirror</span>: <span class="string">https://npm.taobao.org/mirrors/node/</span></span><br><span class="line"><span class="attr">npm_mirror</span>: <span class="string">https://npm.taobao.org/mirrors/npm/</span></span><br></pre></td></tr></table></figure><h5 id="5-查看可以安装的nodejs版本"><a href="#5-查看可以安装的nodejs版本" class="headerlink" title="5 查看可以安装的nodejs版本"></a>5 查看可以安装的nodejs版本</h5><p><img src="https://img-blog.csdnimg.cn/20210317172612896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgxNjMwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-安装制定版本的node"><a href="#6-安装制定版本的node" class="headerlink" title="6 安装制定版本的node"></a>6 安装制定版本的node</h3><p>这里安装了8.10.0和15.10.0两个版本</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">//V5.6.0</span></span><br><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt;nvm install 8.10.0</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">node.js version 8.10.0 (64-bit)...</span></span><br><span class="line"><span class="attr">Complete</span></span><br><span class="line"><span class="attr">Creating</span> <span class="string">E:\worksoftware\nvm\temp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">npm version 3.6.0... Complete</span></span><br><span class="line"><span class="attr">Installing</span> <span class="string">npm v3.6.0...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Installation</span> <span class="string">complete. If you want to use this version, type</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nvm</span> <span class="string">use 8.10.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//V10.5.0</span></span><br><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt;nvm install 15.10.0</span></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">node.js version 15.10.0 (64-bit)...</span></span><br><span class="line"><span class="attr">Complete</span></span><br><span class="line"><span class="attr">Creating</span> <span class="string">E:\worksoftware\nvm\temp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Downloading</span> <span class="string">npm version 6.1.0... Complete</span></span><br><span class="line"><span class="attr">Installing</span> <span class="string">npm v6.1.0...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Installation</span> <span class="string">complete. If you want to use this version, type</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nvm</span> <span class="string">use 15.10.0</span></span><br></pre></td></tr></table></figure><h3 id="7-再次查看已安装的版本"><a href="#7-再次查看已安装的版本" class="headerlink" title="7  再次查看已安装的版本"></a>7  再次查看已安装的版本</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt; nvm list</span></span><br><span class="line">    <span class="attr">8.10.0</span></span><br><span class="line">    <span class="attr">15.10.0</span></span><br></pre></td></tr></table></figure><h3 id="8-使用指定版本的node"><a href="#8-使用指定版本的node" class="headerlink" title="8  使用指定版本的node"></a>8  使用指定版本的node</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt;nvm use 8.10.0</span></span><br><span class="line"><span class="attr">Now</span> <span class="string">using node v8.10.0 (64-bit)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt;nvm list</span></span><br><span class="line">    <span class="attr">15.10.0</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">*</span> <span class="string">8.10.0 (Currently using 64-bit executable)</span></span><br><span class="line">  <span class="meta">*</span> <span class="string">C:\Users\holyhui&gt;node -v</span></span><br><span class="line">    <span class="attr">v8.10.0</span></span><br></pre></td></tr></table></figure><p>nvm use 可能会出现exit status 1:乱码，用管理员打开cmd即可！参考如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/weixin_44074879/article/details/121671731</span></span><br></pre></td></tr></table></figure><h3 id="9-删除指定版本的node"><a href="#9-删除指定版本的node" class="headerlink" title="9 删除指定版本的node"></a>9 删除指定版本的node</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">C</span>:<span class="string">\Users\holyhui&gt;nvm uninstall 8.10.0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;搞elasticsearch 需要用到kibana 的可视化操作，但是需要下载对应的nodejs版本，但原来用作hexo博客的nodejs也需要维护一个nodejs版本，因此使用nvm来同时安装并且随意切换nodejs版本！&lt;/p&gt;
&lt;h3 id=&quot;1-下载nvm&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>ali短信服务的开通和基本配置与测试</title>
    <link href="http://example.com/2022/08/18/ali%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%BC%80%E9%80%9A%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2022/08/18/ali%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%BC%80%E9%80%9A%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%B5%8B%E8%AF%95/</id>
    <published>2022-08-18T13:51:35.000Z</published>
    <updated>2022-09-26T13:52:31.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-开通服务"><a href="#1-开通服务" class="headerlink" title="1.开通服务"></a>1.开通服务</h1><h2 id="1-1-注册阿里云"><a href="#1-1-注册阿里云" class="headerlink" title="1.1.注册阿里云"></a>1.1.注册阿里云</h2><p>登录阿里云首页：<a href="https://account.aliyun.com/">https://account.aliyun.com/</a></p><p>然后注册账号并登录</p><h2 id="1-2-开通短信服务"><a href="#1-2-开通短信服务" class="headerlink" title="1.2.开通短信服务"></a>1.2.开通短信服务</h2><p>在首页的产品中，找到短信服务：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553774972732.png" alt="1553774972732"></p><p>首次登入会显示：<code>立即开通</code>，以后会显示<code>管理控制台</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775033013.png" alt="1553775033013"></p><p>可以看到控制台页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775085494.png" alt="1553775085494"></p><h2 id="1-3-付费充值"><a href="#1-3-付费充值" class="headerlink" title="1.3.付费充值"></a>1.3.付费充值</h2><p>在顶部菜单中选择费用，充值：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775135337.png" alt="1553775135337"></p><p>充值后即可使用短信服务发送短信了。</p><h1 id="2-服务准备"><a href="#2-服务准备" class="headerlink" title="2.服务准备"></a>2.服务准备</h1><p>正式开发发送短信前，还有一系列准备工作要做，主要包括以下几个部分：</p><ul><li>开通子账户，设置AccessKeyId和AccessKeySecret</li><li>开通子账户短信权限</li><li>申请短信签名</li><li>申请短信模板</li></ul><h2 id="2-1-开通子账户"><a href="#2-1-开通子账户" class="headerlink" title="2.1.开通子账户"></a>2.1.开通子账户</h2><p>出于安全考虑，我们不能直接使用主账号开发，因为主账号具备整个云服务的完整权限，风险比较大。</p><p>所以，我们首先需要开通子账户，用于业务开发。</p><p>点击右上角的用户头像，可以选择权限控制：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775502900.png" alt="1553775502900"></p><p>然后在弹出的页面中，选择新建用户：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775567420.png" alt="1553775567420"></p><p>然后输入用户名，并选择<code>编程访问</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775613059.png" alt="1553775613059"></p><p>这样创建的用户就会带上AccessKeyID和AccessKeySecret了。</p><h2 id="2-2-开通短信权限"><a href="#2-2-开通短信权限" class="headerlink" title="2.2.开通短信权限"></a>2.2.开通短信权限</h2><p>在用户列表页面，选中一个新建的用户：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775787645.png" alt="1553775787645"></p><p>然后会进入用户设置页面，我们选择权限管理，并添加权限：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775853645.png" alt="1553775853645"></p><p>在弹出的列表页面中，搜索<code>短信</code>相关权限：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553775924262.png" alt="1553775924262"></p><p>选中<code>管理短信服务（SMS）的权限</code>，点击确定即可！</p><h2 id="2-3-短信签名"><a href="#2-3-短信签名" class="headerlink" title="2.3.短信签名"></a>2.3.短信签名</h2><p>什么是短信签名？</p><p>短信签名是短信服务提供的一种快捷、方便的个性化签名方式。当发送短信时，短信平台会根据设置，在短信内容里附加个性签名，再发送给指定手机号码。</p><p>例如，企业主体为“阿里巴巴网络技术有限公司”，则可以提交的签名如下：</p><ul><li>企业全称或简称：【阿里巴巴】、【阿里巴巴网络技术有限公司】。</li><li>公司旗下产品名称：【淘宝网】、【阿里云】等。</li></ul><p>签名会在短信的开头携带，标示短信发送方的身份。</p><p>在管理控制台，找到国内短信菜单：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553776096731.png" alt="1553776096731"></p><p>点击添加签名，进入签名申请页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553776151886.png" alt="1553776151886"></p><p>填写信息后，点击确定，等待人工审核即可。</p><h2 id="2-4-短信模板"><a href="#2-4-短信模板" class="headerlink" title="2.4.短信模板"></a>2.4.短信模板</h2><p>什么是短信模板？</p><p>阿里肯定不会允许你随意发送短信，因此会要求你提前定义好短信发送的内容。当然，内容中允许出现一些参数变量，但基本内容是固定的，这样的一套定义好的短信内容，就是<strong>短信模板</strong>。</p><p><strong>短信模板由变量和模板内容构成</strong>。模板变量以变量形式提供针对不同手机号码的短信定制方式，在模板中设置变量后，发送短信时指定变量的实际值，短信服务会自动用实际值替换模板变量，并发送短信，实现短信的定制化。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【阿里云】您正在申请手机注册，验证码为：$&#123;code&#125;，5分钟内有效！</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><strong>模板内容</strong>为：<code>您正在申请手机注册，验证码为：$&#123;code&#125;，5分钟内有效！</code>。</li><li><strong>模板变量</strong>为：<code>$&#123;code&#125;</code>。</li></ul><blockquote><p>申请模板</p></blockquote><p>在国内短信菜单中，点击模板管理，</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553776492454.png" alt="1553776492454"></p><p>再点击添加模板按钮，进入模板申请页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553776566827.png" alt="1553776566827"></p><p>填写信息后，点击提交，等待人工审核即可！</p><h1 id="3-阿里SDK"><a href="#3-阿里SDK" class="headerlink" title="3.阿里SDK"></a>3.阿里SDK</h1><h2 id="3-1-官方文档"><a href="#3-1-官方文档" class="headerlink" title="3.1.官方文档"></a>3.1.官方文档</h2><p>发送短信最终要通过java代码，我们可以再阿里找到对应的文档信息：<a href="https://help.aliyun.com/document_detail/101414.html?spm=a2c4g.11186623.6.615.635850a4SVoFBk">短信发送文档</a></p><p>请求参数：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必选</th><th>示例值</th><th>描述</th></tr></thead><tbody><tr><td><strong>PhoneNumbers</strong></td><td>String</td><td>是</td><td>15900000000</td><td>接收短信的手机号码。格式：国内短信：11位手机号码，例如15951955195。国际/港澳台消息：国际区号+号码，例如85200000000。支持对多个手机号码发送短信，手机号码之间以英文逗号（,）分隔。上限为1000个手机号码。批量调用相对于单条调用及时性稍有延迟。<strong>说明</strong> 验证码类型短信，建议使用单独发送的方式。</td></tr><tr><td><strong>SignName</strong></td><td>String</td><td>是</td><td>阿里云</td><td>短信签名名称。请在控制台<strong>签名管理</strong>页面<strong>签名名称</strong>一列查看。<strong>说明</strong> 必须是已添加、并通过审核的短信签名。</td></tr><tr><td><strong>TemplateCode</strong></td><td>String</td><td>是</td><td>SMS_153055065</td><td>短信模板ID。请在控制台<strong>模板管理</strong>页面<strong>模板CODE</strong>一列查看。<strong>说明</strong> 必须是已添加、并通过审核的短信签名；且发送国际/港澳台消息时，请使用国际/港澳台短信模版。</td></tr><tr><td><strong>AccessKeyId</strong></td><td>String</td><td>否</td><td>LTAIP00vvvvvvvvv</td><td>主账号AccessKey的ID。</td></tr><tr><td><strong>Action</strong></td><td>String</td><td>否</td><td>SendSms</td><td>系统规定参数。取值：<strong>SendSms</strong>。</td></tr><tr><td><strong>OutId</strong></td><td>String</td><td>否</td><td>abcdefgh</td><td>外部流水扩展字段。</td></tr><tr><td><strong>SmsUpExtendCode</strong></td><td>String</td><td>否</td><td>90999</td><td>上行短信扩展码，无特殊需要此字段的用户请忽略此字段。</td></tr><tr><td><strong>TemplateParam</strong></td><td>String</td><td>否</td><td>{“code”:”1111”}</td><td>短信模板变量对应的实际值，JSON格式。<strong>说明</strong> 如果JSON中需要带换行符，请参照标准的JSON协议处理。</td></tr></tbody></table><p>返回结果：</p><table><thead><tr><th>名称</th><th>类型</th><th>示例值</th><th>描述</th></tr></thead><tbody><tr><td>BizId</td><td>String</td><td>900619746936498440^0</td><td>发送回执ID，可根据该ID在接口QuerySendDetails中查询具体的发送状态。</td></tr><tr><td>Code</td><td>String</td><td>OK</td><td>请求状态码。返回OK代表请求成功。其他错误码详见<a href="https://help.aliyun.com/document_detail/101346.html">错误码列表</a>。</td></tr><tr><td>Message</td><td>String</td><td>OK</td><td>状态码的描述。</td></tr><tr><td>RequestId</td><td>String</td><td>F655A8D5-B967-440B-8683-DAD6FF8DE990</td><td>请求ID。</td></tr></tbody></table><h2 id="3-2-官方Demo"><a href="#3-2-官方Demo" class="headerlink" title="3.2.官方Demo"></a>3.2.官方Demo</h2><p>阿里提供了在线测试的Demo：<a href="https://api.aliyun.com/?spm=a2c4g.11186623.2.14.56ef50a4PQx5ux#/?product=Dysmsapi&amp;api=SendSms">https://api.aliyun.com/?spm=a2c4g.11186623.2.14.56ef50a4PQx5ux#/?product=Dysmsapi&amp;api=SendSms</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/image-20200719151428659.png" alt="image-20200719151428659"></p><p>填写基本信息，即可发送并测试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-开通服务&quot;&gt;&lt;a href=&quot;#1-开通服务&quot; class=&quot;headerlink&quot; title=&quot;1.开通服务&quot;&gt;&lt;/a&gt;1.开通服务&lt;/h1&gt;&lt;h2 id=&quot;1-1-注册阿里云&quot;&gt;&lt;a href=&quot;#1-1-注册阿里云&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="JWT" scheme="http://example.com/categories/JWT/"/>
    
    
    <category term="阿里短信服务" scheme="http://example.com/tags/%E9%98%BF%E9%87%8C%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ整合SpringBoot和邮件发送</title>
    <link href="http://example.com/2022/08/18/RabbitMQ%E6%95%B4%E5%90%88SpringBoot%E5%92%8C%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <id>http://example.com/2022/08/18/RabbitMQ%E6%95%B4%E5%90%88SpringBoot%E5%92%8C%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</id>
    <published>2022-08-18T13:42:00.000Z</published>
    <updated>2022-09-26T13:57:37.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合邮件发送"><a href="#SpringBoot整合邮件发送" class="headerlink" title="SpringBoot整合邮件发送"></a>SpringBoot整合邮件发送</h1><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20210708162108584.png" alt="image-20210708162108584"></p><p>说明：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">最下面的几个箭头表示备份，</span></span><br><span class="line"><span class="attr">2</span> <span class="string">最上面的双向箭头中的向下箭头表示刷新，</span></span><br><span class="line"><span class="attr">强制查看有没有接受到邮箱，</span></span><br><span class="line"><span class="attr">自己不手动刷新，那么就是定时刷新查看有没有邮箱到达</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-完成邮件的投递"><a href="#SpringBoot-完成邮件的投递" class="headerlink" title="SpringBoot 完成邮件的投递"></a>SpringBoot 完成邮件的投递</h2><p>准备工作： 登录自己的开通邮件的 以163为例      </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574189645.png" alt="1600574189645"> </p><p>生成自己唯一的授权码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574220514.png" alt="1600574220514"> </p><ul><li>基于springboot环境导入email发送依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springboot邮件发送--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置邮件发送参数  yaml文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#  邮件发送配置</span><br><span class="line">#  spring.mail.username=fanqixxxx@163.com</span><br><span class="line">#  spring.mail.password=xxxxxxx  填写授权码</span><br><span class="line">#  spring.mail.host=smtp.163.com  填写邮箱供应的SMTP地址</span><br><span class="line">#  spring.mail.properties.mail.smtp.ssl.enable=true</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="comment"># 发送者的邮箱地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xsitheima163@163.com</span></span><br><span class="line">  <span class="comment"># 此密码并非登录的密码,而是使用java代码发送邮件时使用的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">AKELOGXEFRJZOAWU</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>编写测试类 完成邮件发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailSend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            message.setSubject(<span class="string">&quot;传智健康官方邮件&quot;</span>);</span><br><span class="line">            message.setText(<span class="string">&quot;你好，请保持好验证码：7788，打死都不能泄露给你的同桌&quot;</span>);</span><br><span class="line">            message.setTo(<span class="string">&quot;tps520tps@163.com&quot;</span>);</span><br><span class="line">            message.setFrom(<span class="string">&quot;tps520wx@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MailException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查收邮件：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574300195.png" alt="1600574300195"> </p><p>邮件发送示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendEmailApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            message.setSubject(<span class="string">&quot;表白邮件&quot;</span>);</span><br><span class="line">            message.setText(<span class="string">&quot;rose 你好, 我想.....&quot;</span>);</span><br><span class="line">            message.setTo(<span class="string">&quot;xsitheima126@126.com&quot;</span>);</span><br><span class="line">            message.setFrom(<span class="string">&quot;xsitheima163@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">            System.out.println(<span class="string">&quot;========发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MailException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="预备账号"><a href="#预备账号" class="headerlink" title="预备账号"></a>预备账号</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xsitheima126@<span class="number">126.</span>com    a123456</span><br><span class="line">    授权码: YKJOGNHCCFDLIJKO</span><br><span class="line">xsitheima163@<span class="number">163.</span>com    a12345678</span><br><span class="line">授权码: AKELOGXEFRJZOAWU</span><br></pre></td></tr></table></figure><h1 id="SpringBoot整合RabbitMQ以及整合邮件发送"><a href="#SpringBoot整合RabbitMQ以及整合邮件发送" class="headerlink" title="SpringBoot整合RabbitMQ以及整合邮件发送"></a>SpringBoot整合RabbitMQ以及整合邮件发送</h1><p>整合描述：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span> <span class="string">boot 中生产者的controller类提供的 访问地址带的参数就是邮箱账号，</span></span><br><span class="line"><span class="meta">访问生产者的</span> <span class="string">spring boot controller 并且将邮箱账号作为消息，</span></span><br><span class="line"><span class="attr">消费者拿到的信息就是邮箱账号，</span></span><br><span class="line"><span class="meta">然后消费者使用163账号给接收到的邮箱账号</span> <span class="string">发送邮件！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ps：先启动消费者，然后再启动生产者，生产者生产10次邮箱信息，那么消费者发送十次邮箱。</span></span><br><span class="line"><span class="attr">消息工作模式为直连模式！</span></span><br></pre></td></tr></table></figure><h3 id="1-消费者代码"><a href="#1-消费者代码" class="headerlink" title="1 消费者代码"></a>1 消费者代码</h3><h4 id="消费者配置文件："><a href="#消费者配置文件：" class="headerlink" title="消费者配置文件："></a>消费者配置文件：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="comment"># 发送者的邮箱地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xsitheima163@163.com</span></span><br><span class="line">  <span class="comment"># 此密码并非登录的密码,而是使用java代码发送邮件时使用的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">AKELOGXEFRJZOAWU</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="消费者pom-xml文件"><a href="#消费者pom-xml文件" class="headerlink" title="消费者pom.xml文件"></a>消费者pom.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--springboot邮件发送--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="消费者启动文件："><a href="#消费者启动文件：" class="headerlink" title="消费者启动文件："></a>消费者启动文件：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换器: 将对象转成json并存放到MQ中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="消费者监听生产者类："><a href="#消费者监听生产者类：" class="headerlink" title="消费者监听生产者类："></a>消费者监听生产者类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg : 参数类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;boot-queue&quot;)</span><span class="comment">//  注意只需要 队列名称一致即可！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String msg, Channel channel, Message message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//public void receive(Map msg, Channel channel, Message message) throws IOException &#123;</span></span><br><span class="line">        <span class="comment">//会话唯一ID</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息 &quot;</span> + msg);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;收到消息 &quot; + new String(message.getBody()));</span></span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;message:&quot; +message.toString());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// =====================发送邮件</span></span><br><span class="line">            <span class="comment">// 编写邮件信息</span></span><br><span class="line">            SimpleMailMessage emailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            <span class="comment">// 邮件主题</span></span><br><span class="line">            emailMessage.setSubject(<span class="string">&quot;下单通知&quot;</span>);</span><br><span class="line">            <span class="comment">// 邮件内容</span></span><br><span class="line">            emailMessage.setText(<span class="string">&quot;您的宝贝以发货&quot;</span>);</span><br><span class="line">            emailMessage.setTo(msg);</span><br><span class="line">            emailMessage.setFrom(<span class="string">&quot;xsitheima163@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(emailMessage);</span><br><span class="line">            System.out.println(<span class="string">&quot;========发送成功&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-生产者代码："><a href="#2-生产者代码：" class="headerlink" title="2 生产者代码："></a>2 生产者代码：</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">producer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br></pre></td></tr></table></figure><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换器: 将对象转成json并存放到MQ中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Controller类"><a href="#Controller类" class="headerlink" title="Controller类"></a>Controller类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// rabbit客户端对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send/&#123;msg&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable(&quot;msg&quot;)</span> String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 参数1: 队列名称,操作的队列必须实现存在</span></span><br><span class="line">        <span class="comment">// 参数2: 存放的消息信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;boot-queue&quot;</span>,msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot整合邮件发送&quot;&gt;&lt;a href=&quot;#SpringBoot整合邮件发送&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合邮件发送&quot;&gt;&lt;/a&gt;SpringBoot整合邮件发送&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img</summary>
      
    
    
    
    <category term="RabbitMQ" scheme="http://example.com/categories/RabbitMQ/"/>
    
    
    <category term="RabbitMQ" scheme="http://example.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>使用学生邮箱登录idea</title>
    <link href="http://example.com/2022/08/16/%E4%BD%BF%E7%94%A8%E5%AD%A6%E7%94%9F%E9%82%AE%E7%AE%B1%E7%99%BB%E5%BD%95idea/"/>
    <id>http://example.com/2022/08/16/%E4%BD%BF%E7%94%A8%E5%AD%A6%E7%94%9F%E9%82%AE%E7%AE%B1%E7%99%BB%E5%BD%95idea/</id>
    <published>2022-08-16T13:50:38.000Z</published>
    <updated>2022-09-26T13:53:30.898Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-找到自己所在的学校给自己分配的学生邮箱。"><a href="#1-找到自己所在的学校给自己分配的学生邮箱。" class="headerlink" title="1 找到自己所在的学校给自己分配的学生邮箱。"></a>1 找到自己所在的学校给自己分配的学生邮箱。</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">我是直接百度的，进入链接发现是内部网里面的公告，公文通</span></span><br><span class="line"><span class="attr">公告很清晰说明给我们分配的邮箱跟密码是多少</span></span><br></pre></td></tr></table></figure><h3 id="2-使用分配的邮箱去认证idea-如下是认证页面"><a href="#2-使用分配的邮箱去认证idea-如下是认证页面" class="headerlink" title="2 使用分配的邮箱去认证idea,如下是认证页面"></a>2 使用分配的邮箱去认证idea,如下是认证页面</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//www.jetbrains.com/shop/eform/students</span></span><br></pre></td></tr></table></figure><p>使用邮箱认证，填写信息就好。</p><h3 id="3-利用认证的学生邮箱注册一个idea账号"><a href="#3-利用认证的学生邮箱注册一个idea账号" class="headerlink" title="3 利用认证的学生邮箱注册一个idea账号"></a>3 利用认证的学生邮箱注册一个idea账号</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//account.jetbrains.com/signup-complete</span></span><br></pre></td></tr></table></figure><p>注册完账号就会提示，你这是学生账号，已经授权，享有哪些资源。</p><p><img src="/img/java/idea/1.png" alt="803e2a688844f57fa3fa425a70a122c"></p><h3 id="4-使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）"><a href="#4-使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）" class="headerlink" title="4 使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）"></a>4 使用3中注册的idea账号在社区版idea中登录账号（学生邮箱跟密码登录）</h3><p>（账号密码跟学生邮箱密码是不同的一个密码，当然你也可以设为一样）</p><p><img src="/img/java/idea/2.png" alt="4428d753eebde9c4e8fe9d01e295981"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-找到自己所在的学校给自己分配的学生邮箱。&quot;&gt;&lt;a href=&quot;#1-找到自己所在的学校给自己分配的学生邮箱。&quot; class=&quot;headerlink&quot; title=&quot;1 找到自己所在的学校给自己分配的学生邮箱。&quot;&gt;&lt;/a&gt;1 找到自己所在的学校给自己分配的学生邮</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx部署静态资源以及反向代理的配置方式大总结</title>
    <link href="http://example.com/2022/08/16/nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E5%A4%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/08/16/nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E5%A4%A7%E6%80%BB%E7%BB%93/</id>
    <published>2022-08-16T13:09:14.000Z</published>
    <updated>2022-08-16T13:10:27.678Z</updated>
    
    <content type="html"><![CDATA[<p>nginx 的几种功能介绍：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">本机静态资源部署，</span></span><br><span class="line"><span class="comment">    # 匹配localhost下的一切路径</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line"><span class="comment">        # 默认资源去nginx目录下的html目录寻找</span></span><br><span class="line">        <span class="attr">root</span>   <span class="string">html;</span></span><br><span class="line">        <span class="attr">index</span>  <span class="string">index.html index.htm;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">    # 访问：http://localhost/  就是nginx目录下的html文件夹下的资源</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">location</span> <span class="string">/gaominghui &#123;</span></span><br><span class="line">        <span class="attr">alias</span> <span class="string">F:/java/MyCode/leyouProject/leyou-portal/;</span></span><br><span class="line">        <span class="attr">index</span> <span class="string">index.html;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">    # 访问：http://localhost/gaominghui/  就是F:/java/MyCode/leyouProject/leyou-portal/文件夹下的资源</span></span><br><span class="line"><span class="attr">2</span> <span class="string">本机静态资源反向代理，直接在外部conf配置文件进行如下配置就好：</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span>       <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span>  <span class="string">image.leyou.com;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line"><span class="comment">            # 默认资源去nginx目录下的html目录寻找</span></span><br><span class="line">            <span class="attr">root</span>   <span class="string">html;</span></span><br><span class="line">            <span class="attr">index</span>  <span class="string">/images/0/0/1524297512647.jpg;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># 访问 http://image.leyou.com/ 就是访问nginx目录下的html文件夹下的资源</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span>       <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span>  <span class="string">www.leyou.com;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">                <span class="attr">root</span><span class="string">F:/java/MyCode/leyouProject/leyou-portal;</span></span><br><span class="line">                <span class="attr">index</span><span class="string">index.html;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">    # 访问：http://www.leyou.com/  就是F:/java/MyCode/leyouProject/leyou-portal/文件夹下的资源</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">3</span> <span class="string">微服务反向代理,直接在外部conf配置文件进行如下配置就好：</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span>       <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span>  <span class="string">manage.leyou.com;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">            <span class="attr">proxy_pass</span>   <span class="string">http://127.0.0.1:9001;</span></span><br><span class="line">            <span class="attr">proxy_connect_timeout</span> <span class="string">600;</span></span><br><span class="line">            <span class="attr">proxy_read_timeout</span> <span class="string">5000;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># 访问 http://www.manage.leyou.com  会反向代理到http://127.0.0.1:9001</span></span><br></pre></td></tr></table></figure><p><strong>注意注意注意：</strong>上面使用域名的反向代理，一定要在本地hosts域名配置文件中配置域名映射！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nginx 的几种功能介绍：&lt;/p&gt;
&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="nginx" scheme="http://example.com/categories/nginx/"/>
    
    
    <category term="nginx" scheme="http://example.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>i9电脑安装ubuntu18.04有线网图标没有显示且连接不上网络</title>
    <link href="http://example.com/2022/08/15/i9%E7%94%B5%E8%84%91%E5%AE%89%E8%A3%85ubuntu18-04%E6%9C%89%E7%BA%BF%E7%BD%91%E5%9B%BE%E6%A0%87%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA%E4%B8%94%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2022/08/15/i9%E7%94%B5%E8%84%91%E5%AE%89%E8%A3%85ubuntu18-04%E6%9C%89%E7%BA%BF%E7%BD%91%E5%9B%BE%E6%A0%87%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA%E4%B8%94%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%BD%91%E7%BB%9C/</id>
    <published>2022-08-15T08:28:17.000Z</published>
    <updated>2022-08-15T08:48:27.414Z</updated>
    
    <content type="html"><![CDATA[<p>最近要搞无人机平台的堤坝识别，张老师买回来一台i9处理器的服务器，让我配置环境，谁知道安装了系统ubuntu18.04之后无法上网，刚开始ping不同百度，然后ifconfig，提示没有这个工具，再然后sudo apt-get install net-tools 没有对应的包，再然后是 sudo apt-get update 出现域名解析失败，再然后手动配置万能域名，再到更还源，都试了还是不行。</p><p>最后搜索到一下博客：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/weixin_44359479/article/details/123019056</span></span><br></pre></td></tr></table></figure><p>原来是没有对应的驱动，网卡驱动是有的，官网上的ubuntu镜像，怎么可能没有驱动，只是硬件版本不对，驱动不兼容，以前windows电脑重装都需要安装驱动精灵，扫描一下网卡，声卡这些驱动有没有安装成功，现在ubuntu系统重装我怎么就没想到呢，而且学arm的时候也是，一般是网卡驱动的问题。</p><p>具体解决方法如下：</p><h3 id="1-终端输入"><a href="#1-终端输入" class="headerlink" title="1.终端输入"></a>1.终端输入</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lspci</span></span><br></pre></td></tr></table></figure><p>查看网卡型号</p><h3 id="2-通过另一台可以上网的电脑，在官网下载对应型号"><a href="#2-通过另一台可以上网的电脑，在官网下载对应型号" class="headerlink" title="2.通过另一台可以上网的电脑，在官网下载对应型号"></a>2.通过另一台可以上网的电脑，在官网下载对应型号</h3><p><img src="https://img-blog.csdnimg.cn/23e51a1e888d4a1f8b51c1b16cd77964.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5piO5b63emh1YW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="3-下载完之后，还需要下载build-essential文件包。下面给出链接，可打包下载至电脑中。"><a href="#3-下载完之后，还需要下载build-essential文件包。下面给出链接，可打包下载至电脑中。" class="headerlink" title="3.下载完之后，还需要下载build-essential文件包。下面给出链接，可打包下载至电脑中。"></a>3.下载完之后，还需要下载build-essential文件包。下面给出链接，可打包下载至电脑中。</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">链接：https</span>:<span class="string">//pan.baidu.com/s/1Zr1B-PO7O_htbWl4kbCfbw </span></span><br><span class="line"><span class="meta">提取码：6666</span> <span class="string"></span></span><br></pre></td></tr></table></figure><p>4.将上述四个文件放在一个文件夹中，并且拷贝至U盘，再复制到Ubuntu18.04 lst系统的某一个文件夹下（小编将其复制到downloads文件夹下）。</p><p><img src="https://img-blog.csdnimg.cn/70c8ba602c474a6395f76dd9b97a664b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5piO5b63emh1YW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="5-进入该文件夹，然后鼠标右击选择“open-Ternimal”进入终端。"><a href="#5-进入该文件夹，然后鼠标右击选择“open-Ternimal”进入终端。" class="headerlink" title="5.进入该文件夹，然后鼠标右击选择“open Ternimal”进入终端。"></a>5.进入该文件夹，然后鼠标右击选择“open Ternimal”进入终端。</h3><p>（1）依次cd进入gcc、make、build-essential目录，执行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">dpkg -i *.deb</span></span><br></pre></td></tr></table></figure><p>命令进行安装即可。（注意：不按gcc、make、build-essential的顺序安装可能导致失败。）<br>（2）上述安装完后，进入r8125-9.007.01文件夹，终端执行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">chmod +x autorun.sh</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">sh ./autorun.sh</span></span><br><span class="line"><span class="attr">完成安装！！！</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-再执行如下命令，可显示有线图标"><a href="#6-再执行如下命令，可显示有线图标" class="headerlink" title="6.再执行如下命令，可显示有线图标"></a>6.再执行如下命令，可显示有线图标</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">service network-manager stop</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">rm /var/lib/NetworkManager/NetworkManager.state</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">service network-manager start</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">gedit /etc/NetworkManager/NetworkManager.conf</span></span><br><span class="line"><span class="attr">（把false改成true）</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">service network-manager restart</span></span><br></pre></td></tr></table></figure><p>如下图：</p><p><img src="https://img-blog.csdnimg.cn/92a33a5a0ca44c4e8e6ab27fdeafac69.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近要搞无人机平台的堤坝识别，张老师买回来一台i9处理器的服务器，让我配置环境，谁知道安装了系统ubuntu18.04之后无法上网，刚开始ping不同百度，然后ifconfig，提示没有这个工具，再然后sudo apt-get install net-tools 没有对应的</summary>
      
    
    
    
    <category term="ubuntu" scheme="http://example.com/categories/ubuntu/"/>
    
    
    <category term="ubuntu" scheme="http://example.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>git精简篇-快速上手</title>
    <link href="http://example.com/2022/08/14/git%E7%B2%BE%E7%AE%80%E7%AF%87-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>http://example.com/2022/08/14/git%E7%B2%BE%E7%AE%80%E7%AF%87-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2022-08-14T13:35:54.000Z</published>
    <updated>2022-09-26T13:36:53.727Z</updated>
    
    <content type="html"><![CDATA[<p>前端时间写了一大篇关于git的使用文章，感觉太杂乱了，今天写一篇比较精简的吧！</p><h3 id="（一）第一次上传时"><a href="#（一）第一次上传时" class="headerlink" title="（一）第一次上传时"></a>（一）第一次上传时</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">建立创库，复制仓库链接地址</span></span><br><span class="line"><span class="attr">2</span> <span class="string">在目录中 git init</span></span><br><span class="line"><span class="attr">3</span> <span class="string">git add .(.表示所有文件，也可以指定文件）</span></span><br><span class="line"><span class="attr">4</span> <span class="string">git commit -m &#x27;hh&#x27;</span></span><br><span class="line"><span class="attr">5</span> <span class="string">git remote add origin https://gitee.com/gao-minghui-jason/fundamentals-of-computer.git（注意http协议还是ssh协议）</span></span><br><span class="line"><span class="attr">6</span> <span class="string">git push --set-upstream origin master  然后下面进行绑定</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch --set-upstream-to=origin/master（绑定本地master与远程的master）</span></span><br><span class="line"><span class="attr">7</span> <span class="string">由于绑定了，因此可以直接git push； git pull</span></span><br></pre></td></tr></table></figure><h3 id="（二）-第一次拉取时："><a href="#（二）-第一次拉取时：" class="headerlink" title="（二） 第一次拉取时："></a>（二） 第一次拉取时：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">git init</span></span><br><span class="line"><span class="attr">2</span> <span class="string">git remote add origin https://gitee.com/gao-minghui-jason/fundamentals-of-computer.git（注意http协议还是ssh协议）</span></span><br><span class="line"><span class="attr">3</span> <span class="string">git pull origin master（如果本目录本来有内容的话，会合并）</span></span><br><span class="line"><span class="attr">4</span> <span class="string">git branch --set-upstream-to=origin/master（绑定本地master与远程的master）</span></span><br><span class="line"><span class="attr">5</span> <span class="string">由于绑定了，因此下次可以直接git push； git pull</span></span><br></pre></td></tr></table></figure><h3 id="（三）自此之后，每次按照流程："><a href="#（三）自此之后，每次按照流程：" class="headerlink" title="（三）自此之后，每次按照流程："></a>（三）自此之后，每次按照流程：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">git pull </span></span><br><span class="line"><span class="attr">2</span> <span class="string">修改（增删改查）</span></span><br><span class="line"><span class="attr">3</span> <span class="string">git add .  &amp;&amp;  git commit -m &#x27;hh&#x27;  &amp;&amp; git pull &amp;&amp; git push 来操作。</span></span><br></pre></td></tr></table></figure><p>如果第3步的pull 提示远程内容跟第1步的pull不同时，添加描述，选择继续操作（也就是默认合并到本地），然后继续git push。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前端时间写了一大篇关于git的使用文章，感觉太杂乱了，今天写一篇比较精简的吧！&lt;/p&gt;
&lt;h3 id=&quot;（一）第一次上传时&quot;&gt;&lt;a href=&quot;#（一）第一次上传时&quot; class=&quot;headerlink&quot; title=&quot;（一）第一次上传时&quot;&gt;&lt;/a&gt;（一）第一次上传时&lt;/h</summary>
      
    
    
    
    <category term="git" scheme="http://example.com/categories/git/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-新冠疫情数据</title>
    <link href="http://example.com/2022/08/14/%E7%88%AC%E8%99%AB-%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2022/08/14/%E7%88%AC%E8%99%AB-%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE/</id>
    <published>2022-08-14T13:30:38.000Z</published>
    <updated>2022-09-26T13:31:50.499Z</updated>
    
    <content type="html"><![CDATA[<p>今天回顾以前做的好多项目都没有记录下来，趁这两天有时间赶紧写几篇博客哈！先写写用python写的爬虫项目</p><p>1.利用Python爬虫访问并爬取一次新型冠状病毒相关网页如百度网、丁香园等的疫情新闻数据，保存为json文件格式，并且保存所有历史数据的更新，以便在未来回溯分析病情时提供样本。</p><p>2.爬取各个网页关于疫情的报道数据，并对数据进行分类整合，如最新全国各省疫情数据，世界各国疫情数据，世界各国以及中国各省等从2020年1月份截止今日为止的所有历史数据等。</p><h2 id="1-抓取包含所有疫情信息的API"><a href="#1-抓取包含所有疫情信息的API" class="headerlink" title="1  抓取包含所有疫情信息的API"></a>1  抓取包含所有疫情信息的API</h2><p>首先，以百度网为例，用浏览器打开目标网站，按下F12进入web开发者模式，进入network模块并刷新网页：</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/1.jpg" alt="1"></p><p>然后，按类型进行排序，找到json格式的文件，网站从服务器获取数据的方法为get，从而锁定其中请求。</p><p>最后，在消息头中找到相应的请求网址进行排查，从而顺利找到数据接口。</p><h2 id="2-数据爬取及处理"><a href="#2-数据爬取及处理" class="headerlink" title="2 数据爬取及处理"></a>2 数据爬取及处理</h2><h4 id="（1）需要导入的包："><a href="#（1）需要导入的包：" class="headerlink" title="（1）需要导入的包："></a>（1）需要导入的包：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.animation <span class="keyword">as</span> animation</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> map_draw</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br></pre></td></tr></table></figure><h4 id="（2）程序主体："><a href="#（2）程序主体：" class="headerlink" title="（2）程序主体："></a>（2）程序主体：</h4><p>程序通过requests先获取主页面的数据信息，然后利用正则表达式提取并分析当前最新疫情数据信息保存到json格式的文件中去，再提取有用信息保存到xlsx表格中去，然后生成词云图，生成地图，然后下载过往历史数据，再进行动态图的可视化显示。</p><h2 id="3-每一步的具体介绍"><a href="#3-每一步的具体介绍" class="headerlink" title="3 每一步的具体介绍"></a>3 每一步的具体介绍</h2><h4 id="（1）最新一天疫情数据采集："><a href="#（1）最新一天疫情数据采集：" class="headerlink" title="（1）最新一天疫情数据采集："></a>（1）最新一天疫情数据采集：</h4><p>读取网址信息 <a href="https://ncov.dxy.cn/ncovh5/view/pneumonia%EF%BC%8C">https://ncov.dxy.cn/ncovh5/view/pneumonia，</a> 获得最近一天新冠状病毒的数据信息以及针对收集到的数据进行处理并保存为json文本，最新一天的世界各国疫情信息跟最新一天的中国各省数据的提取方法不同之处在于：前者是通过属性id为getListByCountryTypeService2true来获取到标签，而后者是通过属性id= getAreaStat来获得标签，获取到数据后再通过正则表达式来获取json格式的字符串并保存json格式文件；然后再保存到excl文件中！</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/2.jpg"></p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/3.jpg" alt="3"></p><h4 id="（2）过往历史疫情数据收集："><a href="#（2）过往历史疫情数据收集：" class="headerlink" title="（2）过往历史疫情数据收集："></a>（2）过往历史疫情数据收集：</h4><p>首先加载由上面读取网址信息  <a href="https://ncov.dxy.cn/ncovh5/view/pneumonia">https://ncov.dxy.cn/ncovh5/view/pneumonia</a>  后分析提取有用信息保存的json文件数据，里面保存了各个国家或者各国省的最新一天数据，还有https://….json链接，可以通过request模块对这些链接进行访问然后编码，提取到有用的信息，如：按照字典为保存单位，一个字典表示一个国家的一天的疫情数据，然后这些字典数据利用python列表对象的extend方法组合成为一个包含了各个国家各个不同日期的疫情数据，组合成一个大的列表，然后保存为json文件，以便我们后面动态图显示数据时做准备。</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/4.jpg" alt="4"></p><h4 id="（3）词云图的生成："><a href="#（3）词云图的生成：" class="headerlink" title="（3）词云图的生成："></a>（3）词云图的生成：</h4><p>生成的词云图有两张，根据全国各省累计确诊还有世界各国的累计确诊人数而生成的词云图。词云图上面的字体格式可以根据自己windows上的font自行调整。利用了词云图更加直观的看到了那个地方的累计确诊人数的对比</p><p>1 国内疫情词云图如下：</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/6.jpg" alt="6"></p><p>2 世界各国疫情词云图如下：</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/7.jpg" alt="7"></p><h4 id="（4）疫情地图的生成："><a href="#（4）疫情地图的生成：" class="headerlink" title="（4）疫情地图的生成："></a>（4）疫情地图的生成：</h4><p>Matplotlib中的Basemap它具有专业标准的地图绘制工具。它可以与matplotlib的一般绘图功能相结合，并在地图上绘制数据。 Matplotlib的Basemap工具包是一个用于在Python中的地图上绘制2D数据的库。本实验使用basemap库来构建中国的地图模型展示。</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/5.jpg" alt="5"></p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/10.jpg" alt="10"></p><h4 id="（5）动态图显示历史确诊数据："><a href="#（5）动态图显示历史确诊数据：" class="headerlink" title="（5）动态图显示历史确诊数据："></a>（5）动态图显示历史确诊数据：</h4><p>FuncAnimation是Matplotlib库为我们提供的用于绘制动态图像的接口，其中包含如下参数：fig：画布对象，由创建画布时的返回得到，即fig = plt.figure()  frames：指定动图的帧数，但这个参数类型必须是可迭代的列表等。每次调用func函数对图像进行更新时，接口将自动向func函数提供此时的帧数num，这使得更新数据十分方便。func：用于更新图片从而产生动态效果的调用函数，在编写时通常会用到set_data等类似的方法，其返回值是一个元素为被更新的图形对象的列表。同时，func可以接受帧数参数num，用来更新每帧图像。具体内容我们将在示例中看到。interval：更新频率，单位是毫秒。这里的interval参数已经调整的非常小了，但是感觉还是不够快，是因为数据量太庞大了，取数据的过程会略有延迟，因此最终只取值为10ms。</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/8.jpg" alt="8"></p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/9.jpg" alt="9"></p><h2 id="4总结"><a href="#4总结" class="headerlink" title="4总结"></a>4总结</h2><p>​       本次主要是对新冠肺炎疫情的数据采集，利用python爬虫对百度、丁香园等网站进行数据爬取，得到了中国整体、各省市以及世界各国的疫情实时数据和历史统计数据，能清楚的知道了各时各地各项的患者人数，比如说累计确诊，现有确诊，治愈人数，死亡人数等等数据。同时，利用爬取到的数据对新冠疫情进行可视化分析，比如说利用到了地图，词云图，动态图等可视化方式，以便更直观了解疫情形式。</p><p>​        不足的地方是没有利用爬取到的新冠疫情数据来进行深入分析整理，比如对新冠疫情的形式、规律以及走势进行预测，后续的工作是对密切接触者的轨迹数据进行更详细爬取，得到更全面的数据，方便疫情的全面防控。</p><p>最后由衷感谢奋战在一线的所有人员，希望疫情快点过去，加油加油加油！！！</p><p><img src="/img/%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/11.gif" alt="11"></p><h3 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1LIWSzyy7KlfXxj7LdALq_g </span><br><span class="line">提取码：6666 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天回顾以前做的好多项目都没有记录下来，趁这两天有时间赶紧写几篇博客哈！先写写用python写的爬虫项目&lt;/p&gt;
&lt;p&gt;1.利用Python爬虫访问并爬取一次新型冠状病毒相关网页如百度网、丁香园等的疫情新闻数据，保存为json文件格式，并且保存所有历史数据的更新，以便在未来</summary>
      
    
    
    
    <category term="爬虫" scheme="http://example.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="新型冠状病毒" scheme="http://example.com/tags/%E6%96%B0%E5%9E%8B%E5%86%A0%E7%8A%B6%E7%97%85%E6%AF%92/"/>
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>nginx启动遇到的一些问题</title>
    <link href="http://example.com/2022/08/13/nginx%E5%90%AF%E5%8A%A8%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/08/13/nginx%E5%90%AF%E5%8A%A8%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2022-08-13T07:05:52.000Z</published>
    <updated>2022-08-16T13:09:51.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-3-安装Nginx"><a href="#1-3-安装Nginx" class="headerlink" title="1.3.安装Nginx"></a>1.3.安装Nginx</h2><p>安装非常简单，将下载的安装包直接解压即可：（<strong>注意路径不能有中文路径</strong>）</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175232233.png" alt="image-20200111175232233"> </p><p>绿色免安装，舒服！</p><p>解压后的目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175323969.png" alt="image-20200111175323969"> </p><p>nginx可以通过命令行来启动，打开CMD命令行，然后输入命令：</p><ul><li><p>启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nginx.exe</span><br></pre></td></tr></table></figure></li><li><p>停止： #########注意啊，<strong>每次启动前要先把nginx停掉，因为前面启动的在后台，你要先关闭</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s stop   </span><br></pre></td></tr></table></figure></li><li><p>重新加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure></li></ul><p>启动后，访问：<a href="http://localhost/">http://localhost</a> 即可访问nginx的默认页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175634260.png" alt="image-20200111175634260"></p><p>（<strong>为什么访问localhost就会访问nginx呢？</strong>）因为nginx配置文件那里监听的域名+端口就是localhost:80，而http协议默认端口就是80</p><p>小意外：当运行<strong>start nginx.exe 时发生了报错</strong>：nginx: [error] CreateFile() “D:\nginx-1.12.2/logs/nginx.pid” failed (2: The system cannot find the file specified)，从日志log目录下的error也可以看看明显的错误信息，表示没有启动成功，<strong>再运行nginx.exe 命令时报错</strong>：nginx: [emerg] bind() to 0.0.0.0:80 failed (10013: An attempt was made to access a socket in a way forbidden by its access permissions)，表示端口80被占用了，因此需要到conf目录下的conf文件，更改监听端口，改为81后，直接使用命令start nginx.exe就可以运行成功了，然后在浏览器中访问：<a href="http://localhost:81/">http://localhost:81</a> 就可以显示nginx的默认界面了，但是发生了中文乱码问题！</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20220813144402171.png" alt="image-20220813144402171"></p><p>还有一种方法就是找到80端口被占用的进程的pid，然后杀死这个“无关紧要的进程”，那么nginx依然可以监听80端口!</p><h5 id="1-找到80端口被占用的进程的pid，由图可知对应pid为-65205"><a href="#1-找到80端口被占用的进程的pid，由图可知对应pid为-65205" class="headerlink" title="1 找到80端口被占用的进程的pid，由图可知对应pid为 65205"></a>1 找到80端口被占用的进程的pid，由图可知对应pid为 65205</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 netstat -aon|findstr &quot;80&quot;              </span><br></pre></td></tr></table></figure><p> netstat -aon表示查看所有运行中的进程</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20220813145630635.png" alt="image-20220813145630635"></p><h5 id="2-杀死进程"><a href="#2-杀死进程" class="headerlink" title="2 杀死进程"></a>2 杀死进程</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /pid 6520 /F</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20220813145743411.png" alt="image-20220813145743411"></p><h5 id="nginx中文乱码问题的解决："><a href="#nginx中文乱码问题的解决：" class="headerlink" title="nginx中文乱码问题的解决："></a>nginx中文乱码问题的解决：</h5><p>很简单，在配置文件中指定编码格式为uft-8就好</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line">    <span class="string">charset</span> <span class="string">utf-8;</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-3-安装Nginx&quot;&gt;&lt;a href=&quot;#1-3-安装Nginx&quot; class=&quot;headerlink&quot; title=&quot;1.3.安装Nginx&quot;&gt;&lt;/a&gt;1.3.安装Nginx&lt;/h2&gt;&lt;p&gt;安装非常简单，将下载的安装包直接解压即可：（&lt;strong&gt;注意路径</summary>
      
    
    
    
    <category term="nginx" scheme="http://example.com/categories/nginx/"/>
    
    
    <category term="nginx" scheme="http://example.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>windows安装多个版本的jdk</title>
    <link href="http://example.com/2022/08/11/windows%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84jdk/"/>
    <id>http://example.com/2022/08/11/windows%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84jdk/</id>
    <published>2022-08-11T13:20:13.000Z</published>
    <updated>2022-08-11T15:06:50.040Z</updated>
    
    <content type="html"><![CDATA[<p>单个jdk的安装并配置环境请参考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/cat113488637/article/details/123665179</span></span><br></pre></td></tr></table></figure><p>上面是jdk1.8（jdk8）的安装配置过程，虽然jdk8比较旧，但是稳定，很多企业都是使用的这个版本。</p><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h3><p>官网地址：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//www.oracle.com/java/technologies/downloads/#java8-windows</span></span><br></pre></td></tr></table></figure><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h3><p>下载成功都双击安装就好，更改安装路径，我一般是安装到D盘没有中文符号的路径下，当然jdk本来不大，可以安装到c盘。</p><h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3 配置环境变量"></a>3 配置环境变量</h3><p>参照上面链接就好。</p><h3 id="配置多个jdk"><a href="#配置多个jdk" class="headerlink" title="配置多个jdk"></a>配置多个jdk</h3><p>下载安装完全跟上面一样，只不过配置环境变量时会有不一样，具体请参考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/weixin_52790678/article/details/125112899?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-125112899-blog-123652927.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-125112899-blog-123652927.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=1</span></span><br></pre></td></tr></table></figure><p>但是按照上面的配置，并没有生效！寄！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;单个jdk的安装并配置环境请参考：&lt;/p&gt;
&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>opencv-画基本形状与文字显示</title>
    <link href="http://example.com/2022/08/02/opencv-%E7%94%BB%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/"/>
    <id>http://example.com/2022/08/02/opencv-%E7%94%BB%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/</id>
    <published>2022-08-02T07:47:04.000Z</published>
    <updated>2022-08-02T07:54:50.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本形状"><a href="#1-基本形状" class="headerlink" title="1 基本形状"></a>1 基本形状</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 定义颜色(字典形式)    也就是定义一个像素点（三个字节）下面画图都是根据这些像素点进行填充。</span></span><br><span class="line">colors=&#123;<span class="string">&#x27;blue&#x27;</span>:(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;green&#x27;</span>:(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;red&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;ye11ow&#x27;</span>:(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;magenta&#x27;</span>:(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;cyan&#x27;</span>:(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;white&#x27;</span>:(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;blackgray&#x27;</span>:(<span class="number">125</span>,<span class="number">125</span>,<span class="number">125</span>),</span><br><span class="line">        <span class="string">&#x27;black&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;rand&#x27;</span>: np.random.randint(<span class="number">0</span>, high=<span class="number">256</span>, size=(<span class="number">3</span>,)).tolist(),</span><br><span class="line">        <span class="string">&#x27;dark gray&#x27;</span>:(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>),</span><br><span class="line">        <span class="string">&#x27;light_gray&#x27;</span>:(<span class="number">220</span>,<span class="number">220</span>,<span class="number">220</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title</span>):</span></span><br><span class="line">    img_RGB = image[:, :, ::-<span class="number">1</span>]</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  创建画布。</span></span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认黑色背景。</span></span><br><span class="line">canvas[:] = colors[<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">show_image(canvas,<span class="string">&quot;blackground&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 画直线：cv2.line</span></span><br><span class="line">cv2.line(canvas,(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">400</span>,<span class="number">400</span>),colors[<span class="string">&#x27;green&#x27;</span>],<span class="number">5</span>)</span><br><span class="line">cv2.line(canvas,(<span class="number">0</span>,<span class="number">400</span>),(<span class="number">400</span>,<span class="number">0</span>),colors[<span class="string">&#x27;black&#x27;</span>],<span class="number">5</span>)</span><br><span class="line">show_image(canvas,<span class="string">&quot;cv2.line()&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 画长方形：cv2.rectangle()</span></span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认黑色背景。</span></span><br><span class="line">canvas[:] = colors[<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">cv2.rectangle(canvas,(<span class="number">150</span>,<span class="number">50</span>),(<span class="number">200</span>,<span class="number">300</span>),colors[<span class="string">&#x27;blue&#x27;</span>],-<span class="number">1</span>)</span><br><span class="line">cv2.rectangle(canvas,(<span class="number">10</span>,<span class="number">50</span>),(<span class="number">70</span>,<span class="number">120</span>),colors[<span class="string">&#x27;green&#x27;</span>],<span class="number">2</span>)</span><br><span class="line">show_image(canvas,<span class="string">&#x27;cv2.rectangle()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 画圆形：cv2.circle()</span></span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认黑色背景。</span></span><br><span class="line">canvas[:] = colors[<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">cv2.circle(canvas,(<span class="number">200</span>,<span class="number">200</span>),<span class="number">150</span>,colors[<span class="string">&#x27;green&#x27;</span>],<span class="number">5</span>)</span><br><span class="line">cv2.circle(canvas,(<span class="number">200</span>,<span class="number">200</span>),<span class="number">50</span>,colors[<span class="string">&#x27;blue&#x27;</span>],-<span class="number">1</span>)</span><br><span class="line">show_image(canvas,<span class="string">&#x27;cv2.circle()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 画折线：cv2.plotlines()</span></span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认黑色背景。</span></span><br><span class="line">canvas[:] = colors[<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pts = np.array([[<span class="number">250</span>, <span class="number">5</span>], [<span class="number">220</span>, <span class="number">80</span>], [<span class="number">280</span>, <span class="number">80</span>]], np.int32) <span class="comment">#定义三个点。</span></span><br><span class="line">pts = pts.reshape((-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)) <span class="comment">#########？？？？？？、</span></span><br><span class="line">cv2.polylines(canvas, [pts], <span class="literal">True</span>, colors[<span class="string">&#x27;green&#x27;</span>], <span class="number">3</span>) <span class="comment">#注意 pts括起来。True表示将点连起来。3表示线宽。</span></span><br><span class="line"></span><br><span class="line">pts2 = np.array([[<span class="number">150</span>, <span class="number">200</span>], [<span class="number">90</span>, <span class="number">130</span>], [<span class="number">280</span>, <span class="number">180</span>]], np.int32)</span><br><span class="line">pts2 = pts2.reshape((-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">cv2.polylines(canvas, [pts2], <span class="literal">False</span>, colors[<span class="string">&#x27;black&#x27;</span>], <span class="number">5</span>) <span class="comment">#False不是闭环，链接顺序是第一个点开始连接，按照第二第三。。的顺序连接？？？</span></span><br><span class="line">show_image(canvas, <span class="string">&quot;cv2.polylines()&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155312761.png" alt="image-20220802155312761"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155321549.png" alt="image-20220802155321549"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155330445.png" alt="image-20220802155330445"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155338899.png" alt="image-20220802155338899"></p><h3 id="2-文字显示"><a href="#2-文字显示" class="headerlink" title="2 文字显示"></a>2 文字显示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. 方法：cv2.putText( )</span></span><br><span class="line"><span class="string">2. 参数：</span></span><br><span class="line"><span class="string">    1 字体格式：</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_SIMPLEX = 0 #####################一般选用第一个。</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_PLAIN = 1</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_DUPLEX = 2</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_COMPLEX = 3</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_TRIPLEX = 4</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_COMPLEX_SMALL = 5</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_SCRIPT_SIMPLEX = 6</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_SCRIPT_COMPLEX = 7</span></span><br><span class="line"><span class="string">    2 线条类型：</span></span><br><span class="line"><span class="string">    cv2.LINE_4,     cv2.LINE_8,   cv2.LINE_AA #####################一般选用最后一个。但是我感觉第一种最清晰耶。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 定义颜色(字典形式)    也就是定义一个像素点（三个字节）下面画图都是根据这些像素点进行填充。</span></span><br><span class="line">colors=&#123;<span class="string">&#x27;blue&#x27;</span>:(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;green&#x27;</span>:(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;red&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;ye11ow&#x27;</span>:(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;magenta&#x27;</span>:(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;cyan&#x27;</span>:(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;white&#x27;</span>:(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;blackgray&#x27;</span>:(<span class="number">125</span>,<span class="number">125</span>,<span class="number">125</span>),</span><br><span class="line">        <span class="string">&#x27;black&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;rand&#x27;</span>: np.random.randint(<span class="number">0</span>, high=<span class="number">256</span>, size=(<span class="number">3</span>,)).tolist(),</span><br><span class="line">        <span class="string">&#x27;dark gray&#x27;</span>:(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>),</span><br><span class="line">        <span class="string">&#x27;light_gray&#x27;</span>:(<span class="number">220</span>,<span class="number">220</span>,<span class="number">220</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title</span>):</span></span><br><span class="line">    <span class="comment"># BGR to RGB</span></span><br><span class="line">    img_RGB = image[:, :, ::-<span class="number">1</span>]</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line">    plt.show()</span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认背景为黑色。</span></span><br><span class="line">show_image(canvas,<span class="string">&#x27;blackground&#x27;</span>)</span><br><span class="line">canvas.fill(<span class="number">255</span>)</span><br><span class="line">show_image(canvas,<span class="string">&#x27;BlackGround&#x27;</span>)</span><br><span class="line"><span class="comment"># #  或者将背景设置为浅灰色：</span></span><br><span class="line"><span class="comment"># canvas[:,:] = colors[&#x27;light_gray&#x27;]</span></span><br><span class="line"><span class="comment"># show_image(canvas,&#x27;BlackGround&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5往画布上输入文本CV2.</span></span><br><span class="line"><span class="comment"># 参数：画布，文本，起始位置，字体型号，字体大小，字体颜色，线条类型。</span></span><br><span class="line">cv2.putText(canvas, <span class="string">&#x27;Hello World&#x27;</span>,(<span class="number">50</span>, <span class="number">50</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.9</span>,colors[<span class="string">&#x27;red&#x27;</span>],cv2.LINE_4)</span><br><span class="line">cv2.putText(canvas, <span class="string">&#x27;Welcome&#x27;</span>,(<span class="number">50</span>, <span class="number">150</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1.4</span>,colors[<span class="string">&#x27;blue&#x27;</span>],cv2.LINE_8)</span><br><span class="line">cv2.putText(canvas, <span class="string">&#x27;Jason&#x27;</span>,(<span class="number">50</span>, <span class="number">250</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1.9</span>,colors[<span class="string">&#x27;black&#x27;</span>],cv2.LINE_4)</span><br><span class="line">show_image(canvas,<span class="string">&quot;Canvas&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155230102.png" alt="image-20220802155230102"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-基本形状&quot;&gt;&lt;a href=&quot;#1-基本形状&quot; class=&quot;headerlink&quot; title=&quot;1 基本形状&quot;&gt;&lt;/a&gt;1 基本形状&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>opencv-直方图统计</title>
    <link href="http://example.com/2022/08/02/opencv-%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/"/>
    <id>http://example.com/2022/08/02/opencv-%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/</id>
    <published>2022-08-02T07:11:57.000Z</published>
    <updated>2022-08-02T07:48:15.273Z</updated>
    
    <content type="html"><![CDATA[<p>在统计学中，直方图是一种对数据分布情况的图形表示，是一种二维统计图表，他的两个坐标分别是统计样本（图像、视频帧）和样本的某种属性（亮度，像素值，梯度，方向，色彩等等任何特征）<br>总结就是：像素强度分布，即：每一个强度值所具有的像素个数。</p><p>特征：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">（1）直方图不再表征任何的图像纹理信息，而是对图像像素的统计。</span></span><br><span class="line"><span class="attr">（2）由于同一物体无论是旋转还是平移在图像中都具有相同的灰度值，因此直方图具有平移不变性、放缩不变性等优点。</span></span><br></pre></td></tr></table></figure><h3 id="1-灰度图的直方图统计"><a href="#1-灰度图的直方图统计" class="headerlink" title="1 灰度图的直方图统计"></a>1 灰度图的直方图统计</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法：显示图片的灰度直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    <span class="comment"># 显示标题</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pos) <span class="comment"># 定位图片</span></span><br><span class="line">    plt.xlabel(<span class="string">&quot;Bins&quot;</span>) <span class="comment"># 横轴信息</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;Pixels&quot;</span>) <span class="comment"># 纵轴信息</span></span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 范围</span></span><br><span class="line">    plt.plot(hist, color=color) <span class="comment"># 绘制直方图##plt.plot！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 主函数 main()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 5 创建画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>)) <span class="comment"># 画布大小</span></span><br><span class="line">    plt.suptitle(<span class="string">&quot;Gray Image Histogram&quot;</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">&quot;bold&quot;</span>) <span class="comment"># 设置标题形式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6 加载图片</span></span><br><span class="line">    img = cv2.imread(<span class="string">&quot;children.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7 灰度转换</span></span><br><span class="line">    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8 计算灰度图的直方图    #############################################</span></span><br><span class="line">    hist_img = cv2.calcHist([img_gray], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    <span class="comment"># hist_img = cv2.calcHist([img_gray], [0], None, [16], [0, 256])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ###设置为16，表示的是在设定好的range= [0,255]，平均分为16个bin。</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    参数详解：</span></span><br><span class="line"><span class="string">    cv2.calcHist(images, channels, mask, histSize, ranges[hist[, accumulate]])</span></span><br><span class="line"><span class="string">    （1）images: 整型类型(uint8和float32)的原图（list形式显示）。##########是列表，用[] 括起来！！！</span></span><br><span class="line"><span class="string">    （2）channels: 通道的索引，例如：[0]代表灰度图片，[0], [1], [2]代表多通道。</span></span><br><span class="line"><span class="string">    （3）mask: 计算图片指定区域的直方图。如果mask为none，那么计算整张图。</span></span><br><span class="line"><span class="string">    （4）histSize(bins): 每个色调值(范围: 0~ 255)对应的像素数量 / 频率。</span></span><br><span class="line"><span class="string">        [这256个值中的每一个都被称为bin，它的取值有8，16，32，64，128，256。在OpenCV中，用histSize表示bins。]</span></span><br><span class="line"><span class="string">    （5）range: 强度值的范围，[0, 256]。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 9 展示灰度直方图</span></span><br><span class="line">    <span class="comment"># 灰度图转换成BGR格式图片    ####</span></span><br><span class="line">    img_BGR = cv2.cvtColor(img_gray, cv2.COLOR_GRAY2BGR) </span><br><span class="line">    img_RGB = img_BGR[:,:,::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_img</span>(<span class="params">img,title,pos</span>):</span></span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">3</span>,pos)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法：显示图片的灰度直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    <span class="comment"># 显示标题</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pos) <span class="comment"># 定位图片</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;Bins&quot;</span>) <span class="comment"># 横轴信息</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;Pixels&quot;</span>) <span class="comment"># 纵轴信息</span></span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 范围</span></span><br><span class="line">    plt.plot(hist, color=color) <span class="comment"># 绘制直方图############plt.plot！！！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果展示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="comment"># (1261, 1920, 3)</span></span><br><span class="line"><span class="built_in">print</span>(img_gray.shape)</span><br><span class="line"><span class="comment"># (1261, 1920)</span></span><br><span class="line"><span class="built_in">print</span>(hist_img.shape)</span><br><span class="line"><span class="comment"># (256, 1)</span></span><br><span class="line"><span class="built_in">print</span>(img_BGR.shape)</span><br><span class="line"><span class="comment"># (1261, 1920, 3)</span></span><br><span class="line"><span class="built_in">print</span>(img_RGB.shape)</span><br><span class="line"><span class="comment"># (1261, 1920, 3)</span></span><br><span class="line">show_img(img,<span class="string">&#x27;img&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">show_img(img_gray,<span class="string">&#x27;img_gray&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">show_img(img_BGR,<span class="string">&#x27;img_BGR&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">show_img(img_RGB,<span class="string">&#x27;img_RGB&#x27;</span>,<span class="number">4</span>)</span><br><span class="line">show_histogram(hist_img, <span class="string">&#x27;hist-img&#x27;</span>, <span class="number">5</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line">plt.savefig(fname=<span class="string">&#x27;children-gray.png&#x27;</span>, figsize=[<span class="number">10</span>, <span class="number">10</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下图：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/image-20220802153408048.png" alt="image-20220802153408048"></p><p>可见，经cv.cvtColor(gray,cv.COLOR_GRAY2BGR)得到的back图像确实是个3通道的，但是每一个像素点的三通道（B、G、R）的数值都是相同的，所以显示出来效果仍是灰度图</p><h3 id="2-灰度图的直方图的加减"><a href="#2-灰度图的直方图的加减" class="headerlink" title="2 灰度图的直方图的加减"></a>2 灰度图的直方图的加减</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 方法：显示图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title, pos</span>):</span></span><br><span class="line">    <span class="comment">#  顺序转换：BGR TO RGB</span></span><br><span class="line">    image_RGB = image[:, :, ::-<span class="number">1</span>] <span class="comment"># shape : (height, width, channel)</span></span><br><span class="line">    <span class="comment"># 显示标题</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pos) <span class="comment"># 定位</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(image_RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 方法：显示图片的灰度直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    <span class="comment"># 显示标题</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pos) <span class="comment"># 定位图片</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;Bins&quot;</span>) <span class="comment"># 横轴信息</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;Pixels&quot;</span>) <span class="comment"># 纵轴信息</span></span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 范围</span></span><br><span class="line">    plt.plot(hist, color=color) <span class="comment"># 绘制直方图</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 主函数 main()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 5 创建画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>)) <span class="comment"># 画布大小</span></span><br><span class="line">    plt.suptitle(<span class="string">&quot;Gray Image Histogram&quot;</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">&quot;bold&quot;</span>) <span class="comment"># 设置标题形式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6 加载图片</span></span><br><span class="line">    img = cv2.imread(<span class="string">&quot;children.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7 灰度转换</span></span><br><span class="line">    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8 计算灰度图的直方图</span></span><br><span class="line">    hist_img = cv2.calcHist([img_gray], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 9 展示灰度直方图</span></span><br><span class="line">    <span class="comment"># 灰度图转换成BGR格式图片</span></span><br><span class="line">    img_BGR = cv2.cvtColor(img_gray, cv2.COLOR_GRAY2BGR)</span><br><span class="line">    show_image(img_BGR, <span class="string">&quot;BGR image&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    show_histogram(hist_img, <span class="string">&quot;gray image histogram&quot;</span>, <span class="number">4</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 10 对图片中的每个像素值增加50个像素   相加后超出255，即为255？？应该是。整张图变白了，轮廓什么的都能看清楚。</span></span><br><span class="line">    M = np.ones(img_gray.shape, np.uint8) * <span class="number">50</span> <span class="comment"># 构建矩阵：形状跟灰度照片一样，但是里面的值全是50.</span></span><br><span class="line"></span><br><span class="line">    added_img = cv2.add(img_gray, M)        <span class="comment">########直接像素值相加。</span></span><br><span class="line">    add_img_hist = cv2.calcHist([added_img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 计算直方图</span></span><br><span class="line">    added_img_BGR = cv2.cvtColor(added_img, cv2.COLOR_GRAY2BGR)</span><br><span class="line">    show_image(added_img_BGR, <span class="string">&quot;added image&quot;</span>, <span class="number">2</span>)</span><br><span class="line">    show_histogram(add_img_hist, <span class="string">&quot;added image hist&quot;</span>, <span class="number">5</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 11 对图片中的每个像素值减去50个像素  相减少于0，即为0，应该是了。整张图变黑了，轮廓什么的都能看清楚。</span></span><br><span class="line">    subtract_img = cv2.subtract(img_gray, M)</span><br><span class="line">    subtract_img_hist = cv2.calcHist([subtract_img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 计算直方图</span></span><br><span class="line">    subtract_img_BGR = cv2.cvtColor(subtract_img, cv2.COLOR_GRAY2BGR)</span><br><span class="line">    show_image(subtract_img_BGR, <span class="string">&quot;subtracted image&quot;</span>, <span class="number">3</span>)</span><br><span class="line">    show_histogram(subtract_img_hist, <span class="string">&quot;subtracted image hist&quot;</span>, <span class="number">6</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line">    plt.savefig(fname=<span class="string">&#x27;gray_image_add_subtract.png&#x27;</span>,figsize=[<span class="number">10</span>, <span class="number">10</span>])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/image-20220802154412057.png" alt="image-20220802154412057"></p><h3 id="3-灰度直方图与掩码"><a href="#3-灰度直方图与掩码" class="headerlink" title="3 灰度直方图与掩码"></a>3 灰度直方图与掩码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 方法：显示图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title, pos</span>):</span></span><br><span class="line">    img_RGB = image[:, :, ::-<span class="number">1</span>] <span class="comment"># BGR to RGB</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, pos)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 方法：显示灰度直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, pos)</span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.plot(hist, color=color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 5 创建画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">7</span>))</span><br><span class="line">    plt.suptitle(<span class="string">&quot;Gray Image and Histogram with mask&quot;</span>, fontsize=<span class="number">4</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6 读取图片并灰度转换，计算直方图，显示</span></span><br><span class="line">    img_gray = cv2.imread(<span class="string">&quot;children.jpg&quot;</span>, cv2.COLOR_BGR2GRAY) <span class="comment"># 读取并进行灰度转换，############一步到位。</span></span><br><span class="line">    img_gray_hist = cv2.calcHist([img_gray], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 计算直方图###########################</span></span><br><span class="line">    <span class="comment">##############好奇怪呀，上面两个例子先读照片再转为灰度图，显示的是灰色的，这里一步到位读取灰度图反而显示的是彩色图。</span></span><br><span class="line">    show_image(img_gray, <span class="string">&quot;image gray&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    show_histogram(img_gray_hist, <span class="string">&quot;image gray histogram&quot;</span>, <span class="number">2</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7 创建mask，计算位图，直方图</span></span><br><span class="line">    mask = np.zeros(img_gray.shape[:<span class="number">2</span>], np.uint8)  <span class="comment">######################先整张图的大小都是mask，下面再截取个四边形赋值为255。</span></span><br><span class="line">    mask[<span class="number">130</span>:<span class="number">500</span>, <span class="number">600</span>:<span class="number">1400</span>] = <span class="number">255</span> <span class="comment"># 获取mask，并赋予颜色  本质上是与操作，跟255相与等于本身，跟框外的0相与等于0，所以哈哈哈哈哈哈</span></span><br><span class="line">    img_mask_hist = cv2.calcHist([img_gray], [<span class="number">0</span>], mask, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 计算mask的直方图##############这里的mask参数变成了mask。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8 通过位运算（与预算）计算带有mask的灰度图片</span></span><br><span class="line">    mask_img = cv2.bitwise_and(img_gray, img_gray, mask = mask)<span class="comment">###########意思就是mask区域外的像素值都变0，都变黑了。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 9 显示带有mask的图片和直方图</span></span><br><span class="line">    show_image(mask_img, <span class="string">&quot;gray image with mask&quot;</span>, <span class="number">3</span>)</span><br><span class="line">    show_histogram(img_mask_hist, <span class="string">&quot;histogram with masked gray image&quot;</span>, <span class="number">4</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment"># mask ： 提取感兴趣区域。</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/image-20220802154508013.png" alt="image-20220802154508013"></p><h3 id="4-三颜色通道的直方图"><a href="#4-三颜色通道的直方图" class="headerlink" title="4 三颜色通道的直方图"></a>4 三颜色通道的直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 方法：显示图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title, pos</span>):</span></span><br><span class="line">    plt.subplot(<span class="number">3</span>, <span class="number">2</span>, pos)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    image_RGB = image[:, :, ::-<span class="number">1</span>] <span class="comment"># BGR to RGB</span></span><br><span class="line">    plt.imshow(image_RGB)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>) <span class="comment">#################把刻度去掉。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 方法：显示彩色直方图 b, g, r</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    plt.subplot(<span class="number">3</span>, <span class="number">2</span>, pos)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    <span class="keyword">for</span> h, c <span class="keyword">in</span> <span class="built_in">zip</span>(hist, color): <span class="comment"># color: (&#x27;b&#x27;, &#x27;g&#x27;, &#x27;r&#x27;)</span></span><br><span class="line">        plt.plot(h, color=c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 方法：计算直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_color_hist</span>(<span class="params">image</span>):</span><span class="comment">########################################通道不同哈啊哈哈哈啊哈，就可以指定了！！！</span></span><br><span class="line">    <span class="comment"># b, g, r</span></span><br><span class="line">    hist = []</span><br><span class="line">    hist.append( cv2.calcHist([image], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]))</span><br><span class="line">    hist.append( cv2.calcHist([image], [<span class="number">1</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]))</span><br><span class="line">    hist.append( cv2.calcHist([image], [<span class="number">2</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]))</span><br><span class="line">    <span class="keyword">return</span> hist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 5.1 创建画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">    plt.suptitle(<span class="string">&quot;Color Histogram&quot;</span>, fontsize=<span class="number">4</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.2 读取原图片</span></span><br><span class="line">    img = cv2.imread(<span class="string">&quot;children.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.3 计算直方图</span></span><br><span class="line">    img_hist = calc_color_hist(img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.4 显示图片和直方图</span></span><br><span class="line">    show_image(img, <span class="string">&quot;RGB Image&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    show_histogram(img_hist, <span class="string">&quot;RGB Image Hist&quot;</span>, <span class="number">2</span>, (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.5 原始图片中的每个像素增加50个像素值</span></span><br><span class="line">    M = np.ones(img.shape, dtype=<span class="string">&quot;uint8&quot;</span>) * <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    added_image = cv2.add(img, M) <span class="comment"># 像素一一对应相加</span></span><br><span class="line">    added_image_hist = calc_color_hist(added_image)</span><br><span class="line">    show_image(added_image, <span class="string">&#x27;added image&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    show_histogram(added_image_hist, <span class="string">&#x27;added image hist&#x27;</span>, <span class="number">4</span>, (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>))<span class="comment">#####这里传入的是元组，不知道列表行不行！！！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.6 原始图片中的每个像素减去50个像素值</span></span><br><span class="line">    subtracted_image = cv2.subtract(img, M)</span><br><span class="line">    subtracted_image_hist = calc_color_hist(subtracted_image)</span><br><span class="line">    show_image(subtracted_image, <span class="string">&#x27;subtracted image&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    show_histogram(subtracted_image_hist, <span class="string">&#x27;subtracted image hist&#x27;</span>, <span class="number">6</span>, (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/image-20220802154614592.png" alt="image-20220802154614592"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在统计学中，直方图是一种对数据分布情况的图形表示，是一种二维统计图表，他的两个坐标分别是统计样本（图像、视频帧）和样本的某种属性（亮度，像素值，梯度，方向，色彩等等任何特征）&lt;br&gt;总结就是：像素强度分布，即：每一个强度值所具有的像素个数。&lt;/p&gt;
&lt;p&gt;特征：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>opencv-图像的八种变换</title>
    <link href="http://example.com/2022/08/01/opencv-%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/"/>
    <id>http://example.com/2022/08/01/opencv-%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/</id>
    <published>2022-08-01T07:33:40.000Z</published>
    <updated>2022-08-01T12:30:22.369Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;kyrie.jpg&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show() <span class="comment">##这个别忘了，然后，似乎颜色都变了。。。。。</span></span><br><span class="line"></span><br><span class="line">h,w,c = img.shape  <span class="comment">#######(高，宽，通道）</span></span><br><span class="line"><span class="built_in">print</span>(h,w,c)</span><br><span class="line"><span class="comment"># 640 640 3</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170113045.png" alt="image-20220801170113045"></p><h2 id="使用cv2-来进行图像变换"><a href="#使用cv2-来进行图像变换" class="headerlink" title="使用cv2 来进行图像变换"></a>使用cv2 来进行图像变换</h2><h3 id="1-图像的放大，缩小"><a href="#1-图像的放大，缩小" class="headerlink" title="1 图像的放大，缩小"></a>1 图像的放大，缩小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （1） 放大：          参数interpolation 表示的是插值算法：INTER_LINEAR表示双线性</span></span><br><span class="line">reszie_img = cv2.resize(img,(w*<span class="number">3</span>,h*<span class="number">2</span>),interpolation=cv2.INTER_LINEAR)   </span><br><span class="line"><span class="built_in">print</span>(reszie_img.shape)</span><br><span class="line"><span class="comment"># (1280, 1920, 3)</span></span><br><span class="line">plt.imshow(reszie_img)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#(2) 缩小</span></span><br><span class="line">small_img = cv2.resize(img,<span class="literal">None</span>,fx=<span class="number">0.5</span>,fy=<span class="number">0.5</span>,interpolation=cv2.INTER_LINEAR)</span><br><span class="line"><span class="built_in">print</span>(small_img.shape)</span><br><span class="line"><span class="comment"># (320, 320, 3)</span></span><br><span class="line">plt.imshow(small_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170220921.png" alt="image-20220801170220921"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170250487.png" alt="image-20220801170250487"></p><h3 id="2-平移"><a href="#2-平移" class="headerlink" title="2 平移"></a>2 平移</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 至于平移矩阵前面的0,1组合，百度吧。</span></span><br><span class="line">h,w = img.shape[:<span class="number">2</span>]</span><br><span class="line">M1 = np.float32([[<span class="number">1</span>,<span class="number">0</span>,<span class="number">100</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">50</span>]])</span><br><span class="line">move_img = cv2.warpAffine(img,M1,(w,h))</span><br><span class="line">plt.imshow(move_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">M2 = np.float32([[<span class="number">1</span>,<span class="number">0</span>,-<span class="number">100</span>],[<span class="number">0</span>,<span class="number">1</span>,-<span class="number">50</span>]])</span><br><span class="line">move_img1 = cv2.warpAffine(img,M2,(w,h))</span><br><span class="line">plt.imshow(move_img1)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170326942.png" alt="image-20220801170326942"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170337054.png" alt="image-20220801170337054"></p><h3 id="3-图像旋转"><a href="#3-图像旋转" class="headerlink" title="3 图像旋转"></a>3 图像旋转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">center = (w//<span class="number">2.0</span>,h//<span class="number">2.0</span>)<span class="comment">#旋转中心</span></span><br><span class="line">M3 = cv2.getRotationMatrix2D(center,<span class="number">180</span>,<span class="number">1</span>) <span class="comment">#逆时针转转180度，负数表示顺时针，1 表示没有缩放。</span></span><br><span class="line">rotation_img = cv2.warpAffine(img,M3,(w,h))</span><br><span class="line">plt.imshow(rotation_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170404821.png" alt="image-20220801170404821"></p><h3 id="4-图像仿射变换"><a href="#4-图像仿射变换" class="headerlink" title="4 图像仿射变换"></a>4 图像仿射变换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  通过一系列原子变换复合实现，具体包括：平移（Translation）、缩放（Scale）、旋转（Rotation）、翻转（Flip）和错切（Shear）</span></span><br><span class="line">p1 = np.float32([[<span class="number">120</span>,<span class="number">35</span>],[<span class="number">215</span>,<span class="number">45</span>],[<span class="number">135</span>,<span class="number">120</span>]])</span><br><span class="line">p2 = np.float32([[<span class="number">135</span>,<span class="number">45</span>],[<span class="number">300</span>,<span class="number">110</span>],[<span class="number">130</span>,<span class="number">230</span>]])</span><br><span class="line">M4 = cv2.getAffineTransform(p1,p2) <span class="comment">####由两个像素点关系得到前后图的关系（这个关系可以有上面的原子变换复合实现）</span></span><br><span class="line">trans_img = cv2.warpAffine(img,M4,(w,h))</span><br><span class="line">plt.imshow(trans_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170432817.png" alt="image-20220801170432817"></p><h3 id="5-图像裁剪"><a href="#5-图像裁剪" class="headerlink" title="5 图像裁剪"></a>5 图像裁剪</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crop_img = img[<span class="number">200</span>:<span class="number">400</span>,<span class="number">150</span>:<span class="number">300</span>]</span><br><span class="line"><span class="built_in">print</span>(crop_img.shape)</span><br><span class="line"><span class="comment"># (200, 150, 3)</span></span><br><span class="line">plt.imshow(crop_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170458897.png" alt="image-20220801170458897"></p><h3 id="6-位运算：（and，or-xor，not）"><a href="#6-位运算：（and，or-xor，not）" class="headerlink" title="6 位运算：（and，or xor，not）"></a>6 位运算：（and，or xor，not）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rectangle = np.zeros((<span class="number">300</span>,<span class="number">300</span>),dtype=<span class="string">&#x27;uint8&#x27;</span>) <span class="comment">####画布大小。</span></span><br><span class="line"><span class="comment"># 参数：画布，第一个点坐标，第二个点坐标（两个点可以确定矩形），颜色，-1表示边框大小很细。</span></span><br><span class="line">rectangle_img = cv2.rectangle(rectangle,(<span class="number">25</span>,<span class="number">25</span>),(<span class="number">275</span>,<span class="number">275</span>),<span class="number">255</span>,-<span class="number">1</span>)</span><br><span class="line">plt.imshow(rectangle_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170803435.png" alt="image-20220801170803435"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rectangle = np.zeros((<span class="number">300</span>,<span class="number">300</span>),dtype=<span class="string">&#x27;uint8&#x27;</span>) <span class="comment">####画布大小。</span></span><br><span class="line"><span class="comment"># 参数：画布，圆点坐标，半径，颜色，-1表示边框大小很细。</span></span><br><span class="line">circle_img = cv2.circle(rectangle,(<span class="number">150</span>,<span class="number">150</span>),<span class="number">150</span>,<span class="number">255</span>,-<span class="number">1</span>)</span><br><span class="line">plt.imshow(circle_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：circle_img = cv2.circle(rectangle,(150,150),150,255,-1)之后</span></span><br><span class="line"><span class="comment"># circle_img跟rectangle其实是一样的哦，意思是在画布上画圆圈</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170846937.png" alt="image-20220801170846937"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （1） 与运算：</span></span><br><span class="line">and_img = cv2.bitwise_and(rectangle_img,circle_img)</span><br><span class="line">plt.imshow(and_img)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#（2）或运算</span></span><br><span class="line">or_img = cv2.bitwise_or(rectangle_img,circle_img)</span><br><span class="line">plt.imshow(or_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170930828.png" alt="image-20220801170930828"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170940871.png" alt="image-20220801170940871"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）异或运算</span></span><br><span class="line">xor_img = cv2.bitwise_xor(rectangle_img,circle_img)</span><br><span class="line">plt.imshow(xor_img)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#（4）非运算</span></span><br><span class="line">not_img=cv2.bitwise_not(circle_img)</span><br><span class="line">plt.imshow(not_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801173829625.png" alt="image-20220801173829625"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171021314.png" alt="image-20220801171021314"></p><h3 id="7-图像的分离和融合"><a href="#7-图像的分离和融合" class="headerlink" title="7 图像的分离和融合"></a>7 图像的分离和融合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;opencv.jpeg&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show() <span class="comment">##这个别忘了，然后，似乎颜色都变了。。。。。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170726457.png" alt="image-20220801170726457"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(1）分离</span></span><br><span class="line">(b,g,r) = cv2.split(img)</span><br><span class="line">plt.imshow(b)</span><br><span class="line">plt.show()</span><br><span class="line">plt.imshow(g)</span><br><span class="line">plt.show()</span><br><span class="line">plt.imshow(r)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171404936.png" alt="image-20220801171404936"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171418254.png" alt="image-20220801171418254"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171429000.png" alt="image-20220801171429000"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (2) 融合。</span></span><br><span class="line">zeros = np.zeros(img.shape[:<span class="number">2</span>],dtype=<span class="string">&quot;uint8&quot;</span>)</span><br><span class="line">merge_img = cv2.merge([zeros,zeros,r])  <span class="comment">#这里应该表示，用r这一个通道跟前面zeros，zeros，两个通道组合成为一张图片数据！</span></span><br><span class="line">plt.imshow(merge_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">merge_img1 = cv2.merge([zeros,g,zeros])</span><br><span class="line">plt.imshow(merge_img1)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">merge_img2 = cv2.merge([b,zeros,zeros])</span><br><span class="line">plt.imshow(merge_img2)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171457604.png" alt="image-20220801171457604"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171506261.png" alt="image-20220801171506261"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171515085.png" alt="image-20220801171515085"></p><h3 id="8-颜色空间：color-space"><a href="#8-颜色空间：color-space" class="headerlink" title="8 颜色空间：color space"></a>8 颜色空间：color space</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(1)灰度</span></span><br><span class="line">gray_img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">plt.imshow(gray_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）hsv（色度，饱和度，纯度）</span></span><br><span class="line">hsv_img = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)</span><br><span class="line">plt.imshow(hsv_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">lab_img = cv2.cvtColor(img,cv2.COLOR_BGR2LAB)</span><br><span class="line">plt.imshow(lab_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171603566.png" alt="image-20220801171603566"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171616322.png" alt="image-20220801171616322"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171625672.png" alt="image-20220801171625672"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>opencv-读取保存图片-读取保存摄像头或视频</title>
    <link href="http://example.com/2022/08/01/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/"/>
    <id>http://example.com/2022/08/01/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/</id>
    <published>2022-08-01T07:33:11.000Z</published>
    <updated>2022-08-01T08:49:11.842Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-加载并显示图片"><a href="#1-加载并显示图片" class="headerlink" title="1 加载并显示图片"></a>1 加载并显示图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parse = argparse.ArgumentParser() <span class="comment">#新建实例</span></span><br><span class="line">parse.add_argument(<span class="string">&#x27;path_image&#x27;</span>,<span class="built_in">help</span> = <span class="string">&#x27;path to input the image&#x27;</span>) <span class="comment">#增加参数</span></span><br><span class="line">args = parse.parse_args() <span class="comment"># 解析参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个参数:&quot;</span>,args.path_image)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(args.path_image))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个参数: kyrie.jpg</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 加载照片 方式1</span></span><br><span class="line">img = cv2.imread(args.path_image)</span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载图片 方式2</span></span><br><span class="line">arg_dict = <span class="built_in">vars</span>(parse.parse_args())  <span class="comment">#以字典的形式保存参数。</span></span><br><span class="line"><span class="built_in">print</span>(arg_dict)</span><br><span class="line"><span class="comment"># &#123;&#x27;path_image&#x27;: &#x27;kyrie.jpg&#x27;&#125;</span></span><br><span class="line">new_img = cv2.imread(arg_dict[<span class="string">&#x27;path_image&#x27;</span>])</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;kyrie1&#x27;</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;kyrie2&#x27;</span>,new_img)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入命令：python 4-read-show-image.py kyrie.jpg</p><p>得到如下效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/image-20220801162046659.png" alt="image-20220801162046659"></p><h3 id="2-加载图，转为灰度图，然后保存图片"><a href="#2-加载图，转为灰度图，然后保存图片" class="headerlink" title="2 加载图，转为灰度图，然后保存图片"></a>2 加载图，转为灰度图，然后保存图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 获取参数</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 添加参数</span></span><br><span class="line">parser.add_argument(<span class="string">&quot;img_input&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;read one image&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;img_output&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;save the processed image&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 解析参数，以字典形式保存参数和值</span></span><br><span class="line">args = <span class="built_in">vars</span>(parser.parse_args())</span><br><span class="line"><span class="built_in">print</span>(args)</span><br><span class="line"><span class="comment"># &#123;&#x27;img_input&#x27;: &#x27;kyrie.jpg&#x27;, &#x27;img_output&#x27;: &#x27;kyrie-gray.jpg&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 5 加载图片</span></span><br><span class="line">img = cv2.imread(args[<span class="string">&quot;img_input&quot;</span>])<span class="comment">#################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 处理：灰度处理</span></span><br><span class="line">img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<span class="comment">#################################</span></span><br><span class="line"><span class="built_in">print</span>(img_gray.shape)</span><br><span class="line"><span class="comment"># (640, 640) 就是变成一个通道的意思。</span></span><br><span class="line"><span class="comment"># 7 保存图片</span></span><br><span class="line">cv2.imwrite(args[<span class="string">&quot;img_output&quot;</span>], img_gray)<span class="comment">############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8 显示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Original Image&quot;</span>, img)<span class="comment">#################################</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Gray Image&quot;</span>, img_gray)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>命令行输入如下： python 5-read_process_save.py “kyrie.jpg” “kyrie-gray.jpg”    得到效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/image-20220801162552723.png" alt="image-20220801162552723"></p><h3 id="3-获取摄像头内容并显示出来摄像头内容"><a href="#3-获取摄像头内容并显示出来摄像头内容" class="headerlink" title="3 获取摄像头内容并显示出来摄像头内容"></a>3 获取摄像头内容并显示出来摄像头内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;index_camera&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;the camera ID&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="comment">########笔记本默认的摄像头ID为0哈，因此，这里运行代码时要输入摄像头ID。</span></span><br><span class="line"><span class="comment">#######自己插入的摄像头ID为1,2，。。。。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the camera index :&quot;</span>, args.index_camera) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">capture = cv2.VideoCapture(args.index_camera) <span class="comment"># 视频捕获</span></span><br><span class="line"></span><br><span class="line">frame_width = capture.get(cv2.CAP_PROP_FRAME_WIDTH) <span class="comment"># 帧的#########宽度</span></span><br><span class="line">frame_height = capture.get(cv2.CAP_PROP_FRAME_HEIGHT) <span class="comment"># 帧的#########高度</span></span><br><span class="line">fps = capture.get(cv2.CAP_PROP_FPS) <span class="comment"># ########################每秒的帧数，实时性，这个参数很重要。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;frame width: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(frame_width))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;frame height: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(frame_height))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;frames per second: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(fps))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> capture.isOpened() <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error Camera !&quot;</span>)</span><br><span class="line"><span class="comment"># 读取视频直到关闭</span></span><br><span class="line"><span class="keyword">while</span> capture.isOpened():</span><br><span class="line">    <span class="comment"># 通过摄像头，一帧一帧的捕获 ##########################一帧一帧哦！</span></span><br><span class="line">    ret, frame = capture.read() <span class="comment">######################ret 的值为True或False，代表有没有读到图片.</span></span><br><span class="line">    <span class="comment"># print(ret)</span></span><br><span class="line">    <span class="keyword">if</span> ret <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 显示捕获的帧</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;frame&quot;</span>, frame) <span class="comment">########在同一个窗口不断显示frame，就组成了视频效果啦，哈哈哈哈！！！</span></span><br><span class="line">        <span class="comment"># 将捕获的帧转化为灰度的帧</span></span><br><span class="line">        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        <span class="comment"># 显示灰度的帧</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;gray frame&quot;</span>, gray_frame)</span><br><span class="line">        <span class="comment"># 键盘输入q，退出视频捕获</span></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>): <span class="comment">######waitKey 参数单位：ms</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放</span></span><br><span class="line">capture.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">命令终端输入：</span></span><br><span class="line"><span class="attr">python</span> <span class="string">6-read_video_from_camera.py 0</span></span><br><span class="line"><span class="attr">终端输出：</span></span><br><span class="line"><span class="attr">the</span> <span class="string">camera index : 0</span></span><br><span class="line"><span class="attr">frame</span> <span class="string">width: 640.0</span></span><br><span class="line"><span class="attr">frame</span> <span class="string">height: 480.0</span></span><br><span class="line"><span class="attr">frames</span> <span class="string">per second: 30.0</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/image-20220801163656311.png" alt="image-20220801163656311"></p><h3 id="4-读取视频，并显示出来视频内容"><a href="#4-读取视频，并显示出来视频内容" class="headerlink" title="4 读取视频，并显示出来视频内容"></a>4 读取视频，并显示出来视频内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 加载库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 获取参数</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 添加参数</span></span><br><span class="line">parser.add_argument(<span class="string">&quot;video_path&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;the path to the video file&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 解析参数</span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 加载视频文件</span></span><br><span class="line">capture = cv2.VideoCapture(args.video_path) <span class="comment">######要么是摄像头ID号，要么是 视频路径哈！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 读取视频</span></span><br><span class="line">ret, frame = capture.read() <span class="comment"># ret 是否读取到了帧（图片）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ret:</span><br><span class="line">    cv2.imshow(<span class="string">&quot;video&quot;</span>, frame)</span><br><span class="line">    ret, frame = capture.read() <span class="comment"># 继续读取帧</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):  <span class="comment">########视频播放完会自动退出，或者在播放完之前按下 键盘 q 也会退出。</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">capture.release()</span><br><span class="line">cv2.destroyAllWindows() <span class="comment"># 关闭</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 输入如下命令运行代码：</span><br><span class="line"># python 7-read_video_from_file.py videos/view.mp4</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/image-20220801162756705.png" alt="image-20220801162756705"></p><h3 id="5-获取摄像头的内容，然后保存为视频格式文件"><a href="#5-获取摄像头的内容，然后保存为视频格式文件" class="headerlink" title="5 获取摄像头的内容，然后保存为视频格式文件"></a>5 获取摄像头的内容，然后保存为视频格式文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment">#  获取参数</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;video_output&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;the path to the output video&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获摄像头</span></span><br><span class="line">capture = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> capture.isOpened() <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Camera Error !&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7 获取帧的属性：宽，高，以及fps</span></span><br><span class="line">frame_width = capture.get(cv2.CAP_PROP_FRAME_WIDTH) <span class="comment"># 宽</span></span><br><span class="line">frame_height = capture.get(cv2.CAP_PROP_FRAME_HEIGHT) <span class="comment"># 高</span></span><br><span class="line">fps = capture.get(cv2.CAP_PROP_FPS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8 对视频进行编码  #################################################</span></span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">&quot;XVID&quot;</span>)</span><br><span class="line"><span class="comment"># 建立写入视频对象。参数分别为:1 写入路径，2 编码格式，3 fps，（w，h），False 表示保存灰度视频。True表示保存rgb彩色视频。</span></span><br><span class="line"><span class="comment"># output_gray = cv2.VideoWriter(args.video_output, fourcc, int(fps), (int(frame_width), int(frame_height)), False)</span></span><br><span class="line">output_gray = cv2.VideoWriter(args.video_output, fourcc, <span class="built_in">int</span>(fps), (<span class="built_in">int</span>(frame_width), <span class="built_in">int</span>(frame_height)), <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9 读取摄像头</span></span><br><span class="line"><span class="keyword">while</span> capture.isOpened():</span><br><span class="line">    ret, frame = capture.read() <span class="comment"># 一帧一帧地读取</span></span><br><span class="line">    <span class="keyword">if</span> ret <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 10 将读取到的帧转换为灰度</span></span><br><span class="line">        <span class="comment"># gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span></span><br><span class="line">        <span class="comment"># 11 将转换后的帧写入都新的视频文件中</span></span><br><span class="line">        <span class="comment"># output_gray.write(gray_frame)  #########################################</span></span><br><span class="line">        output_gray.write(frame)  <span class="comment">#########################################</span></span><br><span class="line">        <span class="comment"># 12 显示视频</span></span><br><span class="line">        <span class="comment"># cv2.imshow(&quot;gray&quot;, gray_frame)</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;rgb&quot;</span>, frame)</span><br><span class="line">        <span class="comment"># 13 等待或按q退出</span></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 14 释放资源</span></span><br><span class="line">capture.release()</span><br><span class="line">output_gray.release() <span class="comment">#########################</span></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">运行输入：</span></span><br><span class="line"><span class="string">python 8-read_camera_save_video.py videos/output-gray-videos.mp4    或者avi格式也行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-加载并显示图片&quot;&gt;&lt;a href=&quot;#1-加载并显示图片&quot; class=&quot;headerlink&quot; title=&quot;1 加载并显示图片&quot;&gt;&lt;/a&gt;1 加载并显示图片&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>py文件参数解析模块argparse</title>
    <link href="http://example.com/2022/08/01/py%E6%96%87%E4%BB%B6%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97argparse/"/>
    <id>http://example.com/2022/08/01/py%E6%96%87%E4%BB%B6%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97argparse/</id>
    <published>2022-08-01T07:31:57.000Z</published>
    <updated>2022-08-01T08:05:39.239Z</updated>
    
    <content type="html"><![CDATA[<p>这个参数解析模块有时候也挺重要的哈，特别是对调试人员来说，对合作伙伴在工作交接，团队协作项目时很重要哦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parse = argparse.ArgumentParser()</span><br><span class="line">parse.add_argument(<span class="string">&quot;number1&quot;</span>,<span class="built_in">help</span> = <span class="string">&#x27;第一个参数&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>)<span class="comment">#第一个参数</span></span><br><span class="line">parse.add_argument(<span class="string">&#x27;number2&#x27;</span>,<span class="built_in">help</span> = <span class="string">&#x27;第二个参数&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>)<span class="comment">#第二个参数</span></span><br><span class="line">args = parse.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个参数:&quot;</span>,args.number1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第二个参数:&quot;</span>,args.number2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;所有参数：&quot;</span>,args)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在命令窗口运行此代码，并且输入参数。</span></span><br><span class="line"><span class="comment"># (hui_tf) E:\PythonCode\唐国梁CV入门课程&gt;python 3-argParse-test.py 3 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个参数: 3</span></span><br><span class="line"><span class="string">第二个参数: 4</span></span><br><span class="line"><span class="string">所有参数： Namespace(number1=3, number2=4)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个参数解析模块有时候也挺重要的哈，特别是对调试人员来说，对合作伙伴在工作交接，团队协作项目时很重要哦&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>opencv-图像基础</title>
    <link href="http://example.com/2022/08/01/opencv-%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/08/01/opencv-%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/</id>
    <published>2022-08-01T07:30:24.000Z</published>
    <updated>2022-08-01T08:01:15.832Z</updated>
    
    <content type="html"><![CDATA[<p>一年前学习的一些opencv图像处理知识，最近搞无人机平台的堤坝检测项目，要对图片做前后增强处理，因此用到了opencv库的一些方法，因此就翻出以前写的笔记，整理成博客如下！</p><h3 id="1-读取彩色照片"><a href="#1-读取彩色照片" class="headerlink" title="1 读取彩色照片"></a>1 读取彩色照片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 读取彩色照片</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;kyrie.jpg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(img))</span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="built_in">print</span>(img.size)</span><br><span class="line"><span class="built_in">print</span>(img.dtype)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="string">(640, 640, 3)</span></span><br><span class="line"><span class="string">1228800</span></span><br><span class="line"><span class="string">uint8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示某个像素的三个颜色通道的值。</span></span><br><span class="line">(b,g,r) = img[<span class="number">300</span>,<span class="number">330</span>]</span><br><span class="line"><span class="built_in">print</span>(b,g,r)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">88 78 78</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">b = img[<span class="number">300</span>,<span class="number">330</span>,<span class="number">0</span>]</span><br><span class="line">g = img[<span class="number">300</span>,<span class="number">330</span>,<span class="number">1</span>]</span><br><span class="line">r = img[<span class="number">300</span>,<span class="number">330</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(b,g,r)</span><br><span class="line"><span class="comment"># 88 78 78</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给某像素点赋值。</span></span><br><span class="line">img[<span class="number">300</span>,<span class="number">330</span>] = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图片 kyrie 为窗口名</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;kyrie&#x27;</span>,img)</span><br><span class="line"><span class="comment">#等待</span></span><br><span class="line"><span class="comment"># cv2.waitKey(0)</span></span><br><span class="line"><span class="comment"># #关闭所有窗口，释放内存</span></span><br><span class="line"><span class="comment"># cv2.destroyAllWindows()</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/image-20220801155749339.png" alt="image-20220801155749339"></p><h3 id="2-读取灰度照片。"><a href="#2-读取灰度照片。" class="headerlink" title="2 读取灰度照片。"></a>2 读取灰度照片。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把白色与黑色之间按对数关系分为若干等级，称为灰度。灰度分为256阶。用灰度表示的图像称作灰度图。</span></span><br><span class="line"><span class="comment"># 三个通道变成只有一个通道 计算方法有几种，这里给出两种</span></span><br><span class="line"><span class="comment"># 任何颜色都由红、绿、蓝三基色组成，假如原来某点的颜色为RGB(R，G，B)，那么，我们可以通过下面几种方法，将其转换为灰度：</span></span><br><span class="line"><span class="comment"># 1.浮点法：Gray=R*0.3+G*0.59+B*0.11</span></span><br><span class="line"><span class="comment"># 2.整数法：Gray=(R*30+G*59+B*11)/100</span></span><br><span class="line">gray_img = cv2.imread(<span class="string">&#x27;kyrie.jpg&#x27;</span>,cv2.IMREAD_GRAYSCALE)</span><br><span class="line"><span class="built_in">print</span>(gray_img.shape)</span><br><span class="line"><span class="built_in">print</span>(gray_img.size)</span><br><span class="line"><span class="built_in">print</span>(gray_img.dtype)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(640, 640) </span></span><br><span class="line"><span class="string">409600</span></span><br><span class="line"><span class="string">uint8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;gray_img&#x27;</span>,gray_img)</span><br><span class="line"><span class="built_in">print</span>(gray_img[<span class="number">300</span>,<span class="number">300</span>])</span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/image-20220801155826948.png" alt="image-20220801155826948"></p><h3 id="3-打乱BGR顺序"><a href="#3-打乱BGR顺序" class="headerlink" title="3 打乱BGR顺序"></a>3 打乱BGR顺序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">如下两张图显示，红色跟蓝色调换了。</span><br><span class="line">opencv_img = cv2.imread(<span class="string">&#x27;opencv.jpeg&#x27;</span>)</span><br><span class="line">b,g,r = cv2.split(opencv_img)       <span class="comment">###########拆分通道</span></span><br><span class="line">new_opencv_img = cv2.merge([r,g,b]) <span class="comment">###########合并通道</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;opencv_img&#x27;</span>,opencv_img)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;new_opencv_img&#x27;</span>,new_opencv_img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#####方式二，用matplotlib显示</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.imshow(opencv_img)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.imshow(new_opencv_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">111</span>)</span><br><span class="line">plt.imshow(gray_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/image-20220801155848066.png" alt="image-20220801155848066"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/image-20220801155917764.png" alt="image-20220801155917764"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/image-20220801155932678.png" alt="image-20220801155932678"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一年前学习的一些opencv图像处理知识，最近搞无人机平台的堤坝检测项目，要对图片做前后增强处理，因此用到了opencv库的一些方法，因此就翻出以前写的笔记，整理成博客如下！&lt;/p&gt;
&lt;h3 id=&quot;1-读取彩色照片&quot;&gt;&lt;a href=&quot;#1-读取彩色照片&quot; class=&quot;</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>分布式日志服务、链路追踪</title>
    <link href="http://example.com/2022/07/03/%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <id>http://example.com/2022/07/03/%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</id>
    <published>2022-07-03T02:01:16.000Z</published>
    <updated>2022-08-02T14:23:55.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式日志服务、链路追踪"><a href="#分布式日志服务、链路追踪" class="headerlink" title="分布式日志服务、链路追踪"></a>分布式日志服务、链路追踪</h1><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">了解GrayLog的作用</span></span><br><span class="line"><span class="meta">-</span> <span class="string">了解SkyWalking的作用</span></span><br></pre></td></tr></table></figure><h1 id="1-分布式日志服务GrayLog"><a href="#1-分布式日志服务GrayLog" class="headerlink" title="1.分布式日志服务GrayLog"></a>1.分布式日志服务GrayLog</h1><p>在微服务架构下，微服务被拆分成多个微小的服务，每个微小的服务都部署在不同的服务器实例上，当我们定位问题，检索日志的时候需要依次登录每台服务器进行检索。</p><p>这样是不是感觉很繁琐和效率低下。所以我们还需要一个工具来帮助集中收集、存储和搜索这些跟踪信息。</p><p>集中化管理日志后，日志的统计和检索又成为一件比较麻烦的事情。以前，我们通过使用grep、awk和wc等Linux命令能实现检索和统计，但是对于要求更高的查询、排序和统计等要求和庞大的机器数量依然使用这样的方法难免有点力不从心。</p><p><strong>分布式日志服务</strong>就是来帮我们解决上述问题的。其基本思路是：</p><ul><li><strong>日志收集器</strong>：微服务中引入<strong>日志客户端</strong>，将记录的日志通过日志服务端发送到对应的收集器，然后以某种方式存储</li><li><strong>数据存储</strong>：一般使用ElasticSearch分布式存储，把收集器收集到的日志格式化，然后存储到分布式存储中</li><li><strong>web服务</strong>：利用ElasticSearch的统计搜索功能，实现日志查询和报表输出</li></ul><p>比较知名的分布式日志服务包括：</p><ul><li>ELK：elasticsearch、Logstash、Kibana</li><li>GrayLog：</li></ul><h2 id="1-1-什么是GrayLog"><a href="#1-1-什么是GrayLog" class="headerlink" title="1.1.什么是GrayLog"></a>1.1.什么是GrayLog</h2><p>业界比较知名的分布式日志服务解决方案是ELK，而我们今天要学习的是GrayLog。为什么呢？</p><p>ELK解决方案的问题：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1.</span> <span class="string">不能处理多行日志，比如Mysql慢查询，Tomcat/Jetty应用的Java异常打印</span></span><br><span class="line"><span class="meta">2.</span> <span class="string">不能保留原始日志，只能把原始日志分字段保存，这样搜索日志结果是一堆Json格式文本，无法阅读。</span></span><br><span class="line"><span class="meta">3.</span> <span class="string">不符合正则表达式匹配的日志行，被全部丢弃。</span></span><br></pre></td></tr></table></figure><p>GrayLog方案的优势：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1.</span> <span class="string">一体化方案，安装方便，不像ELK有3个独立系统间的集成问题。</span></span><br><span class="line"><span class="meta">2.</span> <span class="string">采集原始日志，并可以事后再添加字段，比如http_status_code，response_time等等。</span></span><br><span class="line"><span class="meta">3.</span> <span class="string">自己开发采集日志的脚本，并用curl/nc发送到Graylog Server，</span></span><br><span class="line"><span class="attr">发送格式是自定义的GELF，Flunted和Logstash都有相应的输出GELF消息的插件。</span></span><br><span class="line"><span class="attr">自己开发带来很大的自由度。实际上只需要用inotifywait监控日志的modify事件，</span></span><br><span class="line"><span class="meta">并把日志的新增行用curl/netcat发送到Graylog</span> <span class="string">Server就可。</span></span><br><span class="line"><span class="meta">4.</span> <span class="string">搜索结果高亮显示，就像google一样。</span></span><br><span class="line"><span class="meta">5.</span> <span class="string">搜索语法简单，比如： `source:mongo AND reponse_time_ms:&gt;5000`，避免直接输入elasticsearch搜索json语法</span></span><br><span class="line"><span class="meta">6.</span> <span class="string">搜索条件可以导出为elasticsearch的搜索json文本，方便直接开发调用elasticsearch rest api的搜索脚本。</span></span><br></pre></td></tr></table></figure><p>官网：<a href="https://www.graylog.org/">https://www.graylog.org/</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110121609000.png" alt="image-20200110121609000"></p><p>其基本框架如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110121214473.png" alt="image-20200110121214473"> </p><p>流程如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1  微服务中的GrayLog客户端发送日志到GrayLog服务端</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2  GrayLog把日志信息格式化，存储到Elasticsearch</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3  客户端通过浏览器访问GrayLog，GrayLog访问Elasticsearch</span></span><br></pre></td></tr></table></figure><p>这里<strong>MongoDB是用来存储GrayLog的配置信息</strong>的，这样搭建集群时，GrayLog的各节点可以共享配置</p><h2 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2.安装"></a>1.2.安装</h2><p>我们在虚拟机中选择使用Docker来安装。需要安装的包括：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">MongoDB：用来存储GrayLog的配置信息，可以使用最新版本</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">Elasticsearch：用来存储日志信息，目前GrayLog兼容的是6.x版本</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">GrayLog：GrayLog服务端，目前是3.1版本</span></span><br></pre></td></tr></table></figure><h3 id="1-2-1-上传docker镜像"><a href="#1-2-1-上传docker镜像" class="headerlink" title="1.2.1.上传docker镜像"></a>1.2.1.上传docker镜像</h3><p>上述镜像体积都比较大：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110122226790.png" alt="image-20200110122226790"> </p><p>我们上传到<code>/usr/local/src/</code>目录下，</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110134201395.png" alt="image-20200110134201395"> </p><p>然后执行命令，加载镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker load -i es6.tar</span><br><span class="line">docker load -i graylog3.tar</span><br><span class="line">docker load -i mongo.tar</span><br></pre></td></tr></table></figure><p>然后查看加载好的镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110134425311.png" alt="image-20200110134425311"></p><h3 id="1-2-2-运行es容器"><a href="#1-2-2-运行es容器" class="headerlink" title="1.2.2.运行es容器"></a>1.2.2.运行es容器</h3><p>注意：GrayLog3.1不兼容elasticsearch7.x版本，<strong>必须使用6.x版本</strong></p><p>命令如下：<strong>（前面也装过，但是版本，因此重新跑一个容器，注意要把前面那个es容器停掉！）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run --name leyou-es6 \</span><br><span class="line">    -e <span class="string">&quot;http.host=0.0.0.0&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;network.host=0.0.0.0&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">    -v es6-data:/usr/share/elasticsearch/data \</span><br><span class="line">    -v es6-logs:/usr/share/elasticsearch/logs \</span><br><span class="line">    --privileged \</span><br><span class="line">    -p 9201:9200 \</span><br><span class="line">    -p 9301:9300 \</span><br><span class="line">    -d \</span><br><span class="line">    es6</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li><code>--name leyou-es6</code>：容器名称是<code>leyou-es6</code></li><li>环境变量<ul><li><code>-e &quot;http.host=0.0.0.0&quot;</code>：监听的ip地址，外网可以访问</li><li><code>-e &quot;ES_JAVA_OPTS=-Xms256m -Xmx256m&quot;</code>：JVM内存参数</li><li><code>-e &quot;discovery.type=single-node&quot;</code>：单节点模式，无集群</li></ul></li><li>卷信息：<ul><li><code>-v es6-data:/usr/share/elasticsearch/data</code>：存放es中数据的卷</li><li><code>-v es6-logs:/usr/share/elasticsearch/logs</code>：存放es中日志的卷</li></ul></li><li><code>--privileged</code>：授予逻辑卷访问权限</li><li>端口信息：<ul><li><code>-p 9201:9200</code>：http端口，此处没有用9200，因为大家之前安装的ES版本是7，并且已经占用了9200端口</li><li><code>-p 9301:9300</code>：http端口，此处没有用9301，因为大家之前安装的ES版本是7，并且已经占用了9300端口</li></ul></li><li><code>es6</code>：使用的镜像名称</li></ul><h3 id="1-2-3-运行MongoDB容器"><a href="#1-2-3-运行MongoDB容器" class="headerlink" title="1.2.3.运行MongoDB容器"></a>1.2.3.运行MongoDB容器</h3><p>命令如下：<strong>（前面也装过，但是这里不需要密码，因此重新跑一个容器，注意要把前面那个mongodb容器停掉！）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run  \</span><br><span class="line">    --name leyou-mongo \</span><br><span class="line">    -p 27017:27017  \</span><br><span class="line">    -v mongo-config:/data/configdb/ \</span><br><span class="line">    -v mongo-db:/data/db/ \</span><br><span class="line">    --privileged \</span><br><span class="line">    -d \</span><br><span class="line">    mongo</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li><code>--name leyou-mongo</code>：容器名称是<code>leyou-mongo</code></li><li>卷信息：<ul><li><code>-v mongo-config:/data/configdb/</code>：存放mongodv中配置信息的卷</li><li><code>-v mongo-db:/data/db/</code>：存放mongodv中数据信息的卷</li></ul></li><li><code>--privileged</code>：授予逻辑卷访问权限</li><li>端口信息：<ul><li><code>-p 27017:27017</code>：mongodb的端口</li></ul></li><li><code>mongo</code>：使用的镜像名称</li></ul><h3 id="1-2-4-运行GrayLog容器"><a href="#1-2-4-运行GrayLog容器" class="headerlink" title="1.2.4.运行GrayLog容器"></a>1.2.4.运行GrayLog容器</h3><p>命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name leyou-log \</span><br><span class="line">    --link leyou-mongo:mongo \</span><br><span class="line">    -p 9000:9000 \</span><br><span class="line">    -p 12201:12201/udp \</span><br><span class="line">    -e GRAYLOG_HTTP_EXTERNAL_URI=http://192.168.206.99:9000/ \</span><br><span class="line">    -e GRAYLOG_ELASTICSEARCH_HOSTS=http://192.168.206.99:9201/ \</span><br><span class="line">    -e GRAYLOG_ROOT_TIMEZONE=<span class="string">&quot;Asia/Shanghai&quot;</span>  \</span><br><span class="line">    -e GRAYLOG_WEB_ENDPOINT_URI=<span class="string">&quot;http://192.168.206.99:9000/:9000/api&quot;</span> \</span><br><span class="line">    -e GRAYLOG_PASSWORD_SECRET=<span class="string">&quot;somepasswordpepper&quot;</span> \</span><br><span class="line">    -e GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918 \</span><br><span class="line">    -d \</span><br><span class="line">    graylog3</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li><code>--name leyou-log</code>：容器名称是<code>leyou-log</code></li><li><code>--link leyou-mongo:mongo</code>：连接另一个容器，因为GrayLog依赖于MongoDB，因此需要指定另一个容器信息，格式：<code>容器名称:镜像版本</code></li><li>环境变量<ul><li><code>-e GRAYLOG_HTTP_EXTERNAL_URI=http://192.168.150.101:9000/</code>：对外开放的ip和端口信息，这里用9000端口</li><li><code>-e GRAYLOG_ELASTICSEARCH_HOSTS=http://192.168.150.101:9201/</code>：GrayLog依赖于ES，这里指定ES的地址</li><li><code>-e GRAYLOG_WEB_ENDPOINT_URI=&quot;http://192.168.150.101:9000/:9000/api&quot;</code>：对外开放的API地址</li><li><code>-e GRAYLOG_PASSWORD_SECRET=&quot;somepasswordpepper&quot;</code>：密码加密的秘钥</li><li><code>-e GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918</code>：密码加密后的密文。明文是<code>admin</code>，账户也是<code>admin</code></li><li><code>-e GRAYLOG_ROOT_TIMEZONE=&quot;Asia/Shanghai&quot;</code>：GrayLog容器内时区</li></ul></li><li>端口信息：<ul><li><code>-p 9000:9000</code>：GrayLog的http服务端口，9000</li><li><code>-p 12201:12201/udp</code>：GrayLog的UDP协议端口，用于接收从微服务发来的日志信息</li></ul></li><li><code>graylog3</code>：使用的镜像名称</li></ul><p>如果看到这个信息，代表启动成功：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111180857520.png" alt="image-20200111180857520"></p><p>或者在终端中敲入命令行<strong>：docker logs leyou-log, 看到successfully  就表示启动成功</strong>，然后使用9000端口进行浏览器访问!!!!!</p><h2 id="1-3-设置日志收集器"><a href="#1-3-设置日志收集器" class="headerlink" title="1.3.设置日志收集器"></a>1.3.设置日志收集器</h2><h3 id="1-3-1-登录控制台"><a href="#1-3-1-登录控制台" class="headerlink" title="1.3.1.登录控制台"></a>1.3.1.登录控制台</h3><p>在浏览器中输入：<a href="http://192.168.206.99:9000即可访问：">http://192.168.206.99:9000即可访问：</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200806230912294.png" alt="image-20200806230912294"></p><p>输入账户和密码，都是<code>admin</code>，进入首页，不过因为没有数据，看不到日志信息，而是欢迎界面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110141209558.png" alt="image-20200110141209558"></p><h3 id="1-3-2-配置Inputs"><a href="#1-3-2-配置Inputs" class="headerlink" title="1.3.2.配置Inputs"></a>1.3.2.配置Inputs</h3><p>在页面点击<code>System</code>菜单，选择<code>Inputs</code></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110141338638.png" alt="image-20200110141338638"></p><p>在页面的下拉选框中，选择<code>GELF UDP</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110141447592.png" alt="image-20200110141447592"></p><p>然后点击<code>Launch new input</code>按钮：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110141537910.png" alt="image-20200110141537910"> </p><p>会弹出表单窗口：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110141845482.png" alt="image-20200110141845482"> </p><p>填写表单，点击<code>Save</code>保存即可。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110142140278.png" alt="image-20200110142140278"></p><p>注意：这里UDP的端口是<code>12201</code>.</p><p><strong>接着下面写一个客户端，将我们的客户端日志信息写到已经启动并配置好了的graylog中去！</strong></p><h2 id="1-4-SpringBoot集成"><a href="#1-4-SpringBoot集成" class="headerlink" title="1.4.SpringBoot集成"></a>1.4.SpringBoot集成</h2><p>现在，GrayLog的服务端日志收集器已经准备好，我们还需要在项目中添加GrayLog的客户端，将项目日志<strong>发送到GrayLog服务中，保存到ElasticSearch。</strong></p><p>基本步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1.引入GrayLog客户端依赖</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2.配置Logback，集成GrayLog的Appender</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3.启动并测试</span></span><br></pre></td></tr></table></figure><p>我们以注册中心<code>ly-registry</code>为例：</p><h3 id="1-4-1-引入依赖"><a href="#1-4-1-引入依赖" class="headerlink" title="1.4.1.引入依赖"></a>1.4.1.引入依赖</h3><p>这个是第三方提供的GrayLog依赖，并不是GrayLog官网。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>biz.paluch.logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-gelf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-2-配置Logback"><a href="#1-4-2-配置Logback" class="headerlink" title="1.4.2.配置Logback"></a>1.4.2.配置Logback</h3><p>在项目的<code>resources</code>目录中，添加文件<code>logback.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;GELF&quot;</span> <span class="attr">class</span>=<span class="string">&quot;biz.paluch.logging.gelf.logback.GelfLogbackAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--GrayLog服务地址  ##############--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">host</span>&gt;</span>udp:192.168.206.99<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--GrayLog服务端口--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>12201<span class="tag">&lt;/<span class="name">port</span>&gt;</span>   <span class="comment">&lt;!--对应graylog容器启动时的端口##############--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当前服务名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">facility</span>&gt;</span>ly-registry<span class="tag">&lt;/<span class="name">facility</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extractStackTrace</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extractStackTrace</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filterStackTrace</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filterStackTrace</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mdcProfiling</span>&gt;</span>true<span class="tag">&lt;/<span class="name">mdcProfiling</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timestampPattern</span>&gt;</span>yyyy-MM-dd HH:mm:ss,SSS<span class="tag">&lt;/<span class="name">timestampPattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maximumMessageSize</span>&gt;</span>8192<span class="tag">&lt;/<span class="name">maximumMessageSize</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.leyou&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;GELF&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;GELF&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110143105420.png" alt="image-20200110143105420"> </p><h3 id="1-4-3-启动测试"><a href="#1-4-3-启动测试" class="headerlink" title="1.4.3.启动测试"></a>1.4.3.启动测试</h3><p>启动<code>ly-registry</code>项目，然后访问刚才的： <a href="http://192.168.206.99:9000，然后点击search按钮即可看到结果：">http://192.168.206.99:9000，然后点击search按钮即可看到结果：</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200806232147420.png" alt="image-20200806232147420"></p><p>这个页面可以对日志做各种搜索和过滤（<strong>底层是对elasticSearch进行搜索</strong>）</p><h2 id="1-5-日志回收策略"><a href="#1-5-日志回收策略" class="headerlink" title="1.5.日志回收策略"></a>1.5.日志回收策略</h2><p>到此graylog的基础配置就算完成了，已经可以收到日志数据。</p><p>但是在实际工作中，服务日志会非常多，这么多的日志，如果不进行存储限制，那么不久就会占满磁盘，查询变慢等等，而且过久的历史日志对于实际工作中的有效性也会很低。</p><p>Graylog则自身集成了日志数据限制的配置，可以通过如下进行设置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110144425302.png" alt="image-20200110144425302"></p><p>选择<code>Default index set</code>的<code>Edit</code>按钮：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110144531385.png" alt="image-20200110144531385"></p><p>GrayLog有3种日志回收限制，触发以后就会开始回收空间，删除索引：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110145043659.png" alt="image-20200110145043659"> </p><p>分别是：</p><ul><li><code>Index Message Count</code>：按照日志数量统计，默认超过<code>1000000</code>条日志开始清理</li><li><code>Index Size</code>：按照日志大小统计，默认超过<code>1GB</code>开始清理</li><li><code>Index Time</code>：按照日志日期清理，默认日志存储1天</li></ul><h2 id="1-6-搜索语法"><a href="#1-6-搜索语法" class="headerlink" title="1.6.搜索语法"></a>1.6.搜索语法</h2><p>在search页面，可以完成基本的日志搜索功能：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111180313985.png" alt="image-20200111180313985"></p><h3 id="1）搜索语法"><a href="#1）搜索语法" class="headerlink" title="1）搜索语法"></a>1）搜索语法</h3><p>搜索语法非常简单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名:搜索关键字</span><br></pre></td></tr></table></figure><p>例如：<code>level:3</code>代表搜索日志级别<code>level</code>为<code>3</code>的日志，即错误日志。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110151807560.png" alt="image-20200110151807560"> </p><h3 id="2）字段选择"><a href="#2）字段选择" class="headerlink" title="2）字段选择"></a>2）字段选择</h3><p>GrayLog存储的日志字段比较多，包括：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110152040832.png" alt="image-20200110152040832"> </p><p>可以自由选择需要展示的字段，搜索结果如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111180143471.png" alt="image-20200111180143471"></p><h2 id="1-7-日志统计仪表盘"><a href="#1-7-日志统计仪表盘" class="headerlink" title="1.7.日志统计仪表盘"></a>1.7.日志统计仪表盘</h2><p>GrayLog支持把日志按照自己需要的方式形成统计报表，并把许多报表组合一起，形成DashBoard（仪表盘），方便对日志统计分析。</p><h3 id="1-7-1-创建仪表盘"><a href="#1-7-1-创建仪表盘" class="headerlink" title="1.7.1.创建仪表盘"></a>1.7.1.创建仪表盘</h3><p>进入仪表盘页面，创建一个仪表盘</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110152322152.png" alt="image-20200110152322152"></p><p>在弹出的表单中填写信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110152530496.png" alt="image-20200110152530496"> </p><p>保存。</p><h3 id="1-7-2-添加结果到仪表盘"><a href="#1-7-2-添加结果到仪表盘" class="headerlink" title="1.7.2.添加结果到仪表盘"></a>1.7.2.添加结果到仪表盘</h3><p>回到search页面，然后找到Fields部分，点击任意字段，即可添加统计信息。</p><p>比如：点击<code>facility</code>字段，根据应用名称来统计：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110153253946.png" alt="image-20200110153253946"> </p><p>选择<code>Quick values</code>，在页面展示结果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110153338398.png" alt="image-20200110153338398"></p><p>然后点击<code>Add to dashboard</code>，选择乐优商城：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110153428198.png" alt="image-20200110153428198"></p><p>在弹出的窗口中，添加一个标题：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110153601194.png" alt="image-20200110153601194"> </p><p>按照这种方式，添加大量数据到仪表盘即可。</p><p>此时，进入仪表盘，可以看到很多统计信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110160042271.png" alt="image-20200110160042271"></p><p>详细配置，可以参考官方文档：<a href="http://docs.graylog.org/en/latest/pages/extended_search.html">http://docs.graylog.org/en/latest/pages/extended_search.html</a></p><h2 id="1-8-了解FileBeats（了解）"><a href="#1-8-了解FileBeats（了解）" class="headerlink" title="1.8.了解FileBeats（了解）"></a>1.8.了解FileBeats（了解）</h2><p>上面的日志收集器是通过SpringBoot中整合GrayLog的插件来完成，还有一种比较流行的方式，是使用Elastic的FileBeat（<a href="https://www.elastic.co/guide/en/beats/filebeat/current/index.html%EF%BC%89%E4%BA%A7%E5%93%81%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AF%BB%E5%8F%96%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E3%80%82%E5%8F%AF%E4%BB%A5%E6%94%AF%E6%8C%81%E5%90%84%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E3%80%82">https://www.elastic.co/guide/en/beats/filebeat/current/index.html）产品，直接读取日志文件。可以支持各种不同的日志文件格式。</a></p><p>GrayLog通过一种叫做Beats的Inputs类型来接受FileBeat：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111165847338.png" alt="image-20200111165847338"> </p><p>不过，怎样让FileBeat收集的日志被格式化为GrayLog需要的格式呢？这就需要GrayLog提供的SideCar来实现：<a href="http://docs.graylog.org/en/3.1/pages/sidecar.html#">http://docs.graylog.org/en/3.1/pages/sidecar.html#</a></p><p>实现流程如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111170101709.png" alt="image-20200111170101709"></p><p>流程步骤：</p><ul><li>通过wxlog或者FileBeats收集日志数据，交给GrayLog的SideCar</li><li>通过GrayLog的SideCar对数据处理，发送到GrayLog的INPUTS</li><li>GrayLog将数据存储到ElasticSearch中</li></ul><p>这种方式的优点：</p><ul><li>无需在应用中编程或配置，与应用解耦合，没有侵入</li><li>日志收集是独立进程，不影响应用的性能</li></ul><p>缺点：</p><ul><li>配置复杂</li></ul><p>综上所述，生产环境下适合用这种beats方式来收集日志。</p><h1 id="2-APM系统SkyWalking"><a href="#2-APM系统SkyWalking" class="headerlink" title="2.APM系统SkyWalking"></a>2.APM系统SkyWalking</h1><p>参考文档：<a href="https://www.cnblogs.com/xiaoqi/p/apm.html">https://www.cnblogs.com/xiaoqi/p/apm.html</a></p><h2 id="2-1-什么是APM"><a href="#2-1-什么是APM" class="headerlink" title="2.1.什么是APM"></a>2.1.什么是APM</h2><p>随着微服务架构的流行，一次请求往往需要涉及到多个服务，因此<strong>服务性能监控和排查</strong>就变得更复杂：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">不同的服务可能由不同的团队开发、甚至可能使用不同的编程语言来实现</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">服务有可能布在了几千台服务器，横跨多个不同的数据中心</span></span><br></pre></td></tr></table></figure><p>因此，就需要一些可以帮助理解系统行为、用于分析性能问题的工具，以便发生故障的时候，能够快速定位和解决问题，这就是APM系统，全称是（<strong>A</strong>pplication <strong>P</strong>erformance <strong>M</strong>onitor，当然也有叫 <strong>A</strong>pplication <strong>P</strong>erformance <strong>M</strong>anagement tools）</p><p>AMP最早是谷歌公开的论文提到的 <a href="http://bigbully.github.io/Dapper-translation">Google Dapper</a>。Dapper是Google生产环境下的分布式跟踪系统，自从Dapper发展成为一流的监控系统之后，给google的开发者和运维团队帮了大忙，所以谷歌公开论文分享了Dapper。</p><h3 id="2-1-1-面临的问题"><a href="#2-1-1-面临的问题" class="headerlink" title="2.1.1.面临的问题"></a>2.1.1.面临的问题</h3><p><strong>在google的首页页面，提交一个查询请求后，会经历什么：</strong></p><ul><li>可能对上百台查询服务器发起了一个Web查询，每一个查询都有自己的Index</li><li>这个查询可能会被发送到多个的子系统，这些子系统分别用来处理广告、进行拼写检查或是查找一些像图片、视频或新闻这样的特殊结果</li><li>根据每个子系统的查询结果进行筛选，得到最终结果，最后汇总到页面上</li></ul><p>总结一下：</p><ul><li>1   一次全局搜索有可能调用上千台服务器，涉及各种服务。</li><li>2   用户对搜索的耗时是很敏感的，而任何一个子系统的低效都导致导致最终的搜索耗时</li></ul><p><strong>如果一次查询耗时不正常，工程师怎么来排查到底是由哪个服务调用造成的？</strong></p><ul><li>首先，这个工程师可能无法准确的定位到这次全局搜索是调用了哪些服务，因为新的服务、乃至服务上的某个片段，都有可能在任何时间上过线或修改过，有可能是面向用户功能，也有可能是一些例如针对性能或安全认证方面的功能改进</li><li>其次，你不能苛求这个工程师对所有参与这次全局搜索的服务都了如指掌，每一个服务都有可能是由不同的团队开发或维护的</li><li>再次，这些暴露出来的服务或服务器有可能同时还被其他客户端使用着，所以这次全局搜索的性能问题甚至有可能是由其他应用造成的</li></ul><p>从上面可以看出Dapper需要：</p><ul><li>无所不在的部署，无所不在的重要性不言而喻，因为在使用跟踪系统的进行监控时，即便只有一小部分没被监控到，那么人们对这个系统是不是值得信任都会产生巨大的质疑</li><li>持续的监控</li></ul><h3 id="2-1-2-APM的目标"><a href="#2-1-2-APM的目标" class="headerlink" title="2.1.2.APM的目标"></a>2.1.2.APM的目标</h3><ul><li><p><strong>性能消耗低</strong></p><ul><li>APM组件服务的影响应该做到足够小。<strong>服务调用埋点本身会带来性能损耗，这就需要调用跟踪的低损耗，实际中还会通过配置采样率的方式，选择一部分请求去分析请求路径</strong>。在一些高度优化过的服务，即使一点点损耗也会很容易察觉到，而且有可能迫使在线服务的部署团队不得不将跟踪系统关停。</li></ul></li><li><p><strong>应用透明</strong>，也就是<strong>代码的侵入性小</strong></p><ul><li>即也作为业务组件，应当尽可能少入侵或者无入侵其他业务系统，对于使用方透明，减少开发人员的负担。</li><li>对于应用的程序员来说，是不需要知道有跟踪系统这回事的。如果一个跟踪系统想生效，就必须需要依赖应用的开发者主动配合，那么这个跟踪系统也太脆弱了，往往由于跟踪系统在应用中植入代码的bug或疏忽导致应用出问题，这样才是无法满足对跟踪系统“无所不在的部署”这个需求。</li></ul></li><li><p><strong>可扩展性</strong></p><ul><li><strong>一个优秀的调用跟踪系统必须支持分布式部署，具备良好的可扩展性。能够支持的组件越多当然越好</strong>。或者提供便捷的插件开发API，对于一些没有监控到的组件，应用开发者也可以自行扩展。</li></ul></li><li><p><strong>数据的分析</strong></p><ul><li><strong>数据的分析要快 ，分析的维度尽可能多</strong>。跟踪系统能提供足够快的信息反馈，就可以对生产环境下的异常状况做出快速反应。<strong>分析的全面，能够避免二次开发</strong>。</li></ul></li></ul><h3 id="2-1-3-APM的原理"><a href="#2-1-3-APM的原理" class="headerlink" title="2.1.3.APM的原理"></a>2.1.3.APM的原理</h3><p>先来看一次请求调用示例：</p><ol><li>包括：前端（A），两个中间层（B和C），以及两个后端（D和E）</li><li>当用户发起一个请求时，首先到达前端A服务，然后分别对B服务和C服务进行RPC调用；</li><li>B服务处理完给A做出响应，但是C服务还需要和后端的D服务和E服务交互之后再返还给A服务，最后由A服务来响应用户的请求；</li></ol><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111105854727.png" alt="image-20200111105854727"> </p><p>如何才能实现跟踪呢？需要明白下面几个概念：</p><ul><li><strong>探针</strong>：负责在客户端程序运行时搜索服务调用链路信息，发送给收集器</li><li>收集器：负责将数据格式化，保存到存储器</li><li>存储器：保存数据</li><li>UI界面：统计并展示</li></ul><p>探针会在链路追踪时记录每次调用的信息，Span是<strong>基本单元</strong>，一次链路调用（可以是RPC，DB等没有特定的限制）创建一个span，通过一个64位ID标识它；同时附加（Annotation）作为payload负载信息，用于记录性能等数据。</p><p>一个Span的基本数据结构：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">type Span <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    TraceID    int64 <span class="comment">// 用于标示一次完整的请求id</span></span><br><span class="line">    Name       string</span><br><span class="line">    ID         int64 <span class="comment">// 当前这次调用span_id</span></span><br><span class="line">    ParentID   int64 <span class="comment">// 上层服务的调用span_id  最上层服务parent_id为null，代表根服务root</span></span><br><span class="line">    Annotation []Annotation <span class="comment">// 记录性能等数据</span></span><br><span class="line">    Debug      <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一次请求的每个链路，通过spanId、parentId就能串联起来：</strong></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111112325019.png" alt="image-20200111112325019"> </p><p>当然，从请求到服务器开始，服务器返回response结束，<strong>每个span存在相同的唯一标识trace_id</strong>。</p><h3 id="2-1-3-APM系统的选型"><a href="#2-1-3-APM系统的选型" class="headerlink" title="2.1.3.APM系统的选型"></a>2.1.3.APM系统的选型</h3><p>市面上的全链路监控理论模型大多都是借鉴Google Dapper论文，重点关注以下三种APM组件：</p><ul><li>**<a href="https://link.juejin.im/?target=http://zipkin.io/">Zipkin</a>**：由Twitter公司开源，开放源代码分布式的跟踪系统，用于收集服务的定时数据，以解决微服务架构中的延迟问题，包括：数据的收集、存储、查找和展现。</li><li>**<a href="https://pinpoint.com/">Pinpoint</a>**：一款对Java编写的大规模分布式系统的APM工具，由韩国人开源的分布式跟踪组件。</li><li>**<a href="https://skywalking.apache.org/zh/">Skywalking</a>**：国产的优秀APM组件，是一个对JAVA分布式应用程序集群的业务运行情况进行追踪、告警和分析的系统。现在是Apache的顶级项目之一</li></ul><p>选项就是对比各个系统的使用差异，主要对比项：</p><ol><li><p><strong>探针的性能</strong></p><p>主要是agent对服务的吞吐量、CPU和内存的影响。微服务的规模和动态性使得数据收集的成本大幅度提高。</p></li><li><p><strong>collector的可扩展性</strong></p><p>能够水平扩展以便支持大规模服务器集群。</p></li><li><p><strong>全面的调用链路数据分析</strong></p><p>提供代码级别的可见性以便轻松定位失败点和瓶颈。</p></li><li><p><strong>对于开发透明，容易开关</strong></p><p>添加新功能而无需修改代码，容易启用或者禁用。</p></li><li><p><strong>完整的调用链应用拓扑</strong></p><p>自动检测应用拓扑，帮助你搞清楚应用的架构</p></li></ol><p>三者对比如下：</p><table><thead><tr><th>对比项</th><th>zipkin</th><th>pinpoint</th><th>skywalking</th></tr></thead><tbody><tr><td>探针性能</td><td>中</td><td>低</td><td><strong>高</strong></td></tr><tr><td>collector扩展性</td><td><strong>高</strong></td><td>中</td><td><strong>高</strong></td></tr><tr><td>调用链路数据分析</td><td>低</td><td><strong>高</strong></td><td>中</td></tr><tr><td>对开发透明性</td><td>中</td><td><strong>高</strong></td><td><strong>高</strong></td></tr><tr><td>调用链应用拓扑</td><td>中</td><td><strong>高</strong></td><td>中</td></tr><tr><td>社区支持</td><td><strong>高</strong></td><td>中</td><td><strong>高</strong></td></tr></tbody></table><p>综上所述，<strong>使用skywalking是最佳的选择。</strong></p><h2 id="2-2-Skywalking介绍"><a href="#2-2-Skywalking介绍" class="headerlink" title="2.2.Skywalking介绍"></a>2.2.Skywalking介绍</h2><p><strong>SkyWalking</strong> 创建与2015年，提供分布式追踪功能。从5.x开始，项目进化为一个完成功能的Application Performance Management系统。<br>他被用于追踪、监控和诊断分布式系统，特别是使用微服务架构，云原生或容积技术。提供以下主要功能：</p><ul><li>分布式追踪和上下文传输</li><li>应用、实例、服务性能指标分析</li><li>根源分析</li><li>应用拓扑分析</li><li>应用和服务依赖分析</li><li>慢服务检测</li><li>性能优化</li></ul><p>官网地址：<a href="http://skywalking.apache.org/">http://skywalking.apache.org/</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111114027257.png" alt="image-20200111114027257"></p><p>主要的特征：</p><ul><li><p>多语言探针或类库</p><ul><li>Java自动探针，追踪和监控程序时，不需要修改源码。</li><li>社区提供的其他多语言探针<ul><li><a href="https://github.com/OpenSkywalking/skywalking-netcore">.NET Core</a></li><li><a href="https://github.com/OpenSkywalking/skywalking-nodejs">Node.js</a></li></ul></li></ul></li><li><p><strong>多种后端存储</strong>： <strong>ElasticSearch</strong>， H2</p></li><li><p>支持</p><p>OpenTracing</p><ul><li>Java自动探针支持和OpenTracing API协同工作</li></ul></li><li><p>轻量级、完善功能的后端聚合和分析</p></li><li><p>现代化Web UI</p></li><li><p>日志集成</p></li><li><p>应用、实例和服务的告警</p></li></ul><h2 id="2-3-结构图"><a href="#2-3-结构图" class="headerlink" title="2.3.结构图"></a>2.3.结构图</h2><p>先来看下Skywalking的官方给出的结构图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111115215608.png" alt="image-20200111115215608"></p><p>大致分四个部分：</p><ul><li>skywalking-oap-server：就是<strong>O</strong>bservability <strong>A</strong>nalysis <strong>P</strong>latformd的服务，用来收集和处理探针发来的数据</li><li>skywalking-UI：就是skywalking提供的Web UI 服务，图形化方式展示服务链路、拓扑图、trace、性能监控等</li><li>agent：探针，获取服务调用的链路信息、性能信息，发送到skywalking的OAP服务</li><li>Storage：存储，<strong>一般选择elasticsearch</strong></li></ul><p>因此我们安装部署也从这四个方面入手，不过elasticsearch已经安装完成，还剩下3个。</p><h2 id="2-4-安装OAP和UI服务"><a href="#2-4-安装OAP和UI服务" class="headerlink" title="2.4.安装OAP和UI服务"></a>2.4.安装OAP和UI服务</h2><h3 id="1）上传安装包"><a href="#1）上传安装包" class="headerlink" title="1）上传安装包"></a>1）上传安装包</h3><p>官方推荐的是源码安装，因此我们已经下载好了安装包：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111115820178.png" alt="image-20200111115820178"> </p><p>我们上传到虚拟机的 <code>/usr/local/src</code>目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111120021528.png" alt="image-20200111120021528"> </p><h3 id="2）解压"><a href="#2）解压" class="headerlink" title="2）解压"></a>2）解压</h3><p>解压安装包，并重命名为skywalking：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xvf apache-skywalking-apm-6.5.0.tar.gz</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111120247193.png" alt="image-20200111120247193"> </p><p>目录结构：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111120507790.png" alt="image-20200111120507790"> </p><h3 id="3）修改配置"><a href="#3）修改配置" class="headerlink" title="3）修改配置"></a>3）修改配置</h3><p>进入<code>config</code>目录，修改<code>application.yml</code>，主要是把存储方案从h2改为elasticsearch</p><p>建议直接使用下面的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"># or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"># distributed with this work for additional information</span></span><br><span class="line"><span class="comment"># regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"># to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"># &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"># with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cluster:</span></span><br><span class="line">  <span class="attr">standalone:</span></span><br><span class="line"><span class="attr">core:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="comment"># Mixed: Receive agent data, Level 1 aggregate, Level 2 aggregate</span></span><br><span class="line">    <span class="comment"># Receiver: Receive agent data, Level 1 aggregate</span></span><br><span class="line">    <span class="comment"># Aggregator: Level 2 aggregate</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">$&#123;SW_CORE_ROLE:Mixed&#125;</span> <span class="comment"># Mixed/Receiver/Aggregator</span></span><br><span class="line">    <span class="attr">restHost:</span> <span class="string">$&#123;SW_CORE_REST_HOST:0.0.0.0&#125;</span></span><br><span class="line">    <span class="attr">restPort:</span> <span class="string">$&#123;SW_CORE_REST_PORT:12800&#125;</span></span><br><span class="line">    <span class="attr">restContextPath:</span> <span class="string">$&#123;SW_CORE_REST_CONTEXT_PATH:/&#125;</span></span><br><span class="line">    <span class="attr">gRPCHost:</span> <span class="string">$&#123;SW_CORE_GRPC_HOST:0.0.0.0&#125;</span></span><br><span class="line">    <span class="attr">gRPCPort:</span> <span class="string">$&#123;SW_CORE_GRPC_PORT:11800&#125;</span></span><br><span class="line">    <span class="attr">downsampling:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Hour</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Day</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Month</span></span><br><span class="line">    <span class="comment"># Set a timeout on metrics data. After the timeout has expired, the metrics data will automatically be deleted.</span></span><br><span class="line">    <span class="attr">enableDataKeeperExecutor:</span> <span class="string">$&#123;SW_CORE_ENABLE_DATA_KEEPER_EXECUTOR:true&#125;</span> <span class="comment"># Turn it off then automatically metrics data delete will be close.</span></span><br><span class="line">    <span class="attr">dataKeeperExecutePeriod:</span> <span class="string">$&#123;SW_CORE_DATA_KEEPER_EXECUTE_PERIOD:5&#125;</span> <span class="comment"># How often the data keeper executor runs periodically, unit is minute</span></span><br><span class="line">    <span class="attr">recordDataTTL:</span> <span class="string">$&#123;SW_CORE_RECORD_DATA_TTL:90&#125;</span> <span class="comment"># Unit is minute</span></span><br><span class="line">    <span class="attr">minuteMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_MINUTE_METRIC_DATA_TTL:90&#125;</span> <span class="comment"># Unit is minute</span></span><br><span class="line">    <span class="attr">hourMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_HOUR_METRIC_DATA_TTL:36&#125;</span> <span class="comment"># Unit is hour</span></span><br><span class="line">    <span class="attr">dayMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_DAY_METRIC_DATA_TTL:45&#125;</span> <span class="comment"># Unit is day</span></span><br><span class="line">    <span class="attr">monthMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_MONTH_METRIC_DATA_TTL:18&#125;</span> <span class="comment"># Unit is month</span></span><br><span class="line">    <span class="comment"># Cache metric data for 1 minute to reduce database queries, and if the OAP cluster changes within that minute,</span></span><br><span class="line">    <span class="comment"># the metrics may not be accurate within that minute.</span></span><br><span class="line">    <span class="attr">enableDatabaseSession:</span> <span class="string">$&#123;SW_CORE_ENABLE_DATABASE_SESSION:true&#125;</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"> <span class="attr">elasticsearch:</span></span><br><span class="line">   <span class="attr">nameSpace:</span> <span class="string">$&#123;SW_NAMESPACE:&quot;docker-cluster&quot;&#125;</span></span><br><span class="line">   <span class="attr">clusterNodes:</span> <span class="string">$&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9201&#125;</span></span><br><span class="line">   <span class="attr">protocol:</span> <span class="string">$&#123;SW_STORAGE_ES_HTTP_PROTOCOL:&quot;http&quot;&#125;</span></span><br><span class="line">   <span class="attr">trustStorePath:</span> <span class="string">$&#123;SW_SW_STORAGE_ES_SSL_JKS_PATH:&quot;../es_keystore.jks&quot;&#125;</span></span><br><span class="line">   <span class="attr">trustStorePass:</span> <span class="string">$&#123;SW_SW_STORAGE_ES_SSL_JKS_PASS:&quot;&quot;&#125;</span></span><br><span class="line">   <span class="attr">user:</span> <span class="string">$&#123;SW_ES_USER:&quot;&quot;&#125;</span></span><br><span class="line">   <span class="attr">password:</span> <span class="string">$&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span></span><br><span class="line">   <span class="attr">indexShardsNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:2&#125;</span></span><br><span class="line">   <span class="attr">indexReplicasNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:0&#125;</span></span><br><span class="line">   <span class="comment"># Those data TTL settings will override the same settings in core module.</span></span><br><span class="line">   <span class="attr">recordDataTTL:</span> <span class="string">$&#123;SW_STORAGE_ES_RECORD_DATA_TTL:1&#125;</span> <span class="comment"># Unit is day</span></span><br><span class="line">   <span class="attr">otherMetricsDataTTL:</span> <span class="string">$&#123;SW_STORAGE_ES_OTHER_METRIC_DATA_TTL:25&#125;</span> <span class="comment"># Unit is day</span></span><br><span class="line">   <span class="attr">monthMetricsDataTTL:</span> <span class="string">$&#123;SW_STORAGE_ES_MONTH_METRIC_DATA_TTL:1&#125;</span> <span class="comment"># Unit is month</span></span><br><span class="line">   <span class="comment"># Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html</span></span><br><span class="line">   <span class="attr">bulkActions:</span> <span class="string">$&#123;SW_STORAGE_ES_BULK_ACTIONS:1000&#125;</span> <span class="comment"># Execute the bulk every 1000 requests</span></span><br><span class="line">   <span class="attr">flushInterval:</span> <span class="string">$&#123;SW_STORAGE_ES_FLUSH_INTERVAL:10&#125;</span> <span class="comment"># flush the bulk every 10 seconds whatever the number of requests</span></span><br><span class="line">   <span class="attr">concurrentRequests:</span> <span class="string">$&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125;</span> <span class="comment"># the number of concurrent requests</span></span><br><span class="line">   <span class="attr">resultWindowMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_MAX_WINDOW_SIZE:10000&#125;</span></span><br><span class="line">   <span class="attr">metadataQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line">   <span class="attr">segmentQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200&#125;</span></span><br><span class="line"><span class="attr">receiver-sharing-server:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">receiver-register:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">receiver-trace:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">bufferPath:</span> <span class="string">$&#123;SW_RECEIVER_BUFFER_PATH:../trace-buffer/&#125;</span>  <span class="comment"># Path to trace buffer files, suggest to use absolute path</span></span><br><span class="line">    <span class="attr">bufferOffsetMaxFileSize:</span> <span class="string">$&#123;SW_RECEIVER_BUFFER_OFFSET_MAX_FILE_SIZE:100&#125;</span> <span class="comment"># Unit is MB</span></span><br><span class="line">    <span class="attr">bufferDataMaxFileSize:</span> <span class="string">$&#123;SW_RECEIVER_BUFFER_DATA_MAX_FILE_SIZE:500&#125;</span> <span class="comment"># Unit is MB</span></span><br><span class="line">    <span class="attr">bufferFileCleanWhenRestart:</span> <span class="string">$&#123;SW_RECEIVER_BUFFER_FILE_CLEAN_WHEN_RESTART:false&#125;</span></span><br><span class="line">    <span class="attr">sampleRate:</span> <span class="string">$&#123;SW_TRACE_SAMPLE_RATE:10000&#125;</span> <span class="comment"># The sample rate precision is 1/10000. 10000 means 100% sample in default.</span></span><br><span class="line">    <span class="attr">slowDBAccessThreshold:</span> <span class="string">$&#123;SW_SLOW_DB_THRESHOLD:default:200,mongodb:100&#125;</span> <span class="comment"># The slow database access thresholds. Unit ms.</span></span><br><span class="line"><span class="attr">receiver-jvm:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">receiver-clr:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">service-mesh:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">bufferPath:</span> <span class="string">$&#123;SW_SERVICE_MESH_BUFFER_PATH:../mesh-buffer/&#125;</span>  <span class="comment"># Path to trace buffer files, suggest to use absolute path</span></span><br><span class="line">    <span class="attr">bufferOffsetMaxFileSize:</span> <span class="string">$&#123;SW_SERVICE_MESH_OFFSET_MAX_FILE_SIZE:100&#125;</span> <span class="comment"># Unit is MB</span></span><br><span class="line">    <span class="attr">bufferDataMaxFileSize:</span> <span class="string">$&#123;SW_SERVICE_MESH_BUFFER_DATA_MAX_FILE_SIZE:500&#125;</span> <span class="comment"># Unit is MB</span></span><br><span class="line">    <span class="attr">bufferFileCleanWhenRestart:</span> <span class="string">$&#123;SW_SERVICE_MESH_BUFFER_FILE_CLEAN_WHEN_RESTART:false&#125;</span></span><br><span class="line"><span class="attr">istio-telemetry:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">envoy-metric:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="comment">#    alsHTTPAnalysis: $&#123;SW_ENVOY_METRIC_ALS_HTTP_ANALYSIS:k8s-mesh&#125;</span></span><br><span class="line"><span class="comment">#receiver_zipkin:</span></span><br><span class="line"><span class="comment">#  default:</span></span><br><span class="line"><span class="comment">#    host: $&#123;SW_RECEIVER_ZIPKIN_HOST:0.0.0.0&#125;</span></span><br><span class="line"><span class="comment">#    port: $&#123;SW_RECEIVER_ZIPKIN_PORT:9411&#125;</span></span><br><span class="line"><span class="comment">#    contextPath: $&#123;SW_RECEIVER_ZIPKIN_CONTEXT_PATH:/&#125;</span></span><br><span class="line"><span class="attr">query:</span></span><br><span class="line">  <span class="attr">graphql:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">$&#123;SW_QUERY_GRAPHQL_PATH:/graphql&#125;</span></span><br><span class="line"><span class="attr">alarm:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">telemetry:</span></span><br><span class="line">  <span class="attr">none:</span></span><br><span class="line"><span class="attr">configuration:</span></span><br><span class="line">  <span class="attr">none:</span></span><br></pre></td></tr></table></figure><p><strong>注意elasticsearch的ip和端口</strong></p><p>安装JDK，上传jdk到/usr/local/src目录，解压，配置环境变量</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200807112440912.png" alt="image-20200807112440912"></p><h3 id="4）启动"><a href="#4）启动" class="headerlink" title="4）启动"></a>4）启动</h3><p>要确保已经启动了elasticsearch，并且防火墙已经关闭。</p><p><strong>启动时如果没有效果，先配置java环境变量</strong></p><p>进入<code>bin</code>目录，执行命令即可运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh &amp;&amp; tail -f ../logs/skywalking-oap-server.log </span><br><span class="line"></span><br><span class="line">或者先</span><br><span class="line">./startup.sh</span><br><span class="line">然后</span><br><span class="line"><span class="built_in">cd</span> ../logs</span><br><span class="line">tail -f skywalking-oap-server.log </span><br><span class="line">然后等一段时间才能启动成功！</span><br></pre></td></tr></table></figure><p>默认的UI端口是8080，可以访问：<a href="http://192.168.206.99:8080/">http://192.168.206.99:8080</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200807000730230.png" alt="image-20200807000730230"></p><h2 id="2-5-微服务探针"><a href="#2-5-微服务探针" class="headerlink" title="2.5.微服务探针"></a>2.5.微服务探针</h2><p>现在，<strong>Skywalking的服务端已经启动完成</strong>，我们还<strong>需要在微服务中加入服务探针</strong>，来收集数据。</p><h3 id="1）解压9"><a href="#1）解压9" class="headerlink" title="1）解压9"></a>1）解压9</h3><p>首先，将课前资料给的压缩包在windows环境下解压：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111153149490.png" alt="image-20200111153149490"> </p><p>将其中的<code>agent</code>解压到某个目录，不要出现中文，可以看到其结构如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111153310868.png" alt="image-20200111153310868"> </p><p>其中有一个<code>skywalking-agent.jar</code>就是一我们要用的探针。</p><h3 id="2）配置"><a href="#2）配置" class="headerlink" title="2）配置"></a>2）配置</h3><p>分别给<code>ly-registry</code>、<code>ly-gateway</code>、<code>ly-item-service</code>三个应用配置即可。</p><p>以<code>ly-registry</code>为例，在IDEA工具中，选择要修改的启动项，点击右键，选择<code>Edit Configuration</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111153626146.png" alt="image-20200111153626146"> </p><p>然后在弹出的窗口中，点击<code>Environment</code>，选择<code>VM options</code>后面对应的展开按钮：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111153823435.png" alt="image-20200111153823435"></p><p>在展开的输入框中，输入下面的配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-javaagent</span>:D:/develop/skywalking<span class="literal">-agent</span>/skywalking<span class="literal">-agent</span>.jar</span><br><span class="line"><span class="literal">-Dskywalking</span>.agent.service_name=ly<span class="literal">-registry</span></span><br><span class="line"><span class="literal">-Dskywalking</span>.collector.backend_service=<span class="number">192.168</span>.<span class="number">206.99</span>:<span class="number">11800</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>`-javaagent:D:/test/skywalking-agent.jar：配置的是skywalking-agent.jar这个包的位置，要修改成你自己存放的目录</li><li><code>-Dskywalking.agent.service_name=ly-registry</code>：是当前项目的名称，需要分别修改为<code>ly-registry</code>、<code>ly-gateway</code>、<code>ly-item-service</code></li><li><code>-Dskywalking.collector.backend_service=192.168.206.99:11800</code>：是Skywalking的OPA服务地址，采用的是GRPC通信，因此端口是11800，不是8080</li></ul><h3 id="3）启动项目"><a href="#3）启动项目" class="headerlink" title="3）启动项目"></a>3）启动项目</h3><p>Skywalking的<strong>探针会在项目启动前对class文件进行修改，完成探针植入</strong>，对业务代码<strong>零侵入</strong>，所以我们只需要启动项目，即可生效了。</p><p>启动3个项目，然后对之前的业务接口访问。然后就可以在控制台：<a href="http://192.168.206.99:8080/">http://192.168.206.99:8080</a></p><p>看到统计数据：</p><h2 id="2-6-数据统计"><a href="#2-6-数据统计" class="headerlink" title="2.6.数据统计"></a>2.6.数据统计</h2><p>检测到有3个服务：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111154724654.png" alt="image-20200111154724654"> </p><p>访问最慢的endpoint排名：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111154820848.png" alt="image-20200111154820848"></p><p>当前服务的部分性能信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111154931906.png" alt="image-20200111154931906"></p><p>服务关系拓扑图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111155217661.png" alt="image-20200111155217661"></p><p>访问链路追踪图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111175825761.png" alt="image-20200111175825761"></p><p>当前业务链路较短，如果链路比较深，也可以看到完整链路信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分布式日志服务、链路追踪&quot;&gt;&lt;a href=&quot;#分布式日志服务、链路追踪&quot; class=&quot;headerlink&quot; title=&quot;分布式日志服务、链路追踪&quot;&gt;&lt;/a&gt;分布式日志服务、链路追踪&lt;/h1&gt;&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; cla</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="分布式日志" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97/"/>
    
    <category term="链路追踪" scheme="http://example.com/tags/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁</title>
    <link href="http://example.com/2022/07/03/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://example.com/2022/07/03/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2022-07-03T02:00:55.000Z</published>
    <updated>2022-08-02T14:25:25.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">知道什么是分布式锁</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">知道分布式锁的几种实现方式</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">知道Redis分布式锁原理</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">会使用SpringDataRedis执行Lua脚本</span></span><br><span class="line"><span class="meta">5-</span> <span class="string">掌握Redission的使用</span></span><br></pre></td></tr></table></figure><h1 id="1-SpringSchedule"><a href="#1-SpringSchedule" class="headerlink" title="1.SpringSchedule"></a>1.SpringSchedule</h1><p>之前我们学习过Quartz这个定时任务框架，功能非常强大，不过我们有时候也会用到一些其它的定时任务框架。</p><h2 id="1-1-常见的定时任务框架"><a href="#1-1-常见的定时任务框架" class="headerlink" title="1.1.常见的定时任务框架"></a>1.1.常见的定时任务框架</h2><p>目前常用的定时任务实现:</p><table><thead><tr><th>实现方式</th><th>cron表达式</th><th>固定时间执行</th><th>固定频率执行</th><th>开发难易程度</th></tr></thead><tbody><tr><td>JDK 的TimeTask</td><td>不支持</td><td>支持</td><td>支持</td><td>复杂</td></tr><tr><td>Spring Schedule</td><td>支持</td><td>支持</td><td>支持</td><td>简单</td></tr><tr><td>Quartz</td><td>支持</td><td>支持</td><td>支持</td><td>难</td></tr></tbody></table><p>从以上表格可以看出，Spring Schedule框架功能完善，简单易用。对于中小型项目需求，Spring Schedule是完全可以胜任的。</p><h2 id="1-2-简介"><a href="#1-2-简介" class="headerlink" title="1.2.简介"></a>1.2.简介</h2><p>Spring Schedule是Spring  Framework的其中一部分功能：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555666217625.png" alt="1555666217625"></p><p>并且在SpringBoot中已经默认对Spring的Schedule实现了自动配置，使用时只需要简单注解和部分属性设置即可。</p><h2 id="1-3-快速入门"><a href="#1-3-快速入门" class="headerlink" title="1.3.快速入门"></a>1.3.快速入门</h2><p>我们新建一个Demo工程，完成入门案例的测试：</p><h3 id="1-3-1-创建项目"><a href="#1-3-1-创建项目" class="headerlink" title="1.3.1.创建项目"></a>1.3.1.创建项目</h3><p>使用Spring的 initializr来搭建项目：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555667071529.png" alt="1555667071529"></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555666991890.png" alt="1555666991890"></p><p>选择依赖：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555667023874.png" alt="1555667023874"></p><h3 id="1-3-2-开启定时任务"><a href="#1-3-2-开启定时任务" class="headerlink" title="1.3.2.开启定时任务"></a>1.3.2.开启定时任务</h3><p>要开启定时任务功能，只需要在启动类上加载一个<code>@EnableScheduling</code>注解即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TaskDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-定义任务"><a href="#1-3-3-定义任务" class="headerlink" title="1.3.3.定义任务"></a>1.3.3.定义任务</h3><p>定义任务，需要散步：</p><ul><li>声明类，通过<code>@Component</code>注解注册到Spring容器</li><li>类中定义方法，方法内部编写任务逻辑</li><li>方法上添加注解<code>@Scheduled(fixedRate = 1000)</code>来定义任务执行频率，<ul><li>这里的fiexRate=1000，代表是每隔1000毫秒执行一次</li></ul></li></ul><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556163899025.png" alt="1556163899025"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.task.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 1000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;hello spring schedule!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-4-启动测试"><a href="#1-3-4-启动测试" class="headerlink" title="1.3.4.启动测试"></a>1.3.4.启动测试</h3><p>启动项目，可以在控制台看到任务执行情况：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555667399323.png" alt="1555667399323"></p><h2 id="1-4-配置"><a href="#1-4-配置" class="headerlink" title="1.4.配置"></a>1.4.配置</h2><p>定时任务有许多可以自定义的配置属性：</p><h3 id="1-4-1-任务线程池大小"><a href="#1-4-1-任务线程池大小" class="headerlink" title="1.4.1.任务线程池大小"></a>1.4.1.任务线程池大小</h3><p>默认情况下，定时任务的线程池大小只有1，<strong>当任务较多执行频繁时，会出现阻塞等待的情况</strong>，任务调度器就会出现<strong>时间漂移</strong>，任务执行时间将不确定。</p><p>为了避免这样的情况发生，我们需要自定义线程池的大小：</p><p>修改application.yml即可实现：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">task:</span></span><br><span class="line">    <span class="attr">scheduling:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">size:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>重启项目后测试：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555667762439.png" alt="1555667762439"></p><p>可以看到执行时会切换到不同的线程执行。</p><h3 id="1-4-2-定时策略"><a href="#1-4-2-定时策略" class="headerlink" title="1.4.2.定时策略"></a>1.4.2.定时策略</h3><p>在方法上添加注解<code>@Scheduled</code>可以控制定时执行的频率，有三种策略：</p><ul><li>fixedRate：按照固定时间频率执行，单位毫秒，即每xx毫秒执行一次。<ul><li>如果上一个任务阻塞导致任务积压，则会在当前任务执行后，一次把多个积压的任务都执行完成</li><li>举例：假如任务执行每秒1次，而第一个任务执行耗时4秒，会导致4个任务积压，在第一个任务执行后，积压的4个任务会立即执行，不再等待</li></ul></li><li>fixedDelay：固定延迟执行，单位毫秒，即前一个任务执行结束后xx毫秒执行第二个任务。<ul><li>如果上一个任务阻塞导致任务积压，则会在当前任务执行后xx毫秒执行下一个任务</li></ul></li><li>cron：知名的cron表达式，使用表达式规则来定义任务执行策略，与fixedDelay类似的。</li></ul><h3 id="1-4-3-cron表达式"><a href="#1-4-3-cron表达式" class="headerlink" title="1.4.3.cron表达式"></a>1.4.3.cron表达式</h3><p>什么是cron表达式呢？</p><p>Cron表达式是一个字符串，字符串包含6或7个域，每一个域代表一个含义，例如秒、分。域和域之间以空格隔开，有如下两种语法格式：</p><ul><li> Seconds Minutes Hours DayofMonth Month DayofWeek Year</li><li> Seconds Minutes Hours DayofMonth Month DayofWeek</li></ul><p>cron表达式规则：</p><table><thead><tr><th>域</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒（Seconds）</td><td>0~59的整数</td><td>,   -   *   /</td></tr><tr><td>分（<em>Minutes</em>）</td><td>0~59的整数</td><td>,   -   *   /</td></tr><tr><td>小时（<em>Hours</em>）</td><td>0~23的整数</td><td>,   -   *   /</td></tr><tr><td>日期（<em>DayofMonth</em>）</td><td>1~31的整数（但是你需要考虑你月的天数）</td><td>,   -   *  ?   /  L W C</td></tr><tr><td>月份（<em>Month</em>）</td><td>1~12的整数或者 JAN-DEC</td><td>,   -   *   /</td></tr><tr><td>星期（<em>DayofWeek</em>）</td><td>1~7的整数或者 SUN-SAT （1=SUN）</td><td>,   -   *  ?   /  L C  #</td></tr><tr><td>年(可选，留空)（<em>Year</em>）</td><td>1970~2099</td><td>,   -   *   /</td></tr></tbody></table><p>每个域上一般都是数字，或者指定允许的特殊字符：</p><table><thead><tr><th>特殊字符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>表示匹配该域的任意值。假如在Minutes域使用, 即表示每分钟都会触发事件</td></tr><tr><td>?</td><td>只能用在DayofMonth和DayofWeek两个域中的一个。它表示不确定的值</td></tr><tr><td>-</td><td>表示范围。例如在Hours域使用5-8，表示从5点、6点、7点、8点各执行一次</td></tr><tr><td>,</td><td>表示列出枚举值。例如：在week域使用FRI,SUN，表示星期五和星期六执行</td></tr><tr><td>/</td><td>一般用法：x/y，从x开始，每次递增y。如果放在minutes域，5/15，表示每小时的5分钟开始，每隔15分钟一次，即：5分钟、20分钟、35分钟、50分钟时执行</td></tr><tr><td>L</td><td>表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayOfMonth中，代表每个月的最后一天。如果是在DayOfWeek域，表示每周最后一天（周六），但是如果是：数字+L，如6L表示每月的 最后一个周五</td></tr><tr><td>W</td><td>表示最近的有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</td></tr><tr><td>LW</td><td>两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五</td></tr><tr><td>#</td><td>用在DayOfMonth中，确定每个月第几个星期几。例如在4#2，表示某月的第二个星期三（2表示当月的第二周，4表示这周的第4天，即星期三）。</td></tr></tbody></table><p>示例：</p><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td><code>0 0 2 1 * ?  *</code></td><td>表示在每月的1日的凌晨2点执行任务</td></tr><tr><td><code>0 15 10 ?  * MON-FRI</code></td><td>表示周一到周五每天上午10:15执行作</td></tr><tr><td><code>0 15 10 ? * 6L 2002-2006</code></td><td>表示2002-2006年的每个月的最后一个星期五上午10:15执行</td></tr><tr><td><code>0 0 9-21 * * 2-7</code></td><td>996</td></tr></tbody></table><p>我们把代码修改一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;hello spring schedule!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555684079046.png" alt="1555684079046"></p><h1 id="2-认识分布式锁"><a href="#2-认识分布式锁" class="headerlink" title="2.认识分布式锁"></a>2.认识分布式锁</h1><p>在讨论分布式锁前，我们先假设一个业务场景：</p><h2 id="2-1-业务场景"><a href="#2-1-业务场景" class="headerlink" title="2.1.业务场景"></a>2.1.业务场景</h2><p>我们在订单服务中开启一个定时任务，每隔一段时间扫描超时未支付订单，然后完成订单清理。</p><p>在这个定时任务中，需要完成的业务步骤主要包括：</p><ol><li>查询超时未支付订单，获取订单中商品信息</li><li>修改这些未支付订单的状态，为已关闭</li><li>恢复订单中商品扣减的库存</li></ol><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566123763031.png" alt="1566123763031"></p><p>因为订单服务可能是一个包含多节点的集群，例如包含10台订单微服务，那么并发时可能发生这样的事情：</p><ul><li>订单服务A执行了步骤1，但还没有执行步骤2</li><li>订单服务B执行了步骤1，于是查询到了与订单服务A查询到的一样的数据</li><li>订单服务A执行步骤2和3，此时订单中对应商品的库存已经恢复了</li><li>订单服务B也执行了步骤2和步骤3，此时订单中对应商品的库存再次被增加</li><li>库存被错误的恢复了多次，==事实上只需要执行一次就可以了==。</li></ul><p>就像这样：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566124881345.png" alt="1566124881345"></p><p>因为任务的并发执行，出现了线程安全问题，商品库存被错误的增加了多次，你能想到解决办法吗？</p><h2 id="2-2-为什么需要分布式锁"><a href="#2-2-为什么需要分布式锁" class="headerlink" title="2.2.为什么需要分布式锁"></a>2.2.为什么需要分布式锁</h2><p>对于线程安全问题，我们都很熟悉了，传统的解决方案就是对线程操作资源的代码加锁。如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566124938467.png" alt="1566124938467"></p><p>理想状态下，加了锁以后，在当前订单服务执行时，其它订单服务需要等待当前订单服务完成业务后才能执行，这样就避免了线程安全问题的发生。</p><p>但是，这样真的能解决问题吗？</p><p>答案时否定的，为什么呢。</p><h3 id="2-2-1-线程锁"><a href="#2-2-1-线程锁" class="headerlink" title="2.2.1.线程锁"></a>2.2.1.线程锁</h3><p>我们通常使用的synchronized或者Lock都是线程锁，对同一个JVM进程内的多个线程有效。因为锁的本质是内存中存放一个标记，记录获取锁的线程时谁，<strong>这个标记对每个线程都可见</strong>。</p><ul><li>获取锁：就是判断标记中是否已经有线程存在，如果有，则获取锁失败，如果没有，在标记中记录当前线程</li><li>释放锁：就是删除标记中保存的线程，并唤醒等待队列中的其它线程</li></ul><p>因此，锁生效的前提是：</p><ul><li>互斥：锁的标记只有一个线程可以获取</li><li>共享：标记对所有线程可见</li></ul><p>然而我们启动的多个订单服务，就是多个JVM，内存中的锁显然是不共享的，每个JVM进程都有自己的锁，自然无法保证线程的互斥了，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566133423058.png" alt="1566133423058"></p><p>要解决这个问题，就必须保证各个订单服务能够共享内存中的锁标记，此时，分布式锁就闪亮登场了！</p><h3 id="2-2-2-分布式锁"><a href="#2-2-2-分布式锁" class="headerlink" title="2.2.2.分布式锁"></a>2.2.2.分布式锁</h3><p>线程锁时一个多线程可见的内存标记，保证同一个任务，同一时刻只能被多线程中的某一个执行。但是这样的锁在分布式系统中，多进程环境下， 就达不到预期的效果了。</p><p>而如果我们==将这个标记变成多进程可见，保证这个任务同一时刻只能被多个进程中的某一个执行，那这样的锁就是分布式锁==了。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566135914594.png" alt="1566135914594"></p><p>分布式锁实现有多种方式，其原理都基本类似，只要满足下列要求即可：</p><ul><li><strong>多进程可见</strong>：多进程可见，否则就无法实现分布式效果</li><li><strong>互斥</strong>：同一时刻，只能有一个进程获得锁，执行任务后释放锁</li><li>可重入（可选）：同一个任务再次获取改锁不会被死锁</li><li>阻塞锁（可选）：获取失败时，具备重试机制，尝试再次获取锁</li><li>性能好（可选）：效率高，应对高并发场景</li><li>高可用：避免锁服务宕机或处理好宕机的补救措施</li></ul><p>常见的分布式锁实现方案包括：==基于数据库实现、基于缓存(redis)实现、基于zookeeper==等.</p><h1 id="3-Redis实现分布式锁"><a href="#3-Redis实现分布式锁" class="headerlink" title="3.Redis实现分布式锁"></a>3.Redis实现分布式锁</h1><p>按照上面的分析，实现分布是锁要满足五点：多进程可见，互斥，可重入，阻塞，高性能，高可用等。我们来看看Redis如何满足这些需求。</p><h2 id="3-1-版本1-基本实现"><a href="#3-1-版本1-基本实现" class="headerlink" title="3.1.版本1-基本实现"></a>3.1.版本1-基本实现</h2><p>第一次尝试，我们先关注其中必须满足的2个条件：</p><ul><li>多进程可见</li><li>互斥，锁可释放</li></ul><p>1）多进程可见</p><p>首先Redis本身就是基于JVM之外的，因此满足多进程可见的要求。</p><p>2）互斥</p><p>互斥就是说只能有一个进程获取锁标记，这个我们可以基于Redis的setnx指令来实现。setnx是set when not exits的意思。当多次执行setnx命令时，只有第一次执行的才会成功并返回1，其它情况返回0：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555935393771.png" alt="1555935393771"> </p><p>多个进程来对同一个key执行setnx操作，肯定只有一个能执行成功，其它一定会失败，满足了互斥的需求。</p><p>3）释放锁</p><p>释放锁其实只需要把锁的key删除即可，使用del xxx指令。不过，仔细思考，如果在我们执行del之前，服务突然宕机，那么锁岂不是永远无法删除了？！</p><p>为了避免因服务宕机引起锁无法释放问题，我们可以在获取锁的时候，给锁加一个有效时间，当时间超出时，就会自动释放锁，这样就不会死锁了。</p><p>但时setnx指令没有设置时间的功能，我们要借助于set指令，然后结合set的 NX和PX参数来完成。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566136982277.png" alt="1566136982277"> </p><p>其中可以指定这样几个参数：</p><ul><li>EX：过期时长，单位是秒</li><li>PX：过期时长，单位是毫秒</li><li>NX：等同于setnx</li></ul><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566137261107.png" alt="1566137261107"></p><p>因此，获取和释放锁的基本流程如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566138388369.png" alt="1566138388369"></p><p>步骤如下：</p><ul><li>1、通过set命令设置锁</li><li>2、判断返回结果是否是OK<ul><li>1）Nil，获取失败，结束或重试（自旋锁）</li><li>2）OK，获取锁成功<ul><li>执行业务</li><li>释放锁，DEL 删除key即可</li></ul></li></ul></li><li>3、异常情况，服务宕机。超时时间EX结束，会自动释放锁</li></ul><h2 id="3-2-版本2-互斥性"><a href="#3-2-版本2-互斥性" class="headerlink" title="3.2.版本2-互斥性"></a>3.2.版本2-互斥性</h2><p>刚才的初级版本中，会有一定的安全问题。</p><h3 id="3-2-1-问题分析"><a href="#3-2-1-问题分析" class="headerlink" title="3.2.1.问题分析"></a>3.2.1.问题分析</h3><p>大家思考一下，释放锁就是用DEL语句把锁对应的key给删除，有没有这么一种可能性：</p><ol><li>3个进程：A和B和C，在执行任务，并争抢锁，此时A获取了锁，并设置自动过期时间为10s</li><li>A开始执行业务，因为某种原因，业务阻塞，耗时超过了10秒，此时锁自动释放了</li><li>B恰好此时开始尝试获取锁，因为锁已经自动释放，成功获取锁</li><li>A此时业务执行完毕，执行释放锁逻辑（删除key），于是B的锁被释放了，而B其实还在执行业务</li><li>此时进程C尝试获取锁，也成功了，因为A把B的锁删除了。</li></ol><p>问题出现了：B和C同时获取了锁，违反了互斥性！</p><p>如何解决这个问题呢？我们应该在删除锁之前，判断这个锁是否是自己设置的锁，如果不是（例如自己的锁已经超时释放），那么就不要删除了。</p><h3 id="3-2-2-解决思路"><a href="#3-2-2-解决思路" class="headerlink" title="3.2.2.解决思路"></a>3.2.2.解决思路</h3><p>那么问题来了：<strong>如何得知当前获取锁的是不是自己</strong>呢？</p><p>我们可以在set 锁时，存入当前线程的唯一标识！删除锁前，判断下里面的值是不是与自己标识释放一致，如果不一致，说明不是自己的锁，就不要删除了。</p><p>流程如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566138838868.png" alt="1566138838868"></p><h3 id="3-2-3-代码实现"><a href="#3-2-3-代码实现" class="headerlink" title="3.2.3.代码实现"></a>3.2.3.代码实现</h3><p>我们创建一个SpringBoot项目，引入一些依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在application.yml中指定redis地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br></pre></td></tr></table></figure><p>首先定义一个锁接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.lock;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true: 获取锁成功， false：获取锁失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> releaseTime)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.BooleanUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String key;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String VALUE_PREFIX = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleRedisLock</span><span class="params">(String key, StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> releaseTime)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前线程的锁标示</span></span><br><span class="line">        String value = VALUE_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">// 尝试获取锁</span></span><br><span class="line">        Boolean boo = redisTemplate.opsForValue().setIfAbsent(key, value, releaseTime, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// 判断结果</span></span><br><span class="line">        <span class="keyword">return</span> BooleanUtils.isTrue(boo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前线程的锁标示</span></span><br><span class="line">        String value = VALUE_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">// 获取redis中的锁标示</span></span><br><span class="line">        String cacheValue = redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 比较</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.equals(value, cacheValue))&#123;</span><br><span class="line">            <span class="comment">// 一致，是自己的锁，删除</span></span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，定义一个锁工厂，方便用户获取锁对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisLockFactory</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleRedisLock <span class="title">getSimpleRedisLock</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleRedisLock(key, redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后编写一个单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.lock.RedisLockFactory;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.lock.SimpleRedisLock;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取锁对象</span></span><br><span class="line">    <span class="keyword">private</span> SimpleRedisLock lock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LockTask</span><span class="params">(RedisLockFactory factory)</span> </span>&#123;</span><br><span class="line">        lock = factory.getSimpleRedisLock(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/10 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">job</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.warn(<span class="string">&quot;尝试获取锁&quot;</span>);</span><br><span class="line">        <span class="comment">// 尝试获取锁</span></span><br><span class="line">        <span class="keyword">boolean</span> isLock = lock.tryLock(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 判断是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line">            <span class="comment">// 获取锁失败，任务终止</span></span><br><span class="line">            log.error(<span class="string">&quot;获取锁失败，任务结束！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取锁成功，开始执行任务</span></span><br><span class="line">            log.info(<span class="string">&quot;获取锁成功，开始执行业务&quot;</span>);</span><br><span class="line">            clearOrder();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;任务执行结束，释放锁&quot;</span>);</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 默认任务延迟</span></span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时启动项目的两个副本：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/image-20200513110915720.png" alt="image-20200513110915720"> </p><p>可以看到定时任务会实现互斥效果。</p><h2 id="3-3-版本3-重入性（了解）"><a href="#3-3-版本3-重入性（了解）" class="headerlink" title="3.3.版本3-重入性（了解）"></a>3.3.版本3-重入性（了解）</h2><p>接下来我们来看看分布式锁的第三个特性，重入性。</p><p>如果我们在获取锁以后，执行代码的过程中，再次尝试获取锁，执行setnx肯定会失败，因为锁已经存在了。这样有可能导致死锁，这样的锁就是<strong>不可重入</strong>的。</p><p>如何解决呢？</p><p>当然是想办法改造成<strong>可重入锁</strong>。</p><h3 id="3-4-1-重入锁"><a href="#3-4-1-重入锁" class="headerlink" title="3.4.1.重入锁"></a>3.4.1.重入锁</h3><p>什么叫做可重入锁呢？</p><blockquote><p>可重入锁，也叫做递归锁，指的是在同一线程内，外层函数获得锁之后，内层递归函数仍然可以获取到该锁。换一种说法：<strong>同一个线程再次进入同步代码时，可以使用自己已获取到的锁。</strong></p></blockquote><p>可重入锁可以避免因同一线程中多次获取锁而导致死锁发生。</p><p>那么，如何实现可重入锁呢？</p><ul><li>获取锁：首先尝试获取锁，如果获取失败，<strong>判断这个锁是否是自己的，如果是则允许再次获取</strong>，而且必须记录重复获取锁的次数。</li><li>释放锁：释放锁不能直接删除了，因为锁是可重入的，如果锁进入了多次，在最内层直接删除锁，导致外部的业务在没有锁的情况下执行，会有安全问题。因此必须<strong>获取锁时累计重入的次数，释放时则减去重入次数，如果减到0，则可以删除锁</strong>.</li></ul><p>因此，存储在锁中的信息就必须包含：key、线程标识、重入次数。不能再使用简单的key-value结构，这里推荐使用hash结构：</p><ul><li>key：lock</li><li>hashKey：线程信息</li><li>hashValue：重入次数，默认1</li></ul><h3 id="3-4-2-流程图"><a href="#3-4-2-流程图" class="headerlink" title="3.4.2.流程图"></a>3.4.2.流程图</h3><p>需要用到的一些Redis命令包括：</p><ul><li>EXISTS key：判断一个Key是否存在</li><li>HEXISTS key field：判断一个hash的field是否存在</li><li>HSET key field value ：给一个hash的field设置一个值</li><li>HINCRBY key field increment：给一个hash的field值增加指定数值</li><li>EXPIRE key seconds：给一个key设置过期时间</li><li>DEL key：删除指定key</li></ul><p>具体流程如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556164092317.png" alt="1556164092317"></p><p>下面我们假设锁的key为“<code>lock</code>”，hashKey是当前线程的id：“<code>threadId</code>”，锁自动释放时间假设为20</p><p>获取锁的步骤：</p><ul><li>1、判断lock是否存在 <code>EXISTS lock</code><ul><li>存在，说明有人获取锁了，下面判断是不是自己的锁<ul><li>判断当前线程id作为hashKey是否存在：<code>HEXISTS lock threadId</code><ul><li>不存在，说明锁已经有了，且不是自己获取的，锁获取失败，end</li><li>存在，说明是自己获取的锁，重入次数+1：<code>HINCRBY lock threadId 1</code>，去到步骤3</li></ul></li></ul></li><li>2、不存在，说明可以获取锁，<code>HSET key threadId 1</code></li><li>3、设置锁自动释放时间，<code>EXPIRE lock 20</code></li></ul></li></ul><p>释放锁的步骤：</p><ul><li>1、判断当前线程id作为hashKey是否存在：<code>HEXISTS lock threadId</code><ul><li>不存在，说明锁已经失效，不用管了</li><li>存在，说明锁还在，重入次数减1：<code>HINCRBY lock threadId -1</code>，获取新的重入次数</li></ul></li><li>2、判断重入次数是否为0：<ul><li>为0，说明锁全部释放，删除key：<code>DEL lock</code></li><li>大于0，说明锁还在使用，重置有效时间：<code>EXPIRE lock 20</code></li></ul></li></ul><h2 id="3-4-Lua脚本"><a href="#3-4-Lua脚本" class="headerlink" title="3.4.Lua脚本"></a>3.4.Lua脚本</h2><p>上面探讨的Redis锁实现方案都忽略了一个非常重要的问题：<strong>原子性</strong>问题。无论是获取锁，还是释放锁的过程，都是有多行Redis指令来完成的，如果不能保证这些Redis命令执行的原子性，则整个过程都是不安全的。</p><p>而Redis中支持以Lua脚本来运行多行命令，并且保证整个脚本运行的原子性。</p><p>接下来，我们分几块来学习Lua脚本的使用：</p><ul><li>Redis中如何执行Lua脚本</li><li>Lua脚本的基本语法</li><li>编写上述分布式锁对应的Lua脚本</li></ul><h3 id="3-4-1-Redis中如何执行Lua脚本"><a href="#3-4-1-Redis中如何执行Lua脚本" class="headerlink" title="3.4.1.Redis中如何执行Lua脚本"></a>3.4.1.Redis中如何执行Lua脚本</h3><p>与操作Lua相关的命令如下：</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><code>EVAL script numkeys key [key ...] arg [arg ...]</code> 执行 Lua 脚本。</td></tr><tr><td align="left">2</td><td align="left"><code>EVALSHA sha1 numkeys key [key ...] arg [arg ...]</code>  执行 Lua 脚本。</td></tr><tr><td align="left">3</td><td align="left"><code>SCRIPT EXISTS script [script ...] </code> 查看指定的脚本是否已经被保存在缓存当中。</td></tr><tr><td align="left">4</td><td align="left"><code>SCRIPT FLUSH</code>  从脚本缓存中移除所有脚本。</td></tr><tr><td align="left">5</td><td align="left"><code>SCRIPT KILL</code>  杀死当前正在运行的 Lua 脚本。</td></tr><tr><td align="left">6</td><td align="left"><code>SCRIPT LOAD script</code>  将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。</td></tr></tbody></table><p>其中我们会用到的几个：</p><blockquote><p>EVAL命令：</p></blockquote><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556029159652.png" alt="1556029159652"> </p><p>直接执行一段脚本，参数包括：</p><ul><li>script：脚本内容，或者脚本地址</li><li>numkeys：脚本中用到的key的数量，接下来的numkeys个参数会作为key参数，剩下的作为arg参数</li><li>key：作为key的参数，会被存入脚本环境中的KEYS数组，角标从1开始</li><li>arg：其它参数，会被存入脚本环境中的ARGV数组，角标从1开始</li></ul><p>示例：<code>EVAL &quot;return &#39;hello world!&#39;&quot; 0</code>，其中：</p><ul><li><code>&quot;return &#39;hello world!&#39;&quot;</code>：就是脚本的内容，直接返回字符串，没有别的命令</li><li><code>0</code>：就是说没有用key参数，直接返回</li></ul><p>效果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556030139226.png" alt="1556030139226"> </p><blockquote><p>SCRIPT LOAD命令</p></blockquote><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556029464469.png" alt="1556029464469"> </p><p>将一段脚本编译并缓存起来，生成一个SHA1值并返回，作为脚本字典的key，方便下次使用。</p><p>参数script就是脚本内容或地址。</p><p>以之前案例中的的脚本为例：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556030196610.png" alt="1556030196610"> </p><p>此处返回的<code>ada0bc9efe2392bdcc0083f7f8deaca2da7f32ec</code>就是脚本缓存后得到的sha1值。</p><p>在脚本字典中，每一个这样的sha1值，对应一段解析好的脚本：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556030293491.png" alt="1556030293491"> </p><blockquote><p>EVALSHA 命令：</p></blockquote><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556029524238.png" alt="1556029524238"> </p><p>与EVAL类似，执行一段脚本，区别是通过脚本的sha1值，去脚本缓存中查找，然后执行，参数：</p><ul><li>sha1：就是脚本对应的sha1值</li></ul><p>我们用刚刚缓存的脚本为例：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556030354363.png" alt="1556030354363"> </p><h3 id="3-4-2-Lua脚本的基本语法"><a href="#3-4-2-Lua脚本的基本语法" class="headerlink" title="3.4.2.Lua脚本的基本语法"></a>3.4.2.Lua脚本的基本语法</h3><p>Lua的详细语法大家可以参考网站上的一些教学，例如：<a href="https://www.runoob.com/lua/lua-tutorial.html">Lua菜鸟教程</a>，任何语言都是从基本的如：变量、数据类型、循环、逻辑判断、运算、数组等入手。相信熟悉java的你应该可以快速上手Lua。</p><p>我们的分布式锁脚本中，主要用到的是对Redis指令的调用，还有<code>if ... else</code>这样的逻辑判断，再加上一些变量声明等。因此我们从这几块入手，看一些简单命令即可：</p><p>1）变量声明</p><p>声明一个局部变量，用local关键字即可：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">123</span></span><br></pre></td></tr></table></figure><p>2）打印结果</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3）条件控制</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( 布尔表达式 <span class="number">1</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="comment">--[ 在布尔表达式 1 为 true 时执行该语句块 --]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elseif</span>( 布尔表达式 <span class="number">2</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="comment">--[ 在布尔表达式 2 为 true 时执行该语句块 --]</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">   <span class="comment">--[ 如果以上布尔表达式都不为 true 则执行该语句块 --]</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>4）循环语句：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( <span class="literal">true</span> )</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;循环将永远执行下去&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>注意，使用break可以跳出循环。</p><p>大家能否利用上述语法编写一个猜数字的小游戏？</p><p>提示：<code>io.read(&quot;*num&quot;)</code>可以用来读取一个用户输入的数字</p><p>代码示例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;请输入一个数字:&#x27;</span>)</span><br><span class="line">  <span class="keyword">local</span> a = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*num&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span>(a &gt; <span class="number">100</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;太大了&#x27;</span>)</span><br><span class="line">  <span class="keyword">elseif</span>(a &lt; <span class="number">100</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;太小了&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;bingo!猜对了!&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566354008626.png" alt="1566354008626"> </p><p>5）Lua调用Redis指令</p><p>当我们再Redis中允许Lua脚本时，有一个内置变量redis，并且具备两个函数：</p><ul><li><code>redis.call(&quot;命令名称&quot;, 参数1， 参数2 ...)</code>: 执行指定的redis命令，执行遇到错误会直接返回错误</li><li><code>redis.pcall(&quot;命令名称&quot;, 参数1， 参数2 ...)</code>: 执行指定的redis命令，执行遇到错误会错误以Lua表的形式返回</li></ul><p>例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;SET&#x27;</span>, <span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这行Lua脚本的含义就是执行Redis命令：<code>set num 123</code></p><p>不过，我们编写脚本时并不希望把set后面的key和value写死，而是可以由调用脚本的人来指定，把key和value作为参数传入脚本中执行。</p><p>还记得redis中的EVAL命令吗？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EVAL script numkeys key [key ...] arg [arg ...]</span><br></pre></td></tr></table></figure><p>EVAL执行脚本时可以接受参数，key和arg，并且会用两个内置变量（数组格式）来接受用户传入的key和arg参数：</p><ul><li>KEYS：用来存放key参数</li><li>ARGV：用来存放除Key以外的参数</li></ul><p>我们在脚本中，可以从数组中根据角标（Lua中数组角标时从1开始）取出用户传入的参数，像这样：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;SET&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>而后，我们在执行脚本时可以动态指定key及需要存放的value值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EVAL &quot;return redis.call(&#x27;SET&#x27;, KEYS[1], ARGV[1])&quot; 1 num 666</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566355223209.png" alt="1566355223209"></p><h3 id="3-4-3-编写分布式锁的Lua脚本"><a href="#3-4-3-编写分布式锁的Lua脚本" class="headerlink" title="3.4.3.编写分布式锁的Lua脚本"></a>3.4.3.编写分布式锁的Lua脚本</h3><p>接下来，我们就可以将上面的分布式锁思路用Lua脚本来实现了。</p><h4 id="1）普通互斥锁"><a href="#1）普通互斥锁" class="headerlink" title="1）普通互斥锁"></a>1）普通互斥锁</h4><p>先看版本2的实现：</p><ul><li>获取锁：直接使用客户端的set nx ex 命令即可，无需脚本</li><li>释放锁：因为要判断锁中的标识是否时自己的，因此需要脚本，如下：</li></ul><p>长的：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 知道当前线程的锁标示</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- 知道锁的key</span></span><br><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- 根据锁的key，获取标示</span></span><br><span class="line"><span class="keyword">local</span> id = redis.call(<span class="string">&#x27;get&#x27;</span>, key)</span><br><span class="line"><span class="comment">-- 与指定的标示比较是否一致</span></span><br><span class="line"><span class="keyword">if</span> (id == threadId) <span class="keyword">then</span></span><br><span class="line"><span class="comment">-- 如果一致，就删除</span></span><br><span class="line"><span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, key)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>简化的：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 判断锁是否是自己的</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;GET&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">  <span class="comment">-- 是则删除锁</span></span><br><span class="line">  <span class="keyword">return</span> redis.call(<span class="string">&#x27;DEL&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 不是则直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>参数的含义说明：</p><ul><li>KEYS[1]：就是锁的key，比如”lock”</li><li>ARGV[1]：就是线程的唯一标识，可以时随机字符串</li></ul><h4 id="2）可重入锁："><a href="#2）可重入锁：" class="headerlink" title="2）可重入锁："></a>2）可重入锁：</h4><p>首先是获取锁：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]; <span class="comment">-- 线程唯一标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">-- 锁的自动释放时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;exists&#x27;</span>, key) == <span class="number">0</span>) <span class="keyword">then</span> <span class="comment">-- 判断是否存在</span></span><br><span class="line">redis.call(<span class="string">&#x27;hset&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>); <span class="comment">-- 不存在, 获取锁</span></span><br><span class="line">redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime); <span class="comment">-- 设置有效期</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;hexists&#x27;</span>, key, threadId) == <span class="number">1</span>) <span class="keyword">then</span> <span class="comment">-- 锁已经存在，判断threadId是否是自己</span></span><br><span class="line">redis.call(<span class="string">&#x27;hincrby&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>); <span class="comment">-- 不存在, 获取锁，重入次数+1</span></span><br><span class="line">redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime); <span class="comment">-- 设置有效期</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">-- 代码走到这里,说明获取锁的不是自己，获取锁失败</span></span><br></pre></td></tr></table></figure><p>然后是释放锁：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]; <span class="comment">-- 线程唯一标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">-- 锁的自动释放时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;HEXISTS&#x27;</span>, key, threadId) == <span class="number">0</span>) <span class="keyword">then</span> <span class="comment">-- 判断当前锁是否还是被自己持有</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>; <span class="comment">-- 如果已经不是自己，则直接返回</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">local</span> count = redis.call(<span class="string">&#x27;HINCRBY&#x27;</span>, key, threadId, <span class="number">-1</span>); <span class="comment">-- 是自己的锁，则重入次数-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) <span class="keyword">then</span> <span class="comment">-- 判断是否重入次数是否已经为0</span></span><br><span class="line">    redis.call(<span class="string">&#x27;EXPIRE&#x27;</span>, key, releaseTime); <span class="comment">-- 大于0说明不能释放锁，重置有效期然后返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    redis.call(<span class="string">&#x27;DEL&#x27;</span>, key); <span class="comment">-- 等于0说明可以释放锁，直接删除</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h2 id="3-5-Redis客户端调用Lua"><a href="#3-5-Redis客户端调用Lua" class="headerlink" title="3.5.Redis客户端调用Lua"></a>3.5.Redis客户端调用Lua</h2><p>脚本编写完成，还需要通过客户端来调用lua脚本，封装一个获取锁和释放锁的工具。</p><p>首先我们创建一个工程：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566364767687.png" alt="1566364767687"></p><p>填写信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566364941610.png" alt="1566364941610"></p><p>选择依赖：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566364993949.png" alt="1566364993949"></p><p>在配置文件中引入Redis的地址信息(注意修改成你自己的redis地址)：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">192.168.206.99</span></span><br></pre></td></tr></table></figure><h3 id="3-5-1-锁接口"><a href="#3-5-1-锁接口" class="headerlink" title="3.5.1.锁接口"></a>3.5.1.锁接口</h3><p>首先定义一个锁接口，定义锁中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.lock;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> releaseTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> releaseTime)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-实现类"><a href="#3-5-2-实现类" class="headerlink" title="3.5.2.实现类"></a>3.5.2.实现类</h3><p>我们通过Spring提供的RedisTemplate来操作lua脚本，<code>RedisTemplate</code>中提供了一个方法，用来执行Lua脚本：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556162076875.png" alt="1556162076875"></p><p>包含3个参数：</p><ul><li><code>RedisScript&lt;T&gt; script</code>：封装了Lua脚本的对象</li><li><code>List&lt;K&gt; keys</code>：脚本中的key的值</li><li><code>Object ... args</code>：脚本中的参数的值</li></ul><p>因此，要执行Lua脚本，我们需要先把脚本封装到<code>RedisScript</code>对象中，有两种方式来构建<code>RedisScript</code>对象：</p><p>1）通过RedisScript中的静态方法：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556162311151.png" alt="1556162311151"></p><p>这个方法接受两个参数：</p><ul><li><code>String script</code>：Lua脚本</li><li><code>Class&lt;T&gt; resultType</code>：返回值类型</li></ul><p>需要把脚本内容写到代码中，作为参数传递，不够优雅。</p><p>2）自己创建DefaultRedisScript</p><p>另一种方式，就是自己去创建<code>RedisScript</code>的实现类<code>DefaultRedisScript</code>的对象：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556162540499.png" alt="1556162540499"></p><p>可以把脚本文件写到classpath下的某个位置，然后通过加载这个文件来获取脚本内容，并设置给<code>DefaultRedisScript</code>实例。</p><p>此处我们选择方式二，方便后期对脚本文件的维护。</p><p>首先在classpath中编写两个Lua脚本文件.</p><p>然后编写一个新的RedisLock实现：ReentrantRedisLock，利用静态代码块来加载脚本并初始化：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566365327191.png" alt="1566365327191"> </p><p>其中，加载脚本文件的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantRedisLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取锁的脚本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; LOCK_SCRIPT;</span><br><span class="line">    <span class="comment">// 释放锁的脚本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Object&gt; UNLOCK_SCRIPT;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 加载获取锁的脚本</span></span><br><span class="line">        LOCK_SCRIPT = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">        LOCK_SCRIPT.setScriptSource(</span><br><span class="line">            <span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;lock.lua&quot;</span>)));</span><br><span class="line">        LOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载释放锁的脚本</span></span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">        UNLOCK_SCRIPT.setScriptSource(</span><br><span class="line">            <span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;unlock.lua&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其它代码略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现RedisLock接口，实现其中的抽象方法，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.script.DefaultRedisScript;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scripting.support.ResourceScriptSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantRedisLock</span> <span class="keyword">implements</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设定好锁对应的 key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入的线程信息的前缀，防止与其它JVM中线程信息冲突</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String ID_PREFIX = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReentrantRedisLock</span><span class="params">(StringRedisTemplate redisTemplate, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; LOCK_SCRIPT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Object&gt; UNLOCK_SCRIPT;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 加载释放锁的脚本</span></span><br><span class="line">        LOCK_SCRIPT = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">        LOCK_SCRIPT.setScriptSource(<span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;lock.lua&quot;</span>)));</span><br><span class="line">        LOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载释放锁的脚本</span></span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">        UNLOCK_SCRIPT.setScriptSource(<span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;unlock.lua&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 锁释放时间</span></span><br><span class="line">    <span class="keyword">private</span> String releaseTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> releaseTime)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 记录释放时间</span></span><br><span class="line">        <span class="keyword">this</span>.releaseTime = String.valueOf(releaseTime);</span><br><span class="line">        <span class="comment">// 执行脚本</span></span><br><span class="line">        Long result = redisTemplate.execute(</span><br><span class="line">                LOCK_SCRIPT,</span><br><span class="line">                Collections.singletonList(key),</span><br><span class="line">                ID_PREFIX + Thread.currentThread().getId(), <span class="keyword">this</span>.releaseTime);</span><br><span class="line">        <span class="comment">// 判断结果</span></span><br><span class="line">        <span class="keyword">return</span> result != <span class="keyword">null</span> &amp;&amp; result.intValue() == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行脚本</span></span><br><span class="line">        redisTemplate.execute(</span><br><span class="line">                UNLOCK_SCRIPT,</span><br><span class="line">                Collections.singletonList(key),</span><br><span class="line">                ID_PREFIX + Thread.currentThread().getId(), <span class="keyword">this</span>.releaseTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-获取锁的工厂"><a href="#3-5-3-获取锁的工厂" class="headerlink" title="3.5.3.获取锁的工厂"></a>3.5.3.获取锁的工厂</h3><p>定义一个工厂，用来生成锁对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisLock <span class="title">getReentrantLock</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReentrantRedisLock(redisTemplate, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-4-测试"><a href="#3-5-4-测试" class="headerlink" title="3.5.4.测试"></a>3.5.4.测试</h3><p>我们定义一个定时任务，模拟清理订单的任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.lock.RedisLock;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.lock.RedisLockFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClearOrderTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisLockFactory redisLockFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/10 * * ? * *&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearOrderTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 执行任务</span></span><br><span class="line">        clearOrder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearOrder</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始清理未支付订单!&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        log.info(<span class="string">&quot;恢复数据库库存！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来，我们给任务加锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClearOrderTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisLockFactory redisLockFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/10 * * ? * *&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearOrderTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取锁对象</span></span><br><span class="line">        RedisLock lock = redisLockFactory.getReentrantLock(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        <span class="comment">// 尝试加锁</span></span><br><span class="line">        <span class="keyword">boolean</span> isLock = lock.tryLock(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 判断是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line">            <span class="comment">// 获取锁失败，结束任务</span></span><br><span class="line">            log.error(<span class="string">&quot;获取锁失败，任务终止！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取锁成功，开始执行任务&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行任务</span></span><br><span class="line">            clearOrder();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            log.warn(<span class="string">&quot;任务结束，释放锁&quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearOrder</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始清理未支付订单!&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        log.info(<span class="string">&quot;恢复数据库库存！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将启动项复制2份（或多分），测试锁是否能生效：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566365847213.png" alt="1566365847213"> </p><p>修改第二个启动项的端口，避免冲突</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566365918528.png" alt="1566365918528"></p><p>同时启动2个启动项，查看日志：</p><p>第一个服务：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566366085319.png" alt="1566366085319"></p><p>第二个服务：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566366093929.png" alt="1566366093929"></p><p>可以看到：</p><ul><li>在13:39:50秒时，8081服务获取锁失败，而8082服务获取锁成功</li><li>在13:40:00秒时，8082服务获取锁失败，而8081服务获取锁成功</li></ul><h2 id="3-6-Redisson"><a href="#3-6-Redisson" class="headerlink" title="3.6.Redisson"></a>3.6.Redisson</h2><p>如果按照Redlock算法来实现分布式锁，加上各种安全控制，代码会比较复杂。而开源的Redission框架就帮我们实现了各种基于Redis的分布式锁，包括Redlock锁。</p><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。其中包括(<code>BitSet</code>, <code>Set</code>, <code>Multimap</code>, <code>SortedSet</code>, <code>Map</code>, <code>List</code>, <code>Queue</code>, <code>BlockingQueue</code>, <code>Deque</code>, <code>BlockingDeque</code>, <code>Semaphore</code>, <code>Lock</code>, <code>AtomicLong</code>, <code>CountDownLatch</code>, <code>Publish / Subscribe</code>, <code>Bloom filter</code>, <code>Remote service</code>, <code>Spring cache</code>, <code>Executor service</code>, <code>Live Object service</code>, <code>Scheduler service</code>) Redisson提供了使用Redis的最简单和最便捷的方法。Redisson的宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p><p><a href="https://redisson.org/">官网地址</a>：<a href="https://redisson.org/">https://redisson.org/</a></p><p><a href="https://github.com/redisson/redisson">GitHub地址</a>：<a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></p><p>看看Redisson能实现的功能：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566377069700.png" alt="1566377069700"> </p><h3 id="3-6-1-快速入门"><a href="#3-6-1-快速入门" class="headerlink" title="3.6.1.快速入门"></a>3.6.1.快速入门</h3><h4 id="1）依赖"><a href="#1）依赖" class="headerlink" title="1）依赖"></a>1）依赖</h4><p>使用起来非常方便，首先引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）配置"><a href="#2）配置" class="headerlink" title="2）配置"></a>2）配置</h4><p>然后通过Java配置的方式，设置Redis的地址，构建RedissionClient客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置类</span></span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        <span class="comment">// 添加redis地址，这里添加了单点的地址，也可以使用config.useClusterServers()添加集群地址</span></span><br><span class="line">        config.useSingleServer()</span><br><span class="line">                .setAddress(<span class="string">&quot;redis://192.168.206.99:6379&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建客户端</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）常用API介绍："><a href="#3）常用API介绍：" class="headerlink" title="3）常用API介绍："></a>3）常用API介绍：</h4><p>RedissClient中定义了常见的锁：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556169332323.png" alt="1556169332323"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建锁对象，并制定锁的名称</span></span><br><span class="line">RLock lock = redissonClient.getLock(<span class="string">&quot;taskLock&quot;</span>);</span><br></pre></td></tr></table></figure><p>获取锁对象后，可以通过<code>tryLock()</code>方法获取锁：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556169690541.png" alt="1556169690541"></p><p>有3个重载的方法，可以控制锁是否需要重试来获取：</p><ul><li>三个参数：获取锁，设置锁等待时间<code>waitTime</code>、释放时间<code>leaseTime</code>，时间单位<code>unit</code>。<ul><li>如果获取锁失败后，会在<code>waitTime  </code>减去获取锁用时的剩余时间段内继续尝试获取锁，如果依然获取失败，则认为获取锁失败；</li><li>获取锁后，如果超过<code>leaseTime</code>未释放，为避免死锁会自动释放。</li></ul></li><li>两个参数：获取锁，设置锁等待时间<code>time</code>、时间单位<code>unit</code>。释放时间<code>leaseTime</code>按照默认的30s</li><li>空参：获取锁，<code>waitTime</code>默认0s，即获取锁失败不重试，<code>leaseTime</code>默认30s</li></ul><p>任务执行完毕，使用<code>unlock()</code>方法释放锁：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556170353278.png" alt="1556170353278"> </p><h4 id="4）完整案例"><a href="#4）完整案例" class="headerlink" title="4）完整案例"></a>4）完整案例</h4><p>使用Redission来代替我们之前自定义锁的测试案例：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566377926318.png" alt="1566377926318"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClearOrderTask2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/10 * * ? * *&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearOrderTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取锁对象</span></span><br><span class="line">        RLock lock = redissonClient.getLock(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        <span class="comment">// 尝试加锁</span></span><br><span class="line">        <span class="keyword">boolean</span> isLock = lock.tryLock();</span><br><span class="line">        <span class="comment">// 判断是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line">            <span class="comment">// 获取锁失败，结束任务</span></span><br><span class="line">            log.error(<span class="string">&quot;获取锁失败，任务终止！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取锁成功，开始执行任务&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行任务</span></span><br><span class="line">            clearOrder();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            log.warn(<span class="string">&quot;任务结束，释放锁&quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearOrder</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始清理未支付订单!&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        log.info(<span class="string">&quot;恢复数据库库存！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-2-Redisson实现细节"><a href="#3-6-2-Redisson实现细节" class="headerlink" title="3.6.2.Redisson实现细节"></a>3.6.2.Redisson实现细节</h3><p>首先看空参获取lock的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RedissonLock类</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(tryLockAsync());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RFuture&lt;Boolean&gt; <span class="title">tryLockAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tryLockAsync(Thread.currentThread().getId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RFuture&lt;Boolean&gt; <span class="title">tryLockAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tryAcquireOnceAsync(-<span class="number">1</span>, <span class="keyword">null</span>, threadId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RFuture&lt;Boolean&gt; <span class="title">tryAcquireOnceAsync</span><span class="params">(<span class="keyword">long</span> leaseTime, TimeUnit unit, <span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> tryLockInnerAsync(leaseTime, unit, threadId, RedisCommands.EVAL_NULL_BOOLEAN);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试获取锁，返回RFuture(带结果的异步任务)</span></span><br><span class="line">    RFuture&lt;Boolean&gt; ttlRemainingFuture = tryLockInnerAsync(commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(), TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_NULL_BOOLEAN);</span><br><span class="line">    <span class="comment">// 如果成功</span></span><br><span class="line">    ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lock acquired</span></span><br><span class="line">        <span class="keyword">if</span> (ttlRemaining) &#123;</span><br><span class="line">            <span class="comment">// 尝试自动续期（看门狗watch dog）</span></span><br><span class="line">            scheduleExpirationRenewal(threadId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ttlRemainingFuture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的核心有两部分：</p><ul><li>一个是获取锁的方法：tryLockInnerAsync</li><li>一个是自动续期（看门狗）的方法：scheduleExpirationRenewal</li></ul><h4 id="1）获取锁"><a href="#1）获取锁" class="headerlink" title="1）获取锁"></a>1）获取锁</h4><p>首先看tryLockInnerAsync，这个方法是获取锁的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">RFuture&lt;T&gt; <span class="title">tryLockInnerAsync</span><span class="params">(<span class="keyword">long</span> leaseTime, TimeUnit unit, <span class="keyword">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> </span>&#123;</span><br><span class="line">    internalLockLeaseTime = unit.toMillis(leaseTime);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, command,</span><br><span class="line">              <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;hset&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">                Collections.&lt;Object&gt;singletonList(getName()), internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的核心就是这段Lua脚本，看看与我们写的是不是基本类似呢，区别是最后返回了这个key的剩余有效期。</p><h4 id="2）锁的自动续期"><a href="#2）锁的自动续期" class="headerlink" title="2）锁的自动续期"></a>2）锁的自动续期</h4><p>锁如果在执行任务时自动过期，就会引起各种问题， 因此我们需要在锁过期前自动申请续期，这个被称为watch dog，看门狗。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleExpirationRenewal</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建entry，记录线程id，因为需要知道对哪个线程的锁刷新</span></span><br><span class="line">    ExpirationEntry entry = <span class="keyword">new</span> ExpirationEntry();</span><br><span class="line">    ExpirationEntry oldEntry = EXPIRATION_RENEWAL_MAP.putIfAbsent(getEntryName(), entry);</span><br><span class="line">    <span class="keyword">if</span> (oldEntry != <span class="keyword">null</span>) &#123;</span><br><span class="line">        oldEntry.addThreadId(threadId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        entry.addThreadId(threadId);</span><br><span class="line">        <span class="comment">// 刷新过期时间</span></span><br><span class="line">        renewExpiration();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷新时间的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">renewExpiration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExpirationEntry ee = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">        <span class="keyword">if</span> (ee == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置一个延迟刷新的任务，并且设置超时时间为总过期时间的1/3，例如总时间时30秒，则每隔10秒重试一次</span></span><br><span class="line">        Timeout task = commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                ExpirationEntry ent = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">                <span class="keyword">if</span> (ent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Long threadId = ent.getFirstThreadId();</span><br><span class="line">                <span class="keyword">if</span> (threadId == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 异步发送更新过期时间的请求</span></span><br><span class="line">                RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class="line">                <span class="comment">// 更新成功后的任务</span></span><br><span class="line">                future.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;Can&#x27;t update lock &quot;</span> + getName() + <span class="string">&quot; expiration&quot;</span>, e);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 再次调用自己</span></span><br><span class="line">                    renewExpiration();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        </span><br><span class="line">        ee.setTimeout(task);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>刷新过期时间的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title">renewExpirationAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">            <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">            <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">            <span class="string">&quot;return 0;&quot;</span>,</span><br><span class="line">        Collections.&lt;Object&gt;singletonList(getName()), </span><br><span class="line">        internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）带阻塞的获取锁"><a href="#3）带阻塞的获取锁" class="headerlink" title="3）带阻塞的获取锁"></a>3）带阻塞的获取锁</h4><p>阻塞获取锁，会在获取失败以后重试，不过会设置失败超时时间。</p><p><code>public boolean tryLock(long waitTime, long leaseTime, TimeUnit unit)</code></p><ul><li>waitTime：获取锁重试的最大超时时间，默认为0</li><li>leaseTime：释放锁的最大时间，默认时30秒</li><li>unit：时间单位</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取锁的重试时长</span></span><br><span class="line">        <span class="keyword">long</span> time = unit.toMillis(waitTime);</span><br><span class="line">        <span class="keyword">long</span> current = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> threadId = Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">// 尝试获取锁，并获取有效时间</span></span><br><span class="line">        Long ttl = tryAcquire(leaseTime, unit, threadId);</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (ttl == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取锁成功，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算获取锁的耗时是否超过了最大重试时间</span></span><br><span class="line">        time -= System.currentTimeMillis() - current;</span><br><span class="line">        <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果超时则认为获取锁失败，不再重试，直接返回</span></span><br><span class="line">            acquireFailed(threadId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 虽然失败，但是没有超过最大等待时间，继续获取锁</span></span><br><span class="line">        current = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 订阅锁释放的消息</span></span><br><span class="line">        RFuture&lt;RedissonLockEntry&gt; subscribeFuture = subscribe(threadId);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 此处会阻塞，等待消息。如果超时，则认为获取锁失败</span></span><br><span class="line">        <span class="keyword">if</span> (!await(subscribeFuture, time, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!subscribeFuture.cancel(<span class="keyword">false</span>)) &#123;</span><br><span class="line">                subscribeFuture.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        unsubscribe(subscribeFuture, threadId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            acquireFailed(threadId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 如果获取到订阅消息，说明锁已经释放，可以重试</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            time -= System.currentTimeMillis() - current;</span><br><span class="line">            <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                acquireFailed(threadId);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// 循环重试获取锁</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">                ttl = tryAcquire(leaseTime, unit, threadId);</span><br><span class="line">                <span class="comment">// lock acquired</span></span><br><span class="line">                <span class="keyword">if</span> (ttl == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                time -= System.currentTimeMillis() - currentTime;</span><br><span class="line">                <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    acquireFailed(threadId);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// waiting for message</span></span><br><span class="line">                currentTime = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">if</span> (ttl &gt;= <span class="number">0</span> &amp;&amp; ttl &lt; time) &#123;</span><br><span class="line">                    getEntry(threadId).getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    getEntry(threadId).getLatch().tryAcquire(time, TimeUnit.MILLISECONDS);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                time -= System.currentTimeMillis() - currentTime;</span><br><span class="line">                <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    acquireFailed(threadId);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            unsubscribe(subscribeFuture, threadId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取锁失败，会通过Redis的pubsub功能订阅一个频道，如果释放锁会通知自己，然后再重试获取锁。</p><h4 id="4）释放锁"><a href="#4）释放锁" class="headerlink" title="4）释放锁"></a>4）释放锁</h4><p>释放锁代码基本一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        get(unlockAsync(Thread.currentThread().getId()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RedisException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getCause() <span class="keyword">instanceof</span> IllegalMonitorStateException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IllegalMonitorStateException) e.getCause();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面跟到unlockAsync方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RFuture&lt;Void&gt; <span class="title">unlockAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    RPromise&lt;Void&gt; result = <span class="keyword">new</span> RedissonPromise&lt;Void&gt;();</span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    RFuture&lt;Boolean&gt; future = unlockInnerAsync(threadId);</span><br><span class="line"><span class="comment">// 回调</span></span><br><span class="line">    future.onComplete((opStatus, e) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 出现异常的情况，取消自动续期任务</span></span><br><span class="line">            cancelExpirationRenewal(threadId);</span><br><span class="line">            result.tryFailure(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 说明锁是自动释放，已经不是自己的了</span></span><br><span class="line">        <span class="keyword">if</span> (opStatus == <span class="keyword">null</span>) &#123;</span><br><span class="line">            IllegalMonitorStateException cause = <span class="keyword">new</span> IllegalMonitorStateException(<span class="string">&quot;attempt to unlock lock, not locked by current thread by node id: &quot;</span></span><br><span class="line">                                                                                  + id + <span class="string">&quot; thread-id: &quot;</span> + threadId);</span><br><span class="line">            result.tryFailure(cause);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 取消自动续期任务</span></span><br><span class="line">        cancelExpirationRenewal(threadId);</span><br><span class="line">        result.trySuccess(<span class="keyword">null</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后关键是释放锁的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title">unlockInnerAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">                <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return nil;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                <span class="string">&quot;local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); &quot;</span> +</span><br><span class="line">                <span class="string">&quot;if (counter &gt; 0) then &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 0; &quot;</span> +</span><br><span class="line">                <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;del&#x27;, KEYS[1]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 1; &quot;</span>+</span><br><span class="line">                <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return nil;&quot;</span>,</span><br><span class="line">                Arrays.&lt;Object&gt;asList(getName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码基本一致，就是再最后释放成功后，通过<code>redis.call(&#39;publish&#39;, KEYS[2], ARGV[1]);</code>发布了一条消息，通知锁已经释放，那些再等待的其它线程，就可以获取锁了。</p><h2 id="3-7-总结"><a href="#3-7-总结" class="headerlink" title="3.7.总结"></a>3.7.总结</h2><p>总结来看，Redis实现分布式锁，具备下列优缺点：</p><ul><li>优点：实现简单，性能好，并发能力强，如果对并发能力有要求，推荐使用</li><li>缺点：可靠性有争议，极端情况会出现锁失效问题，如果对安全要求较高，不建议使用</li></ul><h1 id="4-zookeeper实现分布式锁"><a href="#4-zookeeper实现分布式锁" class="headerlink" title="4.zookeeper实现分布式锁"></a>4.zookeeper实现分布式锁</h1><p>Zookeeper是一种提供配置管理、分布式协同以及命名的中心化服务。</p><p>zk的模型是这样的：zk包含一系列的节点，叫做znode，就好像文件系统一样每个znode表示一个目录，然后znode有一些特性：</p><ul><li><p><strong>有序节点</strong>：假如当前有一个父节点为<code>/lock</code>，我们可以在这个父节点下面创建子节点；</p><p>zookeeper提供了一个可选的有序特性，例如我们可以创建子节点“/lock/node-”并且指明有序，那么zookeeper在生成子节点时会根据当前的子节点数量自动添加整数序号</p><p>也就是说，如果是第一个创建的子节点，那么生成的子节点为<code>/lock/node-0000000000</code>，下一个节点则为<code>/lock/node-0000000001</code>，依次类推。</p></li><li><p><strong>临时节点</strong>：客户端可以建立一个临时节点，在会话结束或者会话超时后，zookeeper会自动删除该节点。</p></li><li><p><strong>事件监听</strong>：在读取数据时，我们可以同时对节点设置事件监听，当节点数据或结构变化时，zookeeper会通知客户端。当前zookeeper有如下四种事件：</p></li><li><ul><li>节点创建</li><li>节点删除</li><li>节点数据修改</li><li>子节点变更</li></ul></li></ul><p>基于以上的一些zk的特性，我们很容易得出使用zk实现分布式锁的落地方案：</p><ol><li><p>使用zk的临时节点和有序节点，每个线程获取锁就是在zk创建一个临时有序的节点，比如在/lock/目录下。</p></li><li><p>创建节点成功后，获取/lock目录下的所有临时节点，再判断当前线程创建的节点是否是所有的节点的序号最小的节点</p></li><li><p>如果当前线程创建的节点是所有节点序号最小的节点，则认为获取锁成功。</p></li><li><p>如果当前线程创建的节点不是所有节点序号最小的节点，则对节点序号的前一个节点添加一个事件监听。</p><p>比如当前线程获取到的节点序号为<code>/lock/003</code>,然后所有的节点列表为<code>[/lock/001,/lock/002,/lock/003]</code>,则对<code>/lock/002</code>这个节点添加一个事件监听器。</p></li></ol><p>如果锁释放了，会唤醒下一个序号的节点，然后重新执行第3步，判断是否自己的节点序号是最小。</p><p>比如<code>/lock/001</code>释放了，<code>/lock/002</code>监听到时间，此时节点集合为<code>[/lock/002,/lock/003]</code>,则<code>/lock/002</code>为最小序号节点，获取到锁。</p><p>Curator是一个zookeeper的开源客户端，也提供了分布式锁的实现。</p><p>来看看锁的一些特性Zookeeper是否满足：</p><ul><li><p>互斥：因为只有一个最小节点，满足互斥特性</p></li><li><p>锁释放：使用Zookeeper可以有效的解决锁无法释放的问题，因为在创建锁的时候，客户端会在ZK中创建一个临时节点，一旦客户端获取到锁之后突然挂掉（Session连接断开），那么这个临时节点就会自动删除掉。其他客户端就可以再次获得锁。</p></li><li><p>阻塞锁：使用Zookeeper可以实现阻塞的锁，客户端可以通过在ZK中创建顺序节点，并且在节点上绑定监听器，一旦节点有变化，Zookeeper会通知客户端，客户端可以检查自己创建的节点是不是当前所有节点中序号最小的，如果是，那么自己就获取到锁，便可以执行业务逻辑了。</p></li><li><p>可重入：使用Zookeeper也可以有效的解决不可重入的问题，客户端在创建节点的时候，把当前客户端的主机信息和线程信息直接写入到节点中，下次想要获取锁的时候和当前最小的节点中的数据比对一下就可以了。如果和自己的信息一样，那么自己直接获取到锁，如果不一样就再创建一个临时的顺序节点，参与排队。</p></li><li><p>高可用：使用Zookeeper可以有效的解决单点问题，ZK是集群部署的，只要集群中有半数以上的机器存活，就可以对外提供服务。</p></li><li><p>高性能：Zookeeper集群是满足强一致性的，因此就会牺牲一定的性能，与Redis相比略显不足</p></li></ul><p>总结：</p><ul><li>优点：使用非常简单，不用操心释放问题、阻塞获取问题</li><li>缺点：性能比Redis稍差一些</li></ul><h1 id="5-基于数据库的实现"><a href="#5-基于数据库的实现" class="headerlink" title="5.基于数据库的实现"></a>5.基于数据库的实现</h1><p>准备一张表，记录锁相关信息:<code>tb_lock</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">idlockname</span><br><span class="line">1createOrder</span><br><span class="line">2evictOrder</span><br></pre></td></tr></table></figure><p>互斥：利用了数据库本身的排它锁来实现。</p><p>步骤：</p><ul><li>获取锁：select * from tb_lock where method_name = “evictOrder” for update</li><li>执行自己的业务 …</li><li>释放锁：commit 提交事务</li></ul><p>优点：</p><ul><li>实现简单</li><li>锁的自动释放</li></ul><p>缺点：</p><ul><li>依赖于数据库，性能是一个问题</li><li>单点故障问题</li><li>并发一般</li></ul><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h1><p>分布式锁释放方式多种多样，每种方式都有自己的优缺点，我们应该根据业务的具体需求，先择合适的实现。</p><p>Redis实现：实现比较简单，性能最高，但是可靠性难以维护</p><p>Zookeeper实现：实现最简单，可靠性最高，性能比redis略低</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="分布式锁" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
</feed>
