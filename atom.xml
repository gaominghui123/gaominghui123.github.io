<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-31T03:57:32.821Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>高明辉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rabbit整合SpringBoot以及整合邮件发送</title>
    <link href="http://example.com/2022/05/31/Rabbit%E6%95%B4%E5%90%88SpringBoot%E4%BB%A5%E5%8F%8A%E6%95%B4%E5%90%88%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <id>http://example.com/2022/05/31/Rabbit%E6%95%B4%E5%90%88SpringBoot%E4%BB%A5%E5%8F%8A%E6%95%B4%E5%90%88%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</id>
    <published>2022-05-31T03:34:36.000Z</published>
    <updated>2022-05-31T03:57:32.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合邮件发送"><a href="#SpringBoot整合邮件发送" class="headerlink" title="SpringBoot整合邮件发送"></a>SpringBoot整合邮件发送</h1><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20210708162108584.png" alt="image-20210708162108584"></p><p>说明：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">最下面的几个箭头表示备份，</span></span><br><span class="line"><span class="attr">2</span> <span class="string">最上面的双向箭头中的向下箭头表示刷新，</span></span><br><span class="line"><span class="attr">强制查看有没有接受到邮箱，</span></span><br><span class="line"><span class="attr">自己不手动刷新，那么就是一定是刷新查看有没有邮箱到达</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-完成邮件的投递"><a href="#SpringBoot-完成邮件的投递" class="headerlink" title="SpringBoot 完成邮件的投递"></a>SpringBoot 完成邮件的投递</h2><p>准备工作： 登录自己的开通邮件的 以163为例      </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574189645.png" alt="1600574189645"> </p><p>生成自己唯一的授权码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574220514.png" alt="1600574220514"> </p><ul><li>基于springboot环境导入email发送依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springboot邮件发送--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置邮件发送参数  yaml文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">##    邮件发送配置</span><br><span class="line">#  spring.mail.username=fanqixxxx@163.com</span><br><span class="line">#  #spring.mail.password   填写授权码</span><br><span class="line">#  spring.mail.password=xxxxxxx</span><br><span class="line">#  #spring.mail.host   填写邮箱供应的SMTP地址</span><br><span class="line">#  spring.mail.host=smtp.163.com</span><br><span class="line">#  spring.mail.properties.mail.smtp.ssl.enable=true</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="comment"># 发送者的邮箱地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xsitheima163@163.com</span></span><br><span class="line">  <span class="comment"># 此密码并非登录的密码,而是使用java代码发送邮件时使用的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">AKELOGXEFRJZOAWU</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>编写测试类 完成邮件发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailSend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            message.setSubject(<span class="string">&quot;传智健康官方邮件&quot;</span>);</span><br><span class="line">            message.setText(<span class="string">&quot;你好，请保持好验证码：7788，打死都不能泄露给你的同桌&quot;</span>);</span><br><span class="line">            message.setTo(<span class="string">&quot;tps520tps@163.com&quot;</span>);</span><br><span class="line">            message.setFrom(<span class="string">&quot;tps520wx@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MailException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查收邮件：</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/08.rabbitMQ/resources/img/1600574300195.png" alt="1600574300195"> </p><p>邮件发送示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendEmailApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            message.setSubject(<span class="string">&quot;表白邮件&quot;</span>);</span><br><span class="line">            message.setText(<span class="string">&quot;rose 你好, 我想.....&quot;</span>);</span><br><span class="line">            message.setTo(<span class="string">&quot;xsitheima126@126.com&quot;</span>);</span><br><span class="line">            message.setFrom(<span class="string">&quot;xsitheima163@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">            System.out.println(<span class="string">&quot;========发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MailException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="预备账号"><a href="#预备账号" class="headerlink" title="预备账号"></a>预备账号</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xsitheima126@<span class="number">126.</span>com    a123456</span><br><span class="line">    授权码: YKJOGNHCCFDLIJKO</span><br><span class="line">xsitheima163@<span class="number">163.</span>com    a12345678</span><br><span class="line">授权码: AKELOGXEFRJZOAWU</span><br></pre></td></tr></table></figure><h1 id="SpringBoot整合RabbitMQ以及整合邮件发送"><a href="#SpringBoot整合RabbitMQ以及整合邮件发送" class="headerlink" title="SpringBoot整合RabbitMQ以及整合邮件发送"></a>SpringBoot整合RabbitMQ以及整合邮件发送</h1><p>整合描述：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span> <span class="string">boot 中生产者的controller类提供的 访问地址带的参数就是邮箱账号，</span></span><br><span class="line"><span class="meta">访问生产者的</span> <span class="string">spring boot controller 并且将邮箱账号作为消息，</span></span><br><span class="line"><span class="attr">消费者拿到的信息就是邮箱账号，</span></span><br><span class="line"><span class="meta">然后消费者使用163账号给接收到的邮箱账号</span> <span class="string">发送邮件！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ps：先启动消费者，然后再启动生产者，生产者生产10次邮箱信息，那么消费者发送十次邮箱。</span></span><br></pre></td></tr></table></figure><h3 id="1-消费者代码"><a href="#1-消费者代码" class="headerlink" title="1 消费者代码"></a>1 消费者代码</h3><h4 id="消费者配置文件："><a href="#消费者配置文件：" class="headerlink" title="消费者配置文件："></a>消费者配置文件：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="comment"># 发送者的邮箱地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xsitheima163@163.com</span></span><br><span class="line">  <span class="comment"># 此密码并非登录的密码,而是使用java代码发送邮件时使用的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">AKELOGXEFRJZOAWU</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="消费者pom-xml文件"><a href="#消费者pom-xml文件" class="headerlink" title="消费者pom.xml文件"></a>消费者pom.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--springboot邮件发送--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="消费者启动文件："><a href="#消费者启动文件：" class="headerlink" title="消费者启动文件："></a>消费者启动文件：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换器: 将对象转成json并存放到MQ中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="消费者监听生产者类："><a href="#消费者监听生产者类：" class="headerlink" title="消费者监听生产者类："></a>消费者监听生产者类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg : 参数类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;boot-queue&quot;)</span><span class="comment">//  注意只需要 队列名称一致即可！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String msg, Channel channel, Message message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//public void receive(Map msg, Channel channel, Message message) throws IOException &#123;</span></span><br><span class="line">        <span class="comment">//会话唯一ID</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息 &quot;</span> + msg);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;收到消息 &quot; + new String(message.getBody()));</span></span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;message:&quot; +message.toString());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// =====================发送邮件</span></span><br><span class="line">            <span class="comment">// 编写邮件信息</span></span><br><span class="line">            SimpleMailMessage emailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            <span class="comment">// 邮件主题</span></span><br><span class="line">            emailMessage.setSubject(<span class="string">&quot;下单通知&quot;</span>);</span><br><span class="line">            <span class="comment">// 邮件内容</span></span><br><span class="line">            emailMessage.setText(<span class="string">&quot;您的宝贝以发货&quot;</span>);</span><br><span class="line">            emailMessage.setTo(msg);</span><br><span class="line">            emailMessage.setFrom(<span class="string">&quot;xsitheima163@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(emailMessage);</span><br><span class="line">            System.out.println(<span class="string">&quot;========发送成功&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-生产者代码："><a href="#2-生产者代码：" class="headerlink" title="2 生产者代码："></a>2 生产者代码：</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">producer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br></pre></td></tr></table></figure><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换器: 将对象转成json并存放到MQ中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Controller类"><a href="#Controller类" class="headerlink" title="Controller类"></a>Controller类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// rabbit客户端对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send/&#123;msg&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable(&quot;msg&quot;)</span> String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 参数1: 队列名称,操作的队列必须实现存在</span></span><br><span class="line">        <span class="comment">// 参数2: 存放的消息信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;boot-queue&quot;</span>,msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot整合邮件发送&quot;&gt;&lt;a href=&quot;#SpringBoot整合邮件发送&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合邮件发送&quot;&gt;&lt;/a&gt;SpringBoot整合邮件发送&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img</summary>
      
    
    
    
    <category term="RabbitMQ" scheme="http://example.com/categories/RabbitMQ/"/>
    
    
    <category term="RabbitMQ" scheme="http://example.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ的下载与安装</title>
    <link href="http://example.com/2022/05/31/RabbitMQ%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2022/05/31/RabbitMQ%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/</id>
    <published>2022-05-31T03:28:20.000Z</published>
    <updated>2022-05-31T04:03:00.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二章-RabbitMQ下载与安装"><a href="#第二章-RabbitMQ下载与安装" class="headerlink" title="第二章 RabbitMQ下载与安装"></a>第二章 RabbitMQ下载与安装</h2><h3 id="2-1-下载与安装"><a href="#2-1-下载与安装" class="headerlink" title="2.1 下载与安装"></a>2.1 下载与安装</h3><p>官网下载地址：<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a></p><p>快速入门地址：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p><p>详细下载安装请参考如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>注意，管理界面端口跟连接端口不是同一个端口哦。</p><h3 id="2-2-使用管理界面"><a href="#2-2-使用管理界面" class="headerlink" title="2.2 使用管理界面"></a>2.2 使用管理界面</h3><h3 id="1）界面总览"><a href="#1）界面总览" class="headerlink" title="1）界面总览"></a>1）界面总览</h3><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1570592912783.png" alt="1570592912783"></p><h3 id="2）用户权限管理"><a href="#2）用户权限管理" class="headerlink" title="2）用户权限管理"></a>2）用户权限管理</h3><p>我们新建的itcast用户，不具备访问权限，如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1569411819639.png" alt="1569411819639"></p><p>我们需要添加对virtual hosts的访问权限，点击itcast用户，进入用户管理界面，然后添加权限：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1569411896139.png" alt="1569411896139"></p><p>添加权限以后，可以看到用户已经具备了访问权：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1569411955659.png" alt="1569411955659"> </p><h2 id="2-Linux环境RabbitMQ安装"><a href="#2-Linux环境RabbitMQ安装" class="headerlink" title="2 Linux环境RabbitMQ安装"></a>2 Linux环境RabbitMQ安装</h2><h3 id="erlang安装"><a href="#erlang安装" class="headerlink" title="erlang安装"></a>erlang安装</h3><p>安装erlang需要的依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC-devel xz</span><br></pre></td></tr></table></figure><p>下载erlang源文件（可以直接拷贝《<strong>资料/otp_src_23.0.tar.gz</strong>》）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget http://erlang.org/download/otp_src_23.0.tar.gz</span><br></pre></td></tr></table></figure><p>解压：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -xvzf otp_src_23.0.tar.gz</span><br></pre></td></tr></table></figure><p>执行安装:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cd otp_src_23.0/</span><br><span class="line"># ./configure --prefix=/usr/local/erlang --with-ssl -enable-threads -enable-smmp-support -enable-kernel-poll --enable-hipe --without-javac</span><br><span class="line"># make </span><br><span class="line"># make install</span><br></pre></td></tr></table></figure><p>安装erlang，运行./configure提示如下错误</p><p>configure: error: No curses library functions found</p><p>configure: error: /bin/sh ‘/home/jiayi/otp_src_18.2.1/erts/configure’ failed for erts</p><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><p><strong>yum -y install ncurses-devel</strong></p><p>然后./configure</p><p>make</p><p>make install</p><p>配置环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/profile</span><br><span class="line"></span><br><span class="line"># 最后一行添加以下内容：</span><br><span class="line">ERLANG_HOME=/usr/local/erlang</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$ERLANG_HOME/bin</span><br><span class="line"></span><br><span class="line">#保存并退出</span><br><span class="line">#以下命令生效配置</span><br><span class="line"># source /etc/profile</span><br></pre></td></tr></table></figure><p>验证erlang环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># erl</span><br></pre></td></tr></table></figure><p><img src="F:\java\01-重要部分：2021基础就业\05阶段：服务框架\上海05-服务框架\08.rabbitMQ\resources\rabbit安装教程\linux\media\01.png"></p><p>以上步骤就安装完了erlang的环境了！</p><h3 id="rabbitmq安装"><a href="#rabbitmq安装" class="headerlink" title="rabbitmq安装"></a>rabbitmq安装</h3><p>下载安装包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.6/rabbitmq-server-generic-unix-3.8.6.tar.xz</span><br></pre></td></tr></table></figure><p>解压下载的xz文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># xz -d rabbitmq-server-generic-unix-3.8.6.tar.xz</span><br><span class="line"># 生成的rabbitmq-server-generic-unix-3.8.6.tar文件继续解压</span><br><span class="line"># tar -xvf rabbitmq-server-generic-unix-3.8.6.tar</span><br></pre></td></tr></table></figure><p><img src="F:\java\01-重要部分：2021基础就业\05阶段：服务框架\上海05-服务框架\08.rabbitMQ\resources\rabbit安装教程\linux\media\02.png"></p><p>启用web管理界面：./rabbitmq-plugins enable rabbitmq_management</p><p><img src="F:\java\01-重要部分：2021基础就业\05阶段：服务框架\上海05-服务框架\08.rabbitMQ\resources\rabbit安装教程\linux\media\03.png"></p><p>如果出现{:query, :rabbit@server1, {:badrpc, :timeout}}错误，那么需要将主机名在hosts文件中进行配置本机的IP地址：</p><p><img src="F:\java\01-重要部分：2021基础就业\05阶段：服务框架\上海05-服务框架\08.rabbitMQ\resources\rabbit安装教程\linux\media\04.png"></p><p><img src="F:\java\01-重要部分：2021基础就业\05阶段：服务框架\上海05-服务框架\08.rabbitMQ\resources\rabbit安装教程\linux\media\05.png"></p><p>再次启用web管理：</p><p><img src="F:\java\01-重要部分：2021基础就业\05阶段：服务框架\上海05-服务框架\08.rabbitMQ\resources\rabbit安装教程\linux\media\06.png"></p><p>启动rabbitmq:</p><p>./rabbitmq-server -detached</p><p>访问控制台：</p><p><a href="http://192.168.148.139:15672/">http://192.168.148.139:15672/</a></p><p><img src="F:\java\01-重要部分：2021基础就业\05阶段：服务框架\上海05-服务框架\08.rabbitMQ\resources\rabbit安装教程\linux\media\07.png"></p><p>使用guest/guest访问：</p><p><img src="F:\java\01-重要部分：2021基础就业\05阶段：服务框架\上海05-服务框架\08.rabbitMQ\resources\rabbit安装教程\linux\media\09.png"></p><p>guest从3.3版本开始就禁用访问了，咋们可以添加一个用户然后设置权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 添加一个用户admin 密码是 admin</span><br><span class="line"># ./rabbitmqctl add_user admin admin</span><br><span class="line"># ./rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><p><img src="F:\java\01-重要部分：2021基础就业\05阶段：服务框架\上海05-服务框架\08.rabbitMQ\resources\rabbit安装教程\linux\media\10.png"></p><p><img src="F:\java\01-重要部分：2021基础就业\05阶段：服务框架\上海05-服务框架\08.rabbitMQ\resources\rabbit安装教程\linux\media\11.png"></p><p><font color="red"><strong>注意：</strong></font>如果访问不了，出现以下错误就需要检查防火墙是否关闭。</p><p><img src="F:\java\01-重要部分：2021基础就业\05阶段：服务框架\上海05-服务框架\08.rabbitMQ\resources\rabbit安装教程\linux\media\08.png"></p><h3 id="linux防火墙关闭-centos7"><a href="#linux防火墙关闭-centos7" class="headerlink" title="linux防火墙关闭(centos7)"></a>linux防火墙关闭(centos7)</h3><p>1:查看防火墙状态</p><p>systemctl status firewalld</p><p>2:停止防火墙</p><p>systemctl stop firewalld.service</p><p>3:禁止开机启动</p><p>systemctl disable firewalld.service </p><p>4:重启防火墙</p><p>systemctl enable firewalld</p><p><strong>3 Docker方式安装并且运行rabbitMQ</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=leyou \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=<span class="number">123321</span> \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p <span class="number">15672</span>:<span class="number">15672</span> \</span><br><span class="line"> -p <span class="number">5672</span>:<span class="number">5672</span> \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:<span class="number">3</span>-management</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux和docker版没有内置账号,需要自己手动设置</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第二章-RabbitMQ下载与安装&quot;&gt;&lt;a href=&quot;#第二章-RabbitMQ下载与安装&quot; class=&quot;headerlink&quot; title=&quot;第二章 RabbitMQ下载与安装&quot;&gt;&lt;/a&gt;第二章 RabbitMQ下载与安装&lt;/h2&gt;&lt;h3 id=&quot;2-1-下</summary>
      
    
    
    
    <category term="RabbitMQ" scheme="http://example.com/categories/RabbitMQ/"/>
    
    
    <category term="RabbitMQ" scheme="http://example.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="http://example.com/2022/05/31/RabbitMQ/"/>
    <id>http://example.com/2022/05/31/RabbitMQ/</id>
    <published>2022-05-31T03:27:28.000Z</published>
    <updated>2022-05-31T03:56:44.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-MQ概述"><a href="#第一章-MQ概述" class="headerlink" title="第一章 MQ概述"></a>第一章 MQ概述</h1><h2 id="1-1-什么是MQ"><a href="#1-1-什么是MQ" class="headerlink" title="1.1.什么是MQ"></a>1.1.什么是MQ</h2><p>MQ全称 <strong>Message Queue(消息队列)</strong> , 是在消息的传输过程中<strong>保存消息的容器</strong>. 多用于分布式系统之间进行通信.</p><p>消息队列是典型例子: <strong>生产者消费者模型.</strong></p><p>A系统向B系统发送消息, A系统先将消息一条一条存放到MQ中, B系统从MQ中一条一条读取消息</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122194125554.png" alt="image-20201122194125554"><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201123091502006.png" alt="image-20201123091502006"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MQ,消息队列, 存储消息的中间件</span><br><span class="line">分布式系统通信方式: </span><br><span class="line"><span class="number">1</span> 直接远程调用 </span><br><span class="line"><span class="number">2</span> 借助第三方完成间接通信</span><br><span class="line">发送方称为生产者, 接收方称为消费者</span><br></pre></td></tr></table></figure><h2 id="1-2-MQ的优势和劣势"><a href="#1-2-MQ的优势和劣势" class="headerlink" title="1.2 MQ的优势和劣势"></a>1.2 MQ的优势和劣势</h2><h3 id="1-2-1-MQ的优势"><a href="#1-2-1-MQ的优势" class="headerlink" title="1.2.1 MQ的优势"></a>1.2.1 MQ的优势</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 应用解耦（可以异步发送信息请求）</span><br><span class="line"><span class="number">2</span> 快速应用变更与维护（支持集群）</span><br><span class="line"><span class="number">3</span> 削峰填谷 （访问超过目标服务器的处理速度，那就按照目标服务器的极限速度进行处理）</span><br></pre></td></tr></table></figure><h4 id="1-应用解耦"><a href="#1-应用解耦" class="headerlink" title="1 应用解耦"></a>1 应用解耦</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">订单系统依赖 ---&gt; 库存系统,支付系统,物流系统</span><br><span class="line">当库存系统出现问题时,导致订单系统没有办法正常工作.</span><br><span class="line">  </span><br><span class="line">系统耦合性越高, 容错性就越低, 可维护性也就越低.</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122195130351.png" alt="image-20201122195130351"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用MQ使得应用解耦,提升容错性和可维护性.</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122195308230.png" alt="image-20201122195308230"></p><h4 id="2-异步提速"><a href="#2-异步提速" class="headerlink" title="2 异步提速"></a>2 异步提速</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个下单操作需要耗时: <span class="number">20</span> + <span class="number">300</span> + <span class="number">300</span> + <span class="number">300</span> = <span class="number">920</span></span><br><span class="line">执行效率太慢</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122195651775.png" alt="image-20201122195651775"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户点击下单按钮时,后台只需要将信息写入数据库,并将消息存入MQ,响应给客户端即可</span><br><span class="line">真正处理的时间用户时感知不到了.</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122195912997.png" alt="image-20201122195912997"></p><h4 id="3-削峰填谷"><a href="#3-削峰填谷" class="headerlink" title="3 削峰填谷"></a>3 削峰填谷</h4><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122200036139.png" alt="image-20201122200036139"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122200105031.png" alt="image-20201122200105031"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用了MQ之后, 限制消费消息的速度为<span class="number">1000</span>, 这样以来, 高峰期产生的数据势必会被积压在MQ中, 高峰期就给<span class="string">&quot;削&quot;</span>掉了, </span><br><span class="line">但是因为消息积压, 在高峰期过后的一段时间内, 消费消息的速度还是会维持在<span class="number">1000</span>, 直到消费完积压的消息, 这就是<span class="string">&quot;填谷&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122200151829.png" alt="image-20201122200151829"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">应用解耦: 提高系统容错性和可维护性</span><br><span class="line">异步提速: 提升用户体验和系统吞吐量</span><br><span class="line">削峰填谷: 增加系统稳定性</span><br></pre></td></tr></table></figure><h3 id="1-2-2-MQ的劣势"><a href="#1-2-2-MQ的劣势" class="headerlink" title="1.2.2 MQ的劣势"></a>1.2.2 MQ的劣势</h3><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122201936018.png" alt="image-20201122201936018"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 系统可用性降低:</span><br><span class="line">系统引入的外部依赖越多,系统的稳定性越差. 一旦MQ宕机, 将会对业务造成影响. </span><br><span class="line"><span class="number">2</span> 系统复杂度提高:</span><br><span class="line">MQ的加入大大增加了系统的复杂度, 以前系统之间是同步的远程调用, 现在是通过MQ进行异步调用. </span><br><span class="line">    如何保证消息没有被重复消费? 怎么处理消息丢失情况? 怎么保证消息传递的顺序性? </span><br><span class="line"><span class="number">3</span> 一致性问题:</span><br><span class="line">A系统处理完业务, 通过MQ给B,C,D三个系统发数据, 如果B系统,C系统处理成功, D系统处理失败. </span><br><span class="line">    如何保证消息数据处理的一致性?</span><br></pre></td></tr></table></figure><h3 id="1-2-3-MQ小结"><a href="#1-2-3-MQ小结" class="headerlink" title="1.2.3 MQ小结"></a>1.2.3 MQ小结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">既然MQ有优势也有劣势, 那么使用MQ需要满足什么条件呢?</span><br><span class="line"><span class="number">1.</span>生产者不需要从消费者处获取反馈. 引入消息队列之前的直接调用,其接口返回值必须为空.这样上层才能继续往后执行.</span><br><span class="line"><span class="number">2.</span>允许短暂的不一致性</span><br><span class="line"><span class="number">3.</span>确实是用了有效果. 既解耦,提速,削峰这些方法的收益,超过加入MQ,管理MQ的成本.</span><br></pre></td></tr></table></figure><h2 id="1-3-常见的MQ产品"><a href="#1-3-常见的MQ产品" class="headerlink" title="1.3 常见的MQ产品"></a>1.3 常见的MQ产品</h2><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122201358945.png" alt="image-20201122201358945"></p><h2 id="1-4-AMQP和JMS"><a href="#1-4-AMQP和JMS" class="headerlink" title="1.4 AMQP和JMS"></a>1.4 AMQP和JMS</h2><h3 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h3><p>AMQP, 既<strong>Advanced Message Queuing Protocol(高级消息队列协议)</strong>, 是一个网络协议, 是应用层协议的一个开发标准, 为面向消息的中间件设计. 基于此协议的客户端与消息中间件就可以传递消息了. 2006年,AMQP规范发布. 类似HTTP.</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122223753472.png" alt="image-20201122223753472"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201123103039508.png" alt="image-20201123103039508"></p><h3 id="JMS-了解"><a href="#JMS-了解" class="headerlink" title="JMS(了解)"></a>JMS(了解)</h3><p>JMS 既 Java消息服务(JavaMessage Service) 应用程序接口, 是一个java平台中关于面向消息中间件的API.</p><p>JMS是JavaEE 13种规范中的一种, 类比JDBC.</p><p>很多消息中间件都实现了JMS规范, 例如: ActiveMQ.</p><p>RabbitMQ官方没有提供JMS的实现包, 但是开源社区有相关实现.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AMQP是协议,是消息中间件通讯的协议, 类比HTTP</span><br><span class="line">JMS是API规范接口,类比JDBC</span><br></pre></td></tr></table></figure><h2 id="1-5-RabbitMQ简介"><a href="#1-5-RabbitMQ简介" class="headerlink" title="1.5 RabbitMQ简介"></a>1.5 RabbitMQ简介</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>2007年, Rabbit技术公司基于AMQP标准开发的RabbitMQ1.0版本发布了. RabbitMQ采用Erlang语言开发.Erlang语言是针开发高并发和分布式系统的一种语言, 在电信领域应用广泛.</p><p>RabbitMQ是基于AMQP的一款消息管理系统</p><p>官网： <a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p><p>官方教程：<a href="http://www.rabbitmq.com/getstarted.html">http://www.rabbitmq.com/getstarted.html</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122211225425.png" alt="image-20201122211225425"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201123105057894.png" alt="image-20201123105057894"></p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122211433093.png" alt="image-20201122211433093"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201122211449618.png" alt="image-20201122211449618"></p><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p>RabbitMQ提供了6种消息模型，但是第6种其实是RPC，并不是MQ，因此不予学习。那么也就剩下5种。</p><p>但是其实3、4、5这三种都属于订阅模型，只不过进行路由的方式不同。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527068544487.png" alt="1527068544487"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">rabbitMQ下载方式</span>: <span class="string">windows Linux mac docker</span></span><br><span class="line"><span class="meta">rabbitMQ工作模式</span>: <span class="string">如上几种</span></span><br><span class="line"><span class="meta">rabbitMQ相关概念</span>:<span class="string"></span></span><br><span class="line"><span class="attr">Broker</span>: <span class="string">代理,指rabbitMQ服务器</span></span><br><span class="line"><span class="meta">虚拟机</span>: <span class="string">相当于mysql的Database</span></span><br><span class="line"><span class="meta">交换机</span>: <span class="string">判断消息类型,分发消息到不同的队列中</span></span><br><span class="line"><span class="meta">队列</span>: <span class="string">存放消息的最终位置</span></span><br><span class="line"><span class="attr">Connection</span>: <span class="string">连接</span></span><br><span class="line"><span class="attr">channel</span>: <span class="string">通道/甬道</span></span><br><span class="line"><span class="meta">生成者</span>: <span class="string">往MQ中存放消息的一方</span></span><br><span class="line"><span class="meta">消费者</span>: <span class="string">从MQ中拉取消息的一方</span></span><br></pre></td></tr></table></figure><h1 id="第二章-RabbitMQ下载与安装"><a href="#第二章-RabbitMQ下载与安装" class="headerlink" title="第二章 RabbitMQ下载与安装"></a>第二章 RabbitMQ下载与安装</h1><h2 id="2-1-下载与安装"><a href="#2-1-下载与安装" class="headerlink" title="2.1 下载与安装"></a>2.1 下载与安装</h2><p>官网下载地址：<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a></p><p>快速入门地址：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p><p>详细下载安装请参考如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>注意，管理界面端口跟连接端口不是同一个端口哦。</p><h2 id="2-2-使用管理界面"><a href="#2-2-使用管理界面" class="headerlink" title="2.2 使用管理界面"></a>2.2 使用管理界面</h2><h3 id="1）界面总览"><a href="#1）界面总览" class="headerlink" title="1）界面总览"></a>1）界面总览</h3><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1570592912783.png" alt="1570592912783"></p><h3 id="2）用户权限管理"><a href="#2）用户权限管理" class="headerlink" title="2）用户权限管理"></a>2）用户权限管理</h3><p>我们新建的itcast用户，不具备访问权限，如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1569411819639.png" alt="1569411819639"></p><p>我们需要添加对virtual hosts的访问权限，点击itcast用户，进入用户管理界面，然后添加权限：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1569411896139.png" alt="1569411896139"></p><p>添加权限以后，可以看到用户已经具备了访问权：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1569411955659.png" alt="1569411955659"> </p><p><strong>Docker方式安装并且运行rabbitMQ</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=leyou \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=<span class="number">123321</span> \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p <span class="number">15672</span>:<span class="number">15672</span> \</span><br><span class="line"> -p <span class="number">5672</span>:<span class="number">5672</span> \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:<span class="number">3</span>-management</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第三章-RabbitMQ开发"><a href="#第三章-RabbitMQ开发" class="headerlink" title="第三章 RabbitMQ开发"></a>第三章 RabbitMQ开发</h1><h2 id="3-1-Rabbit快速入门"><a href="#3-1-Rabbit快速入门" class="headerlink" title="3.1 Rabbit快速入门"></a>3.1 Rabbit快速入门</h2><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527070619131.png" alt="1527070619131"></p><h3 id="需求"><a href="#需求" class="headerlink" title="需求:"></a>需求:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用简单模式完消息传递</span><br></pre></td></tr></table></figure><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建工程(生产者,消费者)</span><br><span class="line"><span class="number">2.</span>分别添加依赖</span><br><span class="line"><span class="number">3.</span>编写生产者发送消息</span><br><span class="line"><span class="number">4.</span>编写消费者接收消息</span><br></pre></td></tr></table></figure><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者:"></a>生产者:</h3><p>创建工程时要<strong>先在管理页面上建立对应的虚拟机，且虚拟机要以/开头</strong>，然后代码链接时填入虚拟机名称。</p><p><strong>多个用户可以对应一个虚拟机</strong>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">总结：</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">1.创建连接的工厂对象</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">2.设置连接参数</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">3.通过工厂获取连接</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">4.创建通道，channel  使用通道才能完成消息相关的操作</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">5.使用通道创建队列</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">6. 定义发送到mq的消息内容</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">7.关闭通道和连接</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span>消息的生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Provider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>1.创建连接的工厂对象</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>2.设置连接参数</span></span><br><span class="line">        <span class="comment">//设置服务地址,默认localhost</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.190.153&quot;</span>);</span><br><span class="line">        <span class="comment">//设置端口,默认5672</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置账号信息，用户名、密码、虚拟机</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima129&quot;</span>);  <span class="comment">//   先在 web  管理平台创建虚拟机</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;leyou&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>3.通过工厂获取连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>4.创建通道，channel  使用通道才能完成消息相关的操作</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>5.使用通道创建队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         参数:</span></span><br><span class="line"><span class="comment">         参数1.queue 队列名称</span></span><br><span class="line"><span class="comment">         参数2.durable 是否持久化,当MQ重启后是否存在</span></span><br><span class="line"><span class="comment">         参数3.exclusive</span></span><br><span class="line"><span class="comment">            是否独占. 只能有一个消费者监听此队列</span></span><br><span class="line"><span class="comment">         参数4.autoDelete 是否自动删除, 没有consumer时自动删除</span></span><br><span class="line"><span class="comment">         参数5.arguments 其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 如果没有名称叫做hello_world的对象则创建,如果有则不创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello_world&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>6. 定义发送到mq的消息内容</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            String message = <span class="string">&quot;Hello RabbitMQ! &quot;</span>+i;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)</span></span><br><span class="line"><span class="comment">             * 参数1: exchange 交换机名称,简单模式下使用默认的 写&quot;&quot;即可</span></span><br><span class="line"><span class="comment">             * 参数2: routingKey 路由名称</span></span><br><span class="line"><span class="comment">             *      当前没有交换机,我们直接指定队列</span></span><br><span class="line"><span class="comment">             * 参数3: props 配置信息</span></span><br><span class="line"><span class="comment">             * 参数4: body 发送的消息数据</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello_world&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;发布消息成功...&quot;</span>);</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>7.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者:"></a>消费者:</h3><p>跟生产者代码相同，只是监控拉取时不同</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TODO</span>:<span class="string">消息的消费者</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">2.设置参数</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">3.获取连接</span></span><br><span class="line"><span class="attr">TODO</span>:<span class="string">4.创建通道</span></span><br><span class="line"><span class="attr">TODO5</span>:<span class="string">找到队列(订阅队列)</span></span><br><span class="line"><span class="attr">TODO6</span>:<span class="string">创建消费者对象</span></span><br><span class="line"><span class="attr">当目标队列中有数据时,调用此消费者进行消费</span></span><br><span class="line"><span class="attr">TODO7</span>:<span class="string">消费(监听)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span>消息的消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>1.创建连接工厂对象</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.190.153&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima129&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;leyou&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>3.获取连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>4.创建通道</span></span><br><span class="line">        TODO:找到队列(订阅队列)</span><br><span class="line">            TODO:创建消费者对象</span><br><span class="line">        <span class="comment">// 当目标队列中有数据时,调用此消费者进行消费</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>找到队列(订阅队列)</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1: 队列名称</span></span><br><span class="line"><span class="comment">         * 参数2: 是否持久化</span></span><br><span class="line"><span class="comment">         * 参数3: 是否独有</span></span><br><span class="line"><span class="comment">         * 参数4: 是否自动删除</span></span><br><span class="line"><span class="comment">         * 参数5: 其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello_world&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>创建消费者对象</span></span><br><span class="line">        <span class="comment">// 当目标队列中有数据时,调用此消费者进行消费</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 回调交付</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag 标记</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope 获取一些信息,交换机,路由</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties 配置信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body 从队列中获取的数据</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;唯一标识: &quot;+consumerTag);</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;数据: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">                    <span class="comment">// 获取交换机信息</span></span><br><span class="line">                    <span class="comment">//System.out.println(&quot;交换机: &quot;+envelope.getExchange());</span></span><br><span class="line">                    <span class="comment">//System.out.println(&quot;routingkey: &quot;+envelope.getRoutingKey());</span></span><br><span class="line">                    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">                    <span class="comment">// 手动确认: 交付成功,确认交付</span></span><br><span class="line">                    <span class="comment">// 删除当前的数据  false : 单个删除</span></span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// 如果程序出现了异常,将取出的归还</span></span><br><span class="line">                    <span class="comment">// 参数1: 确认字符串  参数2: 是否批量处理 参数3: 当前消费失败时,将消息重新存放到队列中</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 消费(监听)</span></span><br><span class="line">        <span class="comment">// 参数1: 队列的名称</span></span><br><span class="line">        <span class="comment">// 参数2: 是否自动确认(一旦自动确认,该数据就会从队列中移除)</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;hello_world&quot;</span>,<span class="keyword">false</span>,consumer);</span><br><span class="line">        <span class="comment">// 阻塞线程</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>官方文档说明：</p><blockquote><p>RabbitMQ是一个<strong>消息的代理者</strong>（Message Broker）：它接收消息并且传递消息。</p><p>你可以认为它是一个邮局：当你投递邮件到一个邮箱，你很肯定邮递员会终究会将邮件递交给你的收件人。与此类似，RabbitMQ 可以是一个邮箱、邮局、同时还有邮递员。</p><p>不同之处在于：RabbitMQ不是传递纸质邮件，而是二进制的数据</p></blockquote><p>基本消息模型图：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527070619131.png" alt="1527070619131"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在上图的模型中，有以下概念：</span><br><span class="line">- P：生产者，也就是要发送消息的程序</span><br><span class="line">- C：消费者：消息的接受者，会一直等待消息到来。</span><br><span class="line">- queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</span><br></pre></td></tr></table></figure><h2 id="3-2-work消息模型"><a href="#3-2-work消息模型" class="headerlink" title="3.2 work消息模型"></a>3.2 work消息模型</h2><h3 id="3-2-1-说明"><a href="#3-2-1-说明" class="headerlink" title="3.2.1.说明"></a>3.2.1.说明</h3><p>在刚才的基本模型中，一个生产者，一个消费者，生产的消息直接被消费者消费。比较简单。</p><p><strong>Work queues，也被称为（Task queues），任务模型</strong>。</p><p>当消息处理比较耗时的时候，可能<strong>生产消息的速度会远远大于消息的消费速度</strong>。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型：<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。队列中的<strong>消息一旦消费，就会消失，因此任务是不会被重复执行的</strong>。</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527078437166-1606061246692.png" alt="1527078437166"></p><p>角色：</p><ul><li>P：生产者：任务的发布者</li><li>C1：消费者，领取任务并且完成任务，假设完成速度较慢</li><li>C2：消费者2：领取任务并完成任务，假设完成速度快</li></ul><h3 id="3-2-2-生产者"><a href="#3-2-2-生产者" class="headerlink" title="3.2.2.生产者"></a>3.2.2.生产者</h3><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工具类封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>1.创建连接工厂对象</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.190.153&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima129&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;leyou&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>3.获取连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生产者与模式1中的几乎一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.task_queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息生成者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         queueDeclare(String queue, boolean durable, boolean exclusive,</span></span><br><span class="line"><span class="comment">                    boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         参数:</span></span><br><span class="line"><span class="comment">             参数1.queue 队列名称</span></span><br><span class="line"><span class="comment">             参数2.durable 是否持久化,当MQ重启后是否存在</span></span><br><span class="line"><span class="comment">             参数3.exclusive</span></span><br><span class="line"><span class="comment">                    是否独占. 只能有一个消费者监听此队列</span></span><br><span class="line"><span class="comment">             参数4.autoDelete 是否自动删除, 没有consumer时自动删除</span></span><br><span class="line"><span class="comment">             参数5.arguments 其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 当前方法执行完后,如果有队列就使用对应的队列</span></span><br><span class="line">        <span class="comment">// 如果没有则创建一个队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work-queue&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 循环发布任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 消息内容</span></span><br><span class="line">            String message = <span class="string">&quot;task .. &quot;</span> + i;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;work-queue&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot; 发布了 &quot;</span> + message + <span class="string">&quot; ... &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们循环发送50条消息。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599876563452.png" alt="1599876563452"> </p><h3 id="3-2-3-消费者"><a href="#3-2-3-消费者" class="headerlink" title="3.2.3.消费者"></a>3.2.3.消费者</h3><p><strong>消费者</strong>1： 睡一秒 较慢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.task_queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work-queue&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);   <span class="comment">// 设置每一个消费者 同时只能处理一个消息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                    System.out.println(<span class="string">&quot; [消费者1] 消费了 : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    <span class="comment">// 手动ACK</span></span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列。</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work-queue&quot;</span>, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>消费者2</strong>:   较快一方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.task_queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo2_2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work-queue&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);   <span class="comment">// 设置每一个消费者 同时只能处理一个消息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                    <span class="comment">//Thread.sleep(1000);</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; [消费者2] 消费了 : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    <span class="comment">// 手动ACK</span></span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列。</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work-queue&quot;</span>, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与消费者1基本类似，就是<strong>没有设置消费耗时时间</strong>。</p><p>这里是模拟有些消费者快，有些比较慢。</p><p>接下来，两个消费者一同启动，然后发送50条消息：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527085826462.png" alt="1527085826462"></p><p>可以发现，<strong>两个消费者各自消费了25条消息</strong>，而且各不相同，这就实现了任务的分发。</p><h3 id="3-2-4-能者多劳原则"><a href="#3-2-4-能者多劳原则" class="headerlink" title="3.2.4.能者多劳原则"></a>3.2.4.能者多劳原则</h3><p>刚才的实现有问题吗？</p><ul><li>消费者1比消费者2的效率要低，一次任务的耗时较长</li><li>然而<strong>两人最终消费的消息数量是一样的</strong></li><li><strong>消费者2大量时间处于空闲状态，消费者1一直忙碌</strong></li></ul><p>现在的状态属于是把任务平均分配，正确的做法应该是<strong>消费越快的人，消费的越多</strong>。</p><p>怎么实现呢？</p><p>我们可以<strong>修改设置，让消费者同一时间只接收一条消息，这样处理完成之前，就不会接收更多消息，就可以让处理快的人，接收更多消息</strong> ：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527086103576.png" alt="1527086103576"> </p><p>再次测试：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527086159534.png" alt="1527086159534"></p><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MQ: 消息队列</span><br><span class="line">  消息在传输过程中保存消息的容器.主要使用在分布式环境下</span><br><span class="line">  MQ优势:</span><br><span class="line">    应用解耦</span><br><span class="line">    快速应用变更与维护</span><br><span class="line">    削峰填谷</span><br><span class="line">  MQ劣势:</span><br><span class="line">    可用性降低</span><br><span class="line">    系统复杂度提高</span><br><span class="line">    短时间内无法保证一致性</span><br><span class="line">  在什么情况下使用MQ?</span><br><span class="line">    访问的服务无返回值的情况下</span><br><span class="line">    允许短暂性不一致的情况下</span><br><span class="line">    使用MQ的优势大于维护成本</span><br><span class="line">AMQP协议: 高级消息队列协议,约束消息生产者和消费者与MQ传递数据时的规范</span><br><span class="line">    生产者 ----&gt;  交换机 ----&gt; 路由 ----&gt; 队列 &lt;---- 消费者</span><br><span class="line">    </span><br><span class="line">JMS: java提供的操作消息中间件的API</span><br><span class="line">    </span><br><span class="line">RabbitMQ概述:</span><br><span class="line">erlang语言基于AMQP协议开发的一个消息队列软件.</span><br><span class="line">    五种工作机制:</span><br><span class="line"><span class="number">1</span> 直连式:生产者 ----&gt; 队列 &lt;---- 消费者</span><br><span class="line"><span class="number">2</span> work模式(任务模式):生产者 ----&gt; 队列 &lt;---- 多个消费者(平分队列中的消息)</span><br><span class="line"><span class="number">3</span> 订阅模式:</span><br><span class="line"><span class="number">4</span> 路由模式:</span><br><span class="line"><span class="number">5</span> topics: </span><br></pre></td></tr></table></figure><h2 id="3-3-订阅模型分类"><a href="#3-3-订阅模型分类" class="headerlink" title="3.3 订阅模型分类"></a>3.3 订阅模型分类</h2><p>订阅模型示意图：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527086284940.png" alt="1527086284940"></p><p>前面2个案例中，只有3个角色：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><p>而在订阅模型中<strong>，多了一个exchange角色</strong>，而且过程略有变化：</p><ul><li>P：生产者，也就是要发送消息的程序，但是<strong>不再发送到队列中，而是发给X（交换机</strong>）</li><li>C：消费者，消息的接受者，会一直等待消息到来。</li><li>Queue：消息队列，接收消息、缓存消息。</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个<strong>特别队列、递交给所有队列、或是将消息丢弃</strong>。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul><li><strong>Fanout：广播，</strong>将消息交给所有绑定到交换机的队列</li><li><strong>Direct：定向</strong>，把消息交给符合指定routing key 的队列</li><li><strong>Topic：通配符</strong>，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="3-4-广播模型-Fanout"><a href="#3-4-广播模型-Fanout" class="headerlink" title="3.4.广播模型-Fanout"></a>3.4.广播模型-Fanout</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p><h3 id="3-4-1-流程说明"><a href="#3-4-1-流程说明" class="headerlink" title="3.4.1.流程说明"></a>3.4.1.流程说明</h3><p>流程图：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527086564505.png" alt="1527086564505"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1）  可以有多个消费者</li><li>2）  每个<strong>消费者有自己的queue</strong>（队列）</li><li>3）  每个<strong>队列都要绑定到Exchange</strong>（交换机）</li><li>4）  <strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li><li>5）  交换机把消息发送给绑定过的所有队列</li><li>6）  队列的消费者都能拿到消息。<strong>实现一条消息被多个消费者消费</strong></li></ul><h3 id="3-4-2-生产者"><a href="#3-4-2-生产者" class="headerlink" title="3.4.2.生产者"></a>3.4.2.生产者</h3><p>两个变化：</p><ul><li><strong>1）  声明Exchange，不再声明Queue</strong></li><li><strong>2）  发送消息到Exchange，不再发送到Queue</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.声明交换器和队列</span></span><br><span class="line">        String exchangeName = <span class="string">&quot;exchange-fanout&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName,<span class="string">&quot;fanout&quot;</span>,<span class="keyword">true</span>); <span class="comment">//扇形交换机类型-fanout</span></span><br><span class="line">        <span class="comment">//  创建多个队列</span></span><br><span class="line">        String fanoutQueue1 = <span class="string">&quot;fanout_queue1&quot;</span>;</span><br><span class="line">        <span class="comment">//队列1</span></span><br><span class="line">        channel.queueDeclare(fanoutQueue1, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//队列2</span></span><br><span class="line">        String fanoutQueue2 = <span class="string">&quot;fanout_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(fanoutQueue2, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.同一个交换机与2个队列绑定   参数3： 扇出形式 不需要路由规则   两个队列都会接受到生产投递的消息</span></span><br><span class="line">        channel.queueBind(fanoutQueue1,exchangeName,<span class="string">&quot;&quot;</span>);<span class="comment">//绑定第一个队列</span></span><br><span class="line">        channel.queueBind(fanoutQueue2,exchangeName,<span class="string">&quot;&quot;</span>);<span class="comment">//绑定第二个队列</span></span><br><span class="line">        <span class="comment">//5.生产消息</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;hello fanout!&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.关闭channel和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599880559042.png" alt="1599880559042"> </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599880583045.png" alt="1599880583045"> </p><p>扇出方式（<strong>广播）  两个队列都会接受交换机 传递过来的消息</strong>！</p><h3 id="3-4-3-消费者"><a href="#3-4-3-消费者" class="headerlink" title="3.4.3.消费者"></a>3.4.3.消费者</h3><p>消费者1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConsumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 队列名称</span></span><br><span class="line">        String queueName = <span class="string">&quot;fanout_queue1&quot;</span>;</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(queueName, <span class="string">&quot;exchange-fanout&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line"><span class="comment">//                    System.out.println(1/0); // 模拟异常  表示消息未正常处理</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; fanout-consumer 1 : [x] received : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//  代码没有异常 手动通知队列 删除消息即可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();  <span class="comment">//  第三个参数  false  直接删除消息   true  表示 ：把消息重回队列</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 5. 监听队列，第二个参数：是否自动进行消息确认。 false 告诉队列不要删除消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要注意代码中：<strong>队列需要和交换机绑定</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 队列名称</span></span><br><span class="line">String queueName = <span class="string">&quot;fanout_queue1&quot;</span>;</span><br><span class="line"><span class="comment">// 绑定队列到交换机</span></span><br><span class="line">channel.queueBind(queueName, <span class="string">&quot;exchange-fanout&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConsumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 队列名称</span></span><br><span class="line">        String queueName = <span class="string">&quot;fanout_queue2&quot;</span>;</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(queueName, <span class="string">&quot;exchange-fanout&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line"><span class="comment">//                    System.out.println(1/0); // 模拟异常  表示消息未正常处理</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; fanout-consumer 2 : [x] received : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//  代码没有异常 手动通知队列 删除消息即可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();  <span class="comment">//  第三个参数  false  直接删除消息   true  表示 ：把消息重回队列</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 5. 监听队列，第二个参数：是否自动进行消息确认。 false 告诉队列不要删除消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试： 先启动生产者发送消息</p><p>然后 我们再运行消费者1，然后再运行消费者2：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599881321174.png" alt="1599881321174"> </p><p>扇出方式： 两个队列彼此独立，互不干扰！  ，<strong>消费者绑定那个队列的数据，就只消费哪条队列的数据</strong></p><h2 id="3-5-定向模型-Direct"><a href="#3-5-定向模型-Direct" class="headerlink" title="3.5.定向模型-Direct"></a>3.5.定向模型-Direct</h2><h3 id="3-5-1-说明"><a href="#3-5-1-说明" class="headerlink" title="3.5.1.说明"></a>3.5.1.说明</h3><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们<strong>希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange</strong>。</p><p> 在Direct模型下：</p><ul><li>1 队列与交换机的绑定，<strong>不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</strong></li><li>2 <strong>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</strong></li><li>3 Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，<strong>只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</strong></li></ul><p>流程图：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527087677192.png" alt="1527087677192"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><h3 id="3-5-2-生产者"><a href="#3-5-2-生产者" class="headerlink" title="3.5.2.生产者"></a>3.5.2.生产者</h3><p>此处我们模拟商品的增删改，发送消息的RoutingKey分别是：insert、update、delete</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3.声明交换器和队列</span></span><br><span class="line">        String exchangeName = <span class="string">&quot;exchange-direct&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName,<span class="string">&quot;direct&quot;</span>,<span class="keyword">false</span>); <span class="comment">//交换机类型-direct</span></span><br><span class="line">        <span class="comment">//  创建2个队列</span></span><br><span class="line">        <span class="comment">//队列1</span></span><br><span class="line">        String directQueue1 = <span class="string">&quot;direct_queue1&quot;</span>;</span><br><span class="line">        channel.queueDeclare(directQueue1, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//队列2</span></span><br><span class="line">        String directQueue2 = <span class="string">&quot;direct_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(directQueue2, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.同一个交换机与2个队列绑定   参数3： 直连direct形式  定义路由规则   两个队列按照路由 接受对应的消息</span></span><br><span class="line">        <span class="comment">//##################交换机绑定队列时需要指明key</span></span><br><span class="line">        channel.queueBind(directQueue1,exchangeName,<span class="string">&quot;insert&quot;</span>);<span class="comment">//绑定第一个队列</span></span><br><span class="line">        channel.queueBind(directQueue2,exchangeName,<span class="string">&quot;delete&quot;</span>);<span class="comment">//绑定第二个队列</span></span><br><span class="line">        channel.queueBind(directQueue2,exchangeName,<span class="string">&quot;update&quot;</span>);<span class="comment">//绑定第二个队列</span></span><br><span class="line">        <span class="comment">//5.生产消息  向指定的队列投递消息##################发布消息给交换机时也需要指明key</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;insert&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;hello direct insert!&quot;</span>.getBytes());</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;delete&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;hello direct delete!&quot;</span>.getBytes());</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;update&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;hello direct update!&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭channel和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-消费者"><a href="#3-5-3-消费者" class="headerlink" title="3.5.3.消费者"></a>3.5.3.消费者</h3><p>我们此处假设消费者1只接收1种类型的消息：例如 接受添加商品信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo4;</span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectConsumer1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 队列名称  insert</span></span><br><span class="line">        String queueName = <span class="string">&quot;direct_queue1&quot;</span>;</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(queueName, <span class="string">&quot;exchange-direct&quot;</span>, <span class="string">&quot;insert&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line"><span class="comment">//                    System.out.println(1/0); // 模拟异常  表示消息未正常处理</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; direct-consumer 1 : [x] received : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//  代码没有异常 手动通知队列 删除消息即可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();  <span class="comment">//  第三个参数  false  直接删除消息   true  表示 ：把消息重回队列</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 5. 监听队列，第二个参数：是否自动进行消息确认。 false 告诉队列不要删除消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消费者2</p><p>我们此处假设消费者2接收2种类型的消息：更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo4;</span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectConsumer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 队列名称</span></span><br><span class="line">        String queueName2 = <span class="string">&quot;direct_queue2&quot;</span>;</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(queueName2, <span class="string">&quot;exchange-direct&quot;</span>, <span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        channel.queueBind(queueName2, <span class="string">&quot;exchange-direct&quot;</span>, <span class="string">&quot;update&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line"><span class="comment">//                    System.out.println(1/0); // 模拟异常  表示消息未正常处理</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; direct-consumer 2 : [x] received : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//  代码没有异常 手动通知队列 删除消息即可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();  <span class="comment">//  第三个参数  false  直接删除消息   true  表示 ：把消息重回队列</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 5. 监听队列，第二个参数：是否自动进行消息确认。 false 告诉队列不要删除消息</span></span><br><span class="line">        channel.basicConsume(queueName2, <span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-6-通配符模型-Topic"><a href="#3-6-通配符模型-Topic" class="headerlink" title="3.6.通配符模型-Topic"></a>3.6.通配符模型-Topic</h2><h3 id="3-6-1-说明"><a href="#3-6-1-说明" class="headerlink" title="3.6.1.说明"></a>3.6.1.说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><strong><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割</strong>，例如： <code>item.insert</code></p><p> 通配符规则：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">`#`：匹配一个或多个词</span></span><br><span class="line"><span class="attr">`*`：匹配不多不少恰好1个词</span></span><br></pre></td></tr></table></figure><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p><p><code>item.*</code>：只能匹配<code>item.spu</code></p><p>​     <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201123163445058.png" alt="image-20201123163445058"></p><p>图示：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527088518574.png" alt="1527088518574"></p><p>解释：</p><ul><li>红色Queue：绑定的是<code>usa.#</code> ，因此凡是以 <code>usa.</code>开头的<code>routing key</code> 都会被匹配到</li><li>黄色Queue：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配</li></ul><h3 id="3-6-2-生产者"><a href="#3-6-2-生产者" class="headerlink" title="3.6.2.生产者"></a>3.6.2.生产者</h3><p>使用topic类型的Exchange，发送消息的routing key </p><p><strong>注意：  此案例 先启动消费端  按照指定路由监听：  再启动服务端，再投递消息！</strong></p><p>可以根据  user.update      product.insert      user.insert  测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3.声明交换器和队列</span></span><br><span class="line">        <span class="comment">//3.声明交换器和队列</span></span><br><span class="line">        String exchangeName = <span class="string">&quot;exchange-topic&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName,<span class="string">&quot;topic&quot;</span>,<span class="keyword">false</span>); <span class="comment">//交换机类型-direct</span></span><br><span class="line">        <span class="comment">//  创建2个队列</span></span><br><span class="line">        <span class="comment">//队列1</span></span><br><span class="line">        String topicQueue1 = <span class="string">&quot;topic_queue1&quot;</span>;</span><br><span class="line">        channel.queueDeclare(topicQueue1, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//队列2</span></span><br><span class="line">        String topicQueue2 = <span class="string">&quot;topic_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(topicQueue2, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.同一个交换机与2个队列绑定   参数3： 直连direct形式  定义路由规则   两个队列按照路由 接受对应的消息</span></span><br><span class="line">        channel.queueBind(topicQueue1,exchangeName,<span class="string">&quot;abc.#&quot;</span>);<span class="comment">//绑定第一个队列</span></span><br><span class="line">        channel.queueBind(topicQueue2,exchangeName,<span class="string">&quot;#.hello&quot;</span>);<span class="comment">//绑定第二个队列</span></span><br><span class="line">        channel.queueBind(topicQueue2,exchangeName,<span class="string">&quot;*.world&quot;</span>);<span class="comment">//绑定第二个队列</span></span><br><span class="line">        <span class="comment">//5.生产消息  向指定的队列投递消息</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;abc.abc&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;abc前缀的值!&quot;</span>.getBytes());</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;abc.demo.hello&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;hello &quot;</span>.getBytes());</span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;update.world&quot;</span>, <span class="keyword">true</span>,<span class="keyword">null</span>,<span class="string">&quot;update_world!&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭channel和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-6-3-消费者1"><a href="#3-6-3-消费者1" class="headerlink" title="3.6.3.消费者1"></a>3.6.3.消费者1</h3><p>我们此处假设消费者1只接收的RoutingKey为 <code>user.#</code>，代表所有以user开头的key</p><p>注意： 本案例 ：交换机和队列 均由 消费者创建 ，生产者不创建 交换机和队列来演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5Consumer1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 队列名称  insert</span></span><br><span class="line">        String queueName = <span class="string">&quot;topic_queue1&quot;</span>;</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(queueName, <span class="string">&quot;exchange-topic&quot;</span>, <span class="string">&quot;abc.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line"><span class="comment">//                    System.out.println(1/0); // 模拟异常  表示消息未正常处理</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; 获取 : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//  代码没有异常 手动通知队列 删除消息即可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();  <span class="comment">//  第三个参数  false  直接删除消息   true  表示 ：把消息重回队列</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 5. 监听队列，第二个参数：是否自动进行消息确认。 false 告诉队列不要删除消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-6-4-消费者2"><a href="#3-6-4-消费者2" class="headerlink" title="3.6.4.消费者2"></a>3.6.4.消费者2</h3><p>我们此处假设消费者2接收的消息key：<code>*.insert</code>，与新增有关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5Consumer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 建立和mq的连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2. 从连接中创建通道，channel   使用通道才能完成消息相关的操作</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 队列名称  insert</span></span><br><span class="line">        String queueName = <span class="string">&quot;topic_queue2&quot;</span>;</span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(queueName, <span class="string">&quot;exchange-topic&quot;</span>, <span class="string">&quot;#.hello&quot;</span>);</span><br><span class="line">        channel.queueBind(queueName, <span class="string">&quot;exchange-topic&quot;</span>, <span class="string">&quot;*.world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// body 即消息体</span></span><br><span class="line">                    String msg = <span class="keyword">new</span> String(body);</span><br><span class="line"><span class="comment">//                    System.out.println(1/0); // 模拟异常  表示消息未正常处理</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; 获取 : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//  代码没有异常 手动通知队列 删除消息即可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();  <span class="comment">//  第三个参数  false  直接删除消息   true  表示 ：把消息重回队列</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 5. 监听队列，第二个参数：是否自动进行消息确认。 false 告诉队列不要删除消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-7-持久化"><a href="#3-7-持久化" class="headerlink" title="3.7.持久化"></a>3.7.持久化</h2><p>为了提高并发能力，<strong>MQ的数据默认是在内存中</strong>存储的，包括<strong>交换机、队列、消息</strong>。</p><p>这样就会出现数据安全问题，如果<strong>服务宕机，存储在MQ中未被消费的消息都会丢失</strong>。</p><p>所以我们需要<strong>将交换机、队列、消息持久化到硬盘，以防服务宕机</strong>。</p><p>交换机持久化：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527088933255.png" alt="1527088933255"></p><p>队列持久化：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527088960059.png" alt="1527088960059"></p><p>消息持久化：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527088984029.png" alt="1527088984029"></p><h1 id="第四章-SpringBoot-AMQP（重点掌握）"><a href="#第四章-SpringBoot-AMQP（重点掌握）" class="headerlink" title="第四章 SpringBoot AMQP（重点掌握）"></a>第四章 SpringBoot AMQP（重点掌握）</h1><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1.简介"></a>4.1.简介</h2><p>Sprin有很多不同的项目，其中就有对AMQP的支持：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527089338661.png" alt="1527089338661"></p><p>Spring AMQP的页面：<a href="http://projects.spring.io/spring-amqp/">http://projects.spring.io/spring-amqp/</a> </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1527089365281.png" alt="1527089365281"></p><p>注意这里一段描述：</p><blockquote><p>​     Spring-amqp是对AMQP协议的抽象实现，而spring-rabbit 是对协议的具体实现，也是目前的唯一实现。底层使用的就是RabbitMQ。</p></blockquote><h2 id="4-2-依赖和配置"><a href="#4-2-依赖和配置" class="headerlink" title="4.2.依赖和配置"></a>4.2.依赖和配置</h2><p>添加AMQP的启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>application.yml</code>中添加RabbitMQ地址：  手动在控制台 新建一个虚拟机  /heima</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">producer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br></pre></td></tr></table></figure><h2 id="4-3-快速入门"><a href="#4-3-快速入门" class="headerlink" title="4.3.快速入门"></a>4.3.快速入门</h2><p>我们以直连 direct 为例，看看Spring中如何发送消息、接收消息。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599889782488.png" alt="1599889782488"> </p><h3 id="4-3-1-生成者发送消息"><a href="#4-3-1-生成者发送消息" class="headerlink" title="4.3.1.生成者发送消息"></a>4.3.1.生成者发送消息</h3><p>Spring为AMQP提供了统一的消息处理模板：AmqpTemplate，非常方便的发送消息，其发送方法：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599899378264.png" alt="1599899378264"> </p><p>比较常用的3个方法，分别是：</p><ul><li>指定交换机、RoutingKey和消息体</li><li>指定消息(默认队列)</li><li>指定RoutingKey和消息，这里的RoutingKey其实是队列名称</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码如下：  向指定队列直接发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// rabbit客户端对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send/&#123;msg&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable(&quot;msg&quot;)</span> String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 参数1: 队列名称,操作的队列必须实现存在</span></span><br><span class="line">        <span class="comment">// 参数2: 存放的消息信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;boot-queue&quot;</span>,msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动main  浏览器 输入地址 ：</p><p><a href="http://localhost:8081/send">http://localhost:8081/send</a></p><p>结果：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599899718932.png" alt="1599899718932"></p><h3 id="4-3-2-接受消息"><a href="#4-3-2-接受消息" class="headerlink" title="4.3.2.接受消息"></a>4.3.2.接受消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;heima-queue&quot;)</span><span class="comment">//  注意只需要 队列名称一致即可！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String msg, Channel channel, Message message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//会话唯一ID</span></span><br><span class="line">        <span class="keyword">long</span> deliveryTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息id：&quot;</span> + deliveryTag);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;message:&quot;</span> +message.toString());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后查看日志：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599899772187.png" alt="1599899772187"> </p><p>springboot默认也是ack自动确认！</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599899784341.png" alt="1599899784341"></p><h2 id="4-4-消息转换器"><a href="#4-4-消息转换器" class="headerlink" title="4.4.消息转换器"></a>4.4.消息转换器</h2><p>之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20200525170410401.png" alt="image-20200525170410401"></p><p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。总所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>我们来测试一下。</p><h3 id="4-4-1-测试发送Java对象"><a href="#4-4-1-测试发送Java对象" class="headerlink" title="4.4.1.测试发送Java对象"></a>4.4.1.测试发送Java对象</h3><p>我们修改消息发送的代码，发送一个Map对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/sendMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSendMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;heima-queue&quot;</span>, msg);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;mapok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时关闭消费者的监听：</p><p>重新运行测试类。</p><p>然后在MQ的控制台可以查看到消息，如下：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599900081223.png" alt="1599900081223"> </p><h3 id="4-4-2-配置JSON转换器"><a href="#4-4-2-配置JSON转换器" class="headerlink" title="4.4.2.配置JSON转换器"></a>4.4.2.配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置消息转换器。</p><p>在启动类中添加一个Bean即可：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599900131536.png" alt="1599900131536"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动 再次查看结果</p><h3 id="4-4-3-测试"><a href="#4-4-3-测试" class="headerlink" title="4.4.3.测试"></a>4.4.3.测试</h3><p>再次发送消息，查看效果： </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599900288272.png" alt="1599900288272"> </p><p>此时，消费者也可以用Map来接收消息了：Map接受即可，消费者端 别忘记导入依赖：和转换器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">    public MessageConverter jsonMessageConverter()&#123;</span><br><span class="line">        // 创建JSON的消息转换器</span><br><span class="line">        return new Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>**<img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599900675393.png" alt="1599900675393"> **</p><p>结果：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1599900642675.png" alt="1599900642675"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20201123080006082.png" alt="image-20201123080006082"></p><h1 id="第五章-SpringBoot整合邮件发送"><a href="#第五章-SpringBoot整合邮件发送" class="headerlink" title="第五章 SpringBoot整合邮件发送"></a>第五章 SpringBoot整合邮件发送</h1><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/image-20210708162108584.png" alt="image-20210708162108584"></p><p>说明：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">最下面的几个箭头表示备份，</span></span><br><span class="line"><span class="attr">2</span> <span class="string">最上面的双向箭头中的向下箭头表示刷新，</span></span><br><span class="line"><span class="attr">强制查看有没有接受到邮箱，</span></span><br><span class="line"><span class="attr">自己不手动刷新，那么就是一定是刷新查看有没有邮箱到达</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-完成邮件的投递"><a href="#SpringBoot-完成邮件的投递" class="headerlink" title="SpringBoot 完成邮件的投递"></a>SpringBoot 完成邮件的投递</h2><p>准备工作： 登录自己的开通邮件的 以163为例      </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574189645.png" alt="1600574189645"> </p><p>生成自己唯一的授权码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/rabbitMQ/1600574220514.png" alt="1600574220514"> </p><ul><li>基于springboot环境导入email发送依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springboot邮件发送--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置邮件发送参数  yaml文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">##    邮件发送配置</span><br><span class="line">#  spring.mail.username=fanqixxxx@163.com</span><br><span class="line">#  #spring.mail.password   填写授权码</span><br><span class="line">#  spring.mail.password=xxxxxxx</span><br><span class="line">#  #spring.mail.host   填写邮箱供应的SMTP地址</span><br><span class="line">#  spring.mail.host=smtp.163.com</span><br><span class="line">#  spring.mail.properties.mail.smtp.ssl.enable=true</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="comment"># 发送者的邮箱地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xsitheima163@163.com</span></span><br><span class="line">  <span class="comment"># 此密码并非登录的密码,而是使用java代码发送邮件时使用的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">AKELOGXEFRJZOAWU</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>编写测试类 完成邮件发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailSend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            message.setSubject(<span class="string">&quot;传智健康官方邮件&quot;</span>);</span><br><span class="line">            message.setText(<span class="string">&quot;你好，请保持好验证码：7788，打死都不能泄露给你的同桌&quot;</span>);</span><br><span class="line">            message.setTo(<span class="string">&quot;tps520tps@163.com&quot;</span>);</span><br><span class="line">            message.setFrom(<span class="string">&quot;tps520wx@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MailException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查收邮件：</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/08.rabbitMQ/resources/img/1600574300195.png" alt="1600574300195"> </p><p>邮件发送示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendEmailApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            message.setSubject(<span class="string">&quot;表白邮件&quot;</span>);</span><br><span class="line">            message.setText(<span class="string">&quot;rose 你好, 我想.....&quot;</span>);</span><br><span class="line">            message.setTo(<span class="string">&quot;xsitheima126@126.com&quot;</span>);</span><br><span class="line">            message.setFrom(<span class="string">&quot;xsitheima163@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">            System.out.println(<span class="string">&quot;========发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MailException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="预备账号"><a href="#预备账号" class="headerlink" title="预备账号"></a>预备账号</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xsitheima126@<span class="number">126.</span>com    a123456</span><br><span class="line">    授权码: YKJOGNHCCFDLIJKO</span><br><span class="line">xsitheima163@<span class="number">163.</span>com    a12345678</span><br><span class="line">授权码: AKELOGXEFRJZOAWU</span><br></pre></td></tr></table></figure><h1 id="第六章-SpringBoot整合RabbitMQ以及整合邮件发送"><a href="#第六章-SpringBoot整合RabbitMQ以及整合邮件发送" class="headerlink" title="第六章 SpringBoot整合RabbitMQ以及整合邮件发送"></a>第六章 SpringBoot整合RabbitMQ以及整合邮件发送</h1><p>整合描述：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span> <span class="string">boot 中生产者的controller类提供的 访问地址带的参数就是邮箱账号，</span></span><br><span class="line"><span class="meta">访问生产者的</span> <span class="string">spring boot controller 并且将邮箱账号作为消息，</span></span><br><span class="line"><span class="attr">消费者拿到的信息就是邮箱账号，</span></span><br><span class="line"><span class="meta">然后消费者使用163账号给接收到的邮箱账号</span> <span class="string">发送邮件！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ps：先启动消费者，然后再启动生产者，生产者生产10次邮箱信息，那么消费者发送十次邮箱。</span></span><br></pre></td></tr></table></figure><h3 id="1-消费者代码"><a href="#1-消费者代码" class="headerlink" title="1 消费者代码"></a>1 消费者代码</h3><h4 id="消费者配置文件："><a href="#消费者配置文件：" class="headerlink" title="消费者配置文件："></a>消费者配置文件：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="comment"># 发送者的邮箱地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xsitheima163@163.com</span></span><br><span class="line">  <span class="comment"># 此密码并非登录的密码,而是使用java代码发送邮件时使用的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">AKELOGXEFRJZOAWU</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="消费者pom-xml文件"><a href="#消费者pom-xml文件" class="headerlink" title="消费者pom.xml文件"></a>消费者pom.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--springboot邮件发送--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="消费者启动文件："><a href="#消费者启动文件：" class="headerlink" title="消费者启动文件："></a>消费者启动文件：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换器: 将对象转成json并存放到MQ中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="消费者监听生产者类："><a href="#消费者监听生产者类：" class="headerlink" title="消费者监听生产者类："></a>消费者监听生产者类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl javaMailSender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg : 参数类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;boot-queue&quot;)</span><span class="comment">//  注意只需要 队列名称一致即可！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String msg, Channel channel, Message message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//public void receive(Map msg, Channel channel, Message message) throws IOException &#123;</span></span><br><span class="line">        <span class="comment">//会话唯一ID</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息 &quot;</span> + msg);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;收到消息 &quot; + new String(message.getBody()));</span></span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;message:&quot; +message.toString());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// =====================发送邮件</span></span><br><span class="line">            <span class="comment">// 编写邮件信息</span></span><br><span class="line">            SimpleMailMessage emailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            <span class="comment">// 邮件主题</span></span><br><span class="line">            emailMessage.setSubject(<span class="string">&quot;下单通知&quot;</span>);</span><br><span class="line">            <span class="comment">// 邮件内容</span></span><br><span class="line">            emailMessage.setText(<span class="string">&quot;您的宝贝以发货&quot;</span>);</span><br><span class="line">            emailMessage.setTo(msg);</span><br><span class="line">            emailMessage.setFrom(<span class="string">&quot;xsitheima163@163.com&quot;</span>);</span><br><span class="line">            javaMailSender.send(emailMessage);</span><br><span class="line">            System.out.println(<span class="string">&quot;========发送成功&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-生产者代码："><a href="#2-生产者代码：" class="headerlink" title="2 生产者代码："></a>2 生产者代码：</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">producer-application</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itheima129</span>  <span class="comment"># 虚拟机名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span> <span class="comment"># rabbitMQ用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># rabbitMQ密码</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.153</span><span class="string">:5672</span></span><br></pre></td></tr></table></figure><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day08-rabbit-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web环境启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rabbitMQ启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换器: 将对象转成json并存放到MQ中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建JSON的消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Controller类"><a href="#Controller类" class="headerlink" title="Controller类"></a>Controller类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// rabbit客户端对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send/&#123;msg&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable(&quot;msg&quot;)</span> String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 参数1: 队列名称,操作的队列必须实现存在</span></span><br><span class="line">        <span class="comment">// 参数2: 存放的消息信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;boot-queue&quot;</span>,msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-MQ概述&quot;&gt;&lt;a href=&quot;#第一章-MQ概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 MQ概述&quot;&gt;&lt;/a&gt;第一章 MQ概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是MQ&quot;&gt;&lt;a href=&quot;#1-1-什么是MQ&quot; class=&quot;he</summary>
      
    
    
    
    <category term="RabbitMQ" scheme="http://example.com/categories/RabbitMQ/"/>
    
    
    <category term="RabbitMQ" scheme="http://example.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>docker高级</title>
    <link href="http://example.com/2022/05/26/docker%E9%AB%98%E7%BA%A7/"/>
    <id>http://example.com/2022/05/26/docker%E9%AB%98%E7%BA%A7/</id>
    <published>2022-05-26T02:16:58.000Z</published>
    <updated>2022-05-26T02:24:17.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker高级"><a href="#Docker高级" class="headerlink" title="Docker高级"></a>Docker高级</h1><p><strong>学习目标</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">了解DockerCompose的基本语法</span></span><br><span class="line"><span class="meta">-</span> <span class="string">使用Docker-Swarm部署一个Java应用</span></span><br><span class="line"><span class="meta">-</span> <span class="string">了解持续集成持续部署</span></span><br></pre></td></tr></table></figure><h1 id="1-容器编排概述"><a href="#1-容器编排概述" class="headerlink" title="1 容器编排概述"></a>1 容器编排概述</h1><p>Docker只是一个对项目做打包和运行的小工具，如果止步于此，那么充其量就是一个开发者手里的<code>小玩具</code>。</p><p>因为真实的项目都是要集群部署的，<strong>还要考虑负载均衡、水平扩展、动态伸缩、集群容错等问题</strong>，而Docker并不具备这样的功能。</p><p>而要想让Docker在集群中的部署如同单机部署一样的方便，那就需要用到<strong>容器编排</strong>技术了。</p><p>“编排”（Orchestration）在云计算行业里不算是新词汇，它主要是指用户如何通过某些工具或者配置来完成一组虚拟机以及关联资源的定义、配置、创建、删除等工作，然后由云计算平台按照这些指定的逻辑来完成的过程。</p><p>而容器时代，“编排”显然就是对 Docker 容器的一系列定义、配置和创建动作的管理。目前容器编排技术比较知名的包括：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">Docker公司自己的：docker-compose + swarm组合</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Google牵头的Kubernetes技术，简称为k8s</span></span><br></pre></td></tr></table></figure><h1 id="2-Docker-Compose"><a href="#2-Docker-Compose" class="headerlink" title="2 Docker Compose"></a>2 Docker Compose</h1><p><code>Docker Compose</code> 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用，官网地址： <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> ，其前身是开源项目 Fig。</p><p>本节将介绍 <code>Compose</code> 项目情况以及安装和使用。</p><p>网址：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p><h2 id="2-1-为什么要用Docker-Compose"><a href="#2-1-为什么要用Docker-Compose" class="headerlink" title="2.1 为什么要用Docker Compose"></a>2.1 为什么要用Docker Compose</h2><p>通过Dockerfile我们可以将一个项目很方便的打包为一个Docker镜像。但是在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p>那么如何定义各个容器的依赖关系，这就需要用到docker-compose了。</p><p><code>Compose</code> 恰好满足了Docker集群化的需求。它允许用户通过一个单独的 ==docker-compose.yml== 模板文件（YAML 格式）来<strong>定义一组相关联的应用容器为一个项目</strong>（project）。</p><h2 id="2-2-Docker-Compose安装"><a href="#2-2-Docker-Compose安装" class="headerlink" title="2.2 Docker Compose安装"></a>2.2 Docker Compose安装</h2><p>MAC下或者Windows下的Docker自带Compose功能，无需安装。</p><p>Linux下需要通过命令安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="2-3-Docker-Compose快速入门"><a href="#2-3-Docker-Compose快速入门" class="headerlink" title="2.3 Docker Compose快速入门"></a>2.3 Docker Compose快速入门</h2><p>假设我们要部署一个SpringBoot项目，并且依赖于Redis。</p><h3 id="2-3-1-导入微服务工程"><a href="#2-3-1-导入微服务工程" class="headerlink" title="2.3.1 导入微服务工程"></a>2.3.1 导入微服务工程</h3><p>工程的基本功能就是统计用户的访问量，代码在<code>资料</code>中docker-demo，直接解压到没有中文的目录下，使用Idea导入即可。</p><p><strong>打包项目，获得app.jar</strong>(利用idea中的maven管理的package命令进行打包)</p><h3 id="2-3-2-编写Dockerfile"><a href="#2-3-2-编写Dockerfile" class="headerlink" title="2.3.2 编写Dockerfile"></a>2.3.2 编写Dockerfile</h3><p>（1）在任意位置创建一个新目录,docker-compose，将app.jar复制到该目录</p><p>（2）在该目录中，新建一个==Dockerfile==文件，并编写下面的内容：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9090</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/tmp/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-编写docker-compose"><a href="#2-3-3-编写docker-compose" class="headerlink" title="2.3.3 编写docker-compose"></a>2.3.3 编写docker-compose</h3><p>在刚才的目录中，创建一个==docker-compose.yml==文件并填写内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis&quot;</span></span><br></pre></td></tr></table></figure><p>此时的结构如下：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626122026530-1625530478553.png" alt="image-20210626122026530"></p><p>命令解读：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">version：compose的版本</span></span><br><span class="line"><span class="meta">-</span> <span class="string">services：服务列表，包括两个服务：</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">web：自己写的Java项目</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">build：这个服务镜像是临时构建的，构建目录是当前目录，会利用当前目录的Dockerfile来完成构建。</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">ports：端口映射，对外开放8080端口</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">redis：redis服务</span></span><br></pre></td></tr></table></figure><h3 id="2-3-4-启动测试"><a href="#2-3-4-启动测试" class="headerlink" title="2.3.4 启动测试"></a>2.3.4 启动测试</h3><p>将刚刚准备好的文件夹docker-compose上传到Linux的<code>/opt</code>目录：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626122243656-1625530478554.png" alt="image-20210626122243656"></p><p>进入docker-compose目录然后执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>构建完成后，可以看到项目运行的日志信息：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109001711441-1625530478554.png" alt="image-20201109001711441"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109001832104-1625530478554.png" alt="image-20201109001832104"></p><p>此时，访问浏览器 <a href="http://192.168.80.151:9090/hello%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%8B%E9%9D%A2%E7%9A%84%E7%BB%93%E6%9E%9C%EF%BC%9A">http://192.168.80.151:9090/hello，可以看到下面的结果：</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626123534275-1625530478554.png" alt="image-20210626123534275"></p><p>如果多次访问，这个次数会累加。</p><p>按<code>CTRL+C</code>后可以<strong>停止运行程序，并且Docker运行的容器中也会关闭</strong>。</p><p>通过<code>docker-compose up -d</code>命令，可以<strong>后台启动</strong>，这样就不会显示日志：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109002000959-1625530478554.png" alt="image-20201109002000959"></p><p>通过<code>docker-compose stop</code> 关闭容器</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109002527208-1625530478554.png" alt="image-20201109002527208"></p><p>通过<code>docker-compose down</code>关闭容器并删除</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109002122299-1625530478554.png" alt="image-20201109002122299"></p><p>上面讲的是：<strong>在linux中安装docker compose ，然后构建项目并且打包，并且 一些配置文件放到一定目录机构中，再拷贝到linux运行，还可以直接就在windows运行了，windows本来就已经自带了docker compose</strong>。（不管是在linux还是windows运行，不需要原本存在 docker 镜像，docker-compose.yml 文件会帮我们构建并且运行）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">也可以进入跑起来的redis容器，查看具体的key-val哈：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">exec -it docker-compose_redis_1 bash</span></span><br><span class="line"><span class="attr">redis-cli</span></span><br><span class="line"><span class="attr">ping</span> <span class="string"></span></span><br><span class="line"><span class="attr">keys</span> <span class="string">*</span></span><br><span class="line"><span class="meta">get....</span> <span class="string">(查看一下值)</span></span><br><span class="line"><span class="attr">quilt（退出redis）</span></span><br><span class="line"><span class="attr">exit(退出容器)</span></span><br></pre></td></tr></table></figure><h2 id="2-4-Docker-Compose-相关命令"><a href="#2-4-Docker-Compose-相关命令" class="headerlink" title="2.4 Docker Compose 相关命令"></a>2.4 Docker Compose 相关命令</h2><p>docker-compose的相关命令参数：</p><p>通过：<code>docker-compose --help</code> 查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost docker-demo]<span class="comment"># docker-compose --help</span></span><br><span class="line">利用Docker来定义和构建一个多容器的应用</span><br><span class="line"></span><br><span class="line">使用方式:</span><br><span class="line">  docker-compose [-f &lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br><span class="line">  docker-compose -h|--<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">1 Options:</span><br><span class="line">  -f, --file FILE             指定一个 compose 文件，</span><br><span class="line">                              (默认: docker-compose.yml)</span><br><span class="line">  -p, --project-name NAME     指定project名字</span><br><span class="line">                              (默认: 目录名称)</span><br><span class="line">  --verbose                   显示更多日志</span><br><span class="line">  --log-level LEVEL           日志级别 (DEBUG, INFO, WARNING, ERROR, CRITICAL)</span><br><span class="line">  -v, --version               打印版本并退出</span><br><span class="line">  -H, --host HOST             Daemon socket to connect to</span><br><span class="line">2 Commands:</span><br><span class="line">  build              构建多个service</span><br><span class="line">  config             校验 Compose 文件，格式是否正确，若正确则显示配置，</span><br><span class="line">   若格式错误显示错误原因</span><br><span class="line">  down               停止并删除 容器, 网络, 镜像, 和 数据卷</span><br><span class="line">  <span class="built_in">exec</span>               进入一个指定的容器</span><br><span class="line">  <span class="built_in">help</span>               Get <span class="built_in">help</span> on a <span class="built_in">command</span></span><br><span class="line">  images             列出该Compose中包含的各个镜像</span><br><span class="line">  <span class="built_in">kill</span>               通过发送 SIGKILL 信号来强制停止服务容器</span><br><span class="line">   格式为 docker-compose <span class="built_in">kill</span> [options] [SERVICE...]</span><br><span class="line">  logs               查看服务容器的输出日志</span><br><span class="line">   格式为 docker-compose logs [options] [SERVICE...]。</span><br><span class="line">  pause              暂停一个容器</span><br><span class="line">  port               打印某个容器端口所映射的公共端口</span><br><span class="line">  ps                 列出项目中目前的所有容器</span><br><span class="line">  pull               拉取服务依赖的镜像</span><br><span class="line">  push               推送服务依赖的镜像到 Docker 镜像仓库</span><br><span class="line">  restart            重启项目中的服务</span><br><span class="line">  rm                 删除停止的容器（要先停止容器）</span><br><span class="line">  run                在某个服务上运行指令</span><br><span class="line">  scale              设定某个容器的运行个数</span><br><span class="line">  start              启动多个 services</span><br><span class="line">  stop               停止多个 services</span><br><span class="line">  top                查看各个服务容器内运行的进程。</span><br><span class="line">  unpause            恢复处于暂停状态中的服务。</span><br><span class="line">  up                 创建并启动多个service的容器</span><br><span class="line">  version            Show the Docker-Compose version information</span><br></pre></td></tr></table></figure><h2 id="2-5-Docker-Compose常用语法"><a href="#2-5-Docker-Compose常用语法" class="headerlink" title="2.5 Docker Compose常用语法"></a>2.5 Docker Compose常用语法</h2><p>Compose模板文件是Compose的核心，包括有多种版本的Compose文件格式–：1，2，2.x和3.x。对应的Docker版本也不一样，对照表：</p><table><thead><tr><th align="left"><strong>Compose file format</strong></th><th align="left"><strong>Docker Engine release</strong></th></tr></thead><tbody><tr><td align="left">3.8</td><td align="left">19.03.0+</td></tr><tr><td align="left">3.7</td><td align="left">18.06.0+</td></tr><tr><td align="left">3.6</td><td align="left">18.02.0+</td></tr><tr><td align="left">3.5</td><td align="left">17.12.0+</td></tr><tr><td align="left">3.4</td><td align="left">17.09.0+</td></tr><tr><td align="left">3.3</td><td align="left">17.06.0+</td></tr><tr><td align="left">3.2</td><td align="left">17.04.0+</td></tr><tr><td align="left">3.1</td><td align="left">1.13.1+</td></tr><tr><td align="left">3.0</td><td align="left">1.13.0+</td></tr><tr><td align="left">2.4</td><td align="left">17.12.0+</td></tr><tr><td align="left">2.3</td><td align="left">17.06.0+</td></tr><tr><td align="left">2.2</td><td align="left">1.13.0+</td></tr><tr><td align="left">2.1</td><td align="left">1.12.0+</td></tr><tr><td align="left">2.0</td><td align="left">1.10.0+</td></tr><tr><td align="left">1.0</td><td align="left">1.9.1.+</td></tr></tbody></table><p>编写时，需要根据自己的docker版本来选择指定的Compose版本。</p><p>详细语法参考文档：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><code>Compose</code> 中有两个重要的概念：</p><ul><li><strong>项目</strong> (<code>project</code>)：<strong>由一组关联的应用容器组成的一个完整业务单元</strong>，在 <code>docker-compose.yml</code> 文件中定义。</li><li><strong>服务</strong> (<code>service</code>)：<strong>一个应用的容器，实际上可以包括若干运行相同镜像的容器实例</strong>。</li></ul><p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p>Compose文件是一个YAML文件，定义 一个或多个服务（service），网络（network）和 卷（volume）。撰写文件的默认路径为<code>./docker-compose.yml</code>。</p><blockquote><p><strong>提示</strong>：您可以为此文件使用 <code>.yml</code>或<code>.yaml</code>扩展名。他们俩都工作。</p></blockquote><p>简单来说，一个<code>project</code>包含多个<code>service</code>，每个<code>service</code>都是一个组件。<strong>例如入门案例中的Java项目和Redis都是<code>service</code>。</strong>部署时，可能每个service都会有多个容器去运行，形成负载均衡的集群。</p><p>因此，我们定义service，就是在定义这个service在容器运行时的规则参数，就像是给<code>docker run</code>命令设置参数一样。</p><p>我们定义network和volume类似于 <code>docker network create</code>和<code>docker volume create</code>这两个命令的效果。</p><p>只不过，我们定义规则，执行命令则由docker compose来完成。</p><p>参考我们之前的Demo，我们来学习下Compose的模板文件语法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis&quot;</span></span><br></pre></td></tr></table></figure><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>版本信息，详见上面提到的Compose版本与Docker的对应关系。</p><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 <code>docker-compose.yml</code> 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p><p>在入门案例中，因为<code>Dockerfile</code>和<code>docker-compose.yml</code>是在一个目录，因此build值指定为<code>.</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br></pre></td></tr></table></figure><p>另外，你也可以先制定目录，然后在指定Dockerfile文件，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span> </span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>build：Dockerfile配置<ul><li>context：用来指定Compose的工作环境目录，如果不指定或使用了相对路径则默认为<code>docker-compose.yml</code>所在目录。</li><li>dockerfile：指定Dockerfile的文件名称</li></ul></li></ul><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><p>覆盖容器运行时的默认命令。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;-Xmx256m&quot;</span>, <span class="string">&quot;/tmp/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h3><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="comment"># redis服务</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="comment"># mysql服务</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br></pre></td></tr></table></figure><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p>指定服务容器启动后执行的入口文件或者启动命令，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entrypoint:</span> <span class="string">/code/entrypoint.sh</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entrypoint:</span> [<span class="string">&quot;php&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;memory_limit=-1&quot;</span>, <span class="string">&quot;vendor/bin/phpunit&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h3><p>添加环境变量。您可以使用数组或字典。任何布尔值（true，false，yes，no）都需要用引号引起来，以确保YML解析器不会将其转换为True或False。</p><p>仅具有键的环境变量在运行Compose的计算机上解析为它们的值，这对于秘密或特定于主机的值很有用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SHOW:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SHOW=true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure><h3 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h3><p>指定内部端口，不将其发布到宿主机上，只有链接的其它服务才能访问它们。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span></span><br></pre></td></tr></table></figure><h3 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a>extra_hosts</h3><p>类似 Docker 中的 <code>--add-host</code> 参数，指定额外的 host 名称映射信息。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extra_hosts:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;googledns:8.8.8.8&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;dockerhub:52.1.157.61&quot;</span></span><br></pre></td></tr></table></figure><p>会在启动后的服务容器中 <code>/etc/hosts</code> 文件中添加如下两条条目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8.8.8.8 googledns</span><br><span class="line">52.1.157.61 dockerhub</span><br></pre></td></tr></table></figure><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>指定用于启动容器的图像。可以是镜像名称（仓库:tag）或镜像ID，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><p>如果镜像在本地不存在，而且你没有指定<a href="https://docs.docker.com/compose/compose-file/#build">build</a>参数，那么Compose会尝试<code>docker pull</code>来拉取镜像</p><h3 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h3><p>配置日志选项。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">syslog</span></span><br><span class="line">  <span class="attr">options:</span></span><br><span class="line">    <span class="attr">syslog-address:</span> <span class="string">&quot;tcp://192.168.0.42:123&quot;</span></span><br></pre></td></tr></table></figure><p>目前支持三种日志驱动类型。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver:</span> <span class="string">&quot;json-file&quot;</span> <span class="comment"># 记录为json文件</span></span><br><span class="line"><span class="attr">driver:</span> <span class="string">&quot;syslog&quot;</span> <span class="comment"># 发送到syslog服务</span></span><br><span class="line"><span class="attr">driver:</span> <span class="string">&quot;none&quot;</span> <span class="comment"># 没有日志记录</span></span><br></pre></td></tr></table></figure><p>默认采用<code>json-file</code>的日志方式，可以通过<code>options</code> 配置日志文件的限制参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">options:</span></span><br><span class="line">  <span class="attr">max-size:</span> <span class="string">&quot;200k&quot;</span></span><br><span class="line">  <span class="attr">max-file:</span> <span class="string">&quot;10&quot;</span></span><br></pre></td></tr></table></figure><h3 id="network-mode"><a href="#network-mode" class="headerlink" title="network_mode"></a>network_mode</h3><p>网络模式。使用与<code>docker --network</code>参数相同的值:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;bridge&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;none&quot;</span></span><br></pre></td></tr></table></figure><h3 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h3><p>要加入的网络，引用Compose文件中的顶级项目networks下的定义的网络名称 。</p><p><strong>要通过容器名称互相访问，则，各个容器必须处于同一个网络中。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;nginx:alpine&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">new</span> <span class="comment"># 加入名称为new的网络</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">worker:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;my-worker-image:latest&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">legacy</span> <span class="comment"># 加入名称为legacy的网络</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">new:</span> <span class="comment"># 加入名称为new的网络</span></span><br><span class="line">        <span class="attr">aliases:</span> <span class="comment"># 在new网络中的别名</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">database</span></span><br><span class="line">      <span class="attr">legacy:</span> <span class="comment"># 加入名称为legacy的网络</span></span><br><span class="line">        <span class="attr">aliases:</span> <span class="comment"># 在legacy网络中的别名</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">new:</span> <span class="comment"># 定义一个网络，名称为new</span></span><br><span class="line">  <span class="attr">legacy:</span> <span class="comment"># 定义一个网络，名称为legacy</span></span><br></pre></td></tr></table></figure><p>另外，在定义网络时可以指定<code>ip</code>网段，而加入网络的容器则需要在网段中选择一个固定ip地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">app_net:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.10</span> <span class="comment"># 指定一个IPv4子网地址</span></span><br><span class="line">        <span class="attr">ipv6_address:</span> <span class="number">2001</span><span class="string">:3984:3989::10</span> <span class="comment"># 指定一个IPv6子网地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">app_net:</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="string">&quot;172.16.238.0/24&quot;</span> <span class="comment"># 定义IPv4的地址网段   </span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="string">&quot;2001:3984:3989::/64&quot;</span> <span class="comment"># 定义IPv6的地址网段</span></span><br></pre></td></tr></table></figure><h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h3><p>暴露的端口信息，会映射到宿主机端口，另外为了避免语法出错，所有端口配置都必须使用字符串格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;3000-3005&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;9090-9091:8080-8081&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;49100:22&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:8001:8001&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:5000-5010:5000-5010&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;6060:6060/udp&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;12400-12500:1240&quot;</span></span><br></pre></td></tr></table></figure><p>如果仅指定了容器端口，则会随机选择一个宿主机端口。</p><h3 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h3><p>指定容器退出后的重启策略。包括下面的几种选项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">restart:</span> <span class="string">&quot;no&quot;</span> <span class="comment"># 在任何情况下都不会重新启动容器</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 容器总是重新启动。</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">on-failure</span> <span class="comment"># 遇到故障后重启</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">unless-stopped</span> <span class="comment"># 总是重新启动容器，除非容器停止</span></span><br></pre></td></tr></table></figure><p>生产环境建议配置为：<code>always</code>或者<code>unless-stopped</code></p><h3 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h3><p>指定要挂载的数据卷或目录。数据卷可以是某个service的局部数据卷，也可以是提前定义的全局数据卷（通过顶级参数volumes来指定）。</p><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 完整的数据卷配置语法</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">mydata</span> <span class="comment"># 数据卷</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/data</span> <span class="comment"># 容器内目录</span></span><br><span class="line">        <span class="attr">volume:</span></span><br><span class="line">          <span class="attr">nocopy:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">./static</span> <span class="comment"># 宿主机目录</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/opt/app/static</span> <span class="comment"># 容器内目录</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:latest</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 简化的数据卷语法</span></span><br><span class="line">      <span class="comment"># 将一个宿主机目录映射到容器内的某个目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/postgres.sock:/var/run/postgres/postgres.sock&quot;</span></span><br><span class="line">      <span class="comment"># 将一个全局卷映射到容器内某个目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;dbdata:/var/lib/postgresql/data&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mydata:</span> <span class="comment"># 定义全局的数据卷mydata</span></span><br><span class="line">  <span class="attr">dbdata:</span> <span class="comment"># 定义全局的数据卷dbdata</span></span><br></pre></td></tr></table></figure><p>其他swarm配置，上面只是讲解了Compose的部分模板语法。有关swarm下的一些配置并未说明，在swarm部分继续讲解。</p><h1 id="3-Docker-Swarm"><a href="#3-Docker-Swarm" class="headerlink" title="3 Docker Swarm"></a>3 Docker Swarm</h1><p>Docker-Compose负责定义Project和Service（服务）。但是服务<strong>具体运行在哪个服务节点</strong>？需要<strong>多少个Docker容器来部署？</strong>这就要靠Docker Swarm来管理了。</p><p><code>Swarm</code> 是使用 <a href="https://github.com/docker/swarmkit/"><code>SwarmKit</code></a> 构建的 Docker 引擎内置（原生）的集群管理和编排工具。</p><p>网址：<a href="https://docs.docker.com/engine/swarm/">https://docs.docker.com/engine/swarm/</a></p><h2 id="3-1-Docker-Swarm相关概念"><a href="#3-1-Docker-Swarm相关概念" class="headerlink" title="3.1 Docker Swarm相关概念"></a>3.1 Docker Swarm相关概念</h2><p>Docker Swarm 是 Docker 的集群管理工具。它将 Docker 主机池转变为单个虚拟 Docker 主机。 Docker Swarm 提供了标准的 Docker API，所有任何已经与 Docker 守护程序通信的工具都可以使用 Swarm 轻松地扩展到多个主机。</p><p>使用 <code>Swarm</code> 集群之前需要了解以下几个概念：</p><h3 id="3-1-1-Node节点"><a href="#3-1-1-Node节点" class="headerlink" title="3.1.1 Node节点"></a>3.1.1 Node节点</h3><p><strong>什么是节点？</strong></p><p>运行 Docker 的主机可以主动初始化一个 <code>Swarm</code> 集群或者加入一个已存在的 <code>Swarm</code> 集群，这样这个运行 Docker 的主机就成为一个 <code>Swarm</code> 集群的节点 (<code>node</code>) 。</p><p><strong>节点的分类：</strong></p><p>节点分为<strong>管理 (<code>manager</code>) 节点</strong>和<strong>工作 (<code>worker</code>) 节点</strong>。</p><p><strong>管理节点：</strong>用于 <code>Swarm</code> 集群的管理，<code>docker swarm</code> 命令基本只能在管理节点执行（节点退出集群命令 <code>docker swarm leave</code> 可以在工作节点执行）。一个 <code>Swarm</code> 集群可以有多个管理节点（高可用），但只有一个管理节点可以成为 <code>leader</code>，<code>leader</code> 通过 <code>raft</code> 协议实现。</p><p><strong>工作节点：</strong>是任务执行节点，管理节点将服务 (<code>service</code>) 下发至工作节点执行。管理节点默认也作为工作节点。你也可以通过配置让服务只运行在管理节点。</p><p><strong>Docker-Swarm的官方架构图：</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109004124428-1625530478554.png" alt="image-20201109004124428"></p><h3 id="3-1-2-Service服务和Task任务"><a href="#3-1-2-Service服务和Task任务" class="headerlink" title="3.1.2 Service服务和Task任务"></a>3.1.2 Service服务和Task任务</h3><p><strong>任务 （<code>Task</code>）</strong>：是 <code>Swarm</code> 中的<strong>最小的调度单位，可以理解为一个单一的容器</strong>。</p><p><strong>服务 （<code>Services</code>）</strong>： 是指<strong>一组任务的集合，服务定义了任务的属性</strong>。服务有两种模式：</p><ul><li><code>replicated services</code> 按照一定规则在各个工作节点上运行指定个数的任务。</li><li><code>global services</code> 每个工作节点上运行一个任务</li></ul><p>两种模式通过 <code>docker service create</code> 的 <code>--mode</code> 参数指定。</p><p><strong>容器、任务、服务的关系图：</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109004545055-1625530478555.png" alt="image-20201109004545055"></p><h2 id="3-2-创建Swarm集群"><a href="#3-2-创建Swarm集群" class="headerlink" title="3.2 创建Swarm集群"></a>3.2 创建Swarm集群</h2><p>我们知道 <code>Swarm</code> 集群由 <strong>管理节点</strong> 和 <strong>工作节点</strong> 组成。本节我们来创建一个包含一个管理节点和两个工作节点的最小 <code>Swarm</code> 集群。</p><p>我会启动3台虚拟机，计划如下：</p><table><thead><tr><th>虚拟机IP</th><th>节点角色</th></tr></thead><tbody><tr><td>192.168.80.99</td><td>管理节点</td></tr><tr><td>192.168.80.100</td><td>工作节点</td></tr><tr><td>192.168.80.101</td><td>工作节点</td></tr></tbody></table><p><strong>注意</strong>：节点的IP请定义为自己的虚拟机IP。</p><p><strong>虚拟机克隆</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626132820171-1625530478555.png" alt="image-20210626132820171"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626132859269-1625530478555.png" alt="image-20210626132859269"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626132927652-1625530478555.png" alt="image-20210626132927652"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626133831847-1625530478555.png" alt="image-20210626133831847"></p><p>结果：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626134615100-1625530478555.png" alt="image-20210626134615100"></p><p><strong>分别先后开启f1,f2,修改ip分别为100,101，切记，此时不能同时开任何两个虚拟机</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626134831109-1625530478555.png" alt="image-20210626134831109"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626134946452-1625530478555.png" alt="image-20210626134946452"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626135021759-1625530478555.png" alt="image-20210626135021759"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626135229567-1625530478555.png" alt="image-20210626135229567"></p><p>分别在三台机器执行命令：（域名映射）</p><p>99机器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;192.168.80.99 master&#x27;</span> &gt;&gt; /etc/hosts</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>100机器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;192.168.80.100 slaver1&#x27;</span> &gt;&gt; /etc/hosts</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>101机器</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;192.168.80.101 slaver2&#x27; &gt;&gt; /etc/hosts</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p><strong>一定要重启机器</strong></p><p><strong>一定要重启机器</strong></p><p><strong>一定要重启机器</strong></p><h3 id="3-2-1-创建管理节点"><a href="#3-2-1-创建管理节点" class="headerlink" title="3.2.1 创建管理节点"></a>3.2.1 创建管理节点</h3><p>我们在节点192.168.200.99上运行一个命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr 192.168.80.99</span><br></pre></td></tr></table></figure><p>因为我们的虚拟机可能有多个IP地址，这里通过<code>--advertise-addr</code>指定一个IP地址，这里我选择的是我的NAT网卡的地址。</p><p>执行命令效果如下：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626165656364-1625530478555.png" alt="image-20210626165656364"></p><h3 id="3-2-2-创建工作节点"><a href="#3-2-2-创建工作节点" class="headerlink" title="3.2.2 创建工作节点"></a>3.2.2 创建工作节点</h3><p>通过上面执行的结果可以看到这样的提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">docker swarm join --token SWMTKN-1-61z291f29zm8w3rh0wbptpzipavgq9lso77a6s46os5mijf5xr-553q8z2bs91r67ptxd1nq1mge 192.168.80.151:2377</span><br></pre></td></tr></table></figure><p>所以，我们需要在<code>另外两台机器</code>：<strong>192.168.80.152和192.168.80.153</strong>上执行命令,<strong>不要复制笔记，要复制自己的内容</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-40jgt6v1n59mb7aaw41yg10coxo2524tdgw2t6g2sorbiuflhj-5rymf91h0w2l9ic3adbkik39y 192.168.80.151:2377</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626165810134-1625530478555.png" alt="image-20210626165810134"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626165825582-1625530478555.png" alt="image-20210626165825582"></p><h3 id="3-2-3-查看swarm集群"><a href="#3-2-3-查看swarm集群" class="headerlink" title="3.2.3.查看swarm集群"></a>3.2.3.查看swarm集群</h3><p>在管理节点：<strong>192.168.80.151</strong>上执行命令，查看swarm集群信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node ls</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210626165907655-1625530478555.png" alt="image-20210626165907655"></p><p>此时，我们已经创建了一个最小的 <code>Swarm</code> 集群，包含一个管理节点和两个工作节点。</p><h2 id="3-3-部署单个服务"><a href="#3-3-部署单个服务" class="headerlink" title="3.3 部署单个服务"></a>3.3 部署单个服务</h2><p>通过<code>docker service create</code>命令，可以创建一个service，并在swarm集群中运行。</p><h3 id="3-3-1-创建服务"><a href="#3-3-1-创建服务" class="headerlink" title="3.3.1.创建服务"></a>3.3.1.创建服务</h3><p>在管理节点：<strong>192.168.80.151</strong>上运行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service create --replicas 3 -p 80:80 --name nginx nginx</span><br></pre></td></tr></table></figure><p>解读：</p><ul><li><code>--replicas 3</code>：代表这个服务要创建3个副本，也就是启动3个容器来运行nginx<strong>（工作节点都不用做任何工作，管理节点会均衡分发任务给当前集群下的工作节点）</strong></li></ul><p>如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109010318388-1625530478555.png" alt="image-20201109010318388"></p><h3 id="3-3-2-查看服务"><a href="#3-3-2-查看服务" class="headerlink" title="3.3.2 查看服务"></a>3.3.2 查看服务</h3><p>通过<code>docker service ls</code>可以查看服务状态：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109010353253-1625530478556.png" alt="image-20201109010353253"></p><p>通过<code>docker service ps nginx</code>命令可以查看nginx服务的运行节点信息：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626170156585-1625530478556.png" alt="image-20210626170156585"></p><p>在工作节点也可以通过docker ps 命令查看到已经跑起来的容器！</p><p>此时，我们通过浏览器访问：<a href="http://192.168.80.151或者http//192.168.80.152%E6%88%96%E8%80%85http://192.168.80.153%E9%83%BD%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E6%A0%B7%E7%9A%84%E6%95%88%E6%9E%9C%EF%BC%9A">http://192.168.80.151或者http://192.168.80.152或者http://192.168.80.153都可以看到一样的效果：</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626170235800-1625530478556.png" alt="image-20210626170235800"></p><p>注意：</p><p><strong>如果浏览器访问部署好的集群节点访问不了时，根据如下步骤配置IPV4的支持！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward=<span class="number">1</span>  #最下方添加这段代码</span><br><span class="line">#重启network服务</span><br><span class="line">systemctl restart network &amp;&amp; systemctl restart docker</span><br><span class="line">#查看是否修改成功 （备注：返回<span class="number">1</span>，就是成功）</span><br><span class="line">[root<span class="meta">@docker</span>-node2 ~]# sysctl net.ipv4.ip_forward</span><br><span class="line">net.ipv4.ip_forward = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>其它命令：</p><p>我们可以使用 <code>docker service scale</code> 对一个服务运行的容器数量进行伸缩。</p><p>当业务处于高峰期时，我们需要扩展服务运行的容器数量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale nginx=5</span><br></pre></td></tr></table></figure><p>当业务平稳时，我们需要减少服务运行的容器数量。<strong>（ps：缩减到两个，而不是减少两个哦）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale nginx=2</span><br></pre></td></tr></table></figure><p>使用 <code>docker service rm</code> 来从 <code>Swarm</code> 集群移除某个服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service rm nginx</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">当nginx减到两个时，有两个节点有部署服务，有一个节点没有部署服务，</span></span><br><span class="line"><span class="attr">但是他们是一个集群，在浏览器中访问任何一台节点地址，都能访问到nginx资源，这就是集群灵活的地方！</span></span><br></pre></td></tr></table></figure><h2 id="3-4-部署多个服务"><a href="#3-4-部署多个服务" class="headerlink" title="3.4 部署多个服务"></a>3.4 部署多个服务</h2><p><strong>使用 <code>docker service create</code> 一次只能部署一个服务</strong>，使用 <strong><code>docker-compose.yml</code> 我们可以一次启动多个关联的服务并部署到swarm集群</strong>中。</p><p>接下来，我们就来搭建一个多服务的集群，包括下面的服务：</p><ul><li><strong>web：</strong>就是之前在docker-compose案例中的Java项目，依赖于redis进行计数。部署3个</li><li><strong>redis：</strong>redis数据库，记录某个IP的访问次数，部署1个，在管理节点。</li><li><strong>nginx：</strong>nginx服务，对3个web服务反向代理，部署1个，在管理节点</li></ul><p>部署计划表：</p><table><thead><tr><th>服务名称</th><th>部署数量</th><th>节点IP</th></tr></thead><tbody><tr><td>web</td><td>3</td><td>192.168.80.151, 192.168.80.152, 192.168.80.153</td></tr><tr><td>redis</td><td>1</td><td>192.168.80.151</td></tr><tr><td>nginx</td><td>1</td><td>192.168.80.151</td></tr></tbody></table><p>结构如下：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201102105907797-1625530478556.png" alt="image-20201102105907797"></p><h3 id="3-4-1-准备镜像"><a href="#3-4-1-准备镜像" class="headerlink" title="3.4.1 准备镜像"></a>3.4.1 准备镜像</h3><p>首先，我们需要在3个docker节点上都准备java项目的镜像。</p><p><strong>1）上传</strong></p><p>找到之前准备的<code>docker-compose</code>这个文件夹:</p><p>分别上传到3<strong>个docker</strong>节点的 `/opt 目录：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626170803800-1625530478556.png" alt="image-20210626170803800"></p><p><strong>2）构建镜像</strong></p><p>然后分别在3个docker节点中运行下面的命令：</p><p>进入:  /opt/docker-compose ,执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t web:latest .</span><br></pre></td></tr></table></figure><p>通过<code>docker images</code>查看镜像：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626171123064-1625530478556.png" alt="image-20210626171123064"></p><h3 id="3-4-2-编写nginx配置"><a href="#3-4-2-编写nginx配置" class="headerlink" title="3.4.2 编写nginx配置"></a>3.4.2 编写nginx配置</h3><p>我们需要<strong>用nginx反向代理3个web节点</strong>，因此需要编写一个nginx的配置文件。</p><p><strong>nginx部署在管理节点</strong>：<code>192.168.80.151</code>，所以进入管理节点的<code>/opt/docker-compose/swarm</code>目录下，创建一个<code>nginx.conf</code>文件，内容如下：</p><p>/opt/docker-compose/swarm</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">default_type</span>  text/html; <span class="comment"># 默认响应类型是html</span></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">location</span> /hello &#123;</span><br><span class="line">            <span class="comment"># 代理/hello路径，会代理到web服务的9090端口</span></span><br><span class="line"><span class="attribute">proxy_pass</span> http://web:9090;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span>/usr/share/nginx/html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>proxy_pass http://web:9090</code>：会把请求代理到web服务的9090端口。<strong>Docker-Swarm会自动对3个docker节点的web服务负载均衡</strong></li></ul><h3 id="3-4-3-编写docker-compose"><a href="#3-4-3-编写docker-compose" class="headerlink" title="3.4.3 编写docker-compose"></a>3.4.3 编写docker-compose</h3><p>swarm下的docke-swarm会有一些变化，我们修改管理节点（192.168.80.151）下的<code>docker-compose.yml</code>文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;web:latest&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">3</span>  <span class="comment"># 三个副本</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:latest&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;nginx:latest&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker-compose/swarm/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">overlay:</span></span><br></pre></td></tr></table></figure><p>解读：</p><ul><li><strong>service：服务，包括3个</strong><ul><li><strong>web：java项目</strong><ul><li>image：指定web服务的镜像，就是刚刚自己打包的<code>web:latest</code></li><li>networks: 网络配置，这里是用了默认的overlay格式，是swarm模式的固定格式</li><li>deploy：swarm下的部署配置<ul><li>mode：replicated代表在多个节点上做备份</li><li>replicas: 3 ，<strong>备份数量为3，即web服务会部署到swarm集群的随机3个节点</strong></li></ul></li></ul></li><li><strong>redis：redis数据库</strong><ul><li>image: “redis:latest”，指定用到的镜像是redis最新镜像</li><li>deploy：swarm下的部署配置<ul><li>placement: 指定部署位置<ul><li> constraints: [node.role == manager] <strong>部署到manager节点</strong></li></ul></li></ul></li></ul></li><li><strong>nginx：nginx服务</strong><ul><li>image: “nginx:latest”，指定镜像名称</li><li>networks: 指定网络，这里是用了默认的overlay格式，是swarm模式的固定格式</li><li>ports: 对外暴露的端口为80</li><li>volumes: 数据卷，指定目录下的nginx.conf文件挂载到容器中</li><li>deploy: 部署，<strong>指定部署位置到manager节点</strong></li></ul></li></ul></li></ul><h3 id="3-4-4-部署运行"><a href="#3-4-4-部署运行" class="headerlink" title="3.4.4 部署运行"></a>3.4.4 部署运行</h3><p>多服务运行与单个服务命令不同，<strong>在管理节点</strong>（192.168.80.151）的docker-compose目录下运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml counter</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>docker stack</code>：就是通过docker-compose部署的命令</li><li><code>-c docker-compose.yml</code>：指定docker-compose文件位置</li><li><code>counter</code>：给部署的集群起个名字</li></ul><p>运行过程如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109193630473-1625530478556.png" alt="image-20201109193630473"></p><p>通过<code>docker stack ls</code>可以查看到当前集群信息：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109193723407-1625530478556.png" alt="image-20201109193723407"></p><p>通过<code>docker stack ps [集群名]</code> 可以查看集群中的服务信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stack ps counter</span><br><span class="line"><span class="comment"># 或者 docker stack services counter</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626171747386-1625530478556.png" alt="image-20210626171747386"></p><p>此时，访问浏览器：<a href="http://192.168.80.151/hello%E5%8D%B3%E5%8F%AF%EF%BC%9A">http://192.168.80.151/hello即可：</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626171903854-1625530478556.png" alt="image-20210626171903854"></p><p>整个访问流程详解：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">根据上面讲的，因为是集群（管理者，工作者），</span></span><br><span class="line"><span class="attr">无论访问哪一个节点（管理节点，工作节点），都会去找nginx（因为有配置nginx），</span></span><br><span class="line"><span class="meta">又因为nginx配置文件的hello路径配置定位到：proxy_pass</span> <span class="string">http://web:9090</span></span><br><span class="line"><span class="attr">那么，web服务所在的节点地址是集群中的哪个节点地址呢？？？不用我们管，nginx会帮我们均衡！</span></span><br></pre></td></tr></table></figure><p>此时，通过命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service logs -f counter_web  <span class="comment"># counter_web为我们的java项目服务</span></span><br></pre></td></tr></table></figure><p>可以查看运行日志：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109195354830-1625530478556.png" alt="image-20201109195354830"></p><p>多次访问99主节点，可以看到，Docker-Swarm会自己对3个web服务做负载均衡：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20201109195456557-1625530478556.png" alt="image-20201109195456557"></p><h1 id="4-持续集成-amp-持续部署"><a href="#4-持续集成-amp-持续部署" class="headerlink" title="4 持续集成&amp;持续部署"></a>4 持续集成&amp;持续部署</h1><h2 id="4-1-理解什么是持续集成-amp-持续部署"><a href="#4-1-理解什么是持续集成-amp-持续部署" class="headerlink" title="4.1 理解什么是持续集成&amp;持续部署"></a>4.1 理解什么是持续集成&amp;持续部署</h2><p>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件<br>开发的质量已经慢慢成为开发过程中不可回避的问题。互联网软件的开发和发布，已经形成了一套标准流程。</p><p>如: 在互联网企业中，每时每刻都有需求的变更，bug的修复， 为了将改动及时更新到生产服务器上，下面的图片我们需要每天执行N多次，<strong>开发人员完成代码自测后提交到git，然后需要将git中最新的代码生成镜像并部署到测试服务器，如果测试通过了还需要将最新代码部署到生产服务器。如果采用手动方式操作，那将会浪费大量的时间浪费在运维部署方面</strong>。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605489947242-1625530478557.png" alt="1605489947242"></p><p>现在的互联网企业，基本都会采用以下方案解决:</p><p><strong>持续集成（Continuous integration，简称 CI）。</strong></p><p><strong>持续部署（continuous deployment, 简称 CD）</strong></p><h3 id="4-1-1-持续集成"><a href="#4-1-1-持续集成" class="headerlink" title="4.1.1 持续集成"></a>4.1.1 持续集成</h3><p><strong>持续集成</strong> （Continuous integration，简称 CI） 指的是，频繁地（一天多次）<strong>将代码集成到主干</strong>。</p><p>它的好处主要有两个。</p><ol><li><p><strong>快速发现错误。</strong>每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。</p></li><li><p><strong>防止分支大幅偏离主干</strong>。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</p></li></ol><p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p><p>Martin Fowler 说过，”持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</p><p>与持续集成相关的，还有两个概念，分别是持续交付和持续部署。</p><h3 id="4-1-2-持续交付"><a href="#4-1-2-持续交付" class="headerlink" title="4.1.2 持续交付"></a>4.1.2 持续交付</h3><p>持续交付（Continuous delivery）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。</p><p>持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</p><h3 id="4-1-3-持续部署"><a href="#4-1-3-持续部署" class="headerlink" title="4.1.3 持续部署"></a>4.1.3 持续部署</h3><p>持续部署（continuous deployment）是持续交付的下一步，指的是代码通过评审以后，<strong>自动部署</strong>到生产环境。</p><p>持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</p><p>持续部署的前提是能自动化完成测试、构建、部署等步骤。</p><h3 id="4-1-4-演示流程说明"><a href="#4-1-4-演示流程说明" class="headerlink" title="4.1.4 演示流程说明"></a>4.1.4 演示流程说明</h3><p>为了保证团队开发人员提交代码的质量，减轻了软件发布时的压力；<br>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复<br>过程以节省时间、费用和工作量；接下来我们会演示一套基本的自动化持续集成和持续部署方案，来帮助大家理解互联网企业的软件部署方案。</p><p>流程如下:</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605837774557-1625530478557.png" alt="1605837774557"></p><p>实现流程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1.</span> <span class="string">开发人员将代码提交到 git 指定分支   如: dev</span></span><br><span class="line"><span class="meta">2.</span> <span class="string">git仓库触发push事件，发送webhooks通知到持续集成软件</span></span><br><span class="line"><span class="meta">3.</span> <span class="string">持续集成软件触发构建任务，对dev分支的代码进行构建、编译、单元测试</span></span><br><span class="line"><span class="meta">4.</span> <span class="string">如果构建失败，发送邮件提醒代码提交人员或管理员</span></span><br><span class="line"><span class="meta">5.</span> <span class="string">如果构建成功，最新代码将会被构建Docker镜像并上传到注册中心</span></span><br><span class="line"><span class="meta">6.</span> <span class="string">构建成功触发webhooks通知容器编排软件，进行服务升级</span></span><br><span class="line"><span class="meta">7.</span> <span class="string">容器编排软件，触发对应的服务升级任务， 将创建对应服务的新容器替换之前的容器</span></span><br><span class="line"><span class="meta">8.</span> <span class="string">完成最新代码的自动构建与自动部署，全程无工作人员干预</span></span><br></pre></td></tr></table></figure><p>要实现上面流程，我们需要了解两款新的软件   <strong><code>jenkins</code> 和 <code>rancher</code></strong></p><h2 id="4-2-CI-amp-CD-jenkins"><a href="#4-2-CI-amp-CD-jenkins" class="headerlink" title="4.2 CI&amp;CD jenkins"></a>4.2 CI&amp;CD jenkins</h2><h3 id="4-2-1-jenkins介绍"><a href="#4-2-1-jenkins介绍" class="headerlink" title="4.2.1 jenkins介绍"></a>4.2.1 jenkins介绍</h3><p>Jenkins，原名Hudson，2011年改为现在的名字，它 是一个开源的实现持续集成的<br>软件工具。官方网站：<a href="http://jenkins-ci.org/">http://jenkins-ci.org/</a> 。</p><p> Jenkins 能实施<strong>监控集成中存在的错误</strong>，提供详细的日志文件和提醒功能，还能用图<br>表的形式形象地展示项目构建的趋势和稳定性。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605852309418-1625530478557.png" alt="1605852309418"></p><p>  特点：</p><ul><li><strong>易配置</strong>：提供友好的GUI配置界面；</li><li><strong>变更支持</strong>：Jenkins能从代码仓库（Subversion/CVS）中获取并产生代码更新列表并<br>输出到编译输出信息中；<br>支持永久链接：用户是通过web来访问Jenkins的，而这些web页面的链接地址都是<br>永久链接地址，因此，你可以在各种文档中直接使用该链接；</li><li><strong>集成E-Mail/RSS/IM</strong>：当完成一次集成时，可通过这些工具实时告诉你集成结果（据<br>我所知，构建一次集成需要花费一定时间，有了这个功能，你就可以在等待结果过程<br>中，干别的事情）；</li><li><strong>JUnit/TestNG</strong>测试报告：也就是用以图表等形式提供详细的测试报表功能；</li><li><strong>支持分布式构建</strong>：Jenkins可以把集成构建等工作分发到多台计算机中完成；<br>文件指纹信息：Jenkins会保存哪次集成构建产生了哪些jars文件，哪一次集成构建使<br>用了哪个版本的jars文件等构建记录；</li><li><strong>支持第三方插件</strong>：使得 Jenkins 变得越来越强大</li></ul><h3 id="4-2-2-安装配置jenkins"><a href="#4-2-2-安装配置jenkins" class="headerlink" title="4.2.2 安装配置jenkins"></a>4.2.2 安装配置jenkins</h3><p>jenkins的官方文档中提供了多种安装方式，本文选择docker的安装方式来学习jenkins</p><h4 id="4-2-2-1-安装jenkins"><a href="#4-2-2-1-安装jenkins" class="headerlink" title="4.2.2.1 安装jenkins"></a>4.2.2.1 安装jenkins</h4><p>更改系统配置：</p><p><strong>强烈建议虚拟机内存升级到4G，CPU给4核心</strong></p><p><strong>强烈建议虚拟机内存升级到4G，CPU给4核心</strong></p><p><strong>强烈建议虚拟机内存升级到4G，CPU给4核心</strong></p><p><strong>下载jenkins</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins/jenkins:lts-centos7 </span><br><span class="line">建议windows下载完之后再传到centos系统中！</span><br><span class="line">docker load -i ziliao.tar</span><br><span class="line">docker images (查看上面解压出来的镜像)</span><br></pre></td></tr></table></figure><p><strong>创建jenkins容器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name myjenkins -p 8888:8080 --restart=always jenkins/jenkins:lts-centos7</span><br></pre></td></tr></table></figure><p><strong>查看jenkins启动日志</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f myjenkins</span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210519212902939-1625530478557.png" alt="image-20210519212902939"></p><p>启动成功后 访问:</p><p><a href="http://192.168.80.151:8888/">http://192.168.80.151:8888</a></p><h4 id="4-2-2-2-解锁jenkins"><a href="#4-2-2-2-解锁jenkins" class="headerlink" title="4.2.2.2 解锁jenkins"></a>4.2.2.2 解锁jenkins</h4><p>第一次运行时，需要先解锁jenkins</p><p>具体步骤:</p><ol><li>去容器中 指定文件查看管理员密码 </li><li>将密码拷贝到文本框</li><li>点击继续即可</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605853229487-1625530478557.png" alt="1605853229487"></p><p><strong>密码在日志文件中已经打印，也可以根据提示在容器中获取</strong></p><p>具体解锁的管理员密码，在jenkins的安装目录中，因为我们是采用的容器安装，所以需要进入到容器中查看,命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入到jenkins容器</span></span><br><span class="line">docker exec -it myjenkins bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看密码</span></span><br><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将密码复制到上图管理员密码文本框，然后点击继续 完成解锁</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626172752249-1625530478557.png" alt="image-20210626172752249"></p><h4 id="4-2-2-3-安装推荐插件"><a href="#4-2-2-3-安装推荐插件" class="headerlink" title="4.2.2.3 安装推荐插件"></a>4.2.2.3 安装推荐插件</h4><p>jenkins的各项功能，依赖各种插件，可以手工选择安装也可以按照推荐安装</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626174213291-1625530478557.png" alt="image-20210626174213291"></p><p>我们课程主要使用git 和 chinese中文插件，所以搜索安装</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626174254482-1625530478557.png" alt="image-20210626174254482"></p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210626174400786-1625530478557.png" alt="image-20210626174400786"></p><p><strong>创建管理员用户</strong></p><p>插件安装完毕后，会进入到设置管理员用户页面，按自己需求设置就好，后续登录可以使用</p><p>设置完毕后点击保存并完成则进入到jenkins欢迎页</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605855220823-1625530478557.png" alt="1605855220823"></p><p>接下来，jenkins会让我们确认jenkins服务端的地址，直接下一步就好，</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626174604987-1625530478558.png" alt="image-20210626174604987"></p><p>然后点击开始使用jenkins进入到jenkins页面</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605855290646-1625530478558.png" alt="1605855290646"></p><p>进入到jenkins页面， 如果这个时候你的页面都是英文的话，重启下就好</p><p>(因为上面安装默认插件中已经安装了 中文插件)</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605855341537-1625530478558.png" alt="1605855341537"></p><h4 id="4-2-2-4-jenkins插件下载镜像加速"><a href="#4-2-2-4-jenkins插件下载镜像加速" class="headerlink" title="4.2.2.4 jenkins插件下载镜像加速"></a>4.2.2.4 jenkins插件下载镜像加速</h4><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626175433767-1625530478558.png" alt="image-20210626175433767"></p><p>更新地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626175748534-1625530478558.png" alt="image-20210626175748534"></p><h4 id="4-2-2-4-配置maven环境"><a href="#4-2-2-4-配置maven环境" class="headerlink" title="4.2.2.4 配置maven环境"></a><strong>4.2.2.4 配置maven环境</strong></h4><p>对于git中项目的构建我们要使用到maven命令，那么在jenkins中需要下载对应的maven插件，以及jenkins所在的容器也要有maven环境</p><p><strong>(1) 下载maven插件:</strong></p><p>点击系统管理 –&gt; 点击插件管理 –&gt; 进入到插件管理页面</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605855531632-1625530478558.png" alt="1605855531632"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605855558517-1625530478558.png" alt="1605855558517"></p><p>点击可选插件 –&gt; 输入maven –&gt; 勾选Maven Integration –&gt; 下载待重启安装</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605856223602-1625530478558.png" alt="1605856223602"></p><p>等待下载完成后，重启jenkins容器即可</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605856272958-1625530478558.png" alt="1605856272958"></p><p><strong>(2) 安装maven环境</strong></p><p>将资源中的maven安装包，拷贝到容器中解压即可，再配置好华为云镜像</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605511349048-1625530478558.png" alt="1605511349048"></p><p>将maven压缩包拷贝容器解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 目录根据自己实际情况来</span></span><br><span class="line">docker cp ./apache-maven-3.6.3-bin.tar.gz myjenkins:/var/jenkins_home/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入到容器</span></span><br><span class="line">docker exec -it -u root myjenkins bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将maven解压</span></span><br><span class="line">cd /var/jenkins_home</span><br><span class="line">tar -zxvf apache-maven-3.6.3-bin.tar.gz </span><br></pre></td></tr></table></figure><p>配置maven镜像</p><p>上传资料中的settings.xml文件到宿主机中并复制配置文件到容器中</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210626181013661-1625530478558.png" alt="image-20210626181013661"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp settings.xml myjenkins:/var/jenkins_home/apache-maven-3.6.3/conf/settings.xml</span><br></pre></td></tr></table></figure><p><strong>(3) jenkins中配置maven环境</strong></p><p>系统管理中点击全局工具配置</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605856856869-1625530478558.png" alt="1605856856869"></p><ol><li>新增maven</li><li>name随意,MAVEN_HOME: /var/jenkins_home/apache-maven-3.6.3</li><li>取消勾选自动安装</li><li>保存即可</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605857052762-1625530478558.png" alt="1605857052762"></p><p>完成后，我们就可以通过jenkins创建构建任务啦~~~</p><h4 id="Docker私有Registry"><a href="#Docker私有Registry" class="headerlink" title="Docker私有Registry"></a>Docker私有Registry</h4><p>（1）拉取私有仓库镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><p>（2）启动私有仓库容器   并 修改开机自启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id -p 5000:5000 --name myregistry --restart=always  registry</span><br></pre></td></tr></table></figure><p>（3）查看检验是否安装启动成功。</p><p>打开浏览器 输入地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.80.151:5000/v2/_catalog</span><br></pre></td></tr></table></figure><p>看到 {“repositories”:[]} ，表示私有仓库搭建成功并且内容为空</p><p><strong>设置当前docker信任私有注册中心</strong></p><p>（1）修改daemon.json，让 docker信任私有仓库地址</p><p>修改文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>添加如下内容，保存退出。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;192.168.80.151:5000&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：该文件中如有多个内容，比如有之前配置的私服镜像地址，用英文逗号隔开，参考如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://r2fftmt2.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;192.168.80.151:5000&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，ip地址要写自己的局域网ip地址哦</p><p>（2）重启docker 服务和私服</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="4-2-3-jenkins快速入门"><a href="#4-2-3-jenkins快速入门" class="headerlink" title="4.2.3 jenkins快速入门"></a>4.2.3 jenkins快速入门</h3><h4 id="4-2-3-1-准备要部署的工程"><a href="#4-2-3-1-准备要部署的工程" class="headerlink" title="4.2.3.1 准备要部署的工程"></a>4.2.3.1 准备要部署的工程</h4><p>准备工作，导入资源中的docker-demo工程, 在pom中添加docker-maven插件配置,</p><p>注意将IP部分变成自己虚拟机的IP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打jar包时如果不配置该插件，打出来的jar包没有清单文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插件网址:https://github.com/spotify/docker-maven-plugin --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>192.168.80.151:5000/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>java:8-alpine <span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>[&quot;java&quot;,&quot;-jar&quot;,&quot;/$&#123;project.build.finalName&#125;.jar&quot;]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                               <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://192.168.80.151:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面插件中的configuration标签配置<strong>指明打包命名格式，docker镜像命名，只要符合一定格式的命名才能上传到本地镜像仓库</strong>，注意<strong>要更改ip地址为自己的虚拟机ip地址</strong>！</p><p>将项目上传到码云(gitee.com)中(idea中快速将项目push到gitee中的方法请参考如下连接：)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2022/03/15/Day10-git/</span></span><br></pre></td></tr></table></figure><p>Git中的地址: <a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#x74;&#x65;&#x65;&#x2e;&#99;&#111;&#109;">&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#x74;&#x65;&#x65;&#x2e;&#99;&#111;&#109;</a>:taft31/docker-demo.git</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210626182453657-1625530478558.png" alt="image-20210626182453657"></p><h4 id="4-2-3-2-创建maven构建任务"><a href="#4-2-3-2-创建maven构建任务" class="headerlink" title="4.2.3.2 创建maven构建任务"></a>4.2.3.2 创建maven构建任务</h4><p><strong>(1) 新建jenkins任务</strong></p><p>在jenkins的首页的第一个页签就是用于构建任务，点击新建任务:</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605857248023-1625530478559.png" alt="1605857248023"></p><p>定义任务名名称，勾选构建模板 保存任务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626182544621-1625530478559.png" alt="image-20210626182544621"></p><p><strong>(2) 设置任务的构建信息:</strong></p><p><strong>描述信息设置</strong></p><p>如可以写成如下描述信息哈：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">拉取Gitee上的代码，并调用maven插件达成jar包，再将打好的包做成镜像，推送到本地镜像仓库。</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605857417849-1625530478559.png" alt="1605857417849"></p><p>**源码设置 **</p><p> jenkins可以根据配置的源码地址获取源码，来用于构建，配置如下:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1.</span> <span class="string">选择git仓库</span></span><br><span class="line"><span class="meta">2.</span> <span class="string">设置git仓库地址 (将上面push的仓库地址填进去)</span></span><br><span class="line"><span class="meta">3.</span> <span class="string">如果是私有仓库需要添加凭证</span></span><br><span class="line"><span class="meta">4.</span> <span class="string">选择仓库分支</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605857556647-1625530478559.png" alt="1605857556647"></p><p><strong>构建触发器:</strong> </p><p>什么情况可以触发此任务，或者定时触发此任务，<strong>暂不设置</strong></p><p><strong>构建设置</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. Pre Steps 构建的前置任务，可以在构建执行前触发一些通知或脚本的执行</span><br><span class="line"><span class="number">2</span>. build 要执行的构建任务</span><br><span class="line"><span class="number">3</span>. PostSteps 构建的后置任务，可以在完成构建后触发的一些通知或脚本的执行</span><br></pre></td></tr></table></figure><p>构建任务配置如下:</p><p><code>Root POM</code>:  本次构建要使用的git仓库中的pom文件</p><p><code>Goals and options</code>: 要执行的mvn命令  不用写前面的mvn</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> maven命令</span> </span><br><span class="line">clean package -DskipTests docker:build -DpushImage</span><br><span class="line"><span class="meta">#</span><span class="bash">意思是 依次进行: 清除 打包 跳过单元测试 远程构建镜像  上传镜像到注册中心</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605857730695-1625530478559.png" alt="1605857730695"></p><p><strong>构建结果通知</strong></p><p>可以将构建结果，通知给配置的管理员或触发此任务的代码上传人员，本文不配置</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605857813161-1625530478559.png" alt="1605857813161"></p><p><strong>保存任务</strong></p><p>点击保存即可</p><p><strong>构建前要确认docker的2375端口是开放</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑此文件</span></span><br><span class="line">vi /lib/systemd/system/docker.service</span><br><span class="line"><span class="comment"># 修改此行配置</span></span><br><span class="line">ExecStart=/usr/bin/dockerd <span class="literal">-H</span> tcp://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2375</span> <span class="literal">-H</span> unix:///var/run/docker.sock <span class="literal">-H</span> tcp://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">7654</span></span><br><span class="line"><span class="comment"># 重新加配置文件并重启docker</span></span><br><span class="line">systemctl daemon<span class="literal">-reload</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="4-2-3-3-执行maven构建任务"><a href="#4-2-3-3-执行maven构建任务" class="headerlink" title="4.2.3.3 执行maven构建任务"></a>4.2.3.3 执行maven构建任务</h4><p><strong>（1）执行构建任务</strong></p><p>当我们保存完毕任务之后，会进入到任务的详情页面， 点击立即构建即可执行该构建任务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605858494552-1625530478559.png" alt="1605858494552"></p><p>或者返回首页面板，也能看到任务列表，列表后面的图标也可以用于构建</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605858525007-1625530478559.png" alt="1605858525007"></p><p><strong>（2） 查看任务执行日志</strong></p><p>点击构建后，在页面左下会出现任务的执行状态，点击进度条进入到任务构建详情中</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605858565132-1625530478559.png" alt="1605858565132"></p><p>可以通过控制台输出页面，查看控制台信息，和我们在idea控制中看到的信息类似</p><p>第一次执行会下载很多maven依赖</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605858604063-1625530478559.png" alt="1605858604063"></p><p>实际上，jenkins是从我们配置的git中拉取了源码信息，在使用maven的命令进行构建</p><p><strong>（3） 查看任务构建结果</strong></p><p>控制台出现  <code>BUILD SUCCESS</code> 代表构建成功啦</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605858832629-1625530478559.png" alt="1605858832629"></p><p>对应的虚拟机中已经有了这个镜像</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626200126181-1625530478559.png" alt="image-20210626200126181"></p><p>对应的注册中心中也上传了此镜像</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626200220451-1625530478559.png" alt="image-20210626200220451"></p><p>OK 那么接下来基于这个镜像构建出容器，我们就完成了部署。</p><h2 id="4-3-容器编排平台-Rancher"><a href="#4-3-容器编排平台-Rancher" class="headerlink" title="4.3 容器编排平台 Rancher"></a>4.3 容器编排平台 Rancher</h2><h3 id="4-3-1-Rancher介绍"><a href="#4-3-1-Rancher介绍" class="headerlink" title="4.3.1 Rancher介绍"></a>4.3.1 Rancher介绍</h3><p>前面我们了解了容器编排的概念，如: docker 的Swarm以及  google的k8s, 但是这些软件的入门门槛很高，需要我们记住很多命令，那么下面我们介绍一款软件 Rancher，它可以基于上面的容器编排软件，提供可视化的操作页面 实现容器的编排和管理。</p><p>Rancher是一个开源的企业级全栈化容器部署及管理平台。Rancher为容器提供一揽<br>子基础架构服务：CNI兼容的网络服务、存储服务、主机管理、负载均衡、防护墙……<br>Rancher让上述服务跨越公有云、私有云、虚拟机、物理机环境运行，真正实现一键式应<br>用部署和管理。<br> <a href="https://www.cnrancher.com/">https://www.cnrancher.com/</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605858952789-1625530478560.png" alt="1605858952789"></p><h3 id="4-3-1-Rancher快速入门"><a href="#4-3-1-Rancher快速入门" class="headerlink" title="4.3.1 Rancher快速入门"></a>4.3.1 Rancher快速入门</h3><h4 id="4-3-1-1-安装Rancher"><a href="#4-3-1-1-安装Rancher" class="headerlink" title="4.3.1.1 安装Rancher"></a>4.3.1.1 安装Rancher</h4><p>下载rancher</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rancher/server</span><br></pre></td></tr></table></figure><p>创建rancher容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=myrancher -p 9099:8080 rancher/server</span><br></pre></td></tr></table></figure><p>查看rancher启动日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f myrancher</span><br></pre></td></tr></table></figure><p>访问Rancher:  <a href="http://192.168.80.151:9099/">http://192.168.80.151:9099/</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859055814-1625530478560.png" alt="1605859055814"></p><p>页面右下角 点击下拉框 选择简体中文</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859091466-1625530478560.png" alt="1605859091466"></p><h4 id="4-3-1-2-配置环境"><a href="#4-3-1-2-配置环境" class="headerlink" title="4.3.1.2 配置环境"></a>4.3.1.2 配置环境</h4><p>在互联网项目中，可能会有多套部署环境 如: 测试环境 、 生产环境，不同的环境下会有不同的服务器 Rancher支持多环境多服务器管理</p><p>默认 我们处于default的默认环境中，点击环境管理可以创建环境</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859140946-1625530478560.png" alt="1605859140946"></p><p>点击添加环境可以定义一个环境</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859175441-1625530478560.png" alt="1605859175441"></p><p>构建环境时，需要设置环境的名称、环境描述、及环境模板</p><p>可以看到 环境模板支持多套，所谓的环境模板就是底层使用哪种编排工具</p><p>rancher支持 cattle、swarm、k8s、mesos等,默认使用cattle</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859229797-1625530478560.png" alt="1605859229797"></p><p>入门案例我们使用内置的Cattle模板即可，添加后列表出现刚创建的环境</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859274224-1625530478560.png" alt="1605859274224"></p><p>切换到prod环境中</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859327642-1625530478560.png" alt="1605859327642"></p><h4 id="4-3-1-3-配置主机"><a href="#4-3-1-3-配置主机" class="headerlink" title="4.3.1.3 配置主机"></a>4.3.1.3 配置主机</h4><p>在不同的环境中可以会有不同的服务器，要想让我们的rancher能够管理这些服务器，需要在基础架构中添加主机</p><p><strong>（1） 添加主机</strong></p><p>点击基础架构下拉框中的<code>主机</code> –&gt; 在点击<code>添加主机</code> </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859380135-1625530478560.png" alt="1605859380135"></p><p><strong>(2) 复制脚本</strong></p><p>确认站点地址是否正确，然后点击保存（端口9099）</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626203241022-1625530478560.png" alt="image-20210626203241022"></p><p>复制脚本:</p><ol><li>要管理的主机IP  如: 要管理 192.168.80.151的虚拟机，因此<strong>下面的红圈1 中的ip要作修改</strong></li><li>复制脚本，将脚本复制到192.168.80.151的机器上执行</li><li>执行完毕后关闭此页面，等待主机连接</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626220858903-1625530478560.png" alt="image-20210626220858903"></p><p><strong>(3) 到主机中执行脚本</strong></p><p>如: 到我的192.168.80.151的虚拟机中 执行如下命令:</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605859702912-1625530478560.png" alt="1605859702912"></p><p>运行完毕后，在rancher的页面上，关闭窗口 可以在主机列表中看到对应服务器信息</p><p>（需要等待主机中下载镜像及启动相关容器）</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626221247380-1625530478560.png" alt="image-20210626221247380"></p><p>显示<code>active</code> 代表服务器当前状态可用， 如果报红 或显示<code>reconnecting</code>则为重连状态，等待一会即可</p><h4 id="4-3-1-4-管理容器"><a href="#4-3-1-4-管理容器" class="headerlink" title="4.3.1.4 管理容器"></a>4.3.1.4 管理容器</h4><p>连接成功后，我们可以点击<code>基础架构</code>下的<code>容器</code> 进行容器的管理</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210626204226263-1625530478561.png" alt="image-20210626204226263"></p><p>说明:</p><p>（1）页面提供了对应主机上的容器管理功能，额外创建的容器都是系统容器，用于rancher的管理，可以通过 取消勾选显示系统容器进行过滤</p><p>（2）<strong>点击添加容器，可以通过简单配置构建一个容器</strong></p><p>​    如: 构建一个redis容器</p><ol><li>点击添加容器</li><li>配置容器名称、描述、镜像、端口映射即可</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605860222158-1625530478561.png" alt="1605860222158"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605860305990-1625530478561.png" alt="1605860305990"></p><p>（3）容器列表结尾提供了容器的 重启、删除、查看日志等功能</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605860374959-1625530478561.png" alt="1605860374959"></p><h3 id="4-3-3-Rancher中的应用与服务"><a href="#4-3-3-Rancher中的应用与服务" class="headerlink" title="4.3.3 Rancher中的应用与服务"></a>4.3.3 Rancher中的应用与服务</h3><h4 id="4-3-3-1-应用与服务的概念"><a href="#4-3-3-1-应用与服务的概念" class="headerlink" title="4.3.3.1 应用与服务的概念"></a>4.3.3.1 应用与服务的概念</h4><p>上面的容器管理，<strong>仅仅是提供了容器的管理页面</strong>，但对于企业级的项目部署 会涉及到<strong>集群扩容缩容、服务升级、负载均衡等等高可用的管理</strong>。需要在Rancher中通过定义应用与服务的设置来管理。</p><p>应用(Project): 代表一个项目     如: 电商项目</p><p>服务(Service):代表一个服务     如: 电商项目下的订单微服务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605841694459-1625530478561.png" alt="1605841694459"></p><h4 id="4-3-3-2-创建应用与服务"><a href="#4-3-3-2-创建应用与服务" class="headerlink" title="4.3.3.2 创建应用与服务"></a>4.3.3.2 创建应用与服务</h4><p>和我们学习的swarm类似，我们可以创建一个应用<code>project</code>  一个应用下可以包含多个服务</p><p><code>service</code> , 一个服务下可以运行多个相同的容器<code>container</code></p><p><strong>创建应用</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605860470039-1625530478561.png" alt="1605860470039"></p><p>点击到环境首页，创建应用 ： 应用名称、描述  点击创建</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605860527144-1625530478561.png" alt="1605860527144"></p><p><strong>添加服务</strong></p><p>在刚创建好的myPro应用中添加服务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605860574808-1625530478561.png" alt="1605860574808"></p><p>设置服务信息: </p><ol><li>容器名称(rancher中显示的名称)</li><li>描述</li><li>构建创建前拉取最新镜像</li><li>镜像的名称</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626224317219-1625530478561.png" alt="image-20210626224317219"></p><p>点击创建，可以看到容器已经运行</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626223532122-1624718132586-1625530478561.png" alt="image-20210626223532122"></p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626223551798-1625530478561.png" alt="image-20210626223551798"></p><p>在docker中也有对应的服务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605861203059-1625530478561.png" alt="1605861203059"></p><h4 id="4-3-3-3-演示服务扩容"><a href="#4-3-3-3-演示服务扩容" class="headerlink" title="4.3.3.3 演示服务扩容"></a>4.3.3.3 演示服务扩容</h4><p>点击左侧的 数量加减 会自动对服务进行扩容 缩容</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626224416672-1625530478561.png" alt="image-20210626224416672"></p><h4 id="4-3-3-4-演示服务负载均衡"><a href="#4-3-3-4-演示服务负载均衡" class="headerlink" title="4.3.3.4 演示服务负载均衡"></a>4.3.3.4 演示服务负载均衡</h4><p>不过我们当前服务集群 <strong>并没有配置端口映射</strong>，因此<strong>外部无法访问，需要配置负载均衡</strong></p><p>回到服务列表，添加负载均衡</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605861417894-1625530478561.png" alt="1605861417894"></p><p>配置负载均衡</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      <span class="meta">1.负载均衡名称</span> : <span class="string">lbdockerDemo</span></span><br><span class="line"><span class="meta">​</span>      <span class="string">2.负载均衡描述 : dockerDemo的负载均衡</span></span><br><span class="line"><span class="meta">​</span>      <span class="string">3.访问端口:   9001</span></span><br><span class="line"><span class="meta">​</span>      <span class="string">4.目标服务: myPro/dockerDemo</span></span><br><span class="line"><span class="meta">​</span>      <span class="string">5.映射服务容器端口: 9090</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605861694062-1625530478562.png" alt="1605861694062"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626224727637-1625530478562.png" alt="image-20210626224727637"></p><p>访问测试:  <a href="http://192.168.80.151:9001/hello">http://192.168.80.151:9001/hello</a>  多次点击</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626224903555-1624718944104-1625530478562.png" alt="image-20210626224903555"></p><p>依次查看3个容器的日志</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862093699-1625530478562.png" alt="1605862093699"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862150892-1625530478562.png" alt="1605862150892"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862172571-1625530478562.png" alt="1605862172571"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862198473-1625530478562.png" alt="1605862198473"></p><p>​    已经实现了负载均衡效果~~~~</p><p><strong>应用服务部署总结：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">由于一开始需要本地仓库，因此registry 容器早就开始运行了</span></span><br><span class="line"><span class="attr">2</span> <span class="string">上面也添加了redis容器</span></span><br><span class="line"><span class="attr">3</span> <span class="string">添加应用，应用中添加并运行服务镜像</span></span><br><span class="line"><span class="meta">（我们idea</span> <span class="string">编写的项目，然后通过 gitee，jenkins等配置生成了镜像）</span></span><br><span class="line"><span class="attr">4</span> <span class="string">添加负载均衡（相当于添加了nginx容器）</span></span><br><span class="line"><span class="attr">5</span> <span class="string">通过 虚拟机ip+访问端口 来访问nginx，然后自动均衡负载访问到我们应用中的服务</span></span><br><span class="line"><span class="attr">6</span> <span class="string">通过rancher 管理平台方便实现扩容，减容。</span></span><br></pre></td></tr></table></figure><p><strong>同样的效果，对比前面学习的方法</strong>：将每一个镜像拉取下来，自己的项目镜像上传到虚拟机，然后通过docker编排文件构建应用服务，通过命令行扩容，缩容等操作，<strong>利用idea+git+ jenkins+rancher 来可视化部署，高端多了！</strong></p><h4 id="4-3-3-5-演示服务升级"><a href="#4-3-3-5-演示服务升级" class="headerlink" title="4.3.3.5 演示服务升级"></a>4.3.3.5 演示服务升级</h4><p>访问当前服务 <a href="http://192.168.206.66:9001/hello">http://192.168.206.66:9001/hello</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626225151134-1625530478562.png" alt="image-20210626225151134"></p><p>变更当前代码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862350110-1625530478562.png" alt="1605862350110"></p><p>push提交到git</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862398258-1625530478562.png" alt="1605862398258"></p><p>执行jenkins构建任务，将最新的代码打包成新镜像，并上传到注册中心</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862470028-1625530478562.png" alt="1605862470028"></p><p>构建成功后，在rancher中进行服务升级 在详情页面或列表页面都有向上的箭头代表服务升级</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605862595138-1625530478562.png" alt="1605862595138"></p><p>填写升级信息， 启动行为勾选：先启动再停止</p><p>这样会先根据最新镜像创建容器，创建完毕后，再将之前的容器删除，来完成服务的更新</p><p><strong>点击升级</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626230551086-1625530478562.png" alt="image-20210626230551086"></p><p>最后，点击完成升级 旧的容器将被删除掉</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626230746572-1625530478562.png" alt="image-20210626230746572"></p><p>刷新页面，可以看到服务已经升级完毕</p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210626231005676-1625530478562.png" alt="image-20210626231005676"></p><p>也就意味着完成服务的一键部署。</p><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">上面应用服务的部署可能让你觉得利用jenkins</span> <span class="string">+ rancher 也不过如此，</span></span><br><span class="line"><span class="meta">那么，这里的升级：idea中push+jenkins中构建+rancher中升级</span> <span class="string">几个步骤操作 </span></span><br><span class="line"><span class="attr">会让你更能体验到这种构建部署的便捷之处</span></span><br></pre></td></tr></table></figure><h2 id="4-4-自动集成及自动部署"><a href="#4-4-自动集成及自动部署" class="headerlink" title="4.4 自动集成及自动部署"></a>4.4 自动集成及自动部署</h2><p>上面的演示中，当我们<strong>把idea上的代码提交到git中之后， 手动的点击了jenkins中的构建任务，完成镜像的构建和上传注册中心。 然后，在到rancher软件中，根据最新的镜像完成一键升级</strong>。 <strong>那么自动化的流程就是让这两部也变成自动的</strong>（牛逼），我们只需要将代码上传到指定分支将会自动化的完成构建与升级部署。</p><h3 id="4-4-1-自动通知jenkins触发任务"><a href="#4-4-1-自动通知jenkins触发任务" class="headerlink" title="4.4.1 自动通知jenkins触发任务"></a>4.4.1 自动通知jenkins触发任务</h3><p>主流的git软件都提供了webhooks功能(web钩子), 通俗点说就是<strong>git在发生某些事件的时候可以通过POST请求调用我们指定的URL路径</strong>，那在这个案例中，我们可以<strong>在push事件上指定jenkins的任务通知路径</strong>。</p><h4 id="4-4-1-1-jenkins配置Gitee插件"><a href="#4-4-1-1-jenkins配置Gitee插件" class="headerlink" title="4.4.1.1 jenkins配置Gitee插件"></a>4.4.1.1 jenkins配置Gitee插件</h4><p><strong>jenkins下载webhooks插件</strong></p><p>gitee插件介绍: <a href="https://gitee.com/help/articles/4193#article-header0">https://gitee.com/help/articles/4193#article-header0</a></p><p>jenkins也支持通过url路径来启动任务，具体设置方法: </p><p>jenkins的默认下载中仅下载了github的通知触发,我们需要先下载一个插件</p><p>(1) 下载gitee插件</p><p>系统管理–&gt;插件管理–&gt;可选插件–&gt;搜索 <code>Gitee</code> 下载–&gt;重启jenkins</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605863059692-1625530478562.png" alt="1605863059692"></p><p>(2) gitee生成访问令牌</p><p>   首先，去下面网址生成gitee访问令牌</p><p>   <a href="https://gitee.com/profile/personal_access_tokens">https://gitee.com/profile/personal_access_tokens</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605863332642-1625530478563.png" alt="1605863332642"></p><p> 添加令牌描述，提交，弹出框输入密码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605863372394-1625530478563.png" alt="1605863372394"></p><p>复制令牌</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605863446752-1625530478563.png" alt="1605863446752"></p><p>（3） jenkins中配置Gitee</p><p>系统管理 –&gt; 系统配置 –&gt; Gitee配置</p><ol><li>链接名: gitee</li><li>域名: <a href="https://gitee.com/">https://gitee.com</a></li><li>令牌: Gitee Api 令牌   (需要点击添加按下图配置)</li><li>配置好后测试连接</li><li>测试成功后保存配置</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605864020886-1625530478563.png" alt="1605864020886"></p><p>令牌配置: </p><ol><li>类型选择Gitee API令牌</li><li>私人令牌: 将码云中生成的令牌复制过来</li><li>点击添加</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605863756159-1625530478563.png" alt="1605863756159"> </p><h4 id="4-4-1-2-修改jenkins构建任务"><a href="#4-4-1-2-修改jenkins构建任务" class="headerlink" title="4.4.1.2 修改jenkins构建任务"></a>4.4.1.2 修改jenkins构建任务</h4><p><strong>修改配置接收webhooks通知</strong>（<strong>前面是手动构建，这里配置后，gitee仓库被push后就会通知jenkins进行构建！</strong>）</p><p>任务详情中点击配置来修改任务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605864126335-1625530478563.png" alt="1605864126335"></p><p>点击构建触发器页签,勾选<code>Gitee webhook</code></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626235155347-1625530478563.png" alt="image-20210626235155347"></p><p>生成Gitee Webhook密码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605864316485-1625530478563.png" alt="1605864316485"></p><p>保存好触发路径和webhook密码，到gitee中配置webhook通知</p><p>如: </p><p><strong>触发路径:</strong>  <a href="http://192.168.80.151:8888/gitee-project/dockerDemo">http://192.168.80.151:8888/gitee-project/dockerDemo</a></p><p><strong>触发密码:</strong> a591baa17f90e094500e0a11b831af9c</p><h4 id="4-4-1-3-Gitee添加webhooks通知"><a href="#4-4-1-3-Gitee添加webhooks通知" class="headerlink" title="4.4.1.3 Gitee添加webhooks通知"></a>4.4.1.3 Gitee添加webhooks通知</h4><p><strong>gitee仓库配置webhooks通知</strong></p><p>点击仓库页面的管理</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626235434055-1625530478563.png" alt="image-20210626235434055"></p><p>添加webhook</p><ol><li>点击webhooks菜单，然后点击添加</li><li>配置jenkins通知地址</li><li>填写密码</li><li>点击添加</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626235610214-1625530478563.png" alt="image-20210626235610214"></p><p>但在点击添加时，提示失败 <strong>gitee中需要配置一个公有IP或域名</strong>，这里我们可以<strong>通过内网穿透来解决</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605877091111-1625530478563.png" alt="1605877091111"></p><h4 id="4-4-1-4-配置内网穿透"><a href="#4-4-1-4-配置内网穿透" class="headerlink" title="4.4.1.4 配置内网穿透"></a>4.4.1.4 配置内网穿透</h4><p>内网穿透的小工具很多，这里面我们使用 natapp提供的内网穿透功能</p><p>在资料中找到natapp,上传整个目录到linux，</p><p>并进入natapp，执行命令</p><p>授权</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x natapp </span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./natapp</span><br></pre></td></tr></table></figure><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210627000411799-1625530478563.png" alt="image-20210627000411799"></p><p>在gitee中将上面的<strong>外网地址替换之前的ip和端口部分</strong>，再次添加，</p><p>如：<a href="http://hgyyd3.natappfree.cc/gitee-project/dockerDemo">http://hgyyd3.natappfree.cc/gitee-project/dockerDemo</a></p><p>上面截图中，Forwarding 后面的域名替代就好！</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626235755243-1625530478563.png" alt="image-20210626235755243"></p><p>添加成功</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210626235815645-1624723096121-1625530478563.png" alt="image-20210626235815645"></p><h4 id="4-4-1-5-测试自动构建"><a href="#4-4-1-5-测试自动构建" class="headerlink" title="4.4.1.5 测试自动构建"></a>4.4.1.5 测试自动构建</h4><p>添加完毕后测试一下:</p><p>点击webhooks,发送测试请求</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627000626447-1624723586914-1625530478563.png" alt="image-20210627000626447"></p><p>点击查看更多结果，200代表请求成功</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627000651626-1625530478563.png" alt="image-20210627000651626"></p><p>不过这个时候jenkins中的任务是没被触发的，我们尝试从idea中上传代码，看看任务是否自动构建</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627002215324-1625530478563.png" alt="image-20210627002215324"></p><p>上传代码</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605865274308-1625530478564.png" alt="1605865274308"></p><p>代码上传到git后，自动触发了jenkins中的构建任务</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627000820697-1625530478564.png" alt="image-20210627000820697"></p><p>上面配置完了jenkins：idea 项目push到gitee后自动构建镜像，下面配置Rancher，出发自动升级！</p><h3 id="4-4-2-Jenkins自动通知Rancher触发升级"><a href="#4-4-2-Jenkins自动通知Rancher触发升级" class="headerlink" title="4.4.2 Jenkins自动通知Rancher触发升级"></a>4.4.2 Jenkins自动通知Rancher触发升级</h3><h4 id="4-4-2-1-Rancher配置接收器"><a href="#4-4-2-1-Rancher配置接收器" class="headerlink" title="4.4.2.1 Rancher配置接收器"></a>4.4.2.1 Rancher配置接收器</h4><p>在rancher中，配置接收器来接收webhooks通知</p><p>在api下拉菜单下，点击webhooks添加接收器</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605865468861-1625530478564.png" alt="1605865468861"></p><ol><li><p>名称:自定义即可</p></li><li><p>类型：支持扩容，缩容，和服务升级 我们演示服务升级</p></li><li><p>参数格式: Docker Hub即可</p></li><li><p>镜像标签: 对应镜像的标签</p></li><li><p>服务选择器: 我们的服务也可以设置标签， 如: <strong>当前标签service=demo</strong></p></li></ol><p>​      <strong>当这个接收器被触发时，所有服务包含此标签的 service=demo 则会触发服务升级</strong></p><ol start="6"><li>后面参数的概念:</li></ol><p><strong>先启动一个新容器， 启动成功后停止老容器，最后删除老容器完成升级</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627001042333-1625530478564.png" alt="image-20210627001042333"></p><p>保存，复制触发url路径</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/1605865748613-1625530478564.png" alt="1605865748613"></p><p>触发路径:</p><p><a href="http://192.168.80.151:9099/v1-webhooks/endpoint?key=ajTY9M3GYC4geiy255UtQ0XuxluQtidIvp8mav96&amp;projectId=1a7">http://192.168.80.151:9099/v1-webhooks/endpoint?key=ajTY9M3GYC4geiy255UtQ0XuxluQtidIvp8mav96&amp;projectId=1a7</a></p><h4 id="4-4-2-2-服务添加标签"><a href="#4-4-2-2-服务添加标签" class="headerlink" title="4.4.2.2 服务添加标签"></a>4.4.2.2 服务添加标签</h4><p>最后，<strong>给我们的服务设置标签，删除之前的服务，重新添加服</strong>务 ，<strong>以及负载均衡器</strong></p><p>注意在下面标签下的内容，一致要和接收器设置的标签和值一致此服务才会触发升级</p><p><strong>标签:  service      docker</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627001326171-1625530478564.png" alt="image-20210627001326171"></p><h4 id="4-4-2-3-测试服务升级"><a href="#4-4-2-3-测试服务升级" class="headerlink" title="4.4.2.3 测试服务升级"></a>4.4.2.3 测试服务升级</h4><p>通过POSTMAN进行测试</p><p>在触发请求时还需要携带一些必要的参数:</p><ol><li>镜像的标签 tag: 这个标签的值要和上面接收器中的标签值一致才可以触发</li><li>仓库的名称 repo_name: 镜像的仓库名称</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;push_data&quot;: &#123;</span><br><span class="line">        &quot;tag&quot;: &quot;1.0.0-SNAPSHOT&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;repository&quot;: &#123;</span><br><span class="line">        &quot;repo_name&quot;: &quot;192.168.80.151:5000/docker-demo&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/07.Docker高级/resources/img/image-20210627001556812-1625530478564.png" alt="image-20210627001556812"></p><p>点击完毕后观察rancher中服务列表变化，会发现服务将自动完成升级</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627002142463-1625530478564.png" alt="image-20210627002142463"></p><h4 id="4-4-2-4-配置jenkins的后置处理"><a href="#4-4-2-4-配置jenkins的后置处理" class="headerlink" title="4.4.2.4 配置jenkins的后置处理"></a>4.4.2.4 配置jenkins的后置处理</h4><p>最后，让jenkins来触发rancher,修改jenkins中的配置</p><ol><li>在构建完毕的后置处理步骤中添加 执行Shell脚本</li><li>选择Run only if build succeeds 仅在构建成功时运行下面脚本</li><li>执行脚本</li></ol><p>注意: 调用的路径是我们接收器所生成的路径</p><p>tag: 是镜像的tag标签</p><p>repo_name: 是对应镜像的仓库名称</p><p>要根据自己的实际情况修改哦~~~~~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://192.168.80.151:9099/v1-webhooks/endpoint?key=KoA2vrxiAycydPNDwlb3DLkZ5Kghdshs58lN2lia&amp;projectId=1a13&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;Content-Type:application/json&quot;</span> \</span><br><span class="line">-d <span class="string">&quot;&#123;\&quot;push_data\&quot;: &#123;\&quot;tag\&quot;: \&quot;1.0.0-SNAPSHOT\&quot;&#125;,\&quot;repository\&quot;: &#123;\&quot;repo_name\&quot;: \&quot;192.168.80.151:5000/docker-demo\&quot;&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627002516069-1625530478564.png" alt="image-20210627002516069"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627002549319-1625530478564.png" alt="image-20210627002549319"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627002730322-1625530478564.png" alt="image-20210627002730322"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/image-20210627002831259-1625530478564.png" alt="image-20210627002831259"></p><h3 id="4-4-3-自动集成-amp-自动部署演示"><a href="#4-4-3-自动集成-amp-自动部署演示" class="headerlink" title="4.4.3 自动集成&amp;自动部署演示"></a><strong>4.4.3 自动集成&amp;自动部署演示</strong></h3><p>操作步骤:</p><ol><li>变更代码并上传到git </li><li>注意jenkins任务是否被触发</li><li>注意rancher自动升级是否被触发</li><li>访问项目查看变更是否生效</li></ol><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/docker%E9%AB%98%E7%BA%A7/sqmxvOw23L-1625530478564.gif" alt="sqmxvOw23L"></p><p>OK，如果成功了，说明你只需要提交代码就可以了， 和部署相关的 <strong>编译，测试，构建，上传镜像，服务升级，扩容缩容</strong>全部交给工具吧~~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker高级&quot;&gt;&lt;a href=&quot;#Docker高级&quot; class=&quot;headerlink&quot; title=&quot;Docker高级&quot;&gt;&lt;/a&gt;Docker高级&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;学习目标&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="Docker Compose" scheme="http://example.com/tags/Docker-Compose/"/>
    
    <category term="Docker Swarm" scheme="http://example.com/tags/Docker-Swarm/"/>
    
    <category term="jenkins" scheme="http://example.com/tags/jenkins/"/>
    
    <category term="Rancher" scheme="http://example.com/tags/Rancher/"/>
    
  </entry>
  
  <entry>
    <title>numpy-小练习</title>
    <link href="http://example.com/2022/05/23/numpy-%E5%B0%8F%E7%BB%83%E4%B9%A0/"/>
    <id>http://example.com/2022/05/23/numpy-%E5%B0%8F%E7%BB%83%E4%B9%A0/</id>
    <published>2022-05-23T15:20:55.000Z</published>
    <updated>2022-05-24T13:02:36.105Z</updated>
    
    <content type="html"><![CDATA[<p>以练习为导向，感觉更能吸收，就是做题，以解决问题为导向去学。</p><p>问题：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 打印当前Numpy版本</span></span><br><span class="line"><span class="comment">#2 构造一个全零的矩阵，并打印其占用的内存大小</span></span><br><span class="line"><span class="comment">#3 打印一个函数的帮助文档，比如numpy.add</span></span><br><span class="line"><span class="comment">#4 创建一个10-49的数组，并将其倒序排列</span></span><br><span class="line"><span class="comment">#5 找到一个数组中不为0的索引</span></span><br><span class="line"><span class="comment">#6 随机构造一个3*3矩阵，并打印其中最大与最小值</span></span><br><span class="line"><span class="comment">#7 构造一个5*5的矩阵，令其值都为1，并在最外层加上一圈0</span></span><br><span class="line"><span class="comment">#8 构建一个shape为（6，7，8）的矩阵，并找到第100个元素的索引值</span></span><br><span class="line"><span class="comment">#9 对一个5*5的矩阵做归一化操作 ###############归一化！！！</span></span><br><span class="line"><span class="comment">#9 找到两个数组中相同的值</span></span><br><span class="line"><span class="comment">#10 得到今天 明天 昨天的日期   牛，但是有啥用</span></span><br><span class="line"><span class="comment">#11 得到一个月中所有的天   牛，但是有啥用</span></span><br><span class="line"><span class="comment">#12 得到数组的整数部分</span></span><br><span class="line"><span class="comment">#13 构造一个数组，让它不能被改变</span></span><br><span class="line"><span class="comment">#14 打印大数据的部分值，全部值</span></span><br><span class="line"><span class="comment">#15 找到在一个数组中，最接近一个数的索引</span></span><br><span class="line"><span class="comment">#16 32位float类型和32位int类型转换</span></span><br><span class="line"><span class="comment">#17 #### 打印数组元素位置坐标与数值  ：枚举操作</span></span><br><span class="line"><span class="comment">#18按照数组的某一列进行排序,按照某一行排序似乎不行啊。！解答：需要转置</span></span><br><span class="line"><span class="comment">#19 按照数组的某一列进行倒序排序</span></span><br><span class="line"><span class="comment">#20 第一行从小到大排序：</span></span><br><span class="line"><span class="comment">    # *1，先把矩阵转置，这样本来是行的数据就变成列的数据，列的数据就变成行的数据</span></span><br><span class="line"><span class="comment">    # *2，对转置后的矩阵进行按某列排序</span></span><br><span class="line"><span class="comment">    # *3. 排序后的矩阵在做一次转置，转回来后的矩阵就是原矩阵按某行排序的矩阵了。</span></span><br><span class="line"><span class="comment">#21 统计数组中每个数值出现的次数</span></span><br><span class="line"><span class="comment">#22  如何对一个四维数组的最后两维来求和</span></span><br><span class="line"><span class="comment">#23 交换矩阵中的两行，两列。</span></span><br><span class="line"><span class="comment">#24 #### 找到一个数组中最常出现的数字   先统计，然后argmax。</span></span><br><span class="line"><span class="comment">#25 #### 快速查找最大的 n个数。</span></span><br><span class="line"><span class="comment">#26 去除掉一个数组中，所有元素都相同的数据</span></span><br><span class="line"><span class="comment"># 27   切片  （左闭右开）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>答案代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ## Numpy练习题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1 打印当前Numpy版本</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">print</span> (np.__version__)</span><br><span class="line"><span class="comment"># 1.21.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 构造一个全零的矩阵，并打印其占用的内存大小</span></span><br><span class="line"></span><br><span class="line">z = np.zeros((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;%d bytes&#x27;</span>%(z.size * z.itemsize))</span><br><span class="line"><span class="comment"># 200 bytes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 打印一个函数的帮助文档，比如numpy.add</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">help</span>(np.info(np.add)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4 创建一个10-49的数组，并将其倒序排列</span></span><br><span class="line"></span><br><span class="line">tang_array = np.arange(<span class="number">10</span>,<span class="number">50</span>,<span class="number">1</span>)</span><br><span class="line">tang_array = tang_array[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26</span></span><br><span class="line"><span class="string"> 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5 找到一个数组中不为0的索引</span></span><br><span class="line"><span class="built_in">print</span>(np.nonzero([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1234</span>,<span class="number">0</span>,<span class="number">1</span>]))</span><br><span class="line"><span class="comment"># (array([ 0,  1,  2,  3,  4,  8, 10], dtype=int64),)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6 随机构造一个3*3矩阵，并打印其中最大与最小值</span></span><br><span class="line">tang_array = np.random.random((<span class="number">3</span>,<span class="number">3</span>)) <span class="comment"># 3,3用括号括起来</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">min</span>())</span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">max</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.08211621080378706</span></span><br><span class="line"><span class="string">0.8640808100395988</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7 构造一个5*5的矩阵，令其值都为1，并在最外层加上一圈0</span></span><br><span class="line">tang_array = np.ones((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">tang_array = np.pad(tang_array,pad_width = <span class="number">1</span>,mode = <span class="string">&#x27;constant&#x27;</span>,constant_values = <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1. 1. 1. 1. 1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1. 1. 1. 1. 1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1. 1. 1. 1. 1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1. 1. 1. 1. 1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1. 1. 1. 1. 1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#print (help(np.pad))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#8 构建一个shape为（6，7，8）的矩阵，并找到第100个元素的索引值</span></span><br><span class="line"><span class="built_in">print</span>(np.unravel_index(<span class="number">100</span>,(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)))</span><br><span class="line"><span class="comment"># (1, 5, 4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9 对一个5*5的矩阵做归一化操作 ###########################归一化！！！</span></span><br><span class="line">tang_array = np.random.random((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">tang_max = tang_array.<span class="built_in">max</span>()</span><br><span class="line">tang_min = tang_array.<span class="built_in">min</span>()</span><br><span class="line">tang_array = (tang_array-tang_min)/(tang_max - tang_min)</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0.19461805 0.03000903 0.23819004 0.92564896 0.        ]</span></span><br><span class="line"><span class="string"> [0.79544296 0.43644027 1.         0.0806151  0.47350085]</span></span><br><span class="line"><span class="string"> [0.08006743 0.59546849 0.42222949 0.04184319 0.54103702]</span></span><br><span class="line"><span class="string"> [0.7829385  0.3421277  0.02534175 0.86729348 0.37760322]</span></span><br><span class="line"><span class="string"> [0.83126287 0.9005157  0.75409234 0.37235985 0.47388025]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9 找到两个数组中相同的值</span></span><br><span class="line">z1 = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>) </span><br><span class="line">z2 = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (z1)</span><br><span class="line"><span class="built_in">print</span> (z2)</span><br><span class="line"><span class="built_in">print</span> (np.intersect1d(z1,z2))<span class="comment"># 即在z1，又在z2 的数字</span></span><br><span class="line"><span class="comment"># print(help(np.intersect1d))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[0 1 3 7 3 7 4 2 3 9]</span></span><br><span class="line"><span class="string">[6 5 6 8 6 7 9 9 7 4]</span></span><br><span class="line"><span class="string">[4 7 9]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#10 得到今天 明天 昨天的日期   牛，但是有啥用</span></span><br><span class="line">yesterday = np.datetime64(<span class="string">&#x27;today&#x27;</span>,<span class="string">&#x27;D&#x27;</span>) - np.timedelta64(<span class="number">1</span>,<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">today = np.datetime64(<span class="string">&#x27;today&#x27;</span>,<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">tommorow = np.datetime64(<span class="string">&#x27;today&#x27;</span>,<span class="string">&#x27;D&#x27;</span>) + np.timedelta64(<span class="number">1</span>,<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(yesterday)</span><br><span class="line"><span class="built_in">print</span>(today)</span><br><span class="line"><span class="built_in">print</span>(tommorow)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2022-05-23</span></span><br><span class="line"><span class="string">2022-05-24</span></span><br><span class="line"><span class="string">2022-05-25</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#11 得到一个月中所有的天</span></span><br><span class="line">alldays = np.arange(<span class="string">&#x27;2017-10&#x27;</span>,<span class="string">&#x27;2017-11&#x27;</span>,dtype=<span class="string">&#x27;datetime64[D]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(alldays)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;2017-10-01&#x27; &#x27;2017-10-02&#x27; &#x27;2017-10-03&#x27; &#x27;2017-10-04&#x27; &#x27;2017-10-05&#x27;</span></span><br><span class="line"><span class="string"> &#x27;2017-10-06&#x27; &#x27;2017-10-07&#x27; &#x27;2017-10-08&#x27; &#x27;2017-10-09&#x27; &#x27;2017-10-10&#x27;</span></span><br><span class="line"><span class="string"> &#x27;2017-10-11&#x27; &#x27;2017-10-12&#x27; &#x27;2017-10-13&#x27; &#x27;2017-10-14&#x27; &#x27;2017-10-15&#x27;</span></span><br><span class="line"><span class="string"> &#x27;2017-10-16&#x27; &#x27;2017-10-17&#x27; &#x27;2017-10-18&#x27; &#x27;2017-10-19&#x27; &#x27;2017-10-20&#x27;</span></span><br><span class="line"><span class="string"> &#x27;2017-10-21&#x27; &#x27;2017-10-22&#x27; &#x27;2017-10-23&#x27; &#x27;2017-10-24&#x27; &#x27;2017-10-25&#x27;</span></span><br><span class="line"><span class="string"> &#x27;2017-10-26&#x27; &#x27;2017-10-27&#x27; &#x27;2017-10-28&#x27; &#x27;2017-10-29&#x27; &#x27;2017-10-30&#x27;</span></span><br><span class="line"><span class="string"> &#x27;2017-10-31&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#12 得到数组的整数部分</span></span><br><span class="line">z = np.random.uniform(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[5.27873394 9.01058594 6.38898515 1.72810253 1.2273001  8.39480848</span></span><br><span class="line"><span class="string"> 9.72538005 9.89814708 0.59691519 7.43148905]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(np.floor(z))</span><br><span class="line"><span class="comment"># [5. 9. 6. 1. 1. 8. 9. 9. 0. 7.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#13 构造一个数组，让它不能被改变</span></span><br><span class="line">z = np.zeros(<span class="number">5</span>)</span><br><span class="line">z.flags.writeable = <span class="literal">False</span></span><br><span class="line"><span class="comment"># z[0] = 1  #会报错。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#14 打印大数据的部分值，全部值</span></span><br><span class="line">z = np.zeros((<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">np.set_printoptions(threshold=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0. 0. 0. ... 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. ... 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. ... 0. 0. 0.]</span></span><br><span class="line"><span class="string"> ...</span></span><br><span class="line"><span class="string"> [0. 0. 0. ... 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. ... 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. ... 0. 0. 0.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">np.set_printoptions(threshold=z.size)</span><br><span class="line"><span class="comment"># np.set_printoptions(threshold=15)  #还是只显示一部分</span></span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(z.shape)</span><br><span class="line"><span class="comment"># (15, 15)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(z.shape))</span><br><span class="line"><span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(z.shape[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(z.shape[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 15</span></span><br><span class="line"><span class="comment"># 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#15 找到在一个数组中，最接近一个数的索引</span></span><br><span class="line">z = np.arange(<span class="number">100</span>)</span><br><span class="line">v = np.random.uniform(<span class="number">0</span>,<span class="number">100</span>) <span class="comment">#######这里是[0-100)中随机产生一个数哦，而不是很多个数。</span></span><br><span class="line"><span class="built_in">print</span> (v)</span><br><span class="line"><span class="comment"># 29.4891706982606</span></span><br><span class="line">index = (np.<span class="built_in">abs</span>(z-v)).argmin()</span><br><span class="line"><span class="built_in">print</span> (z[index])</span><br><span class="line"><span class="comment"># 29</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#16 32位float类型和32位int类型转换</span></span><br><span class="line">z = np.arange(<span class="number">10</span>,dtype=np.int32)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="built_in">print</span> (z.dtype)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="string">int32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">z = z.astype(np.float32)</span><br><span class="line"><span class="comment"># z.dtype = np.float32   # #会以科学计数法输出，好奇怪。</span></span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="built_in">print</span> (z.dtype)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[0. 1. 2. 3. 4. 5. 6. 7. 8. 9.]</span></span><br><span class="line"><span class="string">float32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#17 #### 打印数组元素位置坐标与数值  ：枚举操作</span></span><br><span class="line">z = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> np.ndenumerate(z):</span><br><span class="line">    <span class="built_in">print</span> (index,value)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(0, 0) 0</span></span><br><span class="line"><span class="string">(0, 1) 1</span></span><br><span class="line"><span class="string">(0, 2) 2</span></span><br><span class="line"><span class="string">(1, 0) 3</span></span><br><span class="line"><span class="string">(1, 1) 4</span></span><br><span class="line"><span class="string">(1, 2) 5</span></span><br><span class="line"><span class="string">(2, 0) 6</span></span><br><span class="line"><span class="string">(2, 1) 7</span></span><br><span class="line"><span class="string">(2, 2) 8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#18 按照数组的某一列进行排序,按照某一行排序似乎不行啊。！解答：需要转置：</span></span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span> (z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 6 0]</span></span><br><span class="line"><span class="string"> [7 1 6]</span></span><br><span class="line"><span class="string"> [5 2 4]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">a = z[:,<span class="number">1</span>].argsort()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1 2 0]</span></span><br><span class="line"><span class="built_in">print</span> (z[a])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[7 1 6]</span></span><br><span class="line"><span class="string"> [5 2 4]</span></span><br><span class="line"><span class="string"> [1 6 0]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># a = z[1,:].argsort()</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"><span class="comment"># print(z[a])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#19 按照数组的某一列进行倒序排序</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">a = np.array(a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a[np.argsort(-a[:,<span class="number">1</span>])])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[2 3 1]</span></span><br><span class="line"><span class="string"> [5 6 1]</span></span><br><span class="line"><span class="string"> [3 2 3]</span></span><br><span class="line"><span class="string"> [0 0 0]]</span></span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="string">[[5 6 1]</span></span><br><span class="line"><span class="string"> [2 3 1]</span></span><br><span class="line"><span class="string"> [3 2 3]</span></span><br><span class="line"><span class="string"> [0 0 0]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#20 第一行从小到大排序：</span></span><br><span class="line"><span class="comment"># *1，先把矩阵转置，这样本来是行的数据就变成列的数据，列的数据就变成行的数据</span></span><br><span class="line"><span class="comment"># *2，对转置后的矩阵进行按某列排序</span></span><br><span class="line"><span class="comment"># *3. 排序后的矩阵在做一次转置，转回来后的矩阵就是原矩阵按某行排序的矩阵了。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=[[<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>]]</span><br><span class="line">a =np.array(a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.T[np.argsort(a.T[:,<span class="number">0</span>])].T)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[3 2 3]</span></span><br><span class="line"><span class="string"> [0 0 0]</span></span><br><span class="line"><span class="string"> [2 3 1]</span></span><br><span class="line"><span class="string"> [5 6 1]]</span></span><br><span class="line"><span class="string">----------------------------</span></span><br><span class="line"><span class="string">[[2 3 3]</span></span><br><span class="line"><span class="string"> [0 0 0]</span></span><br><span class="line"><span class="string"> [3 2 1]</span></span><br><span class="line"><span class="string"> [6 5 1]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#21 统计数组中每个数值出现的次数</span></span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,size = <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="comment"># [4 0 6 8 1 8 6 0 1 4]</span></span><br><span class="line">np.set_printoptions(threshold=<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(np.bincount(z))     <span class="comment">#######从0，到最大的个数进行统计。</span></span><br><span class="line"><span class="comment"># [2 2 0 0 2 0 2 0 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#22  如何对一个四维数组的最后两维来求和</span></span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line">res = z.<span class="built_in">sum</span>(axis=(-<span class="number">2</span>,-<span class="number">1</span>)) <span class="comment">############求和结果肯定也是减少了两个维度啦啦啦。</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[85 64 75 62]</span></span><br><span class="line"><span class="string"> [76 70 61 89]</span></span><br><span class="line"><span class="string"> [86 96 93 90]</span></span><br><span class="line"><span class="string"> [52 84 80 83]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#23 交换矩阵中的两行，两列。</span></span><br><span class="line">z = np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 0  1  2  3  4]</span></span><br><span class="line"><span class="string"> [ 5  6  7  8  9]</span></span><br><span class="line"><span class="string"> [10 11 12 13 14]</span></span><br><span class="line"><span class="string"> [15 16 17 18 19]</span></span><br><span class="line"><span class="string"> [20 21 22 23 24]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">z[[<span class="number">0</span>,<span class="number">1</span>]] = z[[<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 5  6  7  8  9]</span></span><br><span class="line"><span class="string"> [ 0  1  2  3  4]</span></span><br><span class="line"><span class="string"> [10 11 12 13 14]</span></span><br><span class="line"><span class="string"> [15 16 17 18 19]</span></span><br><span class="line"><span class="string"> [20 21 22 23 24]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">z = np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 0  1  2  3  4]</span></span><br><span class="line"><span class="string"> [ 5  6  7  8  9]</span></span><br><span class="line"><span class="string"> [10 11 12 13 14]</span></span><br><span class="line"><span class="string"> [15 16 17 18 19]</span></span><br><span class="line"><span class="string"> [20 21 22 23 24]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">z[:,[<span class="number">2</span>,<span class="number">3</span>]] = z[:,[<span class="number">3</span>,<span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 0  1  3  2  4]</span></span><br><span class="line"><span class="string"> [ 5  6  8  7  9]</span></span><br><span class="line"><span class="string"> [10 11 13 12 14]</span></span><br><span class="line"><span class="string"> [15 16 18 17 19]</span></span><br><span class="line"><span class="string"> [20 21 23 22 24]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#24 #### 找到一个数组中最常出现的数字   先统计，然后argmax。</span></span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">bin</span> = np.bincount(z)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>)</span><br><span class="line"><span class="comment"># [2 6 7 5 4 2 5 3 8 8]</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">bin</span>.argmax())</span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#25 #### 快速查找最大的 n个数。</span></span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,<span class="number">1000</span>)</span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span> (z[np.argpartition(-z,n)[:n]])</span><br><span class="line"><span class="comment"># [99 99 99 99 99]</span></span><br><span class="line"></span><br><span class="line">z = np.arange(<span class="number">1000</span>)</span><br><span class="line">np.random.shuffle(z)</span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span> (z[np.argpartition(-z,n)[:n]])</span><br><span class="line"><span class="comment"># [998 997 999 996 995]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#26 去除掉一个数组中，所有元素都相同的数据</span></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">all</span>(a == b)) <span class="comment">#全部相同才会返回True。</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">any</span>(a == b))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">np.set_printoptions(threshold=<span class="number">10000</span>)</span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">3</span>,(<span class="number">10</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 1]</span></span><br><span class="line"><span class="string"> [0 1 1]</span></span><br><span class="line"><span class="string"> [2 1 2]</span></span><br><span class="line"><span class="string"> [0 0 0]</span></span><br><span class="line"><span class="string"> [1 1 1]</span></span><br><span class="line"><span class="string"> [2 0 0]</span></span><br><span class="line"><span class="string"> [2 1 1]</span></span><br><span class="line"><span class="string"> [1 0 2]</span></span><br><span class="line"><span class="string"> [1 0 2]</span></span><br><span class="line"><span class="string"> [1 1 0]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 27   切片  （左闭右开）</span></span><br><span class="line"><span class="built_in">print</span>(z[:,<span class="number">1</span>:])<span class="comment">#打印第二列到最后一列</span></span><br><span class="line"><span class="built_in">print</span>(z[:,:-<span class="number">1</span>])<span class="comment">#打印第1列到倒数第二列</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 1]</span></span><br><span class="line"><span class="string"> [0 2]</span></span><br><span class="line"><span class="string"> [2 0]</span></span><br><span class="line"><span class="string"> [1 0]</span></span><br><span class="line"><span class="string"> [1 2]</span></span><br><span class="line"><span class="string"> [1 2]</span></span><br><span class="line"><span class="string"> [1 1]</span></span><br><span class="line"><span class="string"> [0 1]</span></span><br><span class="line"><span class="string"> [2 1]</span></span><br><span class="line"><span class="string"> [0 1]]</span></span><br><span class="line"><span class="string">[[0 1]</span></span><br><span class="line"><span class="string"> [2 0]</span></span><br><span class="line"><span class="string"> [0 2]</span></span><br><span class="line"><span class="string"> [1 1]</span></span><br><span class="line"><span class="string"> [2 1]</span></span><br><span class="line"><span class="string"> [0 1]</span></span><br><span class="line"><span class="string"> [1 1]</span></span><br><span class="line"><span class="string"> [1 0]</span></span><br><span class="line"><span class="string"> [0 2]</span></span><br><span class="line"><span class="string"> [0 0]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以练习为导向，感觉更能吸收，就是做题，以解决问题为导向去学。&lt;/p&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="http://example.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy-读写</title>
    <link href="http://example.com/2022/05/23/numpy-%E8%AF%BB%E5%86%99/"/>
    <id>http://example.com/2022/05/23/numpy-%E8%AF%BB%E5%86%99/</id>
    <published>2022-05-23T15:20:14.000Z</published>
    <updated>2022-05-24T13:05:05.892Z</updated>
    
    <content type="html"><![CDATA[<p>numpy与txt文件的交互，以及保存为npy，npz文件（npz文件其实就是对一个或者多个npy文件进行压缩）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 使用Numpy读写数据     </span></span><br><span class="line"><span class="comment"># #### 哇哇哇，这样子就能写出来一个文件了。</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;hui.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;1 2 3 4 5 6\n2 3 5 8 7 9&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ####  常规做法，先读取数据（每一行数据转为数组，然后再转为np.array类型）。</span></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hui.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        fileds = line.split()</span><br><span class="line">        cur_data = [<span class="built_in">float</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> fileds]</span><br><span class="line">        data.append(cur_data)</span><br><span class="line">data = np.array(data)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1. 2. 3. 4. 5. 6.]</span></span><br><span class="line"><span class="string"> [2. 3. 5. 8. 7. 9.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #### 高级做法，直接用np提供的loadtxt 函数</span></span><br><span class="line">data = np.loadtxt(<span class="string">&#x27;hui.txt&#x27;</span>) <span class="comment">####默认以空隔为分隔符。</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1. 2. 3. 4. 5. 6.]</span></span><br><span class="line"><span class="string"> [2. 3. 5. 8. 7. 9.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;hui1.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;1,2,3,4,5,6\n2,3,5,8,7,9&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(<span class="string">&#x27;hui1.txt&#x27;</span>,delimiter = <span class="string">&#x27;,&#x27;</span>) <span class="comment">########指定分隔符。</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1. 2. 3. 4. 5. 6.]</span></span><br><span class="line"><span class="string"> [2. 3. 5. 8. 7. 9.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># * &#x27;hui2.txt&#x27;:路径最好放到和代码一起</span></span><br><span class="line"><span class="comment"># * skiprows : 去掉几行               ps：行数从1 开始，列数从0开始</span></span><br><span class="line"><span class="comment"># * delimiter = &#x27;,&#x27; :分隔符</span></span><br><span class="line"><span class="comment"># * usecols = (0,1,4) ：指定使用哪几列</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;hui2.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;x,y,z,w,a,b\n1,2,3,4,5,6\n2,3,5,8,7,9&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line">data = np.loadtxt(<span class="string">&#x27;hui2.txt&#x27;</span>,delimiter = <span class="string">&#x27;,&#x27;</span>,skiprows = <span class="number">1</span>,usecols=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">#去掉第一行,只使用2,3,4列，注意这个参数不能用切片。</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[2. 3. 4.]</span></span><br><span class="line"><span class="string"> [3. 5. 8.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 保存 文件</span></span><br><span class="line">tang_array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">np.savetxt(<span class="string">&#x27;hui31.txt&#x27;</span>,tang_array) <span class="comment">############默认为科学计数法，然后间隔是一个空隔。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;  hui31.txt 文件内容</span></span><br><span class="line"><span class="string">1.000000000000000000e+00 2.000000000000000000e+00 3.000000000000000000e+00</span></span><br><span class="line"><span class="string">4.000000000000000000e+00 5.000000000000000000e+00 6.000000000000000000e+00</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">np.savetxt(<span class="string">&#x27;hui32.txt&#x27;</span>,tang_array,fmt=<span class="string">&#x27;%d&#x27;</span>) <span class="comment">#######改为int型。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; hui32.txt 内容</span></span><br><span class="line"><span class="string">1 2 3</span></span><br><span class="line"><span class="string">4 5 6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">np.savetxt(<span class="string">&#x27;hui33.txt&#x27;</span>,tang_array,fmt=<span class="string">&#x27;%d&#x27;</span>,delimiter = <span class="string">&#x27;,&#x27;</span>) <span class="comment">####分隔符改为 逗号。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;hui33.txt 内容</span></span><br><span class="line"><span class="string">1,2,3</span></span><br><span class="line"><span class="string">4,5,6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">np.savetxt(<span class="string">&#x27;hui34.txt&#x27;</span>,tang_array,fmt=<span class="string">&#x27;%.2f&#x27;</span>,delimiter = <span class="string">&#x27;,&#x27;</span>) <span class="comment">########保留两位小数点的浮点数。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;hui34.txt 内容</span></span><br><span class="line"><span class="string">1.00,2.00,3.00</span></span><br><span class="line"><span class="string">4.00,5.00,6.00</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 读写array结构</span></span><br><span class="line"><span class="comment"># #### 1 文件格式为：npy。  只有一个np.array</span></span><br><span class="line">tang_array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">np.save(<span class="string">&#x27;gaominghui.npy&#x27;</span>,tang_array)</span><br><span class="line"></span><br><span class="line">tang = np.load(<span class="string">&#x27;gaominghui.npy&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tang)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #### 2 文件格式为npz  将不同的np.array压缩到一起。访问时，用变量名</span></span><br><span class="line"><span class="comment"># #### 本质就是一个压缩文件，压缩包 tang.npz 里面包含两个文件：a.npy以及b.npy</span></span><br><span class="line">tang_array2 = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(tang_array2)</span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line">np.savez(<span class="string">&#x27;tang.npz&#x27;</span>,a=tang_array,b=tang_array2)</span><br><span class="line"></span><br><span class="line">data = np.load(<span class="string">&#x27;tang.npz&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data.keys())<span class="comment">#######输出[&#x27;b&#x27;,&#x27;a&#x27;]才对的。但是输出：KeysView(&lt;numpy.lib.npyio.NpzFile object at 0x000002831749B5C0&gt;)</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;numpy与txt文件的交互，以及保存为npy，npz文件（npz文件其实就是对一个或者多个npy文件进行压缩）&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="http://example.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy-随机模块</title>
    <link href="http://example.com/2022/05/23/numpy-%E9%9A%8F%E6%9C%BA%E6%A8%A1%E5%9D%97/"/>
    <id>http://example.com/2022/05/23/numpy-%E9%9A%8F%E6%9C%BA%E6%A8%A1%E5%9D%97/</id>
    <published>2022-05-23T15:20:05.000Z</published>
    <updated>2022-05-24T13:06:14.871Z</updated>
    
    <content type="html"><![CDATA[<p>随机模块就是用来随机生成numpy数组的这么一个模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### Numpy的随机模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.random.rand()) <span class="comment">###返回0-1之间的数。</span></span><br><span class="line"><span class="comment"># 0.3625719851128917</span></span><br><span class="line"><span class="built_in">print</span>(np.random.random_sample()) <span class="comment">###返回0-1之间的数。用的不多。</span></span><br><span class="line"><span class="comment"># 0.46873472817538897</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#所有的值都是从0到1</span></span><br><span class="line"><span class="built_in">print</span>(np.random.rand(<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0.62431726 0.43401202]</span></span><br><span class="line"><span class="string"> [0.91890106 0.20269238]</span></span><br><span class="line"><span class="string"> [0.79437817 0.03527564]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回的是随机的############整数，###########左闭右开   0-10之间的随机数</span></span><br><span class="line"><span class="built_in">print</span>(np.random.randint(<span class="number">10</span>,size = (<span class="number">5</span>,<span class="number">4</span>))) <span class="comment">###等同于 np.random.randint(0,10,size = (5,4))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[6 0 5 4]</span></span><br><span class="line"><span class="string"> [8 4 2 6]</span></span><br><span class="line"><span class="string"> [9 9 3 3]</span></span><br><span class="line"><span class="string"> [1 3 6 0]</span></span><br><span class="line"><span class="string"> [7 1 7 1]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)) <span class="comment">########0-10之间随机返回3 个数。</span></span><br><span class="line"><span class="comment"># [0 7 8]</span></span><br><span class="line"></span><br><span class="line">mu, sigma = <span class="number">0</span>,<span class="number">0.1</span>     <span class="comment">#####均值，标准差</span></span><br><span class="line"><span class="built_in">print</span>(np.random.normal(mu,sigma,<span class="number">10</span>))           <span class="comment">###########高斯分布。总共10个数。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[ 0.02607355 -0.08214441 -0.11952662  0.08614321  0.07757451  0.03376232</span></span><br><span class="line"><span class="string"> -0.04927606 -0.20523609 -0.14882409  0.03313485]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">np.set_printoptions(precision = <span class="number">3</span>) <span class="comment">############随机模块产生数据的精度（保存到几个小数点）</span></span><br><span class="line">mu, sigma = <span class="number">0</span>,<span class="number">0.1</span></span><br><span class="line"><span class="built_in">print</span>(np.random.normal(mu,sigma,<span class="number">10</span>))</span><br><span class="line"><span class="comment"># [ 0.086  0.091  0.011 -0.13  -0.154  0.207  0.035  0.077  0.124 -0.031]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 洗牌</span></span><br><span class="line">tang_array = np.arange(<span class="number">10</span>)  <span class="comment"># 开区间，不包括10</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line">np.random.shuffle(tang_array)<span class="comment">##shuffle 打乱顺序呗。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="comment"># [7 4 6 8 1 5 3 9 2 0]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 随机的种子：设定好随机种子后，虽然说是随机生成数据，但是种子一样的话，生成模式也会是一样的。</span></span><br><span class="line"><span class="comment"># 比如下面，尽管第一次跟第二次不同。但是设置了种子后的每一次运行产生的数据跟上一次都是一样。同理，打乱顺序也是一样。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.random.seed(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">mu, sigma = <span class="number">0</span>,<span class="number">0.1</span></span><br><span class="line"><span class="built_in">print</span>(np.random.normal(mu,sigma,<span class="number">10</span>))</span><br><span class="line"><span class="comment"># [-0.175  0.034  0.115 -0.025  0.098  0.051  0.022 -0.107 -0.019  0.026]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.random.normal(mu,sigma,<span class="number">10</span>))</span><br><span class="line"><span class="comment"># [-0.046  0.044 -0.058  0.082  0.067 -0.01  -0.053  0.103 -0.044 -0.112]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随机模块就是用来随机生成numpy数组的这么一个模块。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="http://example.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy-运算</title>
    <link href="http://example.com/2022/05/23/numpy-%E8%BF%90%E7%AE%97/"/>
    <id>http://example.com/2022/05/23/numpy-%E8%BF%90%E7%AE%97/</id>
    <published>2022-05-23T15:19:55.000Z</published>
    <updated>2022-05-24T13:07:59.358Z</updated>
    
    <content type="html"><![CDATA[<p>numpy数组运算包括点乘，矩阵相乘，逻辑与或非异或等运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">5</span>,<span class="number">5</span>])</span><br><span class="line">y = np.array([<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [5 5]</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># [2 2]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.multiply(x,y)) <span class="comment">#######点乘！ 相应位置元素之间相乘就行。</span></span><br><span class="line"><span class="comment"># [10 10]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.dot(x,y)) <span class="comment">#####矩阵相乘  1维*1维，相当于内积。</span></span><br><span class="line"><span class="comment"># 20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># (2,)</span></span><br><span class="line"><span class="built_in">print</span>(y.shape)</span><br><span class="line"><span class="comment"># (2,)</span></span><br><span class="line"></span><br><span class="line">x.shape = <span class="number">2</span>,<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[5]</span></span><br><span class="line"><span class="string"> [5]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">y.shape = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># [[2 2]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (x.shape)</span><br><span class="line"><span class="built_in">print</span> (y.shape)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(2, 1)</span></span><br><span class="line"><span class="string">(1, 2)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(np.dot(x,y)) <span class="comment">##（2,1）*（1，2）维度相符才能相乘。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[10 10]</span></span><br><span class="line"><span class="string"> [10 10]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.dot(y,x))  <span class="comment"># 注意，结果为(1,1),也是二维的哦。</span></span><br><span class="line"><span class="comment"># [[20]]</span></span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">y = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="built_in">print</span>(y.shape)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(3,)</span></span><br><span class="line"><span class="string">(2, 3)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (x * y) <span class="comment">###########先自动补全数据(有点不太懂），然后对应位置再相乘。尽量不要用这种方式。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">y = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>])</span><br><span class="line">x = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(x == y)                      <span class="comment">########判断是否相等。</span></span><br><span class="line"><span class="comment"># [False  True  True False]</span></span><br><span class="line">y = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>])</span><br><span class="line">x = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="comment"># print(x == y)                      ########判断是否相等。 维度不一样时,不能判断。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">all</span>(a == b)) <span class="comment">#全部相同才会返回True。</span></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">any</span>(a == b)) <span class="comment">#只要有一个相同，就会返回True。</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(np.logical_and(a,b)) <span class="comment">#######逻辑相与</span></span><br><span class="line"><span class="comment"># [ True False  True False]</span></span><br><span class="line">log_or = np.logical_or(a,b)  <span class="comment">#######逻辑相或     返回的是bool类型。</span></span><br><span class="line"><span class="built_in">print</span>(log_or)</span><br><span class="line"><span class="comment"># [ True False  True  True]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(log_or))</span><br><span class="line"><span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(log_or[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(log_or.dtype)</span><br><span class="line"><span class="comment"># bool</span></span><br><span class="line"></span><br><span class="line">log_xor = np.logical_xor(a,b) <span class="comment">####异或！！！！，</span></span><br><span class="line"><span class="built_in">print</span>(log_xor)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(log_xor))</span><br><span class="line"><span class="built_in">print</span>(log_xor[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(log_xor.dtype)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[False False False  True]</span></span><br><span class="line"><span class="string">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">bool</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">log_not = np.logical_not(a) <span class="comment"># 0值为False，非0值表示True</span></span><br><span class="line"><span class="built_in">print</span>(log_not)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(log_not))</span><br><span class="line"><span class="built_in">print</span>(log_not[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(log_not.dtype)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[False  True False  True]</span></span><br><span class="line"><span class="string">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">bool</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;numpy数组运算包括点乘，矩阵相乘，逻辑与或非异或等运算。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="http://example.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy-数组生成</title>
    <link href="http://example.com/2022/05/23/numpy-%E6%95%B0%E7%BB%84%E7%94%9F%E6%88%90/"/>
    <id>http://example.com/2022/05/23/numpy-%E6%95%B0%E7%BB%84%E7%94%9F%E6%88%90/</id>
    <published>2022-05-23T15:19:44.000Z</published>
    <updated>2022-05-23T15:23:23.092Z</updated>
    
    <content type="html"><![CDATA[<p>numpy学习，第六部分： 数组生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 构造出来一个数组 有四种方式：  np.arange   np.linspace   np.logspace   np.meshgrid</span></span><br><span class="line"></span><br><span class="line">hui_array = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(hui_array)</span><br><span class="line"><span class="comment"># [1 2 3]</span></span><br><span class="line">hui_array =  np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(hui_array)</span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"></span><br><span class="line">hui_array = np.r_[<span class="number">0</span>:<span class="number">10</span>:<span class="number">1</span>] <span class="comment">#####貌似跟np.arange(10)没区别吧。</span></span><br><span class="line"><span class="built_in">print</span>(hui_array)</span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"></span><br><span class="line">npc = np.c_[<span class="number">0</span>:<span class="number">10</span>:<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(npc)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0]</span></span><br><span class="line"><span class="string"> [1]</span></span><br><span class="line"><span class="string"> [2]</span></span><br><span class="line"><span class="string"> [3]</span></span><br><span class="line"><span class="string"> [4]</span></span><br><span class="line"><span class="string"> [5]</span></span><br><span class="line"><span class="string"> [6]</span></span><br><span class="line"><span class="string"> [7]</span></span><br><span class="line"><span class="string"> [8]</span></span><br><span class="line"><span class="string"> [9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(npc.shape)</span><br><span class="line"><span class="comment"># (10, 1)</span></span><br><span class="line"></span><br><span class="line">hui_array = np.arange(<span class="number">2</span>,<span class="number">20</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(hui_array)</span><br><span class="line"><span class="comment"># [ 2  4  6  8 10 12 14 16 18]</span></span><br><span class="line">hui_array = np.arange(<span class="number">2</span>,<span class="number">20</span>,<span class="number">2</span>,dtype=np.float32)</span><br><span class="line"><span class="built_in">print</span>(hui_array)</span><br><span class="line"><span class="comment"># [ 2.  4.  6.  8. 10. 12. 14. 16. 18.]</span></span><br><span class="line">hui_array = np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>) <span class="comment"># 左闭右闭</span></span><br><span class="line"><span class="built_in">print</span>(hui_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[ 0.          1.11111111  2.22222222  3.33333333  4.44444444  5.55555556</span></span><br><span class="line"><span class="string">  6.66666667  7.77777778  8.88888889 10.        ]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 默认是10为底的</span></span><br><span class="line"></span><br><span class="line">hui_array =  np.logspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>)  <span class="comment">#0-1之间平均分为5份，然后 10的0次方...10的1次方</span></span><br><span class="line"><span class="built_in">print</span>(hui_array)</span><br><span class="line"><span class="comment"># [ 1.          1.77827941  3.16227766  5.62341325 10.        ]</span></span><br><span class="line"></span><br><span class="line">x = np.linspace(-<span class="number">10</span>,<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [-10.  -5.   0.   5.  10.]</span></span><br><span class="line"></span><br><span class="line">y = np.linspace(-<span class="number">10</span>,<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># [-10.  -5.   0.   5.  10.]</span></span><br><span class="line"></span><br><span class="line">x, y= np.meshgrid(x,y)  <span class="comment">###不太懂，meshgrid方法跳过去吧！</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[-10.  -5.   0.   5.  10.]</span></span><br><span class="line"><span class="string"> [-10.  -5.   0.   5.  10.]</span></span><br><span class="line"><span class="string"> [-10.  -5.   0.   5.  10.]</span></span><br><span class="line"><span class="string"> [-10.  -5.   0.   5.  10.]</span></span><br><span class="line"><span class="string"> [-10.  -5.   0.   5.  10.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[-10. -10. -10. -10. -10.]</span></span><br><span class="line"><span class="string"> [ -5.  -5.  -5.  -5.  -5.]</span></span><br><span class="line"><span class="string"> [  0.   0.   0.   0.   0.]</span></span><br><span class="line"><span class="string"> [  5.   5.   5.   5.   5.]</span></span><br><span class="line"><span class="string"> [ 10.  10.  10.  10.  10.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更常用的 zeros ones</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.zeros(<span class="number">3</span>))</span><br><span class="line"><span class="comment"># [0. 0. 0.]</span></span><br><span class="line"><span class="built_in">print</span>(np.zeros((<span class="number">3</span>,<span class="number">3</span>)))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(np.ones((<span class="number">3</span>,<span class="number">3</span>)))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1. 1. 1.]</span></span><br><span class="line"><span class="string"> [1. 1. 1.]</span></span><br><span class="line"><span class="string"> [1. 1. 1.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(np.ones((<span class="number">3</span>,<span class="number">3</span>)) * <span class="number">8</span>)   <span class="comment"># 指的是里面的元素*8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[8. 8. 8.]</span></span><br><span class="line"><span class="string"> [8. 8. 8.]</span></span><br><span class="line"><span class="string"> [8. 8. 8.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(np.ones((<span class="number">3</span>,<span class="number">3</span>),dtype = np.float32))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1. 1. 1.]</span></span><br><span class="line"><span class="string"> [1. 1. 1.]</span></span><br><span class="line"><span class="string"> [1. 1. 1.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">a = np.empty(<span class="number">6</span>) <span class="comment">#### 里面的值，随机赋值。下面用fill再填充。</span></span><br><span class="line"><span class="built_in">print</span>(a.shape)</span><br><span class="line"><span class="comment"># (6,)</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1.e-323 0.e+000 0.e+000 0.e+000 0.e+000 0.e+000]</span></span><br><span class="line">a.fill(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1. 1. 1. 1. 1. 1.]</span></span><br><span class="line"></span><br><span class="line">tang_array = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="comment"># [1 2 3 4]</span></span><br><span class="line"></span><br><span class="line">tang_array = np.zeros_like(tang_array) <span class="comment">#######把维度复制过来，然后元素填充为0</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="comment"># [0 0 0 0]</span></span><br><span class="line"></span><br><span class="line">tang_array = np.ones_like(tang_array) <span class="comment">#######把维度复制过来，然后元素填充为1</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="comment"># [1 1 1 1]</span></span><br><span class="line"></span><br><span class="line">tang_array = np.identity(<span class="number">5</span>)         <span class="comment">#####单位矩阵。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 1. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 1. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 1.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;numpy学习，第六部分： 数组生成&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="http://example.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy-数组形状</title>
    <link href="http://example.com/2022/05/23/numpy-%E6%95%B0%E7%BB%84%E5%BD%A2%E7%8A%B6/"/>
    <id>http://example.com/2022/05/23/numpy-%E6%95%B0%E7%BB%84%E5%BD%A2%E7%8A%B6/</id>
    <published>2022-05-23T14:26:37.000Z</published>
    <updated>2022-05-23T14:42:21.388Z</updated>
    
    <content type="html"><![CDATA[<p>numpy学习，第五部分： 数组形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 数组形状操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">tang_array = np.arange(<span class="number">10</span>)  <span class="comment">####等价 np.arange(0,10)</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.shape)</span><br><span class="line"><span class="comment"># (10,)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 改变数据形状方式：</span></span><br><span class="line">tang_array.shape = <span class="number">2</span>,<span class="number">5</span>   <span class="comment">###############霍，方式1 ，改动参数来指定形状。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0 1 2 3 4]</span></span><br><span class="line"><span class="string"> [5 6 7 8 9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">tang_array1 = tang_array.reshape(<span class="number">1</span>,<span class="number">10</span>) <span class="comment">################## 方式2：也可以用reshape()来指定形状。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array1.shape)</span><br><span class="line"><span class="built_in">print</span>(tang_array.shape)</span><br><span class="line"><span class="comment"># (1, 10)</span></span><br><span class="line"><span class="comment"># (2, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小必须不能改变</span></span><br><span class="line"><span class="comment"># tang_array .shape = 2,4    # 3*4 ==12，跟原数据的总元素个数不相等，一定要相等，小于都不行。</span></span><br><span class="line"></span><br><span class="line">tang_array = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(tang_array.shape)</span><br><span class="line"><span class="comment"># (10,)</span></span><br><span class="line">tang_array = tang_array[np.newaxis,:]<span class="comment">#方式3 增加新维度 注意增加的维度方式</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.shape)</span><br><span class="line"><span class="comment"># (1, 10)</span></span><br><span class="line">tang_array = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(tang_array.shape)</span><br><span class="line"><span class="comment"># (10,)</span></span><br><span class="line">tang_array = tang_array[:,np.newaxis] <span class="comment">#方式3 增加新维度 注意增加的维度方式</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.shape)</span><br><span class="line"><span class="comment"># (10, 1)</span></span><br><span class="line">tang_array = tang_array.reshape(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0 1 2 3 4]</span></span><br><span class="line"><span class="string"> [5 6 7 8 9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tang_array = tang_array[:,np.newaxis,np.newaxis]</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[[[0 1 2 3 4]]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[[5 6 7 8 9]]]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.shape)</span><br><span class="line"><span class="comment"># (2, 1, 1, 5)</span></span><br><span class="line"></span><br><span class="line">tang_array1 = tang_array.squeeze() <span class="comment">##########把多余的维度去掉。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array1.shape)</span><br><span class="line"><span class="built_in">print</span>(tang_array1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(2, 5)</span></span><br><span class="line"><span class="string">[[0 1 2 3 4]</span></span><br><span class="line"><span class="string"> [5 6 7 8 9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tang_array.shape = <span class="number">2</span>,<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0 1 2 3 4]</span></span><br><span class="line"><span class="string"> [5 6 7 8 9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 转置</span></span><br><span class="line">new_tang_array = tang_array.transpose() <span class="comment">###不改变原来的维度。</span></span><br><span class="line"><span class="built_in">print</span>(new_tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0 5]</span></span><br><span class="line"><span class="string"> [1 6]</span></span><br><span class="line"><span class="string"> [2 7]</span></span><br><span class="line"><span class="string"> [3 8]</span></span><br><span class="line"><span class="string"> [4 9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(new_tang_array.shape)</span><br><span class="line"><span class="comment"># (5, 2)</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0 1 2 3 4]</span></span><br><span class="line"><span class="string"> [5 6 7 8 9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.T)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0 5]</span></span><br><span class="line"><span class="string"> [1 6]</span></span><br><span class="line"><span class="string"> [2 7]</span></span><br><span class="line"><span class="string"> [3 8]</span></span><br><span class="line"><span class="string"> [4 9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0 1 2 3 4]</span></span><br><span class="line"><span class="string"> [5 6 7 8 9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 数组的连接</span></span><br><span class="line">a = np.array([[<span class="number">123</span>,<span class="number">456</span>,<span class="number">678</span>],[<span class="number">3214</span>,<span class="number">456</span>,<span class="number">134</span>]])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 123  456  678]</span></span><br><span class="line"><span class="string"> [3214  456  134]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">b = np.array([[<span class="number">1235</span>,<span class="number">3124</span>,<span class="number">432</span>],[<span class="number">43</span>,<span class="number">13</span>,<span class="number">134</span>]])</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1235 3124  432]</span></span><br><span class="line"><span class="string"> [  43   13  134]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">c = np.concatenate((a,b))<span class="comment">#### 默认在最高(最前面，也就是维度0,即axis==0)维度合并。注意a,b要用括号括起来。</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 123  456  678]</span></span><br><span class="line"><span class="string"> [3214  456  134]</span></span><br><span class="line"><span class="string"> [1235 3124  432]</span></span><br><span class="line"><span class="string"> [  43   13  134]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">c = np.concatenate((a,b),axis = <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 123  456  678]</span></span><br><span class="line"><span class="string"> [3214  456  134]</span></span><br><span class="line"><span class="string"> [1235 3124  432]</span></span><br><span class="line"><span class="string"> [  43   13  134]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">c = np.concatenate((a,b),axis = <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 123  456  678 1235 3124  432]</span></span><br><span class="line"><span class="string"> [3214  456  134   43   13  134]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(c.shape)</span><br><span class="line"><span class="comment"># (2, 6)</span></span><br><span class="line"></span><br><span class="line">abv = np.vstack((a,b))  <span class="comment">#######竖直合并。此处 也就是axis==0 ，最高维度</span></span><br><span class="line"><span class="built_in">print</span>(abv)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 123  456  678]</span></span><br><span class="line"><span class="string"> [3214  456  134]</span></span><br><span class="line"><span class="string"> [1235 3124  432]</span></span><br><span class="line"><span class="string"> [  43   13  134]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">abh = np.hstack((a,b))   <span class="comment">##### 水平合并。。。也就是 axis == 1</span></span><br><span class="line"><span class="built_in">print</span>(abh)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 123  456  678 1235 3124  432]</span></span><br><span class="line"><span class="string"> [3214  456  134   43   13  134]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 123  456  678]</span></span><br><span class="line"><span class="string"> [3214  456  134]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">af = a.flatten()<span class="comment">############展平，变成一维度，这个用的比较多。但是不改变原来的数组形状。</span></span><br><span class="line"><span class="built_in">print</span>(af)</span><br><span class="line"><span class="comment"># [ 123  456  678 3214  456  134]</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 123  456  678]</span></span><br><span class="line"><span class="string"> [3214  456  134]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">ar = a.ravel() <span class="comment">######也是展平。 不改变原来的数组形状。</span></span><br><span class="line"><span class="built_in">print</span>(ar)</span><br><span class="line"><span class="comment"># [ 123  456  678 3214  456  134]</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 123  456  678]</span></span><br><span class="line"><span class="string"> [3214  456  134]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;numpy学习，第五部分： 数组形状&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="http://example.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy-排序</title>
    <link href="http://example.com/2022/05/23/numpy-%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2022/05/23/numpy-%E6%8E%92%E5%BA%8F/</id>
    <published>2022-05-23T14:26:23.000Z</published>
    <updated>2022-05-23T14:41:35.308Z</updated>
    
    <content type="html"><![CDATA[<p>numpy学习，第四部分： 排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">tang_array = np.array([[<span class="number">1.5</span>,<span class="number">1.3</span>,<span class="number">7.5</span>],</span><br><span class="line">                      [<span class="number">5.6</span>,<span class="number">7.8</span>,<span class="number">1.2</span>]])</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1.5 1.3 7.5]</span></span><br><span class="line"><span class="string"> [5.6 7.8 1.2]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 数据结构为(2,3),2 表示第0维度，也就是前面维度，3 表示第1维度，表示最后一个维度</span></span><br><span class="line"><span class="comment">### 默认为 最后一维度排序。返回排序后的新np.array</span></span><br><span class="line">tang_array1 = np.sort(tang_array)</span><br><span class="line"><span class="built_in">print</span>(tang_array1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1.3 1.5 7.5]</span></span><br><span class="line"><span class="string"> [1.2 5.6 7.8]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 可以知道原来的np 数组并没有变化</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1.5 1.3 7.5]</span></span><br><span class="line"><span class="string"> [5.6 7.8 1.2]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tang_array1 = np.sort(tang_array,axis = <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(tang_array1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1.5 1.3 1.2]</span></span><br><span class="line"><span class="string"> [5.6 7.8 7.5]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tang_array2 =  np.sort(tang_array,axis = <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(tang_array2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1.3 1.5 7.5]</span></span><br><span class="line"><span class="string"> [1.2 5.6 7.8]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tang_array3 =  np.argsort(tang_array)  <span class="comment">#######返回的是排序后的本来位置的索引。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 0 2]</span></span><br><span class="line"><span class="string"> [2 0 1]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tang_array = np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>) <span class="comment">##########0---10之间，等间隔取10个数。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="comment"># [ 0.   1.11111111  2.22222222  3.33333333  4.44444444  5.55555556  6.66666667  7.77777778  8.88888889 10.]</span></span><br><span class="line"></span><br><span class="line">values = np.array([<span class="number">2.5</span>,<span class="number">6.5</span>,<span class="number">9.5</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tang_array1 = np.searchsorted(tang_array,values)<span class="comment">###返回 values插入tang_array数组中的索引。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array1)</span><br><span class="line"><span class="comment"># [3 6 9]</span></span><br><span class="line"></span><br><span class="line">tang_array = np.array([[<span class="number">1</span>,<span class="number">0</span>,<span class="number">6</span>],</span><br><span class="line">                       [<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>],</span><br><span class="line">                       [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line">                       [<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先根据第三列升序排，如果第三列有相同的数组，那么就再根据第一列降序排</span></span><br><span class="line"><span class="comment">####返回来的索引：现在位置的行在排序之前的行索引。</span></span><br><span class="line"><span class="comment"># 可以由返回来的index跟之前的二维数组得到排序后的数组。</span></span><br><span class="line">index = np.lexsort([-<span class="number">1</span>*tang_array[:,<span class="number">0</span>],tang_array[:,<span class="number">2</span>]]) </span><br><span class="line"><span class="built_in">print</span>(index)</span><br><span class="line"><span class="comment"># [3 1 2 0]</span></span><br><span class="line">tang_array = tang_array[index]</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[2 4 0]</span></span><br><span class="line"><span class="string"> [1 7 0]</span></span><br><span class="line"><span class="string"> [2 3 1]</span></span><br><span class="line"><span class="string"> [1 0 6]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #### 按照数组的某一列进行排序！</span></span><br><span class="line"></span><br><span class="line">z = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span> (z)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[5 2 3]</span></span><br><span class="line"><span class="string"> [3 8 0]</span></span><br><span class="line"><span class="string"> [3 4 7]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">a = z[:,<span class="number">1</span>].argsort()  <span class="comment">### java语言对比：前面的lexsort是静态方法，这里是对象方法哈</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [0 2 1]</span></span><br><span class="line"><span class="built_in">print</span> (z[a])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[5 2 3]</span></span><br><span class="line"><span class="string"> [3 4 7]</span></span><br><span class="line"><span class="string"> [3 8 0]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">a = z[<span class="number">1</span>,:].argsort()</span><br><span class="line"><span class="built_in">print</span>(a)   <span class="comment">####这里返回 的索引是我们预期的，但是不能用z[a] 表达按照排序后的索引进行排序，因为索引a放到z中还是按照行进行排序</span></span><br><span class="line"><span class="comment"># [2 0 1]</span></span><br><span class="line"><span class="built_in">print</span>(z[a]) <span class="comment"># 并没有达到预期效果！！！！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[3 4 7]</span></span><br><span class="line"><span class="string"> [5 2 3]</span></span><br><span class="line"><span class="string"> [3 8 0]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;numpy学习，第四部分： 排序&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="http://example.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy-数值计算</title>
    <link href="http://example.com/2022/05/23/numpy-%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    <id>http://example.com/2022/05/23/numpy-%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/</id>
    <published>2022-05-23T14:26:13.000Z</published>
    <updated>2022-05-23T14:41:06.705Z</updated>
    
    <content type="html"><![CDATA[<p>numpy学习，第三部分： 数值计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ## array数组的数值计算</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">tang_array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 加法：sum</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(tang_array))  <span class="comment"># 全部元素相加</span></span><br><span class="line"><span class="comment"># 21</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定要进行的操作是沿着什么轴（维度）</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(tang_array,axis=<span class="number">0</span>)) <span class="comment">#这里tang_array为二维，指的是第0维度，列相加</span></span><br><span class="line"><span class="comment"># [5 7 9]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tang_array.ndim)</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(tang_array,axis=<span class="number">1</span>) ) <span class="comment">###行相加。</span></span><br><span class="line"><span class="comment"># [ 6 15]</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(tang_array,axis=-<span class="number">1</span>)) <span class="comment">###最后一个维度相加，在这里tang_array为二维，也就是行相加</span></span><br><span class="line"><span class="comment"># [ 6 15]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ##############################两种API可以调用哈。 类比java语言：前者是静态方法，下面是对象方法。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">sum</span>() )</span><br><span class="line"><span class="comment"># 21</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">sum</span>(axis = <span class="number">0</span>))</span><br><span class="line"><span class="comment"># [5 7 9]</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">sum</span>(axis = <span class="number">1</span>))</span><br><span class="line"><span class="comment"># [ 6 15]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ########################################### 乘积</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.prod()) <span class="comment">#所有元素相乘。</span></span><br><span class="line"><span class="comment"># 720</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.prod(axis = <span class="number">0</span>)) <span class="comment">#列相乘</span></span><br><span class="line"><span class="comment"># [ 4 10 18]</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.prod(axis = <span class="number">1</span>)) <span class="comment">#行相乘</span></span><br><span class="line"><span class="comment"># [  6 120]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ######################################## 最大值，最小值</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">min</span>())</span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">min</span>(axis = <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">min</span>(axis = <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">max</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">[1 2 3]</span></span><br><span class="line"><span class="string">[1 4]</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ############################### 找到min，max 的 索引位置     深度学习最后结果就是利用到了该方法！！！！</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.argmin())</span><br><span class="line"><span class="built_in">print</span>(tang_array.argmin(axis = <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(tang_array.argmin(axis=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(tang_array.argmax())</span><br><span class="line"><span class="built_in">print</span>(tang_array.argmax(axis = <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(tang_array.argmax(axis = <span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">[0 0 0]</span></span><br><span class="line"><span class="string">[0 0]</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">[1 1 1]</span></span><br><span class="line"><span class="string">[2 2]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ######################### 均值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tang_array.mean())</span><br><span class="line"><span class="built_in">print</span>(tang_array.mean(axis = <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(tang_array.mean(axis = <span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3.5</span></span><br><span class="line"><span class="string">[2.5 3.5 4.5]</span></span><br><span class="line"><span class="string">[2. 5.]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ################################## 标准差</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.std())</span><br><span class="line"><span class="built_in">print</span>(tang_array.std(axis = <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(tang_array.std(axis = <span class="number">0</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.707825127659933</span></span><br><span class="line"><span class="string">[0.81649658 0.81649658]</span></span><br><span class="line"><span class="string">[1.5 1.5 1.5]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #### 方差的计算</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.var())</span><br><span class="line"><span class="built_in">print</span>(tang_array.var(axis = <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(tang_array.var(axis = <span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2.9166666666666665</span></span><br><span class="line"><span class="string">[2.25 2.25 2.25]</span></span><br><span class="line"><span class="string">[0.66666667 0.66666667]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ############################# np.clip(n,m)  小于n的数都会变成n，大于m的数都会变成m。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.clip(<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[2 2 3]</span></span><br><span class="line"><span class="string"> [4 4 4]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #### 四舍五入</span></span><br><span class="line">tang_array = np.array([<span class="number">1.2</span>,<span class="number">3.56</span>,<span class="number">6.41</span>])</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">round</span>())</span><br><span class="line"><span class="built_in">print</span>(tang_array.<span class="built_in">round</span>(decimals=<span class="number">1</span>)) <span class="comment">#####保留小数点一位。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[1.2  3.56 6.41]</span></span><br><span class="line"><span class="string">[1. 4. 6.]</span></span><br><span class="line"><span class="string">[1.2 3.6 6.4]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;numpy学习，第三部分： 数值计算&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="http://example.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy-array结构</title>
    <link href="http://example.com/2022/05/23/numpy-array%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2022/05/23/numpy-array%E7%BB%93%E6%9E%84/</id>
    <published>2022-05-23T14:26:02.000Z</published>
    <updated>2022-05-23T14:40:25.154Z</updated>
    
    <content type="html"><![CDATA[<p>numpy的第二部分学习：np array 结构！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">tang_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">tang_array = np.array(tang_list)</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[1 2 3 4 5]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 1 ndarray基本属性操作</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tang_array))</span><br><span class="line"><span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.dtype)</span><br><span class="line"><span class="comment"># int32</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.itemsize)</span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.shape)</span><br><span class="line"><span class="comment"># (5,)</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.size)</span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(np.size(tang_array))</span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(np.shape(tang_array))</span><br><span class="line"><span class="comment"># (5,)</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.ndim)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">tang_array.fill(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="comment"># [0 0 0 0 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 索引与切片:跟Python都是一样的 还是从0开始的</span></span><br><span class="line"></span><br><span class="line">tang_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">tang_array = np.array(tang_list)</span><br><span class="line"><span class="built_in">print</span>(tang_array[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(tang_array[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(tang_array[-<span class="number">2</span>:])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">[2 3]</span></span><br><span class="line"><span class="string">[4 5]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 矩阵格式（多维的形式）</span></span><br><span class="line">tang_array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">                      [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">                      [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="built_in">print</span>(tang_array.shape)</span><br><span class="line"><span class="built_in">print</span>(tang_array.size)</span><br><span class="line"><span class="built_in">print</span>(tang_array.ndim)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]</span></span><br><span class="line"><span class="string"> [7 8 9]]</span></span><br><span class="line"><span class="string">(3, 3)</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># # 二维数据的索引，切片，访问</span></span><br><span class="line"><span class="built_in">print</span>(tang_array[<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line">tang_array[<span class="number">1</span>,<span class="number">1</span>] = <span class="number">10</span>  <span class="comment"># 改为10</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 1  2  3]</span></span><br><span class="line"><span class="string"> [ 4 10  6]</span></span><br><span class="line"><span class="string"> [ 7  8  9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(tang_array[<span class="number">1</span>]) <span class="comment"># 第二行</span></span><br><span class="line"><span class="comment"># [ 4 10  6]</span></span><br><span class="line"><span class="built_in">print</span>(tang_array[:,<span class="number">1</span>]) <span class="comment"># 第二列</span></span><br><span class="line"><span class="comment"># [ 2 10  8]</span></span><br><span class="line"><span class="built_in">print</span>(tang_array[<span class="number">0</span>,<span class="number">0</span>:<span class="number">2</span>]) <span class="comment"># 第一行前两个数 [0,2)  左闭右开</span></span><br><span class="line"><span class="comment"># [1 2]</span></span><br><span class="line"><span class="built_in">print</span>(tang_array[<span class="number">0</span>,<span class="number">1</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># [2]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 如下展示，copy与赋值的关系。感觉就是传递值跟传指针的关系。传递指针时没有重新分配内存。copy时是重新分配内存的。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 1  2  3]</span></span><br><span class="line"><span class="string"> [ 4 10  6]</span></span><br><span class="line"><span class="string"> [ 7  8  9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tang_array2 = tang_array</span><br><span class="line"><span class="built_in">print</span>(tang_array2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 1  2  3]</span></span><br><span class="line"><span class="string"> [ 4 10  6]</span></span><br><span class="line"><span class="string"> [ 7  8  9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tang_array2[<span class="number">1</span>,<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(tang_array2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[  1   2   3]</span></span><br><span class="line"><span class="string"> [  4 100   6]</span></span><br><span class="line"><span class="string"> [  7   8   9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[  1   2   3]</span></span><br><span class="line"><span class="string"> [  4 100   6]</span></span><br><span class="line"><span class="string"> [  7   8   9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tang_array2 = tang_array.copy()</span><br><span class="line"><span class="built_in">print</span>(tang_array2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[  1   2   3]</span></span><br><span class="line"><span class="string"> [  4 100   6]</span></span><br><span class="line"><span class="string"> [  7   8   9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tang_array2[<span class="number">1</span>,<span class="number">1</span>] = <span class="number">10000</span></span><br><span class="line"><span class="built_in">print</span>(tang_array2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[    1     2     3]</span></span><br><span class="line"><span class="string"> [    4 10000     6]</span></span><br><span class="line"><span class="string"> [    7     8     9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[  1   2   3]</span></span><br><span class="line"><span class="string"> [  4 100   6]</span></span><br><span class="line"><span class="string"> [  7   8   9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># # 构造等差数组。</span></span><br><span class="line">tang_array = np.arange(<span class="number">0</span>,<span class="number">100</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="comment"># [ 0 10 20 30 40 50 60 70 80 90]</span></span><br><span class="line"></span><br><span class="line">tang_array1 = np.arange(<span class="number">0</span>,<span class="number">101</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(tang_array1)</span><br><span class="line"><span class="comment"># [  0  10  20  30  40  50  60  70  80  90 100]</span></span><br><span class="line"></span><br><span class="line">mask = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],dtype=<span class="built_in">bool</span>) <span class="comment">####指定bool类型，大于零的数都会指定为True</span></span><br><span class="line"><span class="built_in">print</span>(mask)</span><br><span class="line"><span class="comment"># [False False False  True  True  True False False  True  True]</span></span><br><span class="line"><span class="built_in">print</span>(tang_array[mask])   <span class="comment">##############指定为True对应的索引所在的位置才会输出。但是注意mask跟tang_array长度要一致。</span></span><br><span class="line"><span class="comment"># [30 40 50 80 90]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 随机函数np.random.rand(n),n表示产生的个数。产生n个0-1之间的随机数。</span></span><br><span class="line">random_array = np.random.rand(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(random_array)</span><br><span class="line"><span class="comment"># [0.10488454 0.16433794 0.25466763 0.1013576  0.61080029 0.57725074 0.28142913 0.99959493 0.53033253 0.76255453]</span></span><br><span class="line">mask = random_array &gt; <span class="number">0.5</span> <span class="comment">#满足条件的位置为True。</span></span><br><span class="line"><span class="built_in">print</span>(mask)</span><br><span class="line"><span class="comment"># [False False False False  True  True False  True  True  True]</span></span><br><span class="line"><span class="built_in">print</span>(random_array[mask])</span><br><span class="line"><span class="comment"># [0.61080029 0.57725074 0.99959493 0.53033253 0.76255453]</span></span><br><span class="line"></span><br><span class="line">tang_array = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>])</span><br><span class="line"><span class="built_in">print</span>(tang_array &gt; <span class="number">30</span>)</span><br><span class="line"><span class="comment"># [False False False  True  True]</span></span><br><span class="line"><span class="built_in">print</span>(np.where(tang_array &gt; <span class="number">30</span>)) <span class="comment">################################寻找满足条件的元素所在的索引。</span></span><br><span class="line"><span class="comment"># (array([3, 4], dtype=int64),)</span></span><br><span class="line"><span class="built_in">print</span>(tang_array[np.where(tang_array &gt; <span class="number">30</span>)]) <span class="comment">########由此可知，传入同长度的mask或者满足条件后的索引返回需要的值。</span></span><br><span class="line"><span class="comment"># [40 50]</span></span><br><span class="line">tang_array = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],dtype=np.float32) <span class="comment">#######建立数组时指定元素类型。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="comment"># [1. 2. 3. 4. 5.]</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.dtype)</span><br><span class="line"><span class="comment"># float32</span></span><br><span class="line"><span class="built_in">print</span>(tang_array.nbytes)       <span class="comment">##############整个数据变量的字节数。</span></span><br><span class="line"><span class="comment"># 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 指定类型为object时，会自动判断每个元素的数据类型。如果没有指明为object时，会都变成一种类型，这里会变成str</span></span><br><span class="line"><span class="comment"># tang_array = np.array([1,10,3.5,&#x27;str&#x27;],dtype = np.object)</span></span><br><span class="line"><span class="comment"># print(tang_array)</span></span><br><span class="line"><span class="comment"># [1 10 3.5 &#x27;str&#x27;]  ####numpy 如果不对的话，很有可能报错！</span></span><br><span class="line"><span class="comment"># print(tang_array * 2)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">tang_array = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">tang_array2 = np.asarray(tang_array,dtype = np.float32) <span class="comment">###########改变数据类型，但是只是复制返回新的array，原来tang_array类型不会改变。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="built_in">print</span>(tang_array2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[1 2 3 4 5]</span></span><br><span class="line"><span class="string">[1. 2. 3. 4. 5.]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">tang_array3 = tang_array.astype(np.float32)<span class="comment">#####改变数据类型，跟上面一样，只是复制返回新的array，原来tang_array类型不会改变。</span></span><br><span class="line"><span class="built_in">print</span>(tang_array)</span><br><span class="line"><span class="built_in">print</span>(tang_array3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[1. 2. 3. 4. 5.]</span></span><br><span class="line"><span class="string">[1 2 3 4 5]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;numpy的第二部分学习：np array 结构！！！&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="http://example.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy-概述</title>
    <link href="http://example.com/2022/05/23/numpy-%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2022/05/23/numpy-%E6%A6%82%E8%BF%B0/</id>
    <published>2022-05-23T14:25:44.000Z</published>
    <updated>2022-05-23T14:38:35.987Z</updated>
    
    <content type="html"><![CDATA[<p>没错，这也是上学期跟着视频学习的numpy ，代码部分，今天才有时间整理整理笔记，整理的三件套 笔记包括有 <strong>numpy，pandas，matplotlib</strong>，这都是深度学习所必须要掌握的库包，有些人觉得遇到了再去百度，很快就知道函数表达的意思，但是鄙人总是觉得自己系统的学过一遍，整理整理笔记，心里才踏实。话不多少，赶紧上车，学起来！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">hhh = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># print(hhh+1) #会报错</span></span><br><span class="line"></span><br><span class="line">array = np.array(hhh)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(array+<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;  下面两行表示打印的信息！</span></span><br><span class="line"><span class="string">[1 2 3]</span></span><br><span class="line"><span class="string">[2 3 4]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################1 属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(array))</span><br><span class="line"><span class="built_in">print</span>(array.dtype)</span><br><span class="line"><span class="built_in">print</span>(array.itemsize)</span><br><span class="line"><span class="built_in">print</span>(array.size)</span><br><span class="line"><span class="built_in">print</span>(array.nbytes)</span><br><span class="line"><span class="built_in">print</span>(array.shape)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="string">int32</span></span><br><span class="line"><span class="string">4       # 每个int32 4个字节</span></span><br><span class="line"><span class="string">3       # 数组长度为 3 </span></span><br><span class="line"><span class="string">12      # 整个数组12个字节</span></span><br><span class="line"><span class="string">(3,)    # 数据维度为一维，长度为3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ############################# 2 相加，相乘。</span></span><br><span class="line">array2 = np.array([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line"><span class="built_in">print</span>(array+array2)</span><br><span class="line"><span class="built_in">print</span>(array*array2)</span><br><span class="line"><span class="built_in">print</span>(array2[<span class="number">2</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[2 3 4]</span></span><br><span class="line"><span class="string">[3 5 7]</span></span><br><span class="line"><span class="string">[ 2  6 12]</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">new_array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(new_array)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(new_array.shape)</span><br><span class="line"><span class="comment"># (2, 3)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;没错，这也是上学期跟着视频学习的numpy ，代码部分，今天才有时间整理整理笔记，整理的三件套 笔记包括有 &lt;strong&gt;numpy，pandas，matplotlib&lt;/strong&gt;，这都是深度学习所必须要掌握的库包，有些人觉得遇到了再去百度，很快就知道函数表达的意思</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="http://example.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-系统保护-sentinel</title>
    <link href="http://example.com/2022/05/23/SpringCloud-%E7%B3%BB%E7%BB%9F%E4%BF%9D%E6%8A%A4-sentinel/"/>
    <id>http://example.com/2022/05/23/SpringCloud-%E7%B3%BB%E7%BB%9F%E4%BF%9D%E6%8A%A4-sentinel/</id>
    <published>2022-05-23T07:43:15.000Z</published>
    <updated>2022-05-23T07:45:59.786Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本篇博客目标：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">*</span> <span class="string">理解服务雪崩现象</span></span><br><span class="line"><span class="meta">*</span> <span class="string">能够部署Sentinel服务</span></span><br><span class="line"><span class="meta">*</span> <span class="string">能够配置Sentinel流量控制</span></span><br><span class="line"><span class="meta">*</span> <span class="string">能够配置Sentinel熔断降级</span></span><br><span class="line"><span class="meta">*</span> <span class="string">理解Sentinel定义资源规则</span></span><br><span class="line"><span class="meta">*</span> <span class="string">使用Sentinel整合网关实现限流</span></span><br><span class="line"><span class="meta">*</span> <span class="string">使用Sentinel整合Feign实现限流</span></span><br></pre></td></tr></table></figure><h1 id="1-系统保护"><a href="#1-系统保护" class="headerlink" title="1 系统保护"></a>1 系统保护</h1><h2 id="1-1-为什么需要系统保护"><a href="#1-1-为什么需要系统保护" class="headerlink" title="1.1 为什么需要系统保护"></a>1.1 为什么需要系统保护</h2><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要，通常一个业务调用需要经过多个后端微服务，假设在整个调用链路上，某个服务不可用的话，则有可能造成整个调用链路上的多个微服务不可用，这种效应称为<strong>服务雪崩（级联故障/失效）</strong>。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210214204635680.png" alt="image-20210214204635680"></p><p>出现服务雪崩的常见场景：</p><ul><li><strong>程序异常：</strong>执行过程出现执行异常、程序逻辑造成内存泄漏、频繁FullGC等等。</li><li><strong>流量暴增</strong>：在一些特殊场景，如秒杀、促销。造成前端的大量请求并发的发送到后端。</li><li><strong>硬件故障</strong>：服务器故障、断电等。</li><li><strong>同步等待</strong>：上游服务长时间等待下游服务的响应，造成资源耗尽。</li></ul><p>因此在微服务架构下，需要<strong>让服务具备自我保护的能力，避免被关联服务拖垮的风险</strong>。所以系统保护技术应运而生且尤为重要。</p><p>解决方案：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">*</span> <span class="string">超时机制</span></span><br><span class="line"><span class="meta">*</span> <span class="string">限流</span></span><br><span class="line"><span class="meta">*</span> <span class="string">舱壁模式</span></span><br><span class="line"><span class="meta">*</span> <span class="string">断路器模式（Hystrix）</span></span><br></pre></td></tr></table></figure><h2 id="1-2-技术选型对比"><a href="#1-2-技术选型对比" class="headerlink" title="1.2 技术选型对比"></a>1.2 技术选型对比</h2><p>当前对于系统保护，常见的有三种技术实现，分别为：<strong>Spring Cloud Hystrix</strong>、<strong>Resilience4j</strong>、<strong>Spring Cloud Alibaba Sentinel</strong>。在最新版的Spring Cloud2020.0.0版本中hystrix已经被移除，转而支持使用Resilience4j。但是不管是hystrix还是Resilience4j，在功能<strong>全面性上和使用灵活性上都不如Spring Cloud Alibaba Sentinel</strong>。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210214222904581.png" alt="image-20210214222904581"></p><h2 id="1-3-Sentinel使用"><a href="#1-3-Sentinel使用" class="headerlink" title="1.3 Sentinel使用"></a>1.3 Sentinel使用</h2><h3 id="1-3-1-概述"><a href="#1-3-1-概述" class="headerlink" title="1.3.1 概述"></a>1.3.1 概述</h3><p>​    <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210214223022989.png" alt="image-20210214223022989"></p><p><a href="https://sentinelguard.io/zh-cn/">Sentinel</a> <strong>以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性</strong>。</p><p>Sentinel 具有以下特征：</p><ul><li><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li><strong>完善的 SPI 扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><p>Sentinel 的主要特性：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210214223146720.png" alt="image-20210214223146720"></p><p>使用 Sentinel 来进行熔断保护，主要分为几个步骤:</p><ol><li>定义<strong>资源</strong></li><li>定义<strong>规则</strong></li><li>检验规则是否生效</li></ol><h3 id="1-3-2-Sentinel快速入门"><a href="#1-3-2-Sentinel快速入门" class="headerlink" title="1.3.2 Sentinel快速入门"></a>1.3.2 Sentinel快速入门</h3><h4 id="1-3-2-1-Sentinel控制台安装"><a href="#1-3-2-1-Sentinel控制台安装" class="headerlink" title="1.3.2.1 Sentinel控制台安装"></a>1.3.2.1 Sentinel控制台安装</h4><p>​    Sentinel可以直接基于控制台定义系统保护的相关规则，并且阿里提供了两种控制台的介入方式：<strong>本地jar包启动</strong>、<strong>Docker运行、阿里云平台</strong>。</p><p> 官方下载地址：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p>Wiki主页：<a href="https://github.com/alibaba/Sentinel/wiki/%E4%B8%BB%E9%A1%B5">https://github.com/alibaba/Sentinel/wiki/%E4%B8%BB%E9%A1%B5</a></p><p><strong>方式一：</strong></p><p>​    <strong>基于cmd，启动资料/sentinel下的sentinel-dashboard.jar</strong> ，即可启动sentinel控制台。 <strong>访问路径：localhost:8080。默认账号密码：sentinel/sentinel</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210517151608747.png" alt="image-20210517151608747"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 守护进程运行</span></span><br><span class="line">nohup java -jar sentinel-dashboard-1.8.0.jar &amp; </span><br></pre></td></tr></table></figure><p><strong>方式二：</strong></p><p><font color="red"><strong>基于 Docker 运行容器启动：</strong></font> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name sentinel  -d -p 8858:8858  bladex/sentinel-dashboard:1.8.0</span><br></pre></td></tr></table></figure><p>访问：<a href="http://192.168.206.99:8858/">http://192.168.206.99:8858/</a></p><h4 id="1-3-2-2-微服务接入Sentinel"><a href="#1-3-2-2-微服务接入Sentinel" class="headerlink" title="1.3.2.2 微服务接入Sentinel"></a>1.3.2.2 微服务接入Sentinel</h4><p>1）修改consumer-service的pom文件，添加sentinel依赖，<strong>前提必须引入spring-cloud-alibaba-dependencies</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）修改consumer-service的application.yml，配置sentinel控制台地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.149</span><span class="string">:8858</span> <span class="comment">#sentinel控制台地址</span></span><br></pre></td></tr></table></figure><p>3）服务器启动后访问sentinel看不到任何项目信息，需要访问一次项目后，Sentinel才会加载项目信息。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625000014673.png" alt="image-20210625000014673"></p><p>可以在终端：<strong>docker logs sentinel</strong> 来查看启动连接行为是否成功</p><h3 id="1-3-3-流量控制规则"><a href="#1-3-3-流量控制规则" class="headerlink" title="1.3.3 流量控制规则"></a>1.3.3 流量控制规则</h3><h4 id="1-3-3-1-流量控制介绍"><a href="#1-3-3-1-流量控制介绍" class="headerlink" title="1.3.3.1 流量控制介绍"></a>1.3.3.1 流量控制介绍</h4><p>对于服务稳定性的    保护，限流是一个非常重要的手段。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制，避免系统被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218131201787.png" alt="image-20210218131201787"></p><p>​    Sentinel提供了非常灵活的服务限流方式，用户可以<strong>根据自己的实际项目场景，非常方便的定义各种限流规则</strong>。其原理是监控应用流量的 <strong>QPS</strong> 或<strong>并发线程数</strong>指标，当达到指定的阈值时对流量进行控制。</p><p><strong>流量控制</strong>（flow control），其原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210424212303266.png" alt="image-20210424212303266"></p><h4 id="1-3-3-2-阈值类型"><a href="#1-3-3-2-阈值类型" class="headerlink" title="1.3.3.2 阈值类型"></a>1.3.3.2 阈值类型</h4><h5 id="1-3-3-2-1-QPS"><a href="#1-3-3-2-1-QPS" class="headerlink" title="1.3.3.2.1 QPS"></a>1.3.3.2.1 QPS</h5><p>​    QPS即每秒查询率，可以对某个接口定义每秒允许的查询次数，超过则丢弃。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625000242924.png" alt="image-20210625000242924"></p><ul><li><strong>资源名：</strong> 唯一名称，默认请求路径。</li><li><strong>针对来源：</strong>Sentinel可以针对调用者进行限流，填写服务名，默default（不区分来源）。</li><li><strong>阈值类型/单机阈值</strong><ul><li>QPS（每秒钟的请求数量）： 当调用该API的QPS达到阈值的时候，进行限流。</li><li>线程数：当调用该API的线程数达到阈值的时候，进行限流。</li></ul></li><li><strong>是否集群：</strong> 不需要集群。</li></ul><p><strong>打开Jemeter进行测试</strong></p><p>设置简体中文</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625000536091.png" alt="image-20210625000536091"></p><p>设置一个线程，一秒内访问5次</p><p><strong>添加线程组</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625000758342.png" alt="image-20210625000758342"></p><p><strong>添加请求</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625000914144.png" alt="image-20210625000914144"></p><p><strong>编辑线程数</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625113314012.png" alt="image-20210625113314012"></p><p>设置协议、IP、端口、请求方式、接口地址</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625001139246.png" alt="image-20210625001139246"></p><p>运行，查看接口，可知，由于定义了限流规则，每秒内只能访问两次，所以两个请求通过，三个请求被拒绝</p><p>新增查看结果：</p><img src="F:\java\%E4%B8%8A%E8%AF%BE%E8%B5%84%E6%96%99\itheima129\03.%E9%A1%B9%E7%9B%AE%E4%B8%80%E5%89%8D%E7%BD%AE%E8%AF%BE\%E8%B5%84%E6%96%99\day07-SpringCloud03\%E8%AE%B2%E4%B9%89\assets\image-20210424163933906.png" alt="image-20210424163933906" style="zoom:50%;" /><p>点击执行查看结果：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218123021951.png" alt="image-20210218123021951"></p><h5 id="1-3-3-2-2-线程数"><a href="#1-3-3-2-2-线程数" class="headerlink" title="1.3.3.2.2 线程数"></a>1.3.3.2.2 线程数</h5><p>修改<strong>阈值类型为线程数</strong>、<strong>单机阈值为1</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625001356749.png" alt="image-20210625001356749"></p><p><strong>使用Jemeter进行测试</strong></p><p>修改setup线程组，0秒内启动5个线程循环一次。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218123643691.png" alt="image-20210218123643691"></p><p>指定访问接口</p><p>运行，查看接口，可知，由于定义了限流规则，<strong>每秒内只能一个线程访问，所以一个线程通过</strong>，四个线程被拒绝</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218123730442.png" alt="image-20210218123730442"></p><h4 id="1-3-3-3-流控模式"><a href="#1-3-3-3-流控模式" class="headerlink" title="1.3.3.3 流控模式"></a>1.3.3.3 流控模式</h4><p>​    流控模式分为三种：<strong>直接、关联、链路。</strong> 每种流控模式的效果都不同，可以根据当前需求选择对应的流控模式。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625001807382.png" alt="image-20210625001807382"></p><p>注意，上面所讲的，都是<strong>先启动项目，再在sentinel设置规则！</strong>而且<strong>，重启项目后，进行资源访问，还要等一小段时间，sentinel才会同步监控的数据信息</strong></p><h5 id="1-3-3-3-1-直接"><a href="#1-3-3-3-1-直接" class="headerlink" title="1.3.3.3.1 直接"></a>1.3.3.3.1 直接</h5><p>该模式为<strong>默认模式，其会针对某个资源直接操作，当达到了阈值则触发</strong>。</p><h5 id="1-3-3-3-2-关联"><a href="#1-3-3-3-2-关联" class="headerlink" title="1.3.3.3.2 关联"></a>1.3.3.3.2 关联</h5><p>在该模式下，当<strong>关联的资源触发规则</strong>，<strong>原来的资源触发流控效果</strong>。</p><p><strong>新建SentinelUserController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelUserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//资源1</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Sentinel1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//资源2</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Sentinel2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置流控规则</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218130057509.png" alt="image-20210218130057509"></p><p><strong>打开Jemeter进行测试</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218125628700.png" alt="image-20210218125628700"></p><p><strong>添加http请求，无限访问hello2</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218125803456.png" alt="image-20210218125803456"></p><p><strong>浏览器访问hello1，可以发现，其已经被限流，无法被访问。</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625003011846.png" alt="image-20210625003011846"></p><p>上面的模拟场景是：<strong>1本来是要访问2的，但是2 由于其他访问来源而达到了限流，那么1就会被阻断</strong></p><h5 id="1-3-3-3-3-链路"><a href="#1-3-3-3-3-链路" class="headerlink" title="1.3.3.3.3 链路"></a>1.3.3.3.3 链路</h5><p>在链路模式下会对一条链路的访问进行控制。当从某个接口过来的资源达到限流条件时，则开启限流。</p><p><strong>1）修改consumer-service的SentinelUserController</strong>，添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><strong>2）声明方法为链路资源</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将此方法标注为sentinel的资源。value=资源名</span></span><br><span class="line"><span class="meta">@SentinelResource(&quot;chain&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;chain&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3）添加两个handlerMethod，调用相同资源</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//资源3</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/hello3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dosomething();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello Sentinel3&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//资源4</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/hello4&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dosomething();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello Sentinel4&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4）修改consumer-service的application.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment">#关闭context收敛防止chain限流不生效</span></span><br></pre></td></tr></table></figure><p><strong>5）配置sentinel规则</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218134254739.png" alt="image-20210218134254739"></p><p><strong>6）Jemter中配置一个线程无限循环访问</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218134346544.png" alt="image-20210218134346544"></p><p><strong>7）Jemeter中配置http请求，访问/user/hello3</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218134422241.png" alt="image-20210218134422241"></p><p><strong>8）请求访问可以发现/user/hello3被限流</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218134448147.png" alt="image-20210218134448147"></p><p><strong>9）通过浏览器访问/user/hello4，可以发现仍然可以对chain资源进行访问</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218134525972.png" alt="image-20210218134525972"></p><h4 id="1-3-3-4-流控效果"><a href="#1-3-3-4-流控效果" class="headerlink" title="1.3.3.4 流控效果"></a>1.3.3.4 流控效果</h4><p>​    Sentinel中存在三种流控效果：<strong>快速失败</strong>、<strong>WarmUp</strong>、<strong>排队等待</strong>。</p><h5 id="1-3-3-4-1-快速失败"><a href="#1-3-3-4-1-快速失败" class="headerlink" title="1.3.3.4.1 快速失败"></a>1.3.3.4.1 快速失败</h5><p>​    该效果为默认效果，当达到限流规则后，则不允许进行访问。</p><h5 id="1-3-3-4-2-WarmUp"><a href="#1-3-3-4-2-WarmUp" class="headerlink" title="1.3.3.4.2 WarmUp"></a>1.3.3.4.2 WarmUp</h5><p>​    当流量突然增大的时候，我们常常会希望系统<strong>从空闲状态到繁忙状态的切换的时间长一些</strong>。即如果系统在此之前长期处于空闲的状态，<strong>我们希望处理请求的数量是缓步的增多，经过预期的时间以后，到达系统处理请求个数的最大值</strong>。<strong>Warm Up（冷启动，预热）</strong>模式就是为了实现这个目的的。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210219155550313.png" alt="image-20210219155550313"></p><p>　该模式主要用于启动需要额外开销的场景，例如建立连接等。</p><p>它的使用存在一个公式<code>threshold (阈值)/coldFactor（冷加载因子，默认为3）=最初的阈值</code>。接着<code>最初的阈值*预热时长</code>来最终实现限流。（<strong>前5秒为3，当预热时间5秒过去后变成了最大值的10哈哈哈哈哈</strong>）</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218135803393.png" alt="image-20210218135803393"></p><h5 id="1-3-3-4-3-排队等待"><a href="#1-3-3-4-3-排队等待" class="headerlink" title="1.3.3.4.3 排队等待"></a>1.3.3.4.3 排队等待</h5><p>​    所谓<strong>排队等待</strong>又可以称为匀速器即<strong>让请求以均匀的速度通过</strong>。</p><p>​    实现原理是当请求到来的时候：</p><ul><li><p>如果当前请求距离上个通过的请求通过的时间间隔大于预设值，则让当前请求通过；</p></li><li><p>否则，计算当前请求的预期通过时间，如果该请求的预期通过时间小于规则预设的 timeout 时间，则该请求会等待直到预设时间到来通过（排队等待处理）；若预期的通过时间超出最大排队时长，则直接拒接这个请求。</p></li></ul><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218135936673.png" alt="image-20210218135936673"></p><p>​    这种方式主要用于处理间隔性突发的流量。假设现在有一个消息队列，<strong>突然接收到大量的消息，对于这些消息肯定不会直接拒绝多余的请求，而是希望系统以稳定的速度，逐步处理这些请求，以起到“削峰填谷”的效果</strong>。</p><p>　<strong>如下：设置为每秒允许有10次请求，如果每秒超过了10个请求，则需要排队等待，每个请求最长等待时间为10s。</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218140145615.png" alt="image-20210218140145615"></p><h3 id="1-3-4-熔断降级规则"><a href="#1-3-4-熔断降级规则" class="headerlink" title="1.3.4 熔断降级规则"></a>1.3.4 熔断降级规则</h3><h4 id="1-3-4-1-熔断降级介绍"><a href="#1-3-4-1-熔断降级介绍" class="headerlink" title="1.3.4.1 熔断降级介绍"></a>1.3.4.1 熔断降级介绍</h4><p>现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。如果链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的服务调用进行<strong>熔断降级</strong>，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218142220134.png" alt="image-20210218142220134"></p><ul><li><strong>熔断：</strong>当某服务出现不可用或响应超时的情况时，停止对该服务的调用，让其不可访问。</li><li><strong>降级：</strong>当服务被熔断后，需要有一个兜底策略，如返回一个错误友好界面，或让被熔断的服务过一段时间后，再对外提供访问。</li></ul><p>​    <strong>Sentinel中提供了三种熔断降级策略：慢比例调用、异常比例、异常数。</strong></p><h4 id="1-3-4-2-根据平均响应时间降级"><a href="#1-3-4-2-根据平均响应时间降级" class="headerlink" title="1.3.4.2 根据平均响应时间降级"></a>1.3.4.2 根据平均响应时间降级</h4><p>​    <strong>当统计时长内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断</strong>。比例阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</p><p>​    <strong>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断</strong>。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218142823885.png" alt="image-20210218142823885"></p><p>由于版本bug，需要切换资料中提供的sentinel</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625011617694-1624554980708.png" alt="image-20210625011617694"></p><p>修改consumer-service的application.yml</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625011838865.png" alt="image-20210625011838865"></p><p><strong>1）修改SentinelUserController，增加等待时长</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//资源5</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/hello5/&#123;flag&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello5</span><span class="params">(<span class="meta">@PathVariable(&quot;flag&quot;)</span> <span class="keyword">int</span> flag)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>)&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello Sentinel5&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2）定义熔断降级规则</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218143727863.png" alt="image-20210218143727863"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">解释：两秒内，请求数量超过5，且响应时长超过2秒的请求数量比例大于10%，则对该资源熔断3秒</span></span><br></pre></td></tr></table></figure><p><strong>3）Jemter配置10个线程无限访问</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218144307138.png" alt="image-20210218144307138"></p><p><strong>4）Jemter配置访问/user/hello5资源，并携带参数为1</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218144354439.png" alt="image-20210218144354439"></p><p><strong>5）Jemter启动访问，可以发现请求被拒绝，且浏览器访问该资源携带参数为2，也被拒绝访问</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218144458223.png" alt="image-20210218144458223"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625012938584.png" alt="image-20210625012938584"></p><p><strong>6）停止Jemter，过了3秒后，则/user/hello5/2即可访问。</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625013007974.png" alt="image-20210625013007974"></p><h4 id="1-3-4-3-根据异常比例降级"><a href="#1-3-4-3-根据异常比例降级" class="headerlink" title="1.3.4.3 根据异常比例降级"></a>1.3.4.3 根据异常比例降级</h4><p>当统计时长内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成则结束熔断。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218144904779.png" alt="image-20210218144904779"></p><p><strong>1）修改SentinelUserController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//资源6</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/hello6/&#123;flag&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello6</span><span class="params">(<span class="meta">@PathVariable(&quot;flag&quot;)</span> <span class="keyword">int</span> flag)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello Sentinel6&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2）定义熔断降级规则</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218150945939.png" alt="image-20210218150945939"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">解释：一秒内，请求数量超过5个，且请求异常比例超过10%，则3秒内不允许访问。</span></span><br></pre></td></tr></table></figure><p><strong>3）浏览器访问测试</strong></p><p>​    可以发现，当达到熔断降级规则后，该资源3秒内不允许访问，过了三秒则继续允许访问。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625145701782.png" alt="image-20210625145701782"></p><p>熔断后访问其它服务地址：<a href="http://localhost:8089/user/hello6/3">http://localhost:8089/user/hello6/3</a></p><p>也会出现提示：Blocked by Sentinel (flow limiting)</p><h4 id="1-3-4-4-根据异常数降级"><a href="#1-3-4-4-根据异常数降级" class="headerlink" title="1.3.4.4 根据异常数降级"></a>1.3.4.4 根据异常数降级</h4><p>当统计时长内的异常数目超过阈值之后会自动进行熔断。过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成则结束熔断。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218151508422.png" alt="image-20210218151508422"></p><p><strong>1）定义熔断降级规则</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218152705631.png" alt="image-20210218152705631"></p><p><strong>2）浏览器访问测试</strong></p><p>​    可以发现，当一秒内超过5个请求访问，且出现了3次异常，则该接口会被降级5秒。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625150132820.png" alt="image-20210625150132820"></p><h3 id="1-3-5-系统保护规则"><a href="#1-3-5-系统保护规则" class="headerlink" title="1.3.5 系统保护规则"></a>1.3.5 系统保护规则</h3><p>系统保护的目的：</p><ul><li>保证系统不被拖垮</li><li>在系统稳定的前提下，保持系统的吞吐量</li></ul><p>​    <a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81">系统保护规则</a>是从应用级别的入口流量进行控制，从单台机器的 <strong>load</strong>、<strong>CPU 使用率</strong>、<strong>平均 RT</strong>、<strong>入口 QPS</strong> 和<strong>并发线程数</strong>等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>​    系统保护规则是应用整体维度的，而不是资源维度的，并且<strong>仅对入口流量生效</strong>。入口流量指的是进入应用的流量，比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p><p>系统规则支持以下的模式：</p><ul><li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li><li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li><li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul><h3 id="1-3-6-热点规则"><a href="#1-3-6-热点规则" class="headerlink" title="1.3.6 热点规则"></a>1.3.6 热点规则</h3><h4 id="1-3-6-1-热点参数限流介绍"><a href="#1-3-6-1-热点参数限流介绍" class="headerlink" title="1.3.6.1 热点参数限流介绍"></a>1.3.6.1 热点参数限流介绍</h4><p>​    热点即经常访问的数据。假设<strong>希望统计某个热点数据中访问频次最高的 TopN数据，并对其访问进行限制</strong>。比如：</p><ul><li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li><li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li></ul><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218153658551.png" alt="image-20210218153658551"></p><h4 id="1-3-6-2-参数位限流"><a href="#1-3-6-2-参数位限流" class="headerlink" title="1.3.6.2 参数位限流"></a>1.3.6.2 参数位限流</h4><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218154134473.png" alt="image-20210218154134473"></p><ul><li><strong>参数索引：</strong>即要对第几个请求参数限流，从0开始。</li><li><strong>统计窗口时长：</strong>多久统计一次。</li></ul><p><strong>1）修改SentinelUserController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//资源  热点参数限流</span></span><br><span class="line">   <span class="meta">@SentinelResource(value = &quot;hello66&quot;)</span>   <span class="comment">// ***** 添加资源注解</span></span><br><span class="line">   <span class="meta">@GetMapping(value = &quot;/hello66&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">hello6</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">           <span class="meta">@RequestParam(value = &quot;username&quot;,required = false)</span> String username)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Hello Sentinel66 username=&quot;</span>+username;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>2）定义热点限流规则</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625151328372.png" alt="image-20210625151328372"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">解释：如果hello66资源携带参数，则每秒只能访问一次</span></span><br></pre></td></tr></table></figure><p><strong>3）浏览器访问测试</strong></p><p>​    通过测试可知，当携带请求参数时，会被触发限流。如果不携带则不会触发限流。</p><p>限流异常提示：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625151404898.png" alt="image-20210625151404898"></p><p>控制台错误提示：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException: heima</span></span><br><span class="line"></span><br><span class="line">2021-06-25 15:12:01.771 ERROR 26540 --- [nio-8089-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.reflect.UndeclaredThrowableException] with root cause</span><br><span class="line"></span><br><span class="line"><span class="section">com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException: heima</span></span><br><span class="line"></span><br><span class="line">2021-06-25 15:12:01.961 ERROR 26540 --- [nio-8089-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.reflect.UndeclaredThrowableException] with root cause</span><br><span class="line"></span><br><span class="line"><span class="section">com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException: heima</span></span><br><span class="line"></span><br><span class="line">2021-06-25 15:12:03.941 ERROR 26540 --- [nio-8089-exec-7] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.reflect.UndeclaredThrowableException] with root cause</span><br><span class="line"></span><br><span class="line"><span class="section">com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException: heima</span></span><br><span class="line"></span><br><span class="line">2021-06-25 15:12:04.179 ERROR 26540 --- [nio-8089-exec-9] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.reflect.UndeclaredThrowableException] with root cause</span><br><span class="line"></span><br><span class="line"><span class="section">com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException: heima</span></span><br><span class="line"></span><br><span class="line">2021-06-25 15:12:04.643 ERROR 26540 --- [nio-8089-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.reflect.UndeclaredThrowableException] with root cause</span><br><span class="line"></span><br><span class="line"><span class="section">com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException: heima</span></span><br><span class="line"></span><br><span class="line">2021-06-25 15:13:44.133 ERROR 26540 --- [nio-8089-exec-6] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.reflect.UndeclaredThrowableException] with root cause</span><br><span class="line"></span><br><span class="line"><span class="section">com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException: heima</span></span><br></pre></td></tr></table></figure><p><strong>4）返回友好错误提示</strong></p><p>​    如上所示，当触发热点参数限流后，前端会出现异常提示，但是一般情况下发生了错误，不应该给用户返回错误500信息，而应该给用户返回友好的错误提示。</p><p><strong>修改代码如下所示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//资源  热点参数限流</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;hello66&quot;,blockHandler = &quot;hotHandler&quot;)</span>   <span class="comment">// ***** 添加资源注解</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/hello66&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello6</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@RequestParam(value = &quot;username&quot;,required = false)</span> String username)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello Sentinel66 username=&quot;</span>+username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hotHandler</span><span class="params">(String username, BlockException e)</span> </span>&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;抱歉，关于：&quot;</span>+username+<span class="string">&quot; 的查询有误&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5）浏览器访问测试</strong></p><p><a href="http://localhost:8089/user/hello66?username=heima">http://localhost:8089/user/hello66?username=heima</a></p><p>​    重新通过浏览器访问测试，可以发现，前端不再出现500异常，而是返回自定义错误提示信息。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625152004191.png" alt="image-20210625152004191"></p><h4 id="1-3-6-3-参数值限流"><a href="#1-3-6-3-参数值限流" class="headerlink" title="1.3.6.3 参数值限流"></a>1.3.6.3 参数值限流</h4><p>在一些特定场景下，可能光对指定参数位限流可能满足不了实际需求，有可能还需要对具体参数值进行限流。</p><p>例如：</p><p>​    商品id为2设定限流阈值为2</p><p>​    商品id为3设定限流阈值为1000</p><p><strong>1）定义限流规则</strong></p><p>编辑限流规则，打开高级选项，设置参数类型、参数值、限流阈值</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625152353914.png" alt="image-20210625152353914"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">解释：</span></span><br><span class="line"><span class="attr">当访问hello66资源时，如果第一个参数的参数值为heima，则每秒只能访问2次。第一个参数其他参数值每秒最多10次</span></span><br></pre></td></tr></table></figure><p><strong>2）浏览器访问测试</strong></p><p>​    通过测试可知，当参数值为2，当达到限流阈值则触发限流。</p><blockquote><p>注意：热点规则的参数必须是基本数据类型或者是String类型。</p></blockquote><h3 id="1-3-7-访问控制规则"><a href="#1-3-7-访问控制规则" class="headerlink" title="1.3.7 访问控制规则"></a>1.3.7 访问控制规则</h3><p><strong>1 黑白名单授权控制</strong></p><p>很多时候，我们需要根据调用来源来判断该次请求是否允许放行，这时候可以使用 Sentinel 的来源访问控制（黑白名单控制）的功能。</p><p>根据请求来源限制是否通过:</p><ul><li>若配置白名单则只有请求来源位于白名单内时才可通过；</li><li>若配置黑名单则请求来源位于黑名单时不通过，其余的请求通过。</li></ul><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218161850744.png" alt="image-20210218161850744"></p><p><strong>1）定义Bean，用于解析IP来源</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPLimiter</span> <span class="keyword">implements</span> <span class="title">RequestOriginParser</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parseOrigin</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> httpServletRequest.getRemoteAddr();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2）定义授权规则</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625162655869.png" alt="image-20210625162655869"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">解释：不允许ip为127.0.0.1的来源访问该资源，其他IP均可以访问，如localhost</span></span><br></pre></td></tr></table></figure><p><strong>3）浏览器测试</strong></p><p>​    经过测试可以，当IP为127.0.0.1时，无法访问该资源，被限制访问，后台出现认证异常。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210218162955258.png" alt="image-20210218162955258"></p><h3 id="1-3-8-注解方式定义资源"><a href="#1-3-8-注解方式定义资源" class="headerlink" title="1.3.8 注解方式定义资源"></a>1.3.8 注解方式定义资源</h3><p><strong>（为了返回友好的提示）</strong></p><h4 id="1-3-8-1-注解-SentinelResource介绍"><a href="#1-3-8-1-注解-SentinelResource介绍" class="headerlink" title="1.3.8.1 注解@SentinelResource介绍"></a>1.3.8.1 注解@SentinelResource介绍</h4><p>​    Sentinel 提供了 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81">@SentinelResource</a> 注解用于定义资源，并提供了 AspectJ 的扩展用于自动定义资源、处理 BlockException 等。常见属性：</p><ul><li><p><strong>value</strong></p><p>资源名称，必需项，因为需要通过resource name找到对应的规则，这个是必须配置的。</p></li><li><p><strong>blockHandler</strong></p><p>blockHandler 对应处理 BlockException 的函数名称，可选项。<br>blockHandler 函数访问范围需要是 public，返回类型需要与原方法相匹配，<br>参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 BlockException。</p></li><li><p><strong>blockHandlerClass</strong></p><p>​    blockHandler 函数默认需要和原方法在同一个类中，如果希望使用其他类的函数，则需要指定 blockHandlerClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</p></li><li><p><strong>fallback</strong></p><p>​    fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。</p></li><li><p><strong>fallbackClass</strong></p><p>fallbackClass的应用和blockHandlerClass类似，fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 fallbackClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</p></li></ul><h4 id="1-3-8-2-fallback属性"><a href="#1-3-8-2-fallback属性" class="headerlink" title="1.3.8.2 fallback属性"></a>1.3.8.2 fallback属性</h4><p>​    fallback属性 用于在业务发生异常的时候，指定兜底方法，从而完成后续异常处理实现。</p><p><strong>1）修改SentinelUserController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//资源7</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/hello7&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;hello7&quot;, blockHandler = &quot;blockHandler&quot;,fallback = &quot;fallbackHandler&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello7</span><span class="params">(<span class="meta">@RequestParam(&quot;flag&quot;)</span> <span class="keyword">int</span> flag)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello Sentinel7&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义兜底方法，该方法的返回值类型、形参数量、形参类型均与原方法一致</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fallbackHandler</span><span class="params">(<span class="keyword">int</span> flag)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;业务执行出现异常&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">blockHandler</span><span class="params">(<span class="keyword">int</span> flag, BlockException bk)</span> </span>&#123;</span><br><span class="line">  bk.printStackTrace();</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;blockHandler 被限流了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2）浏览器访问测试</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625163036701.png" alt="image-20210625163036701"></p><p><strong>小结：</strong></p><p>若 blockHandler 和 fallback 都进行了配置则：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">*</span> <span class="string">若配置限流操作，达到限流则执行 blockHandler 方法</span></span><br><span class="line"><span class="meta">*</span> <span class="string">若没有达到限流配置，程序出现异常则执行 fallback 方法</span></span><br></pre></td></tr></table></figure><h4 id="1-3-8-3-全局使用"><a href="#1-3-8-3-全局使用" class="headerlink" title="1.3.8.3 全局使用"></a>1.3.8.3 全局使用</h4><p>​    有时<strong>多个方法定义相同的异常处理逻辑</strong>，则可以定义全局异常逻辑处理类</p><p><strong>1）定义全局异常处理Handler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFallBackHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">fallbackHandler</span><span class="params">(<span class="keyword">int</span> flag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;业务执行出现异常-全局处理&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2）修改UserController，指定全局异常处理Handler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/hello7&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;hello7&quot;,fallbackClass = GlobalFallBackHandler.class,fallback = &quot;fallbackHandler&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello7</span><span class="params">(<span class="meta">@RequestParam(&quot;flag&quot;)</span> <span class="keyword">int</span> flag)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello Sentinel7&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**3）浏览器访问测试 <a href="http://localhost:8089/user/hello7?flag=1">http://localhost:8089/user/hello7?flag=1</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625163408397.png" alt="image-20210625163408397"></p><h3 id="1-3-9-网关限流"><a href="#1-3-9-网关限流" class="headerlink" title="1.3.9 网关限流"></a>1.3.9 网关限流</h3><p>Sentinel提供了与<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel#spring-cloud-gateway-%E6%94%AF%E6%8C%81">Spring Cloud GateWay</a>的依赖适配，开发者在使用Sentinel时，可以<strong>直接基于网关对后端微服务资源进行逐一规则配置，而不需要在每个微服务中配置，从而简化开发，提升开发效率。</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210426162613686.png" alt="image-20210426162613686"></p><h4 id="1-3-9-1-网关整合Sentinel"><a href="#1-3-9-1-网关整合Sentinel" class="headerlink" title="1.3.9.1 网关整合Sentinel"></a>1.3.9.1 网关整合Sentinel</h4><p><strong>1）网关服务添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 监控检查--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- gateway与sentinel适配依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2）修改网关服务application.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">consumer</span> <span class="comment"># 当前路由的唯一标识</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://consumer</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/consumer/**</span> <span class="comment"># 按照路径匹配的规则</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.149</span><span class="string">:8858</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.149</span><span class="string">:8848</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3）基于网关访问后端微服务，可以看到sentinel中出现网关服务</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625140208144.png" alt="image-20210625140208144"></p><p><strong>4）网关服务 选择 “请求链路” 定义限流规则</strong></p><p><strong>方式一：根据 route id 设置限流或者是降级规则</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625140423973.png" alt="image-20210625140423973"></p><p><strong>方式二：根据 API分组 设置限流或者是降级规则</strong></p><p>点击 API管理，先添加 API分组</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625140752042.png" alt="image-20210625140752042"></p><p>添加成功：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625140821639.png" alt="image-20210625140821639"></p><p>设置限流或者降级规则</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625140948601.png" alt="image-20210625140948601"></p><p><strong>5）测试访问限流规则生效</strong></p><p>地址：<a href="http://localhost:10010/consumer/user/hello2">http://localhost:10010/consumer/user/hello2</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625141218809.png" alt="image-20210625141218809"></p><h4 id="1-3-9-2-自定义返回限流数据"><a href="#1-3-9-2-自定义返回限流数据" class="headerlink" title="1.3.9.2 自定义返回限流数据"></a>1.3.9.2 自定义返回限流数据</h4><p>上述返回的数据还是 <code>Blocked by Sentinel: ParamFlowException</code>,  在实际开发中，需要返回友好的提示信息。</p><p>官网地址：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel#%E9%85%8D%E7%BD%AE">https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel#%E9%85%8D%E7%BD%AE</a></p><p>两种方式：</p><p><strong>方式一</strong>：显示当应用的 <code>ApplicationContext</code> 中存在对应的Bean的类型时，会进行自动化设置：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210426172839570.png" alt="image-20210426172839570"></p><p>实现：在网关编写一个配置类即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.BlockRequestHandler;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.GatewayCallbackManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SentinelConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    GatewayCallbackManager.setBlockHandler(<span class="keyword">new</span> BlockRequestHandler() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">handleRequest</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        ServerHttpResponse response = serverWebExchange.getResponse();</span><br><span class="line">        response.getHeaders().add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置返回json数据</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;502&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;被限流了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;SentinelConfig 流控.....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ServerResponse.status(HttpStatus.TOO_MANY_REQUESTS)</span><br><span class="line">          .body(Mono.just(JSON.toJSONString(map)), String.class);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式二</strong>：Spring Cloud Alibaba Sentinel 提供了这些配置选项</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210426172917824.png" alt="image-20210426172917824"></p><p>在网关 application.yml 配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sentinel:</span></span><br><span class="line">  <span class="attr">transport:</span></span><br><span class="line">    <span class="attr">dashboard:</span> <span class="number">192.168</span><span class="number">.206</span><span class="number">.99</span><span class="string">:8858</span></span><br><span class="line">  <span class="attr">filter:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">scg:</span></span><br><span class="line">    <span class="attr">fallback:</span></span><br><span class="line">      <span class="attr">content-type:</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      <span class="attr">response-body:</span> <span class="string">&quot;&#123;\&quot;msg\&quot;: \&quot;访问过快...请稍后重试\&quot;,\&quot;code\&quot;: \&quot;502\&quot;&#125;&quot;</span></span><br><span class="line">      <span class="attr">response-status:</span> <span class="number">502</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">&quot;response&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-10-Sentinel-整合-Feign"><a href="#1-3-10-Sentinel-整合-Feign" class="headerlink" title="1.3.10 Sentinel 整合 Feign"></a>1.3.10 Sentinel 整合 Feign</h3><p>Sentinel 适配了 <a href="https://github.com/OpenFeign/feign">Feign</a> 组件。如果想使用，除了引入 <code>spring-cloud-starter-alibaba-sentinel</code> 的依赖外还需要 2 个步骤：</p><ul><li>配置文件打开 Sentinel 对 Feign 的支持：<code>feign.sentinel.enabled=true</code></li><li>加入 <code>spring-cloud-starter-openfeign</code> 依赖使 Sentinel starter 中的自动化配置类生效</li></ul><p>实现步骤：</p><p><strong>0）添加feign依赖，在启动类上加feign开关</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--feign依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">//开启feign支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1）在 consumer-service服务 application.yml 配置文件开启对feign支持</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>2）在consumer-service中定义UserClient.java作为feign接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/address/me&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">myAddress</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）修改consumer-service的ConsuerController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/address&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userClient.myAddress();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4）定义 fallback 类实现 feign接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClientFallback</span> <span class="keyword">implements</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">myAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;抱歉：请求超时，请稍后重试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3）在feign接口中指定  fallback 类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;,fallback = UserClientFallback.class)</span></span><br></pre></td></tr></table></figure><p>4）请求测试：<a href="http://localhost:10010/consumer/user/address">http://localhost:10010/consumer/user/address</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625144113505.png" alt="image-20210625144113505"></p><p><strong>5）定义限流规则测试</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625144228387.png" alt="image-20210625144228387"></p><blockquote><p>服务提供方也可以整合Sentinel，在user-service服务里设置限流规则。</p></blockquote><p>添加流控</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625144458456.png" alt="image-20210625144458456"></p><p>访问 <a href="http://localhost:10010/consumer/user/address%E7%BB%93%E6%9E%9C%EF%BC%9A">http://localhost:10010/consumer/user/address结果：</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625144537202.png" alt="image-20210625144537202"></p><p><strong>Sentinel 使用总结：</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210426211336363.png" alt="image-20210426211336363"></p><h3 id="1-3-11-规则持久化-了解"><a href="#1-3-11-规则持久化-了解" class="headerlink" title="1.3.11 规则持久化(了解)"></a>1.3.11 规则持久化(了解)</h3><p>​    Sentinel默认会把规则信息保存到内存中，当服务重启之后，规则就会丢失，生产环境下绝对不会这么做。更多时候规则会存储在文件、数据库或者配置中心当中。</p><p>参考官网：<a href="https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel">生产环境中使用Sentinel</a></p><p>阿里云AHAS：<a href="https://help.aliyun.com/document_detail/110599.html?spm=a2c4g.11186623.6.591.1c3c27f92FJf7P">应用防护接入</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;本篇博客目标：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
      
    
    
    
    <category term="SpringCloud" scheme="http://example.com/categories/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://example.com/tags/SpringCloud/"/>
    
    <category term="Sentinel" scheme="http://example.com/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>tf2目标检测API环境配置</title>
    <link href="http://example.com/2022/05/22/tf2%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8BAPI%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/05/22/tf2%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8BAPI%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2022-05-22T09:44:59.000Z</published>
    <updated>2022-05-22T09:50:49.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-tensorflow项目环境搭建："><a href="#1-tensorflow项目环境搭建：" class="headerlink" title="1 tensorflow项目环境搭建："></a>1 tensorflow项目环境搭建：</h3><p>参考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//tensorflow-object-detection-api-tutorial.readthedocs.io/en/latest/install.html#set-env</span></span><br></pre></td></tr></table></figure><p>注意：<strong>以下所有操作，只要是不区分linux跟windows的，默认linux跟windows执行同样的操作！</strong></p><h3 id="2-搭建conda虚拟环境"><a href="#2-搭建conda虚拟环境" class="headerlink" title="2 搭建conda虚拟环境"></a>2 搭建conda虚拟环境</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">conda</span> <span class="string">create -n tensorflow pip python=3.9</span></span><br><span class="line"><span class="attr">conda</span> <span class="string">activate tensorflow</span></span><br><span class="line"><span class="attr">conda</span> <span class="string">install  tensorflow==2.5.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">验证tf安装成功：</span></span><br><span class="line"><span class="attr">python</span> <span class="string">-c &quot;import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span></span><br><span class="line"><span class="attr">或者法二：说进入python环境，导入tf，并查看版本号</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-下载项目"><a href="#3-下载项目" class="headerlink" title="3 下载项目"></a>3 下载项目</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(tensorflow)</span> <span class="string">E:\12-AI&gt;dir</span></span><br><span class="line"><span class="attr">或者：</span></span><br><span class="line"><span class="meta">(tensorflow)</span> <span class="string">jason@jason-virtual-machine:~/桌面/TensorFlow$</span></span><br><span class="line"><span class="attr">下载如下连接内容并且解压缩到如上文件夹下(解压后的文件夹名称改为models)</span></span><br><span class="line"><span class="attr">https</span>:<span class="string">//github.com/tensorflow/models/archive/master.zip</span></span><br></pre></td></tr></table></figure><h3 id="4-下载protoc-linux以及window版本"><a href="#4-下载protoc-linux以及window版本" class="headerlink" title="4 下载protoc  linux以及window版本"></a>4 下载protoc  linux以及window版本</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">protoc-3.12.3-win64.zip</span></span><br><span class="line"><span class="attr">protoc-3.12.3-linux-x86_64.zip</span></span><br><span class="line"><span class="attr">https</span>:<span class="string">//github.com/protocolbuffers/protobuf/releases/tag/v3.12.3</span></span><br></pre></td></tr></table></figure><h3 id="5-安装protoc"><a href="#5-安装protoc" class="headerlink" title="5 安装protoc"></a>5 安装protoc</h3><h4 id="1-linux安装方法："><a href="#1-linux安装方法：" class="headerlink" title="1  linux安装方法："></a>1  linux安装方法：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Linux安装protoc</span>  <span class="string"></span></span><br><span class="line"><span class="attr">参考：</span></span><br><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/qq_38483583/article/details/123779519</span></span><br><span class="line"></span><br><span class="line"><span class="attr">解压缩之后进入解压缩的文件夹的bin文件夹：</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">mv protoc /usr/local/bin</span></span><br><span class="line"><span class="attr">然后进入解压缩的文件夹的include文件夹：</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">cp -r google /usr/local/include</span></span><br><span class="line"></span><br><span class="line"><span class="attr">验证是否安装成功：</span></span><br><span class="line"><span class="meta">命令行：protoc</span> <span class="string">--version</span></span><br><span class="line"><span class="meta">打印：libprotoc</span> <span class="string">3.14.0  表示成功</span></span><br><span class="line"></span><br><span class="line"><span class="attr">好奇怪，命名下砸安装的是3.12.3版本，这里怎么显示3.14.0版本</span></span><br></pre></td></tr></table></figure><h4 id="2-windows-安装方法："><a href="#2-windows-安装方法：" class="headerlink" title="2 windows 安装方法："></a>2 windows 安装方法：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">将下载的zip文件内容提取到D:\protoc-3.12.3-win64\下</span></span><br><span class="line"><span class="attr">2</span> <span class="string">然后将 D:\protoc-3.12.3-win64\bin 添加到系统环境变量的Path中（新建一个，添加进去）</span></span><br><span class="line"><span class="attr">3</span> <span class="string">验证是否安装并配置环境成功：终端输入：protoc --version，得到libprotoc 3.14.0 表示成功。</span></span><br><span class="line"><span class="attr">4</span> <span class="string">新开一个终端，先进入虚拟环境，然后进入到TensorFlow/models/research/目录并运行以下命令：</span></span><br><span class="line"><span class="attr">protoc</span> <span class="string">object_detection/protos/*.proto --python_out=.</span></span><br><span class="line"><span class="attr">（新开终端，可能只是为了让配置的环境变量成功，protoc命令能找得到吧），保险一点，我们还是新开终端吧。</span></span><br><span class="line"><span class="attr">5</span> <span class="string">为了保险一点，在4 之后，再重新开一个终端并进入tensorflow虚拟环境吧！</span></span><br><span class="line"><span class="meta">(tensorflow)</span> <span class="string">E:\12-AI\TensorFlow\models\models\research&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-COCO-API-安装"><a href="#6-COCO-API-安装" class="headerlink" title="6  COCO API 安装"></a>6  COCO API 安装</h3><h4 id="1-linux安装coco-api："><a href="#1-linux安装coco-api：" class="headerlink" title="1 linux安装coco api："></a>1 linux安装coco api：</h4><p>下载：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//github.com/cocodataset/cocoapi</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">0</span> <span class="string">conda install cython (在当前项目的虚拟环境下，否则make会报错，如下分析)</span></span><br><span class="line"><span class="attr">1</span> <span class="string">解压上面下载的zip文件，解压缩到目录 cocoapi-master</span></span><br><span class="line"><span class="attr">2</span> <span class="string">然后进入：cocoapi-master/PythonAPI$</span></span><br><span class="line"><span class="attr">3</span> <span class="string">make</span></span><br><span class="line"><span class="attr">4</span> <span class="string">cp -r pycocotools &lt;PATH_TO_TF&gt;/TensorFlow/models/research/      PATH_TO_TF表示项目的前缀目录</span></span><br><span class="line"><span class="meta">如：(tensorflow)</span> <span class="string">jason@jason-virtual-machine:~/桌面/cp -r pycocotools TensorFlow/models/research/</span></span><br></pre></td></tr></table></figure><p>第三步make的时候报错：</p><p>即：编译pycoco出现gcc: error: pycocotools/_mask.c: No such file or directory</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gcc</span>: <span class="string">error: pycocotools/_mask.c: 没有那个文件或目录</span></span><br><span class="line"><span class="attr">gcc</span>: <span class="string">fatal error: no input files</span></span><br><span class="line"><span class="attr">compilation</span> <span class="string">terminated.</span></span><br><span class="line"><span class="attr">error</span>: <span class="string">command &#x27;/usr/bin/gcc&#x27; failed with exit code 1</span></span><br><span class="line"><span class="attr">Makefile</span>:<span class="string">3: recipe for target &#x27;all&#x27; failed</span></span><br><span class="line"><span class="attr">make</span>: <span class="string">*** [all] Error 1</span></span><br></pre></td></tr></table></figure><p>解决：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pip</span> <span class="string">install cython 或者 pip3 install cython</span></span><br><span class="line"><span class="attr">有的说pip没用，要pip3，因为我这里是进入虚拟环境安装的，这里应该没关系，不管哪个应该都是安装到虚拟环境中的吧</span></span><br><span class="line"><span class="meta">为了保险起见，直接</span> <span class="string">conda install cython</span></span><br><span class="line"><span class="attr">然后再make就可以编译成功！</span></span><br></pre></td></tr></table></figure><h4 id="2-windows-安装coco-api："><a href="#2-windows-安装coco-api：" class="headerlink" title="2 windows 安装coco api："></a>2 windows 安装coco api：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">参考：https</span>:<span class="string">//blog.csdn.net/lilai619/article/details/106668913</span></span><br></pre></td></tr></table></figure><p>不管在线还是离线安装，先构建vs c++构建工具：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">下载构建工具exe文件：https://go.microsoft.com/fwlink/?LinkId=691126</span></span><br><span class="line"><span class="attr">2</span> <span class="string">将exe 复制到  D:\cocoapiInstall，管理员运行，安装（默认）</span></span><br><span class="line"><span class="meta">结果是安装失败。。。不知道跟我原本就安装有的vs2017</span> <span class="string">有没有关系，这里先不管vs c++构建工具的安装了</span></span><br></pre></td></tr></table></figure><p>安装库包：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(tensorflow)</span> <span class="string">D:\cocoapiInstall&gt;conda install cython</span></span><br><span class="line"><span class="attr">pip命令不行，用conda命令</span></span><br></pre></td></tr></table></figure><h5 id="1-在线安装："><a href="#1-在线安装：" class="headerlink" title="1 在线安装："></a>1 在线安装：</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">在(tensorflow)</span> <span class="string">D:\cocoapiInstall&gt;中执行命令：</span></span><br><span class="line"><span class="attr">pip</span> <span class="string">install git+https://github.com/philferriere/cocoapi.git#subdirectory=PythonAPI</span></span><br><span class="line"><span class="attr">conda命令也失败，我也不知道为啥，这里的失败只的是cocoapi源码都拉取不成功，不是因为vs构建工具的问题。</span></span><br></pre></td></tr></table></figure><h5 id="2-离线安装"><a href="#2-离线安装" class="headerlink" title="2 离线安装"></a>2 离线安装</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？先放一放！</span></span><br></pre></td></tr></table></figure><h3 id="7-安装对象检测-API"><a href="#7-安装对象检测-API" class="headerlink" title="7 安装对象检测 API"></a>7 安装对象检测 API</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> :<span class="string">进入到项目的TensorFlow/models/research/目录下：</span></span><br><span class="line"><span class="attr">2</span> <span class="string">执行命令:cp object_detection/packages/tf2/setup.py .</span></span><br><span class="line"><span class="attr">3</span> <span class="string">执行命令:python -m pip install --use-feature=2020-resolver .（需要换源，如下分析）</span></span><br><span class="line"><span class="attr">这一步要下好多东西，等呀等呀等</span></span><br></pre></td></tr></table></figure><p>下载到：tensorflow-2.9.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (511.7 MB) 时报错：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Downloading</span> <span class="string">tensorflow-2.9.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_6                                                   4.whl (511.7 MB)</span></span><br><span class="line">     <span class="meta">|███████████████▊</span>                <span class="string">| 251.1 MB 37 kB/s eta 1:57:03ERROR: Excepti                                                   on:</span></span><br><span class="line"><span class="attr">Traceback</span> <span class="string">(most recent call last):</span></span><br><span class="line">  <span class="attr">File</span> <span class="string">&quot;/home/jason/anaconda3/envs/tensorflow/lib/python3.9/site-packages/pip/_ven                                                   dor/urllib3/response.py&quot;, line 438, in _error_catcher</span></span><br><span class="line">    <span class="attr">yield</span></span><br><span class="line"><span class="attr">........................................</span></span><br><span class="line"><span class="attr">........................................</span></span><br><span class="line"><span class="attr">........................................</span></span><br><span class="line">  <span class="attr">File</span> <span class="string">&quot;/home/jason/anaconda3/envs/tensorflow/lib/python3.9/site-packages/pip/_ven                                                   dor/urllib3/response.py&quot;, line 443, in _error_catcher</span></span><br><span class="line"><span class="attr">python</span> <span class="string">-m pip install --use-feature=2020-resolver .</span></span><br></pre></td></tr></table></figure><p>继续重复上一个命令继续安装时，前面下载的离线包还在缓存中，不用重新下载了，只不过下载新的包时，比如说tensorflow-2.9.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (511.7 MB)，或者其他（再次安装时不一定按照顺序执行安装）包时，还是会报一样的错误；<strong>但是运气好时会成功下载离线包。。。</strong></p><p>这里卡了那么久（三天，中间搞坏了，然后将整个虚拟环境删了重来，），最后换了个镜像源就搞定了。。。当时上头了，找其他解决方法，越搞越乱，而且每次下载都好慢…</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">python</span> <span class="string">-m pip install --use-feature=2020-resolver . -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><p>8 测试对象检测API的安装是否成功</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 TensorFlow/models/research/ 中运行如下命令：</span></span><br><span class="line"><span class="attr">python</span> <span class="string">object_detection/builders/model_builder_tf2_test.py</span></span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">关于gpu的报错（因为没有开启gpu，这里忽略）</span></span><br><span class="line"><span class="attr">......</span></span><br><span class="line"><span class="attr">ImportError</span>: <span class="string">cannot import name &#x27;anchor_generator_pb2&#x27; from &#x27;object_detection.protos&#x27; </span></span><br><span class="line"><span class="attr">.....</span></span><br></pre></td></tr></table></figure><p>解决：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">在TensorFlow/models/research下运行命令：protoc object_detection/protos/*.proto --python_out=.</span></span><br><span class="line"><span class="attr">2</span> <span class="string">同样目录下：pip install --use-feature=2020-resolver . -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="attr">3</span> <span class="string">同样目录下再次测试：python object_detection/builders/model_builder_tf2_test.py</span></span><br><span class="line"><span class="attr">得到如下图，表示成功安装环境：</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tf_objection_detection/image-20220522172637448.png" alt="image-20220522172637448"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-tensorflow项目环境搭建：&quot;&gt;&lt;a href=&quot;#1-tensorflow项目环境搭建：&quot; class=&quot;headerlink&quot; title=&quot;1 tensorflow项目环境搭建：&quot;&gt;&lt;/a&gt;1 tensorflow项目环境搭建：&lt;/h3&gt;&lt;p&gt;参考</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloud-Nacos</title>
    <link href="http://example.com/2022/05/21/SpringCloud-Nacos/"/>
    <id>http://example.com/2022/05/21/SpringCloud-Nacos/</id>
    <published>2022-05-21T08:15:06.000Z</published>
    <updated>2022-05-21T09:26:55.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-分布式配置中心"><a href="#1-分布式配置中心" class="headerlink" title="1 分布式配置中心"></a>1 分布式配置中心</h1><h2 id="1-1-什么是分布式配置中心"><a href="#1-1-什么是分布式配置中心" class="headerlink" title="1.1 什么是分布式配置中心"></a>1.1 什么是分布式配置中心</h2><p>​    在微服务架构下，每个服务都会都会有自己的配置文件，此时传统的配置文件方式则会造成诸多问题：</p><ul><li>时效性：修改配置，需要重启服务才能生效。</li><li>局限性：无法支持动态调整，如服务地址修改。</li></ul><p>因此，分布式配置中心应运而生。其为所有的微服务提供了一个中心化的外部配置环境， 服务的配置信息都可以存放到分布式配置上，从而解决如上的诸多问题。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210214233232447.png" alt="image-20210214233232447"></p><h2 id="1-2-技术选型对比"><a href="#1-2-技术选型对比" class="headerlink" title="1.2 技术选型对比"></a>1.2 技术选型对比</h2><p>​    现在市面上对于分布式配置中心的实现有很多种，如SpringCloud的Bus+Config、携程的Apollo、百度的Disconf、XXL-Conf、Zookeeper、<strong>阿里的Nacos</strong>等等。 </p><p>​    他们各自都有一些各自的特点，其中最为活跃和主流的当属：<strong>携程的Apollo</strong>、<strong>阿里的Nacos</strong>。由于当前项目已经整合了Nacos，所以此处讲解Nacos作为分布式配置中心的使用。</p><h1 id="2-Nacos"><a href="#2-Nacos" class="headerlink" title="2.Nacos"></a>2.Nacos</h1><p>自从阿里巴巴将自己的微服务组件加入到SpringCloud中，成为现在的SpringCloudAlibaba，目前国内使用SpringCloudAlibaba的也越来越多。特别是其中的Nacos组件，<strong>同时具备了Eureka和SpringCloudConfig的功能（注册中心+配置中心）</strong>，得到了很多国内企业的喜爱。</p><h2 id="2-1-认识Nacos"><a href="#2-1-认识Nacos" class="headerlink" title="2.1.认识Nacos"></a>2.1.认识Nacos</h2><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20201027210027942-1624467437531.png" alt="image-20201027210027942"></p><p>官网地址：<a href="https://nacos.io/zh-cn/index.html">https://nacos.io/zh-cn/index.html</a></p><p>Nacos 的关键特性包括:</p><ul><li><p><strong>服务发现和服务健康监测</strong></p><p>Nacos 支持基于 DNS 和基于 RPC 的服务发现。服务提供者使用 <a href="https://nacos.io/zh-cn/docs/sdk.html">原生SDK</a>、<a href="https://nacos.io/zh-cn/docs/open-API.html">OpenAPI</a>、或一个<a href="https://nacos.io/zh-cn/docs/other-language.html">独立的Agent TODO</a>注册 Service 后，服务消费者可以使用<a href="https://nacos.io/zh-cn/docs/xx">DNS TODO</a> 或<a href="https://nacos.io/zh-cn/docs/open-API.html">HTTP&amp;API</a>查找和发现服务。</p><p>Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。Nacos 还提供了统一的健康检查仪表盘，帮助您根据健康状态管理服务的可用性及流量。</p></li><li><p><strong>动态配置服务</strong></p><p>动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。</p><p>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。</p><p>配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。</p><p>Nacos 提供了一个简洁易用的UI (<a href="http://console.nacos.io/nacos/index.html">控制台样例 Demo</a>) 帮助您管理所有的服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助您更安全地在生产环境中管理配置变更和降低配置变更带来的风险。</p></li></ul><h2 id="2-2-安装Nacos"><a href="#2-2-安装Nacos" class="headerlink" title="2.2.安装Nacos"></a>2.2.安装Nacos</h2><p>开发阶段采用单机安装即可。</p><h3 id="1）下载安装包"><a href="#1）下载安装包" class="headerlink" title="1）下载安装包"></a>1）下载安装包</h3><p>在Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：</p><p>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20201027210542250-1624467437533.png" alt="image-20201027210542250"></p><p>网络不好的同学，可以直接使用课前资料提供的安装包：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20201027210821335-1624467437533.png" alt="image-20201027210821335"></p><h3 id="2）解压"><a href="#2）解压" class="headerlink" title="2）解压"></a>2）解压</h3><p>将这个包解压到任意非中文目录下，如图：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20201027211200302-1624467437533.png" alt="image-20201027211200302"></p><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li><li>data：本地数据</li><li>logs：日志</li></ul><p>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。</p><p><strong>如果无法关闭占用8848端口的进程</strong>，也可以进入nacos的conf目录，修改配置文件中的端口：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20201027214057922-1624467437533.png" alt="image-20201027214057922"></p><h3 id="3）启动"><a href="#3）启动" class="headerlink" title="3）启动"></a>3）启动</h3><p>启动非常简单，进入bin目录，结构如下：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20201027214339822-1624467437533.png" alt="image-20201027214339822"></p><p>然后执行命令即可：</p><ul><li><p>windows命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure></li><li><p>Linux或Mac的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure></li></ul><p>执行后的效果如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210703073223853.png" alt="image-20210703073223853"></p><h3 id="4）访问"><a href="#4）访问" class="headerlink" title="4）访问"></a>4）访问</h3><p>在浏览器输入地址：<a href="http://127.0.0.1:8848/nacos%E5%8D%B3%E5%8F%AF%EF%BC%9A">http://127.0.0.1:8848/nacos即可：</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20201027214842577-1624467437534.png" alt="image-20201027214842577"></p><p>默认的账号和密码都是nacos，进入后：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20201027214957096-1624467437534.png" alt="image-20201027214957096"></p><h3 id="5）基于Docker安装并启动nacos"><a href="#5）基于Docker安装并启动nacos" class="headerlink" title="5）基于Docker安装并启动nacos"></a>5）基于Docker安装并启动nacos</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 简单版</span><br><span class="line">docker run -id -e MODE=standalone -e JVM_XMS=256m -e JVM_XMX=256m -e JVM_XMN=256m --name nacos -p 8848:8848 nacos/nacos-server:1.4.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 基于MySQL版本</span><br><span class="line">docker run -e MODE=standalone \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=192.168.206.99 \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos_config \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=root \</span><br><span class="line">-e MYSQL_DATABASE_NUM=1 \</span><br><span class="line">-e JVM_XMS=256m -e JVM_XMX=256m -e JVM_XMN=256m \</span><br><span class="line">--name nacos -d -p 8848:8848 nacos/nacos-server:1.4.1</span><br></pre></td></tr></table></figure><h3 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6) 注意事项"></a>6) 注意事项</h3><p>当通过浏览器访问不到时,配置IPv4支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward=<span class="number">1</span>  #最下方添加这段代码</span><br><span class="line">#重启network服务</span><br><span class="line">systemctl restart network &amp;&amp; systemctl restart docker</span><br><span class="line">#查看是否修改成功 （备注：返回<span class="number">1</span>，就是成功）</span><br><span class="line">[root<span class="meta">@docker</span>-node2 ~]# sysctl net.ipv4.ip_forward</span><br><span class="line">net.ipv4.ip_forward = <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-3-Nacos注册中心的使用"><a href="#2-3-Nacos注册中心的使用" class="headerlink" title="2.3.Nacos注册中心的使用"></a>2.3.Nacos注册中心的使用</h2><p>Nacos与Eureka一样，都可以作为注册中心使用，并且Nacos实现了SpringCloudCommon中的一些接口，并且提供了对应的自动配置，这就让Nacos的注册中心使用与Eureka几乎一模一样，没有什么学习成本。</p><p>使用Nacos的注册中心功能，基本步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">导入依赖               （服务提供者，服务访问者  都需要）</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">配置Nacos地址          （服务提供者，服务访问者  都需要）</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">添加Ribbon负载         （服务访问者）</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">使用服务名代替硬件编码  （服务访问者）</span></span><br></pre></td></tr></table></figure><h3 id="1-搭建user-service工程"><a href="#1-搭建user-service工程" class="headerlink" title="1 搭建user-service工程"></a>1 搭建user-service工程</h3><h4 id="1-导入启动器"><a href="#1-导入启动器" class="headerlink" title="1.导入启动器"></a>1.导入启动器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--alibaba的 Nacos依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring的健康检测依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-配置nacos地址"><a href="#2-配置nacos地址" class="headerlink" title="2.配置nacos地址"></a>2.配置nacos地址</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/itheima129</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># -----------------------------</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.149</span><span class="string">:8848</span> <span class="comment"># nacos服务地址</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 暴露健康检测的接口</span></span><br><span class="line"><span class="comment"># -----------------------------</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.itheima.pojo</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.itheima:</span> <span class="string">debug</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-搭建consumer-service工程"><a href="#2-搭建consumer-service工程" class="headerlink" title="2 搭建consumer-service工程"></a>2 搭建consumer-service工程</h3><h4 id="1-导入启动器-1"><a href="#1-导入启动器-1" class="headerlink" title="1.导入启动器"></a>1.导入启动器</h4><p>RestTemplate</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--alibaba的 Nacos依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring的健康检测依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-配置nacos地址-1"><a href="#2-配置nacos地址-1" class="headerlink" title="2.配置nacos地址"></a>2.配置nacos地址</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.190</span><span class="number">.149</span><span class="string">:8848</span> <span class="comment"># nacos服务地址</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 暴露健康检测的接口</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br></pre></td></tr></table></figure><h4 id="3-添加Ribbon负载均衡"><a href="#3-添加Ribbon负载均衡" class="headerlink" title="3.添加Ribbon负载均衡"></a>3.添加Ribbon负载均衡</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">// 新加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-使用服务名代替硬编码路径"><a href="#4-使用服务名代替硬编码路径" class="headerlink" title="4.使用服务名代替硬编码路径"></a>4.使用服务名代替硬编码路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">consumerUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//String url = &quot;http://127.0.0.1:8081/user/&quot;+id;</span></span><br><span class="line">        String url = <span class="string">&quot;http://user-service/user/&quot;</span>+id;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url,User.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-开启feign支持"><a href="#3-开启feign支持" class="headerlink" title="3 开启feign支持"></a>3 开启feign支持</h3><h4 id="1-导入Feign启动器"><a href="#1-导入Feign启动器" class="headerlink" title="1.导入Feign启动器"></a>1.导入Feign启动器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Feign启动器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-开启Feign客户端支持"><a href="#2-开启Feign客户端支持" class="headerlink" title="2.开启Feign客户端支持"></a>2.开启Feign客户端支持</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-提供Feign客户端接口"><a href="#3-提供Feign客户端接口" class="headerlink" title="3.提供Feign客户端接口"></a>3.提供Feign客户端接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-在Controller中使用Feign客户端进行远程调用"><a href="#4-在Controller中使用Feign客户端进行远程调用" class="headerlink" title="4.在Controller中使用Feign客户端进行远程调用"></a>4.在Controller中使用Feign客户端进行远程调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.feign.UserClient;</span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">consumerUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//String url = &quot;http://127.0.0.1:8081/user/&quot;+id;</span></span><br><span class="line">        <span class="comment">//String url = &quot;http://user-service/user/&quot;+id;</span></span><br><span class="line">        <span class="comment">//return restTemplate.getForObject(url,User.class);</span></span><br><span class="line">        <span class="keyword">return</span> userClient.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4-Nacos配置中心使用"><a href="#2-4-Nacos配置中心使用" class="headerlink" title="2.4 Nacos配置中心使用"></a>2.4 Nacos配置中心使用</h2><p>前言：<strong>Nacos 跟eureka都是面向服务的组件，将其单独运行起来，然后在我们的项目中配置好面向服务的信息就可以访问这些组件，在项目中使用组件的功能！！！</strong></p><h3 id="2-4-1-整合Nacos配置中心"><a href="#2-4-1-整合Nacos配置中心" class="headerlink" title="2.4.1 整合Nacos配置中心"></a>2.4.1 整合Nacos配置中心</h3><p><strong>1）修改consumer-service.pom文件，添加nacos配置中心依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos-config--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2）修改consumer-service的bootstrap.yaml文件，添加配置中心Nacos的地址</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 bootstrap.yml（bootstrap.properties）</span><br><span class="line">用来在程序引导时执行，应用于更早期配置信息读取，如可以使用来配置application.yml中使用到参数等</span><br><span class="line"></span><br><span class="line">2 application.yml（application.properties) </span><br><span class="line">应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。</span><br><span class="line"></span><br><span class="line"><span class="section">ps:bootstrap.yml 先于 application.yml 加载</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># nacos服务地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 暴露健康检测的接口</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-基本使用"><a href="#2-4-2-基本使用" class="headerlink" title="2.4.2 基本使用"></a>2.4.2 基本使用</h3><p><strong>1）nacos配置中心新建配置文件</strong></p><p>规范如下：</p><ul><li>配置文件名称：默认和 spring.application.name一致 。</li><li>文件后缀：nacos支持六种文件格式。分别为：TEXT、JSON、XML、YAML、HTML、Properties。默认是 properties，当项目指定后缀名，则同项目中一致。</li></ul><p>新建配置：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210624120049147.png" alt="image-20210624120049147"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">company:</span> <span class="string">itheima</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625094822708.png" alt="image-20210625094822708"></p><p><strong>2）修改UserController，获取配置中心内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;company&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String companyName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello user service,company : &quot;</span>+companyName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3）测试访问用户服务hello接口</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625094945739.png" alt="image-20210625094945739"></p><p>不同的命名空间下，可以存在相同名称的配置分组(Group) 或 配置集。 </p><p><strong>最佳实践</strong> </p><p>Nacos抽象定义了Namespace、Group、Data ID的概念，具体这几个概念代表什么，取决于我们把它们看成什么，这里推荐给大家一种用法，如下图：</p><ul><li><p>Namespace：代表不同<strong>环境</strong>，如开发、测试、生产环境。 </p></li><li><p>Group：代表某<strong>项目</strong>，如XX医疗项目、XX电商项目 </p></li><li><p>DataId：每个项目下往往有若干个<strong>工程</strong>，每个配置集(DataId)是一个工程的<strong>主配置文件</strong> </p></li></ul><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210422212331985.png" alt="image-20210422212331985"></p><h3 id="2-4-3-动态刷新"><a href="#2-4-3-动态刷新" class="headerlink" title="2.4.3 动态刷新"></a>2.4.3 动态刷新</h3><p> 当修改配置中心内容后，项目中并不能得到及时更新。 此时就需要配置动态刷新。实现方式非常简单，只需要在需要获取配置中心内容的Controller上添加<code>@RefreshScope</code>即可。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210215002234057.png" alt="image-20210215002234057"></p><h3 id="2-4-4-多环境切换"><a href="#2-4-4-多环境切换" class="headerlink" title="2.4.4 多环境切换"></a>2.4.4 多环境切换</h3><p>项目开发过程中，可能会存在多种环境，并且每一种环境所设置的配置都是不同的。nacos可以同时支持多环境配置。只需要在nacos配置中心中根据dataId进行区分即可。dataId 完整的拼接格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure><ul><li><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置。</li><li><code>spring.profiles.active</code> 即为当前环境对应的 profile</li><li><code>file-extension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code>来配置。</li></ul><p><strong>1）在nacos配置中心上新建配置文件consumer-dev.yml、consumer-prod.yml</strong></p><p><strong>consumer-dev.yml:</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># nacos服务地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 暴露健康检测的接口</span></span><br></pre></td></tr></table></figure><p><strong>consumer-prod.yml:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># nacos服务地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 暴露健康检测的接口</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210422230842006.png" alt="image-20210422230842006"></p><p><strong>2）修改consumer-service服务的bootstrap.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span>   <span class="comment"># 激活Prod配置文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3）启动consumer-service服务测试</strong></p><h3 id="2-4-5-共享配置"><a href="#2-4-5-共享配置" class="headerlink" title="2.4.5 共享配置"></a>2.4.5 共享配置</h3><p>在开发中，虽然可以在不同环境下使用不同的配置文件，但是<strong>有一些配置是通用的，需要在不同的环境下，都进行生效。</strong></p><p><strong>1) 当开发环境为：dev时</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210422231751076.png" alt="image-20210422231751076"></p><p><strong>2) 当开发环境为：prod时</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210422231620190.png" alt="image-20210422231620190"></p><p>​    根据上述测试，可以发现，不同的开发环境下都会去加载<strong>consumer-service.yml</strong>，也就是没有指定特定环境的文件。那么对于通用配置就可以设置在这个文件中。</p><p>也可以在bootstrap.yml设置指定通用的配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line"><span class="attr">cloud</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">nacos</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">config</span>: <span class="string"># nacos配置中心地址</span></span><br><span class="line">        <span class="meta">server-addr</span>: <span class="string">192.168.190.149:8848  # 配置中心服务器地址</span></span><br><span class="line">        <span class="meta">file-extension</span>: <span class="string">yml # 配置文件类型,配置文件的扩展名</span></span><br><span class="line">        <span class="attr">namespace</span>: <span class="string">b4804e31-5f6b-4f4e-a7f1-49e3afbbd089 # 命名空间默认为public (命名空间的id值)</span></span><br><span class="line">        <span class="meta">shared-configs</span>: <span class="string">consumer-tongyong.yml # 添加通用的配置文件</span></span><br><span class="line">  <span class="attr">profiles</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">active</span>: <span class="string">prod # 设置激活的配置文件(设置当前使用的配置文件)</span></span><br></pre></td></tr></table></figure><h3 id="2-4-6-配置持久化"><a href="#2-4-6-配置持久化" class="headerlink" title="2.4.6 配置持久化"></a>2.4.6 配置持久化</h3><h4 id="2-4-6-1-Nacos持久化配置说明"><a href="#2-4-6-1-Nacos持久化配置说明" class="headerlink" title="2.4.6.1 Nacos持久化配置说明"></a>2.4.6.1 Nacos持久化配置说明</h4><p>​    当我们使<strong>用默认配置启动Nacos时</strong>，<strong>所有配置的信息都被Nacos保存在了内嵌数据库derby中</strong>。会存在以下问题：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1.</span> <span class="string">使用内嵌数据库，注定会有存储上限</span></span><br><span class="line"><span class="meta">2.</span> <span class="string">不适合集群，分布式环境</span></span><br><span class="line"><span class="meta">3.</span> <span class="string">不方便观察数据存储的基本情况</span></span><br></pre></td></tr></table></figure><p>0.7版本之后增加了支持mysql数据源能力，也是工作里面常用的方式。</p><h4 id="2-4-6-2-Nacos持久化配置实现"><a href="#2-4-6-2-Nacos持久化配置实现" class="headerlink" title="2.4.6.2 Nacos持久化配置实现"></a>2.4.6.2 Nacos持久化配置实现</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">将nacos中的配置持久化保存到mysql中</span>:<span class="string"></span></span><br><span class="line"><span class="attr">1.将配置文件导入到nacos容器中</span></span><br><span class="line">    <span class="attr">2.在mysql中创建nacos持久化配置数据时对应的表.</span></span><br></pre></td></tr></table></figure><h5 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h5><p>（1）拉取mysql镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -id -p 3306:3306 --name=mysql -v mysql_conf:/etc/mysql/conf.d -v mysql_logs:/logs -v mysql_data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7</span><br><span class="line"></span><br><span class="line">-p 代表端口映射，格式为  宿主机映射端口:容器运行端口</span><br><span class="line">-e 代表添加环境变量  MYSQL_ROOT_PASSWORD  是root用户的登陆密码</span><br></pre></td></tr></table></figure><p>（3）远程登录mysql</p><p>连接宿主机的IP  ,指定端口为3306</p><blockquote><p>如果出现异常：IPv4 forwarding is disabled. Networking will not work</p><p>解决方案：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward=1  <span class="comment">#最下方添加这段代码</span></span><br><span class="line"><span class="comment">#重启network服务</span></span><br><span class="line">systemctl restart network &amp;&amp; systemctl restart docker</span><br><span class="line"><span class="comment">#查看是否修改成功 （备注：返回1，就是成功）</span></span><br><span class="line">[root@docker-node2 ~]<span class="comment"># sysctl net.ipv4.ip_forward</span></span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure></blockquote><p><strong>1）mysql中新建nacos_config数据库，并执行本文章最后的nacos-mysql.sql</strong></p><p>参考github：<a href="https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql">https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210215012432156.png" alt="image-20210215012432156"></p><p><strong>2）进入nacos容器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it nacos /bin/bash</span><br></pre></td></tr></table></figure><p><strong>3）上传资料中application.properties，并复制覆盖容器中的文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">cp application.properties nacos:/home/nacos/conf/application.properties</span></span><br></pre></td></tr></table></figure><p><strong>4）重启nacos容器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart nacos</span><br></pre></td></tr></table></figure><p><code>访问nacos可以发现，配置中心中没有了配置内容，因为nacos已经连接了mysql，mysql中并没有配置文件</code></p><p><strong>5）新建consumer，consumer-dev.yml,consumer-prod.yml。可以发现config_info表中也新增了对应数据</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210625101836740.png" alt="image-20210625101836740"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE nacos;</span><br><span class="line">USE nacos;</span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` LONGTEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` TEXT COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-分布式配置中心&quot;&gt;&lt;a href=&quot;#1-分布式配置中心&quot; class=&quot;headerlink&quot; title=&quot;1 分布式配置中心&quot;&gt;&lt;/a&gt;1 分布式配置中心&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是分布式配置中心&quot;&gt;&lt;a href=&quot;#1-1-什么是分布式配</summary>
      
    
    
    
    <category term="SpringCloud" scheme="http://example.com/categories/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://example.com/tags/SpringCloud/"/>
    
    <category term="Nacos" scheme="http://example.com/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-2</title>
    <link href="http://example.com/2022/05/21/SpringCloud-2/"/>
    <id>http://example.com/2022/05/21/SpringCloud-2/</id>
    <published>2022-05-21T08:01:41.000Z</published>
    <updated>2022-05-21T08:09:47.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">SpringCloud: 微服务体系</span><br><span class="line">  <span class="number">1</span> 作用: 用于进行架构中服务的治理</span><br><span class="line"> 在SpringCloud中提供了无数的组件,每一个组件都可以实现一种功能(提供一种服务)</span><br><span class="line">  这些组件用来管理服务与服务之间的通讯和调用.</span><br><span class="line">  <span class="number">2</span> 面向服务开发: </span><br><span class="line">将web项目部署到服务器中,web项目实现了什么功能,我们认为这台服务器提供了什么样的服务</span><br><span class="line">SpringCloud中的各个组件与SpringBoot无缝集成,在各个组件中都对SpringBoot有依赖,</span><br><span class="line">我们在使用这些组件进行服务治理时,直接将对应的启动器导入即可.</span><br><span class="line">  <span class="number">3</span> 注意事项:</span><br><span class="line">SpringCloud的版本号以伦敦地铁站的名字命名,每一个版本依赖的SpringBoot都不同.</span><br><span class="line">如果升级SpringCloud的版本,那么SpringBoot的版本也必须一起升级.</span><br><span class="line">        </span><br><span class="line"><span class="number">1</span> RPC: 远程过程调用</span><br><span class="line">  只要实现了两台服务器之间的数据交互,我们就认为这是一种rpc(远程过程调用)</span><br><span class="line">  - RMI </span><br><span class="line">  - Dubbo</span><br><span class="line"><span class="number">2</span> HTTP:</span><br><span class="line">协议虽多,但是可以向一切拥有指定入口(REST格式)的服务器发送请求</span><br><span class="line">    - HttpClient</span><br><span class="line">    - OKHttp</span><br><span class="line">    - URLConnection</span><br><span class="line">        </span><br><span class="line">    RestTemplate: springweb环境内置此对象</span><br><span class="line">        封装了一下三种方式,这些方式都可以实现：</span><br><span class="line">        在一台服务器中发送http协议格式的请求给另一台服务器,实现数据交互</span><br><span class="line">        - HttpClient</span><br><span class="line">        - OKHttp</span><br><span class="line">        - URLConnection</span><br><span class="line">=============================</span><br><span class="line">组件:</span><br><span class="line">一：注册中心: eureka</span><br><span class="line">        客户端/服务器</span><br><span class="line">      <span class="number">1.</span>创建eureka项目,并发布为服务</span><br><span class="line">        a.导入eureka启动器(server)</span><br><span class="line">        b.配置内置的客户端连接的eureka地址,并设置不进行注册和拉取内部的数据信息</span><br><span class="line">        c.在SpringBoot的启动类上添加 <span class="meta">@EnableEurekaServer</span></span><br><span class="line">      <span class="number">2.</span>在服务提供者方,注册自己给eureka</span><br><span class="line">        a.导入eureka的客户端启动器</span><br><span class="line">        b.配置eureka服务的地址(自动注册)</span><br><span class="line">      <span class="number">3.</span>在消费者方,连接eureka动态拉取服务提供者的ip地址</span><br><span class="line">        a.导入eureka的客户端启动器</span><br><span class="line">        b.配置eureka服务的地址(自动注册)</span><br><span class="line">        c.在启动类上添加注解 <span class="meta">@EnableDiscoveryClient</span> 开启对Eureka客户端支持</span><br><span class="line">          DiscoveryClient: 根据服务的名称获取注册中心中的ip信息</span><br><span class="line">    二： Ribbon: 实现负载均衡</span><br><span class="line">IRule: 接口的实现类,在不同的实现类中实现了不同方式的负载均衡</span><br></pre></td></tr></table></figure><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>会使用Feign进行远程调用</li><li>能独立搭建gateway网关</li><li>能编写gateway的拦截器</li></ul><h1 id="1-Hystrix"><a href="#1-Hystrix" class="headerlink" title="1.Hystrix"></a>1.Hystrix</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1.简介"></a>1.1.简介</h2><p>Hystix,英文意思是豪猪，全身是刺，看起来就不好惹，是一种<strong>保护机制</strong>。</p><p>Hystrix也是Netflix公司的一款组件。</p><p>主页：<a href="https://github.com/Netflix/Hystrix/">https://github.com/Netflix/Hystrix/</a></p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525658740266.png" alt="1525658740266"></p><p>那么Hystix的作用是什么呢？具体要保护什么呢？</p><p>Hystix是Netflix开源的一个延迟和容错库，用于隔离访问远程服务、第三方库，防止出现级联失败。</p><h2 id="1-2-雪崩问题"><a href="#1-2-雪崩问题" class="headerlink" title="1.2.雪崩问题"></a>1.2.雪崩问题</h2><p><strong>微服务中，服务间调用关系错综复杂，一个服务的业务，有可能需要调用多个其它微服务，才能完成。</strong></p><p>**** <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533829099748.png" alt="1533829099748"></p><p>如图，<strong>如果说，我们需要访问的某个服务，Dependency-I发生了故障，此时，我们应用中，调用Dependency-I的服务，也会故障，造成阻塞。</strong></p><p>此时，其它业务似乎不受影响。</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533829198240.png" alt="1533829198240"></p><p>例如<strong>微服务I发生异常，请求阻塞，用户不会得到响应，则tomcat的这个线程不会释放，于是越来越多的用户请求到来，越来越多的线程会阻塞</strong>：（，调用故障服务的服务器也会引起阻塞，并发量上来时，就会越来越多阻塞，最终就会造成雪崩现象）</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533829307389.png" alt="1533829307389"></p><p>服务器支持的线程和并发数有限，请求一直阻塞，会<strong>导致服务器资源耗尽，从而导致所有其它服务都不可用，形成雪崩效应。</strong></p><p>这就好比，一个汽车生产线，生产不同的汽车，需要使用不同的零件，如果某个零件因为种种原因无法使用，那么就会造成整台车无法装配，陷入等待零件的状态，直到零件到位，才能继续组装。  此时如果有很多个车型都需要这个零件，那么整个工厂都将陷入等待的状态，导致所有生产都陷入瘫痪。一个零件的波及范围不断扩大。 </p><p>Hystix解决雪崩问题的手段主要是<strong>服务降级</strong>，包括：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">线程隔离</span></span><br><span class="line"><span class="meta">-</span> <span class="string">服务熔断</span></span><br></pre></td></tr></table></figure><h2 id="1-3-线程隔离，服务降级"><a href="#1-3-线程隔离，服务降级" class="headerlink" title="1.3.线程隔离，服务降级"></a>1.3.线程隔离，服务降级</h2><h3 id="1-3-1-原理"><a href="#1-3-1-原理" class="headerlink" title="1.3.1.原理"></a>1.3.1.原理</h3><p>线程隔离示意图：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533829598310.png" alt="1533829598310"></p><p>解读：</p><p>Hystrix<strong>为每个服务调用的功能分配一个小的线程池</strong>，如果线程池已满调用将被立即拒绝，默认不采用排队.加速失败判定时间。</p><p>用户的请求将不再直接访问服务，而是通过线程池中的空闲线程来访问服务，如果<strong>线程池已满</strong>，或者<strong>请求超时</strong>，则会进行降级处理：<strong>返回给用户一个错误提示或备选结果</strong>。</p><p>用户的请求故障时，不会被阻塞，更不会无休止的等待或者看到系统崩溃，至少可以看到一个执行结果（例如返回友好的提示信息） 。</p><p><strong>服务降级虽然会导致请求失败，但是不会导致阻塞</strong>，而且最多占用该服务的线程资源，不会导致整个容器资源耗尽，<strong>把故障的影响隔离在线程池内</strong>。</p><h3 id="1-3-2-动手实践"><a href="#1-3-2-动手实践" class="headerlink" title="1.3.2.动手实践"></a>1.3.2.动手实践</h3><p>线程隔离的完整步骤包括：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">引入Hystrix的依赖(启动器)</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">添加注解，开启Hystix功能</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">给业务编写降级的备用处理逻辑</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">给业务添加注解，开启线程隔离功能</span></span><br><span class="line"><span class="meta">5-</span> <span class="string">设置触发降级的最长等待时间</span></span><br></pre></td></tr></table></figure><p>现在，<strong>consumer-demo是服务的调用者，user-service是服务的提供者</strong>，因此consumer-demo需要把调用user-service的业务隔离，避免级联失败。</p><p>因此我们<strong>接下来的操作都是在consumer-demo中添加的</strong>。</p><h4 id="1-引入依赖："><a href="#1-引入依赖：" class="headerlink" title="1 引入依赖："></a>1 引入依赖：</h4><p>在consumer-demo添加Hystix的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-开启熔断："><a href="#2-开启熔断：" class="headerlink" title="2 开启熔断："></a>2 开启熔断：</h4><p>在consumer-demo的启动类上添加注解：@EnableCircuitBreaker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们类上的注解越来越多，在微服务中，经常会引入上面的三个注解，于是Spring就提供了一个组合注解：@SpringCloudApplication</p><p>  <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533856086255.png" alt="1533856086255"></p><p>因此，我们可以使用这个组合注解来代替之前的3个注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-编写降级逻辑"><a href="#3-编写降级逻辑" class="headerlink" title="3 编写降级逻辑"></a>3 编写降级逻辑</h4><p>当目标服务的调用出现故障，我们希望快速失败，给用户一个友好提示。因此需要提前编写好失败时的降级处理逻辑，然后<strong>使用HystixCommond来指定降级的方法</strong>。</p><p>在consumer-demo的ConsumerController中调用user-service的方法上，添加降级逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;queryByIdFallBack&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    String url = <span class="string">&quot;http://user-service/user/&quot;</span> + id;</span><br><span class="line">    String user = restTemplate.getForObject(url, String.class);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryByIdFallBack</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">    log.error(<span class="string">&quot;查询用户信息失败，id：&#123;&#125;&quot;</span>, id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;对不起，网络太拥挤了！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意，因为熔断的降级逻辑方法必须跟正常逻辑方法保证：<strong>相同的参数列表和返回值声明</strong>。失败逻辑中返回User对象没有太大意义，一般会返回友好提示。所以我们<strong>把queryById的方法改造为返回String，反正也是Json数据。这样失败逻辑中返回一个错误说明，会比较方便</strong>。</p><p>说明：</p><ul><li><code>@HystrixCommand(fallbackMethod = &quot;queryByIdFallBack&quot;)</code>：用来声明一个降级逻辑的方法</li></ul><p>测试：</p><p>当user-service正常提供服务时，访问与以前一致。但是当我们将user-service停机时，会发现页面返回了降级处理信息：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533857268880.png" alt="1533857268880"></p><h4 id="超时设置："><a href="#超时设置：" class="headerlink" title="超时设置："></a>超时设置：</h4><p>在之前的案例中，<strong>请求在超过1秒后都会返回错误信息，这是因为Hystix的默认超时时长为1</strong>，我们可以通过配置修改这个值：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution.isolation.thread.timeoutInMilliseconds:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>这个配置会作用于全局所有方法。</p><p>再次测试：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533858701825.png" alt="1533858701825"></p><p>可以发现，请求的时长已经到了2.01s，证明配置生效了。</p><h2 id="1-4-服务熔断"><a href="#1-4-服务熔断" class="headerlink" title="1.4.服务熔断"></a>1.4.服务熔断</h2><p>尽管隔离可以避免服务出现级联失败，但是对于访问<strong>服务I（故障服务）</strong>的其它服务，每次处理请求都要等待数秒直至fallback，显然是对系统资源的浪费。</p><p>因此，当Hystix判断一个依赖服务失败比例较高时，就会对其做<strong>熔断处理</strong>：拦截对故障服务的请求，快速失败，不再阻塞等待，就像电路的断路器断开了，保护电路。</p><h3 id="1-4-1-熔断原理"><a href="#1-4-1-熔断原理" class="headerlink" title="1.4.1.熔断原理"></a>1.4.1.熔断原理</h3><p>熔断器，也叫断路器，其英文单词为：Circuit Breaker </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525658640314.png" alt="1525658640314"></p><p>Hystix的熔断状态机模型：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533830345149.png" alt="1533830345149"></p><p>状态机有3个状态：</p><ul><li>Closed：关闭状态（断路器关闭），所有请求都正常访问。</li><li>Open：打开状态（断路器打开），所有请求都会被降级。Hystix会对请求情况计数，当一定时间内失败请求百分比达到阈值，则触发熔断，断路器打开。默认失败比例的阈值是50%，请求次数最少不低于20次。</li><li>Half Open：半开状态，open状态不是永久的，打开后会进入休眠时间（默认是5S）。随后断路器会自动进入半开状态。此时会释放1次请求通过，若这个请求是健康的，则会关闭断路器，否则继续保持打开，再次进行5秒休眠计时。</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">熔断器默认为关闭状态</span>: <span class="string">一切正常 </span></span><br><span class="line"><span class="meta">中间(半开)状态</span>: <span class="string">会发送一个请求进行尝试</span></span><br><span class="line"><span class="meta">开启状态</span>: <span class="string">后续所有的请求自动进行服务降级处理(默认5s,进入半开状态)</span></span><br><span class="line">  <span class="attr">默认请求下访问20次请求,百分之50失败,就开启熔断器</span></span><br><span class="line"><span class="attr">----------------------------------------------------------------</span></span><br><span class="line"><span class="attr">1秒发送20个请求,这20个请求都没有拿到预期的响应结果,对着20个请求进行服务降级处理</span></span><br><span class="line"><span class="attr">此时断路器打开,后续再有请求来时,直接进行服务降级</span></span><br><span class="line"><span class="attr">5秒后将断路器设置为中间状态,找一个线程试着去访问,如果访问成功则关闭断路器,服务可以正常运行</span></span><br><span class="line"><span class="attr">如果未能访问成功,则继续打开断路器</span></span><br></pre></td></tr></table></figure><h3 id="1-4-2-动手实践"><a href="#1-4-2-动手实践" class="headerlink" title="1.4.2.动手实践"></a>1.4.2.动手实践</h3><p>为了能够精确控制请求的成功或失败，我们在consumer的调用业务中加入一段逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;太忙了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String url = <span class="string">&quot;http://user-service/user/&quot;</span> + id;</span><br><span class="line">    String user = restTemplate.getForObject(url, String.class);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样如果参数是id为1，一定失败，其它情况都成功。</p><p>我们准备两个请求窗口：</p><ul><li>一个请求：<a href="http://localhost:8080/consumer/1%EF%BC%8C%E6%B3%A8%E5%AE%9A%E5%A4%B1%E8%B4%A5">http://localhost:8080/consumer/1，注定失败</a></li><li>一个请求：<a href="http://localhost:8080/consumer/2%EF%BC%8C%E8%82%AF%E5%AE%9A%E6%88%90%E5%8A%9F">http://localhost:8080/consumer/2，肯定成功</a></li></ul><p>熔断器的默认触发阈值是20次请求，不好触发。休眠时间时5秒，时间太短，不易观察，为了测试方便，我们可以通过配置修改熔断策略：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">command</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">default</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">execution.isolation.thread.timeoutInMilliseconds</span>: <span class="string">2000</span></span><br><span class="line">      <span class="attr">circuitBreaker</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">errorThresholdPercentage</span>: <span class="string">50 # 触发熔断错误比例阈值，默认值50%</span></span><br><span class="line">        <span class="attr">sleepWindowInMilliseconds</span>: <span class="string">10000 # 熔断后休眠时长，默认值5秒</span></span><br><span class="line">        <span class="attr">requestVolumeThreshold</span>: <span class="string">10 # 触发熔断的最小请求次数，默认20</span></span><br></pre></td></tr></table></figure><p>解读：</p><ul><li>requestVolumeThreshold：触发熔断的最小请求次数，默认20，这里我们设置为10，便于触发</li><li>errorThresholdPercentage：触发熔断的失败请求最小占比，默认50%</li><li>sleepWindowInMilliseconds：休眠时长，默认是5000毫秒，这里设置为10，便于观察熔断现象</li></ul><p>当我们疯狂访问id为1的请求时（10次左右），就会触发熔断。断路器会进入打开状态，一切请求都会被降级处理。</p><p>此时你访问id为2的请求，会发现返回的也是失败，而且失败时间很短，只有20毫秒左右：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533859591238.png" alt="1533859591238"></p><h1 id="2-Feign"><a href="#2-Feign" class="headerlink" title="2.Feign"></a>2.Feign</h1><p>在前面的学习中，我们使用了Ribbon的负载均衡功能，大大简化了远程调用时的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String baseUrl = <span class="string">&quot;http://user-service/user/&quot;</span>;</span><br><span class="line">User user = <span class="keyword">this</span>.restTemplate.getForObject(baseUrl + id, User.class)</span><br></pre></td></tr></table></figure><p>如果就学到这里，你可能以后需要编写类似的大量重复代码，格式基本相同，无非参数不一样。有没有更优雅的方式，来对这些代码再次优化呢？</p><p>这就是我们接下来要学的Feign的功能了。</p><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1.简介"></a>2.1.简介</h2><p>有道词典的英文解释：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525662976679.png" alt="1525662976679"> </p><p>为什么叫伪装？可以把一个远程调用的请求，伪造的像一个本地方法调用一样。</p><p>Feign可以把Rest的请求进行隐藏，伪装成类似SpringMVC的Controller一样。你不用再自己拼接url，拼接参数等等操作，一切都交给Feign去做。</p><p>项目主页：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a></p><h2 id="2-2-快速入门"><a href="#2-2-快速入门" class="headerlink" title="2.2.快速入门"></a>2.2.快速入门</h2><h3 id="2-2-1-导入依赖"><a href="#2-2-1-导入依赖" class="headerlink" title="2.2.1.导入依赖"></a>2.2.1.导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-Feign的客户端"><a href="#2-2-2-Feign的客户端" class="headerlink" title="2.2.2.Feign的客户端"></a>2.2.2.Feign的客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;user-service&quot;)</span> <span class="comment">//这里已经给你指明服务提供者的名称了。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span> <span class="comment">//服务提供者的对应controller的方法</span></span><br><span class="line">    <span class="function">User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>; <span class="comment">//服务提供者的方法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先这是一个接口，Feign会通过动态代理，帮我们生成实现类。这点跟mybatis的mapper很像</li><li><code>@FeignClient</code>，声明这是一个Feign客户端，同时通过<code>value</code>属性指定服务名称</li><li>接口中的定义方法，完全采用SpringMVC的注解，Feign会根据注解帮我们生成URL，并访问获取结果</li></ul><p>改造原来的调用逻辑，使用UserClient访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;  <span class="comment">//注入上面写的接口</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userClient.queryById(id); <span class="comment">//调用接口方法，相当于给服务提供者发送已经拼接好了的url。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-开启Feign功能"><a href="#2-2-3-开启Feign功能" class="headerlink" title="2.2.3.开启Feign功能"></a>2.2.3.开启Feign功能</h3><p>我们在启动类上，添加注解，开启Feign功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">// 开启Feign功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserConsumerDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>你会发现RestTemplate的注册被我删除了（RestTemplate不用了，ribbon负载均衡也不用了）。<strong>Feign中已经自动集成了Ribbon负载均衡，因此我们不需要自己定义RestTemplate了</strong></li></ul><h3 id="2-2-4-启动测试："><a href="#2-2-4-启动测试：" class="headerlink" title="2.2.4.启动测试："></a>2.2.4.启动测试：</h3><p>访问接口：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533907548664.png" alt="1533907548664"></p><p>正常获取到了结果。</p><h2 id="2-3-负载均衡"><a href="#2-3-负载均衡" class="headerlink" title="2.3.负载均衡"></a>2.3.负载均衡</h2><p>Feign中本身已经集成了Ribbon依赖和自动配置：（组件里面包含组件）</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525672070679.png" alt="1525672070679"></p><p>因此我们不需要额外引入依赖，也不需要再注册<code>RestTemplate</code>对象。</p><p>Fegin内置的ribbon默认设置了请求超时时长，默认是1000ms，我们可以通过手动配置来修改这个超时时长：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># 读取超时时长</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span> <span class="comment"># 建立链接的超时时长</span></span><br></pre></td></tr></table></figure><p>，因为ribbon内部有重试机制，一旦超时，会自动重新发起请求。如果不希望重试，可以添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">500</span> <span class="comment"># 连接超时时长</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># 数据通信超时时长</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">0</span> <span class="comment"># 当前服务器的重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment"># 重试多少次服务</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span> <span class="comment"># 是否对所有的请求方式都重试</span></span><br></pre></td></tr></table></figure><p>另外，Hystix的超时时间，应该比重试的总时间要大，比如当前案例中，应该配 大于2500*2 = 5000</p><h2 id="2-4-Hystix支持-了解"><a href="#2-4-Hystix支持-了解" class="headerlink" title="2.4.Hystix支持(了解)"></a>2.4.Hystix支持(了解)</h2><p>Feign默认也有对Hystix的集成：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525672466192.png" alt="1525672466192"></p><p>只不过，默认情况下是关闭的。我们需要通过下面的参数来开启：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的熔断功能</span></span><br></pre></td></tr></table></figure><p>但是，Feign中的Fallback配置不像Ribbon中那样简单了。</p><p>1）首先，我们要定义一个类，实现刚才编写的UserFeignClient，作为fallback的处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClientFallback</span> <span class="keyword">implements</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(<span class="string">&quot;用户查询出现异常！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）然后在UserFeignClient中，指定刚才编写的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;, fallback = UserFeignClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）重启测试：</p><p>我们关闭user-service服务，然后在页面访问：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533942286259.png" alt="1533942286259"></p><h2 id="2-5-日志级别"><a href="#2-5-日志级别" class="headerlink" title="2.5.日志级别"></a>2.5.日志级别</h2><p><strong>浏览器f12看到的只是浏览器跟一台服务器的交互信息，但是服务器跟服务器之间交互的信息可以就无法记录了？？？使用fegin的日志功能，依然可以拿到他们之间交互的信息！</strong></p><p>前面讲过，通过<code>logging.level.xx=debug</code>来设置日志级别。然而这个对Fegin客户端而言不会产生效果。因为<code>@FeignClient</code>注解修改的客户端在被代理时，都会创建一个新的Fegin.Logger实例。我们需要额外指定这个日志的级别才可以。    </p><p>1）设置cn.itcast包下的日志级别都为debug</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">cn.itcast:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>2）编写配置类，定义日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定的Level级别是FULL，Feign支持4种级别：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525674373507.png" alt="1525674373507"></p><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><p>3）在FeignClient中指定配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;, fallback = UserClientFallback.class, configuration = FeignConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）重启项目，即可看到每次访问的日志：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525674544569.png" alt="1525674544569"></p><h1 id="2-Gateway网关"><a href="#2-Gateway网关" class="headerlink" title="2.Gateway网关"></a>2.Gateway网关</h1><h2 id="2-1-简介-1"><a href="#2-1-简介-1" class="headerlink" title="2.1.简介"></a>2.1.简介</h2><p>Gateway网关是我们服务的<strong>守门神</strong>，所有微服务的统一入口。Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等<strong>响应式编程</strong>和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><p>在SpringCloudGateway之前，SpringCloud并不自己开发网关，而是使用Netflix公司的Zuul框架，不过zuul2.0更新迭代缓慢，难以满足Spring的更新需求。于是就有了SpringCloudGateway。其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。</p><p>zuul –&gt; spring cloud gateway</p><p>eureka – &gt;nacos, zookeeper, consol </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//zhuanlan.zhihu.com/p/172010354</span></span><br></pre></td></tr></table></figure><p><strong>核心功能特性</strong></p><ul><li>请求路由 </li><li>集成 Hystrix 断路器</li><li>权限控制</li><li>限流</li></ul><p>加入网关后的服务结构：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568461181544.png" alt="1568461181544"></p><p><strong>路由</strong>：gateway加入后，<strong>一切请求都必须先经过gateway，因此gateway就必须根据某种规则，把请求转发到某个微服务</strong>，这个过程叫做路由。</p><p><strong>权限控制</strong>：请求经过路由时，我们可以判断请求者是否有请求资格，如果没有则进行拦截。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下游的微服务能够接受的速度来放行请求，避免服务压力过大。</p><h2 id="2-2-快速入门-1"><a href="#2-2-快速入门-1" class="headerlink" title="2.2.快速入门"></a>2.2.快速入门</h2><p>首先，我们来研究下Gateway的路由功能，基本步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1.</span> <span class="string">创建SpringBoot工程gateway_server，引入网关依赖</span></span><br><span class="line"><span class="meta">2.</span> <span class="string">编写启动类</span></span><br><span class="line"><span class="meta">3.</span> <span class="string">编写基础配置：服务端口，应用名称</span></span><br><span class="line"><span class="meta">4.</span> <span class="string">编写路由规则</span></span><br><span class="line"><span class="meta">5.</span> <span class="string">启动网关服务进行测试</span></span><br></pre></td></tr></table></figure><h3 id="2-2-1-新建工程"><a href="#2-2-1-新建工程" class="headerlink" title="2.2.1.新建工程"></a>2.2.1.新建工程</h3><p>填写基本信息：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568462006312.png" alt="1568462006312"></p><p>位置信息：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568462017693.png" alt="1568462017693"></p><p>添加gateway依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gateway-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-编写启动类"><a href="#2-2-2-编写启动类" class="headerlink" title="2.2.2.编写启动类"></a>2.2.2.编写启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-编写配置"><a href="#2-2-3-编写配置" class="headerlink" title="2.2.3.编写配置"></a>2.2.3.编写配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-server</span> <span class="comment">#指定服务名</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-编写路由规则"><a href="#2-2-4-编写路由规则" class="headerlink" title="2.2.4.编写路由规则"></a>2.2.4.编写路由规则</h3><p>我们需要用gateway来代理user-service服务，先看一下控制面板中的服务状态：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525676797879.png" alt="1525676797879"></p><ul><li>ip为：127.0.0.1</li><li>端口为：8081</li></ul><p>映射规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-server</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 当前路由的唯一标识</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://127.0.0.1:8081</span> <span class="comment"># 路由的目标微服务地址</span></span><br><span class="line">        <span class="attr">predicates:</span> <span class="comment"># 断言</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 按照路径匹配的规则</span></span><br></pre></td></tr></table></figure><p>我们将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址</p><p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<a href="http://127.0.0.1:8081/">http://127.0.0.1:8081</a></p><h3 id="2-3-5-启动测试："><a href="#2-3-5-启动测试：" class="headerlink" title="2.3.5.启动测试："></a>2.3.5.启动测试：</h3><p>我们访问：<a href="http://localhost:8081/user/1%EF%BC%8C%E8%AF%B7%E6%B1%82**%E7%9B%B4%E8%BE%BE%E7%94%A8%E6%88%B7%E5%BE%AE%E6%9C%8D%E5%8A%A1**%EF%BC%9A">http://localhost:8081/user/1，请求**直达用户微服务**：</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568462813576.png" alt="1568462813576"> </p><p>当我们访问：<a href="http://localhost:10010/user/1%EF%BC%8C%E7%AC%A6%E5%90%88%60/user/**%60%E7%9A%84%E8%A7%84%E5%88%99%EF%BC%8C%E5%9B%A0%E6%AD%A4**%E8%AF%B7%E6%B1%82%E8%A2%AB%E4%BB%A3%E7%90%86%E5%88%B0**http://localhost:8081/user/1">http://localhost:10010/user/1，符合`/user/**`的规则，因此**请求被代理到**http://localhost:8081/user/1</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568462875371.png" alt="1568462875371"> </p><h2 id="2-3-面向服务的路由"><a href="#2-3-面向服务的路由" class="headerlink" title="2.3.面向服务的路由"></a>2.3.面向服务的路由</h2><p>在刚才的路由规则中，我们把路径对应的服务地址写死了！如果同一服务有多个实例的话，这样做显然就不合理了。</p><p>我们应该根据服务的名称，去Eureka注册中心查找 服务对应的所有实例列表，并且对服务列表进行负载均衡才对！</p><h3 id="2-3-1-添加Eureka客户端依赖"><a href="#2-3-1-添加Eureka客户端依赖" class="headerlink" title="2.3.1.添加Eureka客户端依赖"></a>2.3.1.添加Eureka客户端依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-添加Eureka配置"><a href="#2-3-2-添加Eureka配置" class="headerlink" title="2.3.2.添加Eureka配置"></a>2.3.2.添加Eureka配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-修改映射配置"><a href="#2-3-3-修改映射配置" class="headerlink" title="2.3.3.修改映射配置"></a>2.3.3.修改映射配置</h3><p>因为已经有了Eureka客户端，我们可以从Eureka获取服务的地址信息，因此映射时无需指定IP地址，而是通过服务名称来访问，而且Zuul已经集成了Ribbon的负载均衡功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 当前路由的唯一标识</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://user-service</span> <span class="comment"># 路由的目标微服务,lb:代表负载均衡，user-service:代表服务id</span></span><br><span class="line">        <span class="attr">predicates:</span> <span class="comment"># 断言</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 按照路径匹配的规则</span></span><br></pre></td></tr></table></figure><p>这里修改了uri的路由方式：</p><ul><li>lb：负载均衡的协议，将来会使用Ribbon实现负载均衡</li><li>user-service：服务的id</li></ul><h3 id="2-3-4-启动测试"><a href="#2-3-4-启动测试" class="headerlink" title="2.3.4.启动测试"></a>2.3.4.启动测试</h3><p>再次启动，这次gateway进行代理时，会利用Ribbon进行负载均衡访问，日志中可以看到使用了负载均衡器：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568463748686.png" alt="1568463748686"></p><h2 id="2-4-其它路由方式"><a href="#2-4-其它路由方式" class="headerlink" title="2.4.其它路由方式"></a>2.4.其它路由方式</h2><p>Gateway中支持各种路由方式，看官方的目录：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568464460197.png" alt="1568464460197"></p><p>主要包括：</p><ul><li>After Route Predicate Factory、Before Route Predicate Factory和Between Route Predicate Factory：基于请求时间的路由规则</li><li>Cookie Route Predicate Factory：基于cookie值的路由匹配规则</li><li>Header Route Predicate Factory：基于请求头的路由匹配规则</li><li>Host  Route Predicate Factory：基于主机名的路由匹配规则</li><li>Method Route Predicate Factory：基于请求方式的路由匹配规则</li><li>Path Route Predicate Factory：基于请求路径的路由匹配规则</li><li>Query Route Predicate Factory：基于请求参数的路由匹配规则</li><li>RemoteAddr Route Predicate Factory：基于请求者ip地址的路由匹配规则</li></ul><p>有兴趣的同学可以自己查看。</p><h2 id="2-5-局部过滤器"><a href="#2-5-局部过滤器" class="headerlink" title="2.5.局部过滤器"></a>2.5.局部过滤器</h2><p><strong>GatewayFilter Factories</strong>是Gateway中的<strong>局部过滤器工厂</strong>，作用于某个特定路由，<strong>允许以某种方式修改传入的HTTP请求或返回的HTTP响应</strong>。</p><p>包括下面的一些过滤工厂：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568465723406.png" alt="1568465723406"></p><p>还包括：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568465046366.png" alt="1568465046366"></p><p>下面我们以几个过滤器的配置为示例：</p><h3 id="2-5-1-添加请求头"><a href="#2-5-1-添加请求头" class="headerlink" title="2.5.1.添加请求头"></a>2.5.1.添加请求头</h3><p>示例：AddRequestHeader GatewayFilter Factory，可以在请求中添加请求头，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 当前路由的唯一标识</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://user-service</span> <span class="comment"># 路由的目标微服务,lb:代表负载均衡，user-service:代表服务id</span></span><br><span class="line">        <span class="attr">predicates:</span> <span class="comment"># 断言</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 按照路径匹配的规则</span></span><br><span class="line">        <span class="attr">filters:</span> <span class="comment"># 过滤项</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=info,</span> <span class="string">java</span> <span class="string">is</span> <span class="string">best!</span>   <span class="comment"># info表示键，java is best 表示值#########</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>filters</code>：就是当前路由规则的所有过滤器配置</li><li><code>AddRequestHeader</code>是添加一个头信息</li></ul><p>重启后，再user-service的内部断点，查看请求头：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20200704000431156.png" alt="image-20200704000431156"></p><h3 id="2-5-2-Hystrix"><a href="#2-5-2-Hystrix" class="headerlink" title="2.5.2.Hystrix"></a>2.5.2.Hystrix</h3><p>网关做请求路由转发，如果被调用的请求阻塞，需要通过Hystrix来做线程隔离和熔断，防止出现故障。</p><h4 id="1）引入Hystrix的依赖"><a href="#1）引入Hystrix的依赖" class="headerlink" title="1）引入Hystrix的依赖"></a>1）引入Hystrix的依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）定义降级处理规则"><a href="#2）定义降级处理规则" class="headerlink" title="2）定义降级处理规则"></a>2）定义降级处理规则</h4><p>可以通过default-filter来配置，会作用于所有的路由规则。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 当前路由的唯一标识</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://user-service</span> <span class="comment"># 路由的目标微服务,lb:代表负载均衡，user-service:代表服务id</span></span><br><span class="line">        <span class="attr">predicates:</span> <span class="comment"># 断言</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 按照路径匹配的规则</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=info,</span> <span class="string">java</span> <span class="string">is</span> <span class="string">best!</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span> <span class="comment"># 指定过滤工厂名称  #########这里的名称看上面的图，</span></span><br><span class="line">        <span class="attr">args:</span> <span class="comment"># 指定过滤的参数</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">fallbackcmd</span>  <span class="comment"># hystrix的指令名</span></span><br><span class="line">          <span class="attr">fallbackUri:</span> <span class="string">forward:/fallbackTest</span> <span class="comment"># 失败后的跳转路径</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution.isolation.thread.timeoutInMilliseconds:</span> <span class="number">1000</span> <span class="comment"># 失败超时时长</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>default-filters：默认过滤项，作用于所有的路由规则<ul><li>name：过滤工厂名称，这里指定Hystrix，意思是配置Hystrix类型</li><li>args：配置过滤工厂的配置<ul><li>name：Hystrix的指令名称，用于配置例如超时时长等信息</li><li>fallbackUri：失败降级时的跳转路径</li></ul></li></ul></li></ul><h4 id="3）定义降级的处理函数"><a href="#3）定义降级的处理函数" class="headerlink" title="3）定义降级的处理函数"></a>3）定义降级的处理函数</h4><p>定义一个controller，用来编写失败的处理逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.gateway.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FallbackController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/fallbackTest&quot;)</span><span class="comment">//## fallbackTestg跟配置文件的路径名称要一致。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">fallBackController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; response = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        response.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;502&quot;</span>);</span><br><span class="line">        response.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;服务超时&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4）启动测试"><a href="#4）启动测试" class="headerlink" title="4）启动测试"></a>4）启动测试</h4><p>再UserController的业务中打断点，让请求超时，查看页面的效果：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568469496226.png" alt="1568469496226"> </p><h3 id="2-5-3-路由前缀"><a href="#2-5-3-路由前缀" class="headerlink" title="2.5.3.路由前缀"></a>2.5.3.路由前缀</h3><h4 id="1）问题呈现"><a href="#1）问题呈现" class="headerlink" title="1）问题呈现"></a>1）问题呈现</h4><p>我们之前用<code>/user/**</code>这样的映射路径代表<code>user-service</code>这个服务。因此请求<code>user-service</code>服务的一切路径要以<code>/user/**</code>开头</p><p>比如，访问：<code>localhost:10010/user/2</code>会被代理到：<code>localhost:8081/user/2</code></p><p>现在，我们在<code>user-service</code>中的<code>cn.itcast.user.web</code>中定义一个新的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;address&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;me&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">myAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;上海市浦东新区航头镇航头路18号传智播客&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个接口的路径是<code>/address/me</code>，并不是以<code>/user/</code>开头。当访问：<code>localhost:10010/address/me</code>时，并不符合映射路径，因此会得到404.</p><p>无论是 <code>/user/**</code>还是<code>/address/**</code>都是<code>user-service</code>中的一个controller路径，都不能作为网关到user-service的映射路径。</p><p>因此我们需要定义一个额外的映射路径，例如：<code>/user-service</code>，配置如下：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20200627172633054.png" alt="image-20200627172633054"> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 当前路由的唯一标识</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://user-service</span> <span class="comment"># 路由的目标微服务,user-service:代表服务id</span></span><br><span class="line">        <span class="attr">predicates:</span> <span class="comment"># 断言</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user-service/**</span> <span class="comment"># 按照路径匹配的规则##################################更改这里！</span></span><br></pre></td></tr></table></figure><p>那么问题来了:</p><p>当我们访问：<a href="http://localhost:10010/user-service/user/1%E6%97%B6%EF%BC%8C%E6%98%A0%E5%B0%84%E8%B7%AF%E5%BE%84%60/user-service%60%E6%8C%87%E5%90%91%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%EF%BC%8C%E4%BC%9A%E8%A2%AB%E4%BB%A3%E7%90%86%E5%88%B0%EF%BC%9Ahttp://localhost:8081/user-service/user/1">http://localhost:10010/user-service/user/1时，映射路径`/user-service`指向用户服务，会被代理到：http://localhost:8081/user-service/user/1</a>.</p><p>当我们访问：<a href="http://localhost:10010/user-service/address/me%E6%97%B6%EF%BC%8C%E6%98%A0%E5%B0%84%E8%B7%AF%E5%BE%84%60/user-service%60%E6%8C%87%E5%90%91%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%EF%BC%8C%E4%BC%9A%E8%A2%AB%E4%BB%A3%E7%90%86%E5%88%B0%EF%BC%9Ahttp://localhost:8081/user-service/address/me">http://localhost:10010/user-service/address/me时，映射路径`/user-service`指向用户服务，会被代理到：http://localhost:8081/user-service/address/me</a></p><p>而在<code>user-service</code>中，无论是<code>/user-service/user/1</code>还是<code>/user-service/address/me</code>都是错误的，因为多了一个<code>/user-service</code>。</p><p>这个<code>/user-service</code>是gateway中的映射路径，不应该被代理到微服务，怎办吧？</p><p>（<strong>去除微服务器名称咯，也就是去除路由前缀，因为user-service只是路由作用，实际上并不是真实uri的一部分）</strong></p><h4 id="2）去除路由前缀"><a href="#2）去除路由前缀" class="headerlink" title="2）去除路由前缀"></a>2）去除路由前缀</h4><p>解决思路很简单，当我们访问<a href="http://localhost:10010/user-service/user/1%E6%97%B6%EF%BC%8C%E7%BD%91%E5%85%B3%E5%88%A9%E7%94%A8%60/user-service%60%E8%BF%99%E4%B8%AA%E6%98%A0%E5%B0%84%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D%E5%88%B0%E4%BA%86%E7%94%A8%E6%88%B7%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%90%86%E6%97%B6%EF%BC%8C%E5%8F%AA%E8%A6%81%E6%8A%8A%60/user-service%60%E8%BF%99%E4%B8%AA%E6%98%A0%E5%B0%84%E8%B7%AF%E5%BE%84%E5%8E%BB%E9%99%A4%E4%B8%8D%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E5%90%97%E3%80%82">http://localhost:10010/user-service/user/1时，网关利用`/user-service`这个映射路径匹配到了用户微服务，请求代理时，只要把`/user-service`这个映射路径去除不就可以了吗。</a></p><p>恰好有一个过滤器：StripPrefixFilterFactory可以满足我们的需求。</p><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html/#the-stripprefix-gatewayfilter-factory">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html/#the-stripprefix-gatewayfilter-factory</a></p><p>我们修改刚才的路由配置：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20200627173341917.png" alt="image-20200627173341917"> </p><p>此时，网关做路由的代理时，就不会把/user-service作为目标请求路径的一部分了。</p><p>也就是说，我们访问：<a href="http://localhost:10010/user-service/user/1%EF%BC%8C%E4%BC%9A%E4%BB%A3%E7%90%86%E5%88%B0%EF%BC%9Ahttp://localhost:8081/user/1">http://localhost:10010/user-service/user/1，会代理到：http://localhost:8081/user/1</a></p><p>我们访问：<a href="http://localhost:10010/user-service/address/me%EF%BC%8C%E4%BC%9A%E4%BB%A3%E7%90%86%E5%88%B0%EF%BC%9Ahttp://localhost:8081/address/me">http://localhost:10010/user-service/address/me，会代理到：http://localhost:8081/address/me</a></p><p>试试看：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20200627174026862.png" alt="image-20200627174026862"> </p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20200627174132537.png" alt="image-20200627174132537"> </p><h2 id="2-6-全局过滤器"><a href="#2-6-全局过滤器" class="headerlink" title="2.6.全局过滤器"></a>2.6.全局过滤器</h2><p>全局过滤器Global Filter 与局部的GatewayFilter会在运行时合并到一个过滤器链中，并且根据<code>org.springframework.core.Ordered</code>来<strong>排序后执行</strong>，顺序可以<strong>通过<code>getOrder()</code>方法或者<code>@Order</code>注解来指定</strong>。</p><h3 id="2-6-1-GlobalFilter接口"><a href="#2-6-1-GlobalFilter接口" class="headerlink" title="2.6.1.GlobalFilter接口"></a>2.6.1.GlobalFilter接口</h3><p>来看看全局过滤器的顶级接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GlobalFilter</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process the Web request and (optionally) delegate to the next &#123;<span class="doctag">@code</span> WebFilter&#125;</span></span><br><span class="line"><span class="comment"> * through the given &#123;<span class="doctag">@link</span> GatewayFilterChain&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exchange the current server exchange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chain provides a way to delegate to the next filter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request processing is complete</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现接口，就要实现其中的filter方法，在方法内部完成过滤逻辑，其中的参数包括：</p><ul><li><p>ServerWebExchange：一个类似于Context的域对象，封装了Request、Response等服务相关的属性</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568470642259.png" alt="1568470642259"> </p></li><li><p>GatewayFilterChain：过滤器链，用于放行请求到下一个过滤器</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568470766790.png" alt="1568470766790"></p></li></ul><h3 id="2-6-2-过滤器顺序"><a href="#2-6-2-过滤器顺序" class="headerlink" title="2.6.2.过滤器顺序"></a>2.6.2.过滤器顺序</h3><p>通过添加@Order注解，可以控制过滤器的优先级，从而决定了过滤器的执行顺序。</p><p>另外，一个过滤器的执行<strong>包括<code>&quot;pre&quot;</code>和<code>&quot;post&quot;</code>两个过程</strong>。在GlobalFilter.<strong>filter()方法中编写的逻辑属于pre阶段</strong>，在使用GatewayFilterChain.filter().<strong>then()的阶段，属于Post阶段</strong>。</p><p>优先级最高的过滤器，会在pre过程的第一个执行，在post过程的最后一个执行，如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568470116218.png" alt="1568470116218"> </p><p>我们可以在pre阶段做很多事情，诸如：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><h2 id="2-7-自定义过滤器"><a href="#2-7-自定义过滤器" class="headerlink" title="2.7.自定义过滤器"></a>2.7.自定义过滤器</h2><p>定义过滤器只需要实现GlobalFilter即可，不过我们有多种方式来完成：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">方式一：定义过滤器类，实现接口</span></span><br><span class="line"><span class="meta">-</span> <span class="string">方式二：通过@Configuration类结合lambda表达式</span></span><br></pre></td></tr></table></figure><h3 id="2-7-1-登录过滤器"><a href="#2-7-1-登录过滤器" class="headerlink" title="2.7.1.登录过滤器"></a>2.7.1.登录过滤器</h3><p>现在，我们通过自定义过滤器，模拟一个登录校验功能，逻辑非常简单：</p><ul><li>获取用户请求参数中的 access-token 参数</li><li>判断是否为”admin”<ul><li>如果不是，证明未登录，拦截请求</li><li>如果是，证明已经登录，放行请求</li></ul></li></ul><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.gateway.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(0)</span> <span class="comment">// 通过注解声明过滤器顺序</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取token</span></span><br><span class="line">        String token = exchange.getRequest().getQueryParams().toSingleValueMap().get(<span class="string">&quot;access-token&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断请求参数是否正确</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.equals(token, <span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// 正确，放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 错误，需要拦截，设置状态码</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        <span class="comment">// 结束任务</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>位置如下：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568472296245.png" alt="1568472296245"></p><p>测试：带错误参数的情况：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568472343961.png" alt="1568472343961"> </p><p>带正确参数的情况：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568472379916.png" alt="1568472379916"> </p><h3 id="2-7-2-多过滤器演示（了解）"><a href="#2-7-2-多过滤器演示（了解）" class="headerlink" title="2.7.2.多过滤器演示（了解）"></a>2.7.2.多过滤器演示（了解）</h3><p>下面我们<strong>通过lambda表达式来定义过滤器</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.gateway.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(-2)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">globalFilter1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((exchange, chain) -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;过滤器1的pre阶段！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                log.info(<span class="string">&quot;过滤器1的post阶段！&quot;</span>);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(-1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">globalFilter2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((exchange, chain) -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;过滤器2的pre阶段！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                log.info(<span class="string">&quot;过滤器2的post阶段！&quot;</span>);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(0)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">globalFilter3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((exchange, chain) -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;过滤器3的pre阶段！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                log.info(<span class="string">&quot;过滤器3的post阶段！&quot;</span>);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1568472819346.png" alt="1568472819346"></p><h2 id="2-8-网关限流"><a href="#2-8-网关限流" class="headerlink" title="2.8.网关限流"></a>2.8.网关限流</h2><p>网关除了<strong>请求路由、身份验证</strong>，还有一个非常重要的作用：<strong>请求限流</strong>。当系统面对高并发请求时，为了减少对业务处理服务的压力，需要在网关中对请求限流，按照一定的速率放行请求。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20200108155348648.png" alt="image-20200108155348648"></p><p>常见的限流算法包括：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">计数器算法</span></span><br><span class="line"><span class="meta">-</span> <span class="string">漏桶算法</span></span><br><span class="line"><span class="meta">-</span> <span class="string">令牌桶算法</span></span><br></pre></td></tr></table></figure><h3 id="2-8-1-令牌桶算法原理"><a href="#2-8-1-令牌桶算法原理" class="headerlink" title="2.8.1 令牌桶算法原理"></a>2.8.1 令牌桶算法原理</h3><p>SpringGateway中采用的是令牌桶算法，令牌桶算法原理：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">准备一个令牌桶，有固定容量，一般为服务并发上限</span></span><br><span class="line"><span class="meta">-</span> <span class="string">按照固定速率，生成令牌并存入令牌桶，如果桶中令牌数达到上限，就丢弃令牌。</span></span><br><span class="line"><span class="meta">-</span> <span class="string">每次请求调用需要先获取令牌，只有拿到令牌，才继续执行，否则选择选择等待或者直接拒绝。</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20200108161959810.png" alt="image-20200108161959810"></p><h3 id="2-8-2-Gateway中限流实现"><a href="#2-8-2-Gateway中限流实现" class="headerlink" title="2.8.2.Gateway中限流实现"></a>2.8.2.Gateway中限流实现</h3><p>SpringCloudGateway是采用令牌桶算法，其<strong>令牌相关信息记录在redis中</strong>，因此我们需要安装redis，并引入Redis相关依赖。</p><p>启动redis容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><p><strong>1) 引入redis有关依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：这里<strong>不是普通的redis依赖</strong>，而是<strong>响应式的Redis依赖</strong>，因为SpringGateway是基于WebFlux的响应式项目。</p><p><strong>2) 配置过滤条件key：</strong></p><p>Gateway会在Redis中记录令牌相关信息，我们可以自己<strong>定义令牌桶的规则</strong>，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">- 给不同的请求URI路径设置不同令牌桶</span></span><br><span class="line"><span class="attr">2</span> <span class="string">- 给不同的登录用户设置不同令牌桶</span></span><br><span class="line"><span class="attr">3</span> <span class="string">- 给不同的请求IP地址设置不同令牌桶</span></span><br></pre></td></tr></table></figure><p>Redis中的一个Key和Value对就是一个令牌桶。因此Key的生成规则就是桶的定义规则。SpringCloudGateway中key的生成规则定义在<code>KeyResolver</code>接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KeyResolver</span> </span>&#123;</span><br><span class="line"><span class="function">Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口中的方法返回值就是给令牌桶生成的key。API说明：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">Mono：是一个单元素容器，用来存放令牌桶的key</span></span><br><span class="line"><span class="meta">-</span> <span class="string">ServerWebExchange：上下文对象，可以理解为ServletContext，可以从中获取request、response、cookie等信息</span></span><br></pre></td></tr></table></figure><p>比如上面的三种令牌桶规则，生成key的方式如下：</p><ul><li><p>给不同的请求URI路径设置不同令牌桶，示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Mono.just(exchange.getRequest().getURI().getPath());<span class="comment">// 获取请求URI</span></span><br></pre></td></tr></table></figure></li><li><p>给不同的登录用户设置不同令牌桶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> exchange.getPrincipal().map(Principal::getName);<span class="comment">// 获取用户</span></span><br></pre></td></tr></table></figure></li><li><p>给不同的请求IP地址设置不同令牌桶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Mono.just(exchange.getRequest().getRemoteAddress().getHostName());<span class="comment">// 获取请求者IP</span></span><br></pre></td></tr></table></figure></li></ul><p>这里我们选择最后一种，<strong>使用IP地址的令牌桶key</strong>。</p><p>我们在<code> com.itheima.sh.ratelimit</code>中定义一个类，配置一个KeyResolver的Bean实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ratelimit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpKeyResolver</span> <span class="keyword">implements</span> <span class="title">KeyResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3) 配置桶参数：</strong></p><p>另外，令牌桶的参数需要通过yaml文件来配置，<strong>参数有2个</strong>：</p><ul><li><p><code>replenishRate</code>：<strong>每秒钟生成令牌的速率，基本上就是每秒钟允许的最大请求数量</strong></p></li><li><p><code>burstCapacity</code>：<strong>令牌桶的容量，就是令牌桶中存放的最大的令牌的数量</strong></p></li></ul><p>完整配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-server</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line"><span class="comment"># ...其他配置略</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span> <span class="comment">#请求数限流 名字不能随便写,看上面的图片</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span> <span class="comment"># 指定一个key生成器</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">2</span> <span class="comment"># 生成令牌的速率</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span> <span class="comment"># 桶的容量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里配置了一个过滤器：RequestRateLimiter，并设置了三个参数：</p><ul><li><p><code>key-resolver</code>：<code>&quot;#&#123;@ipKeyResolver&#125;&quot;</code>是SpEL表达式，写法是<code>#&#123;@bean的名称&#125;</code>，<strong>ipKeyResolver就是我们定义的Bean名称</strong></p></li><li><p><code>redis-rate-limiter.replenishRate</code>：每秒钟生成令牌的速率</p></li><li><p><code>redis-rate-limiter.burstCapacity</code>：令牌桶的容量</p></li></ul><p>这样的限流配置可以达成的效果：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">每一个IP地址，每秒钟最多发起2次请求</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">每秒钟超过2次请求，则返回429的异常状态码</span></span><br></pre></td></tr></table></figure><p><strong>4）测试：</strong></p><p>我们快速在浏览器多次访问<a href="http://localhost:10010/user-service/user/3%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA429%E9%94%99%E8%AF%AF">http://localhost:10010/user-service/user/3，就会得到一个429错误</a></p><p>429：代表请求次数过多，触发限流了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="SpringCloud" scheme="http://example.com/categories/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://example.com/tags/SpringCloud/"/>
    
    <category term="Hystrix" scheme="http://example.com/tags/Hystrix/"/>
    
    <category term="Feign" scheme="http://example.com/tags/Feign/"/>
    
    <category term="Gateway" scheme="http://example.com/tags/Gateway/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-1</title>
    <link href="http://example.com/2022/05/18/SpringCloud-1/"/>
    <id>http://example.com/2022/05/18/SpringCloud-1/</id>
    <published>2022-05-18T10:08:18.000Z</published>
    <updated>2022-05-18T10:13:55.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>了解系统架构的演变</li><li>了解RPC与Http的区别<ul><li>基于RPC或HTTP就可以实现两台服务器之间数据交互</li></ul></li><li>掌握HttpClient的简单使用<ul><li>使用第三方封装好的组件(工具)实现服务器与服务器之间的调用</li></ul></li><li>知道什么是SpringCloud<ul><li>微服务技术栈的总称,内部包含了用于服务治理,限流,熔断,降级,路由等组件实现服务的维护</li></ul></li><li>独立搭建Eureka注册中心<ul><li>借助Eureka实现数据共享(中介)</li></ul></li><li>独立配置Robbin负载均衡<ul><li>实现Eureka负载均衡</li></ul></li></ul><h1 id="1-系统架构演变"><a href="#1-系统架构演变" class="headerlink" title="1.系统架构演变"></a>1.系统架构演变</h1><h2 id="1-架构演进之路"><a href="#1-架构演进之路" class="headerlink" title="1.架构演进之路"></a>1.架构演进之路</h2><p>淘宝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//mp.weixin.qq.com/s?__biz=MzU0OTk3ODQ3Ng==&amp;mid=2247485427&amp;idx=1&amp;sn=35a1d4d4bc8a96ecb5e841bea2cc1102&amp;chksm=fba6eff0ccd166e6c048741bec01d8979b2be277f6abd38996e0aed2e2f887559dd61f693c71&amp;mpshare=1&amp;scene=1&amp;srcid=0616Hpu6jcYpt7HaXeXHDhea&amp;sharer_sharetime=1596984524454&amp;sharer_shareid=5e222757dd91db135a3736679bc9eb56&amp;key=bbd9db2a3d7572cdbd226e0775c7ca7f0d70f724d8b03095eeecf112cc204c20fba4dff140e40327c794c36ff38352fba5da804015bb2ed758cfdec881b8600fc88cd85cc84fe8b87c901e1b1da583fb&amp;ascene=1&amp;uin=MTE5ODAyNDI3OA%3D%3D&amp;devicetype=Windows+10+x64&amp;version=62090529&amp;lang=zh_CN&amp;exportkey=A1PI8LOUY6TMNRWrt7504jQ%3D&amp;pass_ticket=U40ThnXGAl1WXUCF7y5mEpLjz19dLmkCkdYPHIB2MTvojIlJr2M57ToBVxtUzROh</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 单点架构 </span><br><span class="line">问题:</span><br><span class="line">单点架构,处理并发能力有限,一旦宕机,将是毁灭性的事情.</span><br><span class="line">解决方案:</span><br><span class="line">提供架构的高可用因此有了集群</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span> 集群: 多台服务器做相同的事情，解决单点架构的并发以及宕机问题。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 反向代理-负载均衡: 找一个统一的入口,接收代理集群接收请求.</span><br><span class="line">    将所有功能都放到一集群（因为集群的每一台服务器都是做的相同事情，也就是说将功能都放到一台服务器，）上，</span><br><span class="line">    服务器处理不过来，因此将不同业务分开来，由不同的小集群共同完成，这就是分布式架构！</span><br><span class="line"><span class="number">4</span> 分布式: 不同的服务器做不同的事情,协作起来,完成一个完整的业务</span><br><span class="line">  服务器与服务器之间相互调用</span><br></pre></td></tr></table></figure><p>随着互联网的发展，网站应用的规模不断扩大。需求的激增，带来的是技术上的压力。系统架构也因此也不断的演进、升级、迭代。从单一应用，到垂直拆分，到分布式服务，到SOA，以及现在火热的微服务架构，还有在Google带领下来势汹涌的Service Mesh。我们到底是该乘坐微服务的船只驶向远方，还是偏安一隅得过且过？</p><p>其实生活不止眼前的苟且，还有诗和远方。所以我们今天就回顾历史，看一看系统架构演变的历程；把握现在，学习现在最火的技术架构；展望未来，争取成为一名优秀的Java工程师。</p><h2 id="1-1-集中式架构（巨石）"><a href="#1-1-集中式架构（巨石）" class="headerlink" title="1.1. 集中式架构（巨石）"></a>1.1. 集中式架构（巨石）</h2><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是影响项目开发的关键。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1545912768292.png" alt="1545912768292"> </p><p>存在的问题：</p><ul><li>代码耦合，开发维护困难</li><li>无法针对不同模块进行针对性优化</li><li>无法水平扩展</li><li>单点容错率低，并发能力差</li></ul><h2 id="1-2-垂直拆分"><a href="#1-2-垂直拆分" class="headerlink" title="1.2.垂直拆分"></a>1.2.垂直拆分</h2><p>当访问量逐渐增大，单一应用无法满足需求，此时为了应对更高的并发和业务需求，我们根据业务功能对系统进行拆分：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1545912974097.png" alt="1545912974097"> </p><p>优点：</p><ul><li>系统拆分实现了流量分担，解决了并发问题</li><li>可以针对不同模块进行优化</li><li>方便水平扩展，负载均衡，容错率提高</li></ul><p>缺点：</p><ul><li>系统间相互独立，会有很多重复开发工作，影响开发效率</li></ul><h2 id="1-3-分布式服务"><a href="#1-3-分布式服务" class="headerlink" title="1.3.分布式服务"></a>1.3.分布式服务</h2><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式调用是关键。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1545913905548.png" alt="1545913905548"> </p><p>优点：</p><ul><li>将基础服务进行了抽取，系统间相互调用，提高了代码复用和开发效率</li></ul><p>缺点：</p><ul><li>系统间耦合度变高，调用关系错综复杂，难以维护</li></ul><h2 id="1-4-服务治理架构（SOA）"><a href="#1-4-服务治理架构（SOA）" class="headerlink" title="1.4.服务治理架构（SOA）"></a>1.4.服务治理架构（SOA）</h2><p>SOA ：面向服务的架构</p><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525530804753.png" alt="1525530804753"></p><p>以前出现了什么问题？</p><ul><li>服务越来越多，需要管理每个服务的地址</li><li>调用关系错综复杂，难以理清依赖关系</li><li>服务过多，服务状态难以管理，无法根据服务情况动态管理</li></ul><p>服务治理要做什么？</p><ul><li>服务注册中心，实现服务自动注册和发现，无需人为记录服务地址</li><li>服务自动订阅，服务列表自动推送，服务调用透明化，无需关心依赖关系</li><li>动态监控服务状态监控报告，人为控制服务状态</li></ul><p>缺点：</p><ul><li>服务间会有依赖关系，一旦某个环节出错会影响较大</li><li>服务关系复杂，运维、测试部署困难，不符合DevOps思想</li></ul><h2 id="1-5-微服务"><a href="#1-5-微服务" class="headerlink" title="1.5.微服务"></a>1.5.微服务</h2><p>前面说的SOA，英文翻译过来是面向服务。微服务，似乎也是服务，都是对系统进行拆分。因此两者非常容易混淆，但其实缺有一些差别：</p><p>微服务的特点：</p><ul><li><strong>单一职责：</strong>微服务中每一个服务都对应唯一的业务能力，做到单一职责</li><li>微：微服务的服务拆分粒度很小，例如一个用户管理就可以作为一个服务。每个服务虽小，但“五脏俱全”。</li><li><strong>面向服务：</strong>面向服务是说<strong>每个服务都要对外暴露<code>Rest风格服务接口API</code>。并不关心服务的技术实现，做到与平台和语言无关，也不限定用什么技术实现，只要提供Rest的接口即可</strong>。</li><li><strong>自治：</strong>自治是说服务间互相独立，互不干扰<ul><li>团队独立：每个服务都是一个独立的开发团队，人数不能过多。</li><li>技术独立：因为是面向服务，提供Rest接口，使用什么技术没有别人干涉</li><li>前后端分离：采用前后端分离开发，提供统一Rest接口，后端不用再为PC、移动段开发不同接口</li><li>数据库分离：每个服务都使用自己的数据源</li><li>部署独立，服务间虽然有调用，但要做到服务重启不影响其它服务。有利于持续集成和持续交付。每个服务都是独立的组件，可复用，可替换，降低耦合，易维护</li></ul></li></ul><p>微服务结构图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1526860071166.png" alt="1526860071166"></p><h1 id="2-服务调用方式"><a href="#2-服务调用方式" class="headerlink" title="2.服务调用方式"></a>2.服务调用方式</h1><h2 id="2-1-RPC和HTTP"><a href="#2-1-RPC和HTTP" class="headerlink" title="2.1.RPC和HTTP"></a>2.1.RPC和HTTP</h2><p>无论是微服务还是SOA，都面临着服务间的远程调用。那么服务间的远程调用方式有哪些呢？</p><p>常见的远程调用方式有以下2种：</p><ul><li><p>1 RPC：Remote Produce Call远程过程调用，类似的还有RMI（remote method invoke）。自定义数据格式，基于原生TCP通信，速度快，效率高。早期的webservice，现在热门的dubbo，都是RPC的典型代表.</p></li><li><p>2 Http：http其实是一种网络传输协议，基于TCP，规定了数据传输的格式。现在客户端浏览器与服务端通信基本都是采用Http协议，也可以用来进行远程服务调用。<strong>缺点是消息封装臃肿，优势是对服务的提供和调用方没有任何技术限定，自由灵活，更符合微服务理念。</strong></p><p>现在<strong>热门的Rest风格，就可以通过http协议来实现</strong>。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RPC和HTTP: 底层都依赖TCP/IP这些协议</span><br><span class="line"><span class="number">1</span> RPC(Remote Produce Call远程过程调用): 实现服务器间的数据交互</span><br><span class="line">    优点：协议内容较少,便于快速传递</span><br><span class="line">    缺点：服务的调用者和服务的提供者使用相同的编程语言</span><br><span class="line"><span class="number">2</span> HTTP协议: 实现服务器间的数据交互</span><br><span class="line">    特点：协议内容较多,约束较多,传递速度较慢</span><br><span class="line">    优点：不关心服务器内部使用的编程语言,只需要提供统一的访问入口即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210702112349492.png" alt="image-20210702112349492"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们使用基于Http协议的方式发送请求,实现服务器之间的数据交互:</span><br><span class="line"><span class="number">1</span> HttpClient</span><br><span class="line"><span class="number">2</span> OkHttp</span><br><span class="line"><span class="number">3</span> JDK原生的URLConnection（默认的）</span><br><span class="line">Spring对以上三种方式进行了封装,RestTemplate</span><br></pre></td></tr></table></figure><p>如果你们公司全部采用Java技术栈，那么使用Dubbo(RPC的一种实现)作为微服务架构是一个不错的选择。</p><p>相反，如果<strong>公司的技术栈多样化，而且你更青睐Spring家族，那么SpringCloud搭建微服务是不二之选</strong>。在我们的项目中，我们会选择SpringCloud套件，因此我们会<strong>使用Http方式来实现服务间调用</strong>。</p><h2 id="2-2-Http客户端工具"><a href="#2-2-Http客户端工具" class="headerlink" title="2.2.Http客户端工具"></a>2.2.Http客户端工具</h2><p>既然微服务选择了Http，那么我们就需要考虑自己来实现对请求和响应的处理。不过开源世界已经有很多的http客户端工具，能够帮助我们做这些事情，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">HttpClient</span></span><br><span class="line"><span class="meta">-</span> <span class="string">OKHttp</span></span><br><span class="line"><span class="meta">-</span> <span class="string">URLConnection</span></span><br></pre></td></tr></table></figure><p>接下来，不过这些不同的客户端，API各不相同，</p><h2 id="2-3-Spring的RestTemplate"><a href="#2-3-Spring的RestTemplate" class="headerlink" title="2.3.Spring的RestTemplate"></a>2.3.Spring的RestTemplate</h2><p>SpringWeb提供了一个<strong>RestTemplate模板工具类</strong>，对<strong>基于Http的客户端进行了封装</strong>，并且<strong>实现了对象与json的序列化和反序列化</strong>，非常方便。RestTemplate<strong>并没有限定Http的客户端类型，而是进行了抽</strong>象，目前常用的3种都有支持：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">HttpClient</span></span><br><span class="line"><span class="meta">-</span> <span class="string">OkHttp</span></span><br><span class="line"><span class="meta">-</span> <span class="string">JDK原生的URLConnection（默认的）</span></span><br></pre></td></tr></table></figure><p>接下来，我们就来测试下RestTemplate的使用。</p><h1 id="3-远程调用Demo"><a href="#3-远程调用Demo" class="headerlink" title="3.远程调用Demo"></a>3.远程调用Demo</h1><p>既然RestTemplate的目的是实现远程调用，那么就需要有一个服务的提供者，和一个服务的调用者，两者必须是独立运行的服务。</p><p>但是为了方便项目的学习，我们会创建一个聚合项目，然后把服务的提供者、调用者作为其中的两个模块。</p><h2 id="3-1-创建父工程"><a href="#3-1-创建父工程" class="headerlink" title="3.1.创建父工程"></a>3.1.创建父工程</h2><p>首先，我们创建一个父工程，用来管理依赖，聚合子工程。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1529042834656.png" alt="1529042834656"></p><p>编写项目信息：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1529042868833.png" alt="1529042868833"></p><p>编写保存位置：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1529042934471.png" alt="1529042934471"></p><p>然后将Pom修改成这样：</p><p><packaging>pom</packaging>  注意是pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR5<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- springCloud --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里已经对大部分要用到的依赖的版本进行了 管理，方便后续使用</p><h2 id="3-2-服务提供者"><a href="#3-2-服务提供者" class="headerlink" title="3.2.服务提供者"></a>3.2.服务提供者</h2><p>我们新建一个项目，对外提供查询用户的服务。</p><h3 id="3-2-1-创建module"><a href="#3-2-1-创建module" class="headerlink" title="3.2.1.创建module"></a>3.2.1.创建module</h3><p>选中父工程：cloud-demo</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533786389928.png" alt="1533786389928"></p><p>填写module信息：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1529043293477.png" alt="1529043293477"></p><p>注意，子模块要在父工程的下级目录：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1529043334927.png" alt="1529043334927"></p><h3 id="3-2-2-依赖"><a href="#3-2-2-依赖" class="headerlink" title="3.2.2.依赖"></a>3.2.2.依赖</h3><p>给user-service中的pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目结构：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1529043450850.png" alt="1529043450850"></p><h3 id="3-2-2-编写代码"><a href="#3-2-2-编写代码" class="headerlink" title="3.2.2.编写代码"></a>3.2.2.编写代码</h3><p>在resources目录中添加一个application.yml属性文件,这里我们采用了yaml语法，而不是properties：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/itheima129</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.itheima.pojo</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.itheima:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>在<code>user-service</code>的<code>cn.itcast</code>包中新建一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.user.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>user-service</code>的<code>cn.itcast.user.pojo</code>包中新建一个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明id为自增长，并且自动回显id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName; <span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">// 密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;<span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;<span class="comment">// 性别，1男性，2女性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 出生日期</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;<span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updated;<span class="comment">// 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String note;<span class="comment">// 备注</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>user-service</code>的<code>cn.itcast.user.mapper</code>包中新建一个mapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>user-service</code>的<code>cn.itcast.user.service</code>包中新建一个Service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(UserMapper userMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMapper = userMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>user-service</code>的<code>cn.itcast.user.web</code>包中新建一个对外查询的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目结构：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1529043755485.png" alt="1529043755485"></p><h3 id="3-2-3-启动并测试："><a href="#3-2-3-启动并测试：" class="headerlink" title="3.2.3.启动并测试："></a>3.2.3.启动并测试：</h3><p>启动项目，访问接口：<a href="http://localhost:8081/user/7">http://localhost:8081/user/7</a></p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525593139364.png" alt="1525593139364"></p><h2 id="3-3-服务调用者"><a href="#3-3-服务调用者" class="headerlink" title="3.3.服务调用者"></a>3.3.服务调用者</h2><h3 id="3-3-1-创建工程"><a href="#3-3-1-创建工程" class="headerlink" title="3.3.1.创建工程"></a>3.3.1.创建工程</h3><p>与上面类似，这里不再赘述，需要注意的是，我们调用user-service的功能，因此不需要mybatis相关依赖了。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1529043818258.png" alt="1529043818258"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1529043876180.png" alt="1529043876180"></p><p>pom文件引入了web的starter依赖，而web的starter中会包含RestTemplate相关依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结构：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1529043945158.png" alt="1529043945158"></p><h3 id="3-3-2-远程调用"><a href="#3-3-2-远程调用" class="headerlink" title="3.3.2.远程调用"></a>3.3.2.远程调用</h3><p>首先在<code>consumer-demo</code>项目的<code>cn.itcast</code>包中新建一个启动类，并且注册一个<code>RestTemplate</code>的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"><span class="comment">// 注册RestTemplate的对象到Spring的容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>consumer-demo</code>的<code>cn.itcast.consumer.pojo</code>包中新建一个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName; <span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">// 密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;<span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;<span class="comment">// 性别，1男性，2女性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 出生日期</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;<span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updated;<span class="comment">// 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String note;<span class="comment">// 备注</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>consumer-demo</code>的<code>cn.itcast.consumer.web</code>包中新建一个controller。在controller中直接调用RestTemplate，远程访问user-service的服务接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://localhost:8081/user/&quot;</span> + id;</span><br><span class="line">        <span class="comment">// 调用RestTemplate的getForObject方法，指定url地址和返回值类型</span></span><br><span class="line">        User user = restTemplate.getForObject(url, User.class);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RestTemplate会向<code>http://localhost:8081/user/1</code>地址发起请求，并且得到响应的JSON数据。然后会将JSON数据反序列化为User类型。</p><p>项目结构：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533791573960.png" alt="1533791573960"></p><h3 id="3-3-3-启动测试"><a href="#3-3-3-启动测试" class="headerlink" title="3.3.3.启动测试"></a>3.3.3.启动测试</h3><p>因为我们没有配置端口，那么默认就是8080，我们访问：<a href="http://localhost:8080/consumer/8">http://localhost:8080/consumer/8</a></p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533792850467.png" alt="1533792850467"></p><p>一个简单的远程服务调用案例就实现了，调用链路如下：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20200526170520784.png" alt="image-20200526170520784"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210702145947763.png" alt="image-20210702145947763"></p><p>需求: 实现两台服务器之间数据交互</p><h2 id="3-4-有没有问题？"><a href="#3-4-有没有问题？" class="headerlink" title="3.4.有没有问题？"></a>3.4.有没有问题？</h2><p>简单回顾一下，刚才我们写了什么：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service：对外提供了查询用户的接口</span></span><br><span class="line"><span class="meta">consumer：通过RestTemplate访问`http</span>:<span class="string">//locahost:8081/user/&#123;id&#125;`接口，查询用户数据</span></span><br></pre></td></tr></table></figure><p>存在什么问题？</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">在consumer中，我们**把url地址硬编码到了代码中，不方便后期维护**</span></span><br><span class="line"><span class="meta">-</span> <span class="string">consumer需要**记忆user-service的地址，如果出现变更，可能得不到通知**，地址将失效</span></span><br><span class="line"><span class="meta">-</span> <span class="string">consumer**不清楚user-service的状态，服务宕机也不知道**</span></span><br><span class="line"><span class="meta">-</span> <span class="string">user-service**只有1台服务，不具备高可用性**</span></span><br><span class="line"><span class="meta">-</span> <span class="string">即便user-service形成集群，consumer还需自己实现负载均衡</span></span><br></pre></td></tr></table></figure><p>其实上面说的问题，概括一下就是分布式服务必然要面临的问题：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">服务管理（注册中心）</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">如何自动注册和发现</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">如何实现状态监管</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">服务如何实现负载均衡</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">服务如何解决容灾问题</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">服务如何实现统一配置</span></span><br></pre></td></tr></table></figure><p>以上的问题，我们都将在SpringCloud中得到答案。</p><p> <strong>服务器直接调用存在的问题和解决方案</strong>(注册中心+集群+心跳)</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210702153530268.png" alt="image-20210702153530268"></p><h1 id="4-初识SpringCloud"><a href="#4-初识SpringCloud" class="headerlink" title="4.初识SpringCloud"></a>4.初识SpringCloud</h1><p>微服务是一种架构方式，最终肯定需要技术架构去实施。</p><p>微服务的实现方式很多，但是最火的莫过于Spring Cloud了。为什么？</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">后台硬：作为Spring家族的一员，有整个Spring全家桶靠山，背景十分强大。</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">技术强：Spring作为Java领域的前辈，可以说是功力深厚。有强力的技术团队支撑，一般人还真比不了  </span></span><br><span class="line"><span class="meta">3-</span> <span class="string">群众基础好：可以说大多数程序员的成长都伴随着Spring框架，</span></span><br><span class="line"><span class="attr">试问：现在有几家公司开发不用Spring？SpringCloud与Spring的各个框架无缝整合，</span></span><br><span class="line"><span class="attr">对大家来说一切都是熟悉的配方，熟悉的味道。</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">使用方便：相信大家都体会到了SpringBoot给我们开发带来的便利，而SpringCloud完全支持SpringBoot的开发，用很少的配置就能完成微服务框架的搭建</span></span><br></pre></td></tr></table></figure><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1.简介"></a>4.1.简介</h2><p>SpringCloud是Spring旗下的项目之一，<a href="https://spring.io/projects/spring-cloud">官网地址：https://spring.io/projects/spring-cloud</a></p><p>Spring<strong>最擅长的就是集成</strong>，把世界上最好的框架拿过来，集成到自己的项目中。</p><p>SpringCloud也是一样，它将现在<strong>非常流行的一些技术整合到一起</strong>，实现了诸如：<strong>配置管理，服务发现，智能路由，负载均衡，熔断器，控制总线，集群状态</strong>等等功能。其主要涉及的组件包括：</p><p>Netflix：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">Eureka：注册中心 --&gt; consul , zookeeper ,nacos</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Zuul：服务网关 --&gt; spring cloud gateway</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Ribbon：负载均衡</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Feign：服务调用</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Hystix：熔断器</span></span><br><span class="line"><span class="meta">-</span> <span class="string">config: 配置中心---&gt;nacos</span></span><br><span class="line"><span class="meta">-</span> <span class="string">bus: 消息总线</span></span><br></pre></td></tr></table></figure><h2 id="4-2-版本"><a href="#4-2-版本" class="headerlink" title="4.2.版本"></a>4.2.版本</h2><p>SpringCloud的<strong>版本命名比较特殊</strong>，因为<strong>它不是一个组件，而是许多组件的集合</strong>，它的命名是以A到Z的为首字母的一些单词（其实是伦敦地铁站的名字）组成：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533782406077.png" alt="1533782406077"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20210702082348470.png" alt="image-20210702082348470"></p><p>我们在项目中，会是<strong>以Finchley的版本</strong>。</p><p>其中包含的组件，也都有各自的版本，如下表：</p><p>比如说<strong>：spring-cloud-aws组件在SpringCloud  Edgware.SR4 版本中有其自己的版本1.2.3.RELEASE</strong></p><table><thead><tr><th>Component</th><th>Edgware.SR4</th><th>Finchley.SR1</th><th>Finchley.BUILD-SNAPSHOT</th></tr></thead><tbody><tr><td>spring-cloud-aws</td><td>1.2.3.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-bus</td><td>1.3.3.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-cli</td><td>1.4.1.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-commons</td><td>1.3.4.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-contract</td><td>1.2.5.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-config</td><td>1.4.4.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-netflix</td><td>1.4.5.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-security</td><td>1.2.3.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-cloudfoundry</td><td>1.1.2.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-consul</td><td>1.3.4.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-sleuth</td><td>1.3.4.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-stream</td><td>Ditmars.SR4</td><td>Elmhurst.SR1</td><td>Elmhurst.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-zookeeper</td><td>1.2.2.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-boot</td><td>1.5.14.RELEASE</td><td>2.0.4.RELEASE</td><td>2.0.4.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-task</td><td>1.2.3.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-vault</td><td>1.1.1.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-gateway</td><td>1.0.2.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-openfeign</td><td></td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-function</td><td>1.0.0.RELEASE</td><td>1.0.0.RELEASE</td><td>1.0.1.BUILD-SNAPSHOT</td></tr></tbody></table><p>接下来，我们就一一学习SpringCloud中的重要组件。</p><h1 id="5-Eureka注册中心"><a href="#5-Eureka注册中心" class="headerlink" title="5.Eureka注册中心"></a>5.Eureka注册中心</h1><p>Eureka是Netflix公司出品，英文直译：<strong>发现了，找到了！</strong></p><h2 id="5-1-认识Eureka"><a href="#5-1-认识Eureka" class="headerlink" title="5.1.认识Eureka"></a>5.1.认识Eureka</h2><p>首先我们来解决第一问题，服务的管理。</p><blockquote><p>问题分析</p></blockquote><p>在刚才的案例中，user-service对外提供服务，需要对外暴露自己的地址。而consumer（调用者）需要记录服务提供者的地址。将来地址出现变更，还需要及时更新。这在服务较少的时候并不觉得有什么，但是在现在日益复杂的互联网环境，一个项目肯定会拆分出十几，甚至数十个微服务。此时如果<strong>还人为管理地址，不仅开发困难，将来测试、发布上线都会非常麻烦</strong>，这与DevOps的思想是背道而驰的。</p><blockquote><p>举例：网约车</p></blockquote><p>这就好比是 网约车出现以前，人们出门叫车只能叫出租车。一些私家车想做出租却没有资格，被称为黑车。而很多人想要约车，但是无奈出租车太少，不方便。私家车很多却不敢拦，而且满大街的车，谁知道哪个才是愿意载人的。一个想要，一个愿意给，就是缺少引子，缺乏管理啊。</p><p>此时滴滴这样的网约车平台出现了，所有想载客的私家车全部到滴滴注册，记录你的车型（服务类型），身份信息（联系方式）。这样提供服务的私家车，在滴滴那里都能找到，一目了然。</p><p>此时要叫车的人，只需要打开APP，输入你的目的地，选择车型（服务类型），滴滴自动安排一个符合需求的车到你面前，为你服务，完美！</p><blockquote><p>Eureka做什么？</p></blockquote><p>Eureka就好比是滴滴，<strong>负责管理、记录服务提供者的信息。服务调用者无需自己寻找服务，而是把自己的需求告诉Eureka，然后Eureka会把符合你需求的服务告诉你</strong>。</p><p>同时，服务提供方与Eureka之间通过<code>“心跳”</code>机制进行监控，当某个服务提供方出现问题，Eureka自然会把它从服务列表中剔除。</p><p>这就实现了服务的自动注册、发现、状态监控。</p><h2 id="5-2-原理图"><a href="#5-2-原理图" class="headerlink" title="5.2.原理图"></a>5.2.原理图</h2><blockquote><p>基本架构：</p></blockquote><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1548578752909.png" alt="1548578752909"></p><p>renewal：续约</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">Eureka-Server：就是服务注册中心（可以是一个集群），对外暴露自己的地址。</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">提供者：启动后向Eureka注册自己信息（地址，服务名称等），并且定期进行服务续约</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">消费者：服务调用方，会定期去Eureka拉取服务列表，然后使用负载均衡算法选出一个服务进行调用。</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">心跳(续约)：提供者定期通过http方式向Eureka刷新自己的状态</span></span><br></pre></td></tr></table></figure><h2 id="5-3-入门案例"><a href="#5-3-入门案例" class="headerlink" title="5.3.入门案例"></a>5.3.入门案例</h2><h3 id="5-3-1-编写EurekaServer"><a href="#5-3-1-编写EurekaServer" class="headerlink" title="5.3.1.编写EurekaServer"></a>5.3.1.编写EurekaServer</h3><p>接下来我们创建一个项目，启动一个EurekaServer：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1529060127090.png" alt="1529060127090"></p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1529060143421.png" alt="1529060143421"></p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">// 声明这个应用是一个EurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaServer.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment"># 应用名称，会在Eureka中作为服务的id标识（serviceId）</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer的地址，现在是自己的地址，如果是集群，需要写其它Server的地址。</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#不拉取服务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动服务，并访问：<a href="http://127.0.0.1:10086/">http://127.0.0.1:10086</a></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525604959508.png" alt="1525604959508"></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533793804268.png" alt="1533793804268"></p><p>总结一下搭建EurekaServer的流程如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1）引入EurekaServer依赖</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2）在启动类上添加@EnableEurekaServer注解</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3）在yaml文件中配置EurekaServer地址</span></span><br></pre></td></tr></table></figure><h3 id="5-3-2-服务注册"><a href="#5-3-2-服务注册" class="headerlink" title="5.3.2.服务注册"></a>5.3.2.服务注册</h3><p>注册服务：就是<strong>让服务提供者user-service把自己的信息注册到EurekaServer</strong>上，方便服务消费者去拉取。</p><p>流程如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1）引入eurekaClient依赖</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2）配置EurekaServer端的地址</span></span><br></pre></td></tr></table></figure><blockquote><p>我们在user-service中添加Eureka客户端依赖：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Eureka客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>修改user-service配置文件，指定eureka地址</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...略</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka/</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 或者：</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/itheima129</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span>  <span class="comment"># 服务的名称不能使用下划线</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.itheima.pojo</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.itheima:</span> <span class="string">debug</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 配置服务器ip地址</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 更倾向于使用ip,而不是host名</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;eureka.instance.ip-address&#125;:$&#123;server.port&#125;</span> <span class="comment"># 自定义实例的id</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这里我们添加了spring.application.name属性来指定应用名称，将来会作为服务的id使用。</li></ul><blockquote><p>重启项目，访问<a href="http://127.0.0.1:10086/eureka">Eureka监控页面</a>查看</p></blockquote><p>我们发现user-service服务已经注册成功了:</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1543548007606.png" alt="1543548007606"></p><h3 id="5-3-3-服务发现"><a href="#5-3-3-服务发现" class="headerlink" title="5.3.3.服务发现"></a>5.3.3.服务发现</h3><p>接下来我们修改consumer-demo，尝试<strong>从EurekaServer获取服务提供者user-service的真实IP和端口信息</strong>。</p><p>流程与服务提供者类似，只要知道eureka服务端地址即可：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1）引入eurekaClient依赖</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2）配置eureka服务端地址</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3）手动拉取服务提供者的地址</span></span><br></pre></td></tr></table></figure><p>1）添加依赖：</p><p>在consumer-demo中，修改pom文件，添加eureka的客户端依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Eureka客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）修改配置：</p><p>在consumer-demo中，修改application.yml，添加eureka地址信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span> <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-consumer</span> <span class="comment"># 给服务起名称</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 配置服务器ip地址</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 更倾向于使用ip,而不是host名</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;eureka.instance.ip-address&#125;:$&#123;server.port&#125;</span> <span class="comment"># 自定义实例的id</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3）服务拉取</p><p>在consumer-demo中，修改ConsumerController，用DiscoveryClient类的方法，<strong>根据服务名称，获取服务实例：</strong>然后获取服务提供者的 <strong>协议+ip+端口</strong>；注意，这个<strong>服务名称</strong>是服务提供方在配置文件（application.yml）向尤里克（Eureka）注册本服务信息时的服务名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 根据服务id(spring.application.name)，获取服务实例列表</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;user-service&quot;</span>);</span><br><span class="line">        <span class="comment">// 取出一个服务实例</span></span><br><span class="line">        ServiceInstance instance = instances.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 从实例中获取host和port，组成url</span></span><br><span class="line">        String url = String.format(<span class="string">&quot;http://%s:%s/user/%s&quot;</span>, instance.getHost(), instance.getPort(), id);</span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        User user = restTemplate.getForObject(url, User.class);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取服务器提供者信息</span></span><br><span class="line">ServiceInstance serviceInstance = instances.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取协议: http</span></span><br><span class="line">String scheme = serviceInstance.getScheme();</span><br><span class="line"><span class="comment">// 获取ip地址: 127.0.0.1</span></span><br><span class="line">String host = serviceInstance.getHost();</span><br><span class="line"><span class="comment">// 获取端口号: 8081</span></span><br><span class="line"><span class="keyword">int</span> port = serviceInstance.getPort();</span><br><span class="line"><span class="comment">// 通过restTemplate向User-service服务发起请求</span></span><br><span class="line"><span class="comment">//String url = &quot;http://localhost:8081/user/&quot;+id;</span></span><br><span class="line">String url = scheme+<span class="string">&quot;://&quot;</span>+host+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/user/&quot;</span>+id;</span><br><span class="line">System.out.println(url);</span><br><span class="line">User user = restTemplate.getForObject(url, User.class);</span><br></pre></td></tr></table></figure><p>4）Debug跟踪运行：</p><p>生成的URL：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533824658440.png" alt="1533824658440"></p><p>这里的ip是本机的局域网ip。</p><p>访问结果：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533824695239.png" alt="1533824695239"></p><h2 id="5-4-Eureka详解"><a href="#5-4-Eureka详解" class="headerlink" title="5.4.Eureka详解"></a>5.4.Eureka详解</h2><p>接下来我们详细讲解Eureka的原理及配置。</p><h3 id="5-4-1-基础架构"><a href="#5-4-1-基础架构" class="headerlink" title="5.4.1.基础架构"></a>5.4.1.基础架构</h3><p>Eureka架构中的三个核心角色：</p><ul><li><p><strong>1 服务注册中心</strong></p><p>Eureka的服务端应用，提供服务注册和发现功能，就是刚刚我们建立的eureka-server</p></li><li><p><strong>2 服务提供者</strong></p><p>提供服务的应用，可以是SpringBoot应用，也可以是其它任意技术实现，只要对外提供的是Rest风格服务即可。本例中就是我们实现的user-service</p></li><li><p><strong>3 服务消费者</strong></p><p>消费应用从注册中心获取服务列表，从而得知每个服务方的信息，知道去哪里调用服务方。本例中就是我们实现的consumer</p></li></ul><h3 id="5-4-2-高可用的Eureka-Server"><a href="#5-4-2-高可用的Eureka-Server" class="headerlink" title="5.4.2.高可用的Eureka Server"></a>5.4.2.高可用的Eureka Server</h3><p>Eureka Server即服务的注册中心，在刚才的案例中，我们只有一个EurekaServer，事实上<strong>EurekaServer也可以是一个集群，形成高可用的Eureka中心</strong>。</p><blockquote><p>服务同步</p></blockquote><p><strong>多个Eureka Server之间也会互相注册为服务</strong>（基于Eureka本身即是客户端又是服务端前提下），当<strong>服务提供者注册到Eureka Server集群中的某个节点时，该节点会把服务的信息同步给集群中的每个节点，从而实现高可用集群</strong>。因此，无论客户端访问到Eureka Server集群中的任意一个节点，都可以获取到完整的服务列表信息。</p><p>而作为客户端，需要把信息注册到每个Eureka中：</p><p> <img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/04.SpringCloud/resources/img/1533825644505.png" alt="1533825644505"></p><p><img src="F:/java/01-重要部分：2021基础就业/05阶段：服务框架/上海05-服务框架/04.SpringCloud/resources/img/image-20210702165845253.png" alt="image-20210702165845253"></p><p>如果有三个Eureka，则每一个EurekaServer都需要注册到其它几个Eureka服务中，例如：有三个分别为10086、10087则：</p><ul><li>10086要注册到10087和10088上</li><li>10087要注册到10086和10088上</li><li>10088要注册到10086和10087上</li></ul><blockquote><p>动手搭建高可用的EurekaServer</p></blockquote><p>我们假设要搭建两条EurekaServer的集群，端口分别为：10086和10087</p><p><strong>1）我们修改原来的EurekaServer配置：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment"># 端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment"># 应用名称，会在Eureka中显示</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 配置其他Eureka服务的地址列表，多个以“,”隔开</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10087/eureka/,http://127.0.0.1:10087/eureka/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2）再启动一台eureka服务</strong></p><p>注意：idea中一个应用不能启动两次，我们需要重新配置一个启动器：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20200526171911201.png" alt="image-20200526171911201"></p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533825083030.png" alt="1533825083030"></p><p>但是需要保证两个服务端口不同，因此要配置JVM参数，覆盖配置文件中的端口：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20200526172106032.png" alt="image-20200526172106032"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dserver.port=10087</span><br></pre></td></tr></table></figure><p>完成后如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20200526172142591.png" alt="image-20200526172142591"> </p><p>然后启动即可。</p><p><strong>或者</strong>仅仅是用来测试的话，也可以只修改配置文件的端口，然后直接启动另一台Eureka服务！</p><p>1 修改eureka服务配置文件,将eureka注册给彼此，然后启动：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10087</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment"># 不注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#不拉取服务</span></span><br></pre></td></tr></table></figure><p>2 然后再继续修改eureka同一个配置文件,将端口10087改成10086，将下面url10086改成10087，启动即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10087/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment"># 不注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#不拉取服务</span></span><br></pre></td></tr></table></figure><p><strong>3）启动测试：</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533825779695.png" alt="1533825779695"></p><p>注意:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 服务提供者需要将自己注册给每一台Eureka服务</span><br><span class="line"><span class="number">2</span> 服务消费者要连接每一台Eureka服务拉取服务提供者的ip地址</span><br><span class="line">    虽然经过上面配置之后eureka集群能将同步所有的服务提供方跟服务消费者都放到注册表中了，</span><br><span class="line">    但是如果服务提供方跟服务消费者只配置一台eureka的url，刚好那一台宕机了，那前面的euraka同步就没意义了</span><br><span class="line">    因此服务提供者要将自己注册给每一台Eureka服务，服务消费者要连接每一台Eureka服务拉取服务提供者的ip地址</span><br></pre></td></tr></table></figure><p>因此：</p><p><strong>4）Eureka客户端（服务提供者以及服务消费者）注册服务到集群</strong></p><p>因为EurekaServer不止一个，因此eureka的客户端配置服务端地址的时候，service-url参数需要变化。</p><p>你需要在user-service和consumer两个服务中修改eureka服务端地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址,多个地址以&#x27;,&#x27;隔开</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka,http://127.0.0.1:10087/eureka</span></span><br></pre></td></tr></table></figure><h3 id="5-4-3-Eureka客户端"><a href="#5-4-3-Eureka客户端" class="headerlink" title="5.4.3.Eureka客户端"></a>5.4.3.Eureka客户端</h3><p>服务提供者要向EurekaServer注册服务，并且完成服务续约等工作。</p><blockquote><p>1 服务注册</p></blockquote><p>服务提供者在启动时，会检测配置属性中的：<code>eureka.client.register-with-erueka=true</code>参数是否正确，事实上默认就是true。如果值确实为true，则会向EurekaServer发起一个Rest请求，并携带自己的元数据信息，Eureka Server会把这些信息保存到一个双层Map结构中。</p><ul><li>第一层Map的Key就是服务id，一般是配置中的<code>spring.application.name</code>属性</li><li>第二层Map的key是服务的实例id。一般host+ serviceId + port，例如：<code>locahost:user-service:8081</code></li><li>值则是服务的实例对象，也就是说一个服务，可以同时启动多个不同实例，形成集群。</li></ul><p>user-service默认注册时使用的是主机名，如果我们想用ip进行注册，可以在user-service的application.yml添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># ip地址</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 更倾向于使用ip，而不是host名</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;eureka.instance.ip-address&#125;:$&#123;server.port&#125;</span> <span class="comment"># 自定义实例的id</span></span><br></pre></td></tr></table></figure><blockquote><p>2 服务续约</p></blockquote><p>在注册服务完成以后，<strong>服务提供者会维持一个心跳</strong>（定时向EurekaServer发起Rest请求），告诉EurekaServer：“我还活着”。这个我们称为服务的续约（renewal）；</p><p>有两个重要参数可以修改服务续约的行为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><ul><li>lease-renewal-interval-in-seconds：服务续约(renew)的间隔，默认为30秒</li><li>lease-expiration-duration-in-seconds：服务失效时间，默认值90秒</li></ul><p>也就是说，<strong>默认情况下每个30秒服务会向注册中心发送一次心跳，证明自己还活着。如果超过90秒没有发送心跳，EurekaServer就会认为该服务宕机，会从服务列表中移除</strong>，这两个值在生产环境不要修改，默认即可。</p><blockquote><p>3 获取服务列表</p></blockquote><p>当服务消费者启动是，会检测<code>eureka.client.fetch-registry=true</code>参数的值，如果为true，则会从Eureka Server服务的列表只读备份，然后缓存在本地。<strong>并且<code>每隔30秒</code>会重新获取并更新数据</strong>。我们可以通过下面的参数来修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><h3 id="5-4-5-服务下线、失效剔除和自我保护"><a href="#5-4-5-服务下线、失效剔除和自我保护" class="headerlink" title="5.4.5.服务下线、失效剔除和自我保护"></a>5.4.5.服务下线、失效剔除和自我保护</h3><blockquote><p>服务下线</p></blockquote><p>当服务进行正常关闭操作时，它会触发一个服务下线的REST请求给Eureka Server，告诉服务注册中心：“我要下线了”。服务中心接受到请求之后，将该服务置为下线状态。</p><blockquote><p>失效剔除</p></blockquote><p>有时我们的服务可能由于内存溢出或网络故障等原因使得服务不能正常的工作，而服务注册中心并未收到“服务下线”的请求。相对于服务提供者的“服务续约”操作，服务注册中心在启动时会创建一个定时任务，默认每隔一段时间（默认为60秒）将当前清单中超时（默认为90秒）没有续约的服务剔除，这个操作被称为失效剔除。</p><p>可以通过<code>eureka.server.eviction-interval-timer-in-ms</code>参数对其进行修改，单位是毫秒。</p><blockquote><p>自我保护</p></blockquote><p>我们关停一个服务，就会在Eureka面板看到一条警告：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525618396076.png" alt="1525618396076"></p><p>这是触发了Eureka的自我保护机制。当服务未按时进行心跳续约时，Eureka会统计服务实例最近15分钟心跳续约的比例是否低于了85%。在生产环境下，因为网络延迟等原因，心跳失败实例的比例很有可能超标，但是此时就把服务剔除列表并不妥当，因为服务可能没有宕机。Eureka在这段时间内不会剔除任何服务实例，直到网络恢复正常。生产环境下这很有效，保证了大多数服务依然可用，不过也有可能获取到失败的服务实例，因此服务调用者必须做好服务的失败容错。</p><p>我们可以通过下面的配置来关停自我保护：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 关闭自我保护模式（缺省为打开）</span></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">服务的注册和发现都是可控制的，可以关闭也可以开启。默认都是开启</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">注册后需要心跳，心跳周期默认30秒一次，超过90秒没发认为宕机</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">服务拉取默认30秒拉取一次</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">Eureka每个60秒会剔除标记为宕机的服务</span></span><br><span class="line"><span class="meta">5-</span> <span class="string">Eureka会有自我保护，当心跳失败比例超过阈值，那么开启自我保护，不再剔除服务。</span></span><br><span class="line"><span class="meta">6-</span> <span class="string">Eureka高可用就是多台Eureka互相注册在对方上</span></span><br></pre></td></tr></table></figure><h1 id="6-负载均衡Ribbon"><a href="#6-负载均衡Ribbon" class="headerlink" title="6.负载均衡Ribbon"></a>6.负载均衡Ribbon</h1><p>在刚才的案例中，我们<strong>启动了一个user-service</strong>，然后通过DiscoveryClient来获取服务实例信息，然后获取ip和端口来访问。</p><p>但是实际环境中，我们往往会<strong>开启很多个user-service的集群</strong>。此时我们获取的服务列表中就会有多个，到底该访问哪一个呢？</p><p>一般这种情况下我们就需要<strong>编写负载均衡算法，在多个实例列表中进行选择</strong>。</p><p>不过Eureka中已经帮我们集成了<strong>负载均衡组件：Ribbon</strong>，简单修改代码即可使用。</p><p>什么是Ribbon：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525619257397.png" alt="1525619257397"></p><p>接下来，我们就来使用Ribbon实现负载均衡。</p><h2 id="6-1-启动两个服务实例"><a href="#6-1-启动两个服务实例" class="headerlink" title="6.1.启动两个服务实例"></a>6.1.启动两个服务实例</h2><p>首先我们启动两个user-service实例，一个8081，一个8082。启动方式参考之前的高可用eureka。</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533826535457.png" alt="1533826535457"></p><p>Eureka监控面板：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533826564383.png" alt="1533826564383"></p><h2 id="6-2-开启负载均衡"><a href="#6-2-开启负载均衡" class="headerlink" title="6.2.开启负载均衡"></a>6.2.开启负载均衡</h2><p>接下来，消费者会拉取到两个user-service的实例，需要利用负载均衡算法，从中选择一个。</p><p>我们<strong>修改<code>consumeer-demo</code>中的代码，实现负载均衡</strong>。</p><p>因为<strong>Eureka中已经集成了Ribbon，所以我们无需引入新的依赖</strong>。直接修改代码：</p><p>(1) <strong>在<code>consumeer-demo</code>的启动类中，<code>RestTemplate</code>的配置方法上添加<code>@LoadBalanced</code>注解</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)  修改<code>consumeer-demo</code>中的ConsumerController中的调用方式，不再手动获取ip和端口，而是直接通过服务名称调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    String url = <span class="string">&quot;http://user-service/user/&quot;</span> + id;</span><br><span class="line">    User user = restTemplate.getForObject(url, User.class);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问页面，查看结果：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1533824695239.png" alt="1533824695239"></p><p>完美！</p><h2 id="6-3-请求链路分析"><a href="#6-3-请求链路分析" class="headerlink" title="6.3.请求链路分析"></a>6.3.请求链路分析</h2><p>此时，用户请求的链路是这样的：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/image-20200527155857921.png" alt="image-20200527155857921"></p><p>流程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1）用户发送请求到consumer-service</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2）consumer-service根据服务id（user-service）去eureka拉取服务列表</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3）eureka返回服务列表信息到consumer-service，consumer缓存服务列表，这样下次请求就无需拉取了</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4）利用Ribbon的负载均衡策略，从列表中选择一个服务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">5）向选中的服务发送请求</span></span><br></pre></td></tr></table></figure><h2 id="6-4-源码跟踪"><a href="#6-4-源码跟踪" class="headerlink" title="6.4.源码跟踪"></a>6.4.源码跟踪</h2><p>为什么我们<strong>只输入了服务提供者名称就可以访问了呢</strong>？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p>我们进行源码跟踪：</p><h3 id="1）LoadBalancerIntercepor"><a href="#1）LoadBalancerIntercepor" class="headerlink" title="1）LoadBalancerIntercepor"></a>1）LoadBalancerIntercepor</h3><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525620483637.png" alt="1525620483637"></p><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p><ul><li><code>request.getURI()</code>：获取请求uri，本例中就是 <a href="http://user-service/user/8">http://user-service/user/8</a></li><li><code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>user-service</code></li><li><code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。</li></ul><p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p><h3 id="2）LoadBalancerClient"><a href="#2）LoadBalancerClient" class="headerlink" title="2）LoadBalancerClient"></a>2）LoadBalancerClient</h3><p>继续跟入execute方法：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525620787090.png" alt="1525620787090"></p><p>代码是这样的：</p><ul><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li><li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是8081：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525620835911.png" alt="1525620835911"></p><p>果然实现了负载均衡。</p><h2 id="6-5-负载均衡策略"><a href="#6-5-负载均衡策略" class="headerlink" title="6.5.负载均衡策略"></a>6.5.负载均衡策略</h2><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法:</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525620835911.png" alt="1525620835911"></p><p>我们继续跟入：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1544361421671.png" alt="1544361421671"></p><p>继续跟踪源码chooseServer方法，发现这么一段代码：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525622652849.png" alt="1525622652849"></p><p>我们看看这个rule是谁：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525622699666.png" alt="1525622699666"></p><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525622754316.png" alt="1525622754316"></p><p>这不就是轮询的意思嘛。</p><p>我们注意到，这个类其实是实现了接口IRule的，查看一下：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525622817451.png" alt="1525622817451"></p><p>定义负载均衡的规则接口。</p><p>它有以下实现：</p><p> <img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1525622876842.png" alt="1525622876842"></p><p>SpringBoot也帮我们提供了修改负载均衡规则的配置入口：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p>格式是：<code>&#123;服务名称&#125;.ribbon.NFLoadBalancerRuleClassName</code>，值就是IRule的实现类。</p><p>其它复杂均衡策略说明：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略：<br>（1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。注意：可以通过修改配置loadbalancer.<clientName>.connectionFailureCountThreshold来修改连接失败多少次之后被设置为短路状态。默认是3次。<br>（2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td>ZoneAvoidanceRule</td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。</td></tr><tr><td>BestAvailableRule</td><td>忽略哪些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>Retry</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>负载均衡的源码流程图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/04-SpringCloud/1551316355275.png" alt="1551316355275"></p><h2 id="6-6-懒加载"><a href="#6-6-懒加载" class="headerlink" title="6.6.懒加载"></a>6.6.懒加载</h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建负载均衡客户端。往往会出现超时。如果需要采用饥饿加载，即项目启动即创建，可以这样配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">user-service</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-学习目标&quot;&gt;&lt;a href=&quot;#0-学习目标&quot; class=&quot;headerlink&quot; title=&quot;0.学习目标&quot;&gt;&lt;/a&gt;0.学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;了解系统架构的演变&lt;/li&gt;
&lt;li&gt;了解RPC与Http的区别&lt;ul&gt;
&lt;li&gt;基于RPC或H</summary>
      
    
    
    
    <category term="SpringCloud" scheme="http://example.com/categories/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://example.com/tags/SpringCloud/"/>
    
    <category term="Eureka" scheme="http://example.com/tags/Eureka/"/>
    
    <category term="Ribbon" scheme="http://example.com/tags/Ribbon/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch高级</title>
    <link href="http://example.com/2022/05/17/ElasticSearch%E9%AB%98%E7%BA%A7/"/>
    <id>http://example.com/2022/05/17/ElasticSearch%E9%AB%98%E7%BA%A7/</id>
    <published>2022-05-17T08:32:03.000Z</published>
    <updated>2022-05-17T08:37:27.084Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Select</span> <span class="string">* from 表名 where 分组前条件 group by 分组字段 having 分组后筛选条件</span></span><br><span class="line"><span class="attr">1</span> <span class="string">where: </span></span><br><span class="line">    <span class="attr">where用在分组前,对分组前的数据进行筛选</span></span><br><span class="line">    <span class="attr">where后不能使用聚合函数</span></span><br><span class="line">    <span class="attr">2</span> <span class="string">having:</span></span><br><span class="line">    <span class="attr">having用在分组后,对分组后的数据进行筛选</span></span><br><span class="line">    <span class="attr">having后可以使用聚合函数</span></span><br><span class="line">    <span class="attr">3</span> <span class="string">聚合函数:</span></span><br><span class="line">    <span class="attr">count</span></span><br><span class="line">    <span class="attr">max</span></span><br><span class="line">    <span class="attr">min</span></span><br><span class="line">    <span class="attr">sum</span></span><br><span class="line">    <span class="attr">avg</span></span><br><span class="line"></span><br><span class="line"><span class="meta">根据性别分组</span>:  <span class="string">（前者为mysql概念，后者为es概念）</span></span><br><span class="line"><span class="meta">男组</span> <span class="string">- 男桶</span></span><br><span class="line"><span class="meta">女组</span> <span class="string">- 女桶</span></span><br><span class="line"><span class="meta">对分组后的数据进行聚合</span>: <span class="string">进行统计</span></span><br><span class="line"><span class="meta">聚合函数</span> <span class="string">- 度量 </span></span><br><span class="line"><span class="meta">聚合函数</span>: <span class="string">统计当前组中的数据信息</span></span><br><span class="line"><span class="meta">度量</span>: <span class="string">测量桶中的数据信息</span></span><br></pre></td></tr></table></figure><h1 id="1-ES的聚合"><a href="#1-ES的聚合" class="headerlink" title="1.ES的聚合"></a>1.ES的聚合</h1><p>聚合（aggregations）可以让我们极其方便的实现对数据的统计、分析。例如：</p><ul><li>什么品牌的手机最受欢迎？</li><li>这些手机的平均价格、最高价格、最低价格？</li><li>这些手机每月的销售情况如何？</li></ul><p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现近<strong>实时搜索</strong>效果。</p><p>要注意：<strong>参与聚合的字段，必须不能分词</strong>。</p><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><p>Elasticsearch中的聚合，包含多种类型，最常用的两种，一个叫<code>桶</code>，一个叫<code>度量</code>：</p><blockquote><p><strong>桶（bucket）</strong></p></blockquote><p>桶的作用，是按照某种方式对数据进行分组，每一组数据在ES中称为一个<code>桶</code>，例如我们根据国籍对人划分，可以得到<code>中国桶</code>、<code>英国桶</code>，<code>日本桶</code>……或者我们按照年龄段对人进行划分：0-10,10-20,20-30,30-40等。</p><p>Elasticsearch中提供的划分桶的方式有很多：</p><ul><li>Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组</li><li>Histogram Aggregation：根据数值阶梯分组，与日期类似，需要知道分组的间隔（interval）</li><li>Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组，类似数据库group by </li><li>Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组</li><li>……</li></ul><p>综上所述，我们发现bucket aggregations 只负责对数据进行分组，并不进行计算，因此往往bucket中往往会嵌套另一种聚合：metrics aggregations即度量</p><blockquote><p><strong>度量（metrics）</strong></p></blockquote><p>分组完成以后，我们一般会对组中的数据进行聚合运算，例如求平均值、最大、最小、求和等，这些在ES中称为<code>度量</code></p><p>比较常用的一些度量聚合方式：</p><ul><li>Avg Aggregation：求平均值</li><li>Max Aggregation：求最大值</li><li>Min Aggregation：求最小值</li><li>Percentiles Aggregation：求百分比</li><li>Stats Aggregation：同时返回avg、max、min、sum、count等</li><li>Sum Aggregation：求和</li><li>Top hits Aggregation：求前几</li><li>Value Count Aggregation：求总数</li><li>……</li></ul><p>为了测试聚合，我们先批量导入一些数据</p><p>创建索引：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT /car</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;color&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;make&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在ES中，需要进行聚合、排序、过滤的字段其处理方式比较特殊，因此**不能被分词，必须使用<code>keyword</code>或<code>数值类型</code>**。这里我们将color和make这两个文字类型的字段设置为keyword类型，这个类型不会被分词，将来就可以参与聚合</p><p>导入数据，这里是采用批处理的API，大家直接复制到kibana运行即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /car/_bulk</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;price&quot;</span> : <span class="number">10000</span>, <span class="attr">&quot;color&quot;</span> : <span class="string">&quot;红&quot;</span>, <span class="attr">&quot;make&quot;</span> : <span class="string">&quot;本田&quot;</span>, <span class="attr">&quot;sold&quot;</span> : <span class="string">&quot;2014-10-28&quot;</span> &#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;price&quot;</span> : <span class="number">20000</span>, <span class="attr">&quot;color&quot;</span> : <span class="string">&quot;红&quot;</span>, <span class="attr">&quot;make&quot;</span> : <span class="string">&quot;本田&quot;</span>, <span class="attr">&quot;sold&quot;</span> : <span class="string">&quot;2014-11-05&quot;</span> &#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;price&quot;</span> : <span class="number">30000</span>, <span class="attr">&quot;color&quot;</span> : <span class="string">&quot;绿&quot;</span>, <span class="attr">&quot;make&quot;</span> : <span class="string">&quot;福特&quot;</span>, <span class="attr">&quot;sold&quot;</span> : <span class="string">&quot;2014-05-18&quot;</span> &#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;price&quot;</span> : <span class="number">15000</span>, <span class="attr">&quot;color&quot;</span> : <span class="string">&quot;蓝&quot;</span>, <span class="attr">&quot;make&quot;</span> : <span class="string">&quot;丰田&quot;</span>, <span class="attr">&quot;sold&quot;</span> : <span class="string">&quot;2014-07-02&quot;</span> &#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;price&quot;</span> : <span class="number">12000</span>, <span class="attr">&quot;color&quot;</span> : <span class="string">&quot;绿&quot;</span>, <span class="attr">&quot;make&quot;</span> : <span class="string">&quot;丰田&quot;</span>, <span class="attr">&quot;sold&quot;</span> : <span class="string">&quot;2014-08-19&quot;</span> &#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;price&quot;</span> : <span class="number">20000</span>, <span class="attr">&quot;color&quot;</span> : <span class="string">&quot;红&quot;</span>, <span class="attr">&quot;make&quot;</span> : <span class="string">&quot;本田&quot;</span>, <span class="attr">&quot;sold&quot;</span> : <span class="string">&quot;2014-11-05&quot;</span> &#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;price&quot;</span> : <span class="number">80000</span>, <span class="attr">&quot;color&quot;</span> : <span class="string">&quot;红&quot;</span>, <span class="attr">&quot;make&quot;</span> : <span class="string">&quot;宝马&quot;</span>, <span class="attr">&quot;sold&quot;</span> : <span class="string">&quot;2014-01-01&quot;</span> &#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;price&quot;</span> : <span class="number">25000</span>, <span class="attr">&quot;color&quot;</span> : <span class="string">&quot;蓝&quot;</span>, <span class="attr">&quot;make&quot;</span> : <span class="string">&quot;福特&quot;</span>, <span class="attr">&quot;sold&quot;</span> : <span class="string">&quot;2014-02-12&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-聚合为桶"><a href="#1-2-聚合为桶" class="headerlink" title="1.2 聚合为桶"></a>1.2 聚合为桶</h2><p>首先，我们按照 汽车的颜色<code>color来</code>划分<code>桶</code>，按照颜色分桶，最好是使用TermAggregation类型，按照颜色的名称来分桶。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /car/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span> : &#123; </span><br><span class="line">        <span class="attr">&quot;popular_colors&quot;</span> : &#123; </span><br><span class="line">            <span class="attr">&quot;terms&quot;</span> : &#123; </span><br><span class="line">              <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;color&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>size： 查询条数，这里设置为0，因为我们不关心搜索到的数据 ，只关心聚合结果，提高效率</li><li>aggs：声明这是一个聚合查询，是aggregations的缩写<ul><li>popular_colors：给这次聚合起一个名字，可任意指定。<ul><li>terms：聚合的类型，这里选择terms，是根据词条内容（这里是颜色）划分<ul><li>field：划分桶时依赖的字段</li></ul></li></ul></li></ul></li></ul><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span>: <span class="number">33</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;popular_colors&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;doc_count_error_upper_bound&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;sum_other_doc_count&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;红&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;绿&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;蓝&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hits：查询结果为空，因为我们设置了size为0</li><li>aggregations：聚合的结果</li><li>popular_colors：我们定义的聚合名称</li><li>buckets：查找到的桶，每个不同的color字段值都会形成一个桶<ul><li>key：这个桶对应的color字段的值</li><li>doc_count：这个桶中的文档数量</li></ul></li></ul><p>通过聚合的结果我们发现，目前红色的小车比较畅销！</p><h2 id="1-3-桶内度量"><a href="#1-3-桶内度量" class="headerlink" title="1.3 桶内度量"></a>1.3 桶内度量</h2><p>前面的例子告诉我们每个桶里面的文档数量，这很有用。 但通常，我们的应用需要提供更复杂的文档度量。 例如，每种颜色汽车的平均价格是多少？</p><p>因此，我们需要告诉Elasticsearch<code>使用哪个字段</code>，<code>使用何种度量方式</code>进行运算，这些信息要嵌套在<code>桶</code>内，<code>度量</code>的运算会基于<code>桶</code>内的文档进行</p><p>现在，我们为刚刚的聚合结果添加 求价格平均值的度量：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /car/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span> : &#123; </span><br><span class="line">        <span class="attr">&quot;popular_colors&quot;</span> : &#123; </span><br><span class="line">            <span class="attr">&quot;terms&quot;</span> : &#123; </span><br><span class="line">              <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;color&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;avg_price&quot;</span>: &#123; </span><br><span class="line">                   <span class="attr">&quot;avg&quot;</span>: &#123;</span><br><span class="line">                      <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span> </span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>aggs：我们在上一个aggs(popular_colors)中添加新的aggs。可见度量也是一个聚合</li><li>avg_price：聚合的名称</li><li>avg：度量的类型，这里是求平均值</li><li>field：度量运算的字段</li></ul><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;popular_colors&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;doc_count_error_upper_bound&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;sum_other_doc_count&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span> : <span class="string">&quot;红&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> : <span class="number">4</span>,</span><br><span class="line">          <span class="attr">&quot;avg_price&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span> : <span class="number">32500.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span> : <span class="string">&quot;绿&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;avg_price&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span> : <span class="number">21000.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span> : <span class="string">&quot;蓝&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;avg_price&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span> : <span class="number">20000.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到每个桶中都有自己的<code>avg_price</code>字段，这是度量聚合的结果</p><h2 id="1-4-桶内嵌套桶"><a href="#1-4-桶内嵌套桶" class="headerlink" title="1.4 桶内嵌套桶"></a>1.4 桶内嵌套桶</h2><p>刚刚的案例中，我们在桶内嵌套度量运算。事实上桶不仅可以嵌套运算， 还可以再嵌套其它桶。也就是说在每个分组中，再分更多组。</p><p>比如：我们想统计每种颜色的汽车中，分别属于哪个制造商，按照<code>make</code>字段再进行分桶</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /car/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span> : &#123; </span><br><span class="line">        <span class="attr">&quot;popular_colors&quot;</span> : &#123; </span><br><span class="line">            <span class="attr">&quot;terms&quot;</span> : &#123; </span><br><span class="line">              <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;color&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;avg_price&quot;</span>: &#123; </span><br><span class="line">                   <span class="attr">&quot;avg&quot;</span>: &#123;</span><br><span class="line">                      <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span> </span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;maker&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;terms&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;field&quot;</span>:<span class="string">&quot;make&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>原来的color桶和avg计算我们不变</li><li>maker：在嵌套的aggs下新添一个桶，叫做maker</li><li>terms：桶的划分类型依然是词条</li><li>filed：这里根据make字段进行划分</li></ul><p>部分结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span>: <span class="number">16</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;popular_colors&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;doc_count_error_upper_bound&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;sum_other_doc_count&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;红&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">&quot;maker&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;doc_count_error_upper_bound&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;sum_other_doc_count&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;buckets&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;本田&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span>: <span class="number">3</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;宝马&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span>: <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="number">32500</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;绿&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;maker&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;doc_count_error_upper_bound&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;sum_other_doc_count&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;buckets&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;丰田&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span>: <span class="number">1</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;福特&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span>: <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="number">21000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;蓝&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;maker&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;doc_count_error_upper_bound&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;sum_other_doc_count&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;buckets&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;丰田&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span>: <span class="number">1</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;福特&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span>: <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="number">20000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们可以看到，新的聚合<code>maker</code>被嵌套在原来每一个<code>color</code>的桶中。</li><li>每个颜色下面都根据 <code>make</code>字段进行了分组</li><li>我们能读取到的信息：<ul><li>红色车共有4辆</li><li>红色车的平均售价是 $32，500 美元。</li><li>其中3辆是 Honda 本田制造，1辆是 BMW 宝马制造。</li></ul></li></ul><h1 id="2-ES集群"><a href="#2-ES集群" class="headerlink" title="2.ES集群"></a>2.ES集群</h1><p>我们之前安装的是单机的ES，线上部署肯定不能只用一台，因为<strong>一旦服务宕机，整个搜索服务就不可用</strong>了。因此必须使用集群来解决。</p><p>那么问题来了：什么是集群呢？</p><h2 id="2-1-什么是集群"><a href="#2-1-什么是集群" class="headerlink" title="2.1.什么是集群"></a>2.1.什么是集群</h2><p>来看下维基百科对集群的介绍：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/1543286678122.png" alt="1543286678122"></p><p>集群是==一组计算机==高度紧密协作，完成计算工作。其中的<strong>每个计算机称为一个节点</strong>。根据这些计算机的协作方式不同或者目的不同，我们将集群分成三类：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1 高可用集群（宕机时可替代节点）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2 负载均衡集群（处理高并发）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3 科学计算集群（分布式处理，按照服务分为不同的节点）</span></span><br></pre></td></tr></table></figure><p>上述几种集群方式并非必须独立使用，我们在<strong>系统架构时经常会组合使用</strong>。</p><h3 id="2-1-1-高可用集群"><a href="#2-1-1-高可用集群" class="headerlink" title="2.1.1 高可用集群"></a>2.1.1 高可用集群</h3><p>High availability Cluster高可用群集，简称HAC。其设计思想是<strong>为了避免出现单点故障问题，在故障时可以==快速恢复，快速继续提供服务</strong>==。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/1543287433625.png" alt="1543287433625"></p><p>如图所示，集群中两台计算机node01和node02，两者共享资源，处理业务也基本一致，互为==主从==。当node01工作时，node02就处于待命状态。所有业务在Node01上运行，若发生故障服务和资源会转移到Node02上。</p><p>这种架构保证了服务的高可用，但是闲置的节点是对资源的一种浪费。</p><h3 id="2-1-2-负载均衡集群"><a href="#2-1-2-负载均衡集群" class="headerlink" title="2.1.2 负载均衡集群"></a>2.1.2 负载均衡集群</h3><p>Load Balancing负载均衡，<strong>集群中的每一台计算机都来完成相同业务，不分主次</strong>。当用户请求到达时，通过某种算法，让请求均衡的分发到集群中的每个节点，充分利用每个节点的资源。如图所示：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/1543287806342.png" alt="1543287806342"></p><p>因为<strong>每个节点业务相同</strong>，如果某个节点出现故障，只需要把请求分发到其它节点即可。</p><h3 id="2-1-3-科学计算集群"><a href="#2-1-3-科学计算集群" class="headerlink" title="2.1.3 科学计算集群"></a>2.1.3 科学计算集群</h3><p>因为硬件设备的限制，单台计算机的处理性能是有上限的，如果<strong>计算需要的资源超过了单台计算机的能力</strong>，该怎么办呢？此时就可以使用科学计算集群。</p><p>我们<strong>把复杂任务拆分成一个个小的子任务</strong>，然后分配到集群中的不同节点上完成，最后再把计算结果汇总。这样大量低廉的PC机互联起来，组成一个”超级计算机”以解决复杂的计算任务。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/1543288401040.png" alt="1543288401040"></p><p>这样的方式也称为==<strong>分布式运算或者分布式集群</strong>==，集群中的每个节点完成==<strong>不同任务</strong>==。</p><h2 id="2-2-WEB应用的集群模式"><a href="#2-2-WEB应用的集群模式" class="headerlink" title="2.2.WEB应用的集群模式"></a>2.2.WEB应用的集群模式</h2><p>上述计算机协作的集群方式任何领域都可以使用，在web开发中也是如此，不过有一些细节的不同。我们以一个电商网站为例，看看几种架构方式：</p><h3 id="2-2-1-单体应用"><a href="#2-2-1-单体应用" class="headerlink" title="2.2.1 单体应用"></a>2.2.1 单体应用</h3><p>所有业务在一个系统中完成：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104114208435.png" alt="image-20200104114208435"></p><p>出现的问题：</p><ul><li>系统庞大，功能耦合，难以维护</li><li>并发能力差，容易出现单点故障</li><li>无法针对不同功能进行优化</li></ul><h3 id="2-2-2-分布式架构"><a href="#2-2-2-分布式架构" class="headerlink" title="2.2.2 分布式架构"></a>2.2.2 分布式架构</h3><p>按照上面的分布式集群概念，集群中的每个节点完成不同业务。在web开发中也是如此，我们把完整系统进行拆分，形成独立系统，然后部署到不同的tomcat节点，不同节点通过网络通信，相互协作。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104114653959.png" alt="image-20200104114653959"></p><p>这样就将复杂系统细分，降低了业务间的耦合，但是却带来了另一个问题，就是单个节点故障会导致整个系统不完整。为了保证高可用，还需要对集群做备份，实现负载均衡。</p><h3 id="2-2-3-高可用分布式集群架构"><a href="#2-2-3-高可用分布式集群架构" class="headerlink" title="2.2.3 高可用分布式集群架构"></a>2.2.3 高可用分布式集群架构</h3><p>为了解决上面所述的单点故障问题，我们可以为分布式系统中的每个节点都<strong>部署负载均衡节点</strong>，即：每个业务系统都有一个负载均衡的小集群。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104115507599.png" alt="image-20200104115507599"></p><h2 id="2-3-ElasticSearch的集群"><a href="#2-3-ElasticSearch的集群" class="headerlink" title="2.3.ElasticSearch的集群"></a>2.3.ElasticSearch的集群</h2><p>单点的elasticsearch存在哪些可能出现的问题呢？</p><ul><li>单台机器<strong>存储容量有限</strong></li><li>单服务器容易出现<strong>单点故障，无法实现高可用</strong></li><li>单服务的<strong>并发处理能力有限</strong></li></ul><p>所以，为了应对这些问题，我们需要<strong>对elasticsearch搭建集群</strong></p><h3 id="2-3-1-数据分片"><a href="#2-3-1-数据分片" class="headerlink" title="2.3.1.数据分片"></a>2.3.1.数据分片</h3><p>首先，我们面临的第一个问题就是数据量太大，单点存储量有限的问题。</p><p>我们可以把数据拆分成多份，每一份存储到不同机器节点（node），从而实现减少每个节点数据量的目的。这就是数据的分布式存储，也叫做：<code>数据分片（Shard）</code>。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104124440086.png" alt="image-20200104124440086"></p><p>此处，我们把数据分成3片：shard0、shard1、shard2</p><h3 id="2-3-2-数据备份"><a href="#2-3-2-数据备份" class="headerlink" title="2.3.2.数据备份"></a>2.3.2.数据备份</h3><p>数据分片解决了海量数据存储的问题，但是如果出现单点故障，那么分片数据就不再完整，这又该如何解决呢？</p><p>没错，就像大家为了备份手机数据，会额外存储一份到移动硬盘一样。我们可以给每个分片数据进行备份，存储到其它节点，防止数据丢失，这就是数据备份，也叫<code>数据副本（replica）</code>。</p><p>数据备份可以保证高可用，但是每个分片备份一份，所需要的节点数量就会翻一倍，成本实在是太高了！</p><p>为了在高可用和成本间寻求平衡，我们可以这样做：</p><ul><li>首先对数据分片，存储到不同节点</li><li>然后对每个分片进行备份，放到对方节点，<strong>完成互相备份</strong></li></ul><p>这样可以大大减少所需要的服务节点数量，如图，我们以3分片，每个分片备份一份为例：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104124551912.png" alt="image-20200104124551912"></p><p>现在，每个分片都有1个备份，存储在3个节点：</p><ul><li>node0：保存了分片0和1</li><li>node1：保存了分片0和2</li><li>node2：保存了分片1和2</li></ul><h2 id="2-4-搭建集群"><a href="#2-4-搭建集群" class="headerlink" title="2.4.搭建集群"></a>2.4.搭建集群</h2><p>1 下载的es压缩文件</p><p>2  解压缩压缩包（解压缩即安装）</p><p>3 修改占用内存: config/jvm.options文件（一定要改，将1g改成256M，否则搞崩你的电脑）<br>    -Xms256m<br>    -Xmx256m</p><p>4 将中文分词器插件相关文件复制到plugins目录下。</p><p>4 进入ElasticSearch的bin目录：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104121859074.png" alt="image-20200104121859074"> </p><p>5 然后打开<strong>3个控制台</strong>，分别输入下面的3个指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># node0指令：</span><br><span class="line">elasticsearch.bat -E node.name=node0 -E cluster.name=elastic -E path.data=node0_data</span><br><span class="line"># node1指令：</span><br><span class="line">elasticsearch.bat -E node.name=node1 -E cluster.name=elastic -E path.data=node1_data</span><br><span class="line"># node2指令：</span><br><span class="line">elasticsearch.bat -E node.name=node2 -E cluster.name=elastic -E path.data=node2_data</span><br></pre></td></tr></table></figure><p>6 命令解释：</p><ul><li><code>elasticsearch.bat</code>：运行elasticsearch.bat文件</li><li><code> -E node.name</code>：<code>-E</code>是环境参数，node.name是指定节点名称</li><li><code>cluster.name</code>：指定集群名称</li><li><code>path.data</code>：指定数据目录地址，相对路径是相对于ElasticSearch的安装目录</li></ul><p>打开的三个es，端口号默认从9200自增到9202</p><h2 id="2-5-配置Kibana访问集群"><a href="#2-5-配置Kibana访问集群" class="headerlink" title="2.5.配置Kibana访问集群"></a>2.5.配置Kibana访问集群</h2><h3 id="2-5-1-修改配置"><a href="#2-5-1-修改配置" class="headerlink" title="2.5.1.修改配置"></a>2.5.1.修改配置</h3><p>在Kibana中的config中打开kibana.yml文件：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104123006061.png" alt="image-20200104123006061"> </p><p>找到这样一行代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># elasticsearch.hosts: [&quot;http://localhost:9200&quot;]</span></span><br></pre></td></tr></table></figure><p>前面的<code>#</code>是注释，需要删除以打开注释。然后在后面的数组中添加ES的集群地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elasticsearch.hosts:</span> [<span class="string">&quot;http://localhost:9200&quot;</span>,<span class="string">&quot;http://localhost:9201&quot;</span>,<span class="string">&quot;http://localhost:9202&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="2-5-2-重启并访问"><a href="#2-5-2-重启并访问" class="headerlink" title="2.5.2.重启并访问"></a>2.5.2.重启并访问</h3><p>重启kibana，然后再左侧的菜单点击monitor：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104123219341.png" alt="image-20200104123219341"> </p><p>在页面中点击按钮，打开监控功能，可能需要等待几秒钟。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104123234801.png" alt="image-20200104123234801"></p><p>然后可以看到kibana提供的监控功能：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104123303523.png" alt="image-20200104123303523"></p><p>可以看到启动的3个节点的信息：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104123425983.png" alt="image-20200104123425983"></p><h2 id="2-6-测试集群"><a href="#2-6-测试集群" class="headerlink" title="2.6.测试集群"></a>2.6.测试集群</h2><h3 id="2-6-1-配置分片和副本信息"><a href="#2-6-1-配置分片和副本信息" class="headerlink" title="2.6.1.配置分片和副本信息"></a>2.6.1.配置分片和副本信息</h3><p>还记得创建索引库的API吗？</p><ul><li><p>请求方式：PUT</p></li><li><p>请求路径：/索引库名</p></li><li><p>请求参数：json格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;属性名&quot;</span>: <span class="string">&quot;属性值&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>settings：就是索引库设置，其中可以定义索引库的各种属性，之前我们没有配置，是默认值。</p></li></ul><p>settings中就可以配置索引库的分片和副本信息，语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /heima</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">3</span>, # 设置分片数为3</span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="number">1</span> # 设置副本数为<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两个配置：</p><ul><li>number_of_shards：分片数量，这里设置为3</li><li>number_of_replicas：副本数量，这里设置为1，每个分片一个备份，一个原始数据，共2份。</li></ul><p>意思是<strong>三个集群的总数据容量分为3片，每个节点保存一份，同时再备份一份</strong></p><h3 id="2-6-2-查看分片结果"><a href="#2-6-2-查看分片结果" class="headerlink" title="2.6.2.查看分片结果"></a>2.6.2.查看分片结果</h3><p>进入monitor页面，然后选择查看索引库（indices)信息：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104123901902.png" alt="image-20200104123901902"></p><p>可以看到我们刚刚加入的索引库：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104124032092.png" alt="image-20200104124032092"></p><p>点击进入，然后拉到页面最底部：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104124127516.png" alt="image-20200104124127516"></p><p>可以看到每个分片在节点上的信息：</p><ul><li>node0：保存了分片0和1</li><li>node1：保存了分片0和2</li><li>node2：保存了分片1和2</li></ul><p>这个结果与我们上面画图分析是一致的。</p><h3 id="2-6-3-集群动态伸缩"><a href="#2-6-3-集群动态伸缩" class="headerlink" title="2.6.3.集群动态伸缩"></a>2.6.3.集群动态伸缩</h3><p>现在，我们让node1宕机，停止node1的控制台进程即可。</p><p>然后查看Kibana中的节点状态：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104124825356.png" alt="image-20200104124825356"></p><p>发现node1已经宕机了，此时数据是不安全的。</p><p>稍等片刻，再次查看：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104125003684.png" alt="image-20200104125003684"></p><p>发现<strong>分片数据进行了重新分配</strong>，node1上的分片被重新分配了。此时集群依然是健康的。</p><p>我们重新启动node1看看：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104125153682.png" alt="image-20200104125153682"></p><p>分片再次重新分配，那么每个节点都存储了部分分片。</p><h1 id="3-ES的Java客户端"><a href="#3-ES的Java客户端" class="headerlink" title="3.ES的Java客户端"></a>3.ES的Java客户端</h1><p>在elasticsearch官网中提供了各种语言的客户端：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p><p>而Java的客户端就有两个：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104164045946.png" alt="image-20200104164045946"> </p><p>不过Java API这个客户端（Transport Client）已经在7.0以后过期了，而且在8.0版本中将直接废弃。所以我们会学习<strong>Java REST Client：</strong></p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104164428873.png" alt="image-20200104164428873"> </p><p>然后再选择High Level REST Client这个。</p><p>Java  REST Client 其实就是<strong>利用Java语言向 ES服务发 Http的请求</strong>，因此请求和操作与前面学习的REST API 一模一样。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20210630113645669.png" alt="image-20210630113645669"></p><p>不过，为了后面学习，我们需要准备一些数据，导入到ES中</p><h2 id="3-1-准备数据库数据"><a href="#3-1-准备数据库数据" class="headerlink" title="3.1.准备数据库数据"></a>3.1.准备数据库数据</h2><p>我们需要从数据库导入数据到ES中，因此需要做一些准备：</p><ul><li>引入依赖</li><li>执行sql，准备数据</li><li>引入实体类</li><li>引入mybatis相关配置</li><li>引入mapper和service代码</li></ul><h3 id="3-1-1-创建maven项目es-demo-并引入依赖"><a href="#3-1-1-创建maven项目es-demo-并引入依赖" class="headerlink" title="3.1.1.创建maven项目es-demo,并引入依赖"></a>3.1.1.创建maven项目es-demo,并引入依赖</h3><p>在项目的pom文件中引入一些依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>es-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Junit单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--elastic客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JSON工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--common工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-2-执行sql"><a href="#3-1-2-执行sql" class="headerlink" title="3.1.2.执行sql"></a>3.1.2.执行sql</h3><p>我们导入课前资料提供的Sql：<code>tb_user.sql</code>。或者执行sql语句：</p><p>表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for tb_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `gender` <span class="type">varchar</span>(<span class="number">2</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `note` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">13</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of tb_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;张三同学在学Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;李四同学在传智学Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="number">22</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;王五同学在学php&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;张伟&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;张伟同学在传智播客学Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;李娜&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;李娜同学在传智播客学Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;李磊&#x27;</span>, <span class="number">23</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;李磊同学在传智播客学Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;韩梅梅&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;韩梅梅同学在传智播客学php&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;柳岩&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;柳岩同学在传智播客学表演&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;刘亦菲&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;刘亦菲同学在传智播客学唱歌&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;范冰冰&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;范冰冰同学在传智播客学表演&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;郑爽&#x27;</span>, <span class="number">23</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;郑爽同学在传智播客学习如何装纯&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;唐嫣&#x27;</span>, <span class="number">26</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;唐嫣同学在传智播客学习如何耍酷&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-引入实体类"><a href="#3-1-3-引入实体类" class="headerlink" title="3.1.3.引入实体类"></a>3.1.3.引入实体类</h3><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.es.pojo;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;<span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gender;<span class="comment">// 性别</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String note;<span class="comment">// 备注</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-4-引入mybatis配置"><a href="#3-1-4-引入mybatis配置" class="headerlink" title="3.1.4.引入mybatis配置"></a>3.1.4.引入mybatis配置</h3><p>课前资料中提供了配置：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104180104872.png" alt="image-20200104180104872"> </p><p>把：<code>jdbc.properties</code>、<code>mybatis-config.xml</code>、<code>UserMapper.xml</code>复制到项目中:</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200104180244813.png" alt="image-20200104180244813"> </p><h3 id="3-1-5-引入mapper和Service"><a href="#3-1-5-引入mapper和Service" class="headerlink" title="3.1.5.引入mapper和Service"></a>3.1.5.引入mapper和Service</h3><p>mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.es.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.es.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.es.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.es.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.es.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">            userMapper = sqlSessionFactory.openSession(<span class="keyword">true</span>).getMapper(UserMapper.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供了根据id查询和查询所有两个功能。</p><h2 id="3-2-连接ElasticSearch"><a href="#3-2-连接ElasticSearch" class="headerlink" title="3.2.连接ElasticSearch"></a>3.2.连接ElasticSearch</h2><p>在官网上可以看到连接ES的教程：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-getting-started-initialization.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-getting-started-initialization.html</a></p><p>首先需要与ES建立连接，ES提供了一个客户端RestHighLevelClient。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>),</span><br><span class="line">                        <span class="comment">//new HttpHost(&quot;localhost&quot;, 9201, &quot;http&quot;),</span></span><br><span class="line">                        <span class="comment">//new HttpHost(&quot;localhost&quot;, 9202, &quot;http&quot;)</span></span><br><span class="line">                )</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>ES中的所有操作都是通过RestHighLevelClient来完成的：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105103815463.png" alt="image-20200105103815463"> </p><p>为了后面测试方便，我们写到一个单元测试中，并且通过<code>@Before</code>注解来初始化客户端连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">&quot;192.168.159.131&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>),</span><br><span class="line">                        <span class="comment">//new HttpHost(&quot;localhost&quot;, 9201, &quot;http&quot;),</span></span><br><span class="line">                        <span class="comment">//new HttpHost(&quot;localhost&quot;, 9202, &quot;http&quot;)</span></span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭客户端连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-Java实现创建库和映射"><a href="#4-Java实现创建库和映射" class="headerlink" title="4.Java实现创建库和映射"></a>4.Java实现创建库和映射</h1><p>开发中，往往库和映射的操作一起完成，官网详细文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/_index_apis.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/_index_apis.html</a></p><p>这里我们主要实现库和映射的创建。查询、删除等功能大家可参考文档自己实现。</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105093038617.png" alt="image-20200105093038617"> </p><h2 id="4-1-思路分析"><a href="#4-1-思路分析" class="headerlink" title="4.1.思路分析"></a>4.1.思路分析</h2><p>按照官网给出的步骤，创建索引包括下面几个步骤：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1）创建CreateIndexRequest对象，并指定索引库名称</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2）指定settings配置</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3）指定mapping配置</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4）发起请求，得到响应</span></span><br></pre></td></tr></table></figure><p>其实仔细分析，与我们在Kibana中的Rest风格API完全一致：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /heima</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-设计映射规则"><a href="#4-2-设计映射规则" class="headerlink" title="4.2.设计映射规则"></a>4.2.设计映射规则</h2><p>Java代码中设置mapping，依然与REST中一致，需要JSON风格的映射规则。因此我们先在kibana中给User实体类定义好映射规则。</p><p>User包括下面的字段：</p><ul><li>Id：主键，在ES中是唯一标示，数字，可以选择long类型</li><li>name：姓名，字符串类型，但是无需分词，使用keyword，也无需查找，index为false</li><li>age：年龄，整数，可以使用integer</li><li>gender：性别，字符串类型，但是无需分词，使用keyword</li><li>note：备注，用户详细信息，字符串类型。需要分词，使用text</li></ul><p>映射如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT /user</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;gender&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;note&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3.代码实现"></a>4.3.代码实现</h2><p>我们在上面新建的ElasticDemo类中新建单元测试，完成代码，思路就是之前分析的4步骤：</p><ul><li>1）创建CreateIndexRequest对象，并指定索引库名称</li><li>2）指定settings配置</li><li>3）指定mapping配置</li><li>4）发起请求，得到响应</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建CreateIndexRequest对象，并指定索引库名称</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.指定settings配置</span></span><br><span class="line">        request.settings(Settings.builder()</span><br><span class="line">                .put(<span class="string">&quot;index.number_of_shards&quot;</span>, <span class="number">3</span>)</span><br><span class="line">                .put(<span class="string">&quot;index.number_of_replicas&quot;</span>, <span class="number">1</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 3.指定mapping配置</span></span><br><span class="line">        request.mapping(<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        \&quot;type\&quot;: \&quot;long\&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;      \&quot;age\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;      \&quot;gender\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;      \&quot;note\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &#125;&quot;</span>,</span><br><span class="line">                XContentType.JSON);</span><br><span class="line">        <span class="comment">// 4.发起请求，得到响应</span></span><br><span class="line">        CreateIndexResponse response = client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;response = &quot;</span> + response.isAcknowledged());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = true</span><br></pre></td></tr></table></figure><h2 id="课堂代码"><a href="#课堂代码" class="headerlink" title="课堂代码"></a>课堂代码</h2><p>下面演示的，创建客户端，创建索引库以及设置setting，mapping，查看删除索引库代码都比较固定的套路，只不过</p><p>1 我们要<strong>学会从官网上看不同版本的API写出不同版本的代码，我们要学会那种迁移学习的能力</strong>，而不仅仅是低端的搬运工！关于索引库的一些操作API：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.16/_index_apis.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.16/_index_apis.html</a></p><p>2 然后<strong>查看响应时，一下子不知道如何解析，分析得到的相应信息，可以用debug功能，一步步解析我想要的数据</strong>！这也是一种比较重要的能力！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.es;</span><br><span class="line">(略)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client =<span class="keyword">null</span> ;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建客户端对象</span></span><br><span class="line">        client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="comment">//new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;),</span></span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">&quot;192.168.190.149&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ====================<span class="doctag">TODO:</span>操作索引库========================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">TODO:</span>创建索引库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexCreate</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建添加索引库的请求信息对象  指定索引库的名称</span></span><br><span class="line">        CreateIndexRequest createIndexRequest = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        CreateIndexResponse createIndexResponse =</span><br><span class="line">                client.indices().create(createIndexRequest,RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(createIndexResponse.isAcknowledged());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引库时,还可以为索引库添加属性和设置类型映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexCreate1</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">// 创建描述语义的对象</span></span><br><span class="line">        CreateIndexRequest createIndexRequest = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>设置索引库的属性</span></span><br><span class="line">        <span class="comment">//createIndexRequest.settings(Settings.builder()</span></span><br><span class="line">        <span class="comment">//        .put(&quot;index.number_of_shards&quot;, 3)</span></span><br><span class="line">        <span class="comment">//        .put(&quot;index.number_of_replicas&quot;, 1)</span></span><br><span class="line">        <span class="comment">//);</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>设置索引库的类型映射</span></span><br><span class="line">        <span class="comment">//createIndexRequest.mapping(&quot; &#123;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;    \&quot;properties\&quot;: &#123;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;      \&quot;id\&quot;: &#123;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;        \&quot;type\&quot;: \&quot;long\&quot;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;      &#125;,\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;      \&quot;name\&quot;:&#123;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;      &#125;,\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;      \&quot;age\&quot;:&#123;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;      &#125;,\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;      \&quot;gender\&quot;:&#123;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;      &#125;,\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;      \&quot;note\&quot;:&#123;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;      &#125;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;    &#125;\n&quot; +</span></span><br><span class="line">        <span class="comment">//        &quot;  &#125;&quot;,XContentType.JSON);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 合并到一起了！！！！！！！！！！</span></span><br><span class="line">        createIndexRequest.source(<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;settings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;number_of_shards\&quot;: 3,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;number_of_replicas\&quot;: 1\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;long\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;age\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;gender\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;note\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>,XContentType.JSON);</span><br><span class="line">        CreateIndexResponse createIndexResponse =</span><br><span class="line">                client.indices().create(createIndexRequest,RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(createIndexResponse.isAcknowledged());</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     <span class="doctag">TODO:</span> 操作ES流程</span></span><br><span class="line"><span class="comment">        1.获取客户端对象</span></span><br><span class="line"><span class="comment">        2.创建请求语义对象(用于封装本次请求的行为)</span></span><br><span class="line"><span class="comment">        3.发送请求给ES,并接收响应结果</span></span><br><span class="line"><span class="comment">        4.解析响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看索引库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;car&quot;</span>);</span><br><span class="line">        GetIndexResponse response = client.indices().get(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 获取索引库的配置信息</span></span><br><span class="line">        Map&lt;String, Settings&gt; settings = response.getSettings();</span><br><span class="line">        System.out.println(settings.toString());</span><br><span class="line">        <span class="comment">// 获取索引库的映射信息</span></span><br><span class="line">        Map&lt;String, MappingMetaData&gt; mappings = response.getMappings();</span><br><span class="line">        MappingMetaData metaData = mappings.get(<span class="string">&quot;car&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; sourceAsMap = metaData.sourceAsMap();</span><br><span class="line">        System.out.println(sourceAsMap.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除索引库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        AcknowledgedResponse deleteIndexResponse =</span><br><span class="line">                client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(deleteIndexResponse.isAcknowledged());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client!=<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-Java实现文档的CRUD"><a href="#5-Java实现文档的CRUD" class="headerlink" title="5.Java实现文档的CRUD"></a>5.Java实现文档的CRUD</h1><p>文档操作包括：<strong>新增文档、查询文档、修改文档、删除文档等</strong>。</p><p>官网地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-supported-apis.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-supported-apis.html</a></p><h2 id="5-1-新增"><a href="#5-1-新增" class="headerlink" title="5.1.新增"></a>5.1.新增</h2><p>官网地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-document-index.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-document-index.html</a></p><h3 id="5-1-1-实现思路"><a href="#5-1-1-实现思路" class="headerlink" title="5.1.1.实现思路"></a>5.1.1.实现思路</h3><p>根据官网文档，实现的步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1）创建IndexRequest对象，并指定索引库名称</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2）指定新增的数据的id</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3）将新增的文档数据变成JSON格式</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4）将JSON数据添加到IndexRequest中</span></span><br><span class="line"><span class="meta">-</span> <span class="string">5）发起请求，得到结果</span></span><br></pre></td></tr></table></figure><p>不过，我们的文档数据需要去查询数据库，因此前面会多出一个步骤：从数据库查询文档数据</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1）从数据库查询文档数据</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2）创建IndexRequest对象，并指定索引库名称</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3）指定新增的数据的id</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4）将新增的文档数据变成JSON格式</span></span><br><span class="line"><span class="meta">-</span> <span class="string">5）将JSON数据添加到IndexRequest中</span></span><br><span class="line"><span class="meta">-</span> <span class="string">6）发起请求，得到结果</span></span><br></pre></td></tr></table></figure><h3 id="5-1-2-具体代码"><a href="#5-1-2-具体代码" class="headerlink" title="5.1.2.具体代码"></a>5.1.2.具体代码</h3><p><strong>需要在单元测试类中线初始化UserService对象：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> UserService userService = <span class="keyword">new</span> UserService();</span><br></pre></td></tr></table></figure><p>新增文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     <span class="doctag">TODO:</span> 操作ES流程</span></span><br><span class="line"><span class="comment">        1.获取客户端对象</span></span><br><span class="line"><span class="comment">        2.创建请求语义对象(用于封装本次请求的行为)</span></span><br><span class="line"><span class="comment">        3.发送请求给ES,并接收响应结果</span></span><br><span class="line"><span class="comment">        4.解析响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加文档数据信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">docPost1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        request.id(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        String jsonString = <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;age\&quot; : 18,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;gender\&quot; :\&quot;女\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;name\&quot; : \&quot;大幂幂\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;note\&quot; : \&quot;我好美啊.\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        request.source(jsonString, XContentType.JSON);</span><br><span class="line">        IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(indexResponse.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">docPost2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        User user = service.findById(<span class="number">12L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置添加的文档id值</span></span><br><span class="line">        request.id(user.getId().toString());</span><br><span class="line">        <span class="comment">//request.id(&quot;1&quot;); // 新增的ID一致时 则变成修改.</span></span><br><span class="line">        <span class="comment">// 设置文档数据信息</span></span><br><span class="line">        String jsonString = JSON.toJSONString(user); <span class="comment">// 导入第三方依赖包来转，就是香！</span></span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        request.source(jsonString, XContentType.JSON);</span><br><span class="line">        IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//System.out.println(indexResponse.status());</span></span><br><span class="line">        System.out.println(indexResponse.getResult());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexResponse = CREATED   </span><br></pre></td></tr></table></figure><h3 id="5-1-3-新增的ID一致时"><a href="#5-1-3-新增的ID一致时" class="headerlink" title="5.1.3.新增的ID一致时"></a>5.1.3.新增的ID一致时</h3><p>我们之前测试过，新增的时候如果ID存在则变成修改，我们试试，再次执行刚才的代码，可以看到结果变了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexResponse = UPDATED</span><br></pre></td></tr></table></figure><h2 id="5-2-查询文档"><a href="#5-2-查询文档" class="headerlink" title="5.2.查询文档"></a>5.2.查询文档</h2><p>官网地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-document-get.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-document-get.html</a></p><h3 id="5-2-1-实现思路"><a href="#5-2-1-实现思路" class="headerlink" title="5.2.1.实现思路"></a>5.2.1.实现思路</h3><p>这里的查询是根据id查询，必须知道文档的id才可以。</p><p>根据官网文档，实现的步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1）创建GetRequest 对象，并指定索引库名称、文档ID</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2）发起请求，得到结果</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3）从结果中得到source，是json字符串</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4）将JSON反序列化为对象</span></span><br></pre></td></tr></table></figure><h3 id="5-2-2-具体代码"><a href="#5-2-2-具体代码" class="headerlink" title="5.2.2.具体代码"></a>5.2.2.具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询文档数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">docGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取文档对象 语义描述</span></span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="comment">// 发送请求获取文档对象</span></span><br><span class="line">        GetResponse getResponse = client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 获取响应结果中的数据信息</span></span><br><span class="line">        String sourceAsString = getResponse.getSourceAsString();</span><br><span class="line">        System.out.println(sourceAsString);</span><br><span class="line">        <span class="comment">// 解析响应结果字符串</span></span><br><span class="line">        User user = JSON.parseObject(sourceAsString, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;age&quot;:26,&quot;gender&quot;:&quot;女&quot;,&quot;id&quot;:12,&quot;name&quot;:&quot;唐嫣&quot;,&quot;note&quot;:&quot;唐嫣同学在传智播客学习如何耍酷&quot;&#125;</span><br><span class="line">User(id=12, name=唐嫣, age=26, gender=女, note=唐嫣同学在传智播客学习如何耍酷)</span><br></pre></td></tr></table></figure><h2 id="5-3-修改文档"><a href="#5-3-修改文档" class="headerlink" title="5.3.修改文档"></a>5.3.修改文档</h2><p><strong>新增时，如果ID一致就会覆盖旧的数据，实现修改</strong>。不过，如果我们<strong>只修改文档中的某个字段，可以使用另外的API</strong>：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-document-update.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-document-update.html</a></p><h3 id="5-3-1-思路"><a href="#5-3-1-思路" class="headerlink" title="5.3.1.思路"></a>5.3.1.思路</h3><p>根据官网信息，修改时需要指定某个已经存在的文档的id、然后指定要修改的字段及新的值。</p><p>基本步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1.创建UpdateRequest对象，指定索引库名称、文档ID</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2.指定要修改的字段及属性值</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3.发起请求</span></span><br></pre></td></tr></table></figure><h3 id="5-3-2-代码实现"><a href="#5-3-2-代码实现" class="headerlink" title="5.3.2.代码实现"></a>5.3.2.代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">docUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置需要修改的字段信息</span></span><br><span class="line">        request.doc(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;唐嫣&quot;</span>);</span><br><span class="line">        UpdateResponse updateResponse =</span><br><span class="line">                client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(updateResponse.getResult());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updateResponse = UPDATED</span><br></pre></td></tr></table></figure><p>如果再次查询，可以发现李磊已经成功变性了：(哈哈哈)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User(id=6, name=李磊, age=23, gender=女, note=李磊同学在传智播客学Java)</span><br></pre></td></tr></table></figure><h2 id="5-4-删除文档"><a href="#5-4-删除文档" class="headerlink" title="5.4.删除文档"></a>5.4.删除文档</h2><p>官网地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-document-delete.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-document-delete.html</a></p><p>实现思路非常简单，直接根据ID删除即可：</p><ul><li>1.创建DeleteRequest对象，指定索引库名称、文档ID</li><li>2.发起请求</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">docDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    DeleteResponse deleteResponse = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(deleteResponse.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deleteResponse = DELETED</span><br></pre></td></tr></table></figure><h2 id="5-5-批处理"><a href="#5-5-批处理" class="headerlink" title="5.5.批处理"></a>5.5.批处理</h2><p>如果我们需要把数据库中的所有用户信息都导入索引库，可以批量查询出多个用户，但是刚刚的新增文档是一次新增一个文档，这样效率太低了。</p><p>因此ElasticSearch提供了<strong>批处理的方案</strong>：BulkRequest</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-document-bulk.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-document-bulk.html</a></p><h3 id="5-5-1-思路分析"><a href="#5-5-1-思路分析" class="headerlink" title="5.5.1.思路分析"></a>5.5.1.思路分析</h3><p>一个BulkRequest可以在一次请求中执行多个 新增、更新、删除请求。</p><p>所以，BulkRequest就是<strong>把多个其它增、删、改请求整合，然后一起发送到ES来执行</strong>。</p><p>我们拿批量新增来举例，步骤如下：</p><ul><li><p>1.从数据库查询文档数据</p></li><li><p>2.创建BulkRequest对象</p></li><li><p>3.创建多个IndexRequest对象，组织文档数据，并添加到BulkRequest中</p></li><li><p>4.发起请求</p></li></ul><h3 id="5-5-2-具体代码"><a href="#5-5-2-具体代码" class="headerlink" title="5.5.2.具体代码"></a>5.5.2.具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">docBulk</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 查询mysql中的数据信息</span></span><br><span class="line">        List&lt;User&gt; userList = service.findAll();</span><br><span class="line">        BulkRequest request = <span class="keyword">new</span> BulkRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest();</span><br><span class="line">            indexRequest.id(user.getId().toString());</span><br><span class="line">            String userJson = JSON.toJSONString(user);</span><br><span class="line">            indexRequest.source(userJson,XContentType.JSON);</span><br><span class="line"></span><br><span class="line">            request.add(indexRequest);<span class="comment">//先将每一条要添加的文档信息放到桶里面。</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//一下子发给es进行操作。</span></span><br><span class="line">        BulkResponse bulkResponse = client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(bulkResponse.status());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status: OK</span><br></pre></td></tr></table></figure><p>可以在Kibana中看到查询的结果：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105115314222.png" alt="image-20200105115314222"></p><h1 id="6-Java实现查询"><a href="#6-Java实现查询" class="headerlink" title="6.Java实现查询"></a>6.Java实现查询</h1><p>查询、搜索相关功能主要包括：</p><ul><li><p>基本查询</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">分词查询</span></span><br><span class="line"><span class="meta">-</span> <span class="string">词条查询</span></span><br><span class="line"><span class="meta">-</span> <span class="string">范围查询</span></span><br><span class="line"><span class="meta">-</span> <span class="string">布尔查询</span></span><br><span class="line"><span class="meta">-</span> <span class="string">Filter功能</span></span><br></pre></td></tr></table></figure></li><li><p>排序</p></li><li><p>分页</p></li><li><p>高亮</p></li><li><p>source过滤</p></li></ul><p>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-search.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high-search.html</a></p><h2 id="6-1-查询的核心API"><a href="#6-1-查询的核心API" class="headerlink" title="6.1.查询的核心API"></a>6.1.查询的核心API</h2><p>先来看下REST风格中查询的语法：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105153514672.png" alt="image-20200105153514672"> </p><p>整个请求对象是一个大JSON对象，包含5部分属性：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">query：查询属性</span></span><br><span class="line"><span class="meta">-</span> <span class="string">sort：排序属性</span></span><br><span class="line"><span class="meta">-</span> <span class="string">from和size：分页属性</span></span><br><span class="line"><span class="meta">-</span> <span class="string">highlight：高亮属性</span></span><br><span class="line"><span class="meta">-</span> <span class="string">aggs：聚合属性</span></span><br></pre></td></tr></table></figure><p>而Java客户端，其实也是在构建这样的JSON对象。</p><h3 id="6-1-1-SearchSourceBuilder"><a href="#6-1-1-SearchSourceBuilder" class="headerlink" title="6.1.1.SearchSourceBuilder"></a>6.1.1.SearchSourceBuilder</h3><p>在Java客户端中，<code>SearchSourceBuilder</code>就是用来构建上面提到的大JSON对象，其中包含了5个方法：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">query(QueryBuilder)：查询条件</span></span><br><span class="line"><span class="meta">-</span> <span class="string">sort(String, SortOrder)：排序条件</span></span><br><span class="line"><span class="meta">-</span> <span class="string">from(int)和size(int)：分页条件</span></span><br><span class="line"><span class="meta">-</span> <span class="string">highlight(HighlightBuilder)：高亮条件</span></span><br><span class="line"><span class="meta">-</span> <span class="string">aggregation(AggregationBuilder)：聚合条件</span></span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105154343366.png" alt="image-20200105154343366"> </p><p>是不是与REST风格API的JSON对象一致？</p><p>接下来，再逐个来看每一个查询子属性。</p><h3 id="6-1-2-查询条件QueryBuilders"><a href="#6-1-2-查询条件QueryBuilders" class="headerlink" title="6.1.2.查询条件QueryBuilders"></a>6.1.2.查询条件QueryBuilders</h3><p>SearchSourceBuilder的query(QueryBuilder)方法，用来构建查询条件，而查询分为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">分词查询：MatchQuery</span></span><br><span class="line"><span class="meta">-</span> <span class="string">词条查询：TermQuery</span></span><br><span class="line"><span class="meta">-</span> <span class="string">布尔查询：BooleanQuery</span></span><br><span class="line"><span class="meta">-</span> <span class="string">范围查询：RangeQuery</span></span><br><span class="line"><span class="meta">-</span> <span class="string">模糊查询：FuzzyQuery</span></span><br></pre></td></tr></table></figure><ul><li>…</li></ul><p>这些查询有一个统一的工具类来提供：QueryBuilders</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105155220039.png" alt="image-20200105155220039"> </p><h2 id="6-2-搜索结果API"><a href="#6-2-搜索结果API" class="headerlink" title="6.2.搜索结果API"></a>6.2.搜索结果API</h2><p>在Kibana中看一下搜索结果：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105163216526.png" alt="image-20200105163216526"> </p><p>搜索得到的结果整体是一个JSON对象，包含下列2个属性：</p><ul><li>hits：查询结果，其中又包含两个属性：<ul><li>total：总命中数量</li><li>hits：查询到的文档数据，是一个数组，数组中的每个对象就包含一个文档结果，又包含：<ul><li>_source：文档原始信息</li><li>highlight：高亮结果信息</li></ul></li></ul></li><li>aggregations：聚合结果对象，其中包含多个属性，属性名称由添加聚合时的名称来确定：<ul><li>gender_agg：这个是我们创建聚合时用的<code>聚合名称</code>，其中包含聚合结果<ul><li>buckets：聚合结果数组</li></ul></li></ul></li></ul><p>Java客户端中的SearchResponse代表整个JSON结果</p><h3 id="6-2-1-SearchResponse"><a href="#6-2-1-SearchResponse" class="headerlink" title="6.2.1.SearchResponse"></a>6.2.1.SearchResponse</h3><p>Java客户端中的SearchResponse代表整个JSON结果，包含下面的方法：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105164513323.png" alt="image-20200105164513323"> </p><p>包含两个方法：</p><ul><li>getHits()：返回的是SearchHits，代表查询结果</li><li>getAggregations()：返回的是Aggregations，代表聚合结果</li></ul><h3 id="6-2-2-SearchHits查询结果"><a href="#6-2-2-SearchHits查询结果" class="headerlink" title="6.2.2.SearchHits查询结果"></a>6.2.2.SearchHits查询结果</h3><p>SearchHits代表查询结果的JSON对象：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105171202561.png" alt="image-20200105171202561"> </p><p>包含下面的方法：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105165201949.png" alt="image-20200105165201949"> </p><p>核心方法有3个：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">getHits()：返回SearchHit数组</span></span><br><span class="line"><span class="meta">-</span> <span class="string">getMaxScore()：返回float，文档的最大得分</span></span><br><span class="line"><span class="meta">-</span> <span class="string">getTotalHists()：返回TotalHists，总命中数</span></span><br></pre></td></tr></table></figure><h3 id="6-2-3-SearchHit结果对象"><a href="#6-2-3-SearchHit结果对象" class="headerlink" title="6.2.3.SearchHit结果对象"></a>6.2.3.SearchHit结果对象</h3><p>SearchHit封装的就是结果数组中的每一个JSON对象：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105171414852.png" alt="image-20200105171414852"> </p><p>包含这样的方法：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105171625893.png" alt="image-20200105171625893"> </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">getSourceAsString()：返回的是`_source`</span></span><br><span class="line"><span class="meta">-</span> <span class="string">getHighLightFields()：返回是高亮结果</span></span><br></pre></td></tr></table></figure><h2 id="6-3-基本查询"><a href="#6-3-基本查询" class="headerlink" title="6.3.基本查询"></a>6.3.基本查询</h2><h3 id="6-3-1-思路分析"><a href="#6-3-1-思路分析" class="headerlink" title="6.3.1.思路分析"></a>6.3.1.思路分析</h3><p>步骤如下：</p><ul><li><strong>1.创建SearchSourceBuilder对象</strong><ul><li>1.1.添加查询条件QueryBuilders</li><li>1.2.添加排序、分页等其它条件</li></ul></li><li>2.<strong>创建SearchRequest对象，并制定索引库名称</strong></li><li><strong>3.添加SearchSourceBuilder对象到SearchRequest对象中</strong></li><li>4.<strong>发起请求，得到结果</strong></li><li>5.<strong>解析结果</strong><ul><li>5.1.获取总条数</li><li>5.2.获取SearchHits数组，并遍历<ul><li>获取其中的<code>_source</code>，是JSON数据</li><li>把<code>_source</code>反序列化为User对象</li></ul></li></ul></li></ul><h3 id="6-3-2-查询所有"><a href="#6-3-2-查询所有" class="headerlink" title="6.3.2.查询所有"></a>6.3.2.查询所有</h3><p>QueryBuilders可以实现各种查询，比如查询所有：match_all</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBasicSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建SearchSourceBuilder对象</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//  1.1.添加查询条件QueryBuilders，这里选择match_all，查询所有</span></span><br><span class="line">    sourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">    <span class="comment">//  1.2.添加排序、分页等其它条件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.创建SearchRequest对象，并制定索引库名称</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.添加SearchSourceBuilder对象到SearchRequest对象中</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">// 4.发起请求，得到结果</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 5.解析结果</span></span><br><span class="line">    SearchHits searchHits = response.getHits();</span><br><span class="line">    <span class="comment">//  5.1.获取总条数</span></span><br><span class="line">    <span class="keyword">long</span> total = searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line">    <span class="comment">//  5.2.获取SearchHits数组，并遍历</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">//  - 获取其中的`_source`，是JSON数据</span></span><br><span class="line">        String json = hit.getSourceAsString();</span><br><span class="line">        <span class="comment">//  - 把`_source`反序列化为User对象</span></span><br><span class="line">        User user = JSON.parseObject(json, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">total = 12</span><br><span class="line">user = User(id=5, name=李娜, age=28, gender=女, note=李娜同学在传智播客学Java)</span><br><span class="line">user = User(id=7, name=韩梅梅, age=24, gender=女, note=韩梅梅同学在传智播客学php)</span><br><span class="line">user = User(id=2, name=李四, age=21, gender=男, note=李四同学在传智学Java)</span><br><span class="line">user = User(id=3, name=王五, age=22, gender=男, note=王五同学在学php)</span><br><span class="line">user = User(id=4, name=张伟, age=20, gender=男, note=张伟同学在传智播客学Java)</span><br><span class="line">user = User(id=10, name=范冰冰, age=25, gender=女, note=范冰冰同学在传智播客学表演)</span><br><span class="line">user = User(id=12, name=唐嫣, age=26, gender=女, note=唐嫣同学在传智播客学习如何耍酷)</span><br><span class="line">user = User(id=1, name=张三, age=30, gender=男, note=张三同学在学Java)</span><br><span class="line">user = User(id=6, name=李磊, age=23, gender=男, note=李磊同学在传智播客学Java)</span><br><span class="line">user = User(id=8, name=柳岩, age=21, gender=女, note=柳岩同学在传智播客学表演)</span><br></pre></td></tr></table></figure><h3 id="6-3-3-分词查询"><a href="#6-3-3-分词查询" class="headerlink" title="6.3.3.分词查询"></a>6.3.3.分词查询</h3><p>MatchQuery就是<strong>分词查询</strong>，会对搜索的内容分词后查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;note&quot;</span>, <span class="string">&quot;唱歌表演&quot;</span>));</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBasicSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建SearchSourceBuilder对象</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//  1.1.添加查询条件QueryBuilders，这里选择match_all，查询所有</span></span><br><span class="line">    <span class="comment">//        sourceBuilder.query(QueryBuilders.matchAllQuery());</span></span><br><span class="line">    sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;note&quot;</span>, <span class="string">&quot;唱歌表演&quot;</span>));</span><br><span class="line">    <span class="comment">//  1.2.添加排序、分页等其它条件</span></span><br><span class="line"><span class="comment">//这里先不演示！</span></span><br><span class="line">    <span class="comment">// 2.创建SearchRequest对象，并制定索引库名称</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.添加SearchSourceBuilder对象到SearchRequest对象中</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">// 4.发起请求，得到结果</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 5.解析结果</span></span><br><span class="line">    SearchHits searchHits = response.getHits();</span><br><span class="line">    <span class="comment">//  5.1.获取总条数</span></span><br><span class="line">    <span class="keyword">long</span> total = searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line">    <span class="comment">//  5.2.获取SearchHits数组，并遍历</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">//  - 获取其中的`_source`，是JSON数据</span></span><br><span class="line">        String json = hit.getSourceAsString();</span><br><span class="line">        <span class="comment">//  - 把`_source`反序列化为User对象</span></span><br><span class="line">        User user = JSON.parseObject(json, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total = 3</span><br><span class="line">user = User(id=8, name=柳岩, age=21, gender=女, note=柳岩同学在传智播客学表演)</span><br><span class="line">user = User(id=10, name=范冰冰, age=25, gender=女, note=范冰冰同学在传智播客学表演)</span><br><span class="line">user = User(id=9, name=刘亦菲, age=18, gender=女, note=刘亦菲同学在传智播客学唱歌)</span><br></pre></td></tr></table></figure><h3 id="6-3-4-布尔查询"><a href="#6-3-4-布尔查询" class="headerlink" title="6.3.4.布尔查询"></a>6.3.4.布尔查询</h3><p>BooleanQuery就是布尔查询，需要把其它几个查询用must、must_not组合，另外过滤条件最好使用filter来实现。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔查询</span></span><br><span class="line">BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class="line"><span class="comment">// 添加must条件</span></span><br><span class="line">queryBuilder.must(QueryBuilders.matchQuery(<span class="string">&quot;note&quot;</span>, <span class="string">&quot;唱歌表演&quot;</span>));</span><br><span class="line"><span class="comment">// 添加filter条件，不参与打分</span></span><br><span class="line">queryBuilder.filter(QueryBuilders.rangeQuery(<span class="string">&quot;age&quot;</span>).gte(<span class="number">18</span>).lte(<span class="number">24</span>));</span><br><span class="line">sourceBuilder.query(queryBuilder);</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * bool : 布尔查询</span></span><br><span class="line"><span class="comment">    * SearchSourceBuilder: 构建具体的查询条件</span></span><br><span class="line"><span class="comment">    *      - query(QueryBuilder)：查询条件</span></span><br><span class="line"><span class="comment">    *      - sort(String, SortOrder)：排序条件</span></span><br><span class="line"><span class="comment">    *      - from(int)和size(int)：分页条件</span></span><br><span class="line"><span class="comment">    *      - highlight(HighlightBuilder)：高亮条件</span></span><br><span class="line"><span class="comment">    *      - aggregation(AggregationBuilder)：聚合条件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// <span class="doctag">TODO:</span>构建最终查询语义对象</span></span><br><span class="line">       SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">       <span class="comment">// =====构建bool查询的具体语义</span></span><br><span class="line">       <span class="comment">// 构建检索语义</span></span><br><span class="line">       SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       <span class="comment">// 布尔检索</span></span><br><span class="line">       BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">       <span class="comment">// 添加must条件</span></span><br><span class="line">       <span class="comment">//queryBuilder.must(QueryBuilders.matchQuery(&quot;note&quot;, &quot;唱歌表演&quot;));</span></span><br><span class="line">       queryBuilder.must(QueryBuilders.matchQuery(<span class="string">&quot;gender&quot;</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line">       <span class="comment">// 添加filter条件，不影响分值</span></span><br><span class="line">       queryBuilder.filter(QueryBuilders.rangeQuery(<span class="string">&quot;age&quot;</span>).gte(<span class="number">18</span>).lte(<span class="number">24</span>));</span><br><span class="line">       sourceBuilder.query(queryBuilder);</span><br><span class="line">       <span class="comment">//=======</span></span><br><span class="line">       searchRequest.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">       SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">       <span class="comment">// 获取所有的返回结果</span></span><br><span class="line">       SearchHits hits = searchResponse.getHits();</span><br><span class="line">       TotalHits totalHits = hits.getTotalHits();</span><br><span class="line">       <span class="keyword">long</span> total = totalHits.value;</span><br><span class="line">       System.out.println(<span class="string">&quot;总条数 : &quot;</span>+total);</span><br><span class="line"></span><br><span class="line">       SearchHit[] dataHits = hits.getHits();</span><br><span class="line">       <span class="keyword">for</span> (SearchHit data : dataHits) &#123;</span><br><span class="line">           User user = JSON.parseObject(data.getSourceAsString(),User.class);</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>SearchRequest， SearchSourceBuilder  ，BoolQueryBuilder 层层包装！</p><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = 2</span><br><span class="line">user = User(id=8, name=柳岩, age=21, gender=女, note=柳岩同学在传智播客学表演)</span><br><span class="line">user = User(id=9, name=刘亦菲, age=18, gender=女, note=刘亦菲同学在传智播客学唱歌)</span><br></pre></td></tr></table></figure><h2 id="6-4-source过滤"><a href="#6-4-source过滤" class="headerlink" title="6.4.source过滤"></a>6.4.source过滤</h2><p>在原来搜索的基础上，通过SearchSourceBuilder的fetchSource(String[] includes, String[] excludes)方法实现：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">includes：包含的字段</span></span><br><span class="line"><span class="meta">-</span> <span class="string">excludes：要排除的字段</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.source过滤，指定includes，只要id、name、note</span></span><br><span class="line">sourceBuilder.fetchSource(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;note&quot;</span>&#125;, <span class="keyword">new</span> String[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBasicSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建SearchSourceBuilder对象</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//  1.1.添加查询条件QueryBuilders，这里选择match_all，查询所有</span></span><br><span class="line">    sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;note&quot;</span>, <span class="string">&quot;唱歌表演&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.source过滤，指定includes，只要id、name、note</span></span><br><span class="line">    sourceBuilder.fetchSource(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;note&quot;</span>&#125;, <span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.创建SearchRequest对象，并制定索引库名称</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="comment">// 4.添加SearchSourceBuilder对象到SearchRequest对象中</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">// 5.发起请求，得到结果</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 6.解析结果</span></span><br><span class="line">    SearchHits searchHits = response.getHits();</span><br><span class="line">    <span class="comment">//  6.1.获取总条数</span></span><br><span class="line">    <span class="keyword">long</span> total = searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line">    <span class="comment">//  6.2.获取SearchHits数组，并遍历</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">//  - 获取其中的`_source`，是JSON数据</span></span><br><span class="line">        String json = hit.getSourceAsString();</span><br><span class="line">        <span class="comment">//  - 把`_source`反序列化为User对象</span></span><br><span class="line">        User user = JSON.parseObject(json, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total = 3</span><br><span class="line">user = User(id=8, name=柳岩, age=null, gender=null, note=柳岩同学在传智播客学表演)</span><br><span class="line">user = User(id=10, name=范冰冰, age=null, gender=null, note=范冰冰同学在传智播客学表演)</span><br><span class="line">user = User(id=9, name=刘亦菲, age=null, gender=null, note=刘亦菲同学在传智播客学唱歌)</span><br></pre></td></tr></table></figure><h2 id="6-5-排序"><a href="#6-5-排序" class="headerlink" title="6.5.排序"></a>6.5.排序</h2><h3 id="6-5-1-API介绍"><a href="#6-5-1-API介绍" class="headerlink" title="6.5.1.API介绍"></a>6.5.1.API介绍</h3><p>通过SearchSourceBuilder的sort(String, SortOrder)方法用来实现排序条件的封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> name 排序字段名称</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> order 排序的方式</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SearchSourceBuilder <span class="title">sort</span><span class="params">(String name, SortOrder order)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的SortOrder是一个枚举，包含ASC和DESC两个枚举项：</p><h3 id="6-5-2-具体实现"><a href="#6-5-2-具体实现" class="headerlink" title="6.5.2.具体实现"></a>6.5.2.具体实现</h3><p>在原由查询的基础上，给SearchSourceBuilder中添加sort即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  1.2.添加排序条件</span></span><br><span class="line">sourceBuilder.sort(<span class="string">&quot;id&quot;</span>, SortOrder.ASC);</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchOrder</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 描述查询的语义</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="comment">// 构建查询条件 五大类</span></span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    <span class="comment">//searchSourceBuilder.sort(new ScoreSortBuilder().order(SortOrder.DESC));</span></span><br><span class="line">    searchSourceBuilder.sort(<span class="keyword">new</span> FieldSortBuilder(<span class="string">&quot;id&quot;</span>).order(SortOrder.DESC));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将查询条件对象赋给查询语义对象</span></span><br><span class="line">    searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">    SearchResponse searchResponse =</span><br><span class="line">            client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有的返回结果</span></span><br><span class="line">    SearchHits hits = searchResponse.getHits();</span><br><span class="line">    TotalHits totalHits = hits.getTotalHits();</span><br><span class="line">    <span class="keyword">long</span> total = totalHits.value;</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数 : &quot;</span>+total);</span><br><span class="line"></span><br><span class="line">    SearchHit[] dataHits = hits.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit data : dataHits) &#123;</span><br><span class="line">        User user = JSON.parseObject(data.getSourceAsString(),User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">12</span></span><br><span class="line">user = User(id=<span class="number">1</span>, name=张三, age=<span class="number">30</span>, gender=男, note=张三同学在学Java)</span><br><span class="line">user = User(id=<span class="number">2</span>, name=李四, age=<span class="number">21</span>, gender=男, note=李四同学在传智学Java)</span><br><span class="line">user = User(id=<span class="number">3</span>, name=王五, age=<span class="number">22</span>, gender=男, note=王五同学在学php)</span><br><span class="line">user = User(id=<span class="number">4</span>, name=张伟, age=<span class="number">20</span>, gender=男, note=张伟同学在传智播客学Java)</span><br><span class="line">user = User(id=<span class="number">5</span>, name=李娜, age=<span class="number">28</span>, gender=女, note=李娜同学在传智播客学Java)</span><br><span class="line">user = User(id=<span class="number">6</span>, name=李磊, age=<span class="number">23</span>, gender=男, note=李磊同学在传智播客学Java)</span><br><span class="line">user = User(id=<span class="number">7</span>, name=韩梅梅, age=<span class="number">24</span>, gender=女, note=韩梅梅同学在传智播客学php)</span><br><span class="line">user = User(id=<span class="number">8</span>, name=柳岩, age=<span class="number">21</span>, gender=女, note=柳岩同学在传智播客学表演)</span><br><span class="line">user = User(id=<span class="number">9</span>, name=刘亦菲, age=<span class="number">18</span>, gender=女, note=刘亦菲同学在传智播客学唱歌)</span><br><span class="line">user = User(id=<span class="number">10</span>, name=范冰冰, age=<span class="number">25</span>, gender=女, note=范冰冰同学在传智播客学表演)</span><br></pre></td></tr></table></figure><h2 id="6-5-分页"><a href="#6-5-分页" class="headerlink" title="6.5.分页"></a>6.5.分页</h2><p>在原由查询的基础上，给SearchSourceBuilder中添加from和size即可。例如我们的分页信息是：</p><p>page = 1，size = 5，代表查询第一页，每页5条，可以计算出： from = (page - 1) * size = 0</p><p>所以，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.3.添加分页条件</span></span><br><span class="line"><span class="keyword">int</span> page = <span class="number">1</span>, size = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> from = (page - <span class="number">1</span>) * size;</span><br><span class="line">sourceBuilder.from(from);</span><br><span class="line">sourceBuilder.size(size);</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchPage</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 描述查询的语义</span></span><br><span class="line">      SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">      <span class="comment">//###################################################################</span></span><br><span class="line">      <span class="comment">// 构建查询条件 五大类</span></span><br><span class="line">      SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">      searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">      <span class="comment">// 排序</span></span><br><span class="line">      searchSourceBuilder.sort(<span class="keyword">new</span> FieldSortBuilder(<span class="string">&quot;id&quot;</span>).order(SortOrder.DESC));</span><br><span class="line">      <span class="comment">// 起始索引</span></span><br><span class="line">      searchSourceBuilder.from(<span class="number">0</span>);</span><br><span class="line">      searchSourceBuilder.size(<span class="number">4</span>);</span><br><span class="line">      <span class="comment">// 将查询条件对象赋给查询语义对象</span></span><br><span class="line">      searchRequest.source(searchSourceBuilder);</span><br><span class="line"><span class="comment">//###################################################################</span></span><br><span class="line">      </span><br><span class="line">      SearchResponse searchResponse =</span><br><span class="line">              client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取所有的返回结果</span></span><br><span class="line">      SearchHits hits = searchResponse.getHits();</span><br><span class="line">      TotalHits totalHits = hits.getTotalHits();</span><br><span class="line">      <span class="keyword">long</span> total = totalHits.value;</span><br><span class="line">      System.out.println(<span class="string">&quot;总条数 : &quot;</span>+total);</span><br><span class="line"></span><br><span class="line">      SearchHit[] dataHits = hits.getHits();</span><br><span class="line">      <span class="keyword">for</span> (SearchHit data : dataHits) &#123;</span><br><span class="line">          User user = JSON.parseObject(data.getSourceAsString(),User.class);</span><br><span class="line">          System.out.println(user);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">12</span></span><br><span class="line">user = User(id=<span class="number">1</span>, name=张三, age=<span class="number">30</span>, gender=男, note=张三同学在学Java)</span><br><span class="line">user = User(id=<span class="number">2</span>, name=李四, age=<span class="number">21</span>, gender=男, note=李四同学在传智学Java)</span><br><span class="line">user = User(id=<span class="number">3</span>, name=王五, age=<span class="number">22</span>, gender=男, note=王五同学在学php)</span><br><span class="line">user = User(id=<span class="number">4</span>, name=张伟, age=<span class="number">20</span>, gender=男, note=张伟同学在传智播客学Java)</span><br><span class="line">user = User(id=<span class="number">5</span>, name=李娜, age=<span class="number">28</span>, gender=女, note=李娜同学在传智播客学Java)</span><br></pre></td></tr></table></figure><h2 id="6-6-高亮"><a href="#6-6-高亮" class="headerlink" title="6.6.高亮"></a>6.6.高亮</h2><h3 id="6-6-1-开启高亮"><a href="#6-6-1-开启高亮" class="headerlink" title="6.6.1.开启高亮"></a>6.6.1.开启高亮</h3><p>高亮需要在SearchSourceBuilder的highlighter()方法来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.高亮，指定高亮字段</span></span><br><span class="line">sourceBuilder.highlighter(<span class="keyword">new</span> HighlightBuilder().field(<span class="string">&quot;note&quot;</span>));</span><br></pre></td></tr></table></figure><p>完整代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHighlight</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 3.创建SearchRequest对象，并制定索引库名称</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="comment">//###################################################################</span></span><br><span class="line">    <span class="comment">// 1.创建SearchSourceBuilder对象</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//  1.1.添加查询条件QueryBuilders</span></span><br><span class="line">    sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;note&quot;</span>, <span class="string">&quot;唱歌表演&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.高亮，指定高亮字段</span></span><br><span class="line">    sourceBuilder.highlighter(<span class="keyword">new</span> HighlightBuilder().field(<span class="string">&quot;note&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.添加SearchSourceBuilder对象到SearchRequest对象中</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">//###################################################################</span></span><br><span class="line">    <span class="comment">// 5.发起请求，得到结果</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 6.解析结果</span></span><br><span class="line">    SearchHits searchHits = response.getHits();</span><br><span class="line">    <span class="comment">//  6.1.获取总条数</span></span><br><span class="line">    <span class="keyword">long</span> total = searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line">    <span class="comment">//  6.2.获取SearchHits数组，并遍历</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">//  - 获取其中的`_source`，是JSON数据</span></span><br><span class="line">        String json = hit.getSourceAsString();</span><br><span class="line">        <span class="comment">//  - 把`_source`反序列化为User对象</span></span><br><span class="line">        User user = JSON.parseObject(json, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，查看结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total = 3</span><br><span class="line">user = User(id=8, name=柳岩, age=21, gender=女, note=柳岩同学在传智播客学表演)</span><br><span class="line">user = User(id=10, name=范冰冰, age=25, gender=女, note=范冰冰同学在传智播客学表演)</span><br><span class="line">user = User(id=9, name=刘亦菲, age=18, gender=女, note=刘亦菲同学在传智播客学唱歌)</span><br></pre></td></tr></table></figure><p>结果并未高亮，为什么？</p><p>这是因为查询结果中，文档数据和高亮数据是分离的：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105184133923.png" alt="image-20200105184133923"> </p><p>我们需要自己在搜索结果中解析高亮结果</p><h3 id="6-6-2-解析高亮结果"><a href="#6-6-2-解析高亮结果" class="headerlink" title="6.6.2.解析高亮结果"></a>6.6.2.解析高亮结果</h3><p>搜索结果SearchHit对象中，包含两个方法：</p><ul><li>getSourceAsString()：返回的是<code>_source</code></li><li>getHighLightFields()：返回是高亮结果，Map&lt;String, HighlightField&gt;，map的key是高亮字段名称</li></ul><p>解析SearchHit并高亮的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchHighlight</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 描述查询的语义</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="comment">// 构建查询条件 五大类</span></span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    searchSourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;note&quot;</span>,<span class="string">&quot;唱歌跳舞&quot;</span>));</span><br><span class="line">    <span class="comment">// 高亮</span></span><br><span class="line">    searchSourceBuilder.highlighter(<span class="keyword">new</span> HighlightBuilder().field(<span class="string">&quot;note&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将查询条件对象赋给查询语义对象</span></span><br><span class="line">    searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">    SearchResponse searchResponse =</span><br><span class="line">            client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有的返回结果</span></span><br><span class="line">    SearchHits hits = searchResponse.getHits();</span><br><span class="line">    TotalHits totalHits = hits.getTotalHits();</span><br><span class="line">    <span class="keyword">long</span> total = totalHits.value;</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数 : &quot;</span>+total);</span><br><span class="line"></span><br><span class="line">    SearchHit[] dataHits = hits.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit data : dataHits) &#123;</span><br><span class="line">        User user = JSON.parseObject(data.getSourceAsString(),User.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>获取高亮结果 </span></span><br><span class="line">        Map&lt;String, HighlightField&gt; highlightFields = data.getHighlightFields();</span><br><span class="line">        <span class="comment">// 根据字段名，获取字段值</span></span><br><span class="line">        HighlightField highlightField = highlightFields.get(<span class="string">&quot;note&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取高亮结果的片段数组</span></span><br><span class="line">        Text[] fragments = highlightField.getFragments();</span><br><span class="line">        <span class="comment">// 拼接成字符串</span></span><br><span class="line">        String note = StringUtils.join(fragments);</span><br><span class="line">        System.out.println(note);</span><br><span class="line">        <span class="comment">// 覆盖旧值</span></span><br><span class="line">        user.setNote(note);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total = 3</span><br><span class="line">user = User(id=8, name=柳岩, age=21, gender=女, note=柳岩同学在传智播客学&lt;em&gt;表演&lt;/em&gt;)</span><br><span class="line">user = User(id=10, name=范冰冰, age=25, gender=女, note=范冰冰同学在传智播客学&lt;em&gt;表演&lt;/em&gt;)</span><br><span class="line">user = User(id=9, name=刘亦菲, age=18, gender=女, note=刘亦菲同学在传智播客学&lt;em&gt;唱歌&lt;/em&gt;)</span><br></pre></td></tr></table></figure><h1 id="7-Java实现聚合"><a href="#7-Java实现聚合" class="headerlink" title="7.Java实现聚合"></a>7.Java实现聚合</h1><p>聚合功能通过SearchSourceBuilder的aggregation(AggregationBuilder aggregation)方法用来构建聚合条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Add an aggregation to perform as part of the search.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> SearchSourceBuilder <span class="title">aggregation</span><span class="params">(AggregationBuilder aggregation)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// ..</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>其中要用到的各种聚合如：</p><ul><li>Term聚合</li><li>Rang聚合</li><li>Sum聚合</li></ul><p>等都通过AggregationBuilders来提供：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200105160257481.png" alt="image-20200105160257481"> </p><h2 id="7-1-添加聚合条件"><a href="#7-1-添加聚合条件" class="headerlink" title="7.1.添加聚合条件"></a>7.1.添加聚合条件</h2><p>举例，假如对性别字段<code>gender</code>做聚合，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sourceBuilder.aggregation(AggregationBuilders.terms(<span class="string">&quot;gender_agg&quot;</span>).field(<span class="string">&quot;gender&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li>terms(String)：确定聚合类型是Term类型</li><li>term(“gender_agg”)：给聚合起个名字，要唯一，获取聚合结果以名称获取。</li><li>field(“gender”)：确定要聚合的字段名称，这里是gender</li></ul><p>完整请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 聚合</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchAggs</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// 描述查询的语义</span></span><br><span class="line">       SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">       <span class="comment">// 构建查询条件 五大类</span></span><br><span class="line">       SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">       <span class="comment">// 聚合分桶</span></span><br><span class="line">       searchSourceBuilder.aggregation(AggregationBuilders.terms(<span class="string">&quot;gender_agg&quot;</span>).field(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">       <span class="comment">// 将查询条件对象赋给查询语义对象</span></span><br><span class="line">       searchRequest.source(searchSourceBuilder);</span><br><span class="line">       SearchResponse searchResponse =</span><br><span class="line">               client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取所有的返回结果</span></span><br><span class="line">       SearchHits hits = searchResponse.getHits();</span><br><span class="line">       TotalHits totalHits = hits.getTotalHits();</span><br><span class="line">       <span class="keyword">long</span> total = totalHits.value;</span><br><span class="line">       System.out.println(<span class="string">&quot;总条数 : &quot;</span>+total);</span><br><span class="line"></span><br><span class="line">       SearchHit[] dataHits = hits.getHits();</span><br><span class="line">       <span class="keyword">for</span> (SearchHit data : dataHits) &#123;</span><br><span class="line">           User user = JSON.parseObject(data.getSourceAsString(),User.class);</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">       <span class="comment">// 解析聚合结果###################################################</span></span><br><span class="line">       Aggregations aggregations = searchResponse.getAggregations();</span><br><span class="line">       <span class="comment">// 根据桶名获取具体的聚合数据信息####################################</span></span><br><span class="line">       Terms terms = aggregations.get(<span class="string">&quot;gender_agg&quot;</span>);</span><br><span class="line"></span><br><span class="line">       List&lt;? extends Terms.Bucket&gt; buckets = terms.getBuckets();</span><br><span class="line">       <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">           <span class="comment">// 6.4.获取key</span></span><br><span class="line">           String key = bucket.getKeyAsString();</span><br><span class="line">           System.out.println(<span class="string">&quot;key = &quot;</span> + key);</span><br><span class="line">           <span class="comment">// 6.5.获取count</span></span><br><span class="line">           <span class="keyword">long</span> count = bucket.getDocCount();</span><br><span class="line">           System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-解析聚合结果"><a href="#7-2-解析聚合结果" class="headerlink" title="7.2.解析聚合结果"></a>7.2.解析聚合结果</h2><p>聚合结果是一个JSON对象，如图：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200106115813370.png" alt="image-20200106115813370"> </p><p>对象的属性是聚合的名称，可以有多个。因此获取聚合要以聚合名称获取，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6.解析结果</span></span><br><span class="line">Aggregations aggregations = response.getAggregations();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.根据聚合名称获取聚合结果</span></span><br><span class="line">Aggregation aggregation = aggregations.get(<span class="string">&quot;gender_agg&quot;</span>);</span><br></pre></td></tr></table></figure><p>返回值Aggregation是一个接口，包含很多不同实现：</p><p><img src="/img/java/05%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/03-ElasticSearch/image-20200106150546712.png" alt="image-20200106150546712"> </p><p>因为我们上面采用的是Term聚合，因此结果应该用Terms这个子接口来接收，然后就可以从中获取到Buckets数组。</p><p>打印结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key = 女</span><br><span class="line">count = 7</span><br><span class="line">key = 男</span><br><span class="line">count = 5</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="ElasticSearch" scheme="http://example.com/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
  </entry>
  
</feed>
