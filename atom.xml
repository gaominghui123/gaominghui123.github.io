<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-13T07:12:00.160Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>高明辉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx启动遇到的一些问题</title>
    <link href="http://example.com/2022/08/13/nginx%E5%90%AF%E5%8A%A8%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/08/13/nginx%E5%90%AF%E5%8A%A8%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2022-08-13T07:05:52.000Z</published>
    <updated>2022-08-13T07:12:00.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-3-安装Nginx"><a href="#1-3-安装Nginx" class="headerlink" title="1.3.安装Nginx"></a>1.3.安装Nginx</h2><p>安装非常简单，将下载的安装包直接解压即可：（<strong>注意路径不能有中文路径</strong>）</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175232233.png" alt="image-20200111175232233"> </p><p>绿色免安装，舒服！</p><p>解压后的目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175323969.png" alt="image-20200111175323969"> </p><p>nginx可以通过命令行来启动，打开CMD命令行，然后输入命令：</p><ul><li><p>启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nginx.exe</span><br></pre></td></tr></table></figure></li><li><p>停止： #########注意啊，<strong>每次启动前要先把nginx停掉，因为前面启动的在后台，你要先关闭</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s stop   </span><br></pre></td></tr></table></figure></li><li><p>重新加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure></li></ul><p>启动后，访问：<a href="http://localhost/">http://localhost</a> 即可访问nginx的默认页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20200111175634260.png" alt="image-20200111175634260"></p><p>（<strong>为什么访问localhost就会访问nginx呢？</strong>）因为nginx配置文件那里监听的域名+端口就是localhost:80，而http协议默认端口就是80</p><p>小意外：当运行<strong>start nginx.exe 时发生了报错</strong>：nginx: [error] CreateFile() “D:\nginx-1.12.2/logs/nginx.pid” failed (2: The system cannot find the file specified)，从日志log目录下的error也可以看看明显的错误信息，表示没有启动成功，<strong>再运行nginx.exe 命令时报错</strong>：nginx: [emerg] bind() to 0.0.0.0:80 failed (10013: An attempt was made to access a socket in a way forbidden by its access permissions)，表示端口80被占用了，因此需要到conf目录下的conf文件，更改监听端口，改为81后，直接使用命令start nginx.exe就可以运行成功了，然后在浏览器中访问：<a href="http://localhost:81/">http://localhost:81</a> 就可以显示nginx的默认界面了，但是发生了中文乱码问题！</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20220813144402171.png" alt="image-20220813144402171"></p><p>还有一种方法就是找到80端口被占用的进程的pid，然后杀死这个“无关紧要的进程”，那么nginx依然可以监听80端口!</p><h5 id="1-找到80端口被占用的进程的pid，由图可知对应pid为-65205"><a href="#1-找到80端口被占用的进程的pid，由图可知对应pid为-65205" class="headerlink" title="1 找到80端口被占用的进程的pid，由图可知对应pid为 65205"></a>1 找到80端口被占用的进程的pid，由图可知对应pid为 65205</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 netstat -aon|findstr &quot;80&quot;              </span><br></pre></td></tr></table></figure><p> netstat -aon表示查看所有运行中的进程</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20220813145630635.png" alt="image-20220813145630635"></p><h5 id="2-杀死进程"><a href="#2-杀死进程" class="headerlink" title="2 杀死进程"></a>2 杀死进程</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /pid 6520 /F</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/2%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/image-20220813145743411.png" alt="image-20220813145743411"></p><h5 id="nginx中文乱码问题的解决："><a href="#nginx中文乱码问题的解决：" class="headerlink" title="nginx中文乱码问题的解决："></a>nginx中文乱码问题的解决：</h5><p>很简单，在配置文件中指定编码格式为uft-8就好</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line">    <span class="string">charset</span> <span class="string">utf-8;</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-3-安装Nginx&quot;&gt;&lt;a href=&quot;#1-3-安装Nginx&quot; class=&quot;headerlink&quot; title=&quot;1.3.安装Nginx&quot;&gt;&lt;/a&gt;1.3.安装Nginx&lt;/h2&gt;&lt;p&gt;安装非常简单，将下载的安装包直接解压即可：（&lt;strong&gt;注意路径</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>windows安装多个版本的jdk</title>
    <link href="http://example.com/2022/08/11/windows%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84jdk/"/>
    <id>http://example.com/2022/08/11/windows%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84jdk/</id>
    <published>2022-08-11T13:20:13.000Z</published>
    <updated>2022-08-11T15:06:50.040Z</updated>
    
    <content type="html"><![CDATA[<p>单个jdk的安装并配置环境请参考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/cat113488637/article/details/123665179</span></span><br></pre></td></tr></table></figure><p>上面是jdk1.8（jdk8）的安装配置过程，虽然jdk8比较旧，但是稳定，很多企业都是使用的这个版本。</p><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h3><p>官网地址：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//www.oracle.com/java/technologies/downloads/#java8-windows</span></span><br></pre></td></tr></table></figure><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h3><p>下载成功都双击安装就好，更改安装路径，我一般是安装到D盘没有中文符号的路径下，当然jdk本来不大，可以安装到c盘。</p><h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3 配置环境变量"></a>3 配置环境变量</h3><p>参照上面链接就好。</p><h3 id="配置多个jdk"><a href="#配置多个jdk" class="headerlink" title="配置多个jdk"></a>配置多个jdk</h3><p>下载安装完全跟上面一样，只不过配置环境变量时会有不一样，具体请参考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/weixin_52790678/article/details/125112899?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-125112899-blog-123652927.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-125112899-blog-123652927.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=1</span></span><br></pre></td></tr></table></figure><p>但是按照上面的配置，并没有生效！寄！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;单个jdk的安装并配置环境请参考：&lt;/p&gt;
&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>opencv-画基本形状与文字显示</title>
    <link href="http://example.com/2022/08/02/opencv-%E7%94%BB%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/"/>
    <id>http://example.com/2022/08/02/opencv-%E7%94%BB%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/</id>
    <published>2022-08-02T07:47:04.000Z</published>
    <updated>2022-08-02T07:54:50.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本形状"><a href="#1-基本形状" class="headerlink" title="1 基本形状"></a>1 基本形状</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 定义颜色(字典形式)    也就是定义一个像素点（三个字节）下面画图都是根据这些像素点进行填充。</span></span><br><span class="line">colors=&#123;<span class="string">&#x27;blue&#x27;</span>:(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;green&#x27;</span>:(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;red&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;ye11ow&#x27;</span>:(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;magenta&#x27;</span>:(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;cyan&#x27;</span>:(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;white&#x27;</span>:(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;blackgray&#x27;</span>:(<span class="number">125</span>,<span class="number">125</span>,<span class="number">125</span>),</span><br><span class="line">        <span class="string">&#x27;black&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;rand&#x27;</span>: np.random.randint(<span class="number">0</span>, high=<span class="number">256</span>, size=(<span class="number">3</span>,)).tolist(),</span><br><span class="line">        <span class="string">&#x27;dark gray&#x27;</span>:(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>),</span><br><span class="line">        <span class="string">&#x27;light_gray&#x27;</span>:(<span class="number">220</span>,<span class="number">220</span>,<span class="number">220</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title</span>):</span></span><br><span class="line">    img_RGB = image[:, :, ::-<span class="number">1</span>]</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  创建画布。</span></span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认黑色背景。</span></span><br><span class="line">canvas[:] = colors[<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">show_image(canvas,<span class="string">&quot;blackground&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 画直线：cv2.line</span></span><br><span class="line">cv2.line(canvas,(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">400</span>,<span class="number">400</span>),colors[<span class="string">&#x27;green&#x27;</span>],<span class="number">5</span>)</span><br><span class="line">cv2.line(canvas,(<span class="number">0</span>,<span class="number">400</span>),(<span class="number">400</span>,<span class="number">0</span>),colors[<span class="string">&#x27;black&#x27;</span>],<span class="number">5</span>)</span><br><span class="line">show_image(canvas,<span class="string">&quot;cv2.line()&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 画长方形：cv2.rectangle()</span></span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认黑色背景。</span></span><br><span class="line">canvas[:] = colors[<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">cv2.rectangle(canvas,(<span class="number">150</span>,<span class="number">50</span>),(<span class="number">200</span>,<span class="number">300</span>),colors[<span class="string">&#x27;blue&#x27;</span>],-<span class="number">1</span>)</span><br><span class="line">cv2.rectangle(canvas,(<span class="number">10</span>,<span class="number">50</span>),(<span class="number">70</span>,<span class="number">120</span>),colors[<span class="string">&#x27;green&#x27;</span>],<span class="number">2</span>)</span><br><span class="line">show_image(canvas,<span class="string">&#x27;cv2.rectangle()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 画圆形：cv2.circle()</span></span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认黑色背景。</span></span><br><span class="line">canvas[:] = colors[<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">cv2.circle(canvas,(<span class="number">200</span>,<span class="number">200</span>),<span class="number">150</span>,colors[<span class="string">&#x27;green&#x27;</span>],<span class="number">5</span>)</span><br><span class="line">cv2.circle(canvas,(<span class="number">200</span>,<span class="number">200</span>),<span class="number">50</span>,colors[<span class="string">&#x27;blue&#x27;</span>],-<span class="number">1</span>)</span><br><span class="line">show_image(canvas,<span class="string">&#x27;cv2.circle()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 画折线：cv2.plotlines()</span></span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认黑色背景。</span></span><br><span class="line">canvas[:] = colors[<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pts = np.array([[<span class="number">250</span>, <span class="number">5</span>], [<span class="number">220</span>, <span class="number">80</span>], [<span class="number">280</span>, <span class="number">80</span>]], np.int32) <span class="comment">#定义三个点。</span></span><br><span class="line">pts = pts.reshape((-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)) <span class="comment">#########？？？？？？、</span></span><br><span class="line">cv2.polylines(canvas, [pts], <span class="literal">True</span>, colors[<span class="string">&#x27;green&#x27;</span>], <span class="number">3</span>) <span class="comment">#注意 pts括起来。True表示将点连起来。3表示线宽。</span></span><br><span class="line"></span><br><span class="line">pts2 = np.array([[<span class="number">150</span>, <span class="number">200</span>], [<span class="number">90</span>, <span class="number">130</span>], [<span class="number">280</span>, <span class="number">180</span>]], np.int32)</span><br><span class="line">pts2 = pts2.reshape((-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">cv2.polylines(canvas, [pts2], <span class="literal">False</span>, colors[<span class="string">&#x27;black&#x27;</span>], <span class="number">5</span>) <span class="comment">#False不是闭环，链接顺序是第一个点开始连接，按照第二第三。。的顺序连接？？？</span></span><br><span class="line">show_image(canvas, <span class="string">&quot;cv2.polylines()&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155312761.png" alt="image-20220802155312761"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155321549.png" alt="image-20220802155321549"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155330445.png" alt="image-20220802155330445"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155338899.png" alt="image-20220802155338899"></p><h3 id="2-文字显示"><a href="#2-文字显示" class="headerlink" title="2 文字显示"></a>2 文字显示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. 方法：cv2.putText( )</span></span><br><span class="line"><span class="string">2. 参数：</span></span><br><span class="line"><span class="string">    1 字体格式：</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_SIMPLEX = 0 #####################一般选用第一个。</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_PLAIN = 1</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_DUPLEX = 2</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_COMPLEX = 3</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_TRIPLEX = 4</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_COMPLEX_SMALL = 5</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_SCRIPT_SIMPLEX = 6</span></span><br><span class="line"><span class="string">    FONT_HERSHEY_SCRIPT_COMPLEX = 7</span></span><br><span class="line"><span class="string">    2 线条类型：</span></span><br><span class="line"><span class="string">    cv2.LINE_4,     cv2.LINE_8,   cv2.LINE_AA #####################一般选用最后一个。但是我感觉第一种最清晰耶。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 定义颜色(字典形式)    也就是定义一个像素点（三个字节）下面画图都是根据这些像素点进行填充。</span></span><br><span class="line">colors=&#123;<span class="string">&#x27;blue&#x27;</span>:(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;green&#x27;</span>:(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;red&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;ye11ow&#x27;</span>:(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;magenta&#x27;</span>:(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;cyan&#x27;</span>:(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;white&#x27;</span>:(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),</span><br><span class="line">        <span class="string">&#x27;blackgray&#x27;</span>:(<span class="number">125</span>,<span class="number">125</span>,<span class="number">125</span>),</span><br><span class="line">        <span class="string">&#x27;black&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">        <span class="string">&#x27;rand&#x27;</span>: np.random.randint(<span class="number">0</span>, high=<span class="number">256</span>, size=(<span class="number">3</span>,)).tolist(),</span><br><span class="line">        <span class="string">&#x27;dark gray&#x27;</span>:(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>),</span><br><span class="line">        <span class="string">&#x27;light_gray&#x27;</span>:(<span class="number">220</span>,<span class="number">220</span>,<span class="number">220</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title</span>):</span></span><br><span class="line">    <span class="comment"># BGR to RGB</span></span><br><span class="line">    img_RGB = image[:, :, ::-<span class="number">1</span>]</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line">    plt.show()</span><br><span class="line">canvas = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>),np.uint8) <span class="comment">#默认背景为黑色。</span></span><br><span class="line">show_image(canvas,<span class="string">&#x27;blackground&#x27;</span>)</span><br><span class="line">canvas.fill(<span class="number">255</span>)</span><br><span class="line">show_image(canvas,<span class="string">&#x27;BlackGround&#x27;</span>)</span><br><span class="line"><span class="comment"># #  或者将背景设置为浅灰色：</span></span><br><span class="line"><span class="comment"># canvas[:,:] = colors[&#x27;light_gray&#x27;]</span></span><br><span class="line"><span class="comment"># show_image(canvas,&#x27;BlackGround&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5往画布上输入文本CV2.</span></span><br><span class="line"><span class="comment"># 参数：画布，文本，起始位置，字体型号，字体大小，字体颜色，线条类型。</span></span><br><span class="line">cv2.putText(canvas, <span class="string">&#x27;Hello World&#x27;</span>,(<span class="number">50</span>, <span class="number">50</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.9</span>,colors[<span class="string">&#x27;red&#x27;</span>],cv2.LINE_4)</span><br><span class="line">cv2.putText(canvas, <span class="string">&#x27;Welcome&#x27;</span>,(<span class="number">50</span>, <span class="number">150</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1.4</span>,colors[<span class="string">&#x27;blue&#x27;</span>],cv2.LINE_8)</span><br><span class="line">cv2.putText(canvas, <span class="string">&#x27;Jason&#x27;</span>,(<span class="number">50</span>, <span class="number">250</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1.9</span>,colors[<span class="string">&#x27;black&#x27;</span>],cv2.LINE_4)</span><br><span class="line">show_image(canvas,<span class="string">&quot;Canvas&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6%E4%B8%8E%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA/image-20220802155230102.png" alt="image-20220802155230102"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-基本形状&quot;&gt;&lt;a href=&quot;#1-基本形状&quot; class=&quot;headerlink&quot; title=&quot;1 基本形状&quot;&gt;&lt;/a&gt;1 基本形状&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>opencv-直方图统计</title>
    <link href="http://example.com/2022/08/02/opencv-%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/"/>
    <id>http://example.com/2022/08/02/opencv-%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/</id>
    <published>2022-08-02T07:11:57.000Z</published>
    <updated>2022-08-02T07:48:15.273Z</updated>
    
    <content type="html"><![CDATA[<p>在统计学中，直方图是一种对数据分布情况的图形表示，是一种二维统计图表，他的两个坐标分别是统计样本（图像、视频帧）和样本的某种属性（亮度，像素值，梯度，方向，色彩等等任何特征）<br>总结就是：像素强度分布，即：每一个强度值所具有的像素个数。</p><p>特征：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">（1）直方图不再表征任何的图像纹理信息，而是对图像像素的统计。</span></span><br><span class="line"><span class="attr">（2）由于同一物体无论是旋转还是平移在图像中都具有相同的灰度值，因此直方图具有平移不变性、放缩不变性等优点。</span></span><br></pre></td></tr></table></figure><h3 id="1-灰度图的直方图统计"><a href="#1-灰度图的直方图统计" class="headerlink" title="1 灰度图的直方图统计"></a>1 灰度图的直方图统计</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法：显示图片的灰度直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    <span class="comment"># 显示标题</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pos) <span class="comment"># 定位图片</span></span><br><span class="line">    plt.xlabel(<span class="string">&quot;Bins&quot;</span>) <span class="comment"># 横轴信息</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;Pixels&quot;</span>) <span class="comment"># 纵轴信息</span></span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 范围</span></span><br><span class="line">    plt.plot(hist, color=color) <span class="comment"># 绘制直方图##plt.plot！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 主函数 main()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 5 创建画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>)) <span class="comment"># 画布大小</span></span><br><span class="line">    plt.suptitle(<span class="string">&quot;Gray Image Histogram&quot;</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">&quot;bold&quot;</span>) <span class="comment"># 设置标题形式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6 加载图片</span></span><br><span class="line">    img = cv2.imread(<span class="string">&quot;children.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7 灰度转换</span></span><br><span class="line">    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8 计算灰度图的直方图    #############################################</span></span><br><span class="line">    hist_img = cv2.calcHist([img_gray], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    <span class="comment"># hist_img = cv2.calcHist([img_gray], [0], None, [16], [0, 256])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ###设置为16，表示的是在设定好的range= [0,255]，平均分为16个bin。</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    参数详解：</span></span><br><span class="line"><span class="string">    cv2.calcHist(images, channels, mask, histSize, ranges[hist[, accumulate]])</span></span><br><span class="line"><span class="string">    （1）images: 整型类型(uint8和float32)的原图（list形式显示）。##########是列表，用[] 括起来！！！</span></span><br><span class="line"><span class="string">    （2）channels: 通道的索引，例如：[0]代表灰度图片，[0], [1], [2]代表多通道。</span></span><br><span class="line"><span class="string">    （3）mask: 计算图片指定区域的直方图。如果mask为none，那么计算整张图。</span></span><br><span class="line"><span class="string">    （4）histSize(bins): 每个色调值(范围: 0~ 255)对应的像素数量 / 频率。</span></span><br><span class="line"><span class="string">        [这256个值中的每一个都被称为bin，它的取值有8，16，32，64，128，256。在OpenCV中，用histSize表示bins。]</span></span><br><span class="line"><span class="string">    （5）range: 强度值的范围，[0, 256]。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 9 展示灰度直方图</span></span><br><span class="line">    <span class="comment"># 灰度图转换成BGR格式图片    ####</span></span><br><span class="line">    img_BGR = cv2.cvtColor(img_gray, cv2.COLOR_GRAY2BGR) </span><br><span class="line">    img_RGB = img_BGR[:,:,::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_img</span>(<span class="params">img,title,pos</span>):</span></span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">3</span>,pos)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法：显示图片的灰度直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    <span class="comment"># 显示标题</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pos) <span class="comment"># 定位图片</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;Bins&quot;</span>) <span class="comment"># 横轴信息</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;Pixels&quot;</span>) <span class="comment"># 纵轴信息</span></span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 范围</span></span><br><span class="line">    plt.plot(hist, color=color) <span class="comment"># 绘制直方图############plt.plot！！！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果展示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="comment"># (1261, 1920, 3)</span></span><br><span class="line"><span class="built_in">print</span>(img_gray.shape)</span><br><span class="line"><span class="comment"># (1261, 1920)</span></span><br><span class="line"><span class="built_in">print</span>(hist_img.shape)</span><br><span class="line"><span class="comment"># (256, 1)</span></span><br><span class="line"><span class="built_in">print</span>(img_BGR.shape)</span><br><span class="line"><span class="comment"># (1261, 1920, 3)</span></span><br><span class="line"><span class="built_in">print</span>(img_RGB.shape)</span><br><span class="line"><span class="comment"># (1261, 1920, 3)</span></span><br><span class="line">show_img(img,<span class="string">&#x27;img&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">show_img(img_gray,<span class="string">&#x27;img_gray&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">show_img(img_BGR,<span class="string">&#x27;img_BGR&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">show_img(img_RGB,<span class="string">&#x27;img_RGB&#x27;</span>,<span class="number">4</span>)</span><br><span class="line">show_histogram(hist_img, <span class="string">&#x27;hist-img&#x27;</span>, <span class="number">5</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line">plt.savefig(fname=<span class="string">&#x27;children-gray.png&#x27;</span>, figsize=[<span class="number">10</span>, <span class="number">10</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下图：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/image-20220802153408048.png" alt="image-20220802153408048"></p><p>可见，经cv.cvtColor(gray,cv.COLOR_GRAY2BGR)得到的back图像确实是个3通道的，但是每一个像素点的三通道（B、G、R）的数值都是相同的，所以显示出来效果仍是灰度图</p><h3 id="2-灰度图的直方图的加减"><a href="#2-灰度图的直方图的加减" class="headerlink" title="2 灰度图的直方图的加减"></a>2 灰度图的直方图的加减</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 方法：显示图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title, pos</span>):</span></span><br><span class="line">    <span class="comment">#  顺序转换：BGR TO RGB</span></span><br><span class="line">    image_RGB = image[:, :, ::-<span class="number">1</span>] <span class="comment"># shape : (height, width, channel)</span></span><br><span class="line">    <span class="comment"># 显示标题</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pos) <span class="comment"># 定位</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(image_RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 方法：显示图片的灰度直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    <span class="comment"># 显示标题</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pos) <span class="comment"># 定位图片</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;Bins&quot;</span>) <span class="comment"># 横轴信息</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;Pixels&quot;</span>) <span class="comment"># 纵轴信息</span></span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 范围</span></span><br><span class="line">    plt.plot(hist, color=color) <span class="comment"># 绘制直方图</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 主函数 main()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 5 创建画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>)) <span class="comment"># 画布大小</span></span><br><span class="line">    plt.suptitle(<span class="string">&quot;Gray Image Histogram&quot;</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">&quot;bold&quot;</span>) <span class="comment"># 设置标题形式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6 加载图片</span></span><br><span class="line">    img = cv2.imread(<span class="string">&quot;children.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7 灰度转换</span></span><br><span class="line">    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8 计算灰度图的直方图</span></span><br><span class="line">    hist_img = cv2.calcHist([img_gray], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 9 展示灰度直方图</span></span><br><span class="line">    <span class="comment"># 灰度图转换成BGR格式图片</span></span><br><span class="line">    img_BGR = cv2.cvtColor(img_gray, cv2.COLOR_GRAY2BGR)</span><br><span class="line">    show_image(img_BGR, <span class="string">&quot;BGR image&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    show_histogram(hist_img, <span class="string">&quot;gray image histogram&quot;</span>, <span class="number">4</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 10 对图片中的每个像素值增加50个像素   相加后超出255，即为255？？应该是。整张图变白了，轮廓什么的都能看清楚。</span></span><br><span class="line">    M = np.ones(img_gray.shape, np.uint8) * <span class="number">50</span> <span class="comment"># 构建矩阵：形状跟灰度照片一样，但是里面的值全是50.</span></span><br><span class="line"></span><br><span class="line">    added_img = cv2.add(img_gray, M)        <span class="comment">########直接像素值相加。</span></span><br><span class="line">    add_img_hist = cv2.calcHist([added_img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 计算直方图</span></span><br><span class="line">    added_img_BGR = cv2.cvtColor(added_img, cv2.COLOR_GRAY2BGR)</span><br><span class="line">    show_image(added_img_BGR, <span class="string">&quot;added image&quot;</span>, <span class="number">2</span>)</span><br><span class="line">    show_histogram(add_img_hist, <span class="string">&quot;added image hist&quot;</span>, <span class="number">5</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 11 对图片中的每个像素值减去50个像素  相减少于0，即为0，应该是了。整张图变黑了，轮廓什么的都能看清楚。</span></span><br><span class="line">    subtract_img = cv2.subtract(img_gray, M)</span><br><span class="line">    subtract_img_hist = cv2.calcHist([subtract_img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 计算直方图</span></span><br><span class="line">    subtract_img_BGR = cv2.cvtColor(subtract_img, cv2.COLOR_GRAY2BGR)</span><br><span class="line">    show_image(subtract_img_BGR, <span class="string">&quot;subtracted image&quot;</span>, <span class="number">3</span>)</span><br><span class="line">    show_histogram(subtract_img_hist, <span class="string">&quot;subtracted image hist&quot;</span>, <span class="number">6</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line">    plt.savefig(fname=<span class="string">&#x27;gray_image_add_subtract.png&#x27;</span>,figsize=[<span class="number">10</span>, <span class="number">10</span>])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/image-20220802154412057.png" alt="image-20220802154412057"></p><h3 id="3-灰度直方图与掩码"><a href="#3-灰度直方图与掩码" class="headerlink" title="3 灰度直方图与掩码"></a>3 灰度直方图与掩码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 方法：显示图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title, pos</span>):</span></span><br><span class="line">    img_RGB = image[:, :, ::-<span class="number">1</span>] <span class="comment"># BGR to RGB</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, pos)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 方法：显示灰度直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, pos)</span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.plot(hist, color=color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 5 创建画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">7</span>))</span><br><span class="line">    plt.suptitle(<span class="string">&quot;Gray Image and Histogram with mask&quot;</span>, fontsize=<span class="number">4</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6 读取图片并灰度转换，计算直方图，显示</span></span><br><span class="line">    img_gray = cv2.imread(<span class="string">&quot;children.jpg&quot;</span>, cv2.COLOR_BGR2GRAY) <span class="comment"># 读取并进行灰度转换，############一步到位。</span></span><br><span class="line">    img_gray_hist = cv2.calcHist([img_gray], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 计算直方图###########################</span></span><br><span class="line">    <span class="comment">##############好奇怪呀，上面两个例子先读照片再转为灰度图，显示的是灰色的，这里一步到位读取灰度图反而显示的是彩色图。</span></span><br><span class="line">    show_image(img_gray, <span class="string">&quot;image gray&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    show_histogram(img_gray_hist, <span class="string">&quot;image gray histogram&quot;</span>, <span class="number">2</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7 创建mask，计算位图，直方图</span></span><br><span class="line">    mask = np.zeros(img_gray.shape[:<span class="number">2</span>], np.uint8)  <span class="comment">######################先整张图的大小都是mask，下面再截取个四边形赋值为255。</span></span><br><span class="line">    mask[<span class="number">130</span>:<span class="number">500</span>, <span class="number">600</span>:<span class="number">1400</span>] = <span class="number">255</span> <span class="comment"># 获取mask，并赋予颜色  本质上是与操作，跟255相与等于本身，跟框外的0相与等于0，所以哈哈哈哈哈哈</span></span><br><span class="line">    img_mask_hist = cv2.calcHist([img_gray], [<span class="number">0</span>], mask, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]) <span class="comment"># 计算mask的直方图##############这里的mask参数变成了mask。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8 通过位运算（与预算）计算带有mask的灰度图片</span></span><br><span class="line">    mask_img = cv2.bitwise_and(img_gray, img_gray, mask = mask)<span class="comment">###########意思就是mask区域外的像素值都变0，都变黑了。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 9 显示带有mask的图片和直方图</span></span><br><span class="line">    show_image(mask_img, <span class="string">&quot;gray image with mask&quot;</span>, <span class="number">3</span>)</span><br><span class="line">    show_histogram(img_mask_hist, <span class="string">&quot;histogram with masked gray image&quot;</span>, <span class="number">4</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment"># mask ： 提取感兴趣区域。</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/image-20220802154508013.png" alt="image-20220802154508013"></p><h3 id="4-三颜色通道的直方图"><a href="#4-三颜色通道的直方图" class="headerlink" title="4 三颜色通道的直方图"></a>4 三颜色通道的直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 方法：显示图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span>(<span class="params">image, title, pos</span>):</span></span><br><span class="line">    plt.subplot(<span class="number">3</span>, <span class="number">2</span>, pos)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    image_RGB = image[:, :, ::-<span class="number">1</span>] <span class="comment"># BGR to RGB</span></span><br><span class="line">    plt.imshow(image_RGB)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>) <span class="comment">#################把刻度去掉。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 方法：显示彩色直方图 b, g, r</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_histogram</span>(<span class="params">hist, title, pos, color</span>):</span></span><br><span class="line">    plt.subplot(<span class="number">3</span>, <span class="number">2</span>, pos)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    <span class="keyword">for</span> h, c <span class="keyword">in</span> <span class="built_in">zip</span>(hist, color): <span class="comment"># color: (&#x27;b&#x27;, &#x27;g&#x27;, &#x27;r&#x27;)</span></span><br><span class="line">        plt.plot(h, color=c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 方法：计算直方图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_color_hist</span>(<span class="params">image</span>):</span><span class="comment">########################################通道不同哈啊哈哈哈啊哈，就可以指定了！！！</span></span><br><span class="line">    <span class="comment"># b, g, r</span></span><br><span class="line">    hist = []</span><br><span class="line">    hist.append( cv2.calcHist([image], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]))</span><br><span class="line">    hist.append( cv2.calcHist([image], [<span class="number">1</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]))</span><br><span class="line">    hist.append( cv2.calcHist([image], [<span class="number">2</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>]))</span><br><span class="line">    <span class="keyword">return</span> hist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 5.1 创建画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">    plt.suptitle(<span class="string">&quot;Color Histogram&quot;</span>, fontsize=<span class="number">4</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.2 读取原图片</span></span><br><span class="line">    img = cv2.imread(<span class="string">&quot;children.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.3 计算直方图</span></span><br><span class="line">    img_hist = calc_color_hist(img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.4 显示图片和直方图</span></span><br><span class="line">    show_image(img, <span class="string">&quot;RGB Image&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    show_histogram(img_hist, <span class="string">&quot;RGB Image Hist&quot;</span>, <span class="number">2</span>, (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.5 原始图片中的每个像素增加50个像素值</span></span><br><span class="line">    M = np.ones(img.shape, dtype=<span class="string">&quot;uint8&quot;</span>) * <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    added_image = cv2.add(img, M) <span class="comment"># 像素一一对应相加</span></span><br><span class="line">    added_image_hist = calc_color_hist(added_image)</span><br><span class="line">    show_image(added_image, <span class="string">&#x27;added image&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    show_histogram(added_image_hist, <span class="string">&#x27;added image hist&#x27;</span>, <span class="number">4</span>, (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>))<span class="comment">#####这里传入的是元组，不知道列表行不行！！！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.6 原始图片中的每个像素减去50个像素值</span></span><br><span class="line">    subtracted_image = cv2.subtract(img, M)</span><br><span class="line">    subtracted_image_hist = calc_color_hist(subtracted_image)</span><br><span class="line">    show_image(subtracted_image, <span class="string">&#x27;subtracted image&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    show_histogram(subtracted_image_hist, <span class="string">&#x27;subtracted image hist&#x27;</span>, <span class="number">6</span>, (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%BB%9F%E8%AE%A1/image-20220802154614592.png" alt="image-20220802154614592"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在统计学中，直方图是一种对数据分布情况的图形表示，是一种二维统计图表，他的两个坐标分别是统计样本（图像、视频帧）和样本的某种属性（亮度，像素值，梯度，方向，色彩等等任何特征）&lt;br&gt;总结就是：像素强度分布，即：每一个强度值所具有的像素个数。&lt;/p&gt;
&lt;p&gt;特征：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>opencv-图像的八种变换</title>
    <link href="http://example.com/2022/08/01/opencv-%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/"/>
    <id>http://example.com/2022/08/01/opencv-%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/</id>
    <published>2022-08-01T07:33:40.000Z</published>
    <updated>2022-08-01T12:30:22.369Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;kyrie.jpg&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show() <span class="comment">##这个别忘了，然后，似乎颜色都变了。。。。。</span></span><br><span class="line"></span><br><span class="line">h,w,c = img.shape  <span class="comment">#######(高，宽，通道）</span></span><br><span class="line"><span class="built_in">print</span>(h,w,c)</span><br><span class="line"><span class="comment"># 640 640 3</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170113045.png" alt="image-20220801170113045"></p><h2 id="使用cv2-来进行图像变换"><a href="#使用cv2-来进行图像变换" class="headerlink" title="使用cv2 来进行图像变换"></a>使用cv2 来进行图像变换</h2><h3 id="1-图像的放大，缩小"><a href="#1-图像的放大，缩小" class="headerlink" title="1 图像的放大，缩小"></a>1 图像的放大，缩小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （1） 放大：          参数interpolation 表示的是插值算法：INTER_LINEAR表示双线性</span></span><br><span class="line">reszie_img = cv2.resize(img,(w*<span class="number">3</span>,h*<span class="number">2</span>),interpolation=cv2.INTER_LINEAR)   </span><br><span class="line"><span class="built_in">print</span>(reszie_img.shape)</span><br><span class="line"><span class="comment"># (1280, 1920, 3)</span></span><br><span class="line">plt.imshow(reszie_img)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#(2) 缩小</span></span><br><span class="line">small_img = cv2.resize(img,<span class="literal">None</span>,fx=<span class="number">0.5</span>,fy=<span class="number">0.5</span>,interpolation=cv2.INTER_LINEAR)</span><br><span class="line"><span class="built_in">print</span>(small_img.shape)</span><br><span class="line"><span class="comment"># (320, 320, 3)</span></span><br><span class="line">plt.imshow(small_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170220921.png" alt="image-20220801170220921"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170250487.png" alt="image-20220801170250487"></p><h3 id="2-平移"><a href="#2-平移" class="headerlink" title="2 平移"></a>2 平移</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 至于平移矩阵前面的0,1组合，百度吧。</span></span><br><span class="line">h,w = img.shape[:<span class="number">2</span>]</span><br><span class="line">M1 = np.float32([[<span class="number">1</span>,<span class="number">0</span>,<span class="number">100</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">50</span>]])</span><br><span class="line">move_img = cv2.warpAffine(img,M1,(w,h))</span><br><span class="line">plt.imshow(move_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">M2 = np.float32([[<span class="number">1</span>,<span class="number">0</span>,-<span class="number">100</span>],[<span class="number">0</span>,<span class="number">1</span>,-<span class="number">50</span>]])</span><br><span class="line">move_img1 = cv2.warpAffine(img,M2,(w,h))</span><br><span class="line">plt.imshow(move_img1)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170326942.png" alt="image-20220801170326942"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170337054.png" alt="image-20220801170337054"></p><h3 id="3-图像旋转"><a href="#3-图像旋转" class="headerlink" title="3 图像旋转"></a>3 图像旋转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">center = (w//<span class="number">2.0</span>,h//<span class="number">2.0</span>)<span class="comment">#旋转中心</span></span><br><span class="line">M3 = cv2.getRotationMatrix2D(center,<span class="number">180</span>,<span class="number">1</span>) <span class="comment">#逆时针转转180度，负数表示顺时针，1 表示没有缩放。</span></span><br><span class="line">rotation_img = cv2.warpAffine(img,M3,(w,h))</span><br><span class="line">plt.imshow(rotation_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170404821.png" alt="image-20220801170404821"></p><h3 id="4-图像仿射变换"><a href="#4-图像仿射变换" class="headerlink" title="4 图像仿射变换"></a>4 图像仿射变换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  通过一系列原子变换复合实现，具体包括：平移（Translation）、缩放（Scale）、旋转（Rotation）、翻转（Flip）和错切（Shear）</span></span><br><span class="line">p1 = np.float32([[<span class="number">120</span>,<span class="number">35</span>],[<span class="number">215</span>,<span class="number">45</span>],[<span class="number">135</span>,<span class="number">120</span>]])</span><br><span class="line">p2 = np.float32([[<span class="number">135</span>,<span class="number">45</span>],[<span class="number">300</span>,<span class="number">110</span>],[<span class="number">130</span>,<span class="number">230</span>]])</span><br><span class="line">M4 = cv2.getAffineTransform(p1,p2) <span class="comment">####由两个像素点关系得到前后图的关系（这个关系可以有上面的原子变换复合实现）</span></span><br><span class="line">trans_img = cv2.warpAffine(img,M4,(w,h))</span><br><span class="line">plt.imshow(trans_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170432817.png" alt="image-20220801170432817"></p><h3 id="5-图像裁剪"><a href="#5-图像裁剪" class="headerlink" title="5 图像裁剪"></a>5 图像裁剪</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crop_img = img[<span class="number">200</span>:<span class="number">400</span>,<span class="number">150</span>:<span class="number">300</span>]</span><br><span class="line"><span class="built_in">print</span>(crop_img.shape)</span><br><span class="line"><span class="comment"># (200, 150, 3)</span></span><br><span class="line">plt.imshow(crop_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170458897.png" alt="image-20220801170458897"></p><h3 id="6-位运算：（and，or-xor，not）"><a href="#6-位运算：（and，or-xor，not）" class="headerlink" title="6 位运算：（and，or xor，not）"></a>6 位运算：（and，or xor，not）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rectangle = np.zeros((<span class="number">300</span>,<span class="number">300</span>),dtype=<span class="string">&#x27;uint8&#x27;</span>) <span class="comment">####画布大小。</span></span><br><span class="line"><span class="comment"># 参数：画布，第一个点坐标，第二个点坐标（两个点可以确定矩形），颜色，-1表示边框大小很细。</span></span><br><span class="line">rectangle_img = cv2.rectangle(rectangle,(<span class="number">25</span>,<span class="number">25</span>),(<span class="number">275</span>,<span class="number">275</span>),<span class="number">255</span>,-<span class="number">1</span>)</span><br><span class="line">plt.imshow(rectangle_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170803435.png" alt="image-20220801170803435"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rectangle = np.zeros((<span class="number">300</span>,<span class="number">300</span>),dtype=<span class="string">&#x27;uint8&#x27;</span>) <span class="comment">####画布大小。</span></span><br><span class="line"><span class="comment"># 参数：画布，圆点坐标，半径，颜色，-1表示边框大小很细。</span></span><br><span class="line">circle_img = cv2.circle(rectangle,(<span class="number">150</span>,<span class="number">150</span>),<span class="number">150</span>,<span class="number">255</span>,-<span class="number">1</span>)</span><br><span class="line">plt.imshow(circle_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：circle_img = cv2.circle(rectangle,(150,150),150,255,-1)之后</span></span><br><span class="line"><span class="comment"># circle_img跟rectangle其实是一样的哦，意思是在画布上画圆圈</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170846937.png" alt="image-20220801170846937"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （1） 与运算：</span></span><br><span class="line">and_img = cv2.bitwise_and(rectangle_img,circle_img)</span><br><span class="line">plt.imshow(and_img)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#（2）或运算</span></span><br><span class="line">or_img = cv2.bitwise_or(rectangle_img,circle_img)</span><br><span class="line">plt.imshow(or_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170930828.png" alt="image-20220801170930828"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170940871.png" alt="image-20220801170940871"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）异或运算</span></span><br><span class="line">xor_img = cv2.bitwise_xor(rectangle_img,circle_img)</span><br><span class="line">plt.imshow(xor_img)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#（4）非运算</span></span><br><span class="line">not_img=cv2.bitwise_not(circle_img)</span><br><span class="line">plt.imshow(not_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801173829625.png" alt="image-20220801173829625"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171021314.png" alt="image-20220801171021314"></p><h3 id="7-图像的分离和融合"><a href="#7-图像的分离和融合" class="headerlink" title="7 图像的分离和融合"></a>7 图像的分离和融合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;opencv.jpeg&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show() <span class="comment">##这个别忘了，然后，似乎颜色都变了。。。。。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801170726457.png" alt="image-20220801170726457"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(1）分离</span></span><br><span class="line">(b,g,r) = cv2.split(img)</span><br><span class="line">plt.imshow(b)</span><br><span class="line">plt.show()</span><br><span class="line">plt.imshow(g)</span><br><span class="line">plt.show()</span><br><span class="line">plt.imshow(r)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171404936.png" alt="image-20220801171404936"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171418254.png" alt="image-20220801171418254"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171429000.png" alt="image-20220801171429000"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (2) 融合。</span></span><br><span class="line">zeros = np.zeros(img.shape[:<span class="number">2</span>],dtype=<span class="string">&quot;uint8&quot;</span>)</span><br><span class="line">merge_img = cv2.merge([zeros,zeros,r])  <span class="comment">#这里应该表示，用r这一个通道跟前面zeros，zeros，两个通道组合成为一张图片数据！</span></span><br><span class="line">plt.imshow(merge_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">merge_img1 = cv2.merge([zeros,g,zeros])</span><br><span class="line">plt.imshow(merge_img1)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">merge_img2 = cv2.merge([b,zeros,zeros])</span><br><span class="line">plt.imshow(merge_img2)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171457604.png" alt="image-20220801171457604"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171506261.png" alt="image-20220801171506261"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171515085.png" alt="image-20220801171515085"></p><h3 id="8-颜色空间：color-space"><a href="#8-颜色空间：color-space" class="headerlink" title="8 颜色空间：color space"></a>8 颜色空间：color space</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(1)灰度</span></span><br><span class="line">gray_img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">plt.imshow(gray_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）hsv（色度，饱和度，纯度）</span></span><br><span class="line">hsv_img = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)</span><br><span class="line">plt.imshow(hsv_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">lab_img = cv2.cvtColor(img,cv2.COLOR_BGR2LAB)</span><br><span class="line">plt.imshow(lab_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171603566.png" alt="image-20220801171603566"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171616322.png" alt="image-20220801171616322"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%8F%98%E6%8D%A2/image-20220801171625672.png" alt="image-20220801171625672"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>opencv-读取保存图片-读取保存摄像头或视频</title>
    <link href="http://example.com/2022/08/01/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/"/>
    <id>http://example.com/2022/08/01/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/</id>
    <published>2022-08-01T07:33:11.000Z</published>
    <updated>2022-08-01T08:49:11.842Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-加载并显示图片"><a href="#1-加载并显示图片" class="headerlink" title="1 加载并显示图片"></a>1 加载并显示图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parse = argparse.ArgumentParser() <span class="comment">#新建实例</span></span><br><span class="line">parse.add_argument(<span class="string">&#x27;path_image&#x27;</span>,<span class="built_in">help</span> = <span class="string">&#x27;path to input the image&#x27;</span>) <span class="comment">#增加参数</span></span><br><span class="line">args = parse.parse_args() <span class="comment"># 解析参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个参数:&quot;</span>,args.path_image)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(args.path_image))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个参数: kyrie.jpg</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 加载照片 方式1</span></span><br><span class="line">img = cv2.imread(args.path_image)</span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载图片 方式2</span></span><br><span class="line">arg_dict = <span class="built_in">vars</span>(parse.parse_args())  <span class="comment">#以字典的形式保存参数。</span></span><br><span class="line"><span class="built_in">print</span>(arg_dict)</span><br><span class="line"><span class="comment"># &#123;&#x27;path_image&#x27;: &#x27;kyrie.jpg&#x27;&#125;</span></span><br><span class="line">new_img = cv2.imread(arg_dict[<span class="string">&#x27;path_image&#x27;</span>])</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;kyrie1&#x27;</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;kyrie2&#x27;</span>,new_img)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入命令：python 4-read-show-image.py kyrie.jpg</p><p>得到如下效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/image-20220801162046659.png" alt="image-20220801162046659"></p><h3 id="2-加载图，转为灰度图，然后保存图片"><a href="#2-加载图，转为灰度图，然后保存图片" class="headerlink" title="2 加载图，转为灰度图，然后保存图片"></a>2 加载图，转为灰度图，然后保存图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 获取参数</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 添加参数</span></span><br><span class="line">parser.add_argument(<span class="string">&quot;img_input&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;read one image&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;img_output&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;save the processed image&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 解析参数，以字典形式保存参数和值</span></span><br><span class="line">args = <span class="built_in">vars</span>(parser.parse_args())</span><br><span class="line"><span class="built_in">print</span>(args)</span><br><span class="line"><span class="comment"># &#123;&#x27;img_input&#x27;: &#x27;kyrie.jpg&#x27;, &#x27;img_output&#x27;: &#x27;kyrie-gray.jpg&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 5 加载图片</span></span><br><span class="line">img = cv2.imread(args[<span class="string">&quot;img_input&quot;</span>])<span class="comment">#################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 处理：灰度处理</span></span><br><span class="line">img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<span class="comment">#################################</span></span><br><span class="line"><span class="built_in">print</span>(img_gray.shape)</span><br><span class="line"><span class="comment"># (640, 640) 就是变成一个通道的意思。</span></span><br><span class="line"><span class="comment"># 7 保存图片</span></span><br><span class="line">cv2.imwrite(args[<span class="string">&quot;img_output&quot;</span>], img_gray)<span class="comment">############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8 显示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Original Image&quot;</span>, img)<span class="comment">#################################</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Gray Image&quot;</span>, img_gray)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>命令行输入如下： python 5-read_process_save.py “kyrie.jpg” “kyrie-gray.jpg”    得到效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/image-20220801162552723.png" alt="image-20220801162552723"></p><h3 id="3-获取摄像头内容并显示出来摄像头内容"><a href="#3-获取摄像头内容并显示出来摄像头内容" class="headerlink" title="3 获取摄像头内容并显示出来摄像头内容"></a>3 获取摄像头内容并显示出来摄像头内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;index_camera&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;the camera ID&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="comment">########笔记本默认的摄像头ID为0哈，因此，这里运行代码时要输入摄像头ID。</span></span><br><span class="line"><span class="comment">#######自己插入的摄像头ID为1,2，。。。。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the camera index :&quot;</span>, args.index_camera) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">capture = cv2.VideoCapture(args.index_camera) <span class="comment"># 视频捕获</span></span><br><span class="line"></span><br><span class="line">frame_width = capture.get(cv2.CAP_PROP_FRAME_WIDTH) <span class="comment"># 帧的#########宽度</span></span><br><span class="line">frame_height = capture.get(cv2.CAP_PROP_FRAME_HEIGHT) <span class="comment"># 帧的#########高度</span></span><br><span class="line">fps = capture.get(cv2.CAP_PROP_FPS) <span class="comment"># ########################每秒的帧数，实时性，这个参数很重要。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;frame width: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(frame_width))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;frame height: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(frame_height))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;frames per second: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(fps))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> capture.isOpened() <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error Camera !&quot;</span>)</span><br><span class="line"><span class="comment"># 读取视频直到关闭</span></span><br><span class="line"><span class="keyword">while</span> capture.isOpened():</span><br><span class="line">    <span class="comment"># 通过摄像头，一帧一帧的捕获 ##########################一帧一帧哦！</span></span><br><span class="line">    ret, frame = capture.read() <span class="comment">######################ret 的值为True或False，代表有没有读到图片.</span></span><br><span class="line">    <span class="comment"># print(ret)</span></span><br><span class="line">    <span class="keyword">if</span> ret <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 显示捕获的帧</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;frame&quot;</span>, frame) <span class="comment">########在同一个窗口不断显示frame，就组成了视频效果啦，哈哈哈哈！！！</span></span><br><span class="line">        <span class="comment"># 将捕获的帧转化为灰度的帧</span></span><br><span class="line">        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        <span class="comment"># 显示灰度的帧</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;gray frame&quot;</span>, gray_frame)</span><br><span class="line">        <span class="comment"># 键盘输入q，退出视频捕获</span></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>): <span class="comment">######waitKey 参数单位：ms</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放</span></span><br><span class="line">capture.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">命令终端输入：</span></span><br><span class="line"><span class="attr">python</span> <span class="string">6-read_video_from_camera.py 0</span></span><br><span class="line"><span class="attr">终端输出：</span></span><br><span class="line"><span class="attr">the</span> <span class="string">camera index : 0</span></span><br><span class="line"><span class="attr">frame</span> <span class="string">width: 640.0</span></span><br><span class="line"><span class="attr">frame</span> <span class="string">height: 480.0</span></span><br><span class="line"><span class="attr">frames</span> <span class="string">per second: 30.0</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/image-20220801163656311.png" alt="image-20220801163656311"></p><h3 id="4-读取视频，并显示出来视频内容"><a href="#4-读取视频，并显示出来视频内容" class="headerlink" title="4 读取视频，并显示出来视频内容"></a>4 读取视频，并显示出来视频内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 加载库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 获取参数</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 添加参数</span></span><br><span class="line">parser.add_argument(<span class="string">&quot;video_path&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;the path to the video file&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 解析参数</span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 加载视频文件</span></span><br><span class="line">capture = cv2.VideoCapture(args.video_path) <span class="comment">######要么是摄像头ID号，要么是 视频路径哈！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 读取视频</span></span><br><span class="line">ret, frame = capture.read() <span class="comment"># ret 是否读取到了帧（图片）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ret:</span><br><span class="line">    cv2.imshow(<span class="string">&quot;video&quot;</span>, frame)</span><br><span class="line">    ret, frame = capture.read() <span class="comment"># 继续读取帧</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):  <span class="comment">########视频播放完会自动退出，或者在播放完之前按下 键盘 q 也会退出。</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">capture.release()</span><br><span class="line">cv2.destroyAllWindows() <span class="comment"># 关闭</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 输入如下命令运行代码：</span><br><span class="line"># python 7-read_video_from_file.py videos/view.mp4</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/opencv-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87-%E8%AF%BB%E5%8F%96%E4%BF%9D%E5%AD%98%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%96%E8%A7%86%E9%A2%91/image-20220801162756705.png" alt="image-20220801162756705"></p><h3 id="5-获取摄像头的内容，然后保存为视频格式文件"><a href="#5-获取摄像头的内容，然后保存为视频格式文件" class="headerlink" title="5 获取摄像头的内容，然后保存为视频格式文件"></a>5 获取摄像头的内容，然后保存为视频格式文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment">#  获取参数</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;video_output&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;the path to the output video&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获摄像头</span></span><br><span class="line">capture = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> capture.isOpened() <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Camera Error !&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7 获取帧的属性：宽，高，以及fps</span></span><br><span class="line">frame_width = capture.get(cv2.CAP_PROP_FRAME_WIDTH) <span class="comment"># 宽</span></span><br><span class="line">frame_height = capture.get(cv2.CAP_PROP_FRAME_HEIGHT) <span class="comment"># 高</span></span><br><span class="line">fps = capture.get(cv2.CAP_PROP_FPS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8 对视频进行编码  #################################################</span></span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">&quot;XVID&quot;</span>)</span><br><span class="line"><span class="comment"># 建立写入视频对象。参数分别为:1 写入路径，2 编码格式，3 fps，（w，h），False 表示保存灰度视频。True表示保存rgb彩色视频。</span></span><br><span class="line"><span class="comment"># output_gray = cv2.VideoWriter(args.video_output, fourcc, int(fps), (int(frame_width), int(frame_height)), False)</span></span><br><span class="line">output_gray = cv2.VideoWriter(args.video_output, fourcc, <span class="built_in">int</span>(fps), (<span class="built_in">int</span>(frame_width), <span class="built_in">int</span>(frame_height)), <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9 读取摄像头</span></span><br><span class="line"><span class="keyword">while</span> capture.isOpened():</span><br><span class="line">    ret, frame = capture.read() <span class="comment"># 一帧一帧地读取</span></span><br><span class="line">    <span class="keyword">if</span> ret <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 10 将读取到的帧转换为灰度</span></span><br><span class="line">        <span class="comment"># gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span></span><br><span class="line">        <span class="comment"># 11 将转换后的帧写入都新的视频文件中</span></span><br><span class="line">        <span class="comment"># output_gray.write(gray_frame)  #########################################</span></span><br><span class="line">        output_gray.write(frame)  <span class="comment">#########################################</span></span><br><span class="line">        <span class="comment"># 12 显示视频</span></span><br><span class="line">        <span class="comment"># cv2.imshow(&quot;gray&quot;, gray_frame)</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;rgb&quot;</span>, frame)</span><br><span class="line">        <span class="comment"># 13 等待或按q退出</span></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 14 释放资源</span></span><br><span class="line">capture.release()</span><br><span class="line">output_gray.release() <span class="comment">#########################</span></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">运行输入：</span></span><br><span class="line"><span class="string">python 8-read_camera_save_video.py videos/output-gray-videos.mp4    或者avi格式也行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-加载并显示图片&quot;&gt;&lt;a href=&quot;#1-加载并显示图片&quot; class=&quot;headerlink&quot; title=&quot;1 加载并显示图片&quot;&gt;&lt;/a&gt;1 加载并显示图片&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>py文件参数解析模块argparse</title>
    <link href="http://example.com/2022/08/01/py%E6%96%87%E4%BB%B6%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97argparse/"/>
    <id>http://example.com/2022/08/01/py%E6%96%87%E4%BB%B6%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97argparse/</id>
    <published>2022-08-01T07:31:57.000Z</published>
    <updated>2022-08-01T08:05:39.239Z</updated>
    
    <content type="html"><![CDATA[<p>这个参数解析模块有时候也挺重要的哈，特别是对调试人员来说，对合作伙伴在工作交接，团队协作项目时很重要哦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parse = argparse.ArgumentParser()</span><br><span class="line">parse.add_argument(<span class="string">&quot;number1&quot;</span>,<span class="built_in">help</span> = <span class="string">&#x27;第一个参数&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>)<span class="comment">#第一个参数</span></span><br><span class="line">parse.add_argument(<span class="string">&#x27;number2&#x27;</span>,<span class="built_in">help</span> = <span class="string">&#x27;第二个参数&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>)<span class="comment">#第二个参数</span></span><br><span class="line">args = parse.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个参数:&quot;</span>,args.number1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第二个参数:&quot;</span>,args.number2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;所有参数：&quot;</span>,args)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在命令窗口运行此代码，并且输入参数。</span></span><br><span class="line"><span class="comment"># (hui_tf) E:\PythonCode\唐国梁CV入门课程&gt;python 3-argParse-test.py 3 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个参数: 3</span></span><br><span class="line"><span class="string">第二个参数: 4</span></span><br><span class="line"><span class="string">所有参数： Namespace(number1=3, number2=4)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个参数解析模块有时候也挺重要的哈，特别是对调试人员来说，对合作伙伴在工作交接，团队协作项目时很重要哦&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>opencv-图像基础</title>
    <link href="http://example.com/2022/08/01/opencv-%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/08/01/opencv-%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/</id>
    <published>2022-08-01T07:30:24.000Z</published>
    <updated>2022-08-01T08:01:15.832Z</updated>
    
    <content type="html"><![CDATA[<p>一年前学习的一些opencv图像处理知识，最近搞无人机平台的堤坝检测项目，要对图片做前后增强处理，因此用到了opencv库的一些方法，因此就翻出以前写的笔记，整理成博客如下！</p><h3 id="1-读取彩色照片"><a href="#1-读取彩色照片" class="headerlink" title="1 读取彩色照片"></a>1 读取彩色照片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 读取彩色照片</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;kyrie.jpg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(img))</span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="built_in">print</span>(img.size)</span><br><span class="line"><span class="built_in">print</span>(img.dtype)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="string">(640, 640, 3)</span></span><br><span class="line"><span class="string">1228800</span></span><br><span class="line"><span class="string">uint8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示某个像素的三个颜色通道的值。</span></span><br><span class="line">(b,g,r) = img[<span class="number">300</span>,<span class="number">330</span>]</span><br><span class="line"><span class="built_in">print</span>(b,g,r)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">88 78 78</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">b = img[<span class="number">300</span>,<span class="number">330</span>,<span class="number">0</span>]</span><br><span class="line">g = img[<span class="number">300</span>,<span class="number">330</span>,<span class="number">1</span>]</span><br><span class="line">r = img[<span class="number">300</span>,<span class="number">330</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(b,g,r)</span><br><span class="line"><span class="comment"># 88 78 78</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给某像素点赋值。</span></span><br><span class="line">img[<span class="number">300</span>,<span class="number">330</span>] = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图片 kyrie 为窗口名</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;kyrie&#x27;</span>,img)</span><br><span class="line"><span class="comment">#等待</span></span><br><span class="line"><span class="comment"># cv2.waitKey(0)</span></span><br><span class="line"><span class="comment"># #关闭所有窗口，释放内存</span></span><br><span class="line"><span class="comment"># cv2.destroyAllWindows()</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/image-20220801155749339.png" alt="image-20220801155749339"></p><h3 id="2-读取灰度照片。"><a href="#2-读取灰度照片。" class="headerlink" title="2 读取灰度照片。"></a>2 读取灰度照片。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把白色与黑色之间按对数关系分为若干等级，称为灰度。灰度分为256阶。用灰度表示的图像称作灰度图。</span></span><br><span class="line"><span class="comment"># 三个通道变成只有一个通道 计算方法有几种，这里给出两种</span></span><br><span class="line"><span class="comment"># 任何颜色都由红、绿、蓝三基色组成，假如原来某点的颜色为RGB(R，G，B)，那么，我们可以通过下面几种方法，将其转换为灰度：</span></span><br><span class="line"><span class="comment"># 1.浮点法：Gray=R*0.3+G*0.59+B*0.11</span></span><br><span class="line"><span class="comment"># 2.整数法：Gray=(R*30+G*59+B*11)/100</span></span><br><span class="line">gray_img = cv2.imread(<span class="string">&#x27;kyrie.jpg&#x27;</span>,cv2.IMREAD_GRAYSCALE)</span><br><span class="line"><span class="built_in">print</span>(gray_img.shape)</span><br><span class="line"><span class="built_in">print</span>(gray_img.size)</span><br><span class="line"><span class="built_in">print</span>(gray_img.dtype)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(640, 640) </span></span><br><span class="line"><span class="string">409600</span></span><br><span class="line"><span class="string">uint8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;gray_img&#x27;</span>,gray_img)</span><br><span class="line"><span class="built_in">print</span>(gray_img[<span class="number">300</span>,<span class="number">300</span>])</span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/image-20220801155826948.png" alt="image-20220801155826948"></p><h3 id="3-打乱BGR顺序"><a href="#3-打乱BGR顺序" class="headerlink" title="3 打乱BGR顺序"></a>3 打乱BGR顺序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">如下两张图显示，红色跟蓝色调换了。</span><br><span class="line">opencv_img = cv2.imread(<span class="string">&#x27;opencv.jpeg&#x27;</span>)</span><br><span class="line">b,g,r = cv2.split(opencv_img)       <span class="comment">###########拆分通道</span></span><br><span class="line">new_opencv_img = cv2.merge([r,g,b]) <span class="comment">###########合并通道</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;opencv_img&#x27;</span>,opencv_img)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;new_opencv_img&#x27;</span>,new_opencv_img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#####方式二，用matplotlib显示</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.imshow(opencv_img)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.imshow(new_opencv_img)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">111</span>)</span><br><span class="line">plt.imshow(gray_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/image-20220801155848066.png" alt="image-20220801155848066"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/image-20220801155917764.png" alt="image-20220801155917764"></p><p><img src="/img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80/image-20220801155932678.png" alt="image-20220801155932678"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一年前学习的一些opencv图像处理知识，最近搞无人机平台的堤坝检测项目，要对图片做前后增强处理，因此用到了opencv库的一些方法，因此就翻出以前写的笔记，整理成博客如下！&lt;/p&gt;
&lt;h3 id=&quot;1-读取彩色照片&quot;&gt;&lt;a href=&quot;#1-读取彩色照片&quot; class=&quot;</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>分布式日志服务、链路追踪</title>
    <link href="http://example.com/2022/07/03/%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <id>http://example.com/2022/07/03/%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</id>
    <published>2022-07-03T02:01:16.000Z</published>
    <updated>2022-08-02T14:23:55.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式日志服务、链路追踪"><a href="#分布式日志服务、链路追踪" class="headerlink" title="分布式日志服务、链路追踪"></a>分布式日志服务、链路追踪</h1><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">了解GrayLog的作用</span></span><br><span class="line"><span class="meta">-</span> <span class="string">了解SkyWalking的作用</span></span><br></pre></td></tr></table></figure><h1 id="1-分布式日志服务GrayLog"><a href="#1-分布式日志服务GrayLog" class="headerlink" title="1.分布式日志服务GrayLog"></a>1.分布式日志服务GrayLog</h1><p>在微服务架构下，微服务被拆分成多个微小的服务，每个微小的服务都部署在不同的服务器实例上，当我们定位问题，检索日志的时候需要依次登录每台服务器进行检索。</p><p>这样是不是感觉很繁琐和效率低下。所以我们还需要一个工具来帮助集中收集、存储和搜索这些跟踪信息。</p><p>集中化管理日志后，日志的统计和检索又成为一件比较麻烦的事情。以前，我们通过使用grep、awk和wc等Linux命令能实现检索和统计，但是对于要求更高的查询、排序和统计等要求和庞大的机器数量依然使用这样的方法难免有点力不从心。</p><p><strong>分布式日志服务</strong>就是来帮我们解决上述问题的。其基本思路是：</p><ul><li><strong>日志收集器</strong>：微服务中引入<strong>日志客户端</strong>，将记录的日志通过日志服务端发送到对应的收集器，然后以某种方式存储</li><li><strong>数据存储</strong>：一般使用ElasticSearch分布式存储，把收集器收集到的日志格式化，然后存储到分布式存储中</li><li><strong>web服务</strong>：利用ElasticSearch的统计搜索功能，实现日志查询和报表输出</li></ul><p>比较知名的分布式日志服务包括：</p><ul><li>ELK：elasticsearch、Logstash、Kibana</li><li>GrayLog：</li></ul><h2 id="1-1-什么是GrayLog"><a href="#1-1-什么是GrayLog" class="headerlink" title="1.1.什么是GrayLog"></a>1.1.什么是GrayLog</h2><p>业界比较知名的分布式日志服务解决方案是ELK，而我们今天要学习的是GrayLog。为什么呢？</p><p>ELK解决方案的问题：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1.</span> <span class="string">不能处理多行日志，比如Mysql慢查询，Tomcat/Jetty应用的Java异常打印</span></span><br><span class="line"><span class="meta">2.</span> <span class="string">不能保留原始日志，只能把原始日志分字段保存，这样搜索日志结果是一堆Json格式文本，无法阅读。</span></span><br><span class="line"><span class="meta">3.</span> <span class="string">不符合正则表达式匹配的日志行，被全部丢弃。</span></span><br></pre></td></tr></table></figure><p>GrayLog方案的优势：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1.</span> <span class="string">一体化方案，安装方便，不像ELK有3个独立系统间的集成问题。</span></span><br><span class="line"><span class="meta">2.</span> <span class="string">采集原始日志，并可以事后再添加字段，比如http_status_code，response_time等等。</span></span><br><span class="line"><span class="meta">3.</span> <span class="string">自己开发采集日志的脚本，并用curl/nc发送到Graylog Server，</span></span><br><span class="line"><span class="attr">发送格式是自定义的GELF，Flunted和Logstash都有相应的输出GELF消息的插件。</span></span><br><span class="line"><span class="attr">自己开发带来很大的自由度。实际上只需要用inotifywait监控日志的modify事件，</span></span><br><span class="line"><span class="meta">并把日志的新增行用curl/netcat发送到Graylog</span> <span class="string">Server就可。</span></span><br><span class="line"><span class="meta">4.</span> <span class="string">搜索结果高亮显示，就像google一样。</span></span><br><span class="line"><span class="meta">5.</span> <span class="string">搜索语法简单，比如： `source:mongo AND reponse_time_ms:&gt;5000`，避免直接输入elasticsearch搜索json语法</span></span><br><span class="line"><span class="meta">6.</span> <span class="string">搜索条件可以导出为elasticsearch的搜索json文本，方便直接开发调用elasticsearch rest api的搜索脚本。</span></span><br></pre></td></tr></table></figure><p>官网：<a href="https://www.graylog.org/">https://www.graylog.org/</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110121609000.png" alt="image-20200110121609000"></p><p>其基本框架如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110121214473.png" alt="image-20200110121214473"> </p><p>流程如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1  微服务中的GrayLog客户端发送日志到GrayLog服务端</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2  GrayLog把日志信息格式化，存储到Elasticsearch</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3  客户端通过浏览器访问GrayLog，GrayLog访问Elasticsearch</span></span><br></pre></td></tr></table></figure><p>这里<strong>MongoDB是用来存储GrayLog的配置信息</strong>的，这样搭建集群时，GrayLog的各节点可以共享配置</p><h2 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2.安装"></a>1.2.安装</h2><p>我们在虚拟机中选择使用Docker来安装。需要安装的包括：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">MongoDB：用来存储GrayLog的配置信息，可以使用最新版本</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">Elasticsearch：用来存储日志信息，目前GrayLog兼容的是6.x版本</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">GrayLog：GrayLog服务端，目前是3.1版本</span></span><br></pre></td></tr></table></figure><h3 id="1-2-1-上传docker镜像"><a href="#1-2-1-上传docker镜像" class="headerlink" title="1.2.1.上传docker镜像"></a>1.2.1.上传docker镜像</h3><p>上述镜像体积都比较大：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110122226790.png" alt="image-20200110122226790"> </p><p>我们上传到<code>/usr/local/src/</code>目录下，</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110134201395.png" alt="image-20200110134201395"> </p><p>然后执行命令，加载镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker load -i es6.tar</span><br><span class="line">docker load -i graylog3.tar</span><br><span class="line">docker load -i mongo.tar</span><br></pre></td></tr></table></figure><p>然后查看加载好的镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110134425311.png" alt="image-20200110134425311"></p><h3 id="1-2-2-运行es容器"><a href="#1-2-2-运行es容器" class="headerlink" title="1.2.2.运行es容器"></a>1.2.2.运行es容器</h3><p>注意：GrayLog3.1不兼容elasticsearch7.x版本，<strong>必须使用6.x版本</strong></p><p>命令如下：<strong>（前面也装过，但是版本，因此重新跑一个容器，注意要把前面那个es容器停掉！）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run --name leyou-es6 \</span><br><span class="line">    -e <span class="string">&quot;http.host=0.0.0.0&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;network.host=0.0.0.0&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">    -v es6-data:/usr/share/elasticsearch/data \</span><br><span class="line">    -v es6-logs:/usr/share/elasticsearch/logs \</span><br><span class="line">    --privileged \</span><br><span class="line">    -p 9201:9200 \</span><br><span class="line">    -p 9301:9300 \</span><br><span class="line">    -d \</span><br><span class="line">    es6</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li><code>--name leyou-es6</code>：容器名称是<code>leyou-es6</code></li><li>环境变量<ul><li><code>-e &quot;http.host=0.0.0.0&quot;</code>：监听的ip地址，外网可以访问</li><li><code>-e &quot;ES_JAVA_OPTS=-Xms256m -Xmx256m&quot;</code>：JVM内存参数</li><li><code>-e &quot;discovery.type=single-node&quot;</code>：单节点模式，无集群</li></ul></li><li>卷信息：<ul><li><code>-v es6-data:/usr/share/elasticsearch/data</code>：存放es中数据的卷</li><li><code>-v es6-logs:/usr/share/elasticsearch/logs</code>：存放es中日志的卷</li></ul></li><li><code>--privileged</code>：授予逻辑卷访问权限</li><li>端口信息：<ul><li><code>-p 9201:9200</code>：http端口，此处没有用9200，因为大家之前安装的ES版本是7，并且已经占用了9200端口</li><li><code>-p 9301:9300</code>：http端口，此处没有用9301，因为大家之前安装的ES版本是7，并且已经占用了9300端口</li></ul></li><li><code>es6</code>：使用的镜像名称</li></ul><h3 id="1-2-3-运行MongoDB容器"><a href="#1-2-3-运行MongoDB容器" class="headerlink" title="1.2.3.运行MongoDB容器"></a>1.2.3.运行MongoDB容器</h3><p>命令如下：<strong>（前面也装过，但是这里不需要密码，因此重新跑一个容器，注意要把前面那个mongodb容器停掉！）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run  \</span><br><span class="line">    --name leyou-mongo \</span><br><span class="line">    -p 27017:27017  \</span><br><span class="line">    -v mongo-config:/data/configdb/ \</span><br><span class="line">    -v mongo-db:/data/db/ \</span><br><span class="line">    --privileged \</span><br><span class="line">    -d \</span><br><span class="line">    mongo</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li><code>--name leyou-mongo</code>：容器名称是<code>leyou-mongo</code></li><li>卷信息：<ul><li><code>-v mongo-config:/data/configdb/</code>：存放mongodv中配置信息的卷</li><li><code>-v mongo-db:/data/db/</code>：存放mongodv中数据信息的卷</li></ul></li><li><code>--privileged</code>：授予逻辑卷访问权限</li><li>端口信息：<ul><li><code>-p 27017:27017</code>：mongodb的端口</li></ul></li><li><code>mongo</code>：使用的镜像名称</li></ul><h3 id="1-2-4-运行GrayLog容器"><a href="#1-2-4-运行GrayLog容器" class="headerlink" title="1.2.4.运行GrayLog容器"></a>1.2.4.运行GrayLog容器</h3><p>命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name leyou-log \</span><br><span class="line">    --link leyou-mongo:mongo \</span><br><span class="line">    -p 9000:9000 \</span><br><span class="line">    -p 12201:12201/udp \</span><br><span class="line">    -e GRAYLOG_HTTP_EXTERNAL_URI=http://192.168.206.99:9000/ \</span><br><span class="line">    -e GRAYLOG_ELASTICSEARCH_HOSTS=http://192.168.206.99:9201/ \</span><br><span class="line">    -e GRAYLOG_ROOT_TIMEZONE=<span class="string">&quot;Asia/Shanghai&quot;</span>  \</span><br><span class="line">    -e GRAYLOG_WEB_ENDPOINT_URI=<span class="string">&quot;http://192.168.206.99:9000/:9000/api&quot;</span> \</span><br><span class="line">    -e GRAYLOG_PASSWORD_SECRET=<span class="string">&quot;somepasswordpepper&quot;</span> \</span><br><span class="line">    -e GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918 \</span><br><span class="line">    -d \</span><br><span class="line">    graylog3</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li><code>--name leyou-log</code>：容器名称是<code>leyou-log</code></li><li><code>--link leyou-mongo:mongo</code>：连接另一个容器，因为GrayLog依赖于MongoDB，因此需要指定另一个容器信息，格式：<code>容器名称:镜像版本</code></li><li>环境变量<ul><li><code>-e GRAYLOG_HTTP_EXTERNAL_URI=http://192.168.150.101:9000/</code>：对外开放的ip和端口信息，这里用9000端口</li><li><code>-e GRAYLOG_ELASTICSEARCH_HOSTS=http://192.168.150.101:9201/</code>：GrayLog依赖于ES，这里指定ES的地址</li><li><code>-e GRAYLOG_WEB_ENDPOINT_URI=&quot;http://192.168.150.101:9000/:9000/api&quot;</code>：对外开放的API地址</li><li><code>-e GRAYLOG_PASSWORD_SECRET=&quot;somepasswordpepper&quot;</code>：密码加密的秘钥</li><li><code>-e GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918</code>：密码加密后的密文。明文是<code>admin</code>，账户也是<code>admin</code></li><li><code>-e GRAYLOG_ROOT_TIMEZONE=&quot;Asia/Shanghai&quot;</code>：GrayLog容器内时区</li></ul></li><li>端口信息：<ul><li><code>-p 9000:9000</code>：GrayLog的http服务端口，9000</li><li><code>-p 12201:12201/udp</code>：GrayLog的UDP协议端口，用于接收从微服务发来的日志信息</li></ul></li><li><code>graylog3</code>：使用的镜像名称</li></ul><p>如果看到这个信息，代表启动成功：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111180857520.png" alt="image-20200111180857520"></p><p>或者在终端中敲入命令行<strong>：docker logs leyou-log, 看到successfully  就表示启动成功</strong>，然后使用9000端口进行浏览器访问!!!!!</p><h2 id="1-3-设置日志收集器"><a href="#1-3-设置日志收集器" class="headerlink" title="1.3.设置日志收集器"></a>1.3.设置日志收集器</h2><h3 id="1-3-1-登录控制台"><a href="#1-3-1-登录控制台" class="headerlink" title="1.3.1.登录控制台"></a>1.3.1.登录控制台</h3><p>在浏览器中输入：<a href="http://192.168.206.99:9000即可访问：">http://192.168.206.99:9000即可访问：</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200806230912294.png" alt="image-20200806230912294"></p><p>输入账户和密码，都是<code>admin</code>，进入首页，不过因为没有数据，看不到日志信息，而是欢迎界面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110141209558.png" alt="image-20200110141209558"></p><h3 id="1-3-2-配置Inputs"><a href="#1-3-2-配置Inputs" class="headerlink" title="1.3.2.配置Inputs"></a>1.3.2.配置Inputs</h3><p>在页面点击<code>System</code>菜单，选择<code>Inputs</code></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110141338638.png" alt="image-20200110141338638"></p><p>在页面的下拉选框中，选择<code>GELF UDP</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110141447592.png" alt="image-20200110141447592"></p><p>然后点击<code>Launch new input</code>按钮：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110141537910.png" alt="image-20200110141537910"> </p><p>会弹出表单窗口：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110141845482.png" alt="image-20200110141845482"> </p><p>填写表单，点击<code>Save</code>保存即可。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110142140278.png" alt="image-20200110142140278"></p><p>注意：这里UDP的端口是<code>12201</code>.</p><p><strong>接着下面写一个客户端，将我们的客户端日志信息写到已经启动并配置好了的graylog中去！</strong></p><h2 id="1-4-SpringBoot集成"><a href="#1-4-SpringBoot集成" class="headerlink" title="1.4.SpringBoot集成"></a>1.4.SpringBoot集成</h2><p>现在，GrayLog的服务端日志收集器已经准备好，我们还需要在项目中添加GrayLog的客户端，将项目日志<strong>发送到GrayLog服务中，保存到ElasticSearch。</strong></p><p>基本步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1.引入GrayLog客户端依赖</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2.配置Logback，集成GrayLog的Appender</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3.启动并测试</span></span><br></pre></td></tr></table></figure><p>我们以注册中心<code>ly-registry</code>为例：</p><h3 id="1-4-1-引入依赖"><a href="#1-4-1-引入依赖" class="headerlink" title="1.4.1.引入依赖"></a>1.4.1.引入依赖</h3><p>这个是第三方提供的GrayLog依赖，并不是GrayLog官网。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>biz.paluch.logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-gelf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-2-配置Logback"><a href="#1-4-2-配置Logback" class="headerlink" title="1.4.2.配置Logback"></a>1.4.2.配置Logback</h3><p>在项目的<code>resources</code>目录中，添加文件<code>logback.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;GELF&quot;</span> <span class="attr">class</span>=<span class="string">&quot;biz.paluch.logging.gelf.logback.GelfLogbackAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--GrayLog服务地址  ##############--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">host</span>&gt;</span>udp:192.168.206.99<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--GrayLog服务端口--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>12201<span class="tag">&lt;/<span class="name">port</span>&gt;</span>   <span class="comment">&lt;!--对应graylog容器启动时的端口##############--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当前服务名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">facility</span>&gt;</span>ly-registry<span class="tag">&lt;/<span class="name">facility</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extractStackTrace</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extractStackTrace</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filterStackTrace</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filterStackTrace</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mdcProfiling</span>&gt;</span>true<span class="tag">&lt;/<span class="name">mdcProfiling</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timestampPattern</span>&gt;</span>yyyy-MM-dd HH:mm:ss,SSS<span class="tag">&lt;/<span class="name">timestampPattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maximumMessageSize</span>&gt;</span>8192<span class="tag">&lt;/<span class="name">maximumMessageSize</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.leyou&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;GELF&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;GELF&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110143105420.png" alt="image-20200110143105420"> </p><h3 id="1-4-3-启动测试"><a href="#1-4-3-启动测试" class="headerlink" title="1.4.3.启动测试"></a>1.4.3.启动测试</h3><p>启动<code>ly-registry</code>项目，然后访问刚才的： <a href="http://192.168.206.99:9000，然后点击search按钮即可看到结果：">http://192.168.206.99:9000，然后点击search按钮即可看到结果：</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200806232147420.png" alt="image-20200806232147420"></p><p>这个页面可以对日志做各种搜索和过滤（<strong>底层是对elasticSearch进行搜索</strong>）</p><h2 id="1-5-日志回收策略"><a href="#1-5-日志回收策略" class="headerlink" title="1.5.日志回收策略"></a>1.5.日志回收策略</h2><p>到此graylog的基础配置就算完成了，已经可以收到日志数据。</p><p>但是在实际工作中，服务日志会非常多，这么多的日志，如果不进行存储限制，那么不久就会占满磁盘，查询变慢等等，而且过久的历史日志对于实际工作中的有效性也会很低。</p><p>Graylog则自身集成了日志数据限制的配置，可以通过如下进行设置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110144425302.png" alt="image-20200110144425302"></p><p>选择<code>Default index set</code>的<code>Edit</code>按钮：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110144531385.png" alt="image-20200110144531385"></p><p>GrayLog有3种日志回收限制，触发以后就会开始回收空间，删除索引：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110145043659.png" alt="image-20200110145043659"> </p><p>分别是：</p><ul><li><code>Index Message Count</code>：按照日志数量统计，默认超过<code>1000000</code>条日志开始清理</li><li><code>Index Size</code>：按照日志大小统计，默认超过<code>1GB</code>开始清理</li><li><code>Index Time</code>：按照日志日期清理，默认日志存储1天</li></ul><h2 id="1-6-搜索语法"><a href="#1-6-搜索语法" class="headerlink" title="1.6.搜索语法"></a>1.6.搜索语法</h2><p>在search页面，可以完成基本的日志搜索功能：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111180313985.png" alt="image-20200111180313985"></p><h3 id="1）搜索语法"><a href="#1）搜索语法" class="headerlink" title="1）搜索语法"></a>1）搜索语法</h3><p>搜索语法非常简单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名:搜索关键字</span><br></pre></td></tr></table></figure><p>例如：<code>level:3</code>代表搜索日志级别<code>level</code>为<code>3</code>的日志，即错误日志。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110151807560.png" alt="image-20200110151807560"> </p><h3 id="2）字段选择"><a href="#2）字段选择" class="headerlink" title="2）字段选择"></a>2）字段选择</h3><p>GrayLog存储的日志字段比较多，包括：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110152040832.png" alt="image-20200110152040832"> </p><p>可以自由选择需要展示的字段，搜索结果如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111180143471.png" alt="image-20200111180143471"></p><h2 id="1-7-日志统计仪表盘"><a href="#1-7-日志统计仪表盘" class="headerlink" title="1.7.日志统计仪表盘"></a>1.7.日志统计仪表盘</h2><p>GrayLog支持把日志按照自己需要的方式形成统计报表，并把许多报表组合一起，形成DashBoard（仪表盘），方便对日志统计分析。</p><h3 id="1-7-1-创建仪表盘"><a href="#1-7-1-创建仪表盘" class="headerlink" title="1.7.1.创建仪表盘"></a>1.7.1.创建仪表盘</h3><p>进入仪表盘页面，创建一个仪表盘</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110152322152.png" alt="image-20200110152322152"></p><p>在弹出的表单中填写信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110152530496.png" alt="image-20200110152530496"> </p><p>保存。</p><h3 id="1-7-2-添加结果到仪表盘"><a href="#1-7-2-添加结果到仪表盘" class="headerlink" title="1.7.2.添加结果到仪表盘"></a>1.7.2.添加结果到仪表盘</h3><p>回到search页面，然后找到Fields部分，点击任意字段，即可添加统计信息。</p><p>比如：点击<code>facility</code>字段，根据应用名称来统计：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110153253946.png" alt="image-20200110153253946"> </p><p>选择<code>Quick values</code>，在页面展示结果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110153338398.png" alt="image-20200110153338398"></p><p>然后点击<code>Add to dashboard</code>，选择乐优商城：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110153428198.png" alt="image-20200110153428198"></p><p>在弹出的窗口中，添加一个标题：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110153601194.png" alt="image-20200110153601194"> </p><p>按照这种方式，添加大量数据到仪表盘即可。</p><p>此时，进入仪表盘，可以看到很多统计信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200110160042271.png" alt="image-20200110160042271"></p><p>详细配置，可以参考官方文档：<a href="http://docs.graylog.org/en/latest/pages/extended_search.html">http://docs.graylog.org/en/latest/pages/extended_search.html</a></p><h2 id="1-8-了解FileBeats（了解）"><a href="#1-8-了解FileBeats（了解）" class="headerlink" title="1.8.了解FileBeats（了解）"></a>1.8.了解FileBeats（了解）</h2><p>上面的日志收集器是通过SpringBoot中整合GrayLog的插件来完成，还有一种比较流行的方式，是使用Elastic的FileBeat（<a href="https://www.elastic.co/guide/en/beats/filebeat/current/index.html%EF%BC%89%E4%BA%A7%E5%93%81%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AF%BB%E5%8F%96%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E3%80%82%E5%8F%AF%E4%BB%A5%E6%94%AF%E6%8C%81%E5%90%84%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E3%80%82">https://www.elastic.co/guide/en/beats/filebeat/current/index.html）产品，直接读取日志文件。可以支持各种不同的日志文件格式。</a></p><p>GrayLog通过一种叫做Beats的Inputs类型来接受FileBeat：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111165847338.png" alt="image-20200111165847338"> </p><p>不过，怎样让FileBeat收集的日志被格式化为GrayLog需要的格式呢？这就需要GrayLog提供的SideCar来实现：<a href="http://docs.graylog.org/en/3.1/pages/sidecar.html#">http://docs.graylog.org/en/3.1/pages/sidecar.html#</a></p><p>实现流程如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111170101709.png" alt="image-20200111170101709"></p><p>流程步骤：</p><ul><li>通过wxlog或者FileBeats收集日志数据，交给GrayLog的SideCar</li><li>通过GrayLog的SideCar对数据处理，发送到GrayLog的INPUTS</li><li>GrayLog将数据存储到ElasticSearch中</li></ul><p>这种方式的优点：</p><ul><li>无需在应用中编程或配置，与应用解耦合，没有侵入</li><li>日志收集是独立进程，不影响应用的性能</li></ul><p>缺点：</p><ul><li>配置复杂</li></ul><p>综上所述，生产环境下适合用这种beats方式来收集日志。</p><h1 id="2-APM系统SkyWalking"><a href="#2-APM系统SkyWalking" class="headerlink" title="2.APM系统SkyWalking"></a>2.APM系统SkyWalking</h1><p>参考文档：<a href="https://www.cnblogs.com/xiaoqi/p/apm.html">https://www.cnblogs.com/xiaoqi/p/apm.html</a></p><h2 id="2-1-什么是APM"><a href="#2-1-什么是APM" class="headerlink" title="2.1.什么是APM"></a>2.1.什么是APM</h2><p>随着微服务架构的流行，一次请求往往需要涉及到多个服务，因此<strong>服务性能监控和排查</strong>就变得更复杂：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">不同的服务可能由不同的团队开发、甚至可能使用不同的编程语言来实现</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">服务有可能布在了几千台服务器，横跨多个不同的数据中心</span></span><br></pre></td></tr></table></figure><p>因此，就需要一些可以帮助理解系统行为、用于分析性能问题的工具，以便发生故障的时候，能够快速定位和解决问题，这就是APM系统，全称是（<strong>A</strong>pplication <strong>P</strong>erformance <strong>M</strong>onitor，当然也有叫 <strong>A</strong>pplication <strong>P</strong>erformance <strong>M</strong>anagement tools）</p><p>AMP最早是谷歌公开的论文提到的 <a href="http://bigbully.github.io/Dapper-translation">Google Dapper</a>。Dapper是Google生产环境下的分布式跟踪系统，自从Dapper发展成为一流的监控系统之后，给google的开发者和运维团队帮了大忙，所以谷歌公开论文分享了Dapper。</p><h3 id="2-1-1-面临的问题"><a href="#2-1-1-面临的问题" class="headerlink" title="2.1.1.面临的问题"></a>2.1.1.面临的问题</h3><p><strong>在google的首页页面，提交一个查询请求后，会经历什么：</strong></p><ul><li>可能对上百台查询服务器发起了一个Web查询，每一个查询都有自己的Index</li><li>这个查询可能会被发送到多个的子系统，这些子系统分别用来处理广告、进行拼写检查或是查找一些像图片、视频或新闻这样的特殊结果</li><li>根据每个子系统的查询结果进行筛选，得到最终结果，最后汇总到页面上</li></ul><p>总结一下：</p><ul><li>1   一次全局搜索有可能调用上千台服务器，涉及各种服务。</li><li>2   用户对搜索的耗时是很敏感的，而任何一个子系统的低效都导致导致最终的搜索耗时</li></ul><p><strong>如果一次查询耗时不正常，工程师怎么来排查到底是由哪个服务调用造成的？</strong></p><ul><li>首先，这个工程师可能无法准确的定位到这次全局搜索是调用了哪些服务，因为新的服务、乃至服务上的某个片段，都有可能在任何时间上过线或修改过，有可能是面向用户功能，也有可能是一些例如针对性能或安全认证方面的功能改进</li><li>其次，你不能苛求这个工程师对所有参与这次全局搜索的服务都了如指掌，每一个服务都有可能是由不同的团队开发或维护的</li><li>再次，这些暴露出来的服务或服务器有可能同时还被其他客户端使用着，所以这次全局搜索的性能问题甚至有可能是由其他应用造成的</li></ul><p>从上面可以看出Dapper需要：</p><ul><li>无所不在的部署，无所不在的重要性不言而喻，因为在使用跟踪系统的进行监控时，即便只有一小部分没被监控到，那么人们对这个系统是不是值得信任都会产生巨大的质疑</li><li>持续的监控</li></ul><h3 id="2-1-2-APM的目标"><a href="#2-1-2-APM的目标" class="headerlink" title="2.1.2.APM的目标"></a>2.1.2.APM的目标</h3><ul><li><p><strong>性能消耗低</strong></p><ul><li>APM组件服务的影响应该做到足够小。<strong>服务调用埋点本身会带来性能损耗，这就需要调用跟踪的低损耗，实际中还会通过配置采样率的方式，选择一部分请求去分析请求路径</strong>。在一些高度优化过的服务，即使一点点损耗也会很容易察觉到，而且有可能迫使在线服务的部署团队不得不将跟踪系统关停。</li></ul></li><li><p><strong>应用透明</strong>，也就是<strong>代码的侵入性小</strong></p><ul><li>即也作为业务组件，应当尽可能少入侵或者无入侵其他业务系统，对于使用方透明，减少开发人员的负担。</li><li>对于应用的程序员来说，是不需要知道有跟踪系统这回事的。如果一个跟踪系统想生效，就必须需要依赖应用的开发者主动配合，那么这个跟踪系统也太脆弱了，往往由于跟踪系统在应用中植入代码的bug或疏忽导致应用出问题，这样才是无法满足对跟踪系统“无所不在的部署”这个需求。</li></ul></li><li><p><strong>可扩展性</strong></p><ul><li><strong>一个优秀的调用跟踪系统必须支持分布式部署，具备良好的可扩展性。能够支持的组件越多当然越好</strong>。或者提供便捷的插件开发API，对于一些没有监控到的组件，应用开发者也可以自行扩展。</li></ul></li><li><p><strong>数据的分析</strong></p><ul><li><strong>数据的分析要快 ，分析的维度尽可能多</strong>。跟踪系统能提供足够快的信息反馈，就可以对生产环境下的异常状况做出快速反应。<strong>分析的全面，能够避免二次开发</strong>。</li></ul></li></ul><h3 id="2-1-3-APM的原理"><a href="#2-1-3-APM的原理" class="headerlink" title="2.1.3.APM的原理"></a>2.1.3.APM的原理</h3><p>先来看一次请求调用示例：</p><ol><li>包括：前端（A），两个中间层（B和C），以及两个后端（D和E）</li><li>当用户发起一个请求时，首先到达前端A服务，然后分别对B服务和C服务进行RPC调用；</li><li>B服务处理完给A做出响应，但是C服务还需要和后端的D服务和E服务交互之后再返还给A服务，最后由A服务来响应用户的请求；</li></ol><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111105854727.png" alt="image-20200111105854727"> </p><p>如何才能实现跟踪呢？需要明白下面几个概念：</p><ul><li><strong>探针</strong>：负责在客户端程序运行时搜索服务调用链路信息，发送给收集器</li><li>收集器：负责将数据格式化，保存到存储器</li><li>存储器：保存数据</li><li>UI界面：统计并展示</li></ul><p>探针会在链路追踪时记录每次调用的信息，Span是<strong>基本单元</strong>，一次链路调用（可以是RPC，DB等没有特定的限制）创建一个span，通过一个64位ID标识它；同时附加（Annotation）作为payload负载信息，用于记录性能等数据。</p><p>一个Span的基本数据结构：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">type Span <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    TraceID    int64 <span class="comment">// 用于标示一次完整的请求id</span></span><br><span class="line">    Name       string</span><br><span class="line">    ID         int64 <span class="comment">// 当前这次调用span_id</span></span><br><span class="line">    ParentID   int64 <span class="comment">// 上层服务的调用span_id  最上层服务parent_id为null，代表根服务root</span></span><br><span class="line">    Annotation []Annotation <span class="comment">// 记录性能等数据</span></span><br><span class="line">    Debug      <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一次请求的每个链路，通过spanId、parentId就能串联起来：</strong></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111112325019.png" alt="image-20200111112325019"> </p><p>当然，从请求到服务器开始，服务器返回response结束，<strong>每个span存在相同的唯一标识trace_id</strong>。</p><h3 id="2-1-3-APM系统的选型"><a href="#2-1-3-APM系统的选型" class="headerlink" title="2.1.3.APM系统的选型"></a>2.1.3.APM系统的选型</h3><p>市面上的全链路监控理论模型大多都是借鉴Google Dapper论文，重点关注以下三种APM组件：</p><ul><li>**<a href="https://link.juejin.im/?target=http://zipkin.io/">Zipkin</a>**：由Twitter公司开源，开放源代码分布式的跟踪系统，用于收集服务的定时数据，以解决微服务架构中的延迟问题，包括：数据的收集、存储、查找和展现。</li><li>**<a href="https://pinpoint.com/">Pinpoint</a>**：一款对Java编写的大规模分布式系统的APM工具，由韩国人开源的分布式跟踪组件。</li><li>**<a href="https://skywalking.apache.org/zh/">Skywalking</a>**：国产的优秀APM组件，是一个对JAVA分布式应用程序集群的业务运行情况进行追踪、告警和分析的系统。现在是Apache的顶级项目之一</li></ul><p>选项就是对比各个系统的使用差异，主要对比项：</p><ol><li><p><strong>探针的性能</strong></p><p>主要是agent对服务的吞吐量、CPU和内存的影响。微服务的规模和动态性使得数据收集的成本大幅度提高。</p></li><li><p><strong>collector的可扩展性</strong></p><p>能够水平扩展以便支持大规模服务器集群。</p></li><li><p><strong>全面的调用链路数据分析</strong></p><p>提供代码级别的可见性以便轻松定位失败点和瓶颈。</p></li><li><p><strong>对于开发透明，容易开关</strong></p><p>添加新功能而无需修改代码，容易启用或者禁用。</p></li><li><p><strong>完整的调用链应用拓扑</strong></p><p>自动检测应用拓扑，帮助你搞清楚应用的架构</p></li></ol><p>三者对比如下：</p><table><thead><tr><th>对比项</th><th>zipkin</th><th>pinpoint</th><th>skywalking</th></tr></thead><tbody><tr><td>探针性能</td><td>中</td><td>低</td><td><strong>高</strong></td></tr><tr><td>collector扩展性</td><td><strong>高</strong></td><td>中</td><td><strong>高</strong></td></tr><tr><td>调用链路数据分析</td><td>低</td><td><strong>高</strong></td><td>中</td></tr><tr><td>对开发透明性</td><td>中</td><td><strong>高</strong></td><td><strong>高</strong></td></tr><tr><td>调用链应用拓扑</td><td>中</td><td><strong>高</strong></td><td>中</td></tr><tr><td>社区支持</td><td><strong>高</strong></td><td>中</td><td><strong>高</strong></td></tr></tbody></table><p>综上所述，<strong>使用skywalking是最佳的选择。</strong></p><h2 id="2-2-Skywalking介绍"><a href="#2-2-Skywalking介绍" class="headerlink" title="2.2.Skywalking介绍"></a>2.2.Skywalking介绍</h2><p><strong>SkyWalking</strong> 创建与2015年，提供分布式追踪功能。从5.x开始，项目进化为一个完成功能的Application Performance Management系统。<br>他被用于追踪、监控和诊断分布式系统，特别是使用微服务架构，云原生或容积技术。提供以下主要功能：</p><ul><li>分布式追踪和上下文传输</li><li>应用、实例、服务性能指标分析</li><li>根源分析</li><li>应用拓扑分析</li><li>应用和服务依赖分析</li><li>慢服务检测</li><li>性能优化</li></ul><p>官网地址：<a href="http://skywalking.apache.org/">http://skywalking.apache.org/</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111114027257.png" alt="image-20200111114027257"></p><p>主要的特征：</p><ul><li><p>多语言探针或类库</p><ul><li>Java自动探针，追踪和监控程序时，不需要修改源码。</li><li>社区提供的其他多语言探针<ul><li><a href="https://github.com/OpenSkywalking/skywalking-netcore">.NET Core</a></li><li><a href="https://github.com/OpenSkywalking/skywalking-nodejs">Node.js</a></li></ul></li></ul></li><li><p><strong>多种后端存储</strong>： <strong>ElasticSearch</strong>， H2</p></li><li><p>支持</p><p>OpenTracing</p><ul><li>Java自动探针支持和OpenTracing API协同工作</li></ul></li><li><p>轻量级、完善功能的后端聚合和分析</p></li><li><p>现代化Web UI</p></li><li><p>日志集成</p></li><li><p>应用、实例和服务的告警</p></li></ul><h2 id="2-3-结构图"><a href="#2-3-结构图" class="headerlink" title="2.3.结构图"></a>2.3.结构图</h2><p>先来看下Skywalking的官方给出的结构图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111115215608.png" alt="image-20200111115215608"></p><p>大致分四个部分：</p><ul><li>skywalking-oap-server：就是<strong>O</strong>bservability <strong>A</strong>nalysis <strong>P</strong>latformd的服务，用来收集和处理探针发来的数据</li><li>skywalking-UI：就是skywalking提供的Web UI 服务，图形化方式展示服务链路、拓扑图、trace、性能监控等</li><li>agent：探针，获取服务调用的链路信息、性能信息，发送到skywalking的OAP服务</li><li>Storage：存储，<strong>一般选择elasticsearch</strong></li></ul><p>因此我们安装部署也从这四个方面入手，不过elasticsearch已经安装完成，还剩下3个。</p><h2 id="2-4-安装OAP和UI服务"><a href="#2-4-安装OAP和UI服务" class="headerlink" title="2.4.安装OAP和UI服务"></a>2.4.安装OAP和UI服务</h2><h3 id="1）上传安装包"><a href="#1）上传安装包" class="headerlink" title="1）上传安装包"></a>1）上传安装包</h3><p>官方推荐的是源码安装，因此我们已经下载好了安装包：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111115820178.png" alt="image-20200111115820178"> </p><p>我们上传到虚拟机的 <code>/usr/local/src</code>目录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111120021528.png" alt="image-20200111120021528"> </p><h3 id="2）解压"><a href="#2）解压" class="headerlink" title="2）解压"></a>2）解压</h3><p>解压安装包，并重命名为skywalking：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xvf apache-skywalking-apm-6.5.0.tar.gz</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111120247193.png" alt="image-20200111120247193"> </p><p>目录结构：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111120507790.png" alt="image-20200111120507790"> </p><h3 id="3）修改配置"><a href="#3）修改配置" class="headerlink" title="3）修改配置"></a>3）修改配置</h3><p>进入<code>config</code>目录，修改<code>application.yml</code>，主要是把存储方案从h2改为elasticsearch</p><p>建议直接使用下面的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"># or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"># distributed with this work for additional information</span></span><br><span class="line"><span class="comment"># regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"># to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"># &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"># with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cluster:</span></span><br><span class="line">  <span class="attr">standalone:</span></span><br><span class="line"><span class="attr">core:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="comment"># Mixed: Receive agent data, Level 1 aggregate, Level 2 aggregate</span></span><br><span class="line">    <span class="comment"># Receiver: Receive agent data, Level 1 aggregate</span></span><br><span class="line">    <span class="comment"># Aggregator: Level 2 aggregate</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">$&#123;SW_CORE_ROLE:Mixed&#125;</span> <span class="comment"># Mixed/Receiver/Aggregator</span></span><br><span class="line">    <span class="attr">restHost:</span> <span class="string">$&#123;SW_CORE_REST_HOST:0.0.0.0&#125;</span></span><br><span class="line">    <span class="attr">restPort:</span> <span class="string">$&#123;SW_CORE_REST_PORT:12800&#125;</span></span><br><span class="line">    <span class="attr">restContextPath:</span> <span class="string">$&#123;SW_CORE_REST_CONTEXT_PATH:/&#125;</span></span><br><span class="line">    <span class="attr">gRPCHost:</span> <span class="string">$&#123;SW_CORE_GRPC_HOST:0.0.0.0&#125;</span></span><br><span class="line">    <span class="attr">gRPCPort:</span> <span class="string">$&#123;SW_CORE_GRPC_PORT:11800&#125;</span></span><br><span class="line">    <span class="attr">downsampling:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Hour</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Day</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Month</span></span><br><span class="line">    <span class="comment"># Set a timeout on metrics data. After the timeout has expired, the metrics data will automatically be deleted.</span></span><br><span class="line">    <span class="attr">enableDataKeeperExecutor:</span> <span class="string">$&#123;SW_CORE_ENABLE_DATA_KEEPER_EXECUTOR:true&#125;</span> <span class="comment"># Turn it off then automatically metrics data delete will be close.</span></span><br><span class="line">    <span class="attr">dataKeeperExecutePeriod:</span> <span class="string">$&#123;SW_CORE_DATA_KEEPER_EXECUTE_PERIOD:5&#125;</span> <span class="comment"># How often the data keeper executor runs periodically, unit is minute</span></span><br><span class="line">    <span class="attr">recordDataTTL:</span> <span class="string">$&#123;SW_CORE_RECORD_DATA_TTL:90&#125;</span> <span class="comment"># Unit is minute</span></span><br><span class="line">    <span class="attr">minuteMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_MINUTE_METRIC_DATA_TTL:90&#125;</span> <span class="comment"># Unit is minute</span></span><br><span class="line">    <span class="attr">hourMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_HOUR_METRIC_DATA_TTL:36&#125;</span> <span class="comment"># Unit is hour</span></span><br><span class="line">    <span class="attr">dayMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_DAY_METRIC_DATA_TTL:45&#125;</span> <span class="comment"># Unit is day</span></span><br><span class="line">    <span class="attr">monthMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_MONTH_METRIC_DATA_TTL:18&#125;</span> <span class="comment"># Unit is month</span></span><br><span class="line">    <span class="comment"># Cache metric data for 1 minute to reduce database queries, and if the OAP cluster changes within that minute,</span></span><br><span class="line">    <span class="comment"># the metrics may not be accurate within that minute.</span></span><br><span class="line">    <span class="attr">enableDatabaseSession:</span> <span class="string">$&#123;SW_CORE_ENABLE_DATABASE_SESSION:true&#125;</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"> <span class="attr">elasticsearch:</span></span><br><span class="line">   <span class="attr">nameSpace:</span> <span class="string">$&#123;SW_NAMESPACE:&quot;docker-cluster&quot;&#125;</span></span><br><span class="line">   <span class="attr">clusterNodes:</span> <span class="string">$&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9201&#125;</span></span><br><span class="line">   <span class="attr">protocol:</span> <span class="string">$&#123;SW_STORAGE_ES_HTTP_PROTOCOL:&quot;http&quot;&#125;</span></span><br><span class="line">   <span class="attr">trustStorePath:</span> <span class="string">$&#123;SW_SW_STORAGE_ES_SSL_JKS_PATH:&quot;../es_keystore.jks&quot;&#125;</span></span><br><span class="line">   <span class="attr">trustStorePass:</span> <span class="string">$&#123;SW_SW_STORAGE_ES_SSL_JKS_PASS:&quot;&quot;&#125;</span></span><br><span class="line">   <span class="attr">user:</span> <span class="string">$&#123;SW_ES_USER:&quot;&quot;&#125;</span></span><br><span class="line">   <span class="attr">password:</span> <span class="string">$&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span></span><br><span class="line">   <span class="attr">indexShardsNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:2&#125;</span></span><br><span class="line">   <span class="attr">indexReplicasNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:0&#125;</span></span><br><span class="line">   <span class="comment"># Those data TTL settings will override the same settings in core module.</span></span><br><span class="line">   <span class="attr">recordDataTTL:</span> <span class="string">$&#123;SW_STORAGE_ES_RECORD_DATA_TTL:1&#125;</span> <span class="comment"># Unit is day</span></span><br><span class="line">   <span class="attr">otherMetricsDataTTL:</span> <span class="string">$&#123;SW_STORAGE_ES_OTHER_METRIC_DATA_TTL:25&#125;</span> <span class="comment"># Unit is day</span></span><br><span class="line">   <span class="attr">monthMetricsDataTTL:</span> <span class="string">$&#123;SW_STORAGE_ES_MONTH_METRIC_DATA_TTL:1&#125;</span> <span class="comment"># Unit is month</span></span><br><span class="line">   <span class="comment"># Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html</span></span><br><span class="line">   <span class="attr">bulkActions:</span> <span class="string">$&#123;SW_STORAGE_ES_BULK_ACTIONS:1000&#125;</span> <span class="comment"># Execute the bulk every 1000 requests</span></span><br><span class="line">   <span class="attr">flushInterval:</span> <span class="string">$&#123;SW_STORAGE_ES_FLUSH_INTERVAL:10&#125;</span> <span class="comment"># flush the bulk every 10 seconds whatever the number of requests</span></span><br><span class="line">   <span class="attr">concurrentRequests:</span> <span class="string">$&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125;</span> <span class="comment"># the number of concurrent requests</span></span><br><span class="line">   <span class="attr">resultWindowMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_MAX_WINDOW_SIZE:10000&#125;</span></span><br><span class="line">   <span class="attr">metadataQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line">   <span class="attr">segmentQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200&#125;</span></span><br><span class="line"><span class="attr">receiver-sharing-server:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">receiver-register:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">receiver-trace:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">bufferPath:</span> <span class="string">$&#123;SW_RECEIVER_BUFFER_PATH:../trace-buffer/&#125;</span>  <span class="comment"># Path to trace buffer files, suggest to use absolute path</span></span><br><span class="line">    <span class="attr">bufferOffsetMaxFileSize:</span> <span class="string">$&#123;SW_RECEIVER_BUFFER_OFFSET_MAX_FILE_SIZE:100&#125;</span> <span class="comment"># Unit is MB</span></span><br><span class="line">    <span class="attr">bufferDataMaxFileSize:</span> <span class="string">$&#123;SW_RECEIVER_BUFFER_DATA_MAX_FILE_SIZE:500&#125;</span> <span class="comment"># Unit is MB</span></span><br><span class="line">    <span class="attr">bufferFileCleanWhenRestart:</span> <span class="string">$&#123;SW_RECEIVER_BUFFER_FILE_CLEAN_WHEN_RESTART:false&#125;</span></span><br><span class="line">    <span class="attr">sampleRate:</span> <span class="string">$&#123;SW_TRACE_SAMPLE_RATE:10000&#125;</span> <span class="comment"># The sample rate precision is 1/10000. 10000 means 100% sample in default.</span></span><br><span class="line">    <span class="attr">slowDBAccessThreshold:</span> <span class="string">$&#123;SW_SLOW_DB_THRESHOLD:default:200,mongodb:100&#125;</span> <span class="comment"># The slow database access thresholds. Unit ms.</span></span><br><span class="line"><span class="attr">receiver-jvm:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">receiver-clr:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">service-mesh:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">bufferPath:</span> <span class="string">$&#123;SW_SERVICE_MESH_BUFFER_PATH:../mesh-buffer/&#125;</span>  <span class="comment"># Path to trace buffer files, suggest to use absolute path</span></span><br><span class="line">    <span class="attr">bufferOffsetMaxFileSize:</span> <span class="string">$&#123;SW_SERVICE_MESH_OFFSET_MAX_FILE_SIZE:100&#125;</span> <span class="comment"># Unit is MB</span></span><br><span class="line">    <span class="attr">bufferDataMaxFileSize:</span> <span class="string">$&#123;SW_SERVICE_MESH_BUFFER_DATA_MAX_FILE_SIZE:500&#125;</span> <span class="comment"># Unit is MB</span></span><br><span class="line">    <span class="attr">bufferFileCleanWhenRestart:</span> <span class="string">$&#123;SW_SERVICE_MESH_BUFFER_FILE_CLEAN_WHEN_RESTART:false&#125;</span></span><br><span class="line"><span class="attr">istio-telemetry:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">envoy-metric:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="comment">#    alsHTTPAnalysis: $&#123;SW_ENVOY_METRIC_ALS_HTTP_ANALYSIS:k8s-mesh&#125;</span></span><br><span class="line"><span class="comment">#receiver_zipkin:</span></span><br><span class="line"><span class="comment">#  default:</span></span><br><span class="line"><span class="comment">#    host: $&#123;SW_RECEIVER_ZIPKIN_HOST:0.0.0.0&#125;</span></span><br><span class="line"><span class="comment">#    port: $&#123;SW_RECEIVER_ZIPKIN_PORT:9411&#125;</span></span><br><span class="line"><span class="comment">#    contextPath: $&#123;SW_RECEIVER_ZIPKIN_CONTEXT_PATH:/&#125;</span></span><br><span class="line"><span class="attr">query:</span></span><br><span class="line">  <span class="attr">graphql:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">$&#123;SW_QUERY_GRAPHQL_PATH:/graphql&#125;</span></span><br><span class="line"><span class="attr">alarm:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line"><span class="attr">telemetry:</span></span><br><span class="line">  <span class="attr">none:</span></span><br><span class="line"><span class="attr">configuration:</span></span><br><span class="line">  <span class="attr">none:</span></span><br></pre></td></tr></table></figure><p><strong>注意elasticsearch的ip和端口</strong></p><p>安装JDK，上传jdk到/usr/local/src目录，解压，配置环境变量</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200807112440912.png" alt="image-20200807112440912"></p><h3 id="4）启动"><a href="#4）启动" class="headerlink" title="4）启动"></a>4）启动</h3><p>要确保已经启动了elasticsearch，并且防火墙已经关闭。</p><p><strong>启动时如果没有效果，先配置java环境变量</strong></p><p>进入<code>bin</code>目录，执行命令即可运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh &amp;&amp; tail -f ../logs/skywalking-oap-server.log </span><br><span class="line"></span><br><span class="line">或者先</span><br><span class="line">./startup.sh</span><br><span class="line">然后</span><br><span class="line"><span class="built_in">cd</span> ../logs</span><br><span class="line">tail -f skywalking-oap-server.log </span><br><span class="line">然后等一段时间才能启动成功！</span><br></pre></td></tr></table></figure><p>默认的UI端口是8080，可以访问：<a href="http://192.168.206.99:8080/">http://192.168.206.99:8080</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200807000730230.png" alt="image-20200807000730230"></p><h2 id="2-5-微服务探针"><a href="#2-5-微服务探针" class="headerlink" title="2.5.微服务探针"></a>2.5.微服务探针</h2><p>现在，<strong>Skywalking的服务端已经启动完成</strong>，我们还<strong>需要在微服务中加入服务探针</strong>，来收集数据。</p><h3 id="1）解压9"><a href="#1）解压9" class="headerlink" title="1）解压9"></a>1）解压9</h3><p>首先，将课前资料给的压缩包在windows环境下解压：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111153149490.png" alt="image-20200111153149490"> </p><p>将其中的<code>agent</code>解压到某个目录，不要出现中文，可以看到其结构如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111153310868.png" alt="image-20200111153310868"> </p><p>其中有一个<code>skywalking-agent.jar</code>就是一我们要用的探针。</p><h3 id="2）配置"><a href="#2）配置" class="headerlink" title="2）配置"></a>2）配置</h3><p>分别给<code>ly-registry</code>、<code>ly-gateway</code>、<code>ly-item-service</code>三个应用配置即可。</p><p>以<code>ly-registry</code>为例，在IDEA工具中，选择要修改的启动项，点击右键，选择<code>Edit Configuration</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111153626146.png" alt="image-20200111153626146"> </p><p>然后在弹出的窗口中，点击<code>Environment</code>，选择<code>VM options</code>后面对应的展开按钮：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111153823435.png" alt="image-20200111153823435"></p><p>在展开的输入框中，输入下面的配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-javaagent</span>:D:/develop/skywalking<span class="literal">-agent</span>/skywalking<span class="literal">-agent</span>.jar</span><br><span class="line"><span class="literal">-Dskywalking</span>.agent.service_name=ly<span class="literal">-registry</span></span><br><span class="line"><span class="literal">-Dskywalking</span>.collector.backend_service=<span class="number">192.168</span>.<span class="number">206.99</span>:<span class="number">11800</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>`-javaagent:D:/test/skywalking-agent.jar：配置的是skywalking-agent.jar这个包的位置，要修改成你自己存放的目录</li><li><code>-Dskywalking.agent.service_name=ly-registry</code>：是当前项目的名称，需要分别修改为<code>ly-registry</code>、<code>ly-gateway</code>、<code>ly-item-service</code></li><li><code>-Dskywalking.collector.backend_service=192.168.206.99:11800</code>：是Skywalking的OPA服务地址，采用的是GRPC通信，因此端口是11800，不是8080</li></ul><h3 id="3）启动项目"><a href="#3）启动项目" class="headerlink" title="3）启动项目"></a>3）启动项目</h3><p>Skywalking的<strong>探针会在项目启动前对class文件进行修改，完成探针植入</strong>，对业务代码<strong>零侵入</strong>，所以我们只需要启动项目，即可生效了。</p><p>启动3个项目，然后对之前的业务接口访问。然后就可以在控制台：<a href="http://192.168.206.99:8080/">http://192.168.206.99:8080</a></p><p>看到统计数据：</p><h2 id="2-6-数据统计"><a href="#2-6-数据统计" class="headerlink" title="2.6.数据统计"></a>2.6.数据统计</h2><p>检测到有3个服务：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111154724654.png" alt="image-20200111154724654"> </p><p>访问最慢的endpoint排名：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111154820848.png" alt="image-20200111154820848"></p><p>当前服务的部分性能信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111154931906.png" alt="image-20200111154931906"></p><p>服务关系拓扑图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111155217661.png" alt="image-20200111155217661"></p><p>访问链路追踪图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/image-20200111175825761.png" alt="image-20200111175825761"></p><p>当前业务链路较短，如果链路比较深，也可以看到完整链路信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分布式日志服务、链路追踪&quot;&gt;&lt;a href=&quot;#分布式日志服务、链路追踪&quot; class=&quot;headerlink&quot; title=&quot;分布式日志服务、链路追踪&quot;&gt;&lt;/a&gt;分布式日志服务、链路追踪&lt;/h1&gt;&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; cla</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="分布式日志" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97/"/>
    
    <category term="链路追踪" scheme="http://example.com/tags/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁</title>
    <link href="http://example.com/2022/07/03/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://example.com/2022/07/03/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2022-07-03T02:00:55.000Z</published>
    <updated>2022-08-02T14:25:25.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">知道什么是分布式锁</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">知道分布式锁的几种实现方式</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">知道Redis分布式锁原理</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">会使用SpringDataRedis执行Lua脚本</span></span><br><span class="line"><span class="meta">5-</span> <span class="string">掌握Redission的使用</span></span><br></pre></td></tr></table></figure><h1 id="1-SpringSchedule"><a href="#1-SpringSchedule" class="headerlink" title="1.SpringSchedule"></a>1.SpringSchedule</h1><p>之前我们学习过Quartz这个定时任务框架，功能非常强大，不过我们有时候也会用到一些其它的定时任务框架。</p><h2 id="1-1-常见的定时任务框架"><a href="#1-1-常见的定时任务框架" class="headerlink" title="1.1.常见的定时任务框架"></a>1.1.常见的定时任务框架</h2><p>目前常用的定时任务实现:</p><table><thead><tr><th>实现方式</th><th>cron表达式</th><th>固定时间执行</th><th>固定频率执行</th><th>开发难易程度</th></tr></thead><tbody><tr><td>JDK 的TimeTask</td><td>不支持</td><td>支持</td><td>支持</td><td>复杂</td></tr><tr><td>Spring Schedule</td><td>支持</td><td>支持</td><td>支持</td><td>简单</td></tr><tr><td>Quartz</td><td>支持</td><td>支持</td><td>支持</td><td>难</td></tr></tbody></table><p>从以上表格可以看出，Spring Schedule框架功能完善，简单易用。对于中小型项目需求，Spring Schedule是完全可以胜任的。</p><h2 id="1-2-简介"><a href="#1-2-简介" class="headerlink" title="1.2.简介"></a>1.2.简介</h2><p>Spring Schedule是Spring  Framework的其中一部分功能：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555666217625.png" alt="1555666217625"></p><p>并且在SpringBoot中已经默认对Spring的Schedule实现了自动配置，使用时只需要简单注解和部分属性设置即可。</p><h2 id="1-3-快速入门"><a href="#1-3-快速入门" class="headerlink" title="1.3.快速入门"></a>1.3.快速入门</h2><p>我们新建一个Demo工程，完成入门案例的测试：</p><h3 id="1-3-1-创建项目"><a href="#1-3-1-创建项目" class="headerlink" title="1.3.1.创建项目"></a>1.3.1.创建项目</h3><p>使用Spring的 initializr来搭建项目：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555667071529.png" alt="1555667071529"></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555666991890.png" alt="1555666991890"></p><p>选择依赖：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555667023874.png" alt="1555667023874"></p><h3 id="1-3-2-开启定时任务"><a href="#1-3-2-开启定时任务" class="headerlink" title="1.3.2.开启定时任务"></a>1.3.2.开启定时任务</h3><p>要开启定时任务功能，只需要在启动类上加载一个<code>@EnableScheduling</code>注解即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TaskDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-定义任务"><a href="#1-3-3-定义任务" class="headerlink" title="1.3.3.定义任务"></a>1.3.3.定义任务</h3><p>定义任务，需要散步：</p><ul><li>声明类，通过<code>@Component</code>注解注册到Spring容器</li><li>类中定义方法，方法内部编写任务逻辑</li><li>方法上添加注解<code>@Scheduled(fixedRate = 1000)</code>来定义任务执行频率，<ul><li>这里的fiexRate=1000，代表是每隔1000毫秒执行一次</li></ul></li></ul><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556163899025.png" alt="1556163899025"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.task.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 1000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;hello spring schedule!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-4-启动测试"><a href="#1-3-4-启动测试" class="headerlink" title="1.3.4.启动测试"></a>1.3.4.启动测试</h3><p>启动项目，可以在控制台看到任务执行情况：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555667399323.png" alt="1555667399323"></p><h2 id="1-4-配置"><a href="#1-4-配置" class="headerlink" title="1.4.配置"></a>1.4.配置</h2><p>定时任务有许多可以自定义的配置属性：</p><h3 id="1-4-1-任务线程池大小"><a href="#1-4-1-任务线程池大小" class="headerlink" title="1.4.1.任务线程池大小"></a>1.4.1.任务线程池大小</h3><p>默认情况下，定时任务的线程池大小只有1，<strong>当任务较多执行频繁时，会出现阻塞等待的情况</strong>，任务调度器就会出现<strong>时间漂移</strong>，任务执行时间将不确定。</p><p>为了避免这样的情况发生，我们需要自定义线程池的大小：</p><p>修改application.yml即可实现：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">task:</span></span><br><span class="line">    <span class="attr">scheduling:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">size:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>重启项目后测试：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555667762439.png" alt="1555667762439"></p><p>可以看到执行时会切换到不同的线程执行。</p><h3 id="1-4-2-定时策略"><a href="#1-4-2-定时策略" class="headerlink" title="1.4.2.定时策略"></a>1.4.2.定时策略</h3><p>在方法上添加注解<code>@Scheduled</code>可以控制定时执行的频率，有三种策略：</p><ul><li>fixedRate：按照固定时间频率执行，单位毫秒，即每xx毫秒执行一次。<ul><li>如果上一个任务阻塞导致任务积压，则会在当前任务执行后，一次把多个积压的任务都执行完成</li><li>举例：假如任务执行每秒1次，而第一个任务执行耗时4秒，会导致4个任务积压，在第一个任务执行后，积压的4个任务会立即执行，不再等待</li></ul></li><li>fixedDelay：固定延迟执行，单位毫秒，即前一个任务执行结束后xx毫秒执行第二个任务。<ul><li>如果上一个任务阻塞导致任务积压，则会在当前任务执行后xx毫秒执行下一个任务</li></ul></li><li>cron：知名的cron表达式，使用表达式规则来定义任务执行策略，与fixedDelay类似的。</li></ul><h3 id="1-4-3-cron表达式"><a href="#1-4-3-cron表达式" class="headerlink" title="1.4.3.cron表达式"></a>1.4.3.cron表达式</h3><p>什么是cron表达式呢？</p><p>Cron表达式是一个字符串，字符串包含6或7个域，每一个域代表一个含义，例如秒、分。域和域之间以空格隔开，有如下两种语法格式：</p><ul><li> Seconds Minutes Hours DayofMonth Month DayofWeek Year</li><li> Seconds Minutes Hours DayofMonth Month DayofWeek</li></ul><p>cron表达式规则：</p><table><thead><tr><th>域</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒（Seconds）</td><td>0~59的整数</td><td>,   -   *   /</td></tr><tr><td>分（<em>Minutes</em>）</td><td>0~59的整数</td><td>,   -   *   /</td></tr><tr><td>小时（<em>Hours</em>）</td><td>0~23的整数</td><td>,   -   *   /</td></tr><tr><td>日期（<em>DayofMonth</em>）</td><td>1~31的整数（但是你需要考虑你月的天数）</td><td>,   -   *  ?   /  L W C</td></tr><tr><td>月份（<em>Month</em>）</td><td>1~12的整数或者 JAN-DEC</td><td>,   -   *   /</td></tr><tr><td>星期（<em>DayofWeek</em>）</td><td>1~7的整数或者 SUN-SAT （1=SUN）</td><td>,   -   *  ?   /  L C  #</td></tr><tr><td>年(可选，留空)（<em>Year</em>）</td><td>1970~2099</td><td>,   -   *   /</td></tr></tbody></table><p>每个域上一般都是数字，或者指定允许的特殊字符：</p><table><thead><tr><th>特殊字符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>表示匹配该域的任意值。假如在Minutes域使用, 即表示每分钟都会触发事件</td></tr><tr><td>?</td><td>只能用在DayofMonth和DayofWeek两个域中的一个。它表示不确定的值</td></tr><tr><td>-</td><td>表示范围。例如在Hours域使用5-8，表示从5点、6点、7点、8点各执行一次</td></tr><tr><td>,</td><td>表示列出枚举值。例如：在week域使用FRI,SUN，表示星期五和星期六执行</td></tr><tr><td>/</td><td>一般用法：x/y，从x开始，每次递增y。如果放在minutes域，5/15，表示每小时的5分钟开始，每隔15分钟一次，即：5分钟、20分钟、35分钟、50分钟时执行</td></tr><tr><td>L</td><td>表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayOfMonth中，代表每个月的最后一天。如果是在DayOfWeek域，表示每周最后一天（周六），但是如果是：数字+L，如6L表示每月的 最后一个周五</td></tr><tr><td>W</td><td>表示最近的有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</td></tr><tr><td>LW</td><td>两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五</td></tr><tr><td>#</td><td>用在DayOfMonth中，确定每个月第几个星期几。例如在4#2，表示某月的第二个星期三（2表示当月的第二周，4表示这周的第4天，即星期三）。</td></tr></tbody></table><p>示例：</p><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td><code>0 0 2 1 * ?  *</code></td><td>表示在每月的1日的凌晨2点执行任务</td></tr><tr><td><code>0 15 10 ?  * MON-FRI</code></td><td>表示周一到周五每天上午10:15执行作</td></tr><tr><td><code>0 15 10 ? * 6L 2002-2006</code></td><td>表示2002-2006年的每个月的最后一个星期五上午10:15执行</td></tr><tr><td><code>0 0 9-21 * * 2-7</code></td><td>996</td></tr></tbody></table><p>我们把代码修改一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;hello spring schedule!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555684079046.png" alt="1555684079046"></p><h1 id="2-认识分布式锁"><a href="#2-认识分布式锁" class="headerlink" title="2.认识分布式锁"></a>2.认识分布式锁</h1><p>在讨论分布式锁前，我们先假设一个业务场景：</p><h2 id="2-1-业务场景"><a href="#2-1-业务场景" class="headerlink" title="2.1.业务场景"></a>2.1.业务场景</h2><p>我们在订单服务中开启一个定时任务，每隔一段时间扫描超时未支付订单，然后完成订单清理。</p><p>在这个定时任务中，需要完成的业务步骤主要包括：</p><ol><li>查询超时未支付订单，获取订单中商品信息</li><li>修改这些未支付订单的状态，为已关闭</li><li>恢复订单中商品扣减的库存</li></ol><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566123763031.png" alt="1566123763031"></p><p>因为订单服务可能是一个包含多节点的集群，例如包含10台订单微服务，那么并发时可能发生这样的事情：</p><ul><li>订单服务A执行了步骤1，但还没有执行步骤2</li><li>订单服务B执行了步骤1，于是查询到了与订单服务A查询到的一样的数据</li><li>订单服务A执行步骤2和3，此时订单中对应商品的库存已经恢复了</li><li>订单服务B也执行了步骤2和步骤3，此时订单中对应商品的库存再次被增加</li><li>库存被错误的恢复了多次，==事实上只需要执行一次就可以了==。</li></ul><p>就像这样：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566124881345.png" alt="1566124881345"></p><p>因为任务的并发执行，出现了线程安全问题，商品库存被错误的增加了多次，你能想到解决办法吗？</p><h2 id="2-2-为什么需要分布式锁"><a href="#2-2-为什么需要分布式锁" class="headerlink" title="2.2.为什么需要分布式锁"></a>2.2.为什么需要分布式锁</h2><p>对于线程安全问题，我们都很熟悉了，传统的解决方案就是对线程操作资源的代码加锁。如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566124938467.png" alt="1566124938467"></p><p>理想状态下，加了锁以后，在当前订单服务执行时，其它订单服务需要等待当前订单服务完成业务后才能执行，这样就避免了线程安全问题的发生。</p><p>但是，这样真的能解决问题吗？</p><p>答案时否定的，为什么呢。</p><h3 id="2-2-1-线程锁"><a href="#2-2-1-线程锁" class="headerlink" title="2.2.1.线程锁"></a>2.2.1.线程锁</h3><p>我们通常使用的synchronized或者Lock都是线程锁，对同一个JVM进程内的多个线程有效。因为锁的本质是内存中存放一个标记，记录获取锁的线程时谁，<strong>这个标记对每个线程都可见</strong>。</p><ul><li>获取锁：就是判断标记中是否已经有线程存在，如果有，则获取锁失败，如果没有，在标记中记录当前线程</li><li>释放锁：就是删除标记中保存的线程，并唤醒等待队列中的其它线程</li></ul><p>因此，锁生效的前提是：</p><ul><li>互斥：锁的标记只有一个线程可以获取</li><li>共享：标记对所有线程可见</li></ul><p>然而我们启动的多个订单服务，就是多个JVM，内存中的锁显然是不共享的，每个JVM进程都有自己的锁，自然无法保证线程的互斥了，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566133423058.png" alt="1566133423058"></p><p>要解决这个问题，就必须保证各个订单服务能够共享内存中的锁标记，此时，分布式锁就闪亮登场了！</p><h3 id="2-2-2-分布式锁"><a href="#2-2-2-分布式锁" class="headerlink" title="2.2.2.分布式锁"></a>2.2.2.分布式锁</h3><p>线程锁时一个多线程可见的内存标记，保证同一个任务，同一时刻只能被多线程中的某一个执行。但是这样的锁在分布式系统中，多进程环境下， 就达不到预期的效果了。</p><p>而如果我们==将这个标记变成多进程可见，保证这个任务同一时刻只能被多个进程中的某一个执行，那这样的锁就是分布式锁==了。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566135914594.png" alt="1566135914594"></p><p>分布式锁实现有多种方式，其原理都基本类似，只要满足下列要求即可：</p><ul><li><strong>多进程可见</strong>：多进程可见，否则就无法实现分布式效果</li><li><strong>互斥</strong>：同一时刻，只能有一个进程获得锁，执行任务后释放锁</li><li>可重入（可选）：同一个任务再次获取改锁不会被死锁</li><li>阻塞锁（可选）：获取失败时，具备重试机制，尝试再次获取锁</li><li>性能好（可选）：效率高，应对高并发场景</li><li>高可用：避免锁服务宕机或处理好宕机的补救措施</li></ul><p>常见的分布式锁实现方案包括：==基于数据库实现、基于缓存(redis)实现、基于zookeeper==等.</p><h1 id="3-Redis实现分布式锁"><a href="#3-Redis实现分布式锁" class="headerlink" title="3.Redis实现分布式锁"></a>3.Redis实现分布式锁</h1><p>按照上面的分析，实现分布是锁要满足五点：多进程可见，互斥，可重入，阻塞，高性能，高可用等。我们来看看Redis如何满足这些需求。</p><h2 id="3-1-版本1-基本实现"><a href="#3-1-版本1-基本实现" class="headerlink" title="3.1.版本1-基本实现"></a>3.1.版本1-基本实现</h2><p>第一次尝试，我们先关注其中必须满足的2个条件：</p><ul><li>多进程可见</li><li>互斥，锁可释放</li></ul><p>1）多进程可见</p><p>首先Redis本身就是基于JVM之外的，因此满足多进程可见的要求。</p><p>2）互斥</p><p>互斥就是说只能有一个进程获取锁标记，这个我们可以基于Redis的setnx指令来实现。setnx是set when not exits的意思。当多次执行setnx命令时，只有第一次执行的才会成功并返回1，其它情况返回0：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1555935393771.png" alt="1555935393771"> </p><p>多个进程来对同一个key执行setnx操作，肯定只有一个能执行成功，其它一定会失败，满足了互斥的需求。</p><p>3）释放锁</p><p>释放锁其实只需要把锁的key删除即可，使用del xxx指令。不过，仔细思考，如果在我们执行del之前，服务突然宕机，那么锁岂不是永远无法删除了？！</p><p>为了避免因服务宕机引起锁无法释放问题，我们可以在获取锁的时候，给锁加一个有效时间，当时间超出时，就会自动释放锁，这样就不会死锁了。</p><p>但时setnx指令没有设置时间的功能，我们要借助于set指令，然后结合set的 NX和PX参数来完成。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566136982277.png" alt="1566136982277"> </p><p>其中可以指定这样几个参数：</p><ul><li>EX：过期时长，单位是秒</li><li>PX：过期时长，单位是毫秒</li><li>NX：等同于setnx</li></ul><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566137261107.png" alt="1566137261107"></p><p>因此，获取和释放锁的基本流程如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566138388369.png" alt="1566138388369"></p><p>步骤如下：</p><ul><li>1、通过set命令设置锁</li><li>2、判断返回结果是否是OK<ul><li>1）Nil，获取失败，结束或重试（自旋锁）</li><li>2）OK，获取锁成功<ul><li>执行业务</li><li>释放锁，DEL 删除key即可</li></ul></li></ul></li><li>3、异常情况，服务宕机。超时时间EX结束，会自动释放锁</li></ul><h2 id="3-2-版本2-互斥性"><a href="#3-2-版本2-互斥性" class="headerlink" title="3.2.版本2-互斥性"></a>3.2.版本2-互斥性</h2><p>刚才的初级版本中，会有一定的安全问题。</p><h3 id="3-2-1-问题分析"><a href="#3-2-1-问题分析" class="headerlink" title="3.2.1.问题分析"></a>3.2.1.问题分析</h3><p>大家思考一下，释放锁就是用DEL语句把锁对应的key给删除，有没有这么一种可能性：</p><ol><li>3个进程：A和B和C，在执行任务，并争抢锁，此时A获取了锁，并设置自动过期时间为10s</li><li>A开始执行业务，因为某种原因，业务阻塞，耗时超过了10秒，此时锁自动释放了</li><li>B恰好此时开始尝试获取锁，因为锁已经自动释放，成功获取锁</li><li>A此时业务执行完毕，执行释放锁逻辑（删除key），于是B的锁被释放了，而B其实还在执行业务</li><li>此时进程C尝试获取锁，也成功了，因为A把B的锁删除了。</li></ol><p>问题出现了：B和C同时获取了锁，违反了互斥性！</p><p>如何解决这个问题呢？我们应该在删除锁之前，判断这个锁是否是自己设置的锁，如果不是（例如自己的锁已经超时释放），那么就不要删除了。</p><h3 id="3-2-2-解决思路"><a href="#3-2-2-解决思路" class="headerlink" title="3.2.2.解决思路"></a>3.2.2.解决思路</h3><p>那么问题来了：<strong>如何得知当前获取锁的是不是自己</strong>呢？</p><p>我们可以在set 锁时，存入当前线程的唯一标识！删除锁前，判断下里面的值是不是与自己标识释放一致，如果不一致，说明不是自己的锁，就不要删除了。</p><p>流程如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566138838868.png" alt="1566138838868"></p><h3 id="3-2-3-代码实现"><a href="#3-2-3-代码实现" class="headerlink" title="3.2.3.代码实现"></a>3.2.3.代码实现</h3><p>我们创建一个SpringBoot项目，引入一些依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在application.yml中指定redis地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br></pre></td></tr></table></figure><p>首先定义一个锁接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.lock;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true: 获取锁成功， false：获取锁失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> releaseTime)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.BooleanUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String key;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String VALUE_PREFIX = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleRedisLock</span><span class="params">(String key, StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> releaseTime)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前线程的锁标示</span></span><br><span class="line">        String value = VALUE_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">// 尝试获取锁</span></span><br><span class="line">        Boolean boo = redisTemplate.opsForValue().setIfAbsent(key, value, releaseTime, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// 判断结果</span></span><br><span class="line">        <span class="keyword">return</span> BooleanUtils.isTrue(boo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前线程的锁标示</span></span><br><span class="line">        String value = VALUE_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">// 获取redis中的锁标示</span></span><br><span class="line">        String cacheValue = redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 比较</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.equals(value, cacheValue))&#123;</span><br><span class="line">            <span class="comment">// 一致，是自己的锁，删除</span></span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，定义一个锁工厂，方便用户获取锁对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisLockFactory</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleRedisLock <span class="title">getSimpleRedisLock</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleRedisLock(key, redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后编写一个单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.lock.RedisLockFactory;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.lock.SimpleRedisLock;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取锁对象</span></span><br><span class="line">    <span class="keyword">private</span> SimpleRedisLock lock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LockTask</span><span class="params">(RedisLockFactory factory)</span> </span>&#123;</span><br><span class="line">        lock = factory.getSimpleRedisLock(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/10 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">job</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.warn(<span class="string">&quot;尝试获取锁&quot;</span>);</span><br><span class="line">        <span class="comment">// 尝试获取锁</span></span><br><span class="line">        <span class="keyword">boolean</span> isLock = lock.tryLock(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 判断是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line">            <span class="comment">// 获取锁失败，任务终止</span></span><br><span class="line">            log.error(<span class="string">&quot;获取锁失败，任务结束！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取锁成功，开始执行任务</span></span><br><span class="line">            log.info(<span class="string">&quot;获取锁成功，开始执行业务&quot;</span>);</span><br><span class="line">            clearOrder();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;任务执行结束，释放锁&quot;</span>);</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 默认任务延迟</span></span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时启动项目的两个副本：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/image-20200513110915720.png" alt="image-20200513110915720"> </p><p>可以看到定时任务会实现互斥效果。</p><h2 id="3-3-版本3-重入性（了解）"><a href="#3-3-版本3-重入性（了解）" class="headerlink" title="3.3.版本3-重入性（了解）"></a>3.3.版本3-重入性（了解）</h2><p>接下来我们来看看分布式锁的第三个特性，重入性。</p><p>如果我们在获取锁以后，执行代码的过程中，再次尝试获取锁，执行setnx肯定会失败，因为锁已经存在了。这样有可能导致死锁，这样的锁就是<strong>不可重入</strong>的。</p><p>如何解决呢？</p><p>当然是想办法改造成<strong>可重入锁</strong>。</p><h3 id="3-4-1-重入锁"><a href="#3-4-1-重入锁" class="headerlink" title="3.4.1.重入锁"></a>3.4.1.重入锁</h3><p>什么叫做可重入锁呢？</p><blockquote><p>可重入锁，也叫做递归锁，指的是在同一线程内，外层函数获得锁之后，内层递归函数仍然可以获取到该锁。换一种说法：<strong>同一个线程再次进入同步代码时，可以使用自己已获取到的锁。</strong></p></blockquote><p>可重入锁可以避免因同一线程中多次获取锁而导致死锁发生。</p><p>那么，如何实现可重入锁呢？</p><ul><li>获取锁：首先尝试获取锁，如果获取失败，<strong>判断这个锁是否是自己的，如果是则允许再次获取</strong>，而且必须记录重复获取锁的次数。</li><li>释放锁：释放锁不能直接删除了，因为锁是可重入的，如果锁进入了多次，在最内层直接删除锁，导致外部的业务在没有锁的情况下执行，会有安全问题。因此必须<strong>获取锁时累计重入的次数，释放时则减去重入次数，如果减到0，则可以删除锁</strong>.</li></ul><p>因此，存储在锁中的信息就必须包含：key、线程标识、重入次数。不能再使用简单的key-value结构，这里推荐使用hash结构：</p><ul><li>key：lock</li><li>hashKey：线程信息</li><li>hashValue：重入次数，默认1</li></ul><h3 id="3-4-2-流程图"><a href="#3-4-2-流程图" class="headerlink" title="3.4.2.流程图"></a>3.4.2.流程图</h3><p>需要用到的一些Redis命令包括：</p><ul><li>EXISTS key：判断一个Key是否存在</li><li>HEXISTS key field：判断一个hash的field是否存在</li><li>HSET key field value ：给一个hash的field设置一个值</li><li>HINCRBY key field increment：给一个hash的field值增加指定数值</li><li>EXPIRE key seconds：给一个key设置过期时间</li><li>DEL key：删除指定key</li></ul><p>具体流程如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556164092317.png" alt="1556164092317"></p><p>下面我们假设锁的key为“<code>lock</code>”，hashKey是当前线程的id：“<code>threadId</code>”，锁自动释放时间假设为20</p><p>获取锁的步骤：</p><ul><li>1、判断lock是否存在 <code>EXISTS lock</code><ul><li>存在，说明有人获取锁了，下面判断是不是自己的锁<ul><li>判断当前线程id作为hashKey是否存在：<code>HEXISTS lock threadId</code><ul><li>不存在，说明锁已经有了，且不是自己获取的，锁获取失败，end</li><li>存在，说明是自己获取的锁，重入次数+1：<code>HINCRBY lock threadId 1</code>，去到步骤3</li></ul></li></ul></li><li>2、不存在，说明可以获取锁，<code>HSET key threadId 1</code></li><li>3、设置锁自动释放时间，<code>EXPIRE lock 20</code></li></ul></li></ul><p>释放锁的步骤：</p><ul><li>1、判断当前线程id作为hashKey是否存在：<code>HEXISTS lock threadId</code><ul><li>不存在，说明锁已经失效，不用管了</li><li>存在，说明锁还在，重入次数减1：<code>HINCRBY lock threadId -1</code>，获取新的重入次数</li></ul></li><li>2、判断重入次数是否为0：<ul><li>为0，说明锁全部释放，删除key：<code>DEL lock</code></li><li>大于0，说明锁还在使用，重置有效时间：<code>EXPIRE lock 20</code></li></ul></li></ul><h2 id="3-4-Lua脚本"><a href="#3-4-Lua脚本" class="headerlink" title="3.4.Lua脚本"></a>3.4.Lua脚本</h2><p>上面探讨的Redis锁实现方案都忽略了一个非常重要的问题：<strong>原子性</strong>问题。无论是获取锁，还是释放锁的过程，都是有多行Redis指令来完成的，如果不能保证这些Redis命令执行的原子性，则整个过程都是不安全的。</p><p>而Redis中支持以Lua脚本来运行多行命令，并且保证整个脚本运行的原子性。</p><p>接下来，我们分几块来学习Lua脚本的使用：</p><ul><li>Redis中如何执行Lua脚本</li><li>Lua脚本的基本语法</li><li>编写上述分布式锁对应的Lua脚本</li></ul><h3 id="3-4-1-Redis中如何执行Lua脚本"><a href="#3-4-1-Redis中如何执行Lua脚本" class="headerlink" title="3.4.1.Redis中如何执行Lua脚本"></a>3.4.1.Redis中如何执行Lua脚本</h3><p>与操作Lua相关的命令如下：</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><code>EVAL script numkeys key [key ...] arg [arg ...]</code> 执行 Lua 脚本。</td></tr><tr><td align="left">2</td><td align="left"><code>EVALSHA sha1 numkeys key [key ...] arg [arg ...]</code>  执行 Lua 脚本。</td></tr><tr><td align="left">3</td><td align="left"><code>SCRIPT EXISTS script [script ...] </code> 查看指定的脚本是否已经被保存在缓存当中。</td></tr><tr><td align="left">4</td><td align="left"><code>SCRIPT FLUSH</code>  从脚本缓存中移除所有脚本。</td></tr><tr><td align="left">5</td><td align="left"><code>SCRIPT KILL</code>  杀死当前正在运行的 Lua 脚本。</td></tr><tr><td align="left">6</td><td align="left"><code>SCRIPT LOAD script</code>  将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。</td></tr></tbody></table><p>其中我们会用到的几个：</p><blockquote><p>EVAL命令：</p></blockquote><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556029159652.png" alt="1556029159652"> </p><p>直接执行一段脚本，参数包括：</p><ul><li>script：脚本内容，或者脚本地址</li><li>numkeys：脚本中用到的key的数量，接下来的numkeys个参数会作为key参数，剩下的作为arg参数</li><li>key：作为key的参数，会被存入脚本环境中的KEYS数组，角标从1开始</li><li>arg：其它参数，会被存入脚本环境中的ARGV数组，角标从1开始</li></ul><p>示例：<code>EVAL &quot;return &#39;hello world!&#39;&quot; 0</code>，其中：</p><ul><li><code>&quot;return &#39;hello world!&#39;&quot;</code>：就是脚本的内容，直接返回字符串，没有别的命令</li><li><code>0</code>：就是说没有用key参数，直接返回</li></ul><p>效果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556030139226.png" alt="1556030139226"> </p><blockquote><p>SCRIPT LOAD命令</p></blockquote><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556029464469.png" alt="1556029464469"> </p><p>将一段脚本编译并缓存起来，生成一个SHA1值并返回，作为脚本字典的key，方便下次使用。</p><p>参数script就是脚本内容或地址。</p><p>以之前案例中的的脚本为例：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556030196610.png" alt="1556030196610"> </p><p>此处返回的<code>ada0bc9efe2392bdcc0083f7f8deaca2da7f32ec</code>就是脚本缓存后得到的sha1值。</p><p>在脚本字典中，每一个这样的sha1值，对应一段解析好的脚本：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556030293491.png" alt="1556030293491"> </p><blockquote><p>EVALSHA 命令：</p></blockquote><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556029524238.png" alt="1556029524238"> </p><p>与EVAL类似，执行一段脚本，区别是通过脚本的sha1值，去脚本缓存中查找，然后执行，参数：</p><ul><li>sha1：就是脚本对应的sha1值</li></ul><p>我们用刚刚缓存的脚本为例：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556030354363.png" alt="1556030354363"> </p><h3 id="3-4-2-Lua脚本的基本语法"><a href="#3-4-2-Lua脚本的基本语法" class="headerlink" title="3.4.2.Lua脚本的基本语法"></a>3.4.2.Lua脚本的基本语法</h3><p>Lua的详细语法大家可以参考网站上的一些教学，例如：<a href="https://www.runoob.com/lua/lua-tutorial.html">Lua菜鸟教程</a>，任何语言都是从基本的如：变量、数据类型、循环、逻辑判断、运算、数组等入手。相信熟悉java的你应该可以快速上手Lua。</p><p>我们的分布式锁脚本中，主要用到的是对Redis指令的调用，还有<code>if ... else</code>这样的逻辑判断，再加上一些变量声明等。因此我们从这几块入手，看一些简单命令即可：</p><p>1）变量声明</p><p>声明一个局部变量，用local关键字即可：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">123</span></span><br></pre></td></tr></table></figure><p>2）打印结果</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3）条件控制</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( 布尔表达式 <span class="number">1</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="comment">--[ 在布尔表达式 1 为 true 时执行该语句块 --]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elseif</span>( 布尔表达式 <span class="number">2</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="comment">--[ 在布尔表达式 2 为 true 时执行该语句块 --]</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">   <span class="comment">--[ 如果以上布尔表达式都不为 true 则执行该语句块 --]</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>4）循环语句：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( <span class="literal">true</span> )</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;循环将永远执行下去&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>注意，使用break可以跳出循环。</p><p>大家能否利用上述语法编写一个猜数字的小游戏？</p><p>提示：<code>io.read(&quot;*num&quot;)</code>可以用来读取一个用户输入的数字</p><p>代码示例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;请输入一个数字:&#x27;</span>)</span><br><span class="line">  <span class="keyword">local</span> a = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*num&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span>(a &gt; <span class="number">100</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;太大了&#x27;</span>)</span><br><span class="line">  <span class="keyword">elseif</span>(a &lt; <span class="number">100</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;太小了&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;bingo!猜对了!&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566354008626.png" alt="1566354008626"> </p><p>5）Lua调用Redis指令</p><p>当我们再Redis中允许Lua脚本时，有一个内置变量redis，并且具备两个函数：</p><ul><li><code>redis.call(&quot;命令名称&quot;, 参数1， 参数2 ...)</code>: 执行指定的redis命令，执行遇到错误会直接返回错误</li><li><code>redis.pcall(&quot;命令名称&quot;, 参数1， 参数2 ...)</code>: 执行指定的redis命令，执行遇到错误会错误以Lua表的形式返回</li></ul><p>例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;SET&#x27;</span>, <span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这行Lua脚本的含义就是执行Redis命令：<code>set num 123</code></p><p>不过，我们编写脚本时并不希望把set后面的key和value写死，而是可以由调用脚本的人来指定，把key和value作为参数传入脚本中执行。</p><p>还记得redis中的EVAL命令吗？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EVAL script numkeys key [key ...] arg [arg ...]</span><br></pre></td></tr></table></figure><p>EVAL执行脚本时可以接受参数，key和arg，并且会用两个内置变量（数组格式）来接受用户传入的key和arg参数：</p><ul><li>KEYS：用来存放key参数</li><li>ARGV：用来存放除Key以外的参数</li></ul><p>我们在脚本中，可以从数组中根据角标（Lua中数组角标时从1开始）取出用户传入的参数，像这样：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;SET&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>而后，我们在执行脚本时可以动态指定key及需要存放的value值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EVAL &quot;return redis.call(&#x27;SET&#x27;, KEYS[1], ARGV[1])&quot; 1 num 666</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566355223209.png" alt="1566355223209"></p><h3 id="3-4-3-编写分布式锁的Lua脚本"><a href="#3-4-3-编写分布式锁的Lua脚本" class="headerlink" title="3.4.3.编写分布式锁的Lua脚本"></a>3.4.3.编写分布式锁的Lua脚本</h3><p>接下来，我们就可以将上面的分布式锁思路用Lua脚本来实现了。</p><h4 id="1）普通互斥锁"><a href="#1）普通互斥锁" class="headerlink" title="1）普通互斥锁"></a>1）普通互斥锁</h4><p>先看版本2的实现：</p><ul><li>获取锁：直接使用客户端的set nx ex 命令即可，无需脚本</li><li>释放锁：因为要判断锁中的标识是否时自己的，因此需要脚本，如下：</li></ul><p>长的：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 知道当前线程的锁标示</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- 知道锁的key</span></span><br><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- 根据锁的key，获取标示</span></span><br><span class="line"><span class="keyword">local</span> id = redis.call(<span class="string">&#x27;get&#x27;</span>, key)</span><br><span class="line"><span class="comment">-- 与指定的标示比较是否一致</span></span><br><span class="line"><span class="keyword">if</span> (id == threadId) <span class="keyword">then</span></span><br><span class="line"><span class="comment">-- 如果一致，就删除</span></span><br><span class="line"><span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, key)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>简化的：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 判断锁是否是自己的</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;GET&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">  <span class="comment">-- 是则删除锁</span></span><br><span class="line">  <span class="keyword">return</span> redis.call(<span class="string">&#x27;DEL&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 不是则直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>参数的含义说明：</p><ul><li>KEYS[1]：就是锁的key，比如”lock”</li><li>ARGV[1]：就是线程的唯一标识，可以时随机字符串</li></ul><h4 id="2）可重入锁："><a href="#2）可重入锁：" class="headerlink" title="2）可重入锁："></a>2）可重入锁：</h4><p>首先是获取锁：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]; <span class="comment">-- 线程唯一标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">-- 锁的自动释放时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;exists&#x27;</span>, key) == <span class="number">0</span>) <span class="keyword">then</span> <span class="comment">-- 判断是否存在</span></span><br><span class="line">redis.call(<span class="string">&#x27;hset&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>); <span class="comment">-- 不存在, 获取锁</span></span><br><span class="line">redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime); <span class="comment">-- 设置有效期</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;hexists&#x27;</span>, key, threadId) == <span class="number">1</span>) <span class="keyword">then</span> <span class="comment">-- 锁已经存在，判断threadId是否是自己</span></span><br><span class="line">redis.call(<span class="string">&#x27;hincrby&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>); <span class="comment">-- 不存在, 获取锁，重入次数+1</span></span><br><span class="line">redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime); <span class="comment">-- 设置有效期</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">-- 代码走到这里,说明获取锁的不是自己，获取锁失败</span></span><br></pre></td></tr></table></figure><p>然后是释放锁：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]; <span class="comment">-- 线程唯一标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">-- 锁的自动释放时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;HEXISTS&#x27;</span>, key, threadId) == <span class="number">0</span>) <span class="keyword">then</span> <span class="comment">-- 判断当前锁是否还是被自己持有</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>; <span class="comment">-- 如果已经不是自己，则直接返回</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">local</span> count = redis.call(<span class="string">&#x27;HINCRBY&#x27;</span>, key, threadId, <span class="number">-1</span>); <span class="comment">-- 是自己的锁，则重入次数-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) <span class="keyword">then</span> <span class="comment">-- 判断是否重入次数是否已经为0</span></span><br><span class="line">    redis.call(<span class="string">&#x27;EXPIRE&#x27;</span>, key, releaseTime); <span class="comment">-- 大于0说明不能释放锁，重置有效期然后返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    redis.call(<span class="string">&#x27;DEL&#x27;</span>, key); <span class="comment">-- 等于0说明可以释放锁，直接删除</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h2 id="3-5-Redis客户端调用Lua"><a href="#3-5-Redis客户端调用Lua" class="headerlink" title="3.5.Redis客户端调用Lua"></a>3.5.Redis客户端调用Lua</h2><p>脚本编写完成，还需要通过客户端来调用lua脚本，封装一个获取锁和释放锁的工具。</p><p>首先我们创建一个工程：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566364767687.png" alt="1566364767687"></p><p>填写信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566364941610.png" alt="1566364941610"></p><p>选择依赖：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566364993949.png" alt="1566364993949"></p><p>在配置文件中引入Redis的地址信息(注意修改成你自己的redis地址)：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">192.168.206.99</span></span><br></pre></td></tr></table></figure><h3 id="3-5-1-锁接口"><a href="#3-5-1-锁接口" class="headerlink" title="3.5.1.锁接口"></a>3.5.1.锁接口</h3><p>首先定义一个锁接口，定义锁中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.lock;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> releaseTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> releaseTime)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-实现类"><a href="#3-5-2-实现类" class="headerlink" title="3.5.2.实现类"></a>3.5.2.实现类</h3><p>我们通过Spring提供的RedisTemplate来操作lua脚本，<code>RedisTemplate</code>中提供了一个方法，用来执行Lua脚本：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556162076875.png" alt="1556162076875"></p><p>包含3个参数：</p><ul><li><code>RedisScript&lt;T&gt; script</code>：封装了Lua脚本的对象</li><li><code>List&lt;K&gt; keys</code>：脚本中的key的值</li><li><code>Object ... args</code>：脚本中的参数的值</li></ul><p>因此，要执行Lua脚本，我们需要先把脚本封装到<code>RedisScript</code>对象中，有两种方式来构建<code>RedisScript</code>对象：</p><p>1）通过RedisScript中的静态方法：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556162311151.png" alt="1556162311151"></p><p>这个方法接受两个参数：</p><ul><li><code>String script</code>：Lua脚本</li><li><code>Class&lt;T&gt; resultType</code>：返回值类型</li></ul><p>需要把脚本内容写到代码中，作为参数传递，不够优雅。</p><p>2）自己创建DefaultRedisScript</p><p>另一种方式，就是自己去创建<code>RedisScript</code>的实现类<code>DefaultRedisScript</code>的对象：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556162540499.png" alt="1556162540499"></p><p>可以把脚本文件写到classpath下的某个位置，然后通过加载这个文件来获取脚本内容，并设置给<code>DefaultRedisScript</code>实例。</p><p>此处我们选择方式二，方便后期对脚本文件的维护。</p><p>首先在classpath中编写两个Lua脚本文件.</p><p>然后编写一个新的RedisLock实现：ReentrantRedisLock，利用静态代码块来加载脚本并初始化：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566365327191.png" alt="1566365327191"> </p><p>其中，加载脚本文件的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantRedisLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取锁的脚本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; LOCK_SCRIPT;</span><br><span class="line">    <span class="comment">// 释放锁的脚本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Object&gt; UNLOCK_SCRIPT;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 加载获取锁的脚本</span></span><br><span class="line">        LOCK_SCRIPT = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">        LOCK_SCRIPT.setScriptSource(</span><br><span class="line">            <span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;lock.lua&quot;</span>)));</span><br><span class="line">        LOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载释放锁的脚本</span></span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">        UNLOCK_SCRIPT.setScriptSource(</span><br><span class="line">            <span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;unlock.lua&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其它代码略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现RedisLock接口，实现其中的抽象方法，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.script.DefaultRedisScript;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scripting.support.ResourceScriptSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantRedisLock</span> <span class="keyword">implements</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设定好锁对应的 key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入的线程信息的前缀，防止与其它JVM中线程信息冲突</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String ID_PREFIX = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReentrantRedisLock</span><span class="params">(StringRedisTemplate redisTemplate, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; LOCK_SCRIPT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Object&gt; UNLOCK_SCRIPT;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 加载释放锁的脚本</span></span><br><span class="line">        LOCK_SCRIPT = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">        LOCK_SCRIPT.setScriptSource(<span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;lock.lua&quot;</span>)));</span><br><span class="line">        LOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载释放锁的脚本</span></span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">        UNLOCK_SCRIPT.setScriptSource(<span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;unlock.lua&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 锁释放时间</span></span><br><span class="line">    <span class="keyword">private</span> String releaseTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> releaseTime)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 记录释放时间</span></span><br><span class="line">        <span class="keyword">this</span>.releaseTime = String.valueOf(releaseTime);</span><br><span class="line">        <span class="comment">// 执行脚本</span></span><br><span class="line">        Long result = redisTemplate.execute(</span><br><span class="line">                LOCK_SCRIPT,</span><br><span class="line">                Collections.singletonList(key),</span><br><span class="line">                ID_PREFIX + Thread.currentThread().getId(), <span class="keyword">this</span>.releaseTime);</span><br><span class="line">        <span class="comment">// 判断结果</span></span><br><span class="line">        <span class="keyword">return</span> result != <span class="keyword">null</span> &amp;&amp; result.intValue() == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行脚本</span></span><br><span class="line">        redisTemplate.execute(</span><br><span class="line">                UNLOCK_SCRIPT,</span><br><span class="line">                Collections.singletonList(key),</span><br><span class="line">                ID_PREFIX + Thread.currentThread().getId(), <span class="keyword">this</span>.releaseTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-获取锁的工厂"><a href="#3-5-3-获取锁的工厂" class="headerlink" title="3.5.3.获取锁的工厂"></a>3.5.3.获取锁的工厂</h3><p>定义一个工厂，用来生成锁对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisLock <span class="title">getReentrantLock</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReentrantRedisLock(redisTemplate, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-4-测试"><a href="#3-5-4-测试" class="headerlink" title="3.5.4.测试"></a>3.5.4.测试</h3><p>我们定义一个定时任务，模拟清理订单的任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.lock.RedisLock;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.lock.RedisLockFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClearOrderTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisLockFactory redisLockFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/10 * * ? * *&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearOrderTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 执行任务</span></span><br><span class="line">        clearOrder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearOrder</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始清理未支付订单!&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        log.info(<span class="string">&quot;恢复数据库库存！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来，我们给任务加锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClearOrderTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisLockFactory redisLockFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/10 * * ? * *&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearOrderTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取锁对象</span></span><br><span class="line">        RedisLock lock = redisLockFactory.getReentrantLock(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        <span class="comment">// 尝试加锁</span></span><br><span class="line">        <span class="keyword">boolean</span> isLock = lock.tryLock(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 判断是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line">            <span class="comment">// 获取锁失败，结束任务</span></span><br><span class="line">            log.error(<span class="string">&quot;获取锁失败，任务终止！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取锁成功，开始执行任务&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行任务</span></span><br><span class="line">            clearOrder();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            log.warn(<span class="string">&quot;任务结束，释放锁&quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearOrder</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始清理未支付订单!&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        log.info(<span class="string">&quot;恢复数据库库存！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将启动项复制2份（或多分），测试锁是否能生效：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566365847213.png" alt="1566365847213"> </p><p>修改第二个启动项的端口，避免冲突</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566365918528.png" alt="1566365918528"></p><p>同时启动2个启动项，查看日志：</p><p>第一个服务：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566366085319.png" alt="1566366085319"></p><p>第二个服务：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566366093929.png" alt="1566366093929"></p><p>可以看到：</p><ul><li>在13:39:50秒时，8081服务获取锁失败，而8082服务获取锁成功</li><li>在13:40:00秒时，8082服务获取锁失败，而8081服务获取锁成功</li></ul><h2 id="3-6-Redisson"><a href="#3-6-Redisson" class="headerlink" title="3.6.Redisson"></a>3.6.Redisson</h2><p>如果按照Redlock算法来实现分布式锁，加上各种安全控制，代码会比较复杂。而开源的Redission框架就帮我们实现了各种基于Redis的分布式锁，包括Redlock锁。</p><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。其中包括(<code>BitSet</code>, <code>Set</code>, <code>Multimap</code>, <code>SortedSet</code>, <code>Map</code>, <code>List</code>, <code>Queue</code>, <code>BlockingQueue</code>, <code>Deque</code>, <code>BlockingDeque</code>, <code>Semaphore</code>, <code>Lock</code>, <code>AtomicLong</code>, <code>CountDownLatch</code>, <code>Publish / Subscribe</code>, <code>Bloom filter</code>, <code>Remote service</code>, <code>Spring cache</code>, <code>Executor service</code>, <code>Live Object service</code>, <code>Scheduler service</code>) Redisson提供了使用Redis的最简单和最便捷的方法。Redisson的宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p><p><a href="https://redisson.org/">官网地址</a>：<a href="https://redisson.org/">https://redisson.org/</a></p><p><a href="https://github.com/redisson/redisson">GitHub地址</a>：<a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></p><p>看看Redisson能实现的功能：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566377069700.png" alt="1566377069700"> </p><h3 id="3-6-1-快速入门"><a href="#3-6-1-快速入门" class="headerlink" title="3.6.1.快速入门"></a>3.6.1.快速入门</h3><h4 id="1）依赖"><a href="#1）依赖" class="headerlink" title="1）依赖"></a>1）依赖</h4><p>使用起来非常方便，首先引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）配置"><a href="#2）配置" class="headerlink" title="2）配置"></a>2）配置</h4><p>然后通过Java配置的方式，设置Redis的地址，构建RedissionClient客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置类</span></span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        <span class="comment">// 添加redis地址，这里添加了单点的地址，也可以使用config.useClusterServers()添加集群地址</span></span><br><span class="line">        config.useSingleServer()</span><br><span class="line">                .setAddress(<span class="string">&quot;redis://192.168.206.99:6379&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建客户端</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）常用API介绍："><a href="#3）常用API介绍：" class="headerlink" title="3）常用API介绍："></a>3）常用API介绍：</h4><p>RedissClient中定义了常见的锁：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556169332323.png" alt="1556169332323"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建锁对象，并制定锁的名称</span></span><br><span class="line">RLock lock = redissonClient.getLock(<span class="string">&quot;taskLock&quot;</span>);</span><br></pre></td></tr></table></figure><p>获取锁对象后，可以通过<code>tryLock()</code>方法获取锁：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556169690541.png" alt="1556169690541"></p><p>有3个重载的方法，可以控制锁是否需要重试来获取：</p><ul><li>三个参数：获取锁，设置锁等待时间<code>waitTime</code>、释放时间<code>leaseTime</code>，时间单位<code>unit</code>。<ul><li>如果获取锁失败后，会在<code>waitTime  </code>减去获取锁用时的剩余时间段内继续尝试获取锁，如果依然获取失败，则认为获取锁失败；</li><li>获取锁后，如果超过<code>leaseTime</code>未释放，为避免死锁会自动释放。</li></ul></li><li>两个参数：获取锁，设置锁等待时间<code>time</code>、时间单位<code>unit</code>。释放时间<code>leaseTime</code>按照默认的30s</li><li>空参：获取锁，<code>waitTime</code>默认0s，即获取锁失败不重试，<code>leaseTime</code>默认30s</li></ul><p>任务执行完毕，使用<code>unlock()</code>方法释放锁：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1556170353278.png" alt="1556170353278"> </p><h4 id="4）完整案例"><a href="#4）完整案例" class="headerlink" title="4）完整案例"></a>4）完整案例</h4><p>使用Redission来代替我们之前自定义锁的测试案例：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1566377926318.png" alt="1566377926318"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClearOrderTask2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/10 * * ? * *&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearOrderTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取锁对象</span></span><br><span class="line">        RLock lock = redissonClient.getLock(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        <span class="comment">// 尝试加锁</span></span><br><span class="line">        <span class="keyword">boolean</span> isLock = lock.tryLock();</span><br><span class="line">        <span class="comment">// 判断是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line">            <span class="comment">// 获取锁失败，结束任务</span></span><br><span class="line">            log.error(<span class="string">&quot;获取锁失败，任务终止！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取锁成功，开始执行任务&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行任务</span></span><br><span class="line">            clearOrder();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            log.warn(<span class="string">&quot;任务结束，释放锁&quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearOrder</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始清理未支付订单!&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        log.info(<span class="string">&quot;恢复数据库库存！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-2-Redisson实现细节"><a href="#3-6-2-Redisson实现细节" class="headerlink" title="3.6.2.Redisson实现细节"></a>3.6.2.Redisson实现细节</h3><p>首先看空参获取lock的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RedissonLock类</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(tryLockAsync());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RFuture&lt;Boolean&gt; <span class="title">tryLockAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tryLockAsync(Thread.currentThread().getId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RFuture&lt;Boolean&gt; <span class="title">tryLockAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tryAcquireOnceAsync(-<span class="number">1</span>, <span class="keyword">null</span>, threadId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RFuture&lt;Boolean&gt; <span class="title">tryAcquireOnceAsync</span><span class="params">(<span class="keyword">long</span> leaseTime, TimeUnit unit, <span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> tryLockInnerAsync(leaseTime, unit, threadId, RedisCommands.EVAL_NULL_BOOLEAN);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试获取锁，返回RFuture(带结果的异步任务)</span></span><br><span class="line">    RFuture&lt;Boolean&gt; ttlRemainingFuture = tryLockInnerAsync(commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(), TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_NULL_BOOLEAN);</span><br><span class="line">    <span class="comment">// 如果成功</span></span><br><span class="line">    ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lock acquired</span></span><br><span class="line">        <span class="keyword">if</span> (ttlRemaining) &#123;</span><br><span class="line">            <span class="comment">// 尝试自动续期（看门狗watch dog）</span></span><br><span class="line">            scheduleExpirationRenewal(threadId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ttlRemainingFuture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的核心有两部分：</p><ul><li>一个是获取锁的方法：tryLockInnerAsync</li><li>一个是自动续期（看门狗）的方法：scheduleExpirationRenewal</li></ul><h4 id="1）获取锁"><a href="#1）获取锁" class="headerlink" title="1）获取锁"></a>1）获取锁</h4><p>首先看tryLockInnerAsync，这个方法是获取锁的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">RFuture&lt;T&gt; <span class="title">tryLockInnerAsync</span><span class="params">(<span class="keyword">long</span> leaseTime, TimeUnit unit, <span class="keyword">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> </span>&#123;</span><br><span class="line">    internalLockLeaseTime = unit.toMillis(leaseTime);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, command,</span><br><span class="line">              <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;hset&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">                Collections.&lt;Object&gt;singletonList(getName()), internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的核心就是这段Lua脚本，看看与我们写的是不是基本类似呢，区别是最后返回了这个key的剩余有效期。</p><h4 id="2）锁的自动续期"><a href="#2）锁的自动续期" class="headerlink" title="2）锁的自动续期"></a>2）锁的自动续期</h4><p>锁如果在执行任务时自动过期，就会引起各种问题， 因此我们需要在锁过期前自动申请续期，这个被称为watch dog，看门狗。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleExpirationRenewal</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建entry，记录线程id，因为需要知道对哪个线程的锁刷新</span></span><br><span class="line">    ExpirationEntry entry = <span class="keyword">new</span> ExpirationEntry();</span><br><span class="line">    ExpirationEntry oldEntry = EXPIRATION_RENEWAL_MAP.putIfAbsent(getEntryName(), entry);</span><br><span class="line">    <span class="keyword">if</span> (oldEntry != <span class="keyword">null</span>) &#123;</span><br><span class="line">        oldEntry.addThreadId(threadId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        entry.addThreadId(threadId);</span><br><span class="line">        <span class="comment">// 刷新过期时间</span></span><br><span class="line">        renewExpiration();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷新时间的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">renewExpiration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExpirationEntry ee = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">        <span class="keyword">if</span> (ee == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置一个延迟刷新的任务，并且设置超时时间为总过期时间的1/3，例如总时间时30秒，则每隔10秒重试一次</span></span><br><span class="line">        Timeout task = commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                ExpirationEntry ent = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">                <span class="keyword">if</span> (ent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Long threadId = ent.getFirstThreadId();</span><br><span class="line">                <span class="keyword">if</span> (threadId == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 异步发送更新过期时间的请求</span></span><br><span class="line">                RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class="line">                <span class="comment">// 更新成功后的任务</span></span><br><span class="line">                future.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;Can&#x27;t update lock &quot;</span> + getName() + <span class="string">&quot; expiration&quot;</span>, e);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 再次调用自己</span></span><br><span class="line">                    renewExpiration();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        </span><br><span class="line">        ee.setTimeout(task);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>刷新过期时间的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title">renewExpirationAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">            <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">            <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">            <span class="string">&quot;return 0;&quot;</span>,</span><br><span class="line">        Collections.&lt;Object&gt;singletonList(getName()), </span><br><span class="line">        internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）带阻塞的获取锁"><a href="#3）带阻塞的获取锁" class="headerlink" title="3）带阻塞的获取锁"></a>3）带阻塞的获取锁</h4><p>阻塞获取锁，会在获取失败以后重试，不过会设置失败超时时间。</p><p><code>public boolean tryLock(long waitTime, long leaseTime, TimeUnit unit)</code></p><ul><li>waitTime：获取锁重试的最大超时时间，默认为0</li><li>leaseTime：释放锁的最大时间，默认时30秒</li><li>unit：时间单位</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取锁的重试时长</span></span><br><span class="line">        <span class="keyword">long</span> time = unit.toMillis(waitTime);</span><br><span class="line">        <span class="keyword">long</span> current = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> threadId = Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">// 尝试获取锁，并获取有效时间</span></span><br><span class="line">        Long ttl = tryAcquire(leaseTime, unit, threadId);</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (ttl == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取锁成功，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算获取锁的耗时是否超过了最大重试时间</span></span><br><span class="line">        time -= System.currentTimeMillis() - current;</span><br><span class="line">        <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果超时则认为获取锁失败，不再重试，直接返回</span></span><br><span class="line">            acquireFailed(threadId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 虽然失败，但是没有超过最大等待时间，继续获取锁</span></span><br><span class="line">        current = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 订阅锁释放的消息</span></span><br><span class="line">        RFuture&lt;RedissonLockEntry&gt; subscribeFuture = subscribe(threadId);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 此处会阻塞，等待消息。如果超时，则认为获取锁失败</span></span><br><span class="line">        <span class="keyword">if</span> (!await(subscribeFuture, time, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!subscribeFuture.cancel(<span class="keyword">false</span>)) &#123;</span><br><span class="line">                subscribeFuture.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        unsubscribe(subscribeFuture, threadId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            acquireFailed(threadId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 如果获取到订阅消息，说明锁已经释放，可以重试</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            time -= System.currentTimeMillis() - current;</span><br><span class="line">            <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                acquireFailed(threadId);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// 循环重试获取锁</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">                ttl = tryAcquire(leaseTime, unit, threadId);</span><br><span class="line">                <span class="comment">// lock acquired</span></span><br><span class="line">                <span class="keyword">if</span> (ttl == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                time -= System.currentTimeMillis() - currentTime;</span><br><span class="line">                <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    acquireFailed(threadId);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// waiting for message</span></span><br><span class="line">                currentTime = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">if</span> (ttl &gt;= <span class="number">0</span> &amp;&amp; ttl &lt; time) &#123;</span><br><span class="line">                    getEntry(threadId).getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    getEntry(threadId).getLatch().tryAcquire(time, TimeUnit.MILLISECONDS);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                time -= System.currentTimeMillis() - currentTime;</span><br><span class="line">                <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    acquireFailed(threadId);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            unsubscribe(subscribeFuture, threadId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取锁失败，会通过Redis的pubsub功能订阅一个频道，如果释放锁会通知自己，然后再重试获取锁。</p><h4 id="4）释放锁"><a href="#4）释放锁" class="headerlink" title="4）释放锁"></a>4）释放锁</h4><p>释放锁代码基本一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        get(unlockAsync(Thread.currentThread().getId()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RedisException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getCause() <span class="keyword">instanceof</span> IllegalMonitorStateException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IllegalMonitorStateException) e.getCause();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面跟到unlockAsync方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RFuture&lt;Void&gt; <span class="title">unlockAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    RPromise&lt;Void&gt; result = <span class="keyword">new</span> RedissonPromise&lt;Void&gt;();</span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    RFuture&lt;Boolean&gt; future = unlockInnerAsync(threadId);</span><br><span class="line"><span class="comment">// 回调</span></span><br><span class="line">    future.onComplete((opStatus, e) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 出现异常的情况，取消自动续期任务</span></span><br><span class="line">            cancelExpirationRenewal(threadId);</span><br><span class="line">            result.tryFailure(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 说明锁是自动释放，已经不是自己的了</span></span><br><span class="line">        <span class="keyword">if</span> (opStatus == <span class="keyword">null</span>) &#123;</span><br><span class="line">            IllegalMonitorStateException cause = <span class="keyword">new</span> IllegalMonitorStateException(<span class="string">&quot;attempt to unlock lock, not locked by current thread by node id: &quot;</span></span><br><span class="line">                                                                                  + id + <span class="string">&quot; thread-id: &quot;</span> + threadId);</span><br><span class="line">            result.tryFailure(cause);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 取消自动续期任务</span></span><br><span class="line">        cancelExpirationRenewal(threadId);</span><br><span class="line">        result.trySuccess(<span class="keyword">null</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后关键是释放锁的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title">unlockInnerAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">                <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return nil;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                <span class="string">&quot;local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); &quot;</span> +</span><br><span class="line">                <span class="string">&quot;if (counter &gt; 0) then &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 0; &quot;</span> +</span><br><span class="line">                <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;del&#x27;, KEYS[1]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 1; &quot;</span>+</span><br><span class="line">                <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return nil;&quot;</span>,</span><br><span class="line">                Arrays.&lt;Object&gt;asList(getName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码基本一致，就是再最后释放成功后，通过<code>redis.call(&#39;publish&#39;, KEYS[2], ARGV[1]);</code>发布了一条消息，通知锁已经释放，那些再等待的其它线程，就可以获取锁了。</p><h2 id="3-7-总结"><a href="#3-7-总结" class="headerlink" title="3.7.总结"></a>3.7.总结</h2><p>总结来看，Redis实现分布式锁，具备下列优缺点：</p><ul><li>优点：实现简单，性能好，并发能力强，如果对并发能力有要求，推荐使用</li><li>缺点：可靠性有争议，极端情况会出现锁失效问题，如果对安全要求较高，不建议使用</li></ul><h1 id="4-zookeeper实现分布式锁"><a href="#4-zookeeper实现分布式锁" class="headerlink" title="4.zookeeper实现分布式锁"></a>4.zookeeper实现分布式锁</h1><p>Zookeeper是一种提供配置管理、分布式协同以及命名的中心化服务。</p><p>zk的模型是这样的：zk包含一系列的节点，叫做znode，就好像文件系统一样每个znode表示一个目录，然后znode有一些特性：</p><ul><li><p><strong>有序节点</strong>：假如当前有一个父节点为<code>/lock</code>，我们可以在这个父节点下面创建子节点；</p><p>zookeeper提供了一个可选的有序特性，例如我们可以创建子节点“/lock/node-”并且指明有序，那么zookeeper在生成子节点时会根据当前的子节点数量自动添加整数序号</p><p>也就是说，如果是第一个创建的子节点，那么生成的子节点为<code>/lock/node-0000000000</code>，下一个节点则为<code>/lock/node-0000000001</code>，依次类推。</p></li><li><p><strong>临时节点</strong>：客户端可以建立一个临时节点，在会话结束或者会话超时后，zookeeper会自动删除该节点。</p></li><li><p><strong>事件监听</strong>：在读取数据时，我们可以同时对节点设置事件监听，当节点数据或结构变化时，zookeeper会通知客户端。当前zookeeper有如下四种事件：</p></li><li><ul><li>节点创建</li><li>节点删除</li><li>节点数据修改</li><li>子节点变更</li></ul></li></ul><p>基于以上的一些zk的特性，我们很容易得出使用zk实现分布式锁的落地方案：</p><ol><li><p>使用zk的临时节点和有序节点，每个线程获取锁就是在zk创建一个临时有序的节点，比如在/lock/目录下。</p></li><li><p>创建节点成功后，获取/lock目录下的所有临时节点，再判断当前线程创建的节点是否是所有的节点的序号最小的节点</p></li><li><p>如果当前线程创建的节点是所有节点序号最小的节点，则认为获取锁成功。</p></li><li><p>如果当前线程创建的节点不是所有节点序号最小的节点，则对节点序号的前一个节点添加一个事件监听。</p><p>比如当前线程获取到的节点序号为<code>/lock/003</code>,然后所有的节点列表为<code>[/lock/001,/lock/002,/lock/003]</code>,则对<code>/lock/002</code>这个节点添加一个事件监听器。</p></li></ol><p>如果锁释放了，会唤醒下一个序号的节点，然后重新执行第3步，判断是否自己的节点序号是最小。</p><p>比如<code>/lock/001</code>释放了，<code>/lock/002</code>监听到时间，此时节点集合为<code>[/lock/002,/lock/003]</code>,则<code>/lock/002</code>为最小序号节点，获取到锁。</p><p>Curator是一个zookeeper的开源客户端，也提供了分布式锁的实现。</p><p>来看看锁的一些特性Zookeeper是否满足：</p><ul><li><p>互斥：因为只有一个最小节点，满足互斥特性</p></li><li><p>锁释放：使用Zookeeper可以有效的解决锁无法释放的问题，因为在创建锁的时候，客户端会在ZK中创建一个临时节点，一旦客户端获取到锁之后突然挂掉（Session连接断开），那么这个临时节点就会自动删除掉。其他客户端就可以再次获得锁。</p></li><li><p>阻塞锁：使用Zookeeper可以实现阻塞的锁，客户端可以通过在ZK中创建顺序节点，并且在节点上绑定监听器，一旦节点有变化，Zookeeper会通知客户端，客户端可以检查自己创建的节点是不是当前所有节点中序号最小的，如果是，那么自己就获取到锁，便可以执行业务逻辑了。</p></li><li><p>可重入：使用Zookeeper也可以有效的解决不可重入的问题，客户端在创建节点的时候，把当前客户端的主机信息和线程信息直接写入到节点中，下次想要获取锁的时候和当前最小的节点中的数据比对一下就可以了。如果和自己的信息一样，那么自己直接获取到锁，如果不一样就再创建一个临时的顺序节点，参与排队。</p></li><li><p>高可用：使用Zookeeper可以有效的解决单点问题，ZK是集群部署的，只要集群中有半数以上的机器存活，就可以对外提供服务。</p></li><li><p>高性能：Zookeeper集群是满足强一致性的，因此就会牺牲一定的性能，与Redis相比略显不足</p></li></ul><p>总结：</p><ul><li>优点：使用非常简单，不用操心释放问题、阻塞获取问题</li><li>缺点：性能比Redis稍差一些</li></ul><h1 id="5-基于数据库的实现"><a href="#5-基于数据库的实现" class="headerlink" title="5.基于数据库的实现"></a>5.基于数据库的实现</h1><p>准备一张表，记录锁相关信息:<code>tb_lock</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">idlockname</span><br><span class="line">1createOrder</span><br><span class="line">2evictOrder</span><br></pre></td></tr></table></figure><p>互斥：利用了数据库本身的排它锁来实现。</p><p>步骤：</p><ul><li>获取锁：select * from tb_lock where method_name = “evictOrder” for update</li><li>执行自己的业务 …</li><li>释放锁：commit 提交事务</li></ul><p>优点：</p><ul><li>实现简单</li><li>锁的自动释放</li></ul><p>缺点：</p><ul><li>依赖于数据库，性能是一个问题</li><li>单点故障问题</li><li>并发一般</li></ul><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h1><p>分布式锁释放方式多种多样，每种方式都有自己的优缺点，我们应该根据业务的具体需求，先择合适的实现。</p><p>Redis实现：实现比较简单，性能最高，但是可靠性难以维护</p><p>Zookeeper实现：实现最简单，可靠性最高，性能比redis略低</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="分布式锁" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-延迟队列和订单清理_分布式日志服务、链路追踪</title>
    <link href="http://example.com/2022/07/03/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86-%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <id>http://example.com/2022/07/03/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86-%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E3%80%81%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</id>
    <published>2022-07-03T01:53:21.000Z</published>
    <updated>2022-08-02T14:36:34.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">了解Java的DelayQueue原理</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">理解Redis实现延迟队列原理</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">理解RabbitMQ死信队列原理</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">能实现清理订单业务</span></span><br></pre></td></tr></table></figure><p>全文总结写在前面：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">下单了，但是迟迟不肯支付，那么就需要在一定时间范围内取消订单</span></span><br><span class="line"><span class="attr">1</span> <span class="string">前端3s是否支付，5min 后向trade微服后端发起取消订单（取消订单+添加库存）？？？？</span></span><br><span class="line"><span class="attr">2</span> <span class="string">还是说在后端内部写任务？？？？</span></span><br><span class="line"><span class="attr">定期调度，发现超过一定时间还没有支付，那么就取消订单，添加库存</span></span><br><span class="line"><span class="attr">答：我们选择在后台进行未支付订单清除，可以直接跳转到RabbitMQ的死信队列方案！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">quartz表示定时任务调度框架，还有其他的调度方式</span></span><br><span class="line"><span class="meta">cron表达式</span> <span class="string">是定时调度的触发时间表达式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">我们先理论分析测试一下（任务调度跟分布式锁的引出）</span></span><br><span class="line"><span class="attr">我们首先使用spring的schedule</span></span><br><span class="line"><span class="attr">trade微服启动器添加注解开启调度支持等前导工作</span></span><br><span class="line"><span class="attr">然后写一个调度任务intervalCancelOrder</span></span><br><span class="line"><span class="attr">根据cron表达式，10s调用一次任务里面的cancelOrder方法，</span></span><br><span class="line"><span class="attr">判断当前时间距离订单创建时间是不是已经超过了时间范围</span></span><br><span class="line"><span class="attr">如果超过了就（取消订单，加上库存）</span></span><br><span class="line"><span class="attr">发现定时任务调度生效了！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">思考一个问题：</span></span><br><span class="line"><span class="attr">trade微服实际中是集群的形式</span></span><br><span class="line"><span class="attr">极端情况下，集群中的trade服务同时到点调度cancelOrder清理订单任务，</span></span><br><span class="line"><span class="attr">那么cancelOrder方法任务就会同时被执行</span></span><br><span class="line"><span class="attr">清理订单除了关闭订单，还需要加库存几次，那是万万不可的，</span></span><br><span class="line"><span class="attr">因此可以给cancelOrder方法加锁（synchronized)！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">但是跟前面讲解的分布式事务一样，</span></span><br><span class="line"><span class="attr">由于是集群分布式的，加的锁不在同一个进程，因此加锁失败</span></span><br><span class="line"><span class="attr">所以引出分布式锁！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">1</span> <span class="string">单机事务，做了分布式，需要解决事务问题时，要用分布式事务</span></span><br><span class="line"><span class="attr">2</span> <span class="string">单机加锁，做了分布式，需要解决实务问题时，要用分布式锁！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">除了上面讲的spring集成的定时任务调度框架，现在流行的是许雪里的第三方框架！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">上面讲的取消订单业务中，使用定时调度，然后扫描整张数据库表，太耗时了</span></span><br><span class="line"><span class="attr">因此，接下来进行优化：</span></span><br><span class="line"></span><br><span class="line"><span class="attr">1</span> <span class="string">利用redis</span></span><br><span class="line"><span class="attr">利用redis的key过期机制，下单时将订单id写入redis，</span></span><br><span class="line"><span class="attr">过期时间30分钟，30分钟后数据过期，我们后台对redis的key进行监听的代码会收到redis的过期通知，</span></span><br><span class="line"><span class="attr">从而得知订单ID，然后检查该订单状态，如果未支付，则进行关闭处理，加上库存处理。</span></span><br><span class="line"><span class="meta">如果支付过了的话，后台就将redis的订单id</span> <span class="string">key删除！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">虽然redis有他的优点，但是也有他的明显的缺点。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">2</span> <span class="string">时间轮算法等等方案，都不是最优的，最后使用RabbitMQ延迟队列</span></span><br><span class="line"></span><br><span class="line"><span class="attr">3</span> <span class="string">RabbitMQ延迟队列（死信队列）</span></span><br><span class="line"><span class="attr">控制一个消息变为死信有两种方式，一种是给死信队列设置TTL，一种是给消息设置TTL。</span></span><br><span class="line"><span class="attr">方案流程：</span></span><br><span class="line"><span class="attr">消息发布给普通交换机，普通交换机将消息放到死信队列，当ttl到达时，死信会到达死信交换机</span></span><br><span class="line"><span class="attr">然后再转发到普通队列中！</span></span><br><span class="line"><span class="attr">ps：死信队列中的消息没有被订阅，因此一定会变成死信消息，而最终达到普通队列后就是普通消息</span></span><br><span class="line"><span class="attr">我们此时再去订阅普通消息，就可以达到延迟处理的效果了！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">优点：</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现简单</span></span><br><span class="line"><span class="meta">-</span> <span class="string">可持久化</span></span><br><span class="line"><span class="meta">-</span> <span class="string">高可用集群</span></span><br><span class="line"><span class="meta">-</span> <span class="string">性能强</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实时性好</span></span><br><span class="line"></span><br><span class="line"><span class="attr">但是RabbitMQ的死信队列也有他的缺陷：</span></span><br><span class="line"><span class="attr">1</span> <span class="string">如果TTL比较大，且生产消息频率比较大时 就会形成大量的消息堆积</span></span><br><span class="line"><span class="attr">因此比较适合处理短时超时的应用场景，比如买或者票，TTL为20分钟！</span></span><br><span class="line"><span class="attr">2</span> <span class="string">无法删除消息</span></span><br><span class="line"></span><br><span class="line"><span class="attr">使用RabbitMQ来清理未支付订单：</span></span><br><span class="line"><span class="attr">1</span> <span class="string">首先修改下单业务：</span></span><br><span class="line"><span class="attr">下单业务的最后，向`ly.order.exchange`这个交换机发送消息，携带订单id</span></span><br><span class="line"></span><br><span class="line"><span class="attr">2</span> <span class="string">然后一个独立的消费者，需要监听`ly.evict.order.queue`这个队列，业务：</span></span><br><span class="line"><span class="attr">（1）接收到订单id信息</span></span><br><span class="line"><span class="attr">（2）根据id查询订单状态，判断是否是未支付</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">如果未支付则需要关闭订单，设置状态为5（已关闭），注意**幂等处理**</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">如果已支付，则无需处理</span></span><br><span class="line"><span class="attr">（3）如果关闭订单了，还要查询对应OrderDetail，得到其中的商品和数量信息</span></span><br><span class="line"><span class="attr">（4）调用商品微服务，恢复库存，注意分布式事务问题</span></span><br></pre></td></tr></table></figure><h1 id="1-业务需求"><a href="#1-业务需求" class="headerlink" title="1.业务需求"></a>1.业务需求</h1><p>之前我们讨论过扣减库存的问题，下单减库存和支付减库存各自有一定的优势和缺陷，我们选择了<strong>下单减库存</strong>的方案。</p><p>订单创建之后，就会扣减库存，并且生成了支付的二维码，但是<strong>如果用户一直不支付，就会导致商品库存被占用，而不能形成有效交易，会损害商家的利益，流失真正的具有购买意向的客户</strong>。</p><p>因此，如果有客户下单<strong>超过一定的时间没有付款，我们必须关闭订单，释放库存</strong>。</p><p>那么问题来了，我们如何得知哪些订单时超是未支付的订单呢？</p><p>订单下单后，需要等待一段时间后再判断是否支付，到底是关闭还是继续。这样的延时执行的业务，称为<strong>延时任务</strong>。</p><h1 id="2-延迟队列"><a href="#2-延迟队列" class="headerlink" title="2.延迟队列"></a>2.延迟队列</h1><p>与延时关闭订单这样的业务类似，还有很多需要延时执行的任务，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1 订餐通知:下单成功后60s之后给用户发送短信通知。</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2 当订单一直处于未支付状态时，如何及时的关闭订单，并退还库存？</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3 如何定期检查处于退款状态的订单是否已经退款成功？</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4 新创建店铺，N天内没有上传商品，系统如何知道该信息，并发送激活短信？</span></span><br></pre></td></tr></table></figure><p>而解决这一类<strong>延时任务</strong>问题，一般都会通过<strong>延迟队列</strong>来解决</p><h2 id="2-1-什么是延迟队列"><a href="#2-1-什么是延迟队列" class="headerlink" title="2.1.什么是延迟队列"></a>2.1.什么是延迟队列</h2><p>延迟队列，首先是队列，例如我们学习的MQ，是消息队列，也就是一个存放消息的容器。延迟队列就是延迟消费的消息队列。队列中存储的是<strong>延时消息</strong>，所谓“<strong>延时消息</strong>”是指当消息被发送以后，并不想让消费者立即拿到消息，而是等待指定时间后，消费者才拿到这个消息进行消费,**(延迟送达)**。</p><p>流程如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200329190127824.png" alt="image-20200329190127824"></p><p>延迟队列不仅仅要实现消息的延迟消费，最好还要满足下面的几点要求：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1 可靠性：消息进入到延迟队列后， 保证至少被消费⼀一次。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">-</span> <span class="string">2 高可用性：至少得支持多实例部署。挂掉一 个实例后，还有后备实例继续提供服务。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">-</span> <span class="string">3 实时性：允许存在一定的时间误差，希望在秒级。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">-</span> <span class="string">4 支持消息删除：业务使用方，可以随时删除指定消息。</span></span><br></pre></td></tr></table></figure><p>目前比较常见的方案包括：</p><ul><li><strong>定期轮询数据库</strong></li><li><strong>DelayQueue</strong></li><li><strong>定时任务（Quartz）</strong></li><li><strong>Redis键过期通知</strong></li><li><strong>Redis(sorted_set)</strong> </li><li><strong>时间轮</strong></li><li><strong>RabbitMQ 死信队列</strong></li></ul><p>我们以<strong>清理超时未支付订单</strong>为例，来看看这几种实现方案，我们假设需要<strong>清理超过半小时未支付的订单</strong>。</p><h2 id="2-2-定期轮询数据库"><a href="#2-2-定期轮询数据库" class="headerlink" title="2.2.定期轮询数据库"></a>2.2.定期轮询数据库</h2><p>基本思路：开启一个定时任务，每隔一段时间扫描数据库，找到需要清理的订单，然后执行清理订单，恢复库存业务。</p><ul><li>优点：实现简单，定时任务所在服务可以集群，保证了可靠性，高可用性。 </li><li>缺点：<ul><li>定时扫描频率过高<code>数据库</code>压力比较大，频率过低则实时性不能保证。</li><li>高可用集群时需要保证多个扫描任务的线程安全，避免重复执行任务，可以利用分布式锁、乐观锁、保证接口幂等等各种方式来解决。</li></ul></li></ul><h2 id="2-3-DelayQueue"><a href="#2-3-DelayQueue" class="headerlink" title="2.3.DelayQueue"></a>2.3.DelayQueue</h2><p>JDK中的java.util.concurrent包中的DelayQueue可以作为单JVM的延迟队列。</p><p>要了解DelayQueue的原理，你需要先知道几个接口：</p><ul><li>Comparable：标记一种可比较大小的对象类型</li><li>Delayed：标记在给定延迟之后应该执行的对象</li></ul><h3 id="2-3-1-Comparable"><a href="#2-3-1-Comparable" class="headerlink" title="2.3.1.Comparable"></a>2.3.1.Comparable</h3><p>该接口的实现类必须实现compareTo方法来定义比较大小的规则，并按照规则完成对象的排序。这种顺序称为类的自然顺序，类的compareTo方法称为类的自然比较方法。</p><p>例如：Integer类就实现了Comparable：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Integer anotherInteger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> compare(<span class="keyword">this</span>.value, anotherInteger.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x &lt; y) ? -<span class="number">1</span> : ((x == y) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此Integer的对象可以根据compareTo方法排序，从而实现集合排序这样的功能。</p><h3 id="2-3-2-Delayed"><a href="#2-3-2-Delayed" class="headerlink" title="2.3.2.Delayed"></a>2.3.2.Delayed</h3><p>Delayed一种混合接口，Delayed继承了Comparable，用来标记那些应该在给定延迟时间之后执行的对象。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Delayed</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Delayed</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the remaining delay associated with this object, in the</span></span><br><span class="line"><span class="comment">     * given time unit.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit the time unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the remaining delay; zero or negative values indicate</span></span><br><span class="line"><span class="comment">     * that the delay has already elapsed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getDelay()方法返回与此对象相关的剩余延迟时间，以给定的时间单位表示，当时间为0时该对象就会被执行。</p><p>另外，Delayed继承了Comparable，所以其实现类还要实现compareTo方法，用来对延迟对象排序，一般排序规则就是剩余延时时间</p><p>例如我定义一个类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Delayed;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时执行的任务， D是任务相关数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayTask</span>&lt;<span class="title">D</span>&gt; <span class="keyword">implements</span> <span class="title">Delayed</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务执行时间，标准时间1970开始的毫秒值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> executeTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务中需要的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> D data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelayTask</span><span class="params">(<span class="keyword">long</span> executeTime, D data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.executeTime = executeTime;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用执行时间减去当前时间，得到剩余时间</span></span><br><span class="line">        <span class="keyword">return</span> unit.convert(executeTime - System.currentTimeMillis(), TimeUnit.MICROSECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 比较剩余时间的大小</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (getDelay(TimeUnit.MILLISECONDS) - o.getDelay(TimeUnit.MILLISECONDS));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义的DelayTask对象包含两个属性：</p><ul><li>executeTime：延迟任务的执行时间，毫秒值</li><li>data：任务中可能需要的数据，也可以是一个Runnable</li></ul><p>并且实现了getDelay方法，方便知道这个任务还有多久执行。</p><p>实现了compareTo方法，用于根据剩余时间比较大小</p><h3 id="2-3-3-DelayQueue"><a href="#2-3-3-DelayQueue" class="headerlink" title="2.3.3.DelayQueue"></a>2.3.3.DelayQueue</h3><p>DelayQueue就是延迟队列，底层是一个有序的无界队列（PriorityQueue），元素类型必须是Delayed类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayQueue</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Delayed</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PriorityQueue&lt;E&gt; q = <span class="keyword">new</span> PriorityQueue&lt;E&gt;();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存储在DelayQueue的元素会排序，一般根据getDelay()的结果排序，队首是延迟期（getDelay）最短的元素。</p><p>当调用DelayQueue的take()方法获取元素时，会拿到已经到期的元素（getDelay返回0），不过如果没有到期元素，则会阻塞等待（线程休眠）或者返回null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检索并删除此队列的头，如有必要，将一直等待，直到此队列上有一个具有过期延迟的元素可用为止。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    <span class="comment">// 获取锁，当线程被休眠时释放锁</span></span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 尝试从队首获取一个元素</span></span><br><span class="line">            E first = q.peek();</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">// 如果没有，说明队列为空，则等待，释放锁</span></span><br><span class="line">                available.await();</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 有元素，则获取元素的到期时间</span></span><br><span class="line">                <span class="keyword">long</span> delay = first.getDelay(NANOSECONDS);</span><br><span class="line">                <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="comment">// 已经到期，则取出并返回</span></span><br><span class="line">                    <span class="keyword">return</span> q.poll();</span><br><span class="line">                <span class="comment">// 未到期，置空避免等待时依然持有元素</span></span><br><span class="line">                first = <span class="keyword">null</span>; <span class="comment">// don&#x27;t retain ref while waiting</span></span><br><span class="line">                <span class="keyword">if</span> (leader != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">// 判断目前是否有其它线程在操作，有则等待</span></span><br><span class="line">                    available.await();</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 没有，则获取当前线程</span></span><br><span class="line">                    Thread thisThread = Thread.currentThread();</span><br><span class="line">                    leader = thisThread;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 让当前线程休眠至delay到期，避免CPU无用轮询</span></span><br><span class="line">                        available.awaitNanos(delay);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (leader == thisThread)</span><br><span class="line">                            leader = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (leader == <span class="keyword">null</span> &amp;&amp; q.peek() != <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">// 如果有元素了，唤醒其它等待中的线程</span></span><br><span class="line">            available.signal();</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.demo.pojo.DelayTask;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.DelayQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayQueueDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ExecutorService es = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelayQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个延迟队列</span></span><br><span class="line">        DelayQueue&lt;DelayTask&lt;String&gt;&gt; queue = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始执行任务</span></span><br><span class="line">        es.submit(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;尝试获取任务。。。&quot;</span>);</span><br><span class="line">                    DelayTask&lt;String&gt; task = queue.take();</span><br><span class="line">                    log.warn(<span class="string">&quot;获取到任务&#123;&#125;&quot;</span>, task.getData());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 开始向队列中添加任务</span></span><br><span class="line">        es.submit(() -&gt; &#123;</span><br><span class="line">            log.error(<span class="string">&quot;开始添加任务。。。&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                queue.add(<span class="keyword">new</span> DelayTask&lt;String&gt;(System.currentTimeMillis() + <span class="number">1000</span> * i, <span class="string">&quot;task_&quot;</span> + i ));</span><br><span class="line">            &#125;</span><br><span class="line">            log.error(<span class="string">&quot;任务添加结束。。。&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待任务执行完毕</span></span><br><span class="line">        log.info(<span class="string">&quot;主函数任务结束。。。&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个线程任务，一个向队列中添加任务，任务之间时差是1秒，另一个从队列中取任务，结果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200331202231874.png" alt="image-20200331202231874"></p><h3 id="2-3-4-优缺点"><a href="#2-3-4-优缺点" class="headerlink" title="2.3.4.优缺点"></a>2.3.4.优缺点</h3><p>优点: </p><ul><li>不引入其他服务依赖，wait-notify机制，不做polling，不会浪费cpu。</li><li>时效性好</li></ul><p> 缺点: </p><ul><li>数据保存在JVM内存中，当应用重启会造成数据丢失，或者数据量大时造成DelayQueue过大</li><li>当前JVM内有效，应用与单进程场景</li></ul><h2 id="2-4-定时任务（Quartz）"><a href="#2-4-定时任务（Quartz）" class="headerlink" title="2.4.定时任务（Quartz）"></a>2.4.定时任务（Quartz）</h2><p><strong>基本思路</strong>：</p><p>在每次下单后，都开启一个延期30分钟的定时任务，任务会检查订单是否支付，如果未支付则关闭订单，恢复库存。</p><p><strong>优点</strong>：</p><ul><li>实现简单</li><li>实时性好，时差在可以接受的范围内</li></ul><p><strong>缺点</strong>：</p><ul><li>需要开启较多的定时任务，当业务并发量大时会带来CPU的额外负担</li></ul><h2 id="2-5-Redis键过期通知"><a href="#2-5-Redis键过期通知" class="headerlink" title="2.5.Redis键过期通知"></a>2.5.Redis键过期通知</h2><h3 id="2-5-1-基本原理"><a href="#2-5-1-基本原理" class="headerlink" title="2.5.1.基本原理"></a>2.5.1.基本原理</h3><p>利用redis的key过期机制，下单时将订单id写入redis，过期时间30分钟，30分钟后数据过期，我们的代码会收到redis的过期通知，从而得知订单ID，然后检查该订单状态，如果未支付，则进行处理</p><p>那么问题来了：如何才能订阅redis的key过期事件，如何得到Redis通知呢？</p><p><strong>1）开启redis的key事件通知</strong></p><p>首先，需要修改redis的配置文件：redis.conf，在其中添加一行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notify-keyspace-events Ex</span><br></pre></td></tr></table></figure><p>这里<code>Ex</code>是开启redis的key过期相关事件，可选的事件列表包括：</p><table><thead><tr><th>字符</th><th>发送通知</th></tr></thead><tbody><tr><td>K</td><td>键空间通知，keyspace事件，事件以<code>__keyspace@&lt;db&gt;__</code>为前缀进行发布；</td></tr><tr><td>E</td><td>键事件通知，keyevent事件，事件以<code>__keyevent@&lt;db&gt;__</code>为前缀进行发布；</td></tr><tr><td><em>g</em></td><td>DEL 、 EXPIRE 、 RENAME 等数据类型无关的通用命令的通知</td></tr><tr><td><strong>$</strong></td><td>字符串命令的通知</td></tr><tr><td><strong>l</strong></td><td>列表命令的通知</td></tr><tr><td><strong>s</strong></td><td>集合命令的通知</td></tr><tr><td><strong>h</strong></td><td>哈希命令的通知</td></tr><tr><td><strong>z</strong></td><td>有序集合命令的通知</td></tr><tr><td><em>x</em></td><td><em>过期事件：每当有过期键被删除时发送</em></td></tr><tr><td><em>e</em></td><td><em>驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</em></td></tr><tr><td>A</td><td>参数 g$lshzxe 的别名，相当于是All</td></tr></tbody></table><p><strong>2）监听redis事件</strong></p><p>打开一个redis的控制台，然后输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PSUBSCRIBE __keyevent@0__:expired</span><br></pre></td></tr></table></figure><p>然后会得到反馈信息，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PSUBSCRIBE __keyevent@0__:expired</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;psubscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;__keyevent@0__:expired&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>此时，打开另一个Redis控制台，然后添加一个带有过期时间的key：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> heima109 123 EX 5</span><br></pre></td></tr></table></figure><p>这里设置num值为123，并在5秒后过期</p><p>稍等5秒后，会在第一个控制台中看到如下信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;__keyevent@0__:expired&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;__keyevent@0__:expired&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;num&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到我们得到了过期的<code>key</code>的名称</p><h3 id="2-5-2-Java代码监听通知"><a href="#2-5-2-Java代码监听通知" class="headerlink" title="2.5.2.Java代码监听通知"></a>2.5.2.Java代码监听通知</h3><p>我们演示如何通过SpringDataRedis来监听过期的Key</p><p><strong>1）引入依赖</strong></p><p>创建一个SpringBoot的Demo工程，引入Redis依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2）配置Redis地址</strong></p><p>在<code>application.properties</code>中添加redis地址：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">ly-redis</span></span><br></pre></td></tr></table></figure><p><strong>3）配置消息监听器</strong></p><p>编写一个配置类，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.KeyExpirationEventMessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Redis消息监听器的容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置一个过期key的消息监听器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyExpirationEventMessageListener <span class="title">redisKeyExpirationListener</span><span class="params">(RedisMessageListenerContainer container)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建监听器，覆盖监听器默认的doHandleMessage方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyExpirationEventMessageListener(container)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHandleMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取消息体</span></span><br><span class="line">                <span class="keyword">byte</span>[] body = message.getBody();</span><br><span class="line">                <span class="comment">// 获取消息类型</span></span><br><span class="line">                <span class="keyword">byte</span>[] channel = message.getChannel();</span><br><span class="line">                <span class="comment">// 输出</span></span><br><span class="line">                System.out.println(<span class="string">&quot;body = &quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">                System.out.println(<span class="string">&quot;channel = &quot;</span> + <span class="keyword">new</span> String(channel));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，然后在redis中添加一个过期key：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> num 123 EX 5</span><br></pre></td></tr></table></figure><p>这里设置num值为123，并在5秒后过期。</p><p>一段时间后，即可在控制台看到打印的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">body = num</span><br><span class="line">channel = __keyevent@0__:expired</span><br></pre></td></tr></table></figure><h3 id="2-5-3-优缺点"><a href="#2-5-3-优缺点" class="headerlink" title="2.5.3.优缺点"></a>2.5.3.优缺点</h3><p><strong>优点</strong>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">高可用，redis集群具备高并发、高可用的特性</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实时性，监听事件通知几乎是瞬时的</span></span><br><span class="line"><span class="meta">-</span> <span class="string">支持消息删除</span></span><br></pre></td></tr></table></figure><p><strong>缺点</strong>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">大量键同一时间过期，对redis来说负载大</span></span><br><span class="line"><span class="meta">-</span> <span class="string">消息只会发送一次，没有确认机制，不能保证可靠性</span></span><br><span class="line"><span class="meta">-</span> <span class="string">持久性受限于Redis</span></span><br><span class="line"><span class="meta">-</span> <span class="string">需要注意消息广播后的并发安全问题</span></span><br></pre></td></tr></table></figure><h2 id="2-7-Redis-sorted-set"><a href="#2-7-Redis-sorted-set" class="headerlink" title="2.7.Redis(sorted_set)"></a>2.7.Redis(sorted_set)</h2><p>基本原理：基于redis的sorted_set结构来维护一个延迟任务的列表（待执行队列），并按照执行时间排序。开启独立的线程不停尝试获取sorted_set中的第一个元素，判断执行时间是否小于等于当前时间，如果是则将任务迁移到另外一个队列（准备执行队列），可以用list结构。其它线程可以不断从这个队列中获取任务并执行。</p><p>order_id delay_time</p><h3 id="2-7-1-开源实现"><a href="#2-7-1-开源实现" class="headerlink" title="2.7.1.开源实现"></a>2.7.1.开源实现</h3><p>目前又不少公司已经基于上述原理实现并开源了自己的代码，例如：</p><p>美图的LMSTFY，参考：<a href="https://zhuanlan.zhihu.com/p/94082947%E3%80%82">https://zhuanlan.zhihu.com/p/94082947。</a></p><p>有赞团队开源实现，参考：<a href="https://tech.youzan.com/queuing_delay/">https://tech.youzan.com/queuing_delay/</a></p><p>这里以有赞的设计为例来看。</p><p>这个设计中包含四个角色：</p><ul><li><code>Job Pool</code>：用来存放所有Job的元信息。</li><li><code>Delay Bucket</code>：是一组以时间为维度的有序队列，用来存放所有需要延迟的或已经被拒绝的Job（这里只存放Job Id，需要到Job Pool获取任务信息）。</li><li><code>Ready Queue</code>：存放处于Ready状态的Job（这里只存放Job Id），以供消费程序消费。</li><li><code>Timer</code>：负责实时扫描各个Bucket，并将delay时间大于等于当前时间的Job放入到对应的<code>Ready Queue</code>。</li></ul><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200331224340286.png" alt="image-20200331224340286"> </p><p>再来看看一个任务（Job）的状态转换：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200331224925929.png" alt="image-20200331224925929"> </p><p>其中包括的状态：</p><ul><li>ready：可执行状态，等待消费。</li><li>delay：不可执行状态，等待时钟周期。</li><li>reserved：已被消费者读取，但超过一定时间还未得到消费者的响应（delete、finish），重新放入Read队列。</li><li>deleted：已被消费完成或者已被删除。</li></ul><h3 id="2-7-2-优缺点"><a href="#2-7-2-优缺点" class="headerlink" title="2.7.2.优缺点"></a>2.7.2.优缺点</h3><p><strong>优点</strong>：</p><ul><li>高可用性</li><li>实时性</li><li>持久性</li><li>支持消息删除</li></ul><p><strong>缺点</strong>：</p><ul><li>独立线程的无限循环，CPU的浪费，可以改成类似于DelayQueue的wait和notify机制</li><li>消费端在reserve job的时候，采用的是http短轮询的方式，IO开销较大，可以改进为基于长连接方式</li><li>数据存储使用的redis，消息在持久化上，受限于redis的特性，可能导致数据丢失</li></ul><h2 id="2-8-时间轮算法"><a href="#2-8-时间轮算法" class="headerlink" title="2.8.时间轮算法"></a>2.8.时间轮算法</h2><p>基于时间轮算法多用在定时任务框架，或者分布式任务调度中，并直接没有可用的延迟队列框架，不过，前面已经说过，我们可以基于定时任务来实现延迟队列，殊途同归。</p><p>我们可以看看原理：<a href="https://www.veaxen.com/%E7%AE%97%E6%B3%95-%E6%97%B6%E9%97%B4%E8%BD%AE.html">参考时间轮算法</a></p><h2 id="2-9-RabbitMQ-延迟队列"><a href="#2-9-RabbitMQ-延迟队列" class="headerlink" title="2.9.RabbitMQ 延迟队列"></a>2.9.RabbitMQ 延迟队列</h2><p>RabbitMQ本身并不支持延迟队列，不过我们可以利用其中的<code>Dead Letter Exchanges</code>功能来实现延迟队列。</p><p>Dead Letter Exchanges 通常被人们叫做<strong>死信队列</strong>，我更喜欢称为<strong>死信交换机</strong>。那么问题来了，什么是死信？</p><h3 id="2-9-1-死信Dead-Letter"><a href="#2-9-1-死信Dead-Letter" class="headerlink" title="2.9.1.死信Dead Letter"></a>2.9.1.死信Dead Letter</h3><p>参考官方网站：<a href="https://www.rabbitmq.com/dlx.html">https://www.rabbitmq.com/dlx.html</a></p><p>首先来看死信的概念。</p><p><strong>死信</strong>的英文是（Dead Letter），满足下列条件的消息被称为死信：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1  消费者使用basic.reject或 basic.nack声明消费失败，并且消息的requeue参数设置为false。</span></span><br><span class="line"><span class="attr">意思就是这个消息没有消费者需要了。(比喻，消费者买了些，想要退货，但是商家又不愿意退，那这鞋就废了)</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2  消息是一个过期消息（TTL到期），到期可以是消息本身超时或者队列的TTL超时。（下面讲）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3  消息的长度超过了其被投递的队列最大限制</span></span><br></pre></td></tr></table></figure><p>要实现延迟队列，我们肯定需要人为控制一个消息变为死信，因此我们一般采用上述的第二种方式：<strong>让一个消息在一段时间后过期</strong>，这种过期可以通过两种策略实现：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">队列TTL：通过`x-message-ttl`属性给`消息所在队列`设置TTL（Time To Live），</span></span><br><span class="line"><span class="attr">当队列中的消息存在时间超过TTL后就自动成为死信</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">消息TTL：消息的发送者在发送消息时，设置消息TTL属性。消息到达队列，TTL到期后成为死信、</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">如果一个消息具有TTL，同时所在队列也具备TTL，时间长度较小的会生效</span></span><br></pre></td></tr></table></figure><p>由上面的概念可以知道，一个消息是不是死信，最终是由<strong>消息所在的队列</strong>来判断和处理的。当一个消息被判定为死信，它所在的队列会做怎样的处理呢？</p><p>队列会把<strong>死信</strong>交给提前指定的<strong>死信交换机（Dead Letter Exchange）</strong>。</p><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402175452447.png" alt="image-20200402175452447"></p><h3 id="2-9-2-死信交换机Dead-Letter-Exchanges"><a href="#2-9-2-死信交换机Dead-Letter-Exchanges" class="headerlink" title="2.9.2.死信交换机Dead Letter Exchanges"></a>2.9.2.死信交换机Dead Letter Exchanges</h3><p><strong>死信交换机（Dead Letter Exchange）</strong>其实就是一个普通交换机，也具备以前学习的交换机的所有特征，例如可以设置交换机类型为：topic、direct等。它负责<strong>把消息根据routing key转发给绑定的队列</strong>。</p><p>那什么样的交换机才可以叫死信交换机？需要队列在声明的时候，通过<code>x-dead-letter-exchange</code>属性指定一个交换机，被指定的交换机就是<strong>死信交换机（Dead Letter Exchange）</strong>。同时队列还可以指定一个<code>x-dead-letter-routing-key</code>（死信路由）作为死信的<code>routing_key</code>，<strong>死信交换机转发消息时会根据这个<code>routing_key</code>来转发消息</strong>。</p><p>也就是说：<strong>消息达到了死信交换机之后，我到底转发给哪一个普通队列？？？</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">如果死信队列绑定到死信交换机时，指定了`x-dead-letter-routing-key`来转发，则优先根据该key转发</span></span><br><span class="line"><span class="attr">2</span> <span class="string">如果死信队列没有绑定，则会根据消息来源时指定的`routing_key`来转发。</span></span><br></pre></td></tr></table></figure><p>例如：</p><p>情况1：现在publisher发送消息时指定<code>routing_key</code>为<code>foo</code>，队列绑定死信交换机时指定了<strong>死信路由</strong>为：<code>bar</code>，则死信交换机转发时，会使用<code>bar</code>作为<code>routing_key</code>，如图：死信交换机转发时，会使用<code>foo</code>作为<code>routing_key</code></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402194221688.png" alt="image-20200402194221688"></p><p>情况2：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402194419573.png" alt="image-20200402194419573"></p><p>现在，如果我们发送一个routingKey为foo的消息到达设置了过期时间为30秒的队列（图中的MessageQueue），30秒后消息过期，就会转发到死信交换机，然后就会发送到Queue1这个队列，<strong>我们的任务执行者监听Queue1，即可实现延迟队列了。</strong></p><h3 id="2-9-3-示例"><a href="#2-9-3-示例" class="headerlink" title="2.9.3.示例"></a>2.9.3.示例</h3><p>接下来，我们通过示例来展示下死信队列，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402205530191.png" alt="image-20200402205530191"></p><h4 id="1）创建交换机"><a href="#1）创建交换机" class="headerlink" title="1）创建交换机"></a><strong>1）创建交换机</strong></h4><p>打开RabbitMQ的管理界面，然后先创建两个交换机：</p><ul><li><code>normal.topic</code>：一个普通的topic类型的交换机</li><li><code>dead.topic</code>：一个普通topic类型的交换机，但是作为死信交换机来用</li></ul><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402202738791.png" alt="image-20200402202738791"></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402202805976.png" alt="image-20200402202805976"></p><h4 id="2）创建队列"><a href="#2）创建队列" class="headerlink" title="2）创建队列"></a><strong>2）创建队列</strong></h4><p>然后创建两个队列：</p><ul><li><code>dead.order.queue</code>：死信队列，设置过期时间为20秒，<ul><li>与<code>normal.topic</code>交换机绑定，接收消息，routing_key为 <code>order.evict</code></li><li>指定<code>x-dead-letter-exchange</code>为<code>dead.topic</code>这个死信交换机</li><li>指定<code>x-message-ttl</code>设置消息过期时间</li></ul></li><li><code>evict.order.queue</code>：普通任务队列，接收死信交换机转发过来的消息，将来推送给消费者<ul><li>与<code>dead.topic</code>交换机绑定，接收消息，routing_key为 <code>order.evict</code></li></ul></li></ul><p>死信队列：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402204423258.png" alt="image-20200402204423258"></p><p>普通任务队列：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402204550095.png" alt="image-20200402204550095"></p><p>最终：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402204656254.png" alt="image-20200402204656254"></p><h4 id="3）绑定普通队列与交换机"><a href="#3）绑定普通队列与交换机" class="headerlink" title="3）绑定普通队列与交换机"></a><strong>3）绑定普通队列与交换机</strong></h4><p>进入交换机界面，点击要绑定的交换机，例如：<code>normal.topic</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402212630086.png" alt="image-20200402212630086"></p><p>在点开的界面填写要绑定的队列及routing_key：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402212552504.png" alt="image-20200402212552504"></p><p>然后还要绑定<code>evict.order.queue</code>到<code>dead.topic</code>这个交换机：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402212733973.png" alt="image-20200402212733973"></p><h4 id="4）测试发送消息"><a href="#4）测试发送消息" class="headerlink" title="4）测试发送消息"></a>4）测试发送消息</h4><p>现在，向<code>normal.topic</code>交换机发送消息，指定<code>routing_key</code>为：<code>order.evict</code></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402212837967.png" alt="image-20200402212837967"></p><p>可以看到<code>dead.order.queue</code>中已经有消息了：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402212919397.png" alt="image-20200402212919397"></p><p>然后等待20秒后，看到消息到了<code>evict.order.queue</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402213215684.png" alt="image-20200402213215684"></p><h3 id="2-9-4-优缺点"><a href="#2-9-4-优缺点" class="headerlink" title="2.9.4.优缺点"></a>2.9.4.优缺点</h3><p>RabbitMQ实现延迟队列的优缺点：</p><p><strong>优点：</strong></p><ul><li>实现简单</li><li>可持久化</li><li>高可用集群</li><li>性能强</li><li>实时性好</li></ul><p><strong>缺点：</strong></p><ul><li>无法删除消息</li><li>如果是时间跨度非常大并且频率高的任务，不太适合</li></ul><h1 id="3-清理订单"><a href="#3-清理订单" class="headerlink" title="3.清理订单"></a>3.清理订单</h1><p>学完了各种延迟队列的实现，不知道大家最喜欢哪一种？</p><p>本例中我们会选择RabbitMQ来作为延迟队列，综合起来比较有优势。</p><h2 id="3-1-业务分析"><a href="#3-1-业务分析" class="headerlink" title="3.1.业务分析"></a>3.1.业务分析</h2><p>首先，我们需要在项目中声明队列和交换机，与上面demo类似：</p><p><strong>两个交换机：</strong></p><ul><li><code>ly.order.exchange</code>：一个普通的topic类型的<strong>普通交换机</strong></li><li><code>ly.dead.exchange</code>：一个普通topic类型的交换机，但是作为<strong>死信交换机</strong>来用</li></ul><p><strong>两个队列：</strong></p><ul><li><code>ly.dead.order.queue</code>：<strong>死信队列</strong>，设置过期时间为30分钟（测试可以用20S），<ul><li>与<code>ly.order.exchange</code>交换机绑定，接收消息，<code>routing_key</code>为 <code>order.evict</code></li><li>指定<code>x-dead-letter-exchange</code>为<code>ly.dead.exchange</code>这个死信交换机</li><li>设置<code>x-message-ttl</code>为30分钟</li></ul></li><li><code>ly.evict.order.queue</code>：<strong>普通任务队列</strong>，接收死信交换机转发过来的消息<ul><li>与<code>ly.dead.exchange</code>交换机绑定，接收消息，<code>routing_key</code>为 <code>order.evict</code></li></ul></li></ul><p>来看下业务流程：</p><p>1 首先修改下单业务：</p><ul><li>下单业务的最后，向<code>ly.order.exchange</code>这个交换机发送消息，携带订单id</li></ul><p>2 然后一个独立的消费者，需要监听<code>ly.evict.order.queue</code>这个队列，业务：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">（1）接收到订单id信息</span></span><br><span class="line"><span class="meta">-</span> <span class="string">（2）根据id查询订单状态，判断是否是未支付</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">如果未支付则需要关闭订单，设置状态为5（已关闭），注意**幂等处理**</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">如果已支付，则无需处理</span></span><br><span class="line"><span class="meta">-</span> <span class="string">（3）如果关闭订单了，还要查询对应OrderDetail，得到其中的商品和数量信息</span></span><br><span class="line"><span class="meta">-</span> <span class="string">（4）调用商品微服务，恢复库存，注意分布式事务问题</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200512154146605.png" alt="image-20200512154146605"></p><h2 id="3-2-配置死信队列"><a href="#3-2-配置死信队列" class="headerlink" title="3.2.配置死信队列"></a>3.2.配置死信队列</h2><p>我们先在<code>ly-trade</code>服务中利用java代码来配置之前约定的交换机和队列。</p><h3 id="3-2-1-引入依赖和配置"><a href="#3-2-1-引入依赖和配置" class="headerlink" title="3.2.1.引入依赖和配置"></a>3.2.1.引入依赖和配置</h3><p>在<code>ly-trade</code>的<code>pom.xml</code>中添加MQ的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mq--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>ly-trade</code>的<code>application.yml</code>中添加MQ地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-mq</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">heima129</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">heima129</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/haha</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">initial-interval:</span> <span class="string">10000ms</span></span><br><span class="line">        <span class="attr">max-interval:</span> <span class="string">80000ms</span></span><br><span class="line">        <span class="attr">multiplier:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">publisher-confirms:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-配置队列和交换机"><a href="#3-2-2-配置队列和交换机" class="headerlink" title="3.2.2.配置队列和交换机"></a>3.2.2.配置队列和交换机</h3><p>在<code>ly-trade</code>的<code>com.leyou.trade.config</code>中定义一个配置类，配置队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.common.constants.MQConstants.ExchangeConstants.DEAD_EXCHANGE_NAME;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.common.constants.MQConstants.ExchangeConstants.ORDER_EXCHANGE_NAME;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.common.constants.MQConstants.QueueConstants.DEAD_ORDER_QUEUE;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.common.constants.MQConstants.QueueConstants.EVICT_ORDER_QUEUE;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.common.constants.MQConstants.RoutingKeyConstants.EVICT_ORDER_KEY;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单超时未支付的时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> ORDER_QUEUE_DELAY_TIME = <span class="number">30000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单业务交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">orderTopicExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(ORDER_EXCHANGE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">deadTopicExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(DEAD_EXCHANGE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">deadOrderQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// x-message-ttl 声明队列TTL值</span></span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>, ORDER_QUEUE_DELAY_TIME);</span><br><span class="line">        <span class="comment">// x-dead-letter-exchange 声明当前队列绑定的死信交换机</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE_NAME);</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(DEAD_ORDER_QUEUE).withArguments(args).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理订单业务队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">evictOrderQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(EVICT_ORDER_QUEUE, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将死信队列与ly.order.exchange交换机绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDeadQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deadOrderQueue()).to(orderTopicExchange()).with(EVICT_ORDER_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将清理订单业务队列与死信交换机绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingEvictQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(evictOrderQueue()).to(deadTopicExchange()).with(EVICT_ORDER_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jackson2JsonMessageConverter <span class="title">messageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-测试"><a href="#3-2-4-测试" class="headerlink" title="3.2.4.测试"></a>3.2.4.测试</h3><p>重启项目，可以在MQ的控制台看到队列和交换机信息：</p><p>交换机：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402225040329.png" alt="image-20200402225040329"></p><p>队列：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402225015386.png" alt="image-20200402225015386"></p><p>绑定：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402225135064.png" alt="image-20200402225135064"></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402225202917.png" alt="image-20200402225202917"></p><h2 id="3-3-改造下单业务"><a href="#3-3-改造下单业务" class="headerlink" title="3.3.改造下单业务"></a>3.3.改造下单业务</h2><p>下单业务的最后，向<code>ly.order.topic</code>这个交换机发送消息，携带订单id</p><p>修改<code>ly-trade</code>的<code>com.leyou.trade.service.impl</code>包中的<code>OrderServiceImpl</code>类中的<code>createOrder</code>方法：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%92%8C%E8%AE%A2%E5%8D%95%E6%B8%85%E7%90%86/image-20200402224230434.png" alt="image-20200402224230434"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">amqpTemplate.convertAndSend(ORDER_EXCHANGE_NAME, EVICT_ORDER_KEY, order.getOrderId());</span><br></pre></td></tr></table></figure><h2 id="3-4-商品服务恢复库存"><a href="#3-4-商品服务恢复库存" class="headerlink" title="3.4.商品服务恢复库存"></a>3.4.商品服务恢复库存</h2><p>我们在商品服务中添加一个恢复库存接口，方便在监听到MQ消息后调用：</p><p>在<code>ly-item-api</code>的<code>ItemClient</code>中添加接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加库存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cartMap 商品id及数量的map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/goods/stock/plus&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addStock</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;Long, Integer&gt; cartMap)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>GoodsController</code>中编写业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加库存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cartMap 商品id及数量的map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/stock/plus&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">addStock</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;Long, Integer&gt; cartMap)</span></span>&#123;</span><br><span class="line">    skuService.addStock(cartMap);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>SkuService</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addStock</span><span class="params">(Map&lt;Long, Integer&gt; cartMap)</span></span>;</span><br></pre></td></tr></table></figure><p>减库存的同时还要对商品的销量做+的操作，这个sql我们通过手写完成，定义在mapper中。</p><p>在<code>ly-item-service</code>的<code>com.leyou.item.mapper</code>的<code>SkuMapper</code>中定义方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;UPDATE tb_sku SET stock = stock + #&#123;num&#125; , sold = sold - #&#123;num&#125; WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addStock</span><span class="params">(Map&lt;String,Object&gt; sku)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>SkuServiceImpl</code>中实现业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ADD_STOCK_STATEMENT = <span class="string">&quot;com.leyou.item.mapper.SkuMapper.addStock&quot;</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStock</span><span class="params">(Map&lt;Long, Integer&gt; cartMap)</span> </span>&#123;</span><br><span class="line">    executeBatch(sqlSession -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Long, Integer&gt; entry : cartMap.entrySet()) &#123;</span><br><span class="line">            Map&lt;String,Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            param.put(<span class="string">&quot;id&quot;</span>, entry.getKey());</span><br><span class="line">            param.put(<span class="string">&quot;num&quot;</span>, entry.getValue());</span><br><span class="line">            sqlSession.update(ADD_STOCK_STATEMENT, param);</span><br><span class="line">            sqlSession.flushStatements();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-监听MQ消息"><a href="#3-5-监听MQ消息" class="headerlink" title="3.5.监听MQ消息"></a>3.5.监听MQ消息</h2><p>在<code>ly-trade</code>的<code>com.leyou.trade.mq</code>包中添加一个类，监听MQ消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.common.constants.MQConstants.QueueConstants.EVICT_ORDER_QUEUE;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderListener</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderListener</span><span class="params">(OrderService orderService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听清理订单的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderId 订单id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = EVICT_ORDER_QUEUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenOrderMessage</span><span class="params">(Long orderId)</span> <span class="keyword">throws</span> InterruptedException  </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(orderId != <span class="keyword">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;接收到订单任务，订单id：&#123;&#125;&quot;</span>, orderId);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                orderService.evictOrderIfNecessary(orderId);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里监听到订单信息后，说明订单已经超过30分钟了，我们可以去清理了，调用OrderService的清理订单功能。</p><h2 id="3-6-清理订单"><a href="#3-6-清理订单" class="headerlink" title="3.6.清理订单"></a>3.6.清理订单</h2><p>在<code>ly-trade</code>的<code>com.leyou.trade.service</code>的OrderService接口中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evictOrderIfNecessary</span><span class="params">(Long orderId)</span></span>;</span><br></pre></td></tr></table></figure><p>然后，在<code>ly-trade</code>的<code>com.leyou.trade.service.impl</code>的OrderServiceImpl中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evictOrderIfNecessary</span><span class="params">(Long orderId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    Order order = getById(orderId);</span><br><span class="line">    <span class="keyword">if</span>(order == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 订单不存在，无需处理</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.判断订单是否支付</span></span><br><span class="line">    <span class="keyword">if</span>(order.getStatus() != OrderStatus.INIT)&#123;</span><br><span class="line">        <span class="comment">// 订单已处理，无需重复处理</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.如果未支付，需要关闭订单</span></span><br><span class="line">    <span class="keyword">boolean</span> boo = update().set(<span class="string">&quot;status&quot;</span>, OrderStatus.CLOSED.getValue())</span><br><span class="line">        .set(<span class="string">&quot;close_time&quot;</span>, <span class="keyword">new</span> Date())</span><br><span class="line">        .eq(<span class="string">&quot;order_id&quot;</span>, orderId)</span><br><span class="line">        <span class="comment">// 通过乐观锁进一步保证幂等效果</span></span><br><span class="line">        .eq(<span class="string">&quot;status&quot;</span>, OrderStatus.INIT.getValue())</span><br><span class="line">        <span class="comment">// 执行update</span></span><br><span class="line">        .update();</span><br><span class="line">    <span class="keyword">if</span>(!boo)&#123;</span><br><span class="line">        <span class="comment">// 更新失败，订单状态已经改变，无需处理</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;已关闭超时未支付订单：&#123;&#125;&quot;</span>, orderId);</span><br><span class="line">    <span class="comment">// 4.查询OrderDetail</span></span><br><span class="line">    List&lt;OrderDetail&gt; details = detailService.query().eq(<span class="string">&quot;order_id&quot;</span>, orderId).list();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.获取商品及商品数量信息</span></span><br><span class="line">    Map&lt;Long, Integer&gt; skuMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 得到其中的商品和数量信息</span></span><br><span class="line">        <span class="keyword">for</span> (OrderDetail detail : details) &#123;</span><br><span class="line">            skuMap.put(detail.getSkuId(), detail.getNum());</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*Map&lt;Long, Integer&gt; map = details.stream()</span></span><br><span class="line"><span class="comment">        .collect(Collectors.toMap(OrderDetail::getSkuId, OrderDetail::getNum));*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.恢复库存 //item-api 里面写的feign接口哈！</span></span><br><span class="line">    itemClient.addStock(skuMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="延迟队列" scheme="http://example.com/tags/%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务</title>
    <link href="http://example.com/2022/07/03/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>http://example.com/2022/07/03/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</id>
    <published>2022-07-03T01:53:12.000Z</published>
    <updated>2022-08-02T14:24:43.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">了解分布式事务产生的原因</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">知道几种分布式事务解决方案</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">知道分布式事务各种解决方案的优缺点和使用场景</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">学会使用Seata来解决分布式事务</span></span><br></pre></td></tr></table></figure><p>总结写在前面：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">事务管理：</span></span><br><span class="line">    <span class="meta">下单行为</span> <span class="string">一个事务</span></span><br><span class="line">    <span class="meta">减库存行为</span> <span class="string">一个事务</span></span><br><span class="line">    <span class="attr">但是这两个事务不是同一个线程的事务（微服都不同），我们实际需求是把它们当做同一个事务。</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">虽然减库存代码itemClient.minusStock(carts)放在加了事务的createOrder方法内，</span></span><br><span class="line">    <span class="attr">但是减库存跟下单方法不是同一个事务管理器。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">理论学习：</span></span><br><span class="line"><span class="attr">本地事务：（单服务单数据库），利用数据库的ACID（原子性，一致性，隔离性，持久性）就能实现事务控制。</span></span><br><span class="line"><span class="meta">分布式事务：1</span> <span class="string">跨服务，2 跨数据库  3 跨服务+数据库</span></span><br><span class="line"></span><br><span class="line"><span class="attr">跨数据库事务管理：</span></span><br><span class="line"><span class="attr">使用数据库集群，当不同数据库数据不一致时，如何响应用户访问？？？</span></span><br><span class="line"></span><br><span class="line"><span class="attr">CAP</span> <span class="string">定理：</span></span><br><span class="line"><span class="attr">强一致性C：等不同数据库数据一致时才响应用户！</span></span><br><span class="line"><span class="attr">高可用性A：数据库直接响应本数据库数据</span></span><br><span class="line"><span class="attr">分区容错性P：区间通信可能失败，（客观存在的）</span></span><br><span class="line"><span class="attr">比如，一台服务器放在上海，另一台服务器放在北京，这就是两个区，它们之间可能因网络问题无法通信。</span></span><br><span class="line"><span class="meta">这三个指标不可能同时做到。这个结论就叫做</span> <span class="string">CAP 定理。就看你侧重于可用性还是容错性！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">总结：加了事务的主方法内有引用的多个方法跟主方法不是同一个事务管理器，那么就需要分布式事务管理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">方案1</span> <span class="string">：业务执行，然后上报结果给协调器，根据协调器指示进行提交或者回滚</span></span><br><span class="line"><span class="attr">（一旦有一个事务错误，立即所有事务回滚，否则等全部事务成功后再提交）</span></span><br><span class="line"><span class="attr">（缺点就是系统延迟，性能下降）</span></span><br><span class="line"><span class="meta">方案2</span> <span class="string">：利用tcc（try confirm cancel）解决方案：(性能最好的分布式事务方式)</span></span><br><span class="line"><span class="attr">同一个事务管理器的事务执行业务后该提交提交，该回滚回滚，</span></span><br><span class="line"><span class="attr">如果有一个回滚了，那么其他提交了的事务就要做事务补偿！</span></span><br><span class="line"><span class="attr">方案3：AT模式</span></span><br><span class="line"><span class="meta">-</span> <span class="string">一阶段：执行本地事务，并返回执行结果</span></span><br><span class="line"><span class="meta">-</span> <span class="string">二阶段：根据一阶段的结果，判断二阶段做法：提交或回滚（补偿）</span></span><br><span class="line"><span class="meta">在</span> <span class="string">AT 模式下，用户只需关注自己的“业务 SQL”，用户的 “业务 SQL” 作为一阶段，Seata 框架会自动生成事务的二阶段提交和回滚操作。</span></span><br><span class="line"><span class="attr">等方案...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">使用Seata</span> <span class="string">框架下的AT模式进行分布式事务控制，引入到我们的项目中！</span></span><br><span class="line"><span class="attr">1</span> <span class="string">官网下载Seata框架（Seata是一个面向服务编程框架）(下载解压即安装)</span></span><br><span class="line"><span class="attr">2</span> <span class="string">修改registry.conf 跟file.conf文件</span></span><br><span class="line"><span class="attr">registry.conf为了给seata服务指定我们整个项目的注册中心的配置文件</span></span><br><span class="line"><span class="meta">file.conf</span> <span class="string">是Seata服务的配置文件，给seata指定数据库，以及需要什么表，因此我们要在数据库建立对应库表。</span></span><br><span class="line"><span class="attr">3</span> <span class="string">启动Seata服务框架（运行.bat文件,）</span></span><br><span class="line"><span class="attr">4</span> <span class="string">改造原Order服务</span></span><br><span class="line"><span class="attr">（1）引入seata依赖</span></span><br><span class="line"><span class="attr">（2）application.yml中添加配置，定义事务组名称</span></span><br><span class="line"><span class="attr">（3）`resources`目录下放两个配置文件：`file.conf`和`registry.conf`</span></span><br><span class="line"><span class="attr">（4）对DataSource做代理</span></span><br><span class="line"><span class="attr">Seata的二阶段执行是通过拦截sql语句，分析语义来指定回滚策略，</span></span><br><span class="line"><span class="attr">因此需要对DataSource做代理。</span></span><br><span class="line"><span class="attr">我们在项目的`cn.itcast.order.config`包中，添加一个配置类</span></span><br><span class="line"><span class="attr">（5）添加事务注解</span></span><br><span class="line"><span class="attr">给事务发起者`order_service`的`OrderServiceImpl`中的`create()`方法</span></span><br><span class="line"><span class="attr">添加`@GlobalTransactional`注解，开启全局事务</span></span><br><span class="line"><span class="attr">5</span> <span class="string">改造Storage、Account服务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">引入依赖：与order-service一致，略</span></span><br><span class="line"><span class="meta">-</span> <span class="string">添加配置文件：与order-service一致，略</span></span><br><span class="line"><span class="meta">-</span> <span class="string">代理DataSource，我们的storage-service和account-service都没有用mybatis-plus，</span></span><br><span class="line"><span class="attr">所以配置要使用SqlSessionFactory：</span></span><br><span class="line"><span class="attr">另外，事务注解可以使用`@Transactionnal`，而不是`@GlobalTransactional`，</span></span><br><span class="line"><span class="attr">事务发起者才需要添加`@GlobalTransactional`。</span></span><br></pre></td></tr></table></figure><h1 id="1-什么是分布式事务"><a href="#1-什么是分布式事务" class="headerlink" title="1.什么是分布式事务"></a>1.什么是分布式事务</h1><p>我们已经完成了下单的业务，但是下单业务中会包含多个微服务的调用，例如：</p><ul><li>订单微服务：新增订单、订单详情、订单物流</li><li>商品微服务：扣减库存</li><li>优惠券服务：扣减用户优惠券</li><li>…</li></ul><p>要了解分布式事务，必须先了解本地事务。</p><h2 id="1-1-本地事务"><a href="#1-1-本地事务" class="headerlink" title="1.1.本地事务"></a>1.1.本地事务</h2><p>事务，是指传统的单机数据库事务，必须具备ACID原则：</p><ul><li><strong>原子性（A）</strong></li></ul><p>所谓的原子性就是说，在整个事务中的所有操作，要么全部完成，要么全部不做，没有中间状态。对于事务在执行中发生错误，所有的操作都会被回滚，整个事务就像从没被执行过一样。</p><ul><li><strong>一致性（C）</strong></li></ul><p>事务的执行必须保证系统的一致性，就拿转账为例，A有500元，B有500元，如果在一个事务里A成功转给B50元，那么不管发生什么，那么最后A账户和B账户的数据之和必须是1000元。</p><ul><li><strong>隔离性（I）</strong></li></ul><p>所谓的隔离性就是说，事务与事务之间不会互相影响，一个事务的中间状态不会被其他事务感知。</p><ul><li><strong>持久性（D）</strong></li></ul><p>所谓的持久性，就是说一单事务完成了，那么事务对数据所做的变更就完全保存在了数据库中，即使发生停电，系统宕机也是如此。</p><p>因为在传统项目中，项目部署基本是单点式：即单个服务器和单个数据库。这种情况下，数据库本身的事务机制就能保证ACID的原则，这样的事务就是本地事务。</p><p>概括来讲，单个服务与单个数据库的架构中，产生的事务都是本地事务。</p><h2 id="1-2-分布式事务"><a href="#1-2-分布式事务" class="headerlink" title="1.2.分布式事务"></a>1.2.分布式事务</h2><p>分布式事务，就是指不是在单个服务或单个数据库架构下，产生的事务：</p><ul><li>跨数据源的分布式事务</li><li>跨服务的分布式事务</li><li>综合情况</li></ul><h3 id="1）跨数据源"><a href="#1）跨数据源" class="headerlink" title="1）跨数据源"></a>1）跨数据源</h3><p>随着业务数据规模的快速发展，数据量越来越大，单库单表逐渐成为瓶颈。所以我们对数据库进行了水平拆分，将原单库单表拆分成数据库分片，于是就产生了跨数据库事务问题。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200304201018438.png" alt="image-20200304201018438"></p><h3 id="2）跨服务"><a href="#2）跨服务" class="headerlink" title="2）跨服务"></a>2）跨服务</h3><p>在业务发展初期，“一块大饼”的单业务系统架构，能满足基本的业务需求。但是随着业务的快速发展，系统的访问量和业务复杂程度都在快速增长，单系统架构逐渐成为业务发展瓶颈，解决业务系统的高耦合、可伸缩问题的需求越来越强烈。</p><p>如下图所示，按照面向服务（SOA）的架构的设计原则，将单业务系统拆分成多个业务系统，降低了各系统之间的耦合度，使不同的业务系统专注于自身业务，更有利于业务的发展和系统容量的伸缩。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200304202639509.png" alt="image-20200304202639509"></p><h3 id="3）分布式系统的数据一致性问题"><a href="#3）分布式系统的数据一致性问题" class="headerlink" title="3）分布式系统的数据一致性问题"></a>3）分布式系统的数据一致性问题</h3><p>在数据库水平拆分、服务垂直拆分之后，一个业务操作通常要跨多个数据库、服务才能完成。在分布式网络环境下，我们无法保障所有服务、数据库都百分百可用，一定会出现部分服务、数据库执行成功，另一部分执行失败的问题。</p><p>当出现部分业务操作成功、部分业务操作失败时，业务数据就会出现不一致。</p><p>例如电商行业中比较常见的下单付款案例，包括下面几个行为：</p><ul><li>创建新订单</li><li>扣减商品库存</li><li>从用户账户余额扣除金额</li></ul><p>完成上面的操作需要访问三个不同的微服务和三个不同的数据库。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200304204442839.png" alt="image-20200304204442839"></p><p>在分布式环境下，肯定会出现部分操作成功、部分操作失败的问题，比如：订单生成了，库存也扣减了，但是 用户账户的余额不足，这就造成数据不一致。</p><p>订单的创建、库存的扣减、账户扣款在每一个服务和数据库内是一个本地事务，可以保证ACID原则。</p><p>但是当我们把三件事情看做一个事情事，要满足保证“业务”的原子性，要么所有操作全部成功，要么全部失败，不允许出现部分成功部分失败的现象，这就是分布式系统下的事务了。</p><p>此时ACID难以满足，这是分布式事务要解决的问题</p><h1 id="2-解决分布式事务的思路"><a href="#2-解决分布式事务的思路" class="headerlink" title="2.解决分布式事务的思路"></a>2.解决分布式事务的思路</h1><p>为什么分布式系统下，事务的ACID原则难以满足？</p><p>这得从CAP定理和BASE理论说起。</p><h2 id="2-1-CAP定理"><a href="#2-1-CAP定理" class="headerlink" title="2.1.CAP定理"></a>2.1.CAP定理</h2><p>本小节内容摘自：<a href="https://www.ruanyifeng.com/blog/2018/07/cap.html">CAP 定理的含义</a></p><p>什么是CAP定理呢？</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200304205842784.png" alt="image-20200304205842784"> </p><p>1998年，加州大学的计算机科学家 Eric Brewer 提出，分布式系统有三个指标。</p><blockquote><ul><li>Consistency（一致性）</li><li>Availability（可用性）</li><li>Partition tolerance （分区容错性）</li></ul></blockquote><p>它们的第一个字母分别是 C、A、P。</p><p>Eric Brewer 说，这三个指标不可能同时做到。这个结论就叫做 CAP 定理。</p><h3 id="2-1-1-Partition-tolerance"><a href="#2-1-1-Partition-tolerance" class="headerlink" title="2.1.1.Partition tolerance"></a>2.1.1.Partition tolerance</h3><p>先看 Partition tolerance，中文叫做”分区容错”。</p><p>大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（partition）。分区容错的意思是，区间通信可能失败。比如，一台服务器放在上海，另一台服务器放在北京，这就是两个区，它们之间可能因网络问题无法通信。</p><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200304210120471.png" alt="image-20200304210120471"> </p><p>上图中，G1 和 G2 是两台跨区的服务器。G1 向 G2 发送一条消息，G2 可能无法收到。系统设计的时候，必须考虑到这种情况。</p><p>一般来说，分布式系统，分区容错无法避免，因此可以认为 CAP 的 P 总是成立。根据CAP 定理，剩下的 C 和 A 无法同时做到。</p><h3 id="2-1-2-Consistency"><a href="#2-1-2-Consistency" class="headerlink" title="2.1.2.Consistency"></a>2.1.2.Consistency</h3><p>Consistency 中文叫做”一致性”。意思是，写操作之后的读操作，必须返回该值。举例来说，某条记录是 v0，用户向 G1 发起一个写操作，将其改为 v1。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200304210414309.png" alt="image-20200304210414309"> </p><p>接下来，用户的读操作就会得到 v1。这就叫一致性。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200304210506575.png" alt="image-20200304210506575"> </p><p>问题是，用户有可能向 G2 发起读操作，由于 G2 的值没有发生变化，因此返回的是 v0。G1 和 G2 读操作的结果不一致，这就不满足一致性了。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200304210521364.png" alt="image-20200304210521364"></p><p>为了让 G2 也能变为 v1，就要在 G1 写操作的时候，让 G1 向 G2 发送一条消息，要求 G2 也改成 v1。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200304210540168.png" alt="image-20200304210540168"> </p><p>这样的话，用户向 G2 发起读操作，也能得到 v1。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200304210557117.png" alt="image-20200304210557117"> </p><h3 id="2-1-3-Availability"><a href="#2-1-3-Availability" class="headerlink" title="2.1.3.Availability"></a>2.1.3.Availability</h3><p> Availability 中文叫做”可用性”，意思是只要收到用户的请求，服务器就必须给出回应（对和错不论）。</p><p>用户可以选择向 G1 或 G2 发起读操作。不管是哪台服务器，只要收到请求，就必须告诉用户，到底是 v0 还是 v1，否则就不满足可用性。</p><h3 id="2-1-4-Consistency-和-Availability-的矛盾"><a href="#2-1-4-Consistency-和-Availability-的矛盾" class="headerlink" title="2.1.4.Consistency 和 Availability 的矛盾"></a>2.1.4.Consistency 和 Availability 的矛盾</h3><p>一致性和可用性，为什么不可能同时成立？</p><p>答案很简单，因为可能通信失败（即出现分区容错）。</p><p>如果保证 G2 的一致性，那么 G1 必须在写操作时，锁定 G2 的读操作和写操作。只有数据同步后，才能重新开放读写。锁定期间，G2 不能读写，没有可用性不。</p><p>如果保证 G2 的可用性，那么势必不能锁定 G2，所以一致性不成立。</p><p>综上所述，G2 无法同时做到一致性和可用性。系统设计时只能选择一个目标。如果追求一致性，那么无法保证所有节点的可用性；如果追求所有节点的可用性，那就没法做到一致性。</p><h3 id="2-1-5-几点疑问"><a href="#2-1-5-几点疑问" class="headerlink" title="2.1.5.几点疑问"></a>2.1.5.几点疑问</h3><ul><li><p>怎样才能同时满足CA？</p><p>除非是单点架构</p></li><li><p>何时要满足CP？</p><p>对一致性要求高的场景。例如我们的Zookeeper就是这样的，在服务节点间数据同步时，服务对外不可用。</p></li><li><p>何时满足AP？</p><p>对可用性要求较高的场景。例如Eureka，必须保证注册中心随时可用，不然拉取不到服务就可能出问题。</p></li></ul><h2 id="2-2-Base理论"><a href="#2-2-Base理论" class="headerlink" title="2.2.Base理论"></a>2.2.Base理论</h2><p>BASE是三个单词的缩写：</p><ul><li><p>Basically Available（基本可用）</p></li><li><p>Soft state（软状态）</p></li><li><p>Eventually consistent（最终一致性）</p></li></ul><p>而我们解决分布式事务，就是根据上述理论来实现。</p><p>还以上面的下单减库存和扣款为例：</p><p>订单服务、库存服务、用户服务及他们对应的数据库就是分布式应用中的三个部分。</p><ul><li><p>CP方式：现在如果要满足事务的强一致性，就必须在订单服务数据库锁定的同时，对库存服务、用户服务数据资源同时锁定。等待三个服务业务全部处理完成，才可以释放资源。此时如果有其他请求想要操作被锁定的资源就会被阻塞，这样就是满足了CP。</p><p>这就是强一致，弱可用</p></li><li><p>AP方式：三个服务的对应数据库各自独立执行自己的业务，执行本地事务，不要求互相锁定资源。但是这个<code>中间状态</code>下，我们去访问数据库，可能遇到数据不一致的情况，不过我们需要做一些后补措施，保证在经过一段时间后，数据最终满足一致性。</p><p>这就是高可用，但弱一致（最终一致）。</p></li></ul><p>由上面的两种思想，延伸出了很多的分布式事务解决方案：</p><ul><li>XA</li><li>TCC</li><li>可靠消息最终一致</li><li>TA</li></ul><p>不过，要想搞懂这些原理，你必须知道数据库本地事务是如何实现的，也就是undo和redo日志的故事。</p><h2 id="2-3-undo和redo"><a href="#2-3-undo和redo" class="headerlink" title="2.3.undo和redo"></a>2.3.undo和redo</h2><p>本小节参考内容：<a href="http://www.zhdba.com/mysqlops/2012/04/06/innodb-log1/">mysqlops</a></p><p>在数据库系统中，既有存放数据的文件，也有存放日志的文件。日志在内存中也是有缓存Log buffer，也有磁盘文件log file。</p><p>MySQL中的日志文件，有这么两类与事务有关：undo日志与redo日志。</p><h3 id="2-3-1-undo日志"><a href="#2-3-1-undo日志" class="headerlink" title="2.3.1.undo日志"></a>2.3.1.undo日志</h3><p>数据库事务具备原子性（<strong>Atomicity</strong>），如果事务执行失败，需要把数据回滚。</p><p>事务同时还具备持久性**(Durability)**，事务对数据所做的变更就完全保存在了数据库，不能因为故障而丢失。</p><p>持久性和原子性可以利用undo日志来实现。</p><p>Undo Log的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到Undo Log。然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用Undo Log中的备份将数据恢复到事务开始之前的状态。</p><p>数据库写入数据到磁盘之前，会把<strong>数据先缓存在内存</strong>中，事务提交时才会写入磁盘中。</p><p>用Undo Log实现原子性和持久化的事务的简化过程：</p><p> 假设有A、B两个数据，值分别为1,2。<br> A. 事务开始.<br> B. 记录A=1到undo log buffer.<br> C. 修改A=3.<br> D. 记录B=2到undo log buffer.<br> E. 修改B=4.<br> F. 将undo log buffer写到磁盘。<br> G. 将数据写到磁盘。<br> H. 事务提交</p><ul><li><p>如何保证原子性？</p><p>在修改数据到磁盘前，会先记录undo log，并将undo log持久化到硬盘</p></li><li><p>如何保证持久性？</p><p>在事务提交之前，把内存中缓存的数据写入磁盘。这样事务提交时，可以确定数据是已经持久化的，不会丢失。</p></li><li><p>若系统在G和H之间崩溃</p><p>此时事务并未提交，需要回滚。而undo log已经被持久化，可以根据undo log来恢复数据</p></li><li><p>若系统在G之前崩溃</p><p>此时数据并未持久化到硬盘，依然保持在事务之前的状态</p></li></ul><p><strong>缺陷：</strong>每个事务提交前将数据和Undo Log写入磁盘，这样会导致大量的磁盘IO，因此性能很低。</p><p>如果能够将数据缓存一段时间，就能减少IO提高性能。但是这样就会丧失事务的持久性。因此引入了另外一种机制来实现持久化，即<strong>Redo Log</strong>.</p><h3 id="2-3-2-redo日志"><a href="#2-3-2-redo日志" class="headerlink" title="2.3.2.redo日志"></a>2.3.2.redo日志</h3><p>和Undo Log相反，Redo Log记录的是<strong>新数据</strong>的备份。在事务提交前，只要将Redo Log持久化即可，不需要将数据持久化，减少了IO的次数。</p><p>先来看下基本原理：</p><blockquote><p><strong>Undo + Redo事务的简化过程</strong></p></blockquote><p> 假设有A、B两个数据，值分别为1,2</p><p> A. 事务开始.<br> B. 记录A=1到undo log.<br> C. 修改A=3.<br> D. 记录A=3到redo log.<br> E. 记录B=2到undo log.<br> F. 修改B=4.<br> G. 记录B=4到redo log.<br> H. 将undo log写入磁盘<br> I. 将redo log写入磁盘<br> J. 事务提交</p><blockquote><p>安全和性能问题</p></blockquote><ul><li><p>如何保证原子性？</p><p>如果在事务提交前故障，通过undo log日志恢复数据。如果undo log都还没写入，那么数据就尚未持久化，无需回滚</p></li><li><p>如何保证持久化？</p><p>大家会发现，这里并没有出现数据的持久化。因为数据已经写入redo log，而redo log持久化到了硬盘，因此只要到了<code>I</code>以后，事务是可以提交的。</p></li><li><p>内存中的数据库数据何时持久化到磁盘？</p><p>因为redo log已经持久化，因此数据库数据写入磁盘与否影响不大，不过为了避免出现脏数据（内存中与磁盘不一致），事务提交后也会将内存数据刷入磁盘（也可以按照固设定的频率刷新内存数据到磁盘中）。</p></li><li><p>持久化redo和持久化数据库数据有什么性能差异？</p><ul><li><p>数据库数据写入是随机IO，性能很差</p></li><li><p>redo log在初始化时会开辟一段连续的空间，写入是顺序IO，性能很好</p></li></ul></li><li><p>redo log中记录的数据，有可能尚未提交，那么如何完成数据恢复？</p><p>数据恢复有两种策略：</p><ul><li>恢复时，只重做已经提交了的事务</li><li>恢复时，重做所有事务包括未提交的事务和回滚了的事务。然后通过Undo Log回滚那些未提交的事务</li></ul><p>Inodb引擎采用的是第二种方案，因此undo log要在 redo log前持久化</p></li><li><p>写入性能的优化</p><p>事务提交前需要同时写入undo log和 redo log，势必增加IO次数，因此实际上undo log并不是直接写入磁盘，而是先写入到redo log中，当redo log持久化时，undo log就同时持久化到硬盘了。</p><p>因此事务提交前，只需要对redo log持久化即可。</p><p>另外，redo log并不是写入一次就持久化一次，redo log在内存中也有自己的缓冲池：<code>redo log buffer</code>。每次写redo log都是写入到buffer，在提交时一次性持久化到磁盘，减少IO此时。</p></li></ul><h3 id="2-3-3-总结"><a href="#2-3-3-总结" class="headerlink" title="2.3.3.总结"></a>2.3.3.总结</h3><p>最后总结一下：</p><ul><li>undo log 记录更新前数据，用于保证事务原子性</li><li>redo log 记录更新后数据，用于保证事务的持久性</li><li>redo log有自己的内存buffer，先写入到buffer，事务提交时写入磁盘</li><li>redo log持久化之后，意味着事务是<strong>可提交</strong>的</li></ul><h2 id="2-4-分阶段提交"><a href="#2-4-分阶段提交" class="headerlink" title="2.4.分阶段提交"></a>2.4.分阶段提交</h2><h3 id="2-4-1DTP和XA"><a href="#2-4-1DTP和XA" class="headerlink" title="2.4.1DTP和XA"></a>2.4.1DTP和XA</h3><p>分布式事务的解决手段之一，就是两阶段提交协议（2PC：Two-Phase Commit）</p><p>那么到底什么是两阶段提交协议呢？</p><p>1994 年，X/Open 组织（即现在的 Open Group ）定义了分布式事务处理的DTP 模型。该模型包括这样几个角色：</p><ul><li>应用程序（ AP ）：我们的微服务</li><li>事务管理器（ TM ）：全局事务管理者</li><li>资源管理器（ RM ）：一般是数据库</li><li>通信资源管理器（ CRM ）：是TM和RM间的通信中间件</li></ul><p>在该模型中，一个分布式事务（全局事务）可以被拆分成许多个本地事务，运行在不同的AP和RM上。每个本地事务的ACID很好实现，但是全局事务必须保证其中包含的每一个本地事务都能同时成功，若有一个本地事务失败，则所有其它事务都必须回滚。但问题是，本地事务处理过程中，并不知道其它事务的运行状态。因此，就需要通过CRM来通知各个本地事务，同步事务执行的状态。</p><p>因此，各个本地事务的通信必须有统一的标准，否则不同数据库间就无法通信。<strong>XA</strong>就是 X/Open DTP中通信中间件与TM间联系的<strong>接口规范</strong>，定义了用于通知事务开始、提交、终止、回滚等接口，各个数据库厂商都必须实现这些接口。</p><h3 id="2-4-2-二阶段提交"><a href="#2-4-2-二阶段提交" class="headerlink" title="2.4.2.二阶段提交"></a>2.4.2.二阶段提交</h3><p>参考：<a href="https://zhuanlan.zhihu.com/p/35298019">漫话分布式系统共识协议: 2PC/3PC篇</a></p><p><strong>二阶提交协议</strong>就是根据这一思想衍生出来的，将全局事务拆分为两个阶段来执行：</p><ul><li>阶段一：准备阶段，各个本地事务完成本地事务的准备工作。（这里的准备指的是事务提交完成）</li><li>阶段二：执行阶段，各个本地事务根据上一阶段执行结果，进行提交或回滚。</li></ul><p>这个过程中需要一个协调者（coordinator），还有事务的参与者（voter）。</p><blockquote><p>1）正常情况</p></blockquote><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305141029973.png" alt="image-20200305141029973"> </p><p><strong>投票阶段</strong>：协调组询问各个事务参与者，是否可以执行事务。每个事务参与者执行事务，写入redo和undo日志，然后反馈事务执行成功的信息（<code>agree</code>）</p><p><strong>提交阶段</strong>：协调组发现每个参与者都可以执行事务（<code>agree</code>），于是向各个事务参与者发出<code>commit</code>指令，各个事务参与者提交事务。</p><blockquote><p>2）异常情况</p></blockquote><p>当然，也有异常的时候：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305141318326.png" alt="image-20200305141318326"> </p><p><strong>投票阶段</strong>：协调组询问各个事务参与者，是否可以执行事务。每个事务参与者执行事务，写入redo和undo日志，然后反馈事务执行结果，但只要有一个参与者返回的是<code>Disagree</code>，则说明执行失败。</p><p><strong>提交阶段</strong>：协调组发现有一个或多个参与者返回的是<code>Disagree</code>，认为执行失败。于是向各个事务参与者发出<code>abort</code>指令，各个事务参与者回滚事务。</p><blockquote><p>3）缺陷</p></blockquote><p>二阶段提交的问题：</p><ul><li><p>单点故障问题</p><p>2PC的缺点在于不能处理fail-stop形式的节点failure. 比如下图这种情况.</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305142812815.png" alt="image-20200305142812815"> </p><p>假设coordinator和voter3都在Commit这个阶段crash了, 而voter1和voter2没有收到commit消息. 这时候voter1和voter2就陷入了一个困境. 因为他们并不能判断现在是两个场景中的哪一种:</p><p> (1)上轮全票通过然后voter3第一个收到了commit的消息并在commit操作之后crash了</p><p> (2)上轮voter3反对所以干脆没有通过.</p></li><li><p>阻塞问题</p><p>在准备阶段、提交阶段，每个事物参与者都会锁定本地资源，并等待其它事务的执行结果，阻塞时间较长，资源锁定时间太久，因此执行的效率就比较低了。</p></li></ul><p>面对二阶段提交的上述缺点，后来又演变出了三阶段提交，但是依然没有完全解决阻塞和资源锁定的问题，而且引入了一些新的问题，因此实际使用的场景较少。</p><h3 id="2-4-3-使用场景"><a href="#2-4-3-使用场景" class="headerlink" title="2.4.3.使用场景"></a>2.4.3.使用场景</h3><p><strong>对事务有强一致性要求，对事务执行效率不敏感，并且不希望有太多代码侵入。</strong></p><h2 id="2-5-TCC"><a href="#2-5-TCC" class="headerlink" title="2.5.TCC"></a>2.5.TCC</h2><p>TCC模式可以解决2PC中的资源锁定和阻塞问题，减少资源锁定时间。它采用的是一种<code>补偿型事务</code>的思想。</p><h3 id="2-5-1-基本原理"><a href="#2-5-1-基本原理" class="headerlink" title="2.5.1.基本原理"></a>2.5.1.基本原理</h3><p>它本质是一种补偿的思路。事务运行过程包括三个方法，</p><ul><li>Try：资源的检测和预留；</li><li>Confirm：执行的业务操作提交；要求 Try 成功 Confirm 一定要能成功；</li><li>Cancel：预留资源释放。</li></ul><p>执行分两个阶段：</p><ul><li>准备阶段（try）：资源的检测和预留；</li><li>执行阶段（confirm/cancel）：根据上一步结果，判断下面的执行方法。如果上一步中所有事务参与者都成功，则这里执行confirm。反之，执行cancel</li></ul><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305155521612.png" alt="image-20200305155521612"> </p><p>粗看似乎与两阶段提交没什么区别，但其实差别很大：</p><ul><li>try、confirm、cancel都是独立的事务，不受其它参与者的影响，不会阻塞等待它人</li><li>try、confirm、cancel由程序员在业务层编写，锁粒度有代码控制</li></ul><h3 id="2-5-2-实例"><a href="#2-5-2-实例" class="headerlink" title="2.5.2.实例"></a>2.5.2.实例</h3><p>我们以之前的下单业务中的扣减余额为例来看下三个不同的方法要怎么编写，假设账户A原来余额是100，需要余额扣减30元。如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305155830732.png" alt="image-20200305155830732"></p><ul><li><p>一阶段（Try）：余额检查，并冻结用户部分金额，此阶段执行完毕，事务已经提交</p><ul><li>检查用户余额是否充足，如果充足，冻结部分余额</li><li>在账户表中添加冻结金额字段，值为30，余额不变</li></ul></li><li><p>二阶段</p><ul><li>提交（Confirm）：真正的扣款，把冻结金额从余额中扣除，冻结金额清空<ul><li>修改冻结金额为0，修改余额为100-30 = 70元</li></ul></li><li>补偿（Cancel）：释放之前冻结的金额，<strong>并非回滚</strong><ul><li>余额不变，修改账户冻结金额为0</li></ul></li></ul><p><strong>这个阶段产生两个事务！！！</strong></p></li></ul><h3 id="2-5-3-优势和缺点"><a href="#2-5-3-优势和缺点" class="headerlink" title="2.5.3.优势和缺点"></a>2.5.3.优势和缺点</h3><ul><li><p><strong>优势</strong></p><p>TCC执行的每一个阶段都会提交本地事务并释放锁，并不需要等待其它事务的执行结果。而如果其它事务执行失败，最后不是回滚，而是执行补偿操作。这样就<strong>避免了资源的长期锁定和阻塞等待，执行效率比较高，属于性能最好的分布式事务方式。</strong></p></li><li><p><strong>缺点</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1 代码侵入：需要人为编写代码实现，代码侵入较多</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2 开发成本高：一个业务需要拆分成3个步骤，分别编写业务实现，业务编写比较复杂</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3 安全性考虑：cancel动作如果执行失败，资源就无法释放，需要引入重试机制，而重试可能导致重复执行，还要考虑重试时的幂等问题</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-4-使用场景"><a href="#2-5-4-使用场景" class="headerlink" title="2.5.4.使用场景"></a>2.5.4.使用场景</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">对事务有一定的一致性要求（最终一致）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">对性能要求较高</span></span><br><span class="line"><span class="meta">-</span> <span class="string">开发人员具备较高的编码能力和幂等处理经验</span></span><br></pre></td></tr></table></figure><h2 id="2-6-可靠消息服务"><a href="#2-6-可靠消息服务" class="headerlink" title="2.6.可靠消息服务"></a>2.6.可靠消息服务</h2><p>这种实现方式的思路，其实是源于ebay，其基本的设计思想是将远程分布式事务拆分成一系列的本地事务。</p><h3 id="2-6-1-基本原理"><a href="#2-6-1-基本原理" class="headerlink" title="2.6.1.基本原理"></a>2.6.1.基本原理</h3><p>一般分为事务的发起者A和事务的其它参与者B：</p><ul><li>事务发起者A执行本地事务</li><li>事务发起者A通过MQ将需要执行的事务信息发送给事务参与者B</li><li>事务参与者B接收到消息后执行本地事务</li></ul><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305181454125.png" alt="image-20200305181454125"></p><p>这个过程有点像你去学校食堂吃饭：</p><ul><li>拿着钱去收银处，点一份红烧牛肉面，付钱</li><li>收银处给你发一个小票，还有一个号牌，你别把票弄丢！</li><li>你凭小票和号牌一定能领到一份红烧牛肉面，不管需要多久</li></ul><p>几个注意事项：</p><ul><li>事务发起者A必须确保本地事务成功后，消息一定发送成功</li><li>MQ必须保证消息正确投递和持久化保存</li><li>事务参与者B必须确保消息最终一定能消费，如果失败需要多次重试</li><li>事务B执行失败，会重试，但不会导致事务A回滚</li></ul><p>那么问题来了，我们如何保证消息发送一定成功？如何保证消费者一定能收到消息？</p><h3 id="2-6-2-本地消息表"><a href="#2-6-2-本地消息表" class="headerlink" title="2.6.2.本地消息表"></a>2.6.2.本地消息表</h3><p>为了避免消息发送失败或丢失，我们可以把消息持久化到数据库中。实现时有简化版本和解耦合版本两种方式。</p><h4 id="1）简化版本"><a href="#1）简化版本" class="headerlink" title="1）简化版本"></a>1）简化版本</h4><p>原理图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305183431211.png" alt="image-20200305183431211"> </p><ul><li><p>事务发起者：</p><ul><li>开启本地事务</li><li>执行事务相关业务</li><li>发送消息到MQ</li><li>把消息持久化到数据库，标记为已发送</li><li>提交本地事务</li></ul></li><li><p>事务接收者：</p><ul><li>接收消息</li><li>开启本地事务</li><li>处理事务相关业务</li><li>修改数据库消息状态为已消费</li><li>提交本地事务</li></ul></li><li><p>额外的定时任务</p><ul><li>定时扫描表中超时未消费消息，重新发送</li></ul></li></ul><p><strong>优点：</strong></p><ul><li>与tcc相比，实现方式较为简单，开发成本低。</li></ul><p><strong>缺点：</strong></p><ul><li><p>数据一致性完全依赖于消息服务，因此消息服务必须是可靠的。</p></li><li><p>需要处理被动业务方的幂等问题</p></li><li><p>被动业务失败不会导致主动业务的回滚，而是重试被动的业务</p></li><li><p><strong>事务业务与消息发送业务耦合</strong>、业务数据与消息表要在一起</p></li></ul><h4 id="2）独立消息服务"><a href="#2）独立消息服务" class="headerlink" title="2）独立消息服务"></a>2）独立消息服务</h4><p>为了解决上述问题，我们会引入一个独立的消息服务，来完成对消息的持久化、发送、确认、失败重试等一系列行为，大概的模型如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305200131083.png" alt="image-20200305200131083"></p><p>一次消息发送的时序图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305205430863.png" alt="image-20200305205430863"></p><p>事务发起者A的基本执行步骤：</p><ul><li>开启本地事务</li><li>通知消息服务，准备发送消息（消息服务将消息持久化，标记为准备发送）</li><li>执行本地业务，<ul><li>执行失败则终止，通知消息服务，取消发送（消息服务修改订单状态）</li><li>执行成功则继续，通知消息服务，确认发送（消息服务发送消息、修改订单状态）</li></ul></li><li>提交本地事务</li></ul><p>消息服务本身提供下面的接口：</p><ul><li>准备发送：把消息持久化到数据库，并标记状态为<code>准备发送</code></li><li>取消发送：把数据库消息状态修改为<code>取消</code></li><li>确认发送：把数据库消息状态修改为<code>确认发送</code>。尝试发送消息，成功后修改状态为<code>已发送</code></li><li>确认消费：消费者已经接收并处理消息，把数据库消息状态修改为<code>已消费</code></li><li>定时任务：定时扫描数据库中状态为<code>确认发送</code>的消息，然后询问对应的事务发起者，事务业务执行是否成功，结果：<ul><li>业务执行成功：<code>尝试发送消息</code>，成功后修改状态为<code>已发送</code></li><li>业务执行失败：把数据库消息状态修改为<code>取消</code></li></ul></li></ul><p>事务参与者B的基本步骤：</p><ul><li>接收消息</li><li>开启本地事务</li><li>执行业务</li><li>通知消息服务，消息已经接收和处理</li><li>提交事务</li></ul><p><strong>优点：</strong></p><ul><li>解除了事务业务与消息相关业务的耦合</li></ul><p><strong>缺点：</strong></p><ul><li>实现起来比较复杂</li></ul><h3 id="2-6-3-RocketMQ事务消息"><a href="#2-6-3-RocketMQ事务消息" class="headerlink" title="2.6.3.RocketMQ事务消息"></a>2.6.3.RocketMQ事务消息</h3><p>RocketMQ本身自带了事务消息，可以保证消息的可靠性，原理其实就是自带了本地消息表，与我们上面讲的思路类似。</p><h3 id="2-6-4-RabbitMQ的消息确认"><a href="#2-6-4-RabbitMQ的消息确认" class="headerlink" title="2.6.4.RabbitMQ的消息确认"></a>2.6.4.RabbitMQ的消息确认</h3><p>RabbitMQ确保消息不丢失的思路比较奇特，并没有使用传统的本地表，而是利用了消息的确认机制：</p><ul><li>生产者确认机制：确保消息从生产者到达MQ不会有问题<ul><li>消息生产者发送消息到RabbitMQ时，可以设置一个异步的监听器，监听来自MQ的ACK</li><li>MQ接收到消息后，会返回一个回执给生产者：<ul><li>消息到达交换机后路由失败，会返回失败ACK</li><li>消息路由成功，持久化失败，会返回失败ACK</li><li>消息路由成功，持久化成功，会返回成功ACK</li></ul></li><li>生产者提前编写好不同回执的处理方式<ul><li>失败回执：等待一定时间后重新发送</li><li>成功回执：记录日志等行为</li></ul></li></ul></li><li>消费者确认机制：确保消息能够被消费者正确消费<ul><li>消费者需要在监听队列的时候指定手动ACK模式</li><li>RabbitMQ把消息投递给消费者后，会等待消费者ACK，接收到ACK后才删除消息，如果没有接收到ACK消息会一直保留在服务端，如果消费者断开连接或异常后，消息会投递给其它消费者。</li><li>消费者处理完消息，提交事务后，手动ACK。如果执行过程中抛出异常，则不会ACK，业务处理失败，等待下一条消息</li></ul></li></ul><p>经过上面的两种确认机制，可以确保从消息生产者到消费者的消息安全，再结合生产者和消费者两端的本地事务，即可保证一个分布式事务的最终一致性。</p><h3 id="2-6-5-消息事务的优缺点"><a href="#2-6-5-消息事务的优缺点" class="headerlink" title="2.6.5.消息事务的优缺点"></a>2.6.5.消息事务的优缺点</h3><p>总结上面的几种模型，消息事务的优缺点如下：</p><ul><li>优点：<ul><li>相对TCC，代码侵入较少</li><li>业务相对简单</li><li>是多个本地事务的结合，因此资源锁定周期短，性能好</li></ul></li><li>缺点：<ul><li>依赖于MQ的可靠性</li><li>消息发起者可以回滚，但是消息参与者无法引起事务回滚</li><li>事务时效性差，取决于MQ消息发送是否及时，还有消息参与者的执行情况</li></ul></li></ul><p>针对事务无法回滚的问题，有人提出说可以在事务参与者执行失败后，再次利用MQ通知消息服务，然后由消息服务通知其他参与者回滚。那么，恭喜你，你利用MQ和自定义的消息服务再次实现了2PC 模型，又造了一个大轮子</p><h2 id="2-7-AT模式"><a href="#2-7-AT模式" class="headerlink" title="2.7.AT模式"></a>2.7.AT模式</h2><p>2019年 1 月份，Seata 开源了 AT 模式。AT 模式是一种<strong>无侵入</strong>的分布式事务解决方案。可以看做是对TCC模型的一种优化，解决了TCC模式中的代码侵入、编码复杂等问题。</p><p>在 AT 模式下，用户只需关注自己的“业务 SQL”，用户的 “业务 SQL” 作为一阶段，Seata 框架会自动生成事务的二阶段提交和回滚操作。</p><p>可以参考Seata的<a href="https://seata.io/zh-cn/docs/dev/mode/at-mode.html">官方文档</a>。</p><h3 id="2-7-1-基本原理"><a href="#2-7-1-基本原理" class="headerlink" title="2.7.1.基本原理"></a>2.7.1.基本原理</h3><p>先来看一张流程图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305212340203.png" alt="image-20200305212340203"></p><p>有没有感觉跟TCC的执行很像，都是分两个阶段：</p><ul><li>一阶段：执行本地事务，并返回执行结果</li><li>二阶段：根据一阶段的结果，判断二阶段做法：提交或回滚</li></ul><p>但AT模式底层做的事情可完全不同，而且第二阶段根本不需要我们编写，全部由Seata自己实现了。也就是说：我们写的<strong>代码与本地事务时代码一样</strong>，无需手动处理分布式事务。</p><p>那么，AT模式如何实现无代码侵入，如何帮我们自动实现二阶段代码的呢？</p><blockquote><p>一阶段</p></blockquote><p>在一阶段，Seata 会拦截“业务 SQL”，首先解析 SQL 语义，找到“<code>业务 SQL</code>”要更新的业务数据，在业务数据被更新前，将其保存成“<code>before image</code>”(<strong>相当于undo log</strong>)，然后执行“<code>业务 SQL</code>”更新业务数据，在业务数据更新之后，再将其保存成“<code>after image</code>”**(相当于undo log)<strong>，最后获取全局行锁，</strong>提交事务**。以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305213652558.png" alt="image-20200305213652558"></p><blockquote><p>二阶段提交</p></blockquote><p>二阶段如果是提交的话，因为“<code>业务 SQL</code>”在一阶段已经提交至数据库， 所以 Seata 框架只需将一阶段保存的快照数据和行锁删掉，完成数据清理即可。</p><blockquote><p>二阶段回滚：</p></blockquote><p>二阶段如果是回滚的话，Seata 就需要回滚一阶段已经执行的“<code>业务 SQL</code>”，还原业务数据。回滚方式便是用“<code>before image</code>”还原业务数据；但在还原前要首先要校验脏写，对比“数据库当前业务数据”和 “<code>after image</code>”，如果两份数据完全一致就说明没有脏写，可以还原业务数据，如果不一致就说明有<code>脏写</code>，<strong>出现脏写就需要转人工处理。</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">脏写：</span></span><br><span class="line"><span class="meta">事务</span> <span class="string">B 去修改了事务 A 修改过的值，但是此时事务 A 还没提交，</span></span><br><span class="line"><span class="meta">所以事务</span> <span class="string">A 随时会回滚，导致事务 B 修改的值也没了</span></span><br><span class="line"></span><br><span class="line"><span class="attr">所以要校验脏写，如果发生脏写，就不能简单执行A的回滚，而是人工判断，决策！</span></span><br></pre></td></tr></table></figure><p>穿插知识点：(脏写、脏读、不可重复读、幻读)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//zhuanlan.zhihu.com/p/150107974</span></span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305214649845.png" alt="image-20200305214649845"></p><p>不过因为有<strong>全局锁机制</strong>，所以可以降低出现<code>脏写</code>的概率。</p><p><strong>AT 模式的一阶段、二阶段提交和回滚均由 Seata 框架自动生成，用户只需编写“业务 SQL”，便能轻松接入分布式事务，AT 模式是一种对业务无任何侵入的分布式事务解决方案。</strong></p><h3 id="2-7-2-详细架构和流程"><a href="#2-7-2-详细架构和流程" class="headerlink" title="2.7.2.详细架构和流程"></a>2.7.2.详细架构和流程</h3><p>Seata中的几个基本概念：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">TC（Transaction Coordinator） - 事务协调者</span></span><br><span class="line">  <span class="attr">维护全局和分支事务的状态，驱动全局事务提交或回滚（TM之间的协调者）。</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">TM（Transaction Manager） - 事务管理器</span></span><br><span class="line">  <span class="attr">定义全局事务的范围：开始全局事务、提交或回滚全局事务。</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">RM（Resource Manager） - 资源管理器</span></span><br><span class="line">  <span class="attr">管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</span></span><br></pre></td></tr></table></figure><p>我们看下面的一个架构图</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305225811888.png" alt="image-20200305225811888"></p><ul><li>TM：业务模块中全局事务的<code>开启者</code><ul><li>向TC开启一个全局事务</li><li>调用其它微服务</li></ul></li><li>RM：业务模块执行者中，包含RM部分，负责向TC汇报事务执行状态<ul><li>执行本地事务</li><li>向TC注册分支事务，并提交本地事务执行结果</li></ul></li><li>TM：结束对微服务的调用，通知TC，全局事务执行完毕，事务一阶段结束</li><li>TC：汇总各个分支事务执行结果，决定分布式事务是提交还是回滚；</li><li>TC 通知所有 RM 提交/回滚 资源，事务二阶段结束。</li></ul><p><strong>分两阶段，具体流程如下：</strong></p><p>一阶段：</p><ul><li>TM开启全局事务，并向TC声明全局事务，包括全局事务XID信息</li><li>TM所在服务调用其它微服务</li><li>微服务，主要有RM来执行<ul><li>查询<code>before_image</code></li><li>执行本地事务</li><li>查询<code>after_image</code></li><li>生成<code>undo_log</code>并写入数据库</li><li>向TC注册分支事务，告知事务执行结果</li><li>获取全局锁（阻止其它全局事务并发修改当前数据）</li><li>释放本地锁（不影响其它业务对数据的操作）</li></ul></li><li>待所有业务执行完毕，事务发起者（TM）会尝试向TC提交全局事务</li></ul><p>二阶段：</p><ul><li>TC统计分支事务执行情况，根据结果判断下一步行为<ul><li>分支都成功：通知分支事务，提交事务</li><li>有分支执行失败：通知执行成功的分支事务，”回滚数据”(补偿)</li></ul></li><li>分支事务的RM<ul><li>提交事务：直接清空<code>before_image</code>和<code>after_image</code>信息，释放全局锁</li><li>回滚事务：<ul><li>校验after_image，判断是否有脏写</li><li>如果没有脏写，回滚数据到<code>before_image</code>，清除<code>before_image</code>和<code>after_image</code>，释放全局锁</li><li>如果有脏写，请求人工介入</li></ul></li></ul></li></ul><h3 id="2-7-3-工作机制"><a href="#2-7-3-工作机制" class="headerlink" title="2.7.3.工作机制"></a>2.7.3.工作机制</h3><p>详见Seata的官方文档：<a href="https://seata.io/zh-cn/docs/overview/what-is-seata.html">https://seata.io/zh-cn/docs/overview/what-is-seata.html</a></p><blockquote><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4></blockquote><p>以一个示例来说明整个 AT 分支的工作过程。</p><p>业务表：<code>product</code></p><table><thead><tr><th>Field</th><th>Type</th><th>Key</th></tr></thead><tbody><tr><td>id</td><td>bigint(20)</td><td>PRI</td></tr><tr><td>name</td><td>varchar(100)</td><td></td></tr><tr><td>since</td><td>varchar(100)</td><td></td></tr></tbody></table><p>AT 分支事务的业务逻辑：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update product <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;GTS&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;TXC&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><h4 id="一阶段"><a href="#一阶段" class="headerlink" title="一阶段"></a>一阶段</h4></blockquote><p>过程：</p><ol><li>解析 SQL：得到 SQL 的类型（UPDATE），表（product），条件（where name = ‘TXC’）等相关的信息。</li><li>查询前镜像：根据解析得到的条件信息，生成查询语句，定位数据。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name, since <span class="keyword">from</span> product <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;TXC&#x27;</span>;</span><br></pre></td></tr></table></figure><p>得到前镜像：</p><table><thead><tr><th>id</th><th>name</th><th>since</th></tr></thead><tbody><tr><td>1</td><td>TXC</td><td>2014</td></tr></tbody></table><ol><li>执行业务 SQL：更新这条记录的 name 为 ‘GTS’。</li><li>查询后镜像：根据前镜像的结果，通过 <strong>主键</strong> 定位数据。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name, since <span class="keyword">from</span> product <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>`;</span><br></pre></td></tr></table></figure><p>得到后镜像：</p><table><thead><tr><th>id</th><th>name</th><th>since</th></tr></thead><tbody><tr><td>1</td><td>GTS</td><td>2014</td></tr></tbody></table><ol><li>插入回滚日志：把前后镜像数据以及业务 SQL 相关的信息组成一条回滚日志记录，插入到 <code>UNDO_LOG</code> 表中。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;branchId&quot;</span>: <span class="number">641789253</span>,</span><br><span class="line"><span class="attr">&quot;undoItems&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;afterImage&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rows&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;fields&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">&quot;value&quot;</span>: <span class="string">&quot;GTS&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;since&quot;</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">&quot;value&quot;</span>: <span class="string">&quot;2014&quot;</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">&quot;tableName&quot;</span>: <span class="string">&quot;product&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;beforeImage&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rows&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;fields&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">&quot;value&quot;</span>: <span class="string">&quot;TXC&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;since&quot;</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">&quot;value&quot;</span>: <span class="string">&quot;2014&quot;</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">&quot;tableName&quot;</span>: <span class="string">&quot;product&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;sqlType&quot;</span>: <span class="string">&quot;UPDATE&quot;</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">&quot;xid&quot;</span>: <span class="string">&quot;xid:xxx&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>提交前，向 TC 注册分支：申请 <code>product</code> 表中，主键值等于 1 的记录的 <strong>全局锁</strong> 。</li><li>本地事务提交：业务数据的更新和前面步骤中生成的 UNDO LOG 一并提交。</li><li>将本地事务提交的结果上报给 TC。</li></ol><blockquote><h4 id="二阶段-回滚"><a href="#二阶段-回滚" class="headerlink" title="二阶段-回滚"></a>二阶段-回滚</h4></blockquote><ol><li>收到 TC 的分支回滚请求，开启一个本地事务，执行如下操作。</li><li>通过 XID 和 Branch ID 查找到相应的 UNDO LOG 记录。</li><li>数据校验：拿 UNDO LOG 中的后镜与当前数据进行比较，如果有不同，说明数据被当前全局事务之外的动作做了修改。这种情况，需要根据配置策略来做处理，详细的说明在另外的文档中介绍。</li><li>根据 UNDO LOG 中的前镜像和业务 SQL 的相关信息生成并执行回滚的语句：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update product <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;TXC&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ol><li>提交本地事务。并把本地事务的执行结果（即分支事务回滚的结果）上报给 TC。</li></ol><blockquote><h4 id="二阶段-提交"><a href="#二阶段-提交" class="headerlink" title="二阶段-提交"></a>二阶段-提交</h4></blockquote><ol><li>收到 TC 的分支提交请求，把请求放入一个异步任务的队列中，马上返回提交成功的结果给 TC。</li><li>异步任务阶段的分支提交请求将异步和批量地删除相应 UNDO LOG 记录。</li></ol><h3 id="2-7-4-优缺点"><a href="#2-7-4-优缺点" class="headerlink" title="2.7.4.优缺点"></a>2.7.4.优缺点</h3><p>优点：</p><ul><li>与2PC相比：每个分支事务都是独立提交，不互相等待，减少了资源锁定和阻塞时间</li><li>与TCC相比：二阶段的执行操作全部自动化生成，无代码侵入，开发成本低</li></ul><p>缺点：</p><ul><li>与TCC相比，需要动态生成二阶段的反向补偿操作，执行性能略低于TCC</li></ul><h2 id="2-8-Saga模式"><a href="#2-8-Saga模式" class="headerlink" title="2.8.Saga模式"></a>2.8.Saga模式</h2><p>Saga 模式是 Seata 即将开源的长事务解决方案，将由蚂蚁金服主要贡献。</p><p>其理论基础是Hector &amp; Kenneth  在1987年发表的论文<a href="https://microservices.io/patterns/data/saga.html">Sagas</a>。</p><p>Seata官网对于Saga的指南：<a href="https://seata.io/zh-cn/docs/user/saga.html">https://seata.io/zh-cn/docs/user/saga.html</a></p><h3 id="基本模型"><a href="#基本模型" class="headerlink" title="基本模型"></a>基本模型</h3><p>在 Saga 模式下，分布式事务内有多个参与者，每一个参与者都是一个冲正补偿服务，需要用户根据业务场景实现其正向操作和逆向回滚操作。</p><p>分布式事务执行过程中，依次执行各参与者的正向操作，如果所有正向操作均执行成功，那么分布式事务提交。如果任何一个正向操作执行失败，那么分布式事务会去退回去执行前面各参与者的逆向回滚操作，回滚已提交的参与者，使分布式事务回到初始状态。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1561965208439-606129fe-6761-4177-8887-1fda9306f104.png" alt="Saga 模式"> </p><p>Saga 模式下分布式事务通常是由事件驱动的，各个参与者之间是异步执行的，Saga 模式是一种长事务解决方案。</p><h3 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h3><ul><li>业务流程长、业务流程多</li><li>参与者包含其它公司或遗留系统服务，无法提供 TCC 模式要求的三个接口</li></ul><h3 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h3><ul><li>一阶段提交本地事务，无锁，高性能</li><li>事件驱动架构，参与者可异步执行，高吞吐</li><li>补偿服务易于实现</li></ul><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>不保证隔离性（应对方案见<a href="https://seata.io/zh-cn/docs/user/saga.html">用户文档</a>）</li></ul><h1 id="3-Seata"><a href="#3-Seata" class="headerlink" title="3.Seata"></a>3.Seata</h1><h2 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1.介绍"></a>3.1.介绍</h2><p>Seata（Simple Extensible Autonomous Transaction Architecture，简单可扩展自治事务框架）是 2019 年 1 月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案。Seata 开源半年左右，目前已经有接近一万 star，社区非常活跃。我们热忱欢迎大家参与到 Seata 社区建设中，一同将 Seata 打造成开源分布式事务标杆产品。</p><p>Seata：<a href="https://github.com/seata/seata">https://</a><a href="https://github.com/seata/seata">github.com/seata/seata</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1561960344792-8810110b-1eda-4417-944e-7051ca52f90d.png" alt="Seata"></p><h3 id="3-1-1-Seata-产品模块"><a href="#3-1-1-Seata-产品模块" class="headerlink" title="3.1.1. Seata 产品模块"></a>3.1.1. Seata 产品模块</h3><p>如下图所示，Seata 中有三大模块，分别是 TM、RM 和 TC。 其中 TM 和 RM 是作为 Seata 的客户端与业务系统集成在一起，TC 作为 Seata 的服务端独立部署。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305225811888.png" alt="image-20200305225811888"></p><h3 id="3-1-2-Seata支持的事务模型"><a href="#3-1-2-Seata支持的事务模型" class="headerlink" title="3.1.2.Seata支持的事务模型"></a>3.1.2.Seata支持的事务模型</h3><p>Seata 会有 4 种分布式事务解决方案，分别是 AT 模式、TCC 模式、Saga 模式和 XA 模式。<img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200305230513415.png" alt="image-20200305230513415"> </p><h2 id="3-2-AT模式实战"><a href="#3-2-AT模式实战" class="headerlink" title="3.2.AT模式实战"></a>3.2.AT模式实战</h2><p>Seata中比较常用的是AT模式，这里我们拿AT模式来做演示，看看如何在SpringCloud微服务中集成Seata.</p><p>我们假定一个用户购买商品的业务逻辑。整个业务逻辑由3个微服务提供支持：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">仓储服务：对给定的商品扣除仓储数量。</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">订单服务：根据采购需求创建订单。</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">帐户服务：从用户帐户中扣除余额。</span></span><br></pre></td></tr></table></figure><p>流程图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306164728739.png" alt="image-20200306164728739"></p><p>订单服务在下单时，同时调用库存服务和用户服务，此时就会发生<strong>跨服务和跨数据源的分布式事务</strong>问题。</p><h3 id="3-2-1-准备数据"><a href="#3-2-1-准备数据" class="headerlink" title="3.2.1.准备数据"></a>3.2.1.准备数据</h3><p>执行资料中提供的<code>seata_demo.sql</code>文件，导入数据。</p><p>其中包含4张表。</p><p>Order表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `order_tbl` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` varchar(255) DEFAULT NULL COMMENT &#x27;用户id&#x27;,</span><br><span class="line">  `commodity_code` varchar(255) DEFAULT NULL COMMENT &#x27;商品码&#x27;,</span><br><span class="line">  `count` int(11) unsigned DEFAULT &#x27;0&#x27; COMMENT &#x27;购买数量&#x27;,</span><br><span class="line">  `money` int(11) unsigned DEFAULT &#x27;0&#x27; COMMENT &#x27;总金额&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;</span><br></pre></td></tr></table></figure><p>商品库存表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `storage_tbl` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `commodity_code` varchar(255) DEFAULT NULL COMMENT &#x27;商品码&#x27;,</span><br><span class="line">  `count` int(11) unsigned DEFAULT &#x27;0&#x27; COMMENT &#x27;商品库存&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  UNIQUE KEY `commodity_code` (`commodity_code`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;</span><br></pre></td></tr></table></figure><p>用户账户表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `account_tbl` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` varchar(255) DEFAULT NULL COMMENT &#x27;用户id&#x27;,</span><br><span class="line">  `money` int(11) unsigned DEFAULT &#x27;0&#x27; COMMENT &#x27;用户余额&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;</span><br></pre></td></tr></table></figure><p>还有用来记录Seata中的事务日志表undo_log，其中会包含<code>after_image</code>和<code>before_image</code>数据，用于数据回滚：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `undo_log` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `branch_id` bigint(20) NOT NULL,</span><br><span class="line">  `xid` varchar(100) NOT NULL,</span><br><span class="line">  `context` varchar(128) NOT NULL,</span><br><span class="line">  `rollback_info` longblob NOT NULL,</span><br><span class="line">  `log_status` int(11) NOT NULL,</span><br><span class="line">  `log_created` datetime NOT NULL,</span><br><span class="line">  `log_modified` datetime NOT NULL,</span><br><span class="line">  `ext` varchar(100) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-引入Demo工程"><a href="#3-2-2-引入Demo工程" class="headerlink" title="3.2.2.引入Demo工程"></a>3.2.2.引入Demo工程</h3><p>我们先准备基本的项目环境，实现下单的业务代码</p><h4 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h4><p>使用Idea打开资料中提供的 seata-demo项目：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306170419354.png" alt="image-20200306170419354"> </p><p>找到项目所在目录，选中并打开：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306170520985.png" alt="image-20200306170520985"> </p><p>项目结构如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306171827203.png" alt="image-20200306171827203"> </p><p>结构说明：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">account-service：用户服务，提供操作用户账号余额的功能，端口8083</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">eureka-server：注册中心，端口8761</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">order-service：订单服务，提供根据数据创建订单的功能，端口8082</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">storage-service：仓储服务，提供扣减商品库存功能，端口8081</span></span><br></pre></td></tr></table></figure><h4 id="测试事务"><a href="#测试事务" class="headerlink" title="测试事务"></a>测试事务</h4><p>接下来，我们来测试下分布式事务的现象。</p><p>下单的接口是：</p><ul><li>请求方式：POST</li><li>请求路径：/order</li><li>请求参数：form表单，包括：<ul><li>userId：用户id</li><li>commodityCode：商品码</li><li>count：购买数量</li><li>money：话费金额</li></ul></li><li>返回值类型：long，订单的id</li></ul><p>原始数据库数据：</p><p>余额：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306173439268.png" alt="image-20200306173439268"> </p><p>库存：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306173511332.png" alt="image-20200306173511332"> </p><p>其它两张表为空。</p><blockquote><p>正常下单</p></blockquote><p>此时启动项目，尝试下单，目前商品库存为10，用户余额为1000，因此只要数据不超过这两个值应该能正常下单。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306173343839.png" alt="image-20200306173343839"> </p><p>查看数据库数据：</p><p>余额：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306173602942.png" alt="image-20200306173602942"> </p><p>库存：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306173629491.png" alt="image-20200306173629491"> </p><p>订单：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306173700813.png" alt="image-20200306173700813"> </p><blockquote><p>异常下单</p></blockquote><p>这次，我们把money参数设置为1200，这样就超过了余额最大值，理论上所有数据都应该回滚：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306173916953.png" alt="image-20200306173916953"></p><p>看下用户余额：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306224048175.png" alt="image-20200306224048175"> </p><p>因为扣款失败，因此这里没有扣减</p><p>来看下库存数据：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306174001901.png" alt="image-20200306174001901"> </p><p><strong>这说明扣减库存依然成功，并未回滚！</strong></p><p>接下来，我们引入Seata，看看能不能解决这个问题。</p><h3 id="3-2-3-准备TC服务"><a href="#3-2-3-准备TC服务" class="headerlink" title="3.2.3.准备TC服务"></a>3.2.3.准备TC服务</h3><p>在之前讲解Seata原理的时候，我们就聊过，其中包含重要的3个角色：</p><ul><li>TC：事务协调器</li><li>TM：事务管理器</li><li>RM：资源管理器</li></ul><p>其中，TC是一个独立的服务，负责协调各个分支事务，而TM和RM通过jar包的方式，集成在各个事务参与者中。</p><p>因此，首先我们需要<strong>搭建一个独立的TC服务</strong>。</p><h4 id="1）安装"><a href="#1）安装" class="headerlink" title="1）安装"></a>1）安装</h4><p>首先去官网下载TC的服务端安装包，GitHub的地址：<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p><p>这里我们在资料中提供给大家1.1.0版本的安装包：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306174740064.png" alt="image-20200306174740064"> </p><p>然后解压即可，其目录结构如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306174818712.png" alt="image-20200306174818712"> </p><p>包括：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li><li>lib：依赖项</li></ul><h4 id="2）配置"><a href="#2）配置" class="headerlink" title="2）配置"></a>2）配置</h4><p><strong>Seata的核心配置</strong>主要是两部分：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1 注册中心的配置：在`$&#123;seata_home&#125;/conf/`目录中，一般是`registry.conf`文件</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2 当前服务的配置，两种配置方式：</span></span><br><span class="line">  <span class="meta">(1)-</span> <span class="string">通过分布式服务的统一配置中心，例如Zookeeper</span></span><br><span class="line">  <span class="meta">(2)-</span> <span class="string">通过本地文件</span></span><br></pre></td></tr></table></figure><p>我们先看registry.conf，内容是JSON风格</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # 指定注册中心类型，这里使用eureka类型</span><br><span class="line">  type = <span class="attr">&quot;eureka&quot;</span></span><br><span class="line">  # 各种注册中心的配置。。这里省略，只保留了eureka和Zookeeper</span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl = <span class="attr">&quot;http://localhost:8761/eureka&quot;</span></span><br><span class="line">    application = <span class="attr">&quot;seata_tc_server&quot;</span></span><br><span class="line">    weight = <span class="attr">&quot;1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    cluster = <span class="attr">&quot;default&quot;</span></span><br><span class="line">    serverAddr = <span class="attr">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  # 配置文件方式，可以支持 file、nacos 、apollo、zk、consul、etcd3</span><br><span class="line">  type = <span class="attr">&quot;file&quot;</span></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="attr">&quot;localhost&quot;</span></span><br><span class="line">    namespace = <span class="attr">&quot;&quot;</span></span><br><span class="line">    group = <span class="attr">&quot;SEATA_GROUP&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    serverAddr = <span class="attr">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = <span class="attr">&quot;file.conf&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个文件主要配置两个内容：</p><ul><li><strong>1 注册中心的类型及地址</strong>，本例我们选择eureka做注册中心<ul><li>eureka.serviceUrl：是eureka的地址，例如<a href="http://localhost:8761/eureka">http://localhost:8761/eureka</a></li><li>application：是TC注册到eureka时的服务名称，例如<code>seata_tc_server</code></li></ul></li><li><strong>2 配置中心的类型及地址</strong>，本例我们选择本地文件做配置，就是当前目录的<code>file.conf</code>文件</li></ul><p>再来看<code>file.conf</code>文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">## transaction log store, only used in seata-server</span><br><span class="line">store &#123;</span><br><span class="line">  ## store mode: file、db</span><br><span class="line">  # 这里好像是用db吧#######</span><br><span class="line">  mode = <span class="string">&quot;file&quot;</span></span><br><span class="line">  ## file store property</span><br><span class="line">  file &#123;</span><br><span class="line">    ## store location dir</span><br><span class="line">    dir = <span class="attr">&quot;sessionStore&quot;</span></span><br><span class="line">    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span><br><span class="line">    maxBranchSessionSize = 16384</span><br><span class="line">    # globe session size , if exceeded throws exceptions</span><br><span class="line">    maxGlobalSessionSize = 512</span><br><span class="line">    # file buffer size , if exceeded allocate new buffer</span><br><span class="line">    fileWriteBufferCacheSize = 16384</span><br><span class="line">    # when recover batch read size</span><br><span class="line">    sessionReloadReadSize = 100</span><br><span class="line">    # async, sync</span><br><span class="line">    flushDiskMode = async</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ## database store property</span><br><span class="line">  db &#123;</span><br><span class="line">    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span><br><span class="line">    datasource = <span class="attr">&quot;dbcp&quot;</span></span><br><span class="line">    ## mysql/oracle/h2/oceanbase etc.</span><br><span class="line">    dbType = <span class="attr">&quot;mysql&quot;</span></span><br><span class="line">    driverClassName = <span class="attr">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">    url = <span class="attr">&quot;jdbc:mysql://127.0.0.1:3306/seata_demo&quot;</span></span><br><span class="line">    user = <span class="attr">&quot;root&quot;</span></span><br><span class="line">    password = <span class="attr">&quot;123&quot;</span></span><br><span class="line">    minConn = 1</span><br><span class="line">    maxConn = 10</span><br><span class="line">    globalTable = <span class="attr">&quot;global_table&quot;</span></span><br><span class="line">    branchTable = <span class="attr">&quot;branch_table&quot;</span></span><br><span class="line">    lockTable = <span class="attr">&quot;lock_table&quot;</span></span><br><span class="line">    queryLimit = 100</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键配置：</p><ul><li>store：TC的服务端数据存储配置<ul><li>mode：数据存储方式，支持两种：file和db<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">file：将数据存储在本地文件中，性能比较好，但不支持水平扩展</span></span><br><span class="line"><span class="meta">-</span> <span class="string">db：将数据保存在指定的数据库中，需要指定数据库连接信息</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>如果用文件作为存储介质，不需要其它配置了，直接运行即可。</p><p>但是如果使用db作为存储介质，还需要在数据库中<strong>创建3张表</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `global_table`</span><br><span class="line">(</span><br><span class="line">    `xid`                       <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `transaction_id`            <span class="type">BIGINT</span>,</span><br><span class="line">    `status`                    TINYINT      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `application_id`            <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    `transaction_service_group` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    `transaction_name`          <span class="type">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">    `timeout`                   <span class="type">INT</span>,</span><br><span class="line">    `begin_time`                <span class="type">BIGINT</span>,</span><br><span class="line">    `application_data`          <span class="type">VARCHAR</span>(<span class="number">2000</span>),</span><br><span class="line">    `gmt_create`                DATETIME,</span><br><span class="line">    `gmt_modified`              DATETIME,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`xid`),</span><br><span class="line">    KEY `idx_gmt_modified_status` (`gmt_modified`, `status`),</span><br><span class="line">    KEY `idx_transaction_id` (`transaction_id`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- the table to store BranchSession data</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `branch_table`</span><br><span class="line">(</span><br><span class="line">    `branch_id`         <span class="type">BIGINT</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `xid`               <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `transaction_id`    <span class="type">BIGINT</span>,</span><br><span class="line">    `resource_group_id` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    `resource_id`       <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    `branch_type`       <span class="type">VARCHAR</span>(<span class="number">8</span>),</span><br><span class="line">    `status`            TINYINT,</span><br><span class="line">    `client_id`         <span class="type">VARCHAR</span>(<span class="number">64</span>),</span><br><span class="line">    `application_data`  <span class="type">VARCHAR</span>(<span class="number">2000</span>),</span><br><span class="line">    `gmt_create`        DATETIME,</span><br><span class="line">    `gmt_modified`      DATETIME,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`branch_id`),</span><br><span class="line">    KEY `idx_xid` (`xid`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- the table to store lock data</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `lock_table`</span><br><span class="line">(</span><br><span class="line">    `row_key`        <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `xid`            <span class="type">VARCHAR</span>(<span class="number">96</span>),</span><br><span class="line">    `transaction_id` <span class="type">BIGINT</span>,</span><br><span class="line">    `branch_id`      <span class="type">BIGINT</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource_id`    <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    `table_name`     <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    `pk`             <span class="type">VARCHAR</span>(<span class="number">36</span>),</span><br><span class="line">    `gmt_create`     DATETIME,</span><br><span class="line">    `gmt_modified`   DATETIME,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`row_key`),</span><br><span class="line">    KEY `idx_branch_id` (`branch_id`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br></pre></td></tr></table></figure><h4 id="3）启动"><a href="#3）启动" class="headerlink" title="3）启动"></a>3）启动</h4><p>进入<code>$&#123;seata_home&#125;/bin/</code>目录中:</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306201749660.png" alt="image-20200306201749660"> </p><p>如果是linux环境（要有JRE），执行<code>seata-server.sh</code></p><p>如果是windows环境，执行<code>seata-server.bat</code></p><h3 id="3-2-4-改造Order服务"><a href="#3-2-4-改造Order服务" class="headerlink" title="3.2.4.改造Order服务"></a>3.2.4.改造Order服务</h3><p>接下来是微服务的改造，不管是哪一个微服务，只要是事务的参与者，步骤基本一致。</p><h4 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h4><p>我们在父工程<code>seata-demo</code>中已经对依赖做了管理：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306210054786.png" alt="image-20200306210054786"> </p><p>因此，我们在项目<code>order-service</code>的pom文件中，引入依赖坐标即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）添加配置文件"><a href="#2）添加配置文件" class="headerlink" title="2）添加配置文件"></a>2）添加配置文件</h4><p>首先在application.yml中添加一行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">test_tx_group</span> <span class="comment"># 定义事务组的名称</span></span><br></pre></td></tr></table></figure><p>这里是定义事务组的名称，接下来会用到。</p><p>然后是在<code>resources</code>目录下放两个配置文件：<code>file.conf</code>和<code>registry.conf</code></p><p>其中，<code>registry.conf</code>与TC服务端的一样，此处不再讲解。</p><p>我们来看下<code>file.conf</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">transport &#123;</span><br><span class="line">  # tcp udt unix-domain-socket</span><br><span class="line">  type = <span class="attr">&quot;TCP&quot;</span></span><br><span class="line">  #NIO NATIVE</span><br><span class="line">  server = <span class="attr">&quot;NIO&quot;</span></span><br><span class="line">  #enable heartbeat</span><br><span class="line">  heartbeat = true</span><br><span class="line">  # the client batch send request enable</span><br><span class="line">  enableClientBatchSendRequest = true</span><br><span class="line">  #thread factory for netty</span><br><span class="line">  threadFactory &#123;</span><br><span class="line">    bossThreadPrefix = <span class="attr">&quot;NettyBoss&quot;</span></span><br><span class="line">    workerThreadPrefix = <span class="attr">&quot;NettyServerNIOWorker&quot;</span></span><br><span class="line">    serverExecutorThread-prefix = <span class="attr">&quot;NettyServerBizHandler&quot;</span></span><br><span class="line">    shareBossWorker = false</span><br><span class="line">    clientSelectorThreadPrefix = <span class="attr">&quot;NettyClientSelector&quot;</span></span><br><span class="line">    clientSelectorThreadSize = 1</span><br><span class="line">    clientWorkerThreadPrefix = <span class="attr">&quot;NettyClientWorkerThread&quot;</span></span><br><span class="line">    # netty boss thread size,will not be used for UDT</span><br><span class="line">    bossThreadSize = 1</span><br><span class="line">    #auto default pin or 8</span><br><span class="line">    workerThreadSize = <span class="attr">&quot;default&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  shutdown &#123;</span><br><span class="line">    # when destroy server, wait seconds</span><br><span class="line">    wait = 3</span><br><span class="line">  &#125;</span><br><span class="line">  serialization = <span class="string">&quot;seata&quot;</span></span><br><span class="line">  compressor = <span class="string">&quot;none&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">service &#123;</span><br><span class="line">  vgroupMapping.test_tx_group = <span class="attr">&quot;seata_tc_server&quot;</span>  # 必须与注册到注册中心的微服务名称一致</span><br><span class="line">  #only support when registry.type=file, please don&#x27;t set multiple addresses</span><br><span class="line">  seata_tc_server.grouplist = <span class="attr">&quot;127.0.0.1:8091&quot;</span></span><br><span class="line">  #degrade, current not support</span><br><span class="line">  enableDegrade = false</span><br><span class="line">  #disable seata</span><br><span class="line">  disableGlobalTransaction = false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client &#123;</span><br><span class="line">  rm &#123;</span><br><span class="line">    asyncCommitBufferLimit = 10000</span><br><span class="line">    lock &#123;</span><br><span class="line">      retryInterval = 10</span><br><span class="line">      retryTimes = 30</span><br><span class="line">      retryPolicyBranchRollbackOnConflict = true</span><br><span class="line">    &#125;</span><br><span class="line">    reportRetryCount = <span class="number">5</span></span><br><span class="line">    tableMetaCheckEnable = <span class="literal">false</span></span><br><span class="line">    reportSuccessEnable = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  tm &#123;</span><br><span class="line">    commitRetryCount = 5</span><br><span class="line">    rollbackRetryCount = 5</span><br><span class="line">  &#125;</span><br><span class="line">  undo &#123;</span><br><span class="line">    dataValidation = true</span><br><span class="line">    logSerialization = <span class="attr">&quot;jackson&quot;</span></span><br><span class="line">    logTable = <span class="attr">&quot;undo_log&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  log &#123;</span><br><span class="line">    exceptionRate = 100</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置解读：</p><ul><li><code>transport</code>：与TC交互的一些配置<ul><li><code>heartbeat</code>：client和server通信心跳检测开关</li><li><code>enableClientBatchSendRequest</code>：客户端事务消息请求是否批量合并发送</li></ul></li><li><code>service</code>：TC的地址配置，用于获取TC的地址<ul><li><code>vgroupMapping.test_tx_group = &quot;seata_tc_server&quot;</code>：<ul><li><code>test_tx_group</code>：是事务组名称，要与application.yml中配置一致，</li><li><code>seata_tc_server</code>：是TC服务端集群的名称，将来通过注册中心获取TC地址</li><li><code>enableDegrade</code>：服务降级开关，默认关闭。如果开启，当业务重试多次失败后会放弃全局事务</li><li><code>disableGlobalTransaction</code>：全局事务开关，默认false。false为开启，true为关闭</li></ul></li><li><code>default.grouplist</code>：这个当注册中心为file的时候，才用到</li></ul></li><li><code>client</code>：客户端配置<ul><li><code>rm</code>：资源管理器配<ul><li><code>asynCommitBufferLimit</code>：二阶段提交默认是异步执行，这里指定异步队列的大小</li><li><code>lock</code>：全局锁配置<ul><li><code>retryInterval</code>：校验或占用全局锁重试间隔，默认10，单位毫秒</li><li><code>retryTimes</code>：校验或占用全局锁重试次数，默认30次</li><li><code>retryPolicyBranchRollbackOnConflict</code>：分支事务与其它全局回滚事务冲突时锁策略，默认true，优先释放本地锁让回滚成功</li></ul></li><li><code>reportRetryCount</code>：一阶段结果上报TC失败后重试次数，默认5次</li></ul></li><li><code>tm</code>：事务管理器配置<ul><li><code>commitRetryCount</code>：一阶段全局提交结果上报TC重试次数，默认1</li><li><code>rollbackRetryCount</code>：一阶段全局回滚结果上报TC重试次数，默认1</li></ul></li><li><code>undo</code>：undo_log的配置<ul><li><code>dataValidation</code>：是否开启二阶段回滚镜像校验，默认true</li><li><code>logSerialization</code>：undo序列化方式，默认Jackson</li><li><code>logTable</code>：自定义undo表名，默认是<code>undo_log</code></li></ul></li><li><code>log</code>：日志配置<ul><li><code>exceptionRate</code>：出现回滚异常时的日志记录频率，默认100，百分之一概率。回滚失败基本是脏数据，无需输出堆栈占用硬盘空间</li></ul></li></ul></li></ul><h4 id="3）代理DataSource"><a href="#3）代理DataSource" class="headerlink" title="3）代理DataSource"></a>3）代理DataSource</h4><p>Seata的二阶段执行是通过拦截sql语句，分析语义来指定回滚策略，因此需要对DataSource做代理。我们在项目的<code>cn.itcast.order.config</code>包中，添加一个配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProxyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 订单服务中引入了mybatis-plus，所以要使用特殊的SqlSessionFactoryBean</span></span><br><span class="line">        MybatisSqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> MybatisSqlSessionFactoryBean();</span><br><span class="line">        <span class="comment">// 代理数据源</span></span><br><span class="line">        sqlSessionFactoryBean.setDataSource(<span class="keyword">new</span> DataSourceProxy(dataSource));</span><br><span class="line">        <span class="comment">// 生成SqlSessionFactory</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里因为订单服务使用了mybatis-plus这个框架（这是一个mybatis集成框架，自动生成单表Sql），因此我们需要用mybatis-plus的<code>MybatisSqlSessionFactoryBean</code>代替<code>SqlSessionFactoryBean</code></p><p>如果用的是原生的mybatis，请使用<code>SqlSessionFactoryBean</code>。</p><h4 id="4）添加事务注解"><a href="#4）添加事务注解" class="headerlink" title="4）添加事务注解"></a>4）添加事务注解</h4><p>给事务发起者<code>order_service</code>的<code>OrderServiceImpl</code>中的<code>create()</code>方法添加<code>@GlobalTransactional</code>注解，开启全局事务：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306223043452.png" alt="image-20200306223043452"></p><p>重新启动即可。</p><h3 id="3-2-5-改造Storage、Account服务"><a href="#3-2-5-改造Storage、Account服务" class="headerlink" title="3.2.5.改造Storage、Account服务"></a>3.2.5.改造Storage、Account服务</h3><p>与OrderService类似，这里也要经过下面的步骤：</p><ul><li><p>引入依赖：与order-service一致，略</p></li><li><p>添加配置文件：与order-service一致，略</p></li><li><p>代理DataSource，我们的storage-service和account-service都没有用mybatis-plus，所以配置要使用SqlSessionFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProxyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 因为使用的是mybatis，这里定义SqlSessionFactoryBean</span></span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        <span class="comment">// 配置数据源代理</span></span><br><span class="line">        sqlSessionFactoryBean.setDataSource(<span class="keyword">new</span> DataSourceProxy(dataSource));</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>另外，事务注解可以使用<code>@Transactionnal</code>，而不是<code>@GlobalTransactional</code>，事务发起者才需要添加<code>@GlobalTransactional</code>。</p><h3 id="3-2-6-测试"><a href="#3-2-6-测试" class="headerlink" title="3.2.6.测试"></a>3.2.6.测试</h3><p>重启所有微服务后，我们再次测试。</p><p>目前数据情况：用户余额900，库存为6.</p><p>我们试试扣款1200元，那么扣款失败，理论上来说所有数据都会回滚.</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306173916953.png" alt="image-20200306173916953"></p><p>看下用户余额：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306224048175.png" alt="image-20200306224048175"> </p><p>因为扣款失败，因此这里没有扣减</p><p>来看下库存数据：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200306174001901.png" alt="image-20200306174001901"> </p><p>减库存依然是6，成功回滚，说明分布式事务生效了！</p><h1 id="4-在项目中整合分布式事务（实战）"><a href="#4-在项目中整合分布式事务（实战）" class="headerlink" title="4.在项目中整合分布式事务（实战）"></a>4.在项目中整合分布式事务（实战）</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分布式事务&quot;&gt;&lt;a href=&quot;#分布式事务&quot; class=&quot;headerlink&quot; title=&quot;分布式事务&quot;&gt;&lt;/a&gt;分布式事务&lt;/h1&gt;&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="分布式事务" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-微信支付-分布式事务</title>
    <link href="http://example.com/2022/07/03/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>http://example.com/2022/07/03/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</id>
    <published>2022-07-03T01:52:54.000Z</published>
    <updated>2022-07-08T01:47:19.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">微信支付下单</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">生成二维码</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">实现支付回调</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">实现支付状态查询</span></span><br></pre></td></tr></table></figure><h1 id="微信支付前导（分布式微信支付）"><a href="#微信支付前导（分布式微信支付）" class="headerlink" title="微信支付前导（分布式微信支付）"></a>微信支付前导（分布式微信支付）</h1><p>分布式事务请参考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2022/07/03/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1提交订单，</span></span><br><span class="line"><span class="attr">2查询订单详情</span></span><br><span class="line"><span class="attr">3生成订单</span></span><br><span class="line"></span><br><span class="line"><span class="attr">在1，3之间可能后台管理员将订单改价了，</span></span><br><span class="line"><span class="attr">那么需要按照改价后的价格售卖，但是订单都应生成了，该怎么办？？？</span></span><br><span class="line"></span><br><span class="line"><span class="attr">1</span> <span class="string">最简单的解决方法就是先下架冷却，修改完价格之后再上架。</span></span><br><span class="line"><span class="attr">2</span> <span class="string">保价机制，要求商家退还差价</span></span><br><span class="line"><span class="attr">3</span> <span class="string">预告机制！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">事务管理：</span></span><br><span class="line">    <span class="meta">下单行为</span> <span class="string">一个事务</span></span><br><span class="line">    <span class="meta">减库存行为</span> <span class="string">一个事务</span></span><br><span class="line">    <span class="attr">但是这两个事务不是同一个线程的事务（微服都不同），我们实际需求是把它们当做同一个事务。</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">虽然减库存代码itemClient.minusStock(carts)放在加了事务的createOrder方法内，</span></span><br><span class="line">    <span class="attr">但是减库存跟下单方法不是同一个事务管理器。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">理论学习：</span></span><br><span class="line"><span class="attr">本地事务：（单服务单数据库），利用数据库的ACID（原子性，一致性，隔离性，持久性）就能实现事务控制。</span></span><br><span class="line"><span class="meta">分布式事务：1</span> <span class="string">跨服务，2 跨数据库  3 跨服务+数据库</span></span><br><span class="line"></span><br><span class="line"><span class="attr">跨数据库事务管理：</span></span><br><span class="line"><span class="attr">使用数据库集群，当不同数据库数据不一致时，如何响应用户访问？？？</span></span><br><span class="line"></span><br><span class="line"><span class="attr">CAP</span> <span class="string">定理：</span></span><br><span class="line"><span class="attr">强一致性C：等不同数据库数据一致时才响应用户！</span></span><br><span class="line"><span class="attr">高可用性A：数据库直接响应本数据库数据</span></span><br><span class="line"><span class="attr">分区容错性P：区间通信可能失败，（客观存在的）</span></span><br><span class="line"><span class="attr">比如，一台服务器放在上海，另一台服务器放在北京，这就是两个区，它们之间可能因网络问题无法通信。</span></span><br><span class="line"><span class="meta">这三个指标不可能同时做到。这个结论就叫做</span> <span class="string">CAP 定理。就看你侧重于可用性还是容错性！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">总结：加了事务的主方法内有引用的多个方法跟主方法不是同一个事务管理器，那么就需要分布式事务管理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">方案1</span> <span class="string">(普通的二段提交：业务执行，然后上报结果给协调器，根据协调器指示进行提交或者回滚</span></span><br><span class="line"><span class="attr">（一旦有一个事务错误，立即所有事务回滚，否则等全部事务成功后再提交）</span></span><br><span class="line"><span class="attr">（缺点就是系统延迟，性能下降）</span></span><br><span class="line"><span class="meta">方案2</span> <span class="string">：利用tcc（try confirm cancel）解决方案：(性能最好的分布式事务方式)</span></span><br><span class="line"><span class="attr">同一个事务管理器的事务执行业务后该提交提交，该回滚回滚，</span></span><br><span class="line"><span class="attr">如果有一个回滚了，那么其他提交了的事务就要做事务补偿！</span></span><br><span class="line"><span class="attr">方案3：AT模式（对TCC模式做了自动化处理的优化）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">一阶段：执行本地事务，并返回执行结果</span></span><br><span class="line"><span class="meta">-</span> <span class="string">二阶段：根据一阶段的结果，判断二阶段做法：提交或回滚（补偿）</span></span><br><span class="line"><span class="meta">在</span> <span class="string">AT 模式下，用户只需关注自己的“业务 SQL”，用户的 “业务 SQL” 作为一阶段，</span></span><br><span class="line"><span class="attr">Seata</span> <span class="string">框架会自动生成事务的二阶段提交和回滚操作。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">使用Seata</span> <span class="string">框架下的AT模式进行分布式事务控制，引入到我们的项目中！</span></span><br><span class="line"><span class="attr">1</span> <span class="string">官网下载Seata框架（Seata是一个面向服务编程框架）(下载解压即安装)</span></span><br><span class="line"><span class="attr">2</span> <span class="string">修改registry.conf 跟file.conf文件</span></span><br><span class="line"><span class="attr">registry.conf为了给seata服务指定我们整个项目的注册中心的配置文件</span></span><br><span class="line"><span class="meta">file.conf</span> <span class="string">是Seata服务的配置文件，给seata指定数据库，以及需要什么表，因此我们要在数据库建立对应库表。</span></span><br><span class="line"><span class="attr">3</span> <span class="string">启动Seata服务框架（运行.bat文件,）</span></span><br><span class="line"><span class="attr">4</span> <span class="string">改造原Order服务</span></span><br><span class="line"><span class="attr">（1）引入seata依赖</span></span><br><span class="line"><span class="attr">（2）application.yml中添加配置，定义事务组名称</span></span><br><span class="line"><span class="attr">（3）`resources`目录下放两个配置文件：`file.conf`和`registry.conf`</span></span><br><span class="line"><span class="attr">（4）对DataSource做代理</span></span><br><span class="line"><span class="attr">Seata的二阶段执行是通过拦截sql语句，分析语义来指定回滚策略，</span></span><br><span class="line"><span class="attr">因此需要对DataSource做代理。</span></span><br><span class="line"><span class="attr">我们在项目的`cn.itcast.order.config`包中，添加一个配置类</span></span><br><span class="line"><span class="attr">（5）添加事务注解</span></span><br><span class="line"><span class="attr">给事务发起者`order_service`的`OrderServiceImpl`中的`create()`方法</span></span><br><span class="line"><span class="attr">添加`@GlobalTransactional`注解，开启全局事务</span></span><br><span class="line"><span class="attr">5</span> <span class="string">改造Storage、Account服务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">引入依赖：与order-service一致，略</span></span><br><span class="line"><span class="meta">-</span> <span class="string">添加配置文件：与order-service一致，略</span></span><br><span class="line"><span class="meta">-</span> <span class="string">代理DataSource，我们的storage-service和account-service都没有用mybatis-plus，</span></span><br><span class="line"><span class="attr">所以配置要使用SqlSessionFactory：</span></span><br><span class="line"><span class="attr">另外，事务注解可以使用`@Transactionnal`，而不是`@GlobalTransactional`，</span></span><br><span class="line"><span class="attr">事务发起者才需要添加`@GlobalTransactional`。</span></span><br></pre></td></tr></table></figure><h1 id="1-微信支付简介"><a href="#1-微信支付简介" class="headerlink" title="1.微信支付简介"></a>1.微信支付简介</h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1.介绍"></a>1.1.介绍</h2><p>微信支付官方文档：<a href="https://pay.weixin.qq.com/index.php/core/home/login?return_url=/">https://pay.weixin.qq.com/index.php/core/home/login?return_url=%2F</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1555642281129.png" alt="1555642281129"></p><p>我们选择开发文档，而后进入选择页面：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1555642332763.png" alt="1555642332763"></p><p>选择native支付，就是扫码支付：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1527848368179.png" alt="1527848368179"></p><p>此处我们使用模式二来开发：</p><h2 id="1-2-开发流程"><a href="#1-2-开发流程" class="headerlink" title="1.2.开发流程"></a>1.2.开发流程</h2><p>模式二与模式一相比，流程更为简单，不依赖设置的回调支付URL。</p><p>商户后台系统先调用微信支付的统一下单接口，微信后台系统返回链接参数code_url；</p><p>商户后台系统将code_url值生成二维码图片，用户使用微信客户端扫码后发起支付。</p><p>注意：code_url有效期为2小时，过期后扫码不能再发起支付。 </p><p>流程图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1657197724(1).png" alt="1657197724(1)"></p><p>这里我们把商户（我们）要做的事情总结一下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1、商户生成订单</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2、商户调用微信下单接口，获取预交易的链接</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3、商户将链接生成二维码图片，展示给用户；</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4、支付结果通知：</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">微信异步通知商户支付结果，商户告知微信支付接收情况</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">商户如果没有收到通知，可以调用接口，查询支付状态</span></span><br><span class="line"><span class="meta">-</span> <span class="string">5、如果支付成功，发货，修改订单状态</span></span><br></pre></td></tr></table></figure><p>在前面的业务中，我们已经完成了：</p><ul><li>1、生成订单</li></ul><p>接下来，我们需要做的是：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">2、调用微信下单接口，生成支付交易链接。</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3、根据链接生成二维码图片</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4、接收到支付成功通知后，修改订单状态，如果没收到通知，也可以主动查询</span></span><br></pre></td></tr></table></figure><h1 id="2-统一下单（生成支付链接）"><a href="#2-统一下单（生成支付链接）" class="headerlink" title="2.统一下单（生成支付链接）"></a>2.统一下单（生成支付链接）</h1><p>按照上面的步骤分析，第一步是要生成支付链接。我们查看下微信官方文档</p><h2 id="2-1-API说明"><a href="#2-1-API说明" class="headerlink" title="2.1.API说明"></a>2.1.API说明</h2><p>在微信支付文档中，可以查询到下面的信息：</p><blockquote><p>请求路径</p></blockquote><p>POST，URL地址：<a href="https://api.mch.weixin.qq.com/pay/unifiedorder">https://api.mch.weixin.qq.com/pay/unifiedorder</a></p><blockquote><p>请求参数</p></blockquote><table><thead><tr><th align="left">字段名</th><th>变量名</th><th>必填</th><th>类型</th><th>示例值</th><th>描述</th></tr></thead><tbody><tr><td align="left">公众账号ID</td><td>appid</td><td>是</td><td>String(32)</td><td>wxd678efh56</td><td>微信支付分配的公众账号ID</td></tr><tr><td align="left">商户号</td><td>mch_id</td><td>是</td><td>String(32)</td><td>1230000109</td><td>微信支付分配的商户号</td></tr><tr><td align="left">随机字符串</td><td>nonce_str</td><td>是</td><td>String(32)</td><td>5K8264ILT</td><td>随机字符串，长度要求在32位以内。推荐<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_3">随机数生成算法</a></td></tr><tr><td align="left">签名</td><td>sign</td><td>是</td><td>String(32)</td><td>C380BEC2B</td><td>通过签名算法计算得出的签名值，详见<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_3">签名生成算法</a></td></tr><tr><td align="left">商品描述</td><td>body</td><td>是</td><td>String(128)</td><td>乐优手机</td><td>商品简单描述，该字段请按照规范传递，具体请见<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_2">参数规定</a></td></tr><tr><td align="left">商户订单号</td><td>out_trade_no</td><td>是</td><td>String(32)</td><td>20150806125</td><td>商户系统内部订单号，要求32个字符内，只能是数字、大小写字母_-|* 且在同一个商户号下唯一。详见<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_2">商户订单号</a></td></tr><tr><td align="left">标价金额</td><td>total_fee</td><td>是</td><td>Int</td><td>88</td><td>订单总金额，单位为分，详见<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_2">支付金额</a></td></tr><tr><td align="left">终端IP</td><td>spbill_create_ip</td><td>是</td><td>String(16)</td><td>123.12.12.123</td><td>APP和网页支付提交用户端ip，Native支付填调用微信支付API的机器IP。</td></tr><tr><td align="left">通知地址</td><td>notify_url</td><td>是</td><td>String(256)</td><td><a href="http://www.weixin.qq.com/wxpay/pay.php">http://www.weixin.qq.com/wxpay/pay.php</a></td><td>异步接收微信支付结果通知的回调地址，通知url必须为外网可访问的url，不能携带参数。</td></tr><tr><td align="left">交易类型</td><td>trade_type</td><td>是</td><td>String(16)</td><td>NATIVE</td><td>JSAPI 公众号支付；NATIVE 扫码支付；APP APP支付说明详见<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_2">参数规定</a></td></tr></tbody></table><p>这些参数大致分成3类：</p><ul><li><p>1 appid、mch_id、spbill_create_ip、notify_url、trade_type：是商家自己的信息或固定数据，可以<strong>提前配置，因此无需每次请求单独配置，而是统一设置好</strong>即可，</p></li><li><p>2  nonce_str、sign：是为了保证数据安全而添加的验证数据，根据算法去生成，每次请求自动生成即可。</p></li><li><p>3  body、out_trade_no、total_fee：订单相关信息，需要我们自己填写。</p></li></ul><h2 id="2-2-微信SDK"><a href="#2-2-微信SDK" class="headerlink" title="2.2.微信SDK"></a>2.2.微信SDK</h2><h3 id="2-2-1-下载"><a href="#2-2-1-下载" class="headerlink" title="2.2.1.下载"></a>2.2.1.下载</h3><p>虽然请求参数比较复杂，但官方已经提供了SDK，供我们使用：<img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1535979973318.png" alt="1535979973318"></p><p>我也已经在课前资料提供：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1535980012593.png" alt="1535980012593"></p><p>微信没有提供maven仓库坐标，因此我们必须下载使用，建议使用课前资料中，我提供给大家的SDK，其中做了一些必要的设置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1555646853775.png" alt="1555646853775"> </p><h3 id="2-2-2-WXPay工具"><a href="#2-2-2-WXPay工具" class="headerlink" title="2.2.2.WXPay工具"></a>2.2.2.WXPay工具</h3><p>微信SDK提供了一个统一的微信支付工具类：WXPay：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1555646424254.png" alt="1555646424254"></p><p>其中包含这样一些方法：</p><p>com.github.wxpay.sdk.WXPay类下提供了对应的方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>microPay</td><td>刷卡支付</td></tr><tr><td><code>unifiedOrder</code></td><td><strong>统一下单</strong></td></tr><tr><td>orderQuery</td><td>查询订单</td></tr><tr><td>reverse</td><td>撤销订单</td></tr><tr><td>closeOrder</td><td>关闭订单</td></tr><tr><td>refund</td><td>申请退款</td></tr><tr><td>refundQuery</td><td>查询退款</td></tr><tr><td>downloadBill</td><td>下载对账单</td></tr><tr><td>report</td><td>交易保障</td></tr><tr><td>shortUrl</td><td>转换短链接</td></tr><tr><td>authCodeToOpenid</td><td>授权码查询openid</td></tr></tbody></table><ul><li>注意:<ul><li>参数为<code>Map&lt;String, String&gt;</code>对象，返回类型也是<code>Map&lt;String, String&gt;</code></li><li>方法内部会将参数转换成含有<code>appid</code>、<code>mch_id</code>、<code>nonce_str</code>、<code>sign_type</code>和<code>sign</code>的XML</li><li>通过HTTPS请求得到返回数据后会对其做必要的处理（例如验证签名，签名错误则抛出异常）</li></ul></li></ul><p>我们主要关注其中的unifiedOrder方法，统一下单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作用：统一下单&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 场景：公共号支付、扫码支付、APP支付</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reqData 向wxpay post的请求数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> API返回数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">unifiedOrder</span><span class="params">(Map&lt;String, String&gt; reqData)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.unifiedOrder(reqData, config.getHttpConnectTimeoutMs(), <span class="keyword">this</span>.config.getHttpReadTimeoutMs());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的请求参数是：Map&lt;String, String&gt; reqData，就是官方API说明中的请求参数了，不过并不需要我们填写所有参数，而只需要下面的：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">body：商品描述</span></span><br><span class="line"><span class="meta">-</span> <span class="string">out_trade_no：订单编号</span></span><br><span class="line"><span class="meta">-</span> <span class="string">total_fee：订单应支付金额</span></span><br><span class="line"><span class="meta">-</span> <span class="string">spbill_create_ip：设备IP</span></span><br><span class="line"><span class="meta">-</span> <span class="string">notify_url：回调地址</span></span><br><span class="line"><span class="meta">-</span> <span class="string">trade_type：交易类型</span></span><br></pre></td></tr></table></figure><p>剩下的：<code>appid</code>、<code>mch_id</code>、<code>nonce_str</code>、<code>sign_type</code>和<code>sign</code>参数都有WXPay对象帮我们设置，那么问题来了：这些参数数据WXPay是怎么拿到的呢？</p><p>其中，</p><ul><li>nonce_str：是随机字符串，因此由WXPay随机生成，</li><li>sign_type：是签名算法，由WXPay指定，默认是HMACSHA256；</li><li>sign：是签名，有签名算法结合密钥加密而来，因此这里的关键是密钥：key</li><li>appid、mch_id是商家信息，需要配置</li></ul><p>也就是说，这里需要配置的包括：appid、mch_id、密钥key。这些从哪里来呢？</p><p>看下WXPay的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WXPay</span><span class="params">(<span class="keyword">final</span> WXPayConfig config)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(config, <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要一个WXPayConfig对象，显然是配置对象。</p><h3 id="2-2-3-WXPayConfig配置"><a href="#2-2-3-WXPayConfig配置" class="headerlink" title="2.2.3..WXPayConfig配置"></a>2.2.3..WXPayConfig配置</h3><p>WXPay依赖于WXPayConfig进行配置，那么WXPayConfig是什么呢？</p><p>看下源码中的关键部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WXPayConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 App ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> App ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getAppID</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Mch ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Mch ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getMchID</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 API 密钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> API密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getKey</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 。。。省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这不就是WXPay中需要配置的3个属性嘛，当我们实现这个类，并且给出其中的值，把WXPayConfig传递给WXPay时，WXPay就会获取到这些数据:</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1555647829543.png" alt="1555647829543"> </p><p>当我们利用WXPay发送请求时，WXPay就会帮我们封装到请求参数中：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1555647879979.png" alt="1555647879979"></p><p>而在提供给大家的SDK中，就编写了一个WXPayConfig的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.wxpay.sdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXPayConfigImpl</span> <span class="keyword">extends</span> <span class="title">WXPayConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公众账号ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String appID;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商户号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mchID;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成签名的密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付回调地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String notifyUrl;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 终端IP，当前微服务IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String spbillCreateIp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getCertStream</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IWXPayDomain <span class="title">getWXPayDomain</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> WXPayDomainSimpleImpl.instance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个WxPayConfig的实现类中，不仅有刚才看到的3个参数，而且还把请求参数中的：notifyUrl、spbillCreateIp都配置进去了，因为这几个值也都是需要配置到配置文件中的。</p><h2 id="2-3-整合到项目中"><a href="#2-3-整合到项目中" class="headerlink" title="2.3.整合到项目中"></a>2.3.整合到项目中</h2><h3 id="2-3-1-打包SDK"><a href="#2-3-1-打包SDK" class="headerlink" title="2.3.1.打包SDK"></a>2.3.1.打包SDK</h3><p>首先，把我提供的SDK打包并安装到本地的maven仓库，方便在项目中使用。</p><p>进入提供的SDK的项目目录，然后打开黑窗口，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn source:jar install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1555648127151.png" alt="1555648127151"></p><p>然后进入本地仓库查看：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1555648204589.png" alt="1555648204589"> </p><h3 id="2-3-2-配置WXPay"><a href="#2-3-2-配置WXPay" class="headerlink" title="2.3.2.配置WXPay"></a>2.3.2.配置WXPay</h3><p>在在<code>ly-trade</code>的中的pom.xml中引入坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.wxpay<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wxpay-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们将这些WXPayConfig中的属性定义到<code>ly-trade</code>的application.yml中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">pay:</span></span><br><span class="line">    <span class="attr">wx:</span></span><br><span class="line">      <span class="attr">appID:</span> <span class="string">wx8397f8696b538317</span></span><br><span class="line">      <span class="attr">mchID:</span> <span class="number">1473426802</span></span><br><span class="line">      <span class="attr">key:</span> <span class="string">T6m9iK73b0kn9g5v426MKfHQH7X8rKwb</span></span><br><span class="line">      <span class="attr">notifyUrl:</span> <span class="string">http://api.leyou.com/trade/pay/wx/notify</span></span><br><span class="line">      <span class="attr">spbillCreateIp:</span> <span class="number">123.12</span><span class="number">.12</span><span class="number">.123</span></span><br></pre></td></tr></table></figure><p>将这些属性注入到<code>WXPayConfigImpl</code>中，在<code>ly-trade</code>的<code>com.leyou.trade.config</code>包中添加一个配置类<code>PayConfiguration</code>，将<code>WXPayConfigImpl</code>配置为一个Bean，并注入相关属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.wxpay.sdk.WXPayConfigImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;ly.pay.wx&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WXPayConfigImpl <span class="title">payConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WXPayConfigImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-支付工具类"><a href="#2-3-4-支付工具类" class="headerlink" title="2.3.4.支付工具类"></a>2.3.4.支付工具类</h3><p>我们先初始化WXPay对象，并注入到Spring容器中.</p><p>在<code>ly-trade</code>的<code>com.leyou.trade.config</code>包中的配置类<code>PayConfiguration</code>中添加一个@Bean，注册<code>WXPay</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.wxpay.sdk.WXPay;</span><br><span class="line"><span class="keyword">import</span> com.github.wxpay.sdk.WXPayConfigImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;ly.pay.wx&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WXPayConfigImpl <span class="title">payConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WXPayConfigImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册WXPay对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> payConfig 支付相关配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> WXPay对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 连结WX失败时用到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WXPay <span class="title">wxPay</span><span class="params">(WXPayConfigImpl payConfig)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WXPay(payConfig, payConfig.getNotifyUrl());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要把统一下单的代码封装为一个工具类，不过其中又很多字符串常量，需要定义出来，我们在<code>ly-trade</code>的<code>com.leyou.trade.constants</code>包中，添加一个常量类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PayConstants</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统一的商品描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ORDER_DESC = <span class="string">&quot;乐优商城商品&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统一下单支付的支付类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String UNIFIED_ORDER_TRADE_TYPE = <span class="string">&quot;NATIVE&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败的CODE</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FAIL = <span class="string">&quot;FAIL&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通信标示的KEY</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RETURN_CODE_KEY = <span class="string">&quot;return_code&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务标示的KEY</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESULT_CODE_KEY = <span class="string">&quot;result_code&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常消息的KEY</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ERROR_CODE_KEY = <span class="string">&quot;err_code_des&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单编号的KEY</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ORDER_NO_KEY = <span class="string">&quot;out_trade_no&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付金额的KEY</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOTAL_FEE_KEY = <span class="string">&quot;total_fee&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付链接的KEY</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAY_URL_KEY = <span class="string">&quot;code_url&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>ly-trade</code>的<code>com.leyou.trade.utils</code>包中添加一个工具类<code>PayHelper</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.wxpay.sdk.WXPay;</span><br><span class="line"><span class="keyword">import</span> com.github.wxpay.sdk.WXPayConfigImpl;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WXPay wxPay;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WXPayConfigImpl payConfig;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PayHelper</span><span class="params">(WXPay wxPay, WXPayConfigImpl payConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wxPay = wxPay;</span><br><span class="line">        <span class="keyword">this</span>.payConfig = payConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayUrl</span><span class="params">(Long orderId, Long totalFee, String desc)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.准备请求参数：</span></span><br><span class="line">        Map&lt;String, String&gt; data = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;body&quot;</span>, desc);</span><br><span class="line">        data.put(<span class="string">&quot;out_trade_no&quot;</span>, orderId.toString());</span><br><span class="line">        data.put(<span class="string">&quot;total_fee&quot;</span>, totalFee.toString());</span><br><span class="line">        data.put(<span class="string">&quot;spbill_create_ip&quot;</span>, payConfig.getSpbillCreateIp());</span><br><span class="line">        data.put(<span class="string">&quot;trade_type&quot;</span>, payConfig.getTradeType());  <span class="comment">// 此处指定为扫码支付</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2.下单################################################</span></span><br><span class="line">            Map&lt;String, String&gt; resp = wxPay.unifiedOrder(data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.通信校验</span></span><br><span class="line">            checkReturnCode(resp);</span><br><span class="line">            <span class="comment">// 4.业务校验</span></span><br><span class="line">            checkResultCode(resp);</span><br><span class="line">            <span class="comment">// 5.签名校验</span></span><br><span class="line">            checkResponseSignature(resp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6.获取支付链接</span></span><br><span class="line">            String url = resp.get(<span class="string">&quot;code_url&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isBlank(url))&#123;</span><br><span class="line">                <span class="comment">// url为空</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;支付链接为空！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;微信支付统一下单失败，原因：&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkResponseSignature</span><span class="params">(Map&lt;String, String&gt; resp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isValid = wxPay.isResponseSignatureValid(resp);</span><br><span class="line">            <span class="keyword">if</span>(!isValid)&#123;</span><br><span class="line">                <span class="comment">// 签名无效</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;签名错误！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;签名错误！&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkResultCode</span><span class="params">(Map&lt;String, String&gt; resp)</span> </span>&#123;</span><br><span class="line">        String resultCode = resp.get(<span class="string">&quot;result_code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;FAIL&quot;</span>.equals(resultCode))&#123;</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(resp.get(<span class="string">&quot;err_code_des&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkReturnCode</span><span class="params">(Map&lt;String, String&gt; resp)</span> </span>&#123;</span><br><span class="line">        String returnCode = resp.get(<span class="string">&quot;return_code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;FAIL&quot;</span>.equals(returnCode))&#123;</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;通信失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4-下单并生成支付链接"><a href="#2-4-下单并生成支付链接" class="headerlink" title="2.4.下单并生成支付链接"></a>2.4.下单并生成支付链接</h2><p>在订单支付页面，会向后台发起请求，查询支付的URL地址：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/image-20200328211750014.png" alt="image-20200328211750014"> </p><p>我们需要编写controller，来实现这个功能：</p><ul><li>请求方式：GET</li><li>请求路径：/pay/url/{id}</li><li><strong>请求参数：id，订单的编号</strong></li><li>返回结果：url地址</li></ul><p>我们在<code>ly-trade</code>的<code>com.leyou.trade.web</code>包中创建一个<code>PayController</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;pay&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PayController</span><span class="params">(OrderService orderService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据订单编号创建支付链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderId 订单编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> #############################支付链接。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/url/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">getPayUrl</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(orderService.getPayUrl(orderId));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在ly-trade的<code>com.leyou.trade.service</code>包的<code>OrderService</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getPayUrl</span><span class="params">(Long orderId)</span></span>;</span><br></pre></td></tr></table></figure><p>我们在ly-trade的<code>com.leyou.trade.service.impl</code>包的<code>OrderServiceImpl</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getPayUrl</span><span class="params">(Long orderId)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 根据id查询订单</span></span><br><span class="line">       Order order = getById(orderId);</span><br><span class="line">       <span class="comment">// 判断是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (order == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;订单编号错误，订单不存在！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 判断订单状态是否是未付款</span></span><br><span class="line">       <span class="keyword">if</span> (order.getStatus() != OrderStatus.INIT) &#123;</span><br><span class="line">           <span class="comment">// 订单已经关闭或者已经支付，无需再次获取支付链接</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;订单已经支付或者关闭！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// TODO 尝试读取redis中的支付url</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取订单金额</span></span><br><span class="line">       Long actualFee = order.getActualFee();</span><br><span class="line">       <span class="comment">// 统一下单，获取支付链接</span></span><br><span class="line">       String url = payHelper.getPayUrl(orderId, <span class="number">1L</span><span class="comment">/*actualFee*/</span>, PayConstants.ORDER_DESC);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">// TODO 把支付的url缓存在redis中，2小时有效期</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 返回支付链接</span></span><br><span class="line">       <span class="keyword">return</span> url;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>页面响应结果：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1536017643922.png" alt="1536017643922"></p><h2 id="生成支付二维码url总结："><a href="#生成支付二维码url总结：" class="headerlink" title="生成支付二维码url总结："></a>生成支付二维码url总结：</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">下载微信sdk，并且安装到本地maven仓库</span></span><br><span class="line"><span class="attr">2</span> <span class="string">关注微信sdk里面的WXPay类，里面有好多方法，</span></span><br><span class="line"><span class="meta">我们这里只关心统一下单方法：</span> <span class="string">unifiedOrder</span></span><br><span class="line"><span class="attr">unifiedOrder方法会给我们生成二维码url</span></span><br><span class="line"><span class="attr">3</span> <span class="string">定义了PayHelper类工具，里面有自定义的getPayUrl方法，</span></span><br><span class="line"><span class="meta">getPayUrl里面调用WXPay的unifiedOrder得到</span> <span class="string">Map&lt;String, String&gt;对象</span></span><br><span class="line"><span class="attr">map集合对象.get(&quot;code_url&quot;)可以得到支付链接url（二维码链接）。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">具体代码逻辑：</span></span><br><span class="line"></span><br><span class="line"><span class="attr">1</span> <span class="string">前端携带订单id访问后台，后台的web层提供接口方法，</span></span><br><span class="line"><span class="attr">2</span> <span class="string">后台web调用OrderService接口的String getPayUrl(Long orderId);</span></span><br><span class="line"><span class="attr">3</span> <span class="string">OrderService实现类实现getPayUrl方法：</span></span><br><span class="line"><span class="attr">根据订单id查询订单信息（其实只需要总价格信息就够了）</span></span><br><span class="line"><span class="attr">然后调用payHelper.getPayUrl（参数：订单id，总价格，描述信息）</span></span><br><span class="line"><span class="attr">返回支付链接url（二维码链接）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">很多固定流程配置（包括自定义的配置类等）请参考上面笔记。</span></span><br></pre></td></tr></table></figure><h1 id="3-生成支付二维码（了解）"><a href="#3-生成支付二维码（了解）" class="headerlink" title="3.生成支付二维码（了解）"></a>3.生成支付二维码（了解）</h1><h2 id="3-1-什么是二维码"><a href="#3-1-什么是二维码" class="headerlink" title="3.1.什么是二维码"></a>3.1.什么是二维码</h2><p>二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型。</p><p>二维条码/二维码（2-dimensional bar code）是用某种特定的几何图形按一定规律在平面（二维方向上）分布的黑白相间的图形记录数据符号信息的；在代码编制上巧妙地利用构成计算机内部逻辑基础的“0”、“1”比特流的概念，使用若干个与二进制相对应的几何形体来表示文字数值信息，通过图象输入设备或光电扫描设备自动识读以实现信息自动处理：它具有条码技术的一些共性：每种码制有其特定的字符集；每个字符占有一定的宽度；具有一定的校验功能等。同时还具有对不同行的信息自动识别功能、及处理图形旋转变化点。</p><h2 id="3-2-二维码优势"><a href="#3-2-二维码优势" class="headerlink" title="3.2.二维码优势"></a>3.2.二维码优势</h2><ul><li><p>信息容量大, 可以容纳多达1850个大写字母或2710个数字或500多个汉字</p></li><li><p>应用范围广, 支持文字,声音,图片,指纹等等…</p></li><li><p>容错能力强, 即使图片出现部分破损也能使用</p></li><li><p>成本低, 容易制作</p></li></ul><h2 id="3-3-二维码容错级别"><a href="#3-3-二维码容错级别" class="headerlink" title="3.3.二维码容错级别"></a>3.3.二维码容错级别</h2><ul><li><p>L级（低） 7％的码字可以被恢复。</p></li><li><p>M级（中） 15％的码字可以被恢复。</p></li><li><p>Q级（四分）25％的码字可以被恢复。</p></li><li><p>H级（高）30％ 的码字可以被恢复。</p></li></ul><h2 id="3-4-二维码生成插件qrious"><a href="#3-4-二维码生成插件qrious" class="headerlink" title="3.4.二维码生成插件qrious"></a>3.4.二维码生成插件qrious</h2><p>qrious是一款基于HTML5 Canvas的纯JS二维码生成插件。通过qrious.js可以快速生成各种二维码，你可以控制二维码的尺寸颜色，还可以将生成的二维码进行Base64编码。<a href="https://github.com/davidshimjs/qrcodejs">官网</a></p><p>qrious.js二维码插件的可用配置参数如下：</p><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>background</td><td>String</td><td>“white”</td><td>二维码的背景颜色。</td></tr><tr><td>foreground</td><td>String</td><td>“black”</td><td>二维码的前景颜色。</td></tr><tr><td>level</td><td>String</td><td>“L”</td><td>二维码的误差校正级别(L, M, Q, H)。</td></tr><tr><td>mime</td><td>String</td><td>“image/png”</td><td>二维码输出为图片时的MIME类型。</td></tr><tr><td>size</td><td>Number</td><td>100</td><td>二维码的尺寸，单位像素。</td></tr><tr><td>value</td><td>String</td><td>“”</td><td>需要编码为二维码的值</td></tr></tbody></table><p>课前资料中给出的案例可以直接生成二维码：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1535987680862.png" alt="1535987680862"></p><p>点击打开：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1528797240423.png"> </p><h2 id="3-5-生成二维码"><a href="#3-5-生成二维码" class="headerlink" title="3.5.生成二维码"></a>3.5.生成二维码</h2><p>我们的前端页面已经引用了这个JS组件：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1528362377494.png" alt="1528362377494"></p><p>页面定义一个div，用于展示二维码：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1528362023061.png" alt="1528362023061"></p><p>然后获取到付款链接后，根据链接生成二维码：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1528362420151.png" alt="1528362420151"></p><p>刷新页面，查看效果：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1528362464276.png" alt="1528362464276"></p><p>此时，客户用手机扫描二维码，可以看到付款页面。</p><h1 id="4-支付结果通知"><a href="#4-支付结果通知" class="headerlink" title="4.支付结果通知"></a>4.支付结果通知</h1><p>支付以后，我们<strong>后台需要修改订单状态</strong>。我们怎么得知有没有支付成功呢？</p><p>在我们的请求参数中，有一个notify_url的参数，是支付的回调地址。当用户支付成功后，微信会主动访问这个地址，并携带支付结果信息。</p><p>那么，这个notify_url该怎么用呢？</p><h2 id="4-1-notify-url"><a href="#4-1-notify-url" class="headerlink" title="4.1.notify_url"></a>4.1.notify_url</h2><h3 id="1）什么是notify-url"><a href="#1）什么是notify-url" class="headerlink" title="1）什么是notify_url"></a>1）什么是notify_url</h3><p>参数中有一个非常重要的，叫做notify_url的：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1535981510532.png" alt="1535981510532"></p><p>基于上文的介绍我们知道，这个地址是在支付成功后的异步结果通知。官网介绍如下：</p><p>支付完成后，微信会把相关支付结果和用户信息发送给商户，商户需要接收处理，并返回应答。</p><p>所以，此处的地址必须是一个外网可访问地址，而且我们要定义好回调的处理接口。</p><p><a href="http://api.leyou.com/trade/pay/wx/notify">http://api.leyou.com/trade/pay/wx/notify</a></p><h3 id="2）内网穿透"><a href="#2）内网穿透" class="headerlink" title="2）内网穿透"></a>2）内网穿透</h3><p>此处我们肯定不能写：<a href="http://api.leyou.com，这个域名未经备案，是不被识别的。如何才能获取一个能够外网访问的域名呢？">http://api.leyou.com，这个域名未经备案，是不被识别的。如何才能获取一个能够外网访问的域名呢？</a></p><p>我们可以通过内网穿透来实现，那么什么是内网穿透呢？</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1535984453478.png" alt="1535984453478"></p><p><strong>简单来说内网穿透的目的是：让外网能访问你本地的应用，例如在外网打开你本地<a href="http://127.0.0.1指向的web站点./">http://127.0.0.1指向的Web站点。</a></strong></p><p>这里我们使用一个免费的内网穿透工具：Natapp：<a href="https://natapp.cn/">NATAPP官网</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1535984650173.png" alt="1535984650173"></p><p>详细教程在这里：<a href="https://natapp.cn/article/natapp_newbie">一分钟的natapp快速新手教程</a></p><p>启动后的样子：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1555650481104.png" alt="1555650481104"></p><p>比如此处，我使用的natapp得到的域名是：<a href="http://ff7hgc.natappfree.cc，并且我设置指向到`127.0.0.1:10010`位置，也就是我的网关服务。">http://ff7hgc.natappfree.cc，并且我设置指向到`127.0.0.1:10010`位置，也就是我的网关服务。</a></p><h3 id="3）配置回调地址"><a href="#3）配置回调地址" class="headerlink" title="3）配置回调地址"></a>3）配置回调地址</h3><p>设置内网穿透地址到配置文件application.yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">pay:</span></span><br><span class="line">    <span class="attr">wx:</span></span><br><span class="line">      <span class="attr">notifyUrl:</span> <span class="string">http://vjxbjy.natappfree.cc</span> <span class="string">/trade/pay/wx/notify</span></span><br></pre></td></tr></table></figure><p>WxPayConfigImpl中本来就有notifyURL属性，因此会被自动注入。</p><h3 id="4）用户拦截器放行"><a href="#4）用户拦截器放行" class="headerlink" title="4）用户拦截器放行"></a>4）用户拦截器放行</h3><p>请求进入ly-trade以后，会有一个用户拦截器，尝试获取登录用户，但是微信回调肯定是未登录的，需要放行。</p><p>修改application.yml，加入一个放行路径即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">trade-service</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="number">1234</span></span><br><span class="line">    <span class="attr">excludeFilterPaths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/pay/wx/notify</span></span><br></pre></td></tr></table></figure><h2 id="4-2-支付结果通知API"><a href="#4-2-支付结果通知API" class="headerlink" title="4.2.支付结果通知API"></a>4.2.支付结果通知API</h2><p>来看官网关于结果通知的介绍：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_7&amp;index=8">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_7&amp;index=8</a></p><blockquote><p>应用场景</p></blockquote><p><strong>支付完成后，微信会把相关支付结果和用户信息发送给商户（后端），商户需要接收处理，并返回应答。</strong></p><p>对后台通知交互时，如果微信收到商户的应答不是成功或超时，微信认为通知失败，微信会通过一定的策略定期重新发起通知，尽可能提高通知的成功率，但微信不保证通知最终能成功。 （通知频率为15/15/30/180/1800/1800/1800/1800/3600，单位：秒）</p><p><strong>注意：同样的通知可能会多次发送给商户系统。商户系统必须能够正确处理重复的通知。</strong></p><p>推荐的做法是，当收到通知进行处理时，首先检查对应业务数据的状态，判断该通知是否已经处理过，如果没有处理过再进行处理，如果处理过直接返回结果成功。在对业务数据进行状态检查和处理之前，要采用数据锁进行并发控制，以避免函数重入造成的数据混乱。</p><p><strong>特别提醒：商户系统对于支付结果通知的内容一定要做<code>签名验证,并校验返回的订单金额是否与商户侧的订单金额一致</code>，防止数据泄漏导致出现“假通知”，造成资金损失。</strong></p><p>支付完成后，微信服务会自动向<code>notify_url</code>地址发起POST请求，请求参数是xml格式：</p><table><thead><tr><th>字段名</th><th>变量名</th><th>必填</th><th>类型</th><th>示例值</th><th>描述</th></tr></thead><tbody><tr><td>返回状态码</td><td>return_code</td><td>是</td><td>String(16)</td><td>SUCCESS</td><td>SUCCESS/FAIL此字段是通信标识，非交易标识，交易是否成功需要查看trade_state来判断</td></tr><tr><td>返回信息</td><td>return_msg</td><td>是</td><td>String(128)</td><td>OK</td><td>当return_code为FAIL时返回信息为错误原因 ，例如签名失败参数格式校验错误</td></tr></tbody></table><p>通信成功，会返回下面信息：</p><table><thead><tr><th>签名</th><th>sign</th><th>是</th><th>String(32)</th><th>C380BEC2BFD..</th><th>名，详见<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_3">签名算法</a></th></tr></thead><tbody><tr><td>签名类型</td><td>sign_type</td><td>否</td><td>String(32)</td><td>HMAC-SHA256</td><td>签名类型，目前支持HMAC-SHA256和MD5，默认为MD5</td></tr><tr><td>业务结果</td><td>result_code</td><td>是</td><td>String(16)</td><td>SUCCESS</td><td>SUCCESS/FAIL</td></tr><tr><td>错误代码</td><td>err_code</td><td>否</td><td>String(32)</td><td>SYSTEMERROR</td><td>错误返回的信息描述</td></tr><tr><td>错误代码描述</td><td>err_code_des</td><td>否</td><td>String(128)</td><td>系统错误</td><td>错误返回的信息描述</td></tr><tr><td>用户标识</td><td>openid</td><td>是</td><td>String(128)</td><td>wxd930ea54f</td><td>用户在商户appid下的唯一标识</td></tr><tr><td>交易类型</td><td>trade_type</td><td>是</td><td>String(16)</td><td>JSAPI</td><td>JSAPI、NATIVE、APP</td></tr><tr><td>订单金额</td><td>total_fee</td><td>是</td><td>Int</td><td>100</td><td>订单总金额，单位为分</td></tr><tr><td>现金支付金额</td><td>cash_fee</td><td>是</td><td>Int</td><td>100</td><td>现金支付金额订单现金支付金额，详见<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_2">支付金额</a></td></tr><tr><td>微信支付订单号</td><td>transaction_id</td><td>是</td><td>String(32)</td><td>121775250120</td><td>微信支付订单号</td></tr><tr><td>商户订单号</td><td>out_trade_no</td><td>是</td><td>String(32)</td><td>12123212112</td><td>商户系统内部订单号，要求32个字符内，只能是数字、大小写字母_-|*@ ，且在同一个商户号下唯一。</td></tr></tbody></table><p>我们需要返回给微信的结果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">return_code</span>&gt;</span>&lt;![CDATA[SUCCESS]]&gt;<span class="tag">&lt;/<span class="name">return_code</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">return_msg</span>&gt;</span>&lt;![CDATA[OK]]&gt;<span class="tag">&lt;/<span class="name">return_msg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-编写回调接口"><a href="#4-3-编写回调接口" class="headerlink" title="4.3.编写回调接口"></a>4.3.编写回调接口</h2><h3 id="4-3-1-回调接口分析"><a href="#4-3-1-回调接口分析" class="headerlink" title="4.3.1.回调接口分析"></a>4.3.1.回调接口分析</h3><p>先分析接口需要的四个数据：</p><ul><li><p>请求方式：官方文档虽然没有明说，但是测试得出是POST请求</p></li><li><p>请求路径：我们之前指定的notify_url的路径是：/pay/wx/notify</p></li><li><p>请求参数：是xml格式数据，包括支付的结果和状态</p></li><li><p>返回结果：也是xml，表明是否成功，格式如下：</p><ul><li>```xml<xml>  <return_code>SUCCESS></return_code>  <return_msg>OK</return_msg></xml><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.3.2.返回值类型</span><br><span class="line"></span><br><span class="line">返回结果需要定义一个DTO表示，我们在`com.leyou.trade.dto`包中定义：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.leyou.trade.dto;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">public class PayResultDTO &#123;</span><br><span class="line">    private String returnCode = &quot;SUCCESS&quot;;</span><br><span class="line">    private String returnMsg = &quot;OK&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>因为要接收xml格式数据，因此我们需要引入解析xml的依赖，在<code>ly-trade</code>的pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过，DTO在转换为xml时，标签名需要通过注解方式来指定，因此实体类需要修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JacksonXmlRootElement(localName = &quot;xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayResultDTO</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(localName = &quot;return_code&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String returnCode = <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(localName = &quot;return_msg&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String returnMsg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解说明：</p><ul><li><code>@JacksonXmlRootElement(localName = &quot;xml&quot;)</code>：指定生成xml的根标签</li><li><code>@JacksonXmlProperty(localName = &quot;return_code&quot;)</code>：指定某个字段对应的标签</li></ul><h3 id="4-3-3-业务代码"><a href="#4-3-3-业务代码" class="headerlink" title="4.3.3.业务代码"></a>4.3.3.业务代码</h3><p>然后在<code>ly-trade</code>的<code>com.leyou.trade.web</code>包中的<code>PayController</code>中编写回调接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理微信的异步通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 通知内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//produces = &quot;application/xml&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/wx/notify&quot;, produces = MediaType.APPLICATION_XML_VALUE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;PayResultDTO&gt; <span class="title">handleWxNotify</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; data)</span></span>&#123;</span><br><span class="line">    orderService.handleNotify(data);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> PayResultDTO());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在ly-trade的<code>com.leyou.trade.service</code>包的<code>OrderService</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleNotify</span><span class="params">(Map&lt;String, String&gt; data)</span></span>;</span><br></pre></td></tr></table></figure><p>我们在ly-trade的<code>com.leyou.trade.service.impl</code>包的<code>OrderServiceImpl</code>中添加方法：</p><p>service中需要完成下列代码；</p><ul><li><p>业务标示判断</p></li><li><p>签名校验</p></li><li><p>数据校验</p><ul><li>订单号码校验</li><li>订单金额校验</li></ul></li><li><p>更新订单状态（需要保证幂等）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleNotify</span><span class="params">(Map&lt;String, String&gt; data)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 1.业务标示校验</span></span><br><span class="line">       payHelper.checkResultCode(data);</span><br><span class="line">       <span class="comment">// 2.签名校验</span></span><br><span class="line">       payHelper.checkResponseSignature(data);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3.订单状态校验（保证幂等，防止重复通知）</span></span><br><span class="line">       String outTradeNo = data.get(ORDER_NO_KEY);</span><br><span class="line">       String totalFee = data.get(TOTAL_FEE_KEY);</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isBlank(outTradeNo) || StringUtils.isBlank(totalFee)) &#123;</span><br><span class="line">           <span class="comment">// 数据有误</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;响应数据有误，订单金额或编号为空！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       Long orderId = Long.valueOf(outTradeNo);</span><br><span class="line">       Order order = getById(orderId);</span><br><span class="line">       <span class="keyword">if</span> (!order.getStatus().equals(OrderStatus.INIT)) &#123;</span><br><span class="line">           <span class="comment">// 说明订单已经支付过了，属于重复通知，直接返回</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 4.订单金额校验</span></span><br><span class="line">       Long total = Long.valueOf(totalFee);</span><br><span class="line">       <span class="keyword">if</span> (!total.equals(<span class="number">1L</span><span class="comment">/*order.getActualFee()*/</span>)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;订单金额有误，我要报警了！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 5.修改订单状态，更新状态和支付时间两个字段</span></span><br><span class="line">       update().set(<span class="string">&quot;status&quot;</span>, OrderStatus.PAY_UP.getValue()).set(<span class="string">&quot;pay_time&quot;</span>, <span class="keyword">new</span> Date())</span><br><span class="line">               <span class="comment">// 条件包括订单id和订单状态必须为1，乐观锁保证幂等</span></span><br><span class="line">               .eq(<span class="string">&quot;order_id&quot;</span>, orderId).eq(<span class="string">&quot;status&quot;</span>, OrderStatus.INIT.getValue()).update();</span><br><span class="line">       log.info(<span class="string">&quot;处理微信支付通知成功！&#123;&#125;&quot;</span>, data);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="订单确认回调总结："><a href="#订单确认回调总结：" class="headerlink" title="订单确认回调总结："></a>订单确认回调总结：</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">支付确认：</span></span><br><span class="line"><span class="attr">支付完成后，微信服务会自动向`notify_url`地址发起POST请求，进行回调通知</span></span><br><span class="line"><span class="attr">也就是说，支付成功后支付系统会自动返回“支付成功信息”给商户，也就是返回“支付成功信息”给后端</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">在统一下单时在trade微服的配置文件中已经配置好了notifyUrl</span>   <span class="string">也就是回调信息要发给的对象</span></span><br><span class="line"><span class="attr">ly</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">pay</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">wx</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">notifyUrl</span>: <span class="string">http://api.leyou.com/trade/pay/wx/notify</span></span><br><span class="line">    <span class="attr">但是我们都是在局域网进行微服务部署的，外网访问不了，</span></span><br><span class="line">    <span class="attr">所以说支付系统在回调时访问不到我们的后台</span></span><br><span class="line">    <span class="attr">因此要做内网穿透（用一个外网域名映射到我们局域网ip+端口）</span></span><br><span class="line">    <span class="meta">我们项目是用</span> <span class="string">外网域名来映射 项目的网关ip+端口</span></span><br><span class="line"><span class="meta">所以notifyUrl配置改为为</span>:<span class="string">http://vjxbjy.natappfree.cc /trade/pay/wx/notify</span></span><br><span class="line"></span><br><span class="line"><span class="attr">想一下为什么微信支付系统可以知道回调地址notifyUrl？？？</span></span><br><span class="line"><span class="attr">因为我们在生成二维码url时需要notifyUrl等等等很多信息，这些信息都将包含在二维码当中</span></span><br><span class="line"><span class="attr">微信用户扫码后提交给支付系统也会携带这些信息，所以支付系统当然知道要回调给谁啦</span></span><br><span class="line"><span class="attr">再好奇想一想，微信支付系统收取平台费用后，如何将客户支付的金钱转为商户？？？</span></span><br><span class="line"></span><br><span class="line"><span class="meta">注意：内网穿透natapp</span> <span class="string">重启之后 域名会发生改变，因此，如果重启了之后要中心配置域名哦！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">其他细节：</span></span><br><span class="line"><span class="attr">在授权配置中，添加放行路径，因为微信支付系统不可能有我们项目的登录token，</span></span><br><span class="line"><span class="attr">因此会被拦截，校验jwt不通过，所以我们对回调信息的源url直接不拦截，直接放行通过</span></span><br><span class="line"></span><br><span class="line"><span class="attr">前端需要xml，但是我们返回json格式的字符串，报错415，</span></span><br><span class="line"><span class="attr">我们导入依赖包jackson-dataformat-xml，就会自动将json转xml</span></span><br><span class="line"><span class="meta">//produces</span> = <span class="string">&quot;application/xml&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(value</span> = <span class="string">&quot;/wx/notify&quot;, produces = MediaType.APPLICATION_XML_VALUE)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">同时：</span></span><br><span class="line"><span class="meta">返回参数从Map&lt;String,String&gt;</span> <span class="string">改为PayResultDTo;</span></span><br><span class="line"><span class="attr">因为有了上面的依赖包，map和类对象都可以作为返回，只要键或者属性名能对得上标签名称就可以转为xml</span></span><br><span class="line"><span class="attr">1</span> <span class="string">改为PayResultDTo后，当转为xml时，&quot;xml&quot;作为根标签。</span></span><br><span class="line">        <span class="attr">这是由PayResultDTo的注解决定根标签：</span></span><br><span class="line">        <span class="meta">@JacksonXmlRootElement(localName</span> = <span class="string">&quot;xml&quot;)</span></span><br><span class="line">        <span class="attr">public</span> <span class="string">class PayResultDTO &#123;...</span></span><br><span class="line"><span class="attr">2</span> <span class="string">而返回的是map类型时，&quot;map&quot;作为根标签，不符合微信官方文档要求。</span></span><br></pre></td></tr></table></figure><p>从二维码生成到支付成功回调的简单总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">拿着key，支付的订单id，订单信息描述，需要支付的金额，回调地址</span></span><br><span class="line"><span class="attr">2</span> <span class="string">来生成支付的url，然后前端根据url请求相关服务生成支付二维码</span></span><br><span class="line"><span class="attr">3</span> <span class="string">用户在微信app中扫描，付款</span></span><br><span class="line"><span class="attr">4</span> <span class="string">微信支付系统根据回调地址，给我们项目后台post回调支付成功信息，</span></span><br><span class="line"><span class="attr">5</span> <span class="string">后台校验回调信息的安全性然后修改订单状态，把订单从未支付改为已支付！</span></span><br></pre></td></tr></table></figure><h1 id="5-支付状态查询"><a href="#5-支付状态查询" class="headerlink" title="5.支付状态查询"></a>5.支付状态查询</h1><p>当用户扫码支付成功，会自动调用回调接口，从而修改订单状态，完成订单支付。</p><p>但是，页面上<strong>（前端）并不知道支付是否成功。怎么办</strong>？</p><ul><li>浏览器端主动查询支付状态<ul><li>短轮询</li></ul></li><li>服务端通知浏览器端<ul><li>SeverSentEvent</li><li>WebSocket</li></ul></li></ul><h2 id="5-1-页面查询支付状态"><a href="#5-1-页面查询支付状态" class="headerlink" title="5.1.页面查询支付状态"></a>5.1.页面查询支付状态</h2><p>因为不知道用户什么时候会支付，也不知道支付有没有成功，因此页面会采用定时任务，不断查询订单支付的状态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启定时任务，查询付款状态</span></span><br><span class="line"><span class="keyword">const</span> taskId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ly.http.get(<span class="string">&quot;/trade/order/status/&quot;</span> + id)</span><br><span class="line">        .then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> i = resp.data;</span><br><span class="line">        <span class="keyword">if</span> (i !== <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 付款成功</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(taskId);</span><br><span class="line">            <span class="comment">// 跳转到付款成功页</span></span><br><span class="line">            location.href = <span class="string">&quot;/paysuccess.html?orderId=&quot;</span> + id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">&quot;支付状态查询失败，请刷新页面重试。&quot;</span>);</span><br><span class="line">        <span class="built_in">clearInterval</span>(taskId);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>每隔3秒就会查询一次支付状态。</p><p>ps:只要轮询到后台已经将支付状态变为已支付，那么<strong>前端就会自动跳转支付成功页面</strong>！（因为轮询就是自动的哈）</p><h2 id="5-2-支付状态查询接口"><a href="#5-2-支付状态查询接口" class="headerlink" title="5.2.支付状态查询接口"></a>5.2.支付状态查询接口</h2><p>上面的查询请求 分析：</p><ul><li>请求方式：Get</li><li>请求路径 ：/order/status/{id}</li><li>请求参数：订单id</li><li>返回结果：1或者其它，1代表未支付，其它是已经支付</li></ul><p>在<code>ly-trade</code>的<code>com.leyou.trade.web</code>包中的<code>OrderController</code>中添加一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询订单支付状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderId 订单id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 状态值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/status/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Integer&gt; <span class="title">queryOrderState</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long orderId)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(orderService.queryOrderState(orderId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在ly-trade的<code>com.leyou.trade.service</code>包的<code>OrderService</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">queryOrderState</span><span class="params">(Long orderId)</span></span>;</span><br></pre></td></tr></table></figure><p>我们在ly-trade的<code>com.leyou.trade.service.impl</code>包的<code>OrderServiceImpl</code>中添加方法：</p><p>service中需要完成下列代码；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">queryOrderState</span><span class="params">(Long orderId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询订单</span></span><br><span class="line">    Order order = getById(orderId);</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (order == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;订单不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> order.getStatus().getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-主动查询订单支付状态"><a href="#5-3-主动查询订单支付状态" class="headerlink" title="5.3.主动查询订单支付状态"></a>5.3.主动查询订单支付状态</h2><p>如果用户一直未支付，一直等待和查询不太合适。因此我们又添加了一个定时任务：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同时设置一个定时任务，5分钟后，去微信主动查询支付结果，如果依然失败，终止查询，认为付款失败</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 清除之前的定时任务</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(taskId);</span><br><span class="line">    <span class="comment">// 主动查询订单状态</span></span><br><span class="line">    ly.http.get(<span class="string">&quot;/trade/pay/status/&quot;</span> + id)</span><br><span class="line">        .then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> i = resp.data;</span><br><span class="line">        <span class="comment">// i是返回的状态，1代表未支付、2代表已支付、3代表支付失败</span></span><br><span class="line">        <span class="keyword">if</span>(i !== <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">// 未支付或者支付失败，跳转到失败页</span></span><br><span class="line">            location.href = <span class="string">&quot;/payfail.html?orderId=&quot;</span> + id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已经支付，跳转到支付成功页面</span></span><br><span class="line">        location.href = <span class="string">&quot;/paysuccess.html?orderId=&quot;</span> + id;</span><br><span class="line">    &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        location.href = <span class="string">&quot;/payfail.html?orderId=&quot;</span> + id;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">300000</span>)</span><br></pre></td></tr></table></figure><p>这个定时任务会在5分钟后执行，如果5分钟后用户依然未支付，则主动发请求查询订单状态，这次的查询需要到微信服务端查询,这个功能稍后可以尝试完成！</p><h4 id="穿插知识点："><a href="#穿插知识点：" class="headerlink" title="穿插知识点："></a>穿插知识点：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">4</span> <span class="string">依赖包版本不对或者依赖包冲突</span></span><br><span class="line">    <span class="attr">1</span> <span class="string">原则：</span></span><br><span class="line">    <span class="meta">｜</span> <span class="string">1 版本要一致（参考资料给的lombok为1.0，然后一直报错，最后改为了2.0才正确）</span></span><br><span class="line">    <span class="meta">｜</span> <span class="string">2 需要什么引什么，不多引，多引入可能会引发依赖冲突</span></span><br><span class="line">    <span class="meta">｜</span> <span class="string"></span></span><br><span class="line">    <span class="attr">2</span> <span class="string">发生依赖冲突时的解决方法</span></span><br><span class="line">    <span class="meta">｜</span> <span class="string">1 在父依赖中使用optional标签来禁止依赖传递，</span></span><br><span class="line">    <span class="meta">｜</span> <span class="string">2 或者在子依赖中使用exclusion标签来排除父依赖传递过来的依赖。</span></span><br></pre></td></tr></table></figure><p><strong>订单创建时间vs支付成功时间</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">订单创建时间跟付款时间相差了至少八个小时，</span></span><br><span class="line">    <span class="attr">是因为支付时间是数据库自动生成的，</span></span><br><span class="line">    <span class="attr">而数据库的系统时间跟标准时间相差了八小时，</span></span><br><span class="line">    <span class="attr">这里要注意将数据库的系统时间改过来哦！</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="微信支付" scheme="http://example.com/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-下单功能</title>
    <link href="http://example.com/2022/07/03/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/"/>
    <id>http://example.com/2022/07/03/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/</id>
    <published>2022-07-03T01:52:22.000Z</published>
    <updated>2022-07-29T02:47:09.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">了解订单表设计</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">实现减库存功能</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">实现下单功能</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">实现查询订单功能</span></span><br></pre></td></tr></table></figure><h1 id="大总结写在前面："><a href="#大总结写在前面：" class="headerlink" title="大总结写在前面："></a>大总结写在前面：</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">0：</span></span><br><span class="line"><span class="attr">下单时带给服务器只有几个key-val，只是id值，并不是sku详细信息</span></span><br><span class="line"><span class="attr">因为以后台最新数据为准，（涨价，价格变动等），所以还有拿着id去mysql查询，才最终确定订单详情！</span></span><br><span class="line"><span class="attr">1</span>: <span class="string">由0可以知道，需要跟数据库交互，因此引入mysql，mybatis-plus依赖包</span></span><br><span class="line"><span class="attr">同时在配置文件中配置数据源以及mybatis-plus操作库表对应的实体类位置！（entity包位置）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">2</span>: <span class="string">mapper包下写三个接口：Order接口，OrderDetail接口，OrderLogistics接口，</span></span><br><span class="line"><span class="meta">三个接口都继承BaseMapper&lt;T&gt;</span> <span class="string">T就是对应的实体类</span></span><br><span class="line"></span><br><span class="line"><span class="attr">3</span>: <span class="string">在entity包下写对应的实体类：Order，OrderDetail，OrderLogistics（属性当然是跟数据库表对应上是吧）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">4</span>: <span class="string">web包下写OrderController类</span></span><br><span class="line"><span class="meta">（1）需要注入@AutoWired</span> <span class="string">OrderService orderService(但此时还没有)</span></span><br><span class="line"><span class="attr">利用orderService的create(orderDTO)方法来完成订单的创建</span></span><br><span class="line"><span class="attr">ps</span>:<span class="string">orderDTO和orderService下面分解。</span></span><br><span class="line"><span class="attr">（2）前端post过来的参数为Json，因此使用@requestBody(orderDTO)来声明参数，</span></span><br><span class="line"><span class="attr">Json数据封装到orderDTO中。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">5</span>: <span class="string">在dto包下新建orderDTO类，类属性跟Json字段对应上就好啦。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">6</span>: <span class="string">在service层创建步骤4中web层注入的OrderService类 extend IService&lt;T&gt; 其中，泛型T为Order</span></span><br><span class="line"></span><br><span class="line"><span class="attr">7</span>: <span class="string">service包下的impl包下写OrderService的</span></span><br><span class="line"><span class="meta">实现类OrderServiceImpl</span> <span class="string">extend ServiceImpl&lt;OrderMapper,Order&gt; implements OrderService</span></span><br><span class="line"><span class="attr">（实现类使用注解：@Service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">8</span>: <span class="string">每次新增方法功能，在OrderService声明接口方法，然后再OrderServiceImpl中具体实现方法就好！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">9</span>:<span class="string"></span></span><br><span class="line"><span class="attr">服务端必须对客户端请求（get或者post）过来的数据进行校验</span></span><br><span class="line"><span class="attr">首先第一步就是先利用日志log.error(orderDTO),后台终端打印一下数据，保证数据到达后台。</span></span><br><span class="line"><span class="attr">其次，还要对数据进行校验判断数据是否合理，增强系统的健壮性！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">10</span>:<span class="string">支付方式使用枚举类型，（枚举类型有提示，一是不会写错，二是见名知其意）</span></span><br><span class="line"><span class="attr">本质上还是Integer类型，</span></span><br><span class="line"><span class="attr">但mysql中也没有枚举类型，因此用Integer类型作为最终存入mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">11</span>:<span class="string"></span></span><br><span class="line"><span class="attr">（1）将前端过来的数据（封装为OrderDTO），（2）UserContext获取用户id，</span></span><br><span class="line"><span class="attr">（3）OrderDTO中获取skuid集合到数据库查询详sku详情信息，（4）...</span></span><br><span class="line"><span class="attr">将（1）-（）。。。等等内容封装到Order对象中</span></span><br><span class="line"><span class="meta">调用OrderService</span> <span class="string">对象的save方法（会自动调用mybatis-plus底层代码）来保存Order对象到数据库的tb_order表中去！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">12</span>:<span class="string"></span></span><br><span class="line"><span class="meta">11中</span> <span class="string">既然要“根据skuid集合查询sku详情信息”，那么就需要ly-item-api 微服的ItemClient 客户端，因此：</span></span><br><span class="line"><span class="meta">(1)OrderServiceImpl中注入@AutoWired</span> <span class="string">ItemClient itemClient；同时添加ly-item-api 依赖</span></span><br><span class="line"><span class="meta">(2)启动器需要添加Feign注解，同时添加openFeign</span> <span class="string">依赖包。</span></span><br><span class="line"><span class="attr">(3)工作到这一步，就可以直接使用itemClient相关方法了，</span></span><br><span class="line"><span class="attr">(4)但是发现itemClient并没有“根据skuid集合查询sku详情信息”feign接口哈，</span></span><br><span class="line"><span class="meta">因此需要我们再去ly-item-api下的ItemClient接口下</span> <span class="string">声明该方法</span></span><br><span class="line"><span class="attr">该方法在web层（controller类）中已经声明过，直接copy过来哈！</span></span><br><span class="line"><span class="attr">ps：ItemClient是微服务的客户端，是给其他微服务访问的一个接口文件，暴露出来访问路径，</span></span><br><span class="line"><span class="attr">最终还是定位到目标微服的web层中Controller类下的某个方法！！！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">微服A访问微服B，需要引入依赖（微服B依赖包，feign支持依赖），</span></span><br><span class="line"><span class="attr">引入feign注解，注入客户端对象itemClient，然后使用客户端对象方法来访问微服务B。</span></span><br><span class="line"><span class="attr">13</span>: <span class="string">订单详情，批量保存订单信息</span></span><br><span class="line"><span class="attr">完成了12：订单的创建之后，接下来是订单详情的封装以及数据库表的持久化。</span></span><br><span class="line"><span class="attr">由11中查到的sku详情信息封装到skuDTOS详情中，</span></span><br><span class="line"><span class="attr">利用stream的map方法将List&lt;skuDTO&gt;对象属性值封装到List&lt;OrderDetail&gt;中去。</span></span><br><span class="line"><span class="attr">然后OrderDetailService.saveBatch(orderDetails);//；批量保存订单信息</span></span><br><span class="line"></span><br><span class="line"><span class="attr">14</span> <span class="string">创建OrderDetailService接口，声明saveBatch方法，然后OrderDetailServiceImpl实现类，实现saveBatch方法</span></span><br><span class="line"></span><br><span class="line"><span class="attr">15</span> <span class="string">为啥有了Order表，还要OrderDetail表格，因为分工分表，分表后查询效率快了，而且分工明确。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">16</span>: <span class="string">根据前端用户id以及地址id查询地址信息</span></span><br><span class="line"><span class="meta">ly-user-pojo微服中的dto包下新建AddressDTO实体类</span> <span class="string">，</span></span><br><span class="line"><span class="meta">在ly-user-service</span> <span class="string">web层下建立AddressController，建立访问路径为/address的方法</span></span><br><span class="line"><span class="meta">然后将该方法在le-user-api微服中的UserClient中声明（为了给ly-trade</span> <span class="string">微服访问）</span></span><br><span class="line"><span class="meta">因此ly-trade</span> <span class="string">微服需要导进来ly-user-api 的依赖，然后相关代码中注入UserClient </span></span><br><span class="line"><span class="attr">在ly-trade微服中获取到地址信息（物流信息）AddressDTO</span></span><br><span class="line"></span><br><span class="line"><span class="attr">17</span> <span class="string">：物流信息保存到tb_OrderLogistics表中。</span></span><br><span class="line"><span class="meta">AddressDTO-&gt;OrderLogistics</span> <span class="string">-&gt;tb_OrderLogistics</span></span><br><span class="line"></span><br><span class="line"><span class="attr">19</span> <span class="string">减库存，超卖等分析：</span></span><br><span class="line"><span class="attr">1</span> <span class="string">先减库存再下单成功 ：对于诸如火车购买等商品具有唯一性的系统，</span></span><br><span class="line"><span class="attr">只能是先减库存，把班次，车间，座位先占领了再下单。</span></span><br><span class="line"><span class="attr">因此下单后提醒我们几分钟内要付款，否则下单无效（释放库存）</span></span><br><span class="line"><span class="attr">2</span> <span class="string">先下单再减库存：支付成功才减库存，所以说在下单后付款成功前，要尽早付款，防止没有库存</span></span><br><span class="line"><span class="attr">因此经常看到下单后提示我们尽早付款，预防没有库存！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">理论上超卖是不应该发生的，从技术上就不应该让其发生，但是超卖会给销售方带来额外的利益</span></span><br><span class="line"><span class="attr">20</span> <span class="string">批量减库存实现（加事务控制）</span></span><br><span class="line"><span class="meta">前端带Map&lt;skuid,num&gt;</span> <span class="string">访问trade微服--&gt;item 微服，代码逻辑还是上面那一套。</span></span><br><span class="line"><span class="attr">1</span> <span class="string">先查再减：</span></span><br><span class="line"><span class="attr">可能会发生错误，比如两个人同时下单，那么最终的剩余库存就为最后写入数据库的库存量，</span></span><br><span class="line"><span class="attr">只是减去一个人的购买数量。</span></span><br><span class="line"><span class="attr">2</span> <span class="string">直接减：</span></span><br><span class="line"><span class="attr">先查后减都是利用到了mybatis-plus的查询和update方法，但是这里直接减，跟mysql交互的sql语句</span></span><br><span class="line"><span class="attr">mybatis-plus并没有封装，因此我们在mapper层写一个SkuMapper接口继承baseMapper</span></span><br><span class="line"><span class="attr">然后声明方法：</span></span><br><span class="line"><span class="meta">@Update(&quot;update</span> <span class="string">tb_sku set stock = stock - #&#123;num&#125; where id = #&#123;skuId&#125;&quot;)</span></span><br><span class="line"><span class="attr">void</span> <span class="string">minusStock(@Param(&quot;skuId&quot;)Long skuId,@Param(&quot;num&quot;) Integer num);</span></span><br><span class="line"><span class="attr">那么在SkuService接口就可以直接声明该方法：</span></span><br><span class="line"><span class="attr">然后在SkuServiceImpl实现类中的“某个方法1”调用该方法实现减库存：</span></span><br><span class="line"><span class="attr">this.baseMapper.minusStock(skuId,skuMap.get(skuId));</span></span><br><span class="line"><span class="meta">然后在item-service的GoodService调用“某个方法1”</span> <span class="string"></span></span><br><span class="line"><span class="attr">然后就是le-item-service的web层，</span></span><br><span class="line"><span class="attr">再然后是le-item-api的userClient声明方法，</span></span><br><span class="line"><span class="attr">再然后就是trade微服调用减库存的feign接口。</span></span><br><span class="line"><span class="attr">21</span> <span class="string">库存代码优化：上面代码实现是每减一个商品id的库存都需要执行一次连接，</span></span><br><span class="line"><span class="attr">我们回顾一下前面学的最底层的sqlSesson，一次连接多次操作，就可以避免上面出现的问题！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">22</span> <span class="string">由上面分析可知：点击下单后，会生成订单，物流信息等等（存入mysql表），</span></span><br><span class="line"><span class="attr">然后前端会将购物车中已经下单的商品删除，</span></span><br><span class="line"></span><br><span class="line"><span class="attr">23：下完单之后后台需要给前端返回订单id（Long类型）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">24</span> <span class="string">后端Long类型的订单id（雪花算法生成的）数据传到前端的double类型时会发生精度丢失问题，</span></span><br><span class="line"><span class="attr">虽然都是64位，但是double还需要17位来表示小数，因此精度会丢失。</span></span><br><span class="line"><span class="attr">解决方案1是：后台传到前端前，Long类型转为String类型。</span></span><br><span class="line"><span class="attr">解决方案2：前端将后端传过来的数据首先统一当做String来处理，展示，不要先做类型转换。</span></span><br><span class="line"><span class="attr">保险起见，采用方案1，因为我们并不知道前端的处理能力哈。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">25：</span></span><br><span class="line"><span class="attr">带着订单id跳转到pay.html页面，先去根据订单id查询订单详情</span></span><br><span class="line"><span class="attr">根据订单id查询订单信息封装到的DTO（有status变量，有订单号等信息），</span></span><br><span class="line"><span class="attr">然后将查到的DTO返回给前端支付页面。</span></span><br><span class="line"><span class="attr">如果status不为1表示支付成功，跳转到支付成功页面。</span></span><br><span class="line"><span class="attr">如果status为1表示还没有付款，就会进行支付访问，然后跳转支付页面。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="1-订单数据结构"><a href="#1-订单数据结构" class="headerlink" title="1.订单数据结构"></a>1.订单数据结构</h1><p>加入购物车后，自然就要完成用户下单，订单属于对事务要求较高的业务，肯定不能写入MongoDB，应该写入MySQL数据库中。</p><p>我们接下来看看订单表设计：</p><h2 id="1-1-数据结构"><a href="#1-1-数据结构" class="headerlink" title="1.1.数据结构"></a>1.1.数据结构</h2><p>订单表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_order` (</span><br><span class="line">  `order_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">  `total_fee` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;总金额，单位为分&#x27;</span>,</span><br><span class="line">  `actual_fee` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;实付金额。单位:分。如:20007，表示:200元7分&#x27;</span>,</span><br><span class="line">  `payment_type` tinyint(<span class="number">2</span>) unsigned zerofill <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付类型，1、微信支付，2、支付宝支付&#x27;</span>,</span><br><span class="line">  `post_fee` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮费。单位:分。如:20007，表示:200元7分&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `status` tinyint(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单的状态，1、未付款 2、已付款,未发货 3、已发货,未确认 4、确认收货，交易成功 5、交易取消，订单关闭 6、交易结束，已评价&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `pay_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付时间&#x27;</span>,</span><br><span class="line">  `consign_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;发货时间&#x27;</span>,</span><br><span class="line">  `end_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;交易完成时间&#x27;</span>,</span><br><span class="line">  `close_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;交易关闭时间&#x27;</span>,</span><br><span class="line">  `comment_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;评价时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`order_id`),</span><br><span class="line">  KEY `multi_key_status_time` (`status`,`create_time`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin;</span><br></pre></td></tr></table></figure><p>物流信息表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_order_logistics` (</span><br><span class="line">  `order_id` bigint(20) NOT NULL COMMENT &#x27;订单id，与订单表一对一&#x27;,</span><br><span class="line">  `logistics_number` varchar(18) DEFAULT &#x27;&#x27; COMMENT &#x27;物流单号&#x27;,</span><br><span class="line">  `logistics_company` varchar(18) DEFAULT &#x27;&#x27; COMMENT &#x27;物流公司名称&#x27;,</span><br><span class="line">  `addressee` varchar(32) NOT NULL COMMENT &#x27;收件人&#x27;,</span><br><span class="line">  `phone` varchar(11) NOT NULL COMMENT &#x27;收件人手机号码&#x27;,</span><br><span class="line">  `province` varchar(16) NOT NULL COMMENT &#x27;省&#x27;,</span><br><span class="line">  `city` varchar(32) NOT NULL COMMENT &#x27;市&#x27;,</span><br><span class="line">  `district` varchar(32) NOT NULL COMMENT &#x27;区&#x27;,</span><br><span class="line">  `street` varchar(256) NOT NULL COMMENT &#x27;街道&#x27;,</span><br><span class="line">  `postcode` int(6) DEFAULT &#x27;0&#x27; COMMENT &#x27;邮编&#x27;,</span><br><span class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`order_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>订单条目(<strong>这个表需要重新生成，大家注意一下，ID的类型是Bigint</strong>)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_order_detail` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `order_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">  `sku_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;sku商品id&#x27;</span>,</span><br><span class="line">  `num` <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;购买数量&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品标题&#x27;</span>,</span><br><span class="line">  `spec` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;商品动态属性键值集&#x27;</span>,</span><br><span class="line">  `price` <span class="type">int</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;价格,单位：分&#x27;</span>,</span><br><span class="line">  `image` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;商品图片&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `key_order_id` (`order_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;订单详情表&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="1-2-整合MybatisPlus"><a href="#1-2-整合MybatisPlus" class="headerlink" title="1.2.整合MybatisPlus"></a>1.2.整合MybatisPlus</h2><h3 id="1-2-1-依赖"><a href="#1-2-1-依赖" class="headerlink" title="1.2.1.依赖"></a>1.2.1.依赖</h3><p>在<code>ly-trade</code>的<code>pom.xml</code>中添加数据库相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-配置"><a href="#1-2-2-配置" class="headerlink" title="1.2.2.配置"></a>1.2.2.配置</h3><p>在<code>ly-trade</code>的<code>application.yml</code>中添加数据库配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ly-mysql:3306/heima?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.trade.entity</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">INPUT</span> <span class="comment"># 此处的id类型选择INPUT，代表自定义</span></span><br><span class="line">      <span class="attr">insert-strategy:</span> <span class="string">not_null</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-启动类注解"><a href="#1-2-3-启动类注解" class="headerlink" title="1.2.3.启动类注解"></a>1.2.3.启动类注解</h3><p>在<code>ly-trade</code>的<code>com.leyou.trade</code>下的启动类<code>LyTradeApplication</code>上添加<code>@MapperScan</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableJwtVerification</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.leyou.trade.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.trade&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyTradeApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyTradeApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-基本代码"><a href="#1-3-基本代码" class="headerlink" title="1.3.基本代码"></a>1.3.基本代码</h2><h3 id="1-3-1-全局唯一id"><a href="#1-3-1-全局唯一id" class="headerlink" title="1.3.1.全局唯一id"></a>1.3.1.全局唯一id</h3><p>订单数据非常庞大，将来一定会做分库分表。那么这种情况下， 要保证id的唯一，就不能靠数据库自增，而是自己来实现算法，生成唯一id。</p><p>有很多种全局唯一ID的生成策略，包括：</p><blockquote><h4 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h4></blockquote><p>算法的核心思想是结合机器的网卡、当地时间、一个随记数来生成UUID。</p><ul><li>优点：本地生成，生成简单，性能好，没有高可用风险</li><li>缺点：长度过长，存储冗余，且无序不可读，查询效率低</li></ul><blockquote><h4 id="数据库自增ID"><a href="#数据库自增ID" class="headerlink" title="数据库自增ID"></a>数据库自增ID</h4></blockquote><p>使用数据库的id自增策略，如 MySQL 的 auto_increment。并且可以使用两台数据库分别设置不同步长，生成不重复ID的策略来实现高可用。</p><ul><li>优点：数据库生成的ID绝对有序，高可用实现方式简单</li><li>缺点：需要独立部署数据库实例，成本高，有性能瓶颈</li></ul><blockquote><h4 id="批量生成ID"><a href="#批量生成ID" class="headerlink" title="批量生成ID"></a>批量生成ID</h4></blockquote><p>一次按需批量生成多个ID，每次生成都需要访问数据库，将数据库修改为最大的ID值，并在内存中记录当前值及最大值。</p><ul><li>优点：避免了每次生成ID都要访问数据库并带来压力，提高性能</li><li>缺点：属于本地生成策略，存在单点故障，服务重启造成ID不连续</li></ul><blockquote><h4 id="Redis生成ID"><a href="#Redis生成ID" class="headerlink" title="Redis生成ID"></a>Redis生成ID</h4></blockquote><p>Redis的所有命令操作都是单线程的，本身提供像 incr 和 increby 这样的自增原子命令，所以能保证生成的 ID 肯定是唯一有序的。</p><ul><li>优点：不依赖于数据库，灵活方便，且性能优于数据库；数字ID天然排序，对分页或者需要排序的结果很有帮助。</li><li>缺点：如果系统中没有Redis，还需要引入新的组件，增加系统复杂度；需要编码和配置的工作量比较大。</li></ul><p>考虑到单节点的性能瓶颈，可以使用 Redis 集群来获取更高的吞吐量。假如一个集群中有5台 Redis。可以初始化每台 Redis 的值分别是1, 2, 3, 4, 5，然后步长都是 5。各个 Redis 生成的 ID 为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A：1, 6, 11, 16, 21</span><br><span class="line">B：2, 7, 12, 17, 22</span><br><span class="line">C：3, 8, 13, 18, 23</span><br><span class="line">D：4, 9, 14, 19, 24</span><br><span class="line">E：5, 10, 15, 20, 25</span><br></pre></td></tr></table></figure><p>随便负载到哪个机确定好，未来很难做修改。步长和初始值一定需要事先确定。使用 Redis 集群也可以方式单点故障的问题。</p><p>另外，比较适合使用 Redis 来生成每天从0开始的流水号。比如订单号 = 日期 + 当日自增长号。可以每天在 Redis 中生成一个 Key ，使用 INCR 进行累加。</p><blockquote><h4 id="Twitter的snowflake算法"><a href="#Twitter的snowflake算法" class="headerlink" title="Twitter的snowflake算法"></a>Twitter的snowflake算法</h4></blockquote><p>Twitter 利用 zookeeper 实现了一个全局ID生成的服务 Snowflake：<a href="https://github.com/twitter/snowflake">github.com/twitter/sno…</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/1645b1a7a9beb2b6" alt="img"></p><p>如上图的所示，Twitter 的 Snowflake 算法由下面几部分组成：</p><ul><li>1位符号位：**</li></ul><p>由于 long 类型在 java 中带符号的，最高位为符号位，正数为 0，负数为 1，且实际系统中所使用的ID一般都是正数，所以最高位为 0。</p><ul><li><strong>41位时间戳（毫秒级）：</strong></li></ul><p>需要注意的是此处的 41 位时间戳并非存储当前时间的时间戳，而是存储时间戳的差值（当前时间戳 - 起始时间戳），这里的起始时间戳一般是ID生成器开始使用的时间戳，由程序来指定，所以41位毫秒时间戳最多可以使用 <code>(1 &lt;&lt; 41) / (1000x60x60x24x365) = 69年</code>。</p><ul><li><strong>10位数据机器位：</strong></li></ul><p>包括5位数据标识位和5位机器标识位，这10位决定了分布式系统中最多可以部署 <code>1 &lt;&lt; 10 = 1024</code> s个节点。超过这个数量，生成的ID就有可能会冲突。</p><ul><li><strong>12位毫秒内的序列：</strong></li></ul><p>这 12 位计数支持每个节点每毫秒（同一台机器，同一时刻）最多生成 <code>1 &lt;&lt; 12 = 4096个ID</code></p><p>加起来刚好64位，为一个Long型。</p><ul><li>优点：高性能，低延迟，按时间有序，一般不会造成ID碰撞</li><li>缺点：需要独立的开发和部署，依赖于机器的时钟</li></ul><blockquote><h4 id="百度UidGenerator"><a href="#百度UidGenerator" class="headerlink" title="百度UidGenerator"></a>百度UidGenerator</h4></blockquote><p>UidGenerator是百度开源的分布式ID生成器，基于于snowflake算法的实现，看起来感觉还行。不过，国内开源的项目维护性真是担忧。</p><p>具体可以参考官网说明：<a href="https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md">github.com/baidu/uid-g…</a></p><blockquote><h4 id="美团Leaf"><a href="#美团Leaf" class="headerlink" title="美团Leaf"></a>美团Leaf</h4></blockquote><p>Leaf 是美团开源的分布式ID生成器，能保证全局唯一性、趋势递增、单调递增、信息安全，里面也提到了几种分布式方案的对比，但也需要依赖关系数据库、Zookeeper等中间件。</p><p>具体可以参考官网说明：<a href="https://tech.meituan.com/MT_Leaf.html">tech.meituan.com/MT_Leaf.htm…</a></p><p>在我们的项目中，会使用<strong>雪花算法</strong>作为唯一id的生成算法。</p><h3 id="1-3-2-实体类"><a href="#1-3-2-实体类" class="headerlink" title="1.3.2.实体类"></a>1.3.2.实体类</h3><p>接下来，在<code>ly-trade</code>的<code>com.leyou.trade.entity</code>包中添加几个实体类。</p><h4 id="1-3-2-1-Order"><a href="#1-3-2-1-Order" class="headerlink" title="1.3.2.1.Order"></a>1.3.2.1.Order</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.handlers.MybatisEnumTypeHandler;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.enums.OrderStatus;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long totalFee;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮费</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long postFee;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实付金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long actualFee;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 付款方式：1:微信支付, 2:支付宝支付</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer paymentType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单状态,1、未付款 2、已付款,未发货 3、已发货,未确认 4、确认收货，交易成功 5、交易取消，订单关闭 6、交易结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(typeHandler = MybatisEnumTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> OrderStatus status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 付款时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date payTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发货时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date consignTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确认收货时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date endTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易关闭时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date closeTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 评价时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date commentTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的地方：</p><ul><li>id类型：这里是<code>@TableId(type = IdType.ASSIGN_ID)</code>，代表是自动生成ID，id生成算法是由MybatisPlus内置的雪花算法（SnowFlake，由Twitter公司开源）</li><li>订单状态：订单状态包含多个，在数据库中是数字，不太方便记忆。为了避免出错，这里我们使用了枚举<code>OrderStatus</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.entity.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.EnumValue;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonValue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OrderStatus</span> </span>&#123;</span><br><span class="line">    INIT(<span class="number">1</span>, <span class="string">&quot;初始化，未付款&quot;</span>),</span><br><span class="line">    PAY_UP(<span class="number">2</span>, <span class="string">&quot;已付款，未发货&quot;</span>),</span><br><span class="line">    DELIVERED(<span class="number">3</span>, <span class="string">&quot;已发货，未确认&quot;</span>),</span><br><span class="line">    CONFIRMED(<span class="number">4</span>, <span class="string">&quot;已确认,未评价&quot;</span>),</span><br><span class="line">    CLOSED(<span class="number">5</span>, <span class="string">&quot;已关闭&quot;</span>),</span><br><span class="line">    RATED(<span class="number">6</span>, <span class="string">&quot;已评价，交易结束&quot;</span>)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer value;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    OrderStatus(Integer value, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-2-OrderDetail"><a href="#1-3-2-2-OrderDetail" class="headerlink" title="1.3.2.2.OrderDetail"></a>1.3.2.2.OrderDetail</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_order_detail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDetail</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long skuId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品购买数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品单价</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品规格数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String spec;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-3-OrderLogistics"><a href="#1-3-2-3-OrderLogistics" class="headerlink" title="1.3.2.3.OrderLogistics"></a>1.3.2.3.OrderLogistics</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_order_logistics&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderLogistics</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单id，与订单表一对一</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 物流单号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String logisticsNumber;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 物流名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String logisticsCompany;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收件人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String addressee;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 省</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 市</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String district;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 街道</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮编</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String postcode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-MybatisPlus对枚举的支持"><a href="#1-3-3-MybatisPlus对枚举的支持" class="headerlink" title="1.3.3.MybatisPlus对枚举的支持"></a>1.3.3.MybatisPlus对枚举的支持</h3><p>我们的订单实体类中使用了枚举，而数据库中是int类型，那么在读写数据库的时候，如何实现int与enum间互相转换呢？</p><p>MybatisPlus已经默认支持了枚举的转换，你只需要这样做：</p><h4 id="1）在枚举类上添加注解"><a href="#1）在枚举类上添加注解" class="headerlink" title="1）在枚举类上添加注解"></a>1）在枚举类上添加注解</h4><p>枚举中必须包含一个属性，属性值会作为将来写入数据库的值，比如：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/image-20200730214640455.png" alt="image-20200730214640455"></p><p>这个字段需要添加注解：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/image-20200325171734293.png" alt="image-20200325171734293"> </p><p>完整内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.entity.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.EnumValue;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonValue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OrderStatus</span> </span>&#123;</span><br><span class="line">    INIT(<span class="number">1</span>, <span class="string">&quot;初始化，未付款&quot;</span>),</span><br><span class="line">    PAY_UP(<span class="number">2</span>, <span class="string">&quot;已付款，未发货&quot;</span>),</span><br><span class="line">    DELIVERED(<span class="number">3</span>, <span class="string">&quot;已发货，未确认&quot;</span>),</span><br><span class="line">    CONFIRMED(<span class="number">4</span>, <span class="string">&quot;已确认,未评价&quot;</span>),</span><br><span class="line">    CLOSED(<span class="number">5</span>, <span class="string">&quot;已关闭&quot;</span>),</span><br><span class="line">    RATED(<span class="number">6</span>, <span class="string">&quot;已评价，交易结束&quot;</span>)</span><br><span class="line">    ;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举值，对应订单状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer value;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文字说明</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    OrderStatus(Integer value, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）在配置文件中添加枚举配置"><a href="#2）在配置文件中添加枚举配置" class="headerlink" title="2）在配置文件中添加枚举配置"></a>2）在配置文件中添加枚举配置</h4><p>修改<code>ly-trade</code>的<code>application.yml</code>，添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.trade.entity</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">INPUT</span></span><br><span class="line">      <span class="attr">insert-strategy:</span> <span class="string">not_null</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.leyou.trade.entity.enums</span> <span class="comment"># 枚举扫描包</span></span><br></pre></td></tr></table></figure><p>这里添加了两个配置:</p><ul><li><code>type-enums-package</code>：自定义枚举所在的包</li></ul><h4 id="3）实体类的枚举属性添加类型转换器"><a href="#3）实体类的枚举属性添加类型转换器" class="headerlink" title="3）实体类的枚举属性添加类型转换器"></a>3）实体类的枚举属性添加类型转换器</h4><p>给Order类的枚举属性添加类型转换器（TypeHandler），将来可以实现mysql数据类型与Java类型的互相转换：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/image-20200508110802591.png" alt="image-20200508110802591"></p><h3 id="1-3-4-mapper接口"><a href="#1-3-4-mapper接口" class="headerlink" title="1.3.4.mapper接口"></a>1.3.4.mapper接口</h3><p>在<code>ly-trade</code>的<code>com.leyou.trade.mapper</code>包中添加几个mapper接口：</p><p>OrderMapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.Order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderDetailMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.OrderDetail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderDetailMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">OrderDetail</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderLogisticsMapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.OrderLogistics;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderLogisticsMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">OrderLogistics</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-5-Service"><a href="#1-3-5-Service" class="headerlink" title="1.3.5.Service"></a>1.3.5.Service</h3><p>在<code>ly-trade</code>的<code>com.leyou.trade.service</code>包中添加几个Service接口：</p><p>OrderService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.Order;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderDetailService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.OrderDetail;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderDetailService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">OrderDetail</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderLogisticsService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.OrderLogistics;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderLogisticsService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">OrderLogistics</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-trade</code>的<code>com.leyou.trade.service.impl</code>包中添加几个Service的实现类：</p><p>OrderServiceImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">OrderMapper</span>, <span class="title">Order</span>&gt; <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderDetailServiceImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.OrderDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.mapper.OrderDetailMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.service.OrderDetailService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDetailServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">OrderDetailMapper</span>, <span class="title">OrderDetail</span>&gt; <span class="keyword">implements</span> <span class="title">OrderDetailService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderLogisticsServiceImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.OrderLogistics;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.mapper.OrderLogisticsMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.service.OrderLogisticsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderLogisticsServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">OrderLogisticsMapper</span>, <span class="title">OrderLogistics</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">OrderLogisticsService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-订单结算页"><a href="#2-订单结算页" class="headerlink" title="2.订单结算页"></a>2.订单结算页</h1><p>在购物车页面，用户会点击<code>去结算</code>按钮:</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/1527990452791.png" alt="1527990452791"></p><p>随后就会进入订单结算页，展示用户正在购买的商品，并且需要用户选择收货人地址、付款方式等信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/image-20200730215048559.png" alt="image-20200730215048559"></p><p>这个页面需要完成的功能如下：</p><ul><li>收件人信息展示、选择</li><li>支付方式选择</li><li>商品清单展示</li></ul><h2 id="2-1-收货人信息（作业）"><a href="#2-1-收货人信息（作业）" class="headerlink" title="2.1.收货人信息（作业）"></a>2.1.收货人信息（作业）</h2><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/image-20200730215139173.png" alt="image-20200730215139173"></p><p>这里的收货人信息肯定是当前登录用户的收货地址。所以需要根据当前登录用户去查询，目前我们在页面是写的假数据：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/image-20200730215536174.png" alt="image-20200730215536174"></p><p>大家可以在在后台提供地址的增删改查接口，然后页面加载时根据当前登录用户查询，而后赋值给addresses即可。</p><h2 id="2-2-支付方式"><a href="#2-2-支付方式" class="headerlink" title="2.2.支付方式"></a>2.2.支付方式</h2><p>支付方式有2种：</p><ul><li>微信支付</li><li>货到付款</li></ul><p>与我们订单数据中的<code>paymentType</code>关联：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/1528012065388.png" alt="1528012065388"></p><p>所以我们可以在Vue实例中定义一个属性来记录支付方式：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/1535897554691.png" alt="1535897554691"></p><p>然后在页面渲染时与这个变量关联：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/1535897599041.png" alt="1535897599041"></p><p>效果：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/abc.gif" alt="abc"></p><h2 id="2-3-商品清单"><a href="#2-3-商品清单" class="headerlink" title="2.3.商品清单"></a>2.3.商品清单</h2><p>商品清单是通过localstorage从购物车页面传递过来的，到了本页从localstorage取出并且记录在data中：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/1535897715255.png" alt="1535897715255"></p><p>随后在页面渲染完成.</p><h2 id="2-4-提交订单"><a href="#2-4-提交订单" class="headerlink" title="2.4.提交订单"></a>2.4.提交订单</h2><p>当点击<code>提交订单</code>按钮，会看到控制台发起请求：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/image-20200325175330382.png" alt="image-20200325175330382"></p><p>参数说明：</p><ul><li>addressId：收货人地址信息的id，需要去用户中心查询收货人地址</li><li>carts：购物车中的商品数据，key-value结构<ul><li>key：购物车中的某商品的id</li><li>value：购物车中指定商品的购买数量</li></ul></li><li>paymentType：付款方式：1 在线支付，2 货到付款</li></ul><p>对应的JS代码：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/1555471464247.png" alt="1555471464247"></p><p>可以看到返回的提交订单成功，返回的应该是订单的编号id。</p><p>请求分析：</p><ul><li>请求方式：POST</li><li>请求路径：/order</li><li>请求参数：JSON对象，包含属性：<ul><li>addressId：收货人地址id</li><li>paymentType：付款方式</li><li>carts：购物车商品数据的map集合</li></ul></li><li>返回结果：订单id</li></ul><p>代表订单的DTO对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFormDTO</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Long addressId; <span class="comment">// 收获人地址id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer paymentType;<span class="comment">// 付款类型</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long,Integer&gt; carts;<span class="comment">// 订单中商品</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-创建订单接口"><a href="#3-创建订单接口" class="headerlink" title="3.创建订单接口"></a>3.创建订单接口</h1><p>订单信息共有3张表，内容很多，但是前台提交的数据却只很少，也就是说我们需要自己填充很多的数据。</p><h2 id="3-1-Controller"><a href="#3-1-Controller" class="headerlink" title="3.1.Controller"></a>3.1.Controller</h2><p>在<code>ly-trade</code>的<code>com.leyou.trade.web</code>包中，创建一个Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.dto.OrderFormDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderController</span><span class="params">(OrderService orderService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderDTO 订单数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 订单id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Long&gt; <span class="title">createOrder</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> OrderFormDTO orderDTO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(orderService.createOrder(orderDTO));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-Service"><a href="#3-2-Service" class="headerlink" title="3.2.Service"></a>3.2.Service</h2><p>在<code>ly-trade</code>的<code>com.leyou.trade.service</code>的<code>OrderService</code>接口中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Long <span class="title">createOrder</span><span class="params">(<span class="meta">@Valid</span> OrderFormDTO orderDTO)</span></span>;</span><br></pre></td></tr></table></figure><p>订单相关表有3个，包括：</p><ul><li>订单</li><li>订单详情</li><li>订单物流</li></ul><p>但是页面提交的数据却少的可怜，仅仅包括：</p><ul><li>支付类型（支付方式）</li><li>收获地址id</li><li>商品购物车列表，仅包含：商品id和购买数量</li></ul><p>那么这些数据要从哪里获取呢？怎样获取三张表的数据呢？</p><h3 id="3-2-1-订单Order"><a href="#3-2-1-订单Order" class="headerlink" title="3.2.1.订单Order"></a>3.2.1.订单Order</h3><p>订单表中包括的信息大概有这么几部分：</p><ul><li>订单id</li><li>订单金额相关，包括<ul><li>支付类型</li><li>商品总金额</li><li>实付金额</li><li>邮费</li></ul></li><li>用户id</li><li>订单状态相关，包括：<ul><li>订单状态</li><li>订单不同状态对应的时间</li></ul></li></ul><p>页面只提交了一个支付类型、商品id、购买数量，其它内容都没有，我们如何获取？</p><ul><li>订单id：可以通过雪花算法来获取</li><li>订单金额部分：<ul><li>支付类型已经有了，</li><li>总金额：根据商品id查询到商品价格，然后乘以商品数量，再累加各个商品结果得来</li><li>邮费：需要结合收获地址，去物流系统根据运费模板计算得到（其它微服务的业务），我们暂时不做。</li><li>实付金额：要去优惠业务的微服务查询商品是否满足优惠信息，用户是否有优惠券等，得到优惠金额，用总金额 + 邮费 - 优惠金额 得到，我们暂时不做。</li></ul></li><li>用户id：我们有一个UserContext可以获取</li><li>订单状态：默认订单为初始化状态，时间又数据库默认当前时间。其它状态以后随着业务变化再填写。</li></ul><h3 id="3-2-2-订单详情OrderDetail"><a href="#3-2-2-订单详情OrderDetail" class="headerlink" title="3.2.2.订单详情OrderDetail"></a>3.2.2.订单详情OrderDetail</h3><p>订单详情包括的数据有：</p><ul><li>订单id：在订单新增以后，就会回显id</li><li>商品相关：<ul><li>商品id：页面提交了</li><li>购买数量num：页面提交了</li><li>商品价格、图片、spec、标题：需要根据商品id到商品微服务查询</li></ul></li></ul><p>问题：为什么不让页面直接把商品价格、图片、spec、标题都提交到服务端，而是只提交了商品id？</p><p>答：为了安全考虑，商品价格等敏感信息由客户端提交存在风险。</p><p>因此，我们需要在订单微服务调用商品微服务</p><p><strong>1）引入Feign和商品服务的依赖</strong></p><p>在<code>ly-trade</code>的pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--item接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-3-订单物流-OrderLogistics"><a href="#3-3-3-订单物流-OrderLogistics" class="headerlink" title="3.3.3.订单物流 OrderLogistics"></a>3.3.3.订单物流 OrderLogistics</h3><p>OrderLogistics包括的数据：</p><ul><li>订单id：等订单新增完成，会回显</li><li>物流相关：暂时不管，这个是发货以后填写<ul><li>物流单号</li><li>物流公司</li></ul></li><li>收货人地址：页面仅仅提供了收件人地址的ID，需要去查询<ul><li>收件人</li><li>省</li><li>市</li><li>区</li><li>街道</li><li>电话</li><li>邮编</li></ul></li></ul><p>这张表数据目前需要填写的就是收货人地址，页面仅仅提供了收件人地址的ID，需要去查询。</p><p>而收货人地址肯定是在用户微服务(ly-user)中管理的，因此也需要到用户微服务远程调用，根据id查询出收货人详细信息。</p><p>目前用户微服务中没有完成收货人管理的功能，因此我们先准备一些假数据。</p><p><strong>1）实体类</strong>：</p><p>我们在<code>ly-user-pojo</code>中的<code>com.leyou.user.dto</code>包达内添加收货人地址的DTO：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> String addressee;<span class="comment">// 收件人姓名</span></span><br><span class="line">    <span class="keyword">private</span> String phone;<span class="comment">// 电话</span></span><br><span class="line">    <span class="keyword">private</span> String province;<span class="comment">// 省份</span></span><br><span class="line">    <span class="keyword">private</span> String city;<span class="comment">// 城市</span></span><br><span class="line">    <span class="keyword">private</span> String district;<span class="comment">// 区</span></span><br><span class="line">    <span class="keyword">private</span> String street;<span class="comment">// 街道地址</span></span><br><span class="line">    <span class="keyword">private</span> String  postcode;<span class="comment">// 邮编</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2）API接口</strong></p><p>然后在<code>ly-user-api</code>的<code>UserClient</code>中添加新功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 地址id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 地址信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/address/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">AddressDTO <span class="title">queryAddressById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>3）Controller接口</strong></p><p>然后在<code>ly-user-service</code>中的<code>com.leyou.user.web</code>包添加新的controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.user.dto.AddressDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;address&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 地址id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 地址信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;AddressDTO&gt; <span class="title">queryAddressById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        AddressDTO address = <span class="keyword">new</span> AddressDTO();</span><br><span class="line">        address.setId(<span class="number">1L</span>);</span><br><span class="line">        address.setUserId(<span class="number">30L</span>);</span><br><span class="line">        address.setStreet(<span class="string">&quot;航头镇航头路18号传智播客 3号楼&quot;</span>);</span><br><span class="line">        address.setCity(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        address.setDistrict(<span class="string">&quot;浦东新区&quot;</span>);</span><br><span class="line">        address.setAddressee(<span class="string">&quot;社会我拓哥&quot;</span>);</span><br><span class="line">        address.setPhone(<span class="string">&quot;15800000000&quot;</span>);</span><br><span class="line">        address.setProvince(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        address.setPostcode(<span class="string">&quot;210000&quot;</span>);</span><br><span class="line">        address.setIsDefault(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4）ly-trade中引用</strong></p><p>在<code>ly-trade</code>的pom.xml中添加user的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>5）启动类扫描包</strong></p><p>在<code>ly-trade</code>的启动类上，@EnableFeignClient注解需要添加一个对<code>com.leyou.user.client</code>的扫描包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableFeignClients(&#123;&quot;com.leyou.item.client&quot;, &quot;com.leyou.user.client&quot;&#125;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.leyou.trade.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.trade&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableJwtVerification</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyTradeApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyTradeApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-OrderService的业务实现"><a href="#3-2-4-OrderService的业务实现" class="headerlink" title="3.2.4.OrderService的业务实现"></a>3.2.4.OrderService的业务实现</h3><p>在<code>ly-trade</code>的<code>com.leyou.trade.service.impl</code>包中的<code>OrderServiceImpl</code>中添加业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.UserContext;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exception.LyException;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.client.ItemClient;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.dto.SkuDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.dto.OrderFormDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.OrderDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.OrderLogistics;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.enums.OrderStatus;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.client.UserClient;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.dto.AddressDTO;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">OrderMapper</span>, <span class="title">Order</span>&gt; <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OrderDetailServiceImpl detailService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OrderLogisticsServiceImpl logisticsService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ItemClient itemClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderServiceImpl</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                            OrderDetailServiceImpl detailService,</span></span></span><br><span class="line"><span class="params"><span class="function">                            OrderLogisticsServiceImpl logisticsService,</span></span></span><br><span class="line"><span class="params"><span class="function">                            ItemClient itemClient, UserClient userClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detailService = detailService;</span><br><span class="line">        <span class="keyword">this</span>.logisticsService = logisticsService;</span><br><span class="line">        <span class="keyword">this</span>.itemClient = itemClient;</span><br><span class="line">        <span class="keyword">this</span>.userClient = userClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createOrder</span><span class="params">(<span class="meta">@Valid</span> OrderFormDTO orderDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.写order</span></span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        <span class="comment">// 1.1 用户id</span></span><br><span class="line">        Long userId = UserContext.getUser().getId();</span><br><span class="line">        order.setUserId(userId);</span><br><span class="line">        <span class="comment">// 1.2 金额相关信息</span></span><br><span class="line">        Map&lt;Long, Integer&gt; carts = orderDTO.getCarts();</span><br><span class="line">        <span class="comment">// 1.2.1.获取所有sku的id</span></span><br><span class="line">        List&lt;Long&gt; idList = <span class="keyword">new</span> ArrayList&lt;&gt;(carts.keySet());</span><br><span class="line">        <span class="comment">// 1.2.2.查询sku</span></span><br><span class="line">        List&lt;SkuDTO&gt; skuList = itemClient.querySkuByIds(idList);</span><br><span class="line">        <span class="comment">// 1.2.3 计算金额的和</span></span><br><span class="line">        <span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (SkuDTO sku : skuList) &#123;</span><br><span class="line">            <span class="comment">// 获取金额</span></span><br><span class="line">            <span class="keyword">int</span> num = carts.get(sku.getId());</span><br><span class="line">            <span class="comment">// 计算总金额</span></span><br><span class="line">            total += sku.getPrice() * num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1.2.4 填写金额数据</span></span><br><span class="line">        order.setTotalFee(total);</span><br><span class="line">        order.setPaymentType(orderDTO.getPaymentType());</span><br><span class="line">        order.setPostFee(<span class="number">0L</span>);<span class="comment">// 全场包邮</span></span><br><span class="line">        order.setActualFee(total + order.getPostFee()<span class="comment">/* - 优惠金额*/</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.3 订单状态初始化</span></span><br><span class="line">        order.setStatus(OrderStatus.INIT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.4 写order到数据库</span></span><br><span class="line">        <span class="keyword">boolean</span> success = save(order);</span><br><span class="line">        <span class="keyword">if</span>(!success)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;订单创建失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.写OrderDetail</span></span><br><span class="line">        <span class="comment">// 2.1.定义一个OrderDetail的集合</span></span><br><span class="line">        List&lt;OrderDetail&gt; details = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 2.2.遍历sku集合，转为detail</span></span><br><span class="line">        <span class="keyword">for</span> (SkuDTO sku : skuList) &#123;</span><br><span class="line">            <span class="comment">// 2.2.1.商品数量</span></span><br><span class="line">            <span class="keyword">int</span> num = carts.get(sku.getId());</span><br><span class="line">            <span class="comment">// 2.2.2.组装OrderDetail</span></span><br><span class="line">            OrderDetail detail = <span class="keyword">new</span> OrderDetail();</span><br><span class="line">            detail.setOrderId(order.getOrderId());</span><br><span class="line">            detail.setImage(StringUtils.substringBefore(sku.getImages(), <span class="string">&quot;,&quot;</span>));</span><br><span class="line">            detail.setNum(num);</span><br><span class="line">            detail.setSkuId(sku.getId());</span><br><span class="line">            detail.setSpec(sku.getSpecialSpec());</span><br><span class="line">            detail.setPrice(sku.getPrice());</span><br><span class="line">            detail.setTitle(sku.getTitle());</span><br><span class="line">            <span class="comment">// 2.2.3.装入detail集合</span></span><br><span class="line">            details.add(detail);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.3.批量新增</span></span><br><span class="line">        success = detailService.saveBatch(details);</span><br><span class="line">        <span class="keyword">if</span>(!success)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;订单创建失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.写orderLogistics</span></span><br><span class="line">        <span class="comment">// 3.1.查询收货地址</span></span><br><span class="line">        AddressDTO address = userClient.queryAddressById(orderDTO.getAddressId());</span><br><span class="line">        <span class="comment">// 3.2.填写物流信息</span></span><br><span class="line">        OrderLogistics logistics = address.toEntity(OrderLogistics.class);</span><br><span class="line">        logistics.setOrderId(order.getOrderId());</span><br><span class="line">        <span class="comment">// 3.3.写入数据库</span></span><br><span class="line">        success = logisticsService.save(logistics);</span><br><span class="line">        <span class="keyword">if</span>(!success)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;订单创建失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回订单编号</span></span><br><span class="line">        <span class="keyword">return</span> order.getOrderId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-减库存"><a href="#3-3-减库存" class="headerlink" title="3.3.减库存"></a>3.3.减库存</h2><p>到这里似乎创建订单业务完成了。不过有一个问题需要我们思考：创建了订单，用户购买的商品是否要扣减库存呢？还是等到用户支付的时候再扣减库存？</p><h3 id="3-3-1-何时减库存"><a href="#3-3-1-何时减库存" class="headerlink" title="3.3.1.何时减库存"></a>3.3.1.何时减库存</h3><p>我们来分析下：</p><ul><li><p>支付减库存？</p><ul><li>优点：用户付款，才会减库存，可以确定用户一定有购买意图，不会出现恶意下单导致的库存堆积</li><li>缺点：可能用户付款后，发现库存不足，用户体验差</li></ul></li><li><p>下单减库存</p><ul><li>优点：下单就预留库存，用户付款一定能拿到商品，体验比较好</li><li>缺点：如果用户下单，不付款，会占用商家库存，导致它人无法购买</li></ul></li></ul><p>我们需要根据不同的场景去做选择，如果更在意用户体验，应该选择下单减库存！但是如何应对下单减库存的缺点呢？</p><ul><li>超时未支付的订单需要关闭</li><li>限定每个用户每天可以取消订单的次数</li></ul><p>在项目中，我们采用下单减库存方案。</p><h3 id="3-3-2-减库存接口"><a href="#3-3-2-减库存接口" class="headerlink" title="3.3.2.减库存接口"></a>3.3.2.减库存接口</h3><p>我们首先在商品微服务提供减库存接口</p><p>在<code>ly-item-api</code>的<code>ItemClient</code>中添加接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减库存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cartMap 商品id及数量的map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/goods/stock/minus&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deductStock</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;Long, Integer&gt; cartMap)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>GoodsController</code>中编写业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减库存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cartMap 商品集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/stock/minus&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">deductStock</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;Long, Integer&gt; cartMap)</span></span>&#123;</span><br><span class="line">    skuService.deductStock(cartMap);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-item-service</code>的<code>SkuService</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deductStock</span><span class="params">(Map&lt;Long, Integer&gt; cartMap)</span></span>;</span><br></pre></td></tr></table></figure><p>减库存的同时还要对商品的销量做+的操作，这个sql我们通过手写完成，定义在mapper中。</p><p>在<code>ly-item-service</code>的<code>com.leyou.item.mapper</code>的<code>SkuMapper</code>中定义方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.entity.Sku;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkuMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Sku</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Update(&quot;UPDATE tb_sku SET stock = stock - #&#123;num&#125;, sold = sold + #&#123;num&#125; WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deductStock</span><span class="params">(Map&lt;String,Object&gt; sku)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1）扣减库存的安全问题1"><a href="#1）扣减库存的安全问题1" class="headerlink" title="1）扣减库存的安全问题1"></a>1）扣减库存的安全问题1</h4><p>在<code>ly-item-service</code>的<code>SkuServiceImpl</code>中实现业务：</p><p>分析减库存的安全问题，假设我们这样来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductStock</span><span class="params">(Map&lt;Long, Integer&gt; skuMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Long, Integer&gt; entry : skuMap.entrySet()) &#123;</span><br><span class="line">        Long skuId = entry.getKey();</span><br><span class="line">        Integer num = entry.getValue();</span><br><span class="line">        <span class="comment">// 查询sku</span></span><br><span class="line">        Sku sku = getById(skuId);</span><br><span class="line">        <span class="comment">//  判断库存是否充足</span></span><br><span class="line">        <span class="keyword">if</span> (sku.getStock() &lt; num) &#123;</span><br><span class="line">            <span class="comment">// 如果不足，抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果充足，扣减库存 update tb_sku set stock = stock - 1, sold = sold + 1  where id = 1</span></span><br><span class="line">        Map&lt;String,Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        param.put(<span class="string">&quot;id&quot;</span>, skuId);</span><br><span class="line">        param.put(<span class="string">&quot;num&quot;</span>, num);</span><br><span class="line">        getBaseMapper().deductStock(param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这样的操作存在线程安全的风险，因为我们的代码是允许在多线程环境的，当多个用户并发访问时，先判断库存是否充足，然后再执行减库存，会出现一种情况：</p><ul><li>判断的时候，库存是充足的，但是在减库存之前，有其它线程抢先一步，扣减库存，导致库存不足了，此时就会出现超卖现象！</li></ul><h4 id="2）思路1，同步锁"><a href="#2）思路1，同步锁" class="headerlink" title="2）思路1，同步锁"></a>2）思路1，同步锁</h4><p>按照以往的思路，我们应该怎么做？</p><p>我们一般需要加同步锁，synchronized，目的是让多线程串行执行，从而保证线程安全，但是加synchronized只能保证在当前JVM内的线程安全。</p><p>如果是搭建一个微服务集群，同步锁synchronized就失效了。原因是因为线程锁，在多进程时会失效，因为每个进程都有自己的锁。</p><p>解决多进程安全问题，必须使用进程锁（分布式锁）：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/image-20200508155602143.png" alt="image-20200508155602143"></p><p>利用上面的方案缺点是：需要额外实现一个分布式锁功能，比较麻烦。</p><h4 id="3）思路2，数据库排它锁"><a href="#3）思路2，数据库排它锁" class="headerlink" title="3）思路2，数据库排它锁"></a>3）思路2，数据库排它锁</h4><p>数据库锁简单来说有两种：</p><ul><li>共享锁：读操作时会开启共享锁，此时大家都可以查询</li><li>排它锁（互斥锁）：一般是写操作会开启排它锁，此时其它事务无法获取共享锁或排它锁，会阻塞</li></ul><p>要保证安全，必须加排它锁。</p><p>但是我们之前的业务是先查询sku（读），然后判断是否充足，然后减库存（写），这样就会导致多个请求同时查询到一样的库存，减库存还是有安全问题。</p><p>我们必须在查询时就加排它锁，怎么办？</p><p>可以通过select … for update语法来开启，但是我们要加锁的商品不止一个，此时加锁就是范围锁，甚至是表锁，性能会有较大的影响</p><h4 id="4）思路3：乐观锁"><a href="#4）思路3：乐观锁" class="headerlink" title="4）思路3：乐观锁"></a>4）思路3：乐观锁</h4><p>上述思路1和思路2都是加锁，实现互斥，保证线程安全，我们称为悲观锁。</p><ul><li>悲观锁：认为线程安全问题一定会发生，因此会加锁保证线程串行执行，从而保证安全。</li></ul><p>我们为了追求性能，可以使用乐观锁机制。</p><ul><li>乐观锁：认为线程安全问题不一定会发生，因此允许多线程并行执行，一般会在执行那一刻进行判断和比较，然后根据是否存在风险来决定是否执行操作</li></ul><p>举例，我们可以给库存的表加一个字段，叫做version</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id  stock    version</span><br><span class="line">10101</span><br></pre></td></tr></table></figure><p>执行更新前，先查询库存及version</p><p><code>select * from tb_stock</code>，此时得到stock=10, version=1</p><p>然后判断库存是否充足，如果充足，执行sql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tb_stock set stock = stock - #&#123;num&#125;, version = version + 1 WHERE id = #&#123;id&#125; AND version = 1</span><br></pre></td></tr></table></figure><p>乐观锁就是先比较再执行的思路，其实就是CAS（compare and set）的思想。</p><p>CAS的思想在很多地方都有使用，例如：</p><ul><li>JDK的JUC包下的AtomicInteger、AtomicLong等等</li><li>Redis的watch，也是乐观锁,CAS原理</li></ul><p>简化：我们在减库存中，可以用stock来代替version，执行sql时判断stock是否跟自己查询到的一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tb_stock set stock = stock - 1 WHERE id = 10 AND stock = 10</span><br></pre></td></tr></table></figure><p>思路4：继续简化</p><p>我们可以不查询库存，直接执行sql，在sql语句中做判断</p><p>语句时这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tb_stock set stock = stock - 1 WHERE id = 10 AND stock &gt;= 1</span><br></pre></td></tr></table></figure><p>思路5：继续简化</p><p>我们最终的目的是 库存不能超卖，不能为负数，因此我们可以设置stock字段为无符号整数，数据库会自动对写入数据判断，如果为负，会抛出异常，我们就无需加锁或任何其它判断了。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/image-20200508163028111.png" alt="image-20200508163028111"></p><p>这样，库存就永远不会超卖了。</p><p>最终的实现是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEDUCT_STOCK_STATEMENT = <span class="string">&quot;com.leyou.item.mapper.SkuMapper.deductStock&quot;</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductStock</span><span class="params">(Map&lt;Long, Integer&gt; cartMap)</span> </span>&#123;</span><br><span class="line">    executeBatch(sqlSession -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Long, Integer&gt; entry : cartMap.entrySet()) &#123;</span><br><span class="line">            <span class="comment">// 准备参数</span></span><br><span class="line">            Map&lt;String,Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            param.put(<span class="string">&quot;id&quot;</span>, entry.getKey());</span><br><span class="line">            param.put(<span class="string">&quot;num&quot;</span>, entry.getValue());</span><br><span class="line">            <span class="comment">// 编译statement，namespace.statementId</span></span><br><span class="line">            sqlSession.update(DEDUCT_STOCK_STATEMENT, param);  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 刷新</span></span><br><span class="line">       sqlSession.flushStatements();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-创建订单后减库存"><a href="#3-3-3-创建订单后减库存" class="headerlink" title="3.3.3.创建订单后减库存"></a>3.3.3.创建订单后减库存</h3><p>修改之前的下单业务，添加减库存的业务逻辑：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/image-20200325221607090.png" alt="image-20200325221607090"> </p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">createOrder</span><span class="params">(<span class="meta">@Valid</span> OrderFormDTO orderDTO)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.写order</span></span><br><span class="line">    Order order = <span class="keyword">new</span> Order();</span><br><span class="line">    <span class="comment">// 1.1 用户id</span></span><br><span class="line">    Long userId = UserContext.getUser().getId();</span><br><span class="line">    order.setUserId(userId);</span><br><span class="line">    <span class="comment">// 1.2 金额相关信息</span></span><br><span class="line">    Map&lt;Long, Integer&gt; carts = orderDTO.getCarts();</span><br><span class="line">    <span class="comment">// 1.2.1.获取所有sku的id</span></span><br><span class="line">    List&lt;Long&gt; idList = <span class="keyword">new</span> ArrayList&lt;&gt;(carts.keySet());</span><br><span class="line">    <span class="comment">// 1.2.2.查询sku</span></span><br><span class="line">    List&lt;SkuDTO&gt; skuList = itemClient.querySkuByIds(idList);</span><br><span class="line">    <span class="comment">// 1.2.3 计算金额的和</span></span><br><span class="line">    <span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (SkuDTO sku : skuList) &#123;</span><br><span class="line">        <span class="comment">// 获取金额</span></span><br><span class="line">        <span class="keyword">int</span> num = carts.get(sku.getId());</span><br><span class="line">        <span class="comment">// 计算总金额</span></span><br><span class="line">        total += sku.getPrice() * num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1.2.4 填写金额数据</span></span><br><span class="line">    order.setTotalFee(total);</span><br><span class="line">    order.setPaymentType(orderDTO.getPaymentType());</span><br><span class="line">    order.setPostFee(<span class="number">0L</span>);<span class="comment">// 全场包邮</span></span><br><span class="line">    order.setActualFee(total + order.getPostFee()<span class="comment">/* - 优惠金额*/</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.3 订单状态初始化</span></span><br><span class="line">    order.setStatus(OrderStatus.INIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.4 写order到数据库</span></span><br><span class="line">    <span class="keyword">boolean</span> success = save(order);</span><br><span class="line">    <span class="keyword">if</span>(!success)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;订单创建失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.写OrderDetail</span></span><br><span class="line">    <span class="comment">// 2.1.定义一个OrderDetail的集合</span></span><br><span class="line">    List&lt;OrderDetail&gt; details = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 2.2.遍历sku集合，转为detail</span></span><br><span class="line">    <span class="keyword">for</span> (SkuDTO sku : skuList) &#123;</span><br><span class="line">        <span class="comment">// 2.2.1.商品数量</span></span><br><span class="line">        <span class="keyword">int</span> num = carts.get(sku.getId());</span><br><span class="line">        <span class="comment">// 2.2.2.组装OrderDetail</span></span><br><span class="line">        OrderDetail detail = <span class="keyword">new</span> OrderDetail();</span><br><span class="line">        detail.setOrderId(order.getOrderId());</span><br><span class="line">        detail.setImage(StringUtils.substringBefore(sku.getImages(), <span class="string">&quot;,&quot;</span>));</span><br><span class="line">        detail.setNum(num);</span><br><span class="line">        detail.setSkuId(sku.getId());</span><br><span class="line">        detail.setSpec(sku.getSpecialSpec());</span><br><span class="line">        detail.setPrice(sku.getPrice());</span><br><span class="line">        detail.setTitle(sku.getTitle());</span><br><span class="line">        <span class="comment">// 2.2.3.装入detail集合</span></span><br><span class="line">        details.add(detail);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.3.批量新增</span></span><br><span class="line">    success = detailService.saveBatch(details);</span><br><span class="line">    <span class="keyword">if</span>(!success)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;订单创建失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.写orderLogistics</span></span><br><span class="line">    <span class="comment">// 3.1.查询收货地址</span></span><br><span class="line">    AddressDTO address = userClient.queryAddressById(orderDTO.getAddressId());</span><br><span class="line">    <span class="comment">// 3.2.填写物流信息</span></span><br><span class="line">    OrderLogistics logistics = address.toEntity(OrderLogistics.class);</span><br><span class="line">    logistics.setOrderId(order.getOrderId());</span><br><span class="line">    <span class="comment">// 3.3.写入数据库</span></span><br><span class="line">    success = logisticsService.save(logistics);</span><br><span class="line">    <span class="keyword">if</span>(!success)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">500</span>, <span class="string">&quot;订单创建失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.减库存</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        itemClient.deductStock(carts);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FeignException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(e.status(), e.contentUTF8());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.返回订单编号</span></span><br><span class="line">    <span class="keyword">return</span> order.getOrderId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-删除购物车中已下单商品（作业）"><a href="#3-4-删除购物车中已下单商品（作业）" class="headerlink" title="3.4.删除购物车中已下单商品（作业）"></a>3.4.删除购物车中已下单商品（作业）</h2><p>下单完成，还要从购物车中把已经下单的商品移除，大家自己完成下。</p><h2 id="3-5-测试"><a href="#3-5-测试" class="headerlink" title="3.5.测试"></a>3.5.测试</h2><p>启动项目，在页面再次点击提交订单，发现提交成功，跳转到了支付页面：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/1528362464276.png" alt="1528362464276"></p><p>查看数据库，发现订单已经生成：</p><p>订单</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/1535985796739.png" alt="1535985796739"></p><p>订单详情：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/1535985836733.png" alt="1535985836733"></p><p>订单状态：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/1535985877827.png" alt="1535985877827"></p><h1 id="4-查询订单接口"><a href="#4-查询订单接口" class="headerlink" title="4.查询订单接口"></a>4.查询订单接口</h1><h2 id="4-1-接口分析"><a href="#4-1-接口分析" class="headerlink" title="4.1.接口分析"></a>4.1.接口分析</h2><p>支付页面需要展示订单信息，页面加载时，就会发起请求，查询订单信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E4%B8%8B%E5%8D%95%E5%8A%9F%E8%83%BD/image-20200403111835412.png" alt="image-20200403111835412"></p><p>因此我们应该提供查询订单接口：</p><ul><li>请求方式：Get</li><li>请求路径：/order/{id}</li><li>请求参数：路径占位符的id</li><li>返回结果：主要包含订单id、订单金额、订单状态等信息，需要封装一个DTO</li></ul><h2 id="4-2-DTO对象"><a href="#4-2-DTO对象" class="headerlink" title="4.2.DTO对象"></a>4.2.DTO对象</h2><p>在<code>ly-trade</code>的<code>com.leyou.trade.dto</code>包下，新建一个OrderDTO：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.Order;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line">    <span class="keyword">private</span> Long totalFee;</span><br><span class="line">    <span class="keyword">private</span> Long postFee;</span><br><span class="line">    <span class="keyword">private</span> Long actualFee;</span><br><span class="line">    <span class="keyword">private</span> Integer paymentType;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date payTime;</span><br><span class="line">    <span class="keyword">private</span> Date consignTime;</span><br><span class="line">    <span class="keyword">private</span> Date endTime;</span><br><span class="line">    <span class="keyword">private</span> Date closeTime;</span><br><span class="line">    <span class="keyword">private</span> Date commentTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderDTO</span><span class="params">(Order entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">        <span class="keyword">this</span>.status = entity.getStatus().getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-业务"><a href="#4-3-业务" class="headerlink" title="4.3.业务"></a>4.3.业务</h2><p>在<code>ly-trade</code>的<code>com.leyou.trade.order</code>包的OrderController中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderId 订单id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 订单对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;OrderDTO&gt; <span class="title">queryOrderById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long orderId)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> OrderDTO(orderService.getById(orderId)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="下单" scheme="http://example.com/tags/%E4%B8%8B%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-购物车功能</title>
    <link href="http://example.com/2022/07/03/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/"/>
    <id>http://example.com/2022/07/03/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/</id>
    <published>2022-07-03T01:49:49.000Z</published>
    <updated>2022-07-04T08:40:42.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">了解购物车功能流程</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">能使用Localstorage做数据存储</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">能使用SpringData操作MongoDB</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">能理解ThreadLocal的作用</span></span><br><span class="line"><span class="meta">5-</span> <span class="string">能实现已登录时购物车功能</span></span><br></pre></td></tr></table></figure><h1 id="1-购物车功能分析"><a href="#1-购物车功能分析" class="headerlink" title="1.购物车功能分析"></a>1.购物车功能分析</h1><h2 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1.需求"></a>1.1.需求</h2><p>需求描述：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">用户可以在登录状态下将商品添加到购物车</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">用户可以在未登录状态下将商品添加到购物车</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">用户可以使用购物车一起结算下单</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">用户可以查询自己的购物车</span></span><br><span class="line"><span class="meta">5-</span> <span class="string">用户可以在购物车中可以修改购买商品的数量。</span></span><br><span class="line"><span class="meta">6-</span> <span class="string">用户可以在购物车中删除商品。</span></span><br><span class="line"><span class="meta">7-</span> <span class="string">用户可以*在购物车中看到商品满足的优惠信息*</span></span><br><span class="line"><span class="meta">8-</span> <span class="string">用户可以看到购物车商品价格变化</span></span><br><span class="line"><span class="meta">9-</span> <span class="string">用户可以看到购物车商品是否下架</span></span><br><span class="line"><span class="meta">10-</span> <span class="string">用户可以看到购物车商品库存是否充足</span></span><br><span class="line"><span class="meta">11-</span> <span class="string">用户可以对商品批量结算下单</span></span><br></pre></td></tr></table></figure><h2 id="1-2-业务分析"><a href="#1-2-业务分析" class="headerlink" title="1.2.业务分析"></a>1.2.业务分析</h2><p>在需求描述中，不管用户是否登录，都需要实现加入购物车功能，那么已登录和未登录下，购物车数据应该存放在哪里呢？</p><blockquote><p>未登录购物车</p></blockquote><p>用户如果未登录，将数据保存在服务端存在一些问题：</p><ul><li>无法确定用户身份，需要借助与客户端存储识别身份</li><li>服务端数据存储压力增加，而且可能是无效数据</li></ul><p>那么我们应该用把数据保存在客户端（浏览器），这样每个用户保存自己的数据，就不存在身份识别的问题了，而且也解决了服务端数据存储压力问题。</p><blockquote><p>已登录购物车</p></blockquote><p>用户登录时，数据保存在哪里呢？</p><p>大家首先想到的应该是数据库，不过购物车数据比较特殊：</p><ul><li>读和写都比较频繁</li><li>数据安全性要求不高</li><li>数据没有事务需求</li></ul><p>这样的数据存储数据库有些浪费。因此我们可以考虑存入NoSql库中，例如：Redis、Elasticsearch、MongoDB等。</p><p>这里我们采用MongoDB作为购物车存储方案。</p><h1 id="2-未登录购物车"><a href="#2-未登录购物车" class="headerlink" title="2.未登录购物车"></a>2.未登录购物车</h1><h2 id="2-1-数据结构"><a href="#2-1-数据结构" class="headerlink" title="2.1.数据结构"></a>2.1.数据结构</h2><p>首先分析一下未登录购物车的数据结构。</p><p>我们看下页面展示需要什么数据：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/image-20200331111408989.png" alt="image-20200331111408989"></p><p>因此每一个购物车信息，都是一个对象，包含：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">skuId</span>:<span class="number">2131241</span>,</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&quot;小米6&quot;</span>,</span><br><span class="line">    <span class="attr">image</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">price</span>:<span class="number">190000</span>,</span><br><span class="line">    <span class="attr">num</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">spec</span>:<span class="string">&quot;&#123;&quot;</span><span class="number">4</span><span class="string">&quot;:&quot;</span>陶瓷黑尊享版<span class="string">&quot;,&quot;</span><span class="number">12</span><span class="string">&quot;:&quot;</span>6GB<span class="string">&quot;,&quot;</span><span class="number">13</span><span class="string">&quot;:&quot;</span>128GB<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，购物车中不止一条数据，因此最终会是对象的数组。即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;...&#125;,&#123;...&#125;,&#123;...&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="2-2-web本地存储"><a href="#2-2-web本地存储" class="headerlink" title="2.2.web本地存储"></a>2.2.web本地存储</h2><p>知道了数据结构，下一个问题，就是如何保存购物车数据。</p><p>我们不采用cookie存储，原因：</p><ul><li>cookie有大小限制</li><li>cookie会随请求，自动携带到服务端，会增加请求的头大小，占用过多带宽，影响服务并发能力</li></ul><p>前面我们分析过，可以使用Localstorage来实现。Localstorage是web本地存储的一种，那么，什么是web本地存储呢？</p><h3 id="2-2-1-什么是web本地存储？"><a href="#2-2-1-什么是web本地存储？" class="headerlink" title="2.2.1.什么是web本地存储？"></a>2.2.1.什么是web本地存储？</h3><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/1527587496457.png" alt="1527587496457"></p><p>web本地存储主要有两种方式：</p><ul><li>LocalStorage：localStorage 方法存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。 </li><li>SessionStorage：sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。 </li></ul><p>Localstorage和sessionStorage的本质都时一个JS的对象</p><p>对象怎么操作，LocalStorage就怎么操作。</p><h3 id="2-2-2-LocalStorage的用法"><a href="#2-2-2-LocalStorage的用法" class="headerlink" title="2.2.2.LocalStorage的用法"></a>2.2.2.LocalStorage的用法</h3><p>语法非常简单：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/1527587857321.png" alt="1527587857321"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">// 存储数据</span></span><br><span class="line"><span class="built_in">localStorage</span>.getItem(<span class="string">&quot;key&quot;</span>); <span class="comment">// 获取数据</span></span><br><span class="line"><span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;key&quot;</span>); <span class="comment">// 删除数据</span></span><br></pre></td></tr></table></figure><p>注意：<strong>localStorage和SessionStorage都只能保存字符串</strong>。</p><p>不过，在我们的common.js中，已经对localStorage进行了简单的封装：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/1527588011623.png" alt="1527588011623"></p><p>示例：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/1527588112975.png" alt="1527588112975"></p><h2 id="2-3-未登录购物车演示"><a href="#2-3-未登录购物车演示" class="headerlink" title="2.3.未登录购物车演示"></a>2.3.未登录购物车演示</h2><p>购物车的前端js和页面都已经实现好了，我们在商品详情页面，点击加入购物车按钮：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/1535969897212.png" alt="1535969897212"></p><p>即可将数据加入localstorage中：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/1535632873353.png" alt="1535632873353"></p><p>同时，页面会跳转到购物车列表页面并显示购物车信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/1535635900602.png"></p><h1 id="3-MongoDB"><a href="#3-MongoDB" class="headerlink" title="3.MongoDB"></a>3.MongoDB</h1><p>已登录购物车我们计划存储在MongoDB服务器，那么MongoDB该如何使用呢？</p><p>大家参考课前资料提供的文档：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/image-20200322214142849.png" alt="image-20200322214142849"> </p><h1 id="4-搭建交易微服务"><a href="#4-搭建交易微服务" class="headerlink" title="4.搭建交易微服务"></a>4.搭建交易微服务</h1><p>接下来是已登录的购物车，我们需要创建独立微服务，实现购物车功能。这里我们创建一个交易微服务，其中会包含用户交易相关的功能：</p><ul><li>购物车</li><li>订单</li><li>支付等</li></ul><p>实际开发中，可以根据情况，把这三部分业务继续拆分为微服务。</p><h2 id="4-1-创建module"><a href="#4-1-创建module" class="headerlink" title="4.1.创建module"></a>4.1.创建module</h2><p>项目坐标：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/image-20200322213005912.png" alt="image-20200322213005912"></p><p>位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/image-20200322213015331.png" alt="image-20200322213015331"></p><h2 id="4-2-pom依赖"><a href="#4-2-pom依赖" class="headerlink" title="4.2.pom依赖"></a>4.2.pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-trade<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--common--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mongoDB的starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-配置文件"><a href="#4-3-配置文件" class="headerlink" title="4.3.配置文件"></a>4.3.配置文件</h2><p>在application.yml文件中添加下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8087</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">trade-service</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://leyou:123@ly-mongo/carts</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="4-4-启动类"><a href="#4-4-启动类" class="headerlink" title="4.4.启动类"></a>4.4.启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.trade&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyTradeApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyTradeApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-网关路由"><a href="#4-5-网关路由" class="headerlink" title="4.5.网关路由"></a>4.5.网关路由</h2><p>在<code>ly-gateway</code>中的<code>application.yml</code>文件中添加路由：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">trade-service</span> <span class="comment"># 交易服务</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://trade-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/trade/**</span></span><br></pre></td></tr></table></figure><h1 id="5-已登录购物车"><a href="#5-已登录购物车" class="headerlink" title="5.已登录购物车"></a>5.已登录购物车</h1><p>接下来，我们完成已登录购物车。</p><h2 id="5-1-数据结构分析"><a href="#5-1-数据结构分析" class="headerlink" title="5.1.数据结构分析"></a>5.1.数据结构分析</h2><p>已登录购物车会存入MongoDB，那么以怎样的形式存储呢？</p><p>其实这里可以像设计数据库表一样来设计即可，我们存入的文档数据代表的是所有用户的购物车中的数据条目。</p><p>而用户到购物车的关系是一对多的关系，也就是说一个用户会有多个购物车条目，因此需要在购物车条目中添加一个userId字段，用作关联。</p><p>这样购物车条目对应的 文档结构大概如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    userId: <span class="number">14124124</span>,</span><br><span class="line">    skuId:<span class="number">2131241</span>,</span><br><span class="line">    title:<span class="string">&quot;小米6&quot;</span>,</span><br><span class="line">    image:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    price:<span class="number">190000</span>,</span><br><span class="line">    num:<span class="number">1</span>,</span><br><span class="line">    spec:<span class="string">&quot;&#123;&quot;</span><span class="number">4</span><span class="string">&quot;:&quot;</span>陶瓷黑尊享版<span class="string">&quot;,&quot;</span><span class="number">12</span><span class="string">&quot;:&quot;</span><span class="number">6</span>GB<span class="string">&quot;,&quot;</span><span class="number">13</span><span class="string">&quot;:&quot;</span><span class="number">128</span>GB<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MongoDB与数据库类似的地方在于：每个文档都需要有个唯一id。但是购物车条目中的userId和skuId都不是唯一，两者联合在一起才唯一，也就是所谓的<strong>联合主键</strong>。</p><p>但是MongoDB不支持联合主键，我们只能手动去维护一个id字段，其内容是userId和skuId拼接。因此文档结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    id: <span class="string">&quot;u32s2131241&quot;</span></span><br><span class="line">    userId: <span class="number">32</span>,</span><br><span class="line">    skuId:<span class="number">2131241</span>,</span><br><span class="line">    title:<span class="string">&quot;小米6&quot;</span>,</span><br><span class="line">    image:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    price:<span class="number">190000</span>,</span><br><span class="line">    num:<span class="number">1</span>,</span><br><span class="line">    spec:<span class="string">&quot;&#123;&quot;</span><span class="number">4</span><span class="string">&quot;:&quot;</span>陶瓷黑尊享版<span class="string">&quot;,&quot;</span><span class="number">12</span><span class="string">&quot;:&quot;</span><span class="number">6</span>GB<span class="string">&quot;,&quot;</span><span class="number">13</span><span class="string">&quot;:&quot;</span><span class="number">128</span>GB<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外， 我们希望购物车数据可以按照添加的时间排序，因此我们还需要添加一个时间字段，最终的数据结构为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartItem</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> Long skuId;<span class="comment">// 商品id</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> String image;<span class="comment">// 图片</span></span><br><span class="line">    <span class="keyword">private</span> Long price;<span class="comment">// 加入购物车时的价格</span></span><br><span class="line">    <span class="keyword">private</span> Integer num;<span class="comment">// 购买数量</span></span><br><span class="line">    <span class="keyword">private</span> String spec;<span class="comment">// 商品规格参数</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;<span class="comment">// 更新时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-引入登录校验功能"><a href="#5-2-引入登录校验功能" class="headerlink" title="5.2.引入登录校验功能"></a>5.2.引入登录校验功能</h2><p>无论是购物车功能、下单、支付功能，都需要知道当前登录的用户是谁，因此我们需要引入<code>ly-auth-api</code>中的提供的功能。</p><h3 id="5-2-1-引入依赖"><a href="#5-2-1-引入依赖" class="headerlink" title="5.2.1.引入依赖"></a>5.2.1.引入依赖</h3><p>首先，在<code>ly-trade</code>中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-2-开启校验功能"><a href="#5-2-2-开启校验功能" class="headerlink" title="5.2.2.开启校验功能"></a>5.2.2.开启校验功能</h3><p>为了开启校验功能，需要在<code>ly-trade</code>的启动类<code>LyTradeApplication</code>上添加一个注解：<code>@EnableJwtAuthorization</code>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/image-20200730180208697.png" alt="image-20200730180208697"></p><h3 id="5-2-3-配置client信息"><a href="#5-2-3-配置client信息" class="headerlink" title="5.2.3.配置client信息"></a>5.2.3.配置client信息</h3><p>最后，在application.yml中配置客户端信息，用于申请秘钥：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">trade-service</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="5-2-4-动态集合名词"><a href="#5-2-4-动态集合名词" class="headerlink" title="5.2.4.动态集合名词"></a>5.2.4.动态集合名词</h3><p>我们把所有用户的所有购物车商品存入一个MongoDB的Collection中，随着时间的推移，用户量的剧增，可能导致Document过多。</p><p>而MongoDB中单个collection中Document数量不推荐超过1000万，怎么办？</p><p>我们可以把用户分散到多个不同的collection中，例如100个，这样就能减少每个collection中的数据了。</p><p>那么如何打散用户？我们可以用userId对100取余， 得到一个数字，然后用这个数字作为collection名称一部分。也就是动态的collection名称。</p><p>那么问题来了。</p><p>collection名称是通过注解在实体类上声明的，如何才能在注解中动态计算出collection的name呢？</p><p>首先，我们在<code>ly-trade</code>的<code>com.leyou.trade.utils</code>包中定义一个类，提供一个动态计算集合名的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.UserContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionNameBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String namePrefix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CollectionNameBuilder</span><span class="params">(String namePrefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.namePrefix = namePrefix + <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserDetail user = UserContext.getUser();</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 用一个固定collection名前缀，拼接上用户id计算出的数字，作为collection名</span></span><br><span class="line">        <span class="keyword">return</span> namePrefix + user.getId().hashCode() % <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里构建collection名称需要一个<code>namePrefix</code>前缀，这个我们需要用户在<code>application.yml</code>文件中指定，例如在<code>ly-trade</code>的<code>application.yml</code>中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">collectionNamePrefix:</span> <span class="string">carts</span></span><br></pre></td></tr></table></figure><p>然后，我们通过一个配置类加载这个属性，并且把<code>CollectionNameBuilder</code>的实例注入到spring容器：</p><p>在<code>ly-trade</code>的<code>com.leyou.trade.config</code>中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.utils.CollectionNameBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ly.mongo.collectionNamePrefix&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String collectionNamePrefix;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CollectionNameBuilder <span class="title">collectionNameBuilder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CollectionNameBuilder(collectionNamePrefix);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们需要在实体类的@Document注解中，动态的获取collection的name，怎么办？</p><p>SpringDataMongoDB中的@Document注解是支持spEL表达式的，因此我们可以通过spEL来调用UserHolder中的方法，获取用户信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document(&quot;#&#123;@collectionNameBuilder.build()&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartItem</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> Long skuId;<span class="comment">// 商品id</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> String image;<span class="comment">// 图片</span></span><br><span class="line">    <span class="keyword">private</span> Long price;<span class="comment">// 加入购物车时的价格</span></span><br><span class="line">    <span class="keyword">private</span> Integer num;<span class="comment">// 购买数量</span></span><br><span class="line">    <span class="keyword">private</span> String spec;<span class="comment">// 商品规格参数</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;<span class="comment">// 商品规格参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集合名称中的spEL语法说明：</p><p><code>&quot;#&#123;@collectionNameBuilder.build()&#125;&quot;</code></p><ul><li><code>#&#123;&#125;</code>：代表spEL表达式</li><li><code>@collectionNameBuilder</code>：从spring容器中寻找名为<code>collectionNameBuilder</code>的bean</li><li><code>.build()</code>：调用<code>build()</code>方法</li></ul><h2 id="5-3-添加商品到购物车"><a href="#5-3-添加商品到购物车" class="headerlink" title="5.3.添加商品到购物车"></a>5.3.添加商品到购物车</h2><h3 id="5-3-1-页面发起请求："><a href="#5-3-1-页面发起请求：" class="headerlink" title="5.3.1.页面发起请求："></a>5.3.1.页面发起请求：</h3><p>我们再次回到商品详情页，登录以后，点击加入购物车，发现控制台发起了请求：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/image-20200323204008804.png" alt="image-20200323204008804"></p><p>请求分析：</p><ul><li>请求方式：Post</li><li>请求路径：/cart </li><li>请求参数：Json对象，包含购物车的所有属性，我们可以用CartItem接收</li><li>返回结果：无</li></ul><h3 id="5-3-2-后台添加购物车"><a href="#5-3-2-后台添加购物车" class="headerlink" title="5.3.2.后台添加购物车"></a>5.3.2.后台添加购物车</h3><p>首先新建一个操作MongoDB的Repository，在<code>ly-trade</code>的<code>com.leyou.trade.repository</code>包下，添加一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.CartItem;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.repository.MongoRepository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CartRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">CartItem</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>ly-trade</code>的<code>com.leyou.trade.service</code>包中添加<code>CartService</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.CartItem;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CartService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cartItem 购物车商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCartItem</span><span class="params">(CartItem cartItem)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>ly-trade</code>的<code>com.leyou.trade.service.impl</code>包中添加<code>CartServiceImpl</code>实现类：</p><p>这里我们不访问数据库，而是直接操作MongoDB。基本思路：</p><ul><li>先查询之前的购物车数据</li><li>判断要添加的商品是否存在<ul><li>存在：则直接修改数量，写入MongoDB</li><li>不存在：直接写入MongoDB</li></ul></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.CartItem;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.repository.CartRepository;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.service.CartService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartServiceImpl</span> <span class="keyword">implements</span> <span class="title">CartService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CartRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CartServiceImpl</span><span class="params">(CartRepository repository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.repository = repository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCartItem</span><span class="params">(CartItem cartItem)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取用户信息</span></span><br><span class="line">        Long userId = UserContext.getUser().getId();</span><br><span class="line">        <span class="comment">// 2.查询购物车商品</span></span><br><span class="line">        String id = createId(cartItem.getSkuId());</span><br><span class="line">        Optional&lt;CartItem&gt; optional = repository.findById(id);</span><br><span class="line">        <span class="comment">// 3.判断购物车中是否存在与要添加的商品id一致的商品</span></span><br><span class="line">        <span class="keyword">if</span>(optional.isPresent())&#123;</span><br><span class="line">            <span class="comment">// 2.1.存在，记录新的商品数量</span></span><br><span class="line">            Integer num = cartItem.getNum();</span><br><span class="line">            <span class="comment">// 2.2.获取旧的数据</span></span><br><span class="line">            cartItem = optional.get();</span><br><span class="line">            <span class="comment">// 2.3.数量累加</span></span><br><span class="line">            cartItem.setNum(num + cartItem.getNum());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.补充数据，id、userId、时间</span></span><br><span class="line">        cartItem.setId(id);</span><br><span class="line">        cartItem.setUserId(userId);</span><br><span class="line">        cartItem.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">// 5.写入db</span></span><br><span class="line">        repository.save(cartItem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中用到了一个createId(Long skuId)的方法，用于将用户id和skuId拼接，得到id：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">createId</span><span class="params">(Long skuId)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">&quot;u%ds%d&quot;</span>, UserContext.getUser().getId(), skuId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>ly-trade</code>的<code>com.leyou.trade.web</code>包中添加新的controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.trade.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.entity.CartItem;</span><br><span class="line"><span class="keyword">import</span> com.leyou.trade.service.CartService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;cart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CartService cartService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CartController</span><span class="params">(CartService cartService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cartService = cartService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cartItem 购物车数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveCartItem</span><span class="params">(<span class="meta">@RequestBody</span> CartItem cartItem)</span></span>&#123;</span><br><span class="line">        cartService.saveCartItem(cartItem);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-3-结果："><a href="#5-3-3-结果：" class="headerlink" title="5.3.3.结果："></a>5.3.3.结果：</h3><p>登录后，在商品页面再次点击添加购物车，结果如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/image-20200625183246808.png" alt="image-20200625183246808"> </p><h2 id="5-4-查询购物车"><a href="#5-4-查询购物车" class="headerlink" title="5.4.查询购物车"></a>5.4.查询购物车</h2><h3 id="5-4-1-页面发起请求"><a href="#5-4-1-页面发起请求" class="headerlink" title="5.4.1.页面发起请求"></a>5.4.1.页面发起请求</h3><p>我们进入购物车列表页面，然后刷新页面，查看控制台的请求：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/image-20200323220905668.png" alt="image-20200323220905668"></p><h3 id="5-4-2-后台实现"><a href="#5-4-2-后台实现" class="headerlink" title="5.4.2.后台实现"></a>5.4.2.后台实现</h3><p>请求分析：</p><ul><li>请求方式：Get</li><li>请求路径：/cart/list</li><li>请求参数：无</li><li>返回结果：当前用户的购物车集合</li></ul><p>查询并排序的功能在默认的<code>MongodbRepository</code>中并没有，需要我们自己定义。</p><p>我们在<code>ly-trade</code>的<code>com.leyou.trade.repository</code>中的<code>CartRepository</code>中添加一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车商品集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function">List&lt;CartItem&gt; <span class="title">findByUserId</span><span class="params">(Long userId, Sort sort)</span></span>;</span><br></pre></td></tr></table></figure><p>这个方法是根据用户id查询，然后排序</p><p>然后在<code>ly-trade</code>的<code>com.leyou.trade.service</code>包中<code>CartService</code>接口添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户的购物车商品集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车商品集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function">List&lt;CartItem&gt; <span class="title">queryCartList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>然后在<code>ly-trade</code>的<code>com.leyou.trade.service.impl</code>包中<code>CartServiceImpl</code>实现类中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;CartItem&gt; <span class="title">queryCartList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取用户信息</span></span><br><span class="line">    Long userId = UserContext.getUser().getId();</span><br><span class="line">    <span class="comment">// 2.查询购物车</span></span><br><span class="line">    <span class="keyword">return</span> repository.findByUserId(userId, Sort.by(<span class="string">&quot;updateTime&quot;</span>).descending());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>ly-trade</code>的<code>com.leyou.trade.web</code>包中的<code>CartController</code>中添加新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询购物车列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车商品列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;CartItem&gt;&gt; queryCartList()&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(cartService.queryCartList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-修改商品数量"><a href="#5-5-修改商品数量" class="headerlink" title="5.5.修改商品数量"></a>5.5.修改商品数量</h2><h3 id="5-5-1-页面发起请求"><a href="#5-5-1-页面发起请求" class="headerlink" title="5.5.1.页面发起请求"></a>5.5.1.页面发起请求</h3><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/image-20200323223106917.png" alt="image-20200323223106917"> </p><p>页面请求分析：</p><ul><li>请求方式：PUT</li><li>请求路径：/cart</li><li>请求参数：<ul><li>id: 商品skuId</li><li>num: 最终的数量</li></ul></li><li>返回结果：无</li></ul><h3 id="5-5-2-后台实现"><a href="#5-5-2-后台实现" class="headerlink" title="5.5.2.后台实现"></a>5.5.2.后台实现</h3><p>然后在<code>ly-trade</code>的<code>com.leyou.trade.service</code>包中<code>CartService</code>接口添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新购物车指定商品的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> skuId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateNum</span><span class="params">(Long skuId, Integer num)</span></span>;</span><br></pre></td></tr></table></figure><p>默认的<code>MongodbRepository</code>中的修改功能，默认只能全量更新，覆盖整个文档。而我们希望的是修改文档中的num值。</p><p>这里要用到<code>SpringDataMongoDB</code>中的<code>MongoTemplate</code>功能，我们首先在<code>CartServiceImpl</code>中注入整个MongoTemplate类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CartRepository repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CartServiceImpl</span><span class="params">(CartRepository repository, MongoTemplate mongoTemplate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.repository = repository;</span><br><span class="line">    <span class="keyword">this</span>.mongoTemplate = mongoTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>ly-trade</code>的<code>com.leyou.trade.service.impl</code>包中<code>CartServiceImpl</code>实现类中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateNum</span><span class="params">(Long skuId, Integer num)</span> </span>&#123;</span><br><span class="line">    mongoTemplate.update(CartItem.class)</span><br><span class="line">        <span class="comment">// 根据id匹配</span></span><br><span class="line">        .matching(Query.query(Criteria.where(<span class="string">&quot;_id&quot;</span>).is(createId(skuId))))</span><br><span class="line">        <span class="comment">// 更新num字段</span></span><br><span class="line">        .apply(Update.update(<span class="string">&quot;num&quot;</span>, num).currentDate(<span class="string">&quot;updateTime&quot;</span>))</span><br><span class="line">        .first();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了MongoTemplate中提供的更新方法update()：</p><ul><li><code>.update(CartItem.class)</code>：指定要更新的实体类类型，底层会反射拿到@Document注解，从而得知<code>collection</code>的名称</li><li><code>xx.matching(Query query)</code>：是更新时的匹配条件，条件满足的就更新</li><li><code>Query.query(Criteria criteria)</code>：这里是构建匹配条件，使用Criteria创建条件</li><li><code>Criteria.where(&quot;_id&quot;).is(createId(skuId))</code>：匹配条件，<code>where(&quot;_id&quot;).is(110)</code>就是匹配规则，类似于Sql语句中的：<code>where _id= 110</code></li><li><code>.apply(Update.update(&quot;num&quot;, 1))</code>：要修改的内容，类似mysql中的<code>set num = 1</code></li><li><code>.first()</code>：更新匹配到的第一个。</li></ul><p>我们在<code>ly-trade</code>的<code>com.leyou.trade.web</code>包中的<code>CartController</code>中添加新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新购物车指定商品的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> skuId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateNum</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@RequestParam(&quot;id&quot;)</span> Long skuId, <span class="meta">@RequestParam(&quot;num&quot;)</span> Integer num)</span> </span>&#123;</span><br><span class="line">    cartService.updateNum(skuId, num);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-6-删除购物车商品"><a href="#5-6-删除购物车商品" class="headerlink" title="5.6.删除购物车商品"></a>5.6.删除购物车商品</h2><h3 id="5-6-1-页面发起请求"><a href="#5-6-1-页面发起请求" class="headerlink" title="5.6.1.页面发起请求"></a>5.6.1.页面发起请求</h3><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/image-20200323223334102.png" alt="image-20200323223334102"> </p><p>页面请求分析：</p><ul><li>请求方式：DELETE</li><li>请求路径：/cart/{id}</li><li>请求参数：商品skuId</li><li>返回结果：无</li></ul><h3 id="5-6-2-后台实现"><a href="#5-6-2-后台实现" class="headerlink" title="5.6.2.后台实现"></a>5.6.2.后台实现</h3><p>然后在<code>ly-trade</code>的<code>com.leyou.trade.service</code>包中<code>CartService</code>接口添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除购物车指定商品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> skuId 商品id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteCart</span><span class="params">(Long skuId)</span></span>;</span><br></pre></td></tr></table></figure><p>然后在<code>ly-trade</code>的<code>com.leyou.trade.service.impl</code>包中<code>CartServiceImpl</code>实现类中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCart</span><span class="params">(Long skuId)</span> </span>&#123;</span><br><span class="line">    repository.deleteById(createId(skuId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>ly-trade</code>的<code>com.leyou.trade.web</code>包中的<code>CartController</code>中添加新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定的购物车商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> skuId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;&#123;skuId&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">deleteCart</span><span class="params">(<span class="meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId)</span> </span>&#123;</span><br><span class="line">    cartService.deleteCart(skuId);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-7-登录后购物车合并"><a href="#5-7-登录后购物车合并" class="headerlink" title="5.7.登录后购物车合并"></a>5.7.登录后购物车合并</h2><p>用户登录后，如果未登录下添加有购物车，则需要把未登录的购物车数据添加到已登录购物车列表中。</p><h3 id="5-7-1-思路分析"><a href="#5-7-1-思路分析" class="headerlink" title="5.7.1.思路分析"></a>5.7.1.思路分析</h3><p>基本流程如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">当跳转到购物车页面，查询购物车列表前，需要判断用户登录状态</span></span><br><span class="line"></span><br><span class="line"><span class="meta">1-</span> <span class="string">如果登录：</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">首先检查用户的LocalStorage中是否有购物车信息，</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">如果有，则提交到后台保存，</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">清空LocalStorage</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">进行用户的购物车列表信息。</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">如果未登录，直接查询LocalStorage并且item-service 查新更新状态即可</span></span><br></pre></td></tr></table></figure><h3 id="5-7-2-批量新增购物车"><a href="#5-7-2-批量新增购物车" class="headerlink" title="5.7.2.批量新增购物车"></a>5.7.2.批量新增购物车</h3><p>刷新购物车页面，可以看到一个请求已经发出：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD/image-20200323224233503.png" alt="image-20200323224233503"></p><h3 id="5-7-3-controller"><a href="#5-7-3-controller" class="headerlink" title="5.7.3.controller"></a>5.7.3.controller</h3><p>分析一下请求：</p><ul><li>请求方式：POST</li><li>请求路径：/cart/list</li><li>请求参数：json数组，里面是cart对象</li><li>返回结果，应该是void</li></ul><p>我们在<code>ly-trade</code>的<code>com.leyou.trade.web</code>包中的<code>CartController</code>中添加新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量添加购物车</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;list&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">addCartItemList</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;CartItem&gt; itemList)</span> </span>&#123;</span><br><span class="line">    cartService.addCartItemList(itemList);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-4-service"><a href="#5-7-4-service" class="headerlink" title="5.7.4.service"></a>5.7.4.service</h3><p>然后在<code>ly-trade</code>的<code>com.leyou.trade.service</code>包中<code>CartService</code>接口添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量新增购物车商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cartItemList 购物车商品列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addCartItemList</span><span class="params">(List&lt;CartItem&gt; cartItemList)</span></span>;</span><br></pre></td></tr></table></figure><p>批量新增，其实就是循环把集合中的每个购物车商品添加到MongoDB。因此这里可以调用之前 单商品新增的逻辑。</p><p>首先把单商品新增的代码封装为一个方法。</p><p>在<code>ly-trade</code>的<code>com.leyou.trade.service.impl</code>包中<code>CartServiceImpl</code>实现类中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> CartItem <span class="title">handleUpdateItem</span><span class="params">(Long userId, CartItem cartItem)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 2.查询购物车商品</span></span><br><span class="line">    Optional&lt;CartItem&gt; optional = repository.findById(createId(cartItem.getSkuId()));</span><br><span class="line">    <span class="comment">// 3.判断购物车中是否存在与要添加的商品id一致的商品</span></span><br><span class="line">    <span class="keyword">if</span>(optional.isPresent())&#123;</span><br><span class="line">        <span class="comment">// 2.1.存在，记录新的商品数量</span></span><br><span class="line">        Integer num = cartItem.getNum();</span><br><span class="line">        <span class="comment">// 2.2.获取旧的数据</span></span><br><span class="line">        cartItem = optional.get();</span><br><span class="line">        <span class="comment">// 2.3.数量累加</span></span><br><span class="line">        cartItem.setNum(num + cartItem.getNum());</span><br><span class="line">    &#125;</span><br><span class="line">    cartItem.setUserId(userId);</span><br><span class="line">    cartItem.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">return</span> cartItem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法就是判断购物车商品是否存在，存在则修改数量，不存在则原样返回。</p><p>看下之前的单商品新增：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCartItem</span><span class="params">(CartItem cartItem)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取用户信息</span></span><br><span class="line">    Long userId = UserContext.getUser().getId();</span><br><span class="line">    <span class="comment">// 2.处理购物车商品</span></span><br><span class="line">    cartItem = handleUpdateItem(userId, cartItem);</span><br><span class="line">    <span class="comment">// 3.写入db</span></span><br><span class="line">    repository.save(cartItem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量新增的业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCartItemList</span><span class="params">(List&lt;CartItem&gt; cartItems)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取用户id</span></span><br><span class="line">    Long userId = UserContext.getUser().getId();</span><br><span class="line">    <span class="comment">// 2.转换</span></span><br><span class="line">    List&lt;CartItem&gt; list = cartItems.stream().map(item -&gt; handleUpdateItem(userId, item)).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 3.新增或修改</span></span><br><span class="line">    repository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="大总结："><a href="#大总结：" class="headerlink" title="大总结："></a>大总结：</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql</span> <span class="string">是结构化数据库</span></span><br><span class="line"><span class="attr">表的字段类型，本来在创建表的时候定下来的，按照行列的形式来保存数据。</span></span><br><span class="line"><span class="attr">而es是弱结构化数据库，虽然没有mysql那么多约束，但是key-val中的类型也是提前约束好的。</span></span><br><span class="line"><span class="attr">而MongoDB则完全是非结构化数据库，独立的文档。</span></span><br><span class="line"><span class="attr">MongoDB与redis比较：</span></span><br><span class="line"><span class="attr">mongoDB是io存储，跟mysql一样，但是redis是内存存储。</span></span><br><span class="line"><span class="attr">mongoDB是多key，redis是单key</span></span><br><span class="line"><span class="attr">redis和MongoDB的key都是唯一的。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">自己写的实现类：UserRespository</span> <span class="string">继承接口：MongoRespository</span></span><br><span class="line"><span class="attr">我们可以直接使用接口方法就可以了；</span></span><br><span class="line"><span class="attr">因为MongoRespository的实现类SimpleMongoRespository已经帮我们将接口方法写好了。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">浏览器本地缓存：localStorage</span></span><br><span class="line">    <span class="attr">Map结构：setItem,getItem,ReomoveItem</span></span><br><span class="line">    <span class="attr">html5自带的本地存储技术，与cookie相似。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">浏览器本地缓存与cookie：</span></span><br><span class="line">    <span class="attr">1都是浏览器存储数据在本地的一个工具，都有对应的域名，存储的域名必须一致。</span></span><br><span class="line">    <span class="meta">2过期时长</span> <span class="string">，前者无限期，后者有过期时间</span></span><br><span class="line">    <span class="attr">3大小前者无限量，后者有大小限制</span></span><br><span class="line"></span><br><span class="line"><span class="attr">无登录状态：</span></span><br><span class="line">    <span class="attr">无登录状态每次加入的都是保存到浏览器缓存，</span></span><br><span class="line">    <span class="attr">但是每次访问购物车页面时还要根据sku去数据库查询一次，将最新内容更新，</span></span><br><span class="line">    <span class="attr">比如说价格的变化，商品是否在有下架等等。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">有登录状态：</span></span><br><span class="line">    <span class="attr">1</span> <span class="string">添加：</span></span><br><span class="line">    <span class="attr">将价格，图片，skuid等基本sku信息Post给后台</span></span><br><span class="line">    <span class="attr">后台接收后封装到实体类中，然后添加到MongoDB数据库</span></span><br><span class="line">    <span class="attr">2</span> <span class="string">查询展示购物车页面：</span></span><br><span class="line">    <span class="attr">由于购物车的信息新鲜度不新鲜，因此查询MongoDB，获取到skuId集合后</span></span><br><span class="line">    <span class="attr">一定要再去mysql查询一次（经过item-service微服），</span></span><br><span class="line">    <span class="attr">如果有更新则展示更新后的数据（不管是否下架），如果不到就表示商品已经被删除了，展示备份数据就好。</span></span><br><span class="line">    <span class="attr">在查询过程中，其实浏览器本地缓存也一样，都是作为备胎作为展示哈哈哈哈。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">查看购物车总结：</span></span><br><span class="line">    <span class="attr">1</span> <span class="string">根据localStorage或者MongoDB获取购物车数据</span></span><br><span class="line">    <span class="attr">2</span> <span class="string">遴选，根据skuId，去item-service 微服中获取mysql的最新数据</span></span><br><span class="line">    <span class="attr">3</span> <span class="string">如果返回的和查询的数量匹配，直接展示新的结果集</span></span><br><span class="line">        <span class="attr">否则有商品删除，需要以备份数据展示</span></span><br><span class="line">        <span class="attr">备份数据指的是mongoDB或localStorage中的不新鲜的数据</span></span><br><span class="line"></span><br><span class="line"><span class="attr">还有一个重要步骤，存入MongoDB要会“认人”，</span></span><br><span class="line"><span class="attr">不可能将别人加入到MongoDB的购物车数据加入到自己的购物车列表中吧！</span></span><br><span class="line"><span class="attr">因此我们还是要利用前面的auth微服，进行身份验证</span></span><br><span class="line"><span class="attr">并且获取到用户id（以及skuid作为MongoDB数据库集合里面的文档联合主键）封装到实体类，添加到MongoDB。</span></span><br><span class="line"><span class="attr">展示列表时根据userid对MongoDB进行条件查询返回数据即可。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">动态文档！</span></span><br><span class="line"><span class="attr">当集合的文档数量比较多时，查询起来就会比较困难，因此根据用户id将文档放到不同的集合中。</span></span><br><span class="line"><span class="attr">余数参数为100，就表示最多有100个集合来存储各个不同用户的购物车文档信息哈！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">最后将本地缓存的购物车信息跟登录后的购物车信息合并。</span></span><br><span class="line">    <span class="attr">首先前端会发送登录校验，</span></span><br><span class="line">    <span class="attr">1</span> <span class="string">如果有登录，就将本地缓存数据post给后台，后台保存到MongoDB中；然后删除本地缓存</span></span><br><span class="line">    <span class="attr">当前端要展示购物车信息时，直接展示MongoDB中所有的购物车信息就好。</span></span><br><span class="line">    <span class="attr">2</span> <span class="string">如果没登录，当前端要展示购物车信息时，展示更新之后的本地购物车缓存信息。</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="购物车" scheme="http://example.com/tags/%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB入门指南</title>
    <link href="http://example.com/2022/07/02/MongoDB%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://example.com/2022/07/02/MongoDB%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</id>
    <published>2022-07-02T15:24:12.000Z</published>
    <updated>2022-07-02T15:32:03.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><h2 id="1-1-什么是MongoDB"><a href="#1-1-什么是MongoDB" class="headerlink" title="1.1.什么是MongoDB ?"></a>1.1.什么是MongoDB ?</h2><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p><p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p><p>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><p>{name:””, age:””}</p><h2 id="1-2-基本概念"><a href="#1-2-基本概念" class="headerlink" title="1.2.基本概念"></a>1.2.基本概念</h2><p>不管我们学习什么数据库都应该学习其中的基础概念，在mongodb中基本的概念包括文档、集合、数据库，下面我们逐个介绍。</p><p>我们通过与MySQL对比，来帮助您更容易理解Mongo中的一些概念：</p><table><thead><tr><th align="left">SQL术语/概念</th><th align="left">MongoDB术语/概念</th><th align="left">解释/说明</th></tr></thead><tbody><tr><td align="left">database</td><td align="left">database</td><td align="left">数据库，mongodb中也可以创建多个数据库，简称db</td></tr><tr><td align="left">table</td><td align="left">collection</td><td align="left">集合，对应数据库中的表。集合的key就是“表的名称”</td></tr><tr><td align="left">row</td><td align="left">document</td><td align="left">文档，对应数据库中的一行，一般是JSON风格。一个集合包含多个文档</td></tr><tr><td align="left">column</td><td align="left">field</td><td align="left">字段，对应数据库每一列。一个文档包含多个字段field</td></tr><tr><td align="left">index</td><td align="left">index</td><td align="left">索引</td></tr><tr><td align="left">table joins</td><td align="left"></td><td align="left">表连接,MongoDB不支持</td></tr><tr><td align="left">primary key</td><td align="left">primary key</td><td align="left">主键,MongoDB自动将<code>_id</code>字段设置为主键</td></tr></tbody></table><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h1><p>本教程中采用docker安装，请确保自己具备docker环境。</p><h2 id="2-1-安装MongoDB"><a href="#2-1-安装MongoDB" class="headerlink" title="2.1.安装MongoDB"></a>2.1.安装MongoDB</h2><p>我们会提供本地MongoDB镜像，如果希望使用最新镜像，也可以到docker-hub拉取。</p><h3 id="2-1-1-加载mongo镜像"><a href="#2-1-1-加载mongo镜像" class="headerlink" title="2.1.1.加载mongo镜像"></a>2.1.1.加载mongo镜像</h3><p>通过下面的命令拉取mongo镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure><p><strong>备选</strong>方案：</p><p>如果网络不好，也可以使用我们提供的镜像。在课前资料中提供了MongoDB的docker镜像：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200730105540832.png" alt="image-20200730105540832"></p><p>首先将mongo.tar上传到你的linux虚拟机中，然后<strong>进入mongo.tar所在的目录</strong>，通过下面的命令加载镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i mongo.tar</span><br></pre></td></tr></table></figure><h3 id="2-1-2-创建容器并运行"><a href="#2-1-2-创建容器并运行" class="headerlink" title="2.1.2.创建容器并运行"></a>2.1.2.创建容器并运行</h3><p>下面我们创建一个docker容器，运行mongo镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run  \</span><br><span class="line">--name ly-mongo \</span><br><span class="line">-e MONGO_INITDB_ROOT_USERNAME=root \</span><br><span class="line">-e MONGO_INITDB_ROOT_PASSWORD=root123 \</span><br><span class="line">-p 27017:27017  \</span><br><span class="line">-v mongo-config:/data/configdb/ \</span><br><span class="line">-v mongo-db:/data/db/ \</span><br><span class="line">--privileged \</span><br><span class="line">-d \</span><br><span class="line">mongo</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>--name</code>：指定容器名称为 ly-mongo</li><li><code>-p</code> : 指定映射端口27017</li><li><code>-v</code> ：指定要挂载的逻辑卷，、<ul><li><code>mongo-config</code>对应mongo的配置目录</li><li><code>mongo-db</code>对应数据目录</li></ul></li><li><code>-- privileged</code> : 授权访问挂载卷</li><li><code>-d</code> : 后台运行</li><li><code>mongo</code> : 镜像名称</li><li><code>- e</code> : 环境变量<ul><li><code>MONGO_INITDB_ROOT_USERNAME</code>：默认用户名设置</li><li><code>MONGO_INITDB_ROOT_PASSWORD</code>：默认密码设置</li></ul></li></ul><p>然后通过命令查看docker运行情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321223333368.png" alt="image-20200321223333368"></p><h3 id="2-1-3-授权"><a href="#2-1-3-授权" class="headerlink" title="2.1.3.授权"></a>2.1.3.授权</h3><p>接下来激活初始化的用户管理员权限。</p><p>以管理员身份进入容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it ly-mongo mongo admin</span><br></pre></td></tr></table></figure><p>然后执行命令.</p><p>切换到admin数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br></pre></td></tr></table></figure><p>激活：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.auth(&quot;root&quot;, &quot;root123&quot;)</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321223737387.png" alt="image-20200321223737387"> </p><h2 id="2-2-安装图形化工具"><a href="#2-2-安装图形化工具" class="headerlink" title="2.2.安装图形化工具"></a>2.2.安装图形化工具</h2><p>这里我们使用一个叫做mongo-express的GUI工具，官网地址：<a href="https://github.com/mongo-express/mongo-express">https://github.com/mongo-express/mongo-express</a></p><p>首先拉取镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo-express</span><br></pre></td></tr></table></figure><p><strong>备选</strong>方案：</p><p>如果网络不好，也可以使用我们提供的镜像。在课前资料中提供了<code>mongo-express</code> 的docker镜像：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200730105610779.png" alt="image-20200730105610779"></p><p>首先将<code>mongo-express.tar</code>上传到你的linux虚拟机中，然后<strong>进入<code>mongo-express</code>所在的目录</strong>，通过下面的命令加载镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i mongo-express.tar </span><br></pre></td></tr></table></figure><p>然后创建并运行容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --name ly-express \</span><br><span class="line"> -e <span class="string">&quot;ME_CONFIG_MONGODB_ADMINUSERNAME=root&quot;</span> \</span><br><span class="line"> -e <span class="string">&quot;ME_CONFIG_MONGODB_ADMINPASSWORD=root123&quot;</span> \</span><br><span class="line"> --link ly-mongo:mongo \</span><br><span class="line"> -p 9081:8081 \</span><br><span class="line"> -d \</span><br><span class="line"> mongo-express</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li><code>-- link</code> ：指定关联的容器:<ul><li><code>ly-mongo</code>：容器名称</li></ul></li><li><code>-e</code> : 环境变量<ul><li><code>ME_CONFIG_MONGODB_ADMINUSERNAME</code>：指定mongo的管理员用户名</li><li><code>ME_CONFIG_MONGODB_ADMINPASSWORD</code>：指定mongo的管理员密码</li></ul></li></ul><p>在浏览器访问：http://{虚拟机ip}:9081即可，例如我的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.206.99:9081</span><br></pre></td></tr></table></figure><p>效果如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321171603837.png" alt="image-20200321171603837"></p><h1 id="3-基本操作"><a href="#3-基本操作" class="headerlink" title="3.基本操作"></a>3.基本操作</h1><p>下面来看看MongoDB的基本操作，官方文档：<a href="https://docs.mongodb.com/manual/text-search/">https://docs.mongodb.com/manual/text-search/</a></p><p>包括：</p><ul><li>Database操作</li><li>Collection操作</li><li>Document操作</li><li>条件查询</li><li>排序</li><li>索引</li><li>聚合</li></ul><p>我们可以通过命令行操作，或者通过mongo-express图形化操作。</p><p>如果需要命令行操作，先执行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器名 bash</span><br></pre></td></tr></table></figure><p>因为我的容器名是<code>leyou-mongo</code>，所以我的命令是这样：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ly-mongo bash</span><br></pre></td></tr></table></figure><p>然后就会进入容器内部，此时输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo -u root</span><br></pre></td></tr></table></figure><p>会提示你输入密码：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200331144247436.png" alt="image-20200331144247436"> </p><p>输入密码后，即可进入。</p><p>即可进入mongodb提供的命令行工具。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321173711853.png" alt="image-20200321173711853"></p><h2 id="3-1-数据库操作"><a href="#3-1-数据库操作" class="headerlink" title="3.1.数据库操作"></a>3.1.数据库操作</h2><p>数据库操作命令包括：</p><ul><li><code>show dbs</code>: 展示所有的数据库</li><li><code>use 数据库名</code>：进入一个数据库，如果不存在，则创建该数据库</li><li><code>db.dropDatabase()</code>：在进入一个数据库后，输入该命令删除当前数据库</li></ul><p>当然，使用图形界面会更直观：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321174302363.png" alt="image-20200321174302363"></p><h2 id="3-2-集合（Collection）操作"><a href="#3-2-集合（Collection）操作" class="headerlink" title="3.2.集合（Collection）操作"></a>3.2.集合（Collection）操作</h2><p>集合操作主要是集合的CRUD。</p><h3 id="3-2-1-创建集合"><a href="#3-2-1-创建集合" class="headerlink" title="3.2.1.创建集合"></a>3.2.1.创建集合</h3><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(name, options)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>name: 要创建的集合名称</li><li>options: 可选参数, 指定有关内存大小及索引的选项</li></ul><p>options 可以是如下参数：</p><table><thead><tr><th align="left">字段</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">capped</td><td align="left">布尔</td><td align="left">（可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。 <strong>当该值为 true 时，必须指定 size 参数。</strong></td></tr><tr><td align="left">size</td><td align="left">数值</td><td align="left">（可选）为固定集合指定一个最大值，以千字节计（KB）。 <strong>如果 capped 为 true，也需要指定该字段。</strong></td></tr><tr><td align="left">max</td><td align="left">数值</td><td align="left">（可选）指定固定集合中包含文档的最大数量。</td></tr></tbody></table><p>在插入文档时，MongoDB 首先检查固定集合的 size 字段，然后检查 max 字段。</p><p>例如，我们创建一个名为test的数据库，并在数据库中添加一个叫做users的集合：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321174624885.png" alt="image-20200321174624885"> </p><h3 id="3-2-2-删除集合"><a href="#3-2-2-删除集合" class="headerlink" title="3.2.2.删除集合"></a>3.2.2.删除集合</h3><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.drop()</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>无</li></ul><p><strong>返回值</strong></p><p>如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。</p><p>示例，删除刚刚的users集合：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321174817853.png" alt="image-20200321174817853"> </p><p>同样，图形界面操作会方便的多：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321175011163.png" alt="image-20200321175011163"></p><h3 id="3-2-3-查看所有的collection"><a href="#3-2-3-查看所有的collection" class="headerlink" title="3.2.3.查看所有的collection"></a>3.2.3.查看所有的collection</h3><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables</span><br></pre></td></tr></table></figure><h2 id="3-3-文档操作"><a href="#3-3-文档操作" class="headerlink" title="3.3.文档操作"></a>3.3.文档操作</h2><p>集合准备好以后，就可以在集合中添加文档，或者对文档做删、改、查操作。</p><p>而mongo中的文档是JSON风格，因此比较容易被大家接收。</p><h3 id="3-3-1-新增文档"><a href="#3-3-1-新增文档" class="headerlink" title="3.3.1.新增文档"></a>3.3.1.新增文档</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.insert(document)</span><br></pre></td></tr></table></figure><p>举例，我们新增一个用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.insertOne(&#123;name:&quot;jack&quot;, age: 21&#125;)</span><br></pre></td></tr></table></figure><p>这样新增的时候mongo会随机生成id，如果要自己指定id，可以这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.insertOne(&#123;_id:1, name:&quot;Lucy&quot;, age: 19&#125;)</span><br></pre></td></tr></table></figure><p>这里的<code>_id</code>是文档的id，也就是主键</p><h3 id="3-3-2-查询文档"><a href="#3-3-2-查询文档" class="headerlink" title="3.3.2.查询文档"></a>3.3.2.查询文档</h3><h4 id="1）基本语法"><a href="#1）基本语法" class="headerlink" title="1）基本语法"></a>1）基本语法</h4><p>MongoDB 查询数据的语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find(query, projection)</span><br></pre></td></tr></table></figure><ul><li><strong>query</strong> ：可选，使用查询操作符指定查询条件</li><li><strong>projection</strong> ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li></ul><p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().pretty()</span><br></pre></td></tr></table></figure><p>pretty() 方法以格式化的方式来显示所有文档。</p><p>例如：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321180620894.png" alt="image-20200321180620894"></p><p>这里我们没有指定条件，那就是查询所有。</p><h4 id="2）条件语法"><a href="#2）条件语法" class="headerlink" title="2）条件语法"></a>2）条件语法</h4><p>其中query的可以支持基本的比较语法，如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：</p><table><thead><tr><th align="left">操作</th><th align="left">格式</th><th align="left">范例</th><th align="left">RDBMS中的类似语句</th></tr></thead><tbody><tr><td align="left">等于</td><td align="left"><code>&#123;key: value&#125;</code></td><td align="left"><code>db.users.find(&#123;&quot;name&quot;:&quot;jack&quot;&#125;)</code></td><td align="left"><code>where name= &#39;jack&#39;</code></td></tr><tr><td align="left">小于</td><td align="left"><code>&#123;key:&#123;$lt:value&#125;&#125;</code></td><td align="left"><code>db.users.find(&#123;&quot;age&quot;:&#123;$lt:25&#125;&#125;)</code></td><td align="left"><code>where age&lt; 25</code></td></tr><tr><td align="left">小于或等于</td><td align="left"><code>&#123;key:&#123;$lte:value&#125;&#125;</code></td><td align="left"><code>db.users.find(&#123;&quot;age&quot;:&#123;$lte:25&#125;&#125;)</code></td><td align="left"><code>where age&lt;= 25</code></td></tr><tr><td align="left">大于</td><td align="left"><code>&#123;key:&#123;$gt:value&#125;&#125;</code></td><td align="left"><code>db.users.find(&#123;&quot;age&quot;:&#123;$gt:18&#125;&#125;)</code></td><td align="left"><code>where age&gt; 18</code></td></tr><tr><td align="left">大于或等于</td><td align="left"><code>&#123;key:&#123;$gte:value&#125;&#125;</code></td><td align="left"><code>db.users.find(&#123;&quot;age&quot;:&#123;$gte:18&#125;&#125;)</code></td><td align="left"><code>where age&gt;= 18</code></td></tr><tr><td align="left">不等于</td><td align="left"><code>&#123;key:&#123;$ne:value&#125;&#125;</code></td><td align="left"><code>db.users.find(&#123;&quot;age&quot;:&#123;$ne:18&#125;&#125;)</code></td><td align="left"><code>where age!=18</code></td></tr></tbody></table><h4 id="3）类型判断"><a href="#3）类型判断" class="headerlink" title="3）类型判断"></a>3）类型判断</h4><p>mongo中文档虽然是json，但是却包含多种数据类型，常见的如下：</p><table><thead><tr><th align="left"><strong>类型</strong></th><th align="left"><strong>数字</strong></th><th align="left"><strong>备注</strong></th></tr></thead><tbody><tr><td align="left">Double</td><td align="left">1</td><td align="left"></td></tr><tr><td align="left">String</td><td align="left">2</td><td align="left"></td></tr><tr><td align="left">Object</td><td align="left">3</td><td align="left"></td></tr><tr><td align="left">Array</td><td align="left">4</td><td align="left"></td></tr><tr><td align="left">Binary data</td><td align="left">5</td><td align="left"></td></tr><tr><td align="left">Object id</td><td align="left">7</td><td align="left"></td></tr><tr><td align="left">Boolean</td><td align="left">8</td><td align="left"></td></tr><tr><td align="left">Date</td><td align="left">9</td><td align="left"></td></tr><tr><td align="left">Null</td><td align="left">10</td><td align="left"></td></tr></tbody></table><p>因此，我们还可以在查询的时候，把数据类型作为匹配条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;&quot;name&quot; : &#123;$type : &#x27;string&#x27;&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="4）AND和OR"><a href="#4）AND和OR" class="headerlink" title="4）AND和OR"></a>4）AND和OR</h4><p>MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。</p><p>语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;key1:value1, key2:value2&#125;)</span><br></pre></td></tr></table></figure><p>OR 条件语句使用了关键字 <code>$or</code>,语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>$or</code>后面的数组中的多个条件之间是or的关系</p><h3 id="3-3-3-修改文档"><a href="#3-3-3-修改文档" class="headerlink" title="3.3.3.修改文档"></a>3.3.3.修改文档</h3><p>update() 方法用于更新已存在的文档。语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;update&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: &lt;boolean&gt;,</span><br><span class="line">     multi: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><strong>query</strong> : update的查询条件，类似sql update查询内where后面的。</li><li><strong>update</strong> : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</li><li><strong>upsert</strong> : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li><li><strong>multi</strong> : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li><li><strong>writeConcern</strong> :可选，抛出异常的级别。</li></ul><p>示例，我们把之前的用户的age字段从21修改为24：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321181124446.png" alt="image-20200321181124446"></p><p>这里我们指定的更新条件为{}，就是代表任意文档，那么集合中的第一个文档会被修改。</p><h3 id="3-3-4-删除文档"><a href="#3-3-4-删除文档" class="headerlink" title="3.3.4.删除文档"></a>3.3.4.删除文档</h3><p>remove() 方法的基本语法格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.collection.remove(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;justOne&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果你的 MongoDB 是 2.6 版本以后的，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.collection.remove(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     justOne: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><strong>query</strong> :（可选）删除的文档的条件。</li><li><strong>justOne</strong> : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</li><li><strong>writeConcern</strong> :（可选）抛出异常的级别。</li></ul><p>示例：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321181240788.png" alt="image-20200321181240788"> </p><p>这里删除的匹配条件为{}，那么集合中的所有文档会被删除。</p><h3 id="3-3-5-图形化界面"><a href="#3-3-5-图形化界面" class="headerlink" title="3.3.5.图形化界面"></a>3.3.5.图形化界面</h3><p>通用，如果在图形化界面操作会非常简单。</p><h4 id="新增："><a href="#新增：" class="headerlink" title="新增："></a>新增：</h4><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321181633208.png" alt="image-20200321181633208"></p><p>然后弹出的窗口填写文档：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321181648560.png" alt="image-20200321181648560"></p><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><p>输入查询条件，点击Find按钮即可：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321181843195.png" alt="image-20200321181843195"></p><h4 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h4><p>点击上一步中查询到的文档，即可进入编辑模式：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321181940103.png" alt="image-20200321181940103"></p><h2 id="3-4-排序"><a href="#3-4-排序" class="headerlink" title="3.4.排序"></a>3.4.排序</h2><p>sort()方法基本语法如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().sort(&#123;KEY:1&#125;)</span><br></pre></td></tr></table></figure><ul><li>key：排序的字段</li><li>1：这里可以是1或-1，分别代表升序或降序</li></ul><p>例如，我们对年龄升序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find().sort(&#123;age: 1&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-5-索引"><a href="#3-5-索引" class="headerlink" title="3.5.索引"></a>3.5.索引</h2><p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。</p><p>这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。</p><p>索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构</p><p>MongoDB使用 createIndex() 方法来创建索引。</p><blockquote><p>注意在 3.0.0 版本前创建索引方法为 db.collection.ensureIndex()，之后的版本使用了 db.collection.createIndex() 方法，ensureIndex() 还能用，但只是 createIndex() 的别名。</p></blockquote><h3 id="3-5-1-语法"><a href="#3-5-1-语法" class="headerlink" title="3.5.1.语法"></a>3.5.1.语法</h3><p>createIndex()方法基本语法格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection_name.createIndex(keys, options)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>keys：是排序的字段，是键值对格式，键是字段名，值是1或-1</li><li>options：索引选项</li></ul><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.createIndex(&#123;&quot;title&quot;:1&#125;)</span><br></pre></td></tr></table></figure><p>语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。</p><p>createIndex() 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.createIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br></pre></td></tr></table></figure><p>createIndex() 接收可选参数options，可选参数列表如下：</p><table><thead><tr><th align="left">Parameter</th><th align="left">Type</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">background</td><td align="left">Boolean</td><td align="left">建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为<strong>false</strong>。</td></tr><tr><td align="left">unique</td><td align="left">Boolean</td><td align="left">建立的索引是否唯一。指定为true创建唯一索引。默认值为<strong>false</strong>.</td></tr><tr><td align="left">name</td><td align="left">string</td><td align="left">索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td></tr><tr><td align="left">dropDups</td><td align="left">Boolean</td><td align="left"><strong>3.0+版本已废弃。</strong>在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 <strong>false</strong>.</td></tr><tr><td align="left">sparse</td><td align="left">Boolean</td><td align="left">对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 <strong>false</strong>.</td></tr><tr><td align="left">expireAfterSeconds</td><td align="left">integer</td><td align="left">指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td></tr><tr><td align="left">v</td><td align="left">index version</td><td align="left">索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td></tr><tr><td align="left">weights</td><td align="left">document</td><td align="left">索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td></tr><tr><td align="left">default_language</td><td align="left">string</td><td align="left">对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td></tr><tr><td align="left">language_override</td><td align="left">string</td><td align="left">对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.</td></tr></tbody></table><h3 id="3-5-2-实例"><a href="#3-5-2-实例" class="headerlink" title="3.5.2.实例"></a>3.5.2.实例</h3><p>我们可以在集合中添加多条数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.users.insert(&#123;name:&quot;rose&quot;, age: 18&#125;)</span><br><span class="line">db.users.insert(&#123;name:&quot;Lucy&quot;, age: 19&#125;)</span><br></pre></td></tr></table></figure><p>然后创建索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.createIndex(&#123;name: 1&#125;,&#123;background: true&#125;)</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321202428166.png" alt="image-20200321202428166"></p><h1 id="4-Java客户端"><a href="#4-Java客户端" class="headerlink" title="4.Java客户端"></a>4.Java客户端</h1><p>接下来，我们一起学习如何通过java代码操作MongoDB。</p><h2 id="4-1-SpringDataMongoDB"><a href="#4-1-SpringDataMongoDB" class="headerlink" title="4.1.SpringDataMongoDB"></a>4.1.SpringDataMongoDB</h2><p>Spring已经对MongoDB客户端整合，并作为SpringData中的一个子模块。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321204531248.png" alt="image-20200321204531248"></p><p>与SpringData中的其它子模块一样，其中的各种实现都是基于SpringDataCommon中的一些接口和注解。例如：</p><ul><li><code>Repository&lt;T,ID&gt;</code>：定义基本的CRUD方法，T是实体类类型，ID是其中的id类型</li><li><code>@Document</code>：定义数据库信息，如mongo中的集合名</li><li><code>@Id</code>：主键</li></ul><p>熟悉SpringData的同学对于其中的玩法应该非常熟练了，这里不再赘述</p><h2 id="4-2-创建Demo工程"><a href="#4-2-创建Demo工程" class="headerlink" title="4.2.创建Demo工程"></a>4.2.创建Demo工程</h2><p>这里选择Spring的脚手架工具：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321205305057.png" alt="image-20200321205305057"></p><p>项目信息：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321205320970.png" alt="image-20200321205320970"></p><p>相关依赖：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321205330738.png" alt="image-20200321205330738"></p><p>这里选择了SpringBoot中对于MongoDB的支持。</p><p>完整的pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mongo-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-环境准备"><a href="#4-3-环境准备" class="headerlink" title="4.3.环境准备"></a>4.3.环境准备</h2><p>现在， 我们先准备一些简单运行环境。</p><h3 id="4-3-1-实体类"><a href="#4-3-1-实体类" class="headerlink" title="4.3.1.实体类"></a>4.3.1.实体类</h3><p>我们准备一个实体类，作为存入MongoDB的数据模型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mongo.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Document(&quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类相关注解：</p><ul><li><code>@Document</code>：声明实体类相关的集合<ul><li><code>users</code>：就是集合名称</li></ul></li><li><code>@Id</code>：声明将来作为<code>_id</code>的字段</li></ul><h3 id="4-3-2-Repository"><a href="#4-3-2-Repository" class="headerlink" title="4.3.2.Repository"></a>4.3.2.Repository</h3><p>SpringData中有一个Repository接口，代表了所有数据操作的顶级接口。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321210242022.png" alt="image-20200321210242022"></p><p>它下面还包含很多儿子，定义了各种CRUD的方法：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321210420247.png" alt="image-20200321210420247"> </p><p>在MongoDB中，也有一个对应的接口：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/MongoDB/image-20200321210512886.png" alt="image-20200321210512886"> </p><p>因此，只要我们的定义的接口继承了MongoRepository，就会包含这些CRUD的方法了。现在，我们定义一个Repository。</p><p>在<code>cn.itcast.mongo.repository</code>中定义一个<code>UserRepository</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们继承MongoRepository的时候指定了两个泛型：</p><ul><li>User：实体类类型</li><li>Long：其中的ID类型</li></ul><h3 id="4-3-3-新建用户"><a href="#4-3-3-新建用户" class="headerlink" title="4.3.3.新建用户"></a>4.3.3.新建用户</h3><p>为了保证安全，我们不把管理员root放到代码中，而是生成一个新的用户。</p><p>通过命令行进入docker容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it leyou-mongo bash</span><br></pre></td></tr></table></figure><p>然后就会进入容器内部，此时输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo -u root</span><br></pre></td></tr></table></figure><p>输入密码后进入mongo控制台</p><p>新建一个仓库carts，<strong>必须</strong>进入carts库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use carts</span><br></pre></td></tr></table></figure><p>创建新用户：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; user: &#x27;leyou&#x27;, pwd: &#x27;<span class="number">123</span>&#x27;, roles: [ &#123; role: <span class="string">&quot;readWrite&quot;</span>, db: <span class="string">&quot;carts&quot;</span> &#125; ] &#125;);</span><br></pre></td></tr></table></figure><p>我们创建一个新用户：</p><ul><li>用户名：leyou</li><li>密码：123</li><li>权限：readWrite（读和写）</li><li>可访问数据库：carts</li></ul><h3 id="4-3-4-配置mongo地址"><a href="#4-3-4-配置mongo地址" class="headerlink" title="4.3.4.配置mongo地址"></a>4.3.4.配置mongo地址</h3><p>刚刚创建了新用户，我们就可以在项目中，使用新建立的用户来连接MongoDB</p><p>在项目的application.yml文件中指定mongo的地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://leyou:123@192.168.206.99/carts</span></span><br></pre></td></tr></table></figure><p>uri地址的语法：</p><ul><li><code>mongodb</code>:固定写法</li><li><code>leyou:123</code>：用户名:密码</li><li><code>192.168.206.99</code>：mongodb所在的虚拟机地址</li><li><code>carts</code>：database的名称</li></ul><h2 id="4-4-CRUD"><a href="#4-4-CRUD" class="headerlink" title="4.4.CRUD"></a>4.4.CRUD</h2><p>来看下基本的CRUD代码</p><p>创建一个单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mongo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mongo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mongo.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-4-1-新增"><a href="#4-4-1-新增" class="headerlink" title="4.4.1.新增"></a>4.4.1.新增</h3><p>一次增一个文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">&quot;Amy&quot;</span>, <span class="number">16</span>);</span><br><span class="line">    userRepository.save(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量新增文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">&quot;Amy&quot;</span>, <span class="number">16</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">&quot;Lucy&quot;</span>, <span class="number">21</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="number">3L</span>, <span class="string">&quot;Jack&quot;</span>, <span class="number">20</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="number">4L</span>, <span class="string">&quot;Tom&quot;</span>, <span class="number">25</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="number">5L</span>, <span class="string">&quot;John&quot;</span>, <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line">    userRepository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-更新"><a href="#4-4-2-更新" class="headerlink" title="4.4.2.更新"></a>4.4.2.更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// id存在，则修改</span></span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">&quot;Amy&quot;</span>, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    userRepository.save(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-删除"><a href="#4-4-3-删除" class="headerlink" title="4.4.3.删除"></a>4.4.3.删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userRepository.deleteById(<span class="number">2L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-4-根据id查询"><a href="#4-4-4-根据id查询" class="headerlink" title="4.4.4.根据id查询"></a>4.4.4.根据id查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;User&gt; result = userRepository.findById(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">    result.ifPresent(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-5-查询所有"><a href="#4-4-5-查询所有" class="headerlink" title="4.4.5.查询所有"></a>4.4.5.查询所有</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userRepository.findAll();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-6-带分页和排序"><a href="#4-4-6-带分页和排序" class="headerlink" title="4.4.6.带分页和排序"></a>4.4.6.带分页和排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 查询，PageRequest就是分页条件对象，</span></span><br><span class="line">    Page&lt;User&gt; info = userRepository.findAll(PageRequest.of(<span class="number">0</span>, <span class="number">3</span>, Sort.Direction.DESC, <span class="string">&quot;age&quot;</span>));</span><br><span class="line">    <span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">int</span> totalPages = info.getTotalPages();</span><br><span class="line">    System.out.println(<span class="string">&quot;totalPages = &quot;</span> + totalPages);</span><br><span class="line">    <span class="comment">// 总条数</span></span><br><span class="line">    <span class="keyword">long</span> totalElements = info.getTotalElements();</span><br><span class="line">    System.out.println(<span class="string">&quot;totalElements = &quot;</span> + totalElements);</span><br><span class="line">    <span class="comment">// 当前页结果集合</span></span><br><span class="line">    List&lt;User&gt; list = info.getContent();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-7-自定义查询"><a href="#4-4-7-自定义查询" class="headerlink" title="4.4.7.自定义查询"></a>4.4.7.自定义查询</h3><p>我们在UserRepository接口中，按照固定单词创建一个新的方法，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByAgeLessThan</span><span class="params">(Integer age)</span></span>;</span><br></pre></td></tr></table></figure><p>SpringData会根据方法中单词的含义，自动生成对应的查询语句，完成查询。</p><p>我们无需实现任何功能，直接即可使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userRepository.findByAgeLessThan(<span class="number">21</span>);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义方法中使用的短语包括下面这些，官网介绍：<a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.6.RELEASE/reference/html/#mongo.repositories">https://docs.spring.io/spring-data/mongodb/docs/2.2.6.RELEASE/reference/html/#mongo.repositories</a></p><table><thead><tr><th align="left">Keyword</th><th align="left">Sample</th><th align="left">Logical result</th></tr></thead><tbody><tr><td align="left"><code>After</code></td><td align="left"><code>findByBirthdateAfter(Date date)</code></td><td align="left"><code>&#123;&quot;birthdate&quot; : &#123;&quot;$gt&quot; : date&#125;&#125;</code></td></tr><tr><td align="left"><code>GreaterThan</code></td><td align="left"><code>findByAgeGreaterThan(int age)</code></td><td align="left"><code>&#123;&quot;age&quot; : &#123;&quot;$gt&quot; : age&#125;&#125;</code></td></tr><tr><td align="left"><code>GreaterThanEqual</code></td><td align="left"><code>findByAgeGreaterThanEqual(int age)</code></td><td align="left"><code>&#123;&quot;age&quot; : &#123;&quot;$gte&quot; : age&#125;&#125;</code></td></tr><tr><td align="left"><code>Before</code></td><td align="left"><code>findByBirthdateBefore(Date date)</code></td><td align="left"><code>&#123;&quot;birthdate&quot; : &#123;&quot;$lt&quot; : date&#125;&#125;</code></td></tr><tr><td align="left"><code>LessThan</code></td><td align="left"><code>findByAgeLessThan(int age)</code></td><td align="left"><code>&#123;&quot;age&quot; : &#123;&quot;$lt&quot; : age&#125;&#125;</code></td></tr><tr><td align="left"><code>LessThanEqual</code></td><td align="left"><code>findByAgeLessThanEqual(int age)</code></td><td align="left"><code>&#123;&quot;age&quot; : &#123;&quot;$lte&quot; : age&#125;&#125;</code></td></tr><tr><td align="left"><code>Between</code></td><td align="left"><code>findByAgeBetween(int from, int to)</code> <code>findByAgeBetween(Range range)</code></td><td align="left"><code>&#123;&quot;age&quot; : &#123;&quot;$gt&quot; : from, &quot;$lt&quot; : to&#125;&#125; lower / upper bounds ($gt / $gte &amp; $lt/ $lte) according to Range</code></td></tr><tr><td align="left"><code>In</code></td><td align="left"><code>findByAgeIn(Collection ages)</code></td><td align="left"><code>&#123;&quot;age&quot; : &#123;&quot;$in&quot; : [ages…]&#125;&#125;</code></td></tr><tr><td align="left"><code>NotIn</code></td><td align="left"><code>findByAgeNotIn(Collection ages)</code></td><td align="left"><code>&#123;&quot;age&quot; : &#123;&quot;$nin&quot; : [ages…]&#125;&#125;</code></td></tr><tr><td align="left"><code>IsNotNull</code>, <code>NotNull</code></td><td align="left"><code>findByFirstnameNotNull()</code></td><td align="left"><code>&#123;&quot;firstname&quot; : &#123;&quot;$ne&quot; : null&#125;&#125;</code></td></tr><tr><td align="left"><code>IsNull</code>, <code>Null</code></td><td align="left"><code>findByFirstnameNull()</code></td><td align="left"><code>&#123;&quot;firstname&quot; : null&#125;</code></td></tr><tr><td align="left"><code>Like</code>, <code>StartingWith</code>, <code>EndingWith</code></td><td align="left"><code>findByFirstnameLike(String name)</code></td><td align="left"><code>&#123;&quot;firstname&quot; : name&#125; (name as regex)</code></td></tr><tr><td align="left"><code>NotLike</code>, <code>IsNotLike</code></td><td align="left"><code>findByFirstnameNotLike(String name)</code></td><td align="left"><code>&#123;&quot;firstname&quot; : &#123; &quot;$not&quot; : name &#125;&#125; (name as regex)</code></td></tr><tr><td align="left"><code>Containing</code> on String</td><td align="left"><code>findByFirstnameContaining(String name)</code></td><td align="left"><code>&#123;&quot;firstname&quot; : name&#125; (name as regex)</code></td></tr><tr><td align="left"><code>NotContaining</code> on String</td><td align="left"><code>findByFirstnameNotContaining(String name)</code></td><td align="left"><code>&#123;&quot;firstname&quot; : &#123; &quot;$not&quot; : name&#125;&#125; (name as regex)</code></td></tr><tr><td align="left"><code>Containing</code> on Collection</td><td align="left"><code>findByAddressesContaining(Address address)</code></td><td align="left"><code>&#123;&quot;addresses&quot; : &#123; &quot;$in&quot; : address&#125;&#125;</code></td></tr><tr><td align="left"><code>NotContaining</code> on Collection</td><td align="left"><code>findByAddressesNotContaining(Address address)</code></td><td align="left"><code>&#123;&quot;addresses&quot; : &#123; &quot;$not&quot; : &#123; &quot;$in&quot; : address&#125;&#125;&#125;</code></td></tr><tr><td align="left"><code>Regex</code></td><td align="left"><code>findByFirstnameRegex(String firstname)</code></td><td align="left"><code>&#123;&quot;firstname&quot; : &#123;&quot;$regex&quot; : firstname &#125;&#125;</code></td></tr><tr><td align="left"><code>(No keyword)</code></td><td align="left"><code>findByFirstname(String name)</code></td><td align="left"><code>&#123;&quot;firstname&quot; : name&#125;</code></td></tr><tr><td align="left"><code>Not</code></td><td align="left"><code>findByFirstnameNot(String name)</code></td><td align="left"><code>&#123;&quot;firstname&quot; : &#123;&quot;$ne&quot; : name&#125;&#125;</code></td></tr><tr><td align="left"><code>Near</code></td><td align="left"><code>findByLocationNear(Point point)</code></td><td align="left"><code>&#123;&quot;location&quot; : &#123;&quot;$near&quot; : [x,y]&#125;&#125;</code></td></tr><tr><td align="left"><code>Near</code></td><td align="left"><code>findByLocationNear(Point point, Distance max)</code></td><td align="left"><code>&#123;&quot;location&quot; : &#123;&quot;$near&quot; : [x,y], &quot;$maxDistance&quot; : max&#125;&#125;</code></td></tr><tr><td align="left"><code>Near</code></td><td align="left"><code>findByLocationNear(Point point, Distance min, Distance max)</code></td><td align="left"><code>&#123;&quot;location&quot; : &#123;&quot;$near&quot; : [x,y], &quot;$minDistance&quot; : min, &quot;$maxDistance&quot; : max&#125;&#125;</code></td></tr><tr><td align="left"><code>Within</code></td><td align="left"><code>findByLocationWithin(Circle circle)</code></td><td align="left"><code>&#123;&quot;location&quot; : &#123;&quot;$geoWithin&quot; : &#123;&quot;$center&quot; : [ [x, y], distance]&#125;&#125;&#125;</code></td></tr><tr><td align="left"><code>Within</code></td><td align="left"><code>findByLocationWithin(Box box)</code></td><td align="left"><code>&#123;&quot;location&quot; : &#123;&quot;$geoWithin&quot; : &#123;&quot;$box&quot; : [ [x1, y1], x2, y2]&#125;&#125;&#125;</code></td></tr><tr><td align="left"><code>IsTrue</code>, <code>True</code></td><td align="left"><code>findByActiveIsTrue()</code></td><td align="left"><code>&#123;&quot;active&quot; : true&#125;</code></td></tr><tr><td align="left"><code>IsFalse</code>, <code>False</code></td><td align="left"><code>findByActiveIsFalse()</code></td><td align="left"><code>&#123;&quot;active&quot; : false&#125;</code></td></tr><tr><td align="left"><code>Exists</code></td><td align="left"><code>findByLocationExists(boolean exists)</code></td><td align="left"><code>&#123;&quot;location&quot; : &#123;&quot;$exists&quot; : exists &#125;&#125;</code></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是MongoDB&quot;&gt;&lt;a href=&quot;#1-1-什么是MongoDB&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="MongoDB" scheme="http://example.com/categories/MongoDB/"/>
    
    
    <category term="MongoDB" scheme="http://example.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-用户中心-JWT登录02</title>
    <link href="http://example.com/2022/07/02/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-JWT%E7%99%BB%E5%BD%9502/"/>
    <id>http://example.com/2022/07/02/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-JWT%E7%99%BB%E5%BD%9502/</id>
    <published>2022-07-02T15:23:37.000Z</published>
    <updated>2022-07-02T15:39:29.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">理解网关登录拦截业务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">理解如何退出登录</span></span><br><span class="line"><span class="meta">-</span> <span class="string">理解如何刷新token</span></span><br></pre></td></tr></table></figure><h1 id="1-登录超时控制"><a href="#1-登录超时控制" class="headerlink" title="1.登录超时控制"></a>1.登录超时控制</h1><p>一般登录状态都有一个超时时间，超过时间后登录状态会失效。目前我们给用户颁发的JWT令牌并未设置超时时间，也就是说用户<strong>只要不关闭浏览器，登录状态就一直有效</strong>。</p><p>那么，我们该如何实现登录超时控制呢？</p><h2 id="1-1-思路分析"><a href="#1-1-思路分析" class="headerlink" title="1.1.思路分析"></a>1.1.思路分析</h2><p>登录超时控制有两种实现思路：</p><ul><li>思路一：在颁发给用户的JWT中设置超时时间，每次校验JWT顺便校验时间</li><li>思路二：在服务端记录用户登录超时时间，即便jwt有效，服务端过期依然算登录失效</li></ul><p>两种思路都可以，我们选择哪一种呢？</p><p>思路一的<strong>优点</strong>是过期时间在JWT中就有，无需服务端记录，减轻服务端压力；<strong>缺点</strong>是由于JWT的签名机制，一旦生成后不能修改，所以登录续期实现起来很麻烦。</p><p>思路二的<strong>优点</strong>是过期时间由服务端记录，控制用户的登录过期、续期、登出都很方便；<strong>缺点</strong>是给服务端带来了存储压力。</p><p>两种方案都可以，本例中我们采用<strong>思路二</strong>。</p><p>因此，这里我们需要完成两部分内容：</p><ul><li>登录时配置超时时间：<ul><li>用户<strong>登录时</strong>记录JWT，并设置超时时间到redis中，采用string数据类型</li><li>key是用户id，值是JWT中的jti，并且设置过期时间，比如30分钟</li></ul></li><li>用户访问时更新超时时间<ul><li>用户<strong>每次</strong>访问服务端，都更新redis的有效期</li></ul></li></ul><h2 id="1-2-新的登录、验证逻辑"><a href="#1-2-新的登录、验证逻辑" class="headerlink" title="1.2.新的登录、验证逻辑"></a>1.2.新的登录、验证逻辑</h2><p>按照之前的分析，用户登录时，就需要把JWT中的jti信息记录到redis中，并设置过期时间。因此需要修改登录逻辑，流程图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12JWT%E7%99%BB%E5%BD%9502/image-20200620193817217.png" alt="image-20200620193817217"></p><p>其中的1.4和1.5部分是新加入的逻辑。</p><p>另外，验证登录时，也需要验证redis中的JTI，如果到期则JTI在redis中就不存在了，验证流程如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12JWT%E7%99%BB%E5%BD%9502/image-20200620230127321.png" alt="image-20200620230127321"></p><p>其中的1.3、1.4、1.5是新增的流程。</p><h3 id="1-2-1-定义Redis常量类"><a href="#1-2-1-定义Redis常量类" class="headerlink" title="1.2.1.定义Redis常量类"></a>1.2.1.定义Redis常量类</h3><p>存入Redis时，需要使用到如：key的前缀、过期时间、等数据。我们在<code>ly-auth-pojo</code>的<code>com.leyou.auth.constants</code>包中定义一个常量类，记录这些值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.constants;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConstants</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录时记录TokenID的key前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String JTI_KEY_PREFIX = <span class="string">&quot;auth:login:uid:&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录时记录TokenID的超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer TOKEN_EXPIRE_SECONDS = <span class="number">1800</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-修改JwtUtils"><a href="#1-2-2-修改JwtUtils" class="headerlink" title="1.2.2.修改JwtUtils"></a>1.2.2.修改JwtUtils</h3><p>我们可以把设置过期时间的代码直接写到JwtUtils中的<code>createJwt()</code>方法中，然后验证过期时间的代码写到JwtUtils的<code>parseJwt()</code>方法中。</p><p>首先在修改<code>ly-auth-pojo</code>的pom文件中引入redis的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改<code>ly-auth-pojo</code>中<code>com.leyou.auth.pojo</code>包下的<code>JwtUtils</code>：</p><p>登录时，存储到redis的逻辑：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12JWT%E7%99%BB%E5%BD%9502/image-20200620231914998.png" alt="image-20200620231914998"></p><p>验证JWT时，验证是否超时的逻辑：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12JWT%E7%99%BB%E5%BD%9502/image-20200620231246170.png" alt="image-20200620231246170"></p><p>完整的JwtUtils代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.constants.RedisConstants;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.Payload;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jws;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtParser;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.security.Keys;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT解析器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtParser jwtParser;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秘钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecretKey secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtUtils</span><span class="params">(String key, StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 生成秘钥</span></span><br><span class="line">        secretKey = Keys.hmacShaKeyFor(key.getBytes(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line">        <span class="comment">// Redis工具</span></span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="comment">// JWT解析器</span></span><br><span class="line">        <span class="keyword">this</span>.jwtParser = Jwts.parserBuilder().setSigningKey(secretKey).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt，用默认的JTI</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDetail 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createJwt</span><span class="params">(UserDetail userDetail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createJwt(userDetail, RedisConstants.TOKEN_EXPIRE_SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt，自己指定的JTI</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDetail 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createJwt</span><span class="params">(UserDetail userDetail, <span class="keyword">int</span> expireSeconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.生成jti</span></span><br><span class="line">            String jti = createJti();</span><br><span class="line">            <span class="comment">// 2.生成token</span></span><br><span class="line">            String jwt = Jwts.builder().signWith(secretKey)</span><br><span class="line">                    .setId(jti)</span><br><span class="line">                    .claim(<span class="string">&quot;user&quot;</span>, mapper.writeValueAsString(userDetail))</span><br><span class="line">                    .compact();</span><br><span class="line">            <span class="comment">// 3.记录在redis中</span></span><br><span class="line">            redisTemplate.opsForValue().set(RedisConstants.JTI_KEY_PREFIX + userDetail.getId(), jti,</span><br><span class="line">                    expireSeconds, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">return</span> jwt;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析jwt，并将用户信息转为指定的Clazz类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 载荷，包含JTI和用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payload <span class="title">parseJwt</span><span class="params">(String jwt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.验证并解析jwt</span></span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = jwtParser.parseClaimsJws(jwt);</span><br><span class="line">        Claims claims = claimsJws.getBody();</span><br><span class="line">        <span class="comment">// 2.解析载荷数据</span></span><br><span class="line">        Payload payload = <span class="keyword">new</span> Payload();</span><br><span class="line">        payload.setJti(claims.getId());</span><br><span class="line">        UserDetail userDetail = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userDetail = mapper.readValue(claims.get(<span class="string">&quot;user&quot;</span>, String.class), UserDetail.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户信息解析失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        payload.setUserDetail(userDetail);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.验证是否过期</span></span><br><span class="line">        <span class="comment">// 3.1.取出redis中jti</span></span><br><span class="line">        String cacheJti = redisTemplate.opsForValue().get(RedisConstants.JTI_KEY_PREFIX + userDetail.getId());</span><br><span class="line">        <span class="comment">// 3.2.获取jwt中的jti</span></span><br><span class="line">        String jti = payload.getJti();</span><br><span class="line">        <span class="comment">// 3.3.比较</span></span><br><span class="line">        <span class="keyword">if</span>(cacheJti == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;登录已经过期!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!cacheJti.equals(jti))&#123;</span><br><span class="line">            <span class="comment">// 有jti，但是不是当前jwt，说明其它人登录把当前jwt踢下去了</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户可能在其它设备登录!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> payload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createJti</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.replace(UUID.randomUUID().toString(), <span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-引入Redis配置"><a href="#1-2-3-引入Redis配置" class="headerlink" title="1.2.3.引入Redis配置"></a>1.2.3.引入Redis配置</h3><p>因为JwtUtils中用到了StringRedisTemplate，因此我们需要在注册JwtUtils的时候注入。</p><p>修改<code>ly-auth-api</code>中的<code>AuthConfiguration</code>类：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12JWT%E7%99%BB%E5%BD%9502/image-20200620232515228.png" alt="image-20200620232515228"></p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.client.AuthClient;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;ly.auth&quot;, name = &#123;&quot;clientId&quot;, &quot;secret&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ClientProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthClient authClient;</span><br><span class="line">    <span class="keyword">private</span> ClientProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthConfiguration</span><span class="params">(AuthClient authClient, ClientProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authClient = authClient;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtUtils <span class="title">jwtUtils</span><span class="params">(StringRedisTemplate redisTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 查询秘钥</span></span><br><span class="line">            String key = authClient.getSecretKey(properties.getClientId(), properties.getSecret());</span><br><span class="line">            <span class="comment">// 创建JwtUtils</span></span><br><span class="line">            JwtUtils jwtUtils = <span class="keyword">new</span> JwtUtils(key, redisTemplate);</span><br><span class="line">            log.info(<span class="string">&quot;秘钥加载成功。&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> jwtUtils;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;初始化JwtUtils失败，&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>ly-auth-service</code>中的<code>JwtConfig</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ly.jwt.key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtUtils <span class="title">jwtUtils</span><span class="params">(StringRedisTemplate redisTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtUtils(key, redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-配置Redis地址"><a href="#1-3-配置Redis地址" class="headerlink" title="1.3.配置Redis地址"></a>1.3.配置Redis地址</h2><p>现在，我们需要在用到JwtUtils的地方都引入redis的配置，包括：ly-auth-service和ly-user-service。</p><p>修改<code>ly-auth-service</code>中的application.yml文件，添加redis配置：application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br></pre></td></tr></table></figure><p>修改<code>ly-user-service</code>中的application.yml文件，添加<code>redis</code>配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br></pre></td></tr></table></figure><h2 id="1-4-重启测试"><a href="#1-4-重启测试" class="headerlink" title="1.4.重启测试"></a>1.4.重启测试</h2><p>重启ly-auth-service和ly-user-service，再次登录，可以看到redis中已经写入数据：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12JWT%E7%99%BB%E5%BD%9502/image-20200620232946909.png" alt="image-20200620232946909"> </p><h1 id="2-刷新登录时间"><a href="#2-刷新登录时间" class="headerlink" title="2.刷新登录时间"></a>2.刷新登录时间</h1><p>我们给JWT设置了过期时间，如果用户登录后超过</p><h2 id="2-1-思路分析"><a href="#2-1-思路分析" class="headerlink" title="2.1.思路分析"></a>2.1.思路分析</h2><p>我们签发给用户的token是永久有效的，但是Redis的标示只存活30分钟。</p><p>当用户登录后，浏览网页时，很快30分钟就会过去，登录失效。用户付款时提示说您尚未登录，这样用户体验会很差。</p><p>我们需要做到：</p><ul><li>只要用户一直访问，则登录状态一直存在，Redis不会过期</li><li>用户超过30分钟不访问，则登录状态失效</li></ul><p>如何实现？</p><p>显然，需要在用户每次访问我们的微服务时，都去刷新Redis的缓存即可。</p><p>而用户的一切请求都会经过网关Gateway的过滤器，因此我们需要在网关中添加一个过滤器，拦截所有进入的请求，如果是<strong>已登录用户</strong>的请求，则<strong>刷新Redis</strong>的超时时间。</p><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12JWT%E7%99%BB%E5%BD%9502/image-20200621173630150.png" alt="image-20200621173630150"></p><p>流程解读：</p><ul><li>1.携带JWT访问：用户浏览浏览器过程中不可避免的会向服务端发送请求，都会携带jwt</li><li>2.验证并解析jwt：<ul><li>用户一切请求都经过网关，</li><li>网关拦截并验证jwt是为了判断用户是否登录</li><li>如果登录则刷新redis，未登录则什么都不做</li></ul></li><li>3.刷新jwt在redis的有效期：利用redis的expire命令重置剩余有效期</li><li>4.放行请求到微服务</li><li>5.微服务执行自己业务逻辑并返回结果</li></ul><h2 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2.代码实现"></a>2.2.代码实现</h2><p>我们需要做的事情包括：</p><ul><li>在网关引入<code>ly-auth-api</code>的相关依赖，确保能使用<code>JwtUtils</code>的功能</li><li>在网关编写过滤器，拦截用户请求，刷新redis中的jwt有效期</li></ul><h3 id="2-2-1-引入依赖"><a href="#2-2-1-引入依赖" class="headerlink" title="2.2.1.引入依赖"></a>2.2.1.引入依赖</h3><p>首先，我们在网关<code>ly-gateway</code>中引入<code>ly-auth-api</code>的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.support.SpringBootServletInitializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.SpringCloudApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">//开启feign的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyGateway</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyGateway.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在网关中加入配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">api-gateway</span> </span><br><span class="line">    <span class="attr">secret:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-刷新有效期工具"><a href="#2-2-2-刷新有效期工具" class="headerlink" title="2.2.2.刷新有效期工具"></a>2.2.2.刷新有效期工具</h3><p>刷新redis有效期的代码，我们也可以添加到JwtUtils中，方便使用。</p><p>现在，修改<code>ly-auth-pojo</code>中的JwtUtils类，添加两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新jwt有效期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshJwt</span><span class="params">(Long userId)</span></span>&#123;</span><br><span class="line">    refreshJwt(userId, RedisConstants.TOKEN_EXPIRE_SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新jwt有效期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireSeconds 有效期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshJwt</span><span class="params">(Long userId, <span class="keyword">int</span> expireSeconds)</span></span>&#123;</span><br><span class="line">    redisTemplate.expire(RedisConstants.JTI_KEY_PREFIX + userId, expireSeconds, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-编写过滤器"><a href="#2-2-2-编写过滤器" class="headerlink" title="2.2.2.编写过滤器"></a>2.2.2.编写过滤器</h3><p>在<code>ly-gateway</code>中定义过滤器，拦截用户请求，并刷新有效期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.gateway.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.constants.JwtConstants;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.Payload;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpCookie;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginFilter</span><span class="params">(JwtUtils jwtUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jwtUtils = jwtUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取Request对象</span></span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        <span class="comment">// 2.获取cookie</span></span><br><span class="line">        HttpCookie cookie = request.getCookies().getFirst(JwtConstants.COOKIE_NAME);</span><br><span class="line">        <span class="keyword">if</span> (cookie == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 没有登录，放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.校验token是否有效</span></span><br><span class="line">        String jwt = cookie.getValue();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3.1.解析并验证token</span></span><br><span class="line">            Payload payload = jwtUtils.parseJwt(jwt);</span><br><span class="line">            <span class="comment">// 3.2.获取用户</span></span><br><span class="line">            UserDetail userInfo = payload.getUserDetail();</span><br><span class="line">            <span class="comment">// 3.3.刷新jwt</span></span><br><span class="line">            jwtUtils.refreshJwt(userInfo.getId());</span><br><span class="line">            log.info(<span class="string">&quot;用户&#123;&#125;正在访问&#123;&#125;&quot;</span>, userInfo.getUsername(), request.getURI().getPath());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 解析失败，token有误</span></span><br><span class="line">            log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 登录拦截，可以采用最高优先级！</span></span><br><span class="line">        <span class="keyword">return</span> HIGHEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>刷新登录时间大总结：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">下发的token时间不设置时间，那就是永久有效，</span></span><br><span class="line"><span class="attr">那么按照JWT方式进行无状态登录时，会一直在登录状态，因此要设置登录时长，超过时间就自动下线。</span></span><br><span class="line"><span class="attr">因此需要给token设置超时时间，方法就是通过给token的id存放到redis中，并设置超时时间为30分钟。</span></span><br><span class="line"><span class="attr">微服务进行服务时，除了校验该用户身份信息（是否登录，微服务身份）之外，</span></span><br><span class="line"><span class="attr">还要去redis中看看tokenid有没有过期。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">但还要解决一个问题就是，如果是重复登录，那岂不是要在redis中保存很多个jwtid？？？</span></span><br><span class="line"><span class="attr">方法就是，以唯一的username作为key，jwtid作为value存进redis中哈，</span></span><br><span class="line"><span class="attr">如果是重复登录，那么最新的jwtid就会被保存下来。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">校验时：</span></span><br><span class="line"><span class="attr">首先校验jwt是否合法，合法后生成用户上下文信息，然后去redis中校验是否存在该jwtid。</span></span><br><span class="line"><span class="meta">ps：过期失效时redis会直接删除key-value哦，如果去redis中查找为null时</span> <span class="string">，就是登录过期了！</span></span><br><span class="line"><span class="attr">因为校验jwt身份合法，达到redis查找，就表示已经登录过的，因此就是因为登录过期了。</span></span><br><span class="line"><span class="attr">ps</span>:<span class="string">前端中的token会一直存在，只不过redis失效了而已。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">问题又来了：如果我一直在前端进行交互，半个钟过后还是会登录失效？？？那显然不符合需求嘛</span></span><br><span class="line"><span class="attr">因此在访问交互时，会不断刷新登录超时时间，回到半个钟！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">但凡和后台交互，就需要刷新更新时间，这样子岂不是代码冗余？？而且不好维护！！！</span></span><br><span class="line"><span class="attr">如何解决？？？想都不用想，肯定抽离到公共区，像前面将校验，授权等抽离到授权中心一样；</span></span><br><span class="line"><span class="attr">而我们注意到，但凡和后台交互就一定会经过网关，因此，将登录时长的更新放在网关里。</span></span><br><span class="line"><span class="meta">去刷新redis中的TTL</span> <span class="string">（存活时间:Time To Live)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">因此需要在网关中写一个登录过滤器，</span></span><br><span class="line"><span class="attr">登录器里面分为两个分支，在过滤器中获取token</span></span><br><span class="line"><span class="attr">1</span> <span class="string">如果token不为空，那么解析token，获取userDetail，进而获取username，</span></span><br><span class="line"><span class="attr">然后在redis中根据key（username）来更新ttl，也就是val（jwtid）,然后放行。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">2</span> <span class="string">token为空，那么就直接放行，就是没有登录情况下的普通浏览功能。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">分支1</span> <span class="string">的详细解析：</span></span><br><span class="line"><span class="attr">首先，登录过滤器可以获取到request从而得到jwt，解析验证JWT（token），</span></span><br><span class="line"><span class="attr">将其解析为UserDetail就需要JwtUtils这个bean</span></span><br><span class="line"></span><br><span class="line"><span class="meta">JwtUtils这个类定义在auth_pojo中，但是JwtUtils</span> <span class="string">的bean是在auth_api微服才声明的，因此我们网关微服务引入的依赖包是auth_api</span></span><br><span class="line"></span><br><span class="line"><span class="meta">又又又又又然后：JwtUtils</span> <span class="string">这个bean的声明是在auth_api微服的authConfiguration 配置类中的；</span></span><br><span class="line"><span class="attr">authConfiguration</span> <span class="string">配置类如下（前面也对这个条件类做过解析了）</span></span><br><span class="line"><span class="attr">@Slf4j</span></span><br><span class="line"><span class="attr">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix</span> = <span class="string">&quot;ly.auth&quot;, name = &#123;&quot;clientId&quot;, &quot;secret&quot;&#125;)</span></span><br><span class="line"><span class="attr">@EnableConfigurationProperties(ClientProperties.class)</span></span><br><span class="line"><span class="attr">public</span> <span class="string">class AuthConfiguration &#123;</span></span><br><span class="line"><span class="meta">需要条件才能使得这个配置类生效，使得JwtUtils</span> <span class="string">这个bean能被放到容器中。</span></span><br><span class="line"><span class="attr">因此需要在网关配置文件中配置好：</span></span><br><span class="line"><span class="attr">ly</span>:<span class="string"></span></span><br><span class="line"><span class="attr">auth</span>:<span class="string"></span></span><br><span class="line"><span class="attr">clientId</span>: <span class="string">api-gateway</span></span><br><span class="line"><span class="attr">secret</span>: <span class="string">1234</span></span><br><span class="line"><span class="attr">其实配置这个就是使得属性类ClientProperties里面的属性值被赋值，</span></span><br><span class="line"><span class="attr">授权中心就是拿属性类对象的属性值去数据库的微服务表查询，</span></span><br><span class="line"><span class="attr">看看这个“网关微服务”是否是受信任的，然后才有了后面的JWT解析工作！！！</span></span><br><span class="line"><span class="meta">接着去启动器类中添加auth_api</span> <span class="string">Bean的扫描路径</span></span><br><span class="line"></span><br><span class="line"><span class="attr">接着，还没完呐！！！</span></span><br><span class="line"><span class="meta">auth_api微服的配置类AuthConfiguration需要注入AuthClient</span> <span class="string">这个Bean，AuthClient这个Bean是一个feign的客户端</span></span><br><span class="line"><span class="attr">那么要实现feign的扫描，需要在网关中引入open-feign依赖，然后再启动类中也要添加feign的扫描注解@EnableFeignClients</span></span><br><span class="line"><span class="attr">至此，网关启动器完整注解如下：</span></span><br><span class="line"><span class="meta">@SpringBootApplication（scanBasePackages</span> = <span class="string">&#123;&quot;com.leyou.gateway&quot;,&quot;com.leyou.auth.config&quot;&#125;    Spring容器的端扫描路径</span></span><br><span class="line"><span class="attr">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableFeignClients(&quot;com.leyou.auth.client&quot;)</span>    <span class="string">feign客户端扫描路径</span></span><br><span class="line"><span class="attr">public</span> <span class="string">class LyGateway&#123;</span></span><br><span class="line">    <span class="attr">public</span> <span class="string">static void main(String[] args) &#123;</span></span><br><span class="line">        <span class="meta">SpringApplication.run(LyGateway.class,</span> <span class="string">args);</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">完成上面步骤可能会发生错误，在网关中引入auth_api依赖时引入了不该引入的依赖，在pom文件中exclusion掉就好。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：<br>微服A想要使用微服B的功能（要使用某个Bean），方法步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">导入微服务B的依赖包</span></span><br><span class="line"><span class="attr">2</span> <span class="string">配置好配置文件（覆盖默认值，或者给配置类的生效添加条件，配置的值一般是赋值给属性类对象，后面会用到）</span></span><br><span class="line"><span class="attr">3</span> <span class="string">在微服务A自己的方法中注入微服务B的bean，并在启动器中添加扫描Bean路径以及Feign扫描路径的注解。</span></span><br><span class="line"><span class="attr">4</span> <span class="string">就可以使用微服B的某个Bean里面的方法工具啦。</span></span><br></pre></td></tr></table></figure><h1 id="3-退出登录"><a href="#3-退出登录" class="headerlink" title="3.退出登录"></a>3.退出登录</h1><p>首页左上角，登录后除了显示用户名，还有一个注销登录按钮：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12JWT%E7%99%BB%E5%BD%9502/1554627778912.png" alt="1554627778912"></p><p>点击这个按钮，该如何实现退出登录呢？</p><h2 id="3-1-思路分析"><a href="#3-1-思路分析" class="headerlink" title="3.1.思路分析"></a>3.1.思路分析</h2><p>回想下<strong>以前</strong>怎么实现的：</p><ul><li>用户点击退出，发起请求到服务端</li><li>服务端删除用户session即可</li></ul><p>我们现在信息保存在两个地方：cookie中的JWT、Redis中的JTI控制有效期，并没有session这东西，该如何退出？</p><p>有同学会想，太简单了，直接删除cookie就可以了。</p><p>别忘了，我们设置了<strong>httponly，JS无法操作cookie</strong>。因此，删除cookie也必须<strong>发起请求到服务端，由服务端来删除cookie</strong>。</p><p>那么，是不是删除了cookie，用户就完成了退出登录呢？</p><p>设想一下，删除了cookie，只是让用户在当前浏览器上的jwt删除了，但是这个jwt依然是有效的！</p><p>这就是JWT的另外一个缺点了，无法控制jwt让其失效。如果用户提前备份了jwt，那么重新填写到cookie后，登录状态依然有效。</p><p>所以，我们<strong>不仅仅要让浏览器端清除cookie，而且要让这个cookie中的jwt失效</strong>！我们在redis中记录了JTI，因此只要删除了Redis中的JTI信息，这个用户登录凭证就失效了！</p><p>综上所述，我们要实现退出登录要做的事情有两件：**(先访问后端，然后后端来实现下面两件事)**</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">删除redis中的用户记录JTI</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">删除浏览器cookie</span></span><br></pre></td></tr></table></figure><h2 id="3-2-流程图"><a href="#3-2-流程图" class="headerlink" title="3.2.流程图"></a>3.2.流程图</h2><p>退出登录：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12JWT%E7%99%BB%E5%BD%9502/image-20200505103416685.png" alt="image-20200505103416685"></p><p>步骤如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">客户发请求到服务端</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">服务验证token，获取用户</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">根据用户id，删除redis中的JTI</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">删除cookie</span></span><br></pre></td></tr></table></figure><p><strong>为什么要删除redis里面的JTI？？？</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">因为如果不删除，尽管在浏览器里面设置了token为空，有效时间为0，</span></span><br><span class="line"><span class="attr">但是如果保存了上次登录的token，然后再浏览器中手动添加上次登录的token，（+域名+路径）</span></span><br><span class="line"><span class="attr">刷新页面就会重新是上次登录的状态，</span></span><br><span class="line"><span class="attr">这就给了不法分子转空子的情况，因此，redis中必须要删除JTI</span></span><br></pre></td></tr></table></figure><h2 id="3-3-业务实现"><a href="#3-3-业务实现" class="headerlink" title="3.3.业务实现"></a>3.3.业务实现</h2><p>通过浏览器的请求分析，可以得知退出登录的请求信息：</p><ul><li>请求方式：POST</li><li>请求路径：/user/logout</li><li>请求参数：无，携带cookie</li><li>返回值：无</li></ul><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.web</code>包的<code>UserAuthController</code>中，添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应数据，写cookie用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;logout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    userAuthService.logout(request, response);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service</code>包的<code>UserAuthService</code>中，添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service.impl</code>包的<code>UserAuthServiceImpl</code>中，添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取用户cookie</span></span><br><span class="line">    String jwt = CookieUtils.getCookieValue(request, UserTokenConstants.COOKIE_NAME);</span><br><span class="line">    <span class="comment">// 2.校验cookie中的token的有效性</span></span><br><span class="line">    Payload payload = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        payload = jwtUtils.parseJwt(jwt);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 3.如果无效，什么都不做</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.如果有效，删除cookie（重新写一个cookie，maxAge为0）</span></span><br><span class="line">    CookieUtils.deleteCookie(JwtConstants.COOKIE_NAME, JwtConstants.DOMAIN, response);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.删除redis中的JTI</span></span><br><span class="line">    <span class="comment">// 5.1.获取用户信息</span></span><br><span class="line">    UserDetail userDetail = payload.getUserDetail();</span><br><span class="line">    <span class="comment">// 5.2.删除redis数据</span></span><br><span class="line">    redisTemplate.delete(RedisConstants.JTI_KEY_PREFIX + userDetail.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-面试常见问题"><a href="#4-面试常见问题" class="headerlink" title="4.面试常见问题"></a>4.面试常见问题</h1><h2 id="4-1-Jwt和Spring-Security的对比："><a href="#4-1-Jwt和Spring-Security的对比：" class="headerlink" title="4.1.Jwt和Spring Security的对比："></a>4.1.Jwt和Spring Security的对比：</h2><p>JWT的：</p><ul><li><p>1 优点：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">无需在服务端存储用户数据（无需存session），减轻服务端压力</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">轻量级，json风格，比较简单</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">跨语言特性</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">有利于水平扩展(集群访问时，一个用户的操作不必每次都访问一台服务器)</span></span><br></pre></td></tr></table></figure></li><li><p>2 缺点：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1：token一旦签发，无法修改</span></span><br><span class="line">  <span class="attr">（1）无法更新token有效期，用户登录状态刷新难以实现</span></span><br><span class="line">  <span class="meta">（注意，token有限期是永久的，上面说了登录时间的有效性是通过删除redis中的JWT</span> <span class="string">id）</span></span><br><span class="line">  <span class="attr">（2）无法销毁一个token，服务端不能对用户状态进行绝对控制</span></span><br><span class="line">  <span class="attr">（因此我们上面做登出操作是的token“失效”，是通过给token赋值为空“”，然后cookie有效时间为0.）</span></span><br><span class="line"><span class="attr">2：不包含权限控制（因此仅仅是做授权）</span></span><br><span class="line"><span class="attr">权限的控制理解就是：添加token时添加token时指定域名+路径，这个路径就是服务器的资源访问路径；</span></span><br><span class="line"><span class="attr">有那个业务的访问路径就表示有那个业务操作权限（每一次访问都会校验登录身份），</span></span><br><span class="line"><span class="attr">访问token参数携带的路径外的路径，token就不会被浏览器携带过去给后端。</span></span><br><span class="line"><span class="meta">因此要么给token全部路径</span> <span class="string">&quot;/&quot;,要么就是指定路径，但由于token一旦签发，那么路径也不能被修改了，</span></span><br><span class="line"><span class="attr">所以权限控制就没能达到灵活控制的效果。</span></span><br></pre></td></tr></table></figure></li></ul><p>SpringSecurity：</p><ul><li><p>1 优点：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">用户信息保存在服务端，服务端可以对用户状态绝对控制</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">基于Spring，无缝整合，修改登录逻辑，其实就是添加过滤器</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">整合权限管理</span></span><br></pre></td></tr></table></figure></li><li><p>2 缺点：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">限定了语言（java，因为是在spring框架下嘛）</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">实现复杂，基于一连串的过滤器链</span></span><br><span class="line"><span class="meta">3-</span> <span class="string">需要在服务端保存用户信息，增加服务端压力</span></span><br><span class="line"><span class="meta">4-</span> <span class="string">依赖于tomcat的HttpSession、</span></span><br><span class="line"><span class="attr">如果是分布式项目，session不共享，登录失效，需要借助于SpringSession，</span></span><br><span class="line"><span class="attr">实现共享session效果（利用redis代替tomcat的session）</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-2-登录控制问题"><a href="#4-2-登录控制问题" class="headerlink" title="4.2.登录控制问题"></a>4.2.登录控制问题</h2><ul><li><p><strong>你们使用JWT做登录凭证，如何解决token注销问题</strong></p><p>答：jwt的缺陷是token生成后无法修改，因此无法让token失效。只能采用其它方案来弥补，基本思路如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1）用户登录后，生成JWT，其中包含用户身份</span></span><br><span class="line"><span class="attr">2）以用户id为key，把JWT的id存入redis，只有redis中有id的JWT，才是有效的JWT</span></span><br><span class="line"><span class="attr">(注意，你这个用户id要是唯一值才行，因此注册时要提示用户id不能重复哦,</span></span><br><span class="line"><span class="attr">如果id重复也可以想其他方法，如果说用你手机作为存入redis中的key，手机号总该是唯一的了吧)</span></span><br><span class="line"><span class="attr">3）并且给Redis设置有效期，有效期到自动删除</span></span><br><span class="line"><span class="attr">4）退出登录时，把ID从Redis删除即可</span></span><br></pre></td></tr></table></figure></li><li><p><strong>怎么解决登录超时后的登录续签问题？</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">判断登录是否超时的标准是redis，而不是JWT，</span></span><br><span class="line"><span class="attr">因此每次用户访问网关，我们都会刷新redis的数据有效期，保证登录状态不断。</span></span><br></pre></td></tr></table></figure></li><li><p><strong>如何解决异地登录或跨设备登录问题？</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">方案一：不允许多端登录</span></span><br><span class="line"><span class="attr">如果账户在第二个设备登录，自然会将redis中的JWT覆盖，那么之前的登录凭证就成了无效凭证。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">方案二：允许多端登录</span></span><br><span class="line"><span class="attr">存入redis时，redis的类型可以选择set，这样一个用户可以具备多个JWT的id，实现多端登录。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">又比如说，优酷会员，最多五个人登录，那么就可以设置set的容量为5。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">又比如说根据请求头信息，判断是pc，还是phone，还是ipad，存入redis中时给key添加后缀，</span></span><br><span class="line"><span class="attr">那么一个jwt就可以在redis中对应多个key-val了，而不会被覆盖。</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-3-cookie安全问题"><a href="#4-3-cookie安全问题" class="headerlink" title="4.3.cookie安全问题"></a>4.3.cookie安全问题</h2><ul><li><p><strong>JWT中的cookie泄露，是否会泄露用户隐私？</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">不会，虽然说jwt前两部分的一下子就能被解密成为明文，</span></span><br><span class="line"><span class="attr">但是因为JWT中只保存用户id这样的非敏感字段，不存放例如手机、密码之类的信息，因此不会泄露用户信息。</span></span><br></pre></td></tr></table></figure></li><li><p><strong>如何解决token被篡改问题？</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">答：token中的数据可以篡改，但是签名无法篡改，否则服务端认证根本不会通过，</span></span><br><span class="line"><span class="attr">因此篡改的token是无法通过服务端校验的</span></span><br></pre></td></tr></table></figure></li><li><p><strong>如何防止token的伪造</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">与上个问题类似，token中带有签名认证，而签名需要私钥加密生成。</span></span><br><span class="line"><span class="attr">只要私钥不泄露，就不可能有人伪造token，因为其它秘钥生成的token是不会被公钥认可的。</span></span><br></pre></td></tr></table></figure></li><li><p><strong>如何解决cookie被盗用问题？</strong>（这个问题了解就好）</p><p>答：<strong>cookie被盗用的可能性主要包括下面几种：</strong></p><ul><li><strong>1 XSS攻击：</strong>这个可以在前端页面渲染时对 数据做安全处理即可，而且我们的<strong>cookie使用了Httponly为true</strong>，可以防止JS脚本的攻击。</li><li>2 <strong>CSRF攻击</strong>：(跨域请求攻击)<ul><li>利用Referer头，防盗链</li></ul></li><li>3 <strong>数据抓包，获取用户cookie</strong>：我们采用了HTTPS协议通信，无法获取请求的任何数据</li><li>4 <strong>请求重放攻击：</strong>对于普通用户的请求没有对请求重放做防御，而是对部分业务做好了<code>幂等</code>处理。运行管理系统中会对token添加随机码，认证token一次有效，来预防请求重放攻击。</li><li>用户电脑中毒：这个无法防范。</li></ul></li><li><p><strong>用户的cookie被禁用怎么办？</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1 cookie一般情况下，是不会被禁用，因为普通人根本不知道是什么是cookie，一般不用管，</span></span><br><span class="line"><span class="attr">为了友好，我们可以给用户一个提示：你的cookie已经被禁用了，请启用cookie。</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2 把jwt作为响应头返回，前端浏览器JS把token写到本地存储（sessionStorage），</span></span><br><span class="line"><span class="attr">要求前端每次发ajax，都必须自己携带token。</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-4-权限问题"><a href="#4-4-权限问题" class="headerlink" title="4.4.权限问题"></a>4.4.权限问题</h2><ul><li><p><strong>如何完成权限校验的？</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">首先关于权限的理解：</span></span><br><span class="line"><span class="attr">上面也解释了，签发jwt时就指明了token的域名+路径，</span></span><br><span class="line"><span class="attr">路径就是访问的资源路径，有那个路径就表示有那个资源访问的权限。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">我们的实现方法就是：</span></span><br><span class="line"><span class="attr">在网关中利用过滤器，拦截一切请求，在过滤器中，解析和验证jwt，获取用户身份，</span></span><br><span class="line"><span class="attr">查询用户权限(token中的资源访问路径）再判断用户当前访问的路径是否超出权限（在token中的路径范围）</span></span><br><span class="line"><span class="attr">包含在范围内就表示有权限，不在就没有权限。</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-5-跨域登录问题"><a href="#4-5-跨域登录问题" class="headerlink" title="4.5.跨域登录问题"></a>4.5.跨域登录问题</h2><p><strong>单点登录</strong>，顾名思义：在分布式服务中，用户<strong>只需要在一处登录，即可在各个受信任的服务器之间</strong>，共享登录状态，称为单点登录。</p><p><strong>任何登录都离不开cookie</strong>，如果cookie无法使用或共享，就会导致登录凭证无法共享，导致登录状态无法共享。例如因为跨域名的多个服务，其cookie不可共享，导致登录失效。</p><p>因此实现单点登录有多种方式，其<strong>区别就在于是否能解决跨域登录</strong></p><ul><li><p>1 同域名单点登录</p><ul><li><p>分布式服务共享二级域名，二级以上域名不同，此时cookie可以共享。解决思路：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1-</span> <span class="string">JWT无状态登录</span></span><br><span class="line"><span class="meta">2-</span> <span class="string">共享Session（比如借助于SpringSession）</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>2 跨域单点登录</p><ul><li>服务二级域名就不同，<strong>导致cookie无法共享</strong>，解决办法：<ul><li>OAuth协议实现单点登录：<a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html">Oauth2.0协议</a>，成熟的框架：<a href="https://blog.csdn.net/anumbrella/article/details/80821486">CAS</a></li></ul></li></ul></li></ul><p>CAS原理图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12JWT%E7%99%BB%E5%BD%9502/dddl.png"></p><h1 id="5-MongoDB"><a href="#5-MongoDB" class="headerlink" title="5.MongoDB"></a>5.MongoDB</h1><p>后续购物车功能我们计划使用MongoDB服务器，那么MongoDB该如何使用呢？参考下面一篇博客：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//gaominghui123.github.io/2022/07/02/MongoDB%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="JWT" scheme="http://example.com/tags/JWT/"/>
    
    <category term="登录" scheme="http://example.com/tags/%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-用户中心-JWT登录01</title>
    <link href="http://example.com/2022/07/01/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-JWT%E7%99%BB%E5%BD%9501/"/>
    <id>http://example.com/2022/07/01/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-JWT%E7%99%BB%E5%BD%9501/</id>
    <published>2022-07-01T09:28:17.000Z</published>
    <updated>2022-07-02T14:00:03.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">了解什么是无状态登录</span></span><br><span class="line"><span class="meta">-</span> <span class="string">了解JWT原理</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现登录授权功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现首页登录状态判断</span></span><br></pre></td></tr></table></figure><h1 id="1-无状态登录原理"><a href="#1-无状态登录原理" class="headerlink" title="1.无状态登录原理"></a>1.无状态登录原理</h1><h2 id="1-1-什么是有状态？"><a href="#1-1-什么是有状态？" class="headerlink" title="1.1.什么是有状态？"></a>1.1.什么是有状态？</h2><p>有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如tomcat中的session。</p><p>例如登录：用户登录后，我们把登录者的信息保存在服务端session中，并且给用户一个cookie值，记录对应的session。然后下次请求，用户携带cookie值来，我们就能识别到对应session，从而找到用户的信息。</p><p><strong>关于cookie跟session的描述：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//blog.csdn.net/weixin_62304567/article/details/122205094</span></span><br></pre></td></tr></table></figure><p>缺点是什么？</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">服务端保存大量数据，增加服务端压力</span></span><br><span class="line"><span class="meta">-</span> <span class="string">服务端保存用户状态，无法进行水平扩展</span></span><br><span class="line"><span class="meta">-</span> <span class="string">客户端请求依赖服务端，多次请求必须访问同一台服务器</span></span><br></pre></td></tr></table></figure><h2 id="1-2-什么是无状态"><a href="#1-2-什么是无状态" class="headerlink" title="1.2.什么是无状态"></a>1.2.什么是无状态</h2><p>微服务集群中的每个服务，对外提供的都是Rest风格的接口。而Rest风格的一个最重要的规范就是：服务的无状态性，即：</p><ul><li><strong>服务端不保存任何客户端请求者信息</strong></li><li>客户端的每次请求必须具备<code>自描述信息</code>，通过这些信息识别客户端身份</li></ul><p>带来的好处是什么呢？</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">客户端请求不依赖服务端的信息，任何多次请求不需要必须访问到同一台服务</span></span><br><span class="line"><span class="meta">-</span> <span class="string">服务端的集群和状态对客户端透明</span></span><br><span class="line"><span class="meta">-</span> <span class="string">服务端可以任意的迁移和伸缩</span></span><br><span class="line"><span class="meta">-</span> <span class="string">减小服务端存储压力</span></span><br></pre></td></tr></table></figure><h2 id="1-3-如何实现无状态"><a href="#1-3-如何实现无状态" class="headerlink" title="1.3.如何实现无状态"></a>1.3.如何实现无状态</h2><p>无状态登录的流程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</span></span><br><span class="line"><span class="meta">-</span> <span class="string">认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证</span></span><br><span class="line"><span class="meta">-</span> <span class="string">以后每次请求，客户端都携带认证的token</span></span><br><span class="line"><span class="meta">-</span> <span class="string">服务端对token进行解密，判断是否有效。</span></span><br></pre></td></tr></table></figure><p>流程图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527300483893.png" alt="1527300483893"></p><p>整个登录过程中，最关键的点是什么？</p><p><strong>token的安全性</strong></p><p>token是识别客户端身份的唯一标示，如果加密不够严密，被人伪造那就完蛋了。</p><p>采用何种方式加密才是安全可靠的呢？</p><p>我们将采用<code>JWT</code>来生成token，保证token的安全性</p><h2 id="1-4-JWT"><a href="#1-4-JWT" class="headerlink" title="1.4.JWT"></a>1.4.JWT</h2><h3 id="1-4-1-简介"><a href="#1-4-1-简介" class="headerlink" title="1.4.1.简介"></a>1.4.1.简介</h3><p>JWT，全称是Json Web Token， 是JSON风格轻量级的授权和身份认证规范，可实现无状态、分布式的Web应用授权；官网：<a href="https://jwt.io/">https://jwt.io</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527301027008.png" alt="1527301027008"></p><p>GitHub上jwt的java客户端：<a href="https://github.com/jwtk/jjwt">https://github.com/jwtk/jjwt</a></p><h3 id="1-4-2-数据格式"><a href="#1-4-2-数据格式" class="headerlink" title="1.4.2.数据格式"></a>1.4.2.数据格式</h3><p>JWT包含三部分数据：</p><ul><li><p><strong>1 Header：头部，通常头部有两部分信息：</strong></p><ul><li>token类型，这里是JWT</li><li>签名算法，自定义</li></ul><p>我们会对头部进行base64加密（可解密），得到第一部分数据</p></li><li><p><strong>2 Payload：载荷，就是有效数据，一般包含下面信息：</strong></p><ul><li>标准载荷：JWT规定的信息，jwt的元数据：<ul><li>JTI: JWT的id，当前jwt的唯一标识（像身份证号）</li><li>IAT:  issue at 签发时间 </li><li>EXP：过期时间</li><li>SUB：签发人</li><li>…</li></ul></li><li>自定义载荷：<ul><li>用户身份信息，（注意，这里因为采用base64加密，可解密，因此不要存放敏感信息，一般是id之类的，不要放手机，密码等敏感信息）</li></ul></li></ul><p>这部分也会采用base64加密，得到第二部分数据</p></li><li><p><strong>3 Signature：签名，是整个数据的认证信息。</strong>一般根据前两步的数据，再加上服务的的密钥（secret）（不要泄漏，最好周期性更换），通过加密算法生成。用于验证整个数据完整和可靠性</p></li></ul><p>生成的数据格式：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527322512370.png" alt="1527322512370"></p><p>可以看到分为3段，每段就是上面的一部分数据。</p><h2 id="1-5-JWT登录流程"><a href="#1-5-JWT登录流程" class="headerlink" title="1.5.JWT登录流程"></a>1.5.JWT登录流程</h2><p>登录一般包含授权、鉴权两部分：</p><ul><li><p>登录：也就是授权，authorize –&gt; authorization 授权</p></li><li><p>验证登录：也就是鉴权，authenticate –&gt; authentication 鉴权</p></li></ul><p>流程图如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200614172855833.png" alt="image-20200614172855833"></p><ul><li><p>授权流程authorize：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1、用户请求登录，携带用户名密码到`授权中心`</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2、`授权中心`携带用户名密码，到`用户中心`查询用户</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3、查询如果正确，`生成JWT`凭证</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4、把JWT写入用户cookie，带给前端。</span></span><br></pre></td></tr></table></figure></li><li><p>鉴权流程authenticate：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1、用户请求某微服务功能，携带JWT</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2、微服务验证JWT是否有效</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3、微服务判断校验结果，成功或失败</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4、失败则直接返回401</span></span><br><span class="line"><span class="meta">-</span> <span class="string">5、成功则处理业务并返回</span></span><br></pre></td></tr></table></figure></li></ul><p>因为JWT签发的token中已经包含了用户的身份信息，并且每次请求都会携带，这样,微服务就无需保存用户信息，甚至无需去数据库查询，完全符合了Rest的无状态规范。</p><p>拓展：<strong>微服务如何验证JWT有效性</strong>，</p><p>也就是说授权中心具体如何生成jwt的第三部分（签名部分），微服务又如何来解析验证你的签名有没有效？？？</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</span></span><br><span class="line">    <span class="attr">header</span> <span class="string">(base64后的)</span></span><br><span class="line">    <span class="attr">payload</span> <span class="string">(base64后的)</span></span><br><span class="line">    <span class="attr">secret</span></span><br><span class="line"></span><br><span class="line"><span class="attr">这个部分需要base64加密后的header和base64加密后的payload使用.</span></span><br><span class="line"><span class="attr">连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。</span></span><br><span class="line"><span class="meta">将这三部分用.连接成一个完整的字符串,构成了最终的jwt</span>:<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="attr">注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，</span></span><br><span class="line"><span class="attr">secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，</span></span><br><span class="line"><span class="attr">在任何场景都不应该流露出去。</span></span><br><span class="line"><span class="meta">一旦客户端得知这个secret,</span> <span class="string">那就意味着客户端是可以自我签发jwt了。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">拿到secret密钥后，对签名</span> <span class="string">解密，跟jwt前面两部分内容比对，一致，那么就表名身份合法。</span></span><br></pre></td></tr></table></figure><h1 id="2-编写JWT工具"><a href="#2-编写JWT工具" class="headerlink" title="2.编写JWT工具"></a>2.编写JWT工具</h1><p>因为生成jwt，解析jwt这样的行为以后在其它微服务中也会用到，因此我们会抽取成工具，放到<code>ly-auth-pojo</code>中。 </p><p>我们会用到比较流行的java语言的JWT工具，jjwt，官网如下：</p><h2 id="2-1-依赖"><a href="#2-1-依赖" class="headerlink" title="2.1.依赖"></a>2.1.依赖</h2><p>我们需要先在<code>ly-auth-pojo</code>中引入JWT依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-载荷对象"><a href="#2-2-载荷对象" class="headerlink" title="2.2.载荷对象"></a>2.2.载荷对象</h2><p>JWT中，会保存载荷数据，我们计划存储2部分：</p><ul><li>jti：jwt的id</li><li>UserDetail：用户数据</li></ul><p>为了方便后期获取，我们定义一个类来封装。</p><p>我们在<code>ly-auth-pojo</code>中的<code>com.leyou.auth.dto</code>包下添加一个实体类，代表载荷信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payload</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String jti;</span><br><span class="line">    <span class="keyword">private</span> UserDetail userDetail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>载荷中的userInfo信息，也需要一个实体类表示，这里我们定义一个UserDetail类。</p><p>这里我们假设用户信息包含2部分：</p><ul><li>id：用户id</li><li>username：用户名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetail</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-工具"><a href="#2-3-工具" class="headerlink" title="2.3.工具"></a>2.3.工具</h2><p>我们在<code>ly-auth-pojo</code>中的<code>com.leyou.auth.utils</code>包下创建一个工具类，用来封装几个方法：</p><ul><li>createJwt() ：生成JWT</li><li>parseJwt() ：验证并解析JWT</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.Payload;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jws;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtParser;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.security.Keys;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT解析器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtParser jwtParser;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秘钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecretKey secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtUtils</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 生成秘钥</span></span><br><span class="line">        secretKey = Keys.hmacShaKeyFor(key.getBytes(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line">        <span class="comment">// JWT解析器</span></span><br><span class="line">        <span class="keyword">this</span>.jwtParser = Jwts.parserBuilder().setSigningKey(secretKey).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt，用默认的JTI</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDetails 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createJwt</span><span class="params">(Object userDetails)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createJwt(userDetails, <span class="number">1800</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt，自己指定的JTI</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDetails 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createJwt</span><span class="params">(Object userDetails, <span class="keyword">int</span> expireSeconds)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 生成token</span></span><br><span class="line">            <span class="keyword">return</span> Jwts.builder().signWith(secretKey)</span><br><span class="line">                    .setId(createJti())</span><br><span class="line">                    .claim(<span class="string">&quot;user&quot;</span>, mapper.writeValueAsString(userDetails))</span><br><span class="line">                    .setExpiration(DateTime.now().plusSeconds(expireSeconds).toDate())</span><br><span class="line">                    .compact();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析jwt，并将用户信息转为指定的Clazz类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt   token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 载荷，包含JTI和用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payload <span class="title">parseJwt</span><span class="params">(String jwt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jws&lt;Claims&gt; claimsJws = jwtParser.parseClaimsJws(jwt);</span><br><span class="line">            Claims claims = claimsJws.getBody();</span><br><span class="line"></span><br><span class="line">            Payload payload = <span class="keyword">new</span> Payload();</span><br><span class="line">            payload.setJti(claims.getId());</span><br><span class="line">            payload.setUserDetail(mapper.readValue(claims.get(<span class="string">&quot;user&quot;</span>, String.class), UserDetail.class));</span><br><span class="line">            <span class="keyword">return</span> payload;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createJti</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.replace(UUID.randomUUID().toString(), <span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4.测试"></a>2.4.测试</h2><p>我们在<code>ly-auth-service</code>中测试刚刚写的工具.</p><h3 id="2-4-1-引入依赖"><a href="#2-4-1-引入依赖" class="headerlink" title="2.4.1.引入依赖"></a>2.4.1.引入依赖</h3><p>我们在<code>ly-auth-service</code>中引入<code>ly-auth-pojo</code>的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--auth-api--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-配置秘钥"><a href="#2-4-2-配置秘钥" class="headerlink" title="2.4.2.配置秘钥"></a>2.4.2.配置秘钥</h3><p>然后在<code>ly-auth-service</code>的<code>application.yml</code>文件中配置秘钥：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">helloWorldJavaLeyouAuthServiceSecretKey</span></span><br></pre></td></tr></table></figure><p>然后，我们在<code>ly-auth-service</code>的<code>com.leyou.auth.config</code>中定义一个配置类，注册<code>JwtUtils</code>注入到Spring的容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ly.jwt.key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtUtils <span class="title">jwtUtils</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtUtils(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-测试类"><a href="#2-4-3-测试类" class="headerlink" title="2.4.3.测试类"></a>2.4.3.测试类</h3><p>然后在<code>ly-auth-service</code>中定义一个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.Payload;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 生成jwt</span></span><br><span class="line">        String jwt = jwtUtils.createJwt(UserDetail.of(<span class="number">1L</span>, <span class="string">&quot;Jack&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;jwt = &quot;</span> + jwt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jwt = &quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIzZTg1NWVlYmFiN2I0NDM1YjY2NzFiMzhmNDcwM2E5ZSIsInVzZXIiOiJ7XCJpZFwiOjEsXCJ1c2VybmFtZVwiOlwi6ams5LqRXCJ9In0.gnedpS9LE0VjetKVTyD2Opvi4eSyROOG_rSwQP0kDC0&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析jwt</span></span><br><span class="line">        Payload payload = jwtUtils.parseJwt(jwt);</span><br><span class="line">        System.out.println(<span class="string">&quot;payload = &quot;</span> + payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jwt = eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIzZTg1NWVlYmFiN2I0NDM1YjY2NzFiMzhmNDcwM2E5ZSIsInVzZXIiOiJ7XCJpZFwiOjEsXCJ1c2VybmFtZVwiOlwiSmFja1wifSJ9.gnedpS9LE0VjetKVTyD2Opvi4eSyROOG_rSwQP0kDC0</span><br><span class="line"></span><br><span class="line">payload = Payload(jti=3e855eebab7b4435b6671b38f4703a9e, userDetails=UserDetails(id=1, username=Jack))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-登录授权"><a href="#3-登录授权" class="headerlink" title="3.登录授权"></a>3.登录授权</h1><p>首先，我们来完成登录授权功能。这个功能要在我们的<code>ly-auth-service</code>项目中完成。</p><h2 id="3-1-思路分析"><a href="#3-1-思路分析" class="headerlink" title="3.1.思路分析"></a>3.1.思路分析</h2><p>在登录页面，用户会填写账号密码并提交，我们服务端接收后需要验证用户名和密码。如果验证通过则生成JWT并写入cookie中。不过验证用户名和密码需要去访问<code>ly-user</code>才可以，因此整体思路如下：</p><ul><li>用户提交用户名和密码到ly-auth</li><li>ly-auth远程访问ly-user，根据用户名和密码查询用户</li><li>ly-auth验证查询结果<ul><li>如果成功，生成jwt，并将JWT写入cookie</li><li>如果失败，返回401</li></ul></li></ul><h2 id="3-2-用户验证的接口"><a href="#3-2-用户验证的接口" class="headerlink" title="3.2.用户验证的接口"></a>3.2.用户验证的接口</h2><p>用户中心<code>ly-user</code>必须对外提供查询接口，<strong>方便<code>ly-auth</code>做用户名密码校验。</strong></p><h3 id="3-2-1-定义接口"><a href="#3-2-1-定义接口" class="headerlink" title="3.2.1.定义接口"></a>3.2.1.定义接口</h3><p>首先在<code>ly-user-api</code>定义接口：</p><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-openfeign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>ly-user-api</code>的<code>com.leyou.user.client</code>中，添加接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.user.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名和密码查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;info&quot;)</span></span><br><span class="line">    <span class="function">UserDTO <span class="title">queryUserByUsernameAndPassword</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-ly-auth引用接口"><a href="#3-2-2-ly-auth引用接口" class="headerlink" title="3.2.2.ly-auth引用接口"></a>3.2.2.ly-auth引用接口</h3><p>然后，在ly-auth-service中引入ly-user-interface和feign的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>ly-auth</code>的<code>com.leyou.auth</code>包下的启动类<code>LyAuthApplication</code>上添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.config.JwtProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.leyou.user.client&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.auth&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyAuthApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyAuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：对<code>FeignClient</code>的扫描包要添加到<code>@EnableFeignClients</code>注解里面！</p><h2 id="3-3-登录的controller"><a href="#3-3-登录的controller" class="headerlink" title="3.3.登录的controller"></a>3.3.登录的controller</h2><p>接下来，我们需要在<code>ly-auth-service</code>编写一个接口，对外提供登录授权服务，接收用户名和密码，生成JWT。</p><p>我们在<code>ly-auth</code>的<code>com.leyou.auth.web</code>下添加<code>UserAuthController</code>，并编写登录接口：</p><ul><li>请求方式：post</li><li>请求路径：/user/login</li><li>请求参数：username和password，另外写cookie要用到HttpServletResponse</li><li>返回结果：无，直接写入cookie</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.service.UserAuthService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserAuthService userAuthService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">login</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(&quot;password&quot;)</span> String password,</span></span></span><br><span class="line"><span class="params"><span class="function">            HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用service，完成登录</span></span><br><span class="line">        userAuthService.login(username, password, response);</span><br><span class="line">        <span class="comment">// 登录成功，无返回值, 204状态码</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-登录的service"><a href="#3-4-登录的service" class="headerlink" title="3.4.登录的service"></a>3.4.登录的service</h2><p>service的基本流程：</p><ul><li>去ly-user查询用户</li><li>判断用户结果，正确则生成jwt</li><li>把jwt写入cookie</li></ul><p>这里还有几个属性要配置，包括：</p><ul><li>cookie名称</li><li>cookie的domain属性，决定cookie在哪些域名下生效</li></ul><p>这三个属性我们定义到一个常量类中，放到<code>ly-auth-pojo</code>下的 <code>com.leyou.auth.constants</code>中 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.constants;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtConstants</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户token的cookie名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COOKIE_NAME = <span class="string">&quot;LY_TOKEN&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户token的cookie的domain</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOMAIN = <span class="string">&quot;leyou.com&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：cookie的domain决定了cookie作用的域名，写成”<code>leyou.com</code>“可以让<code>leyou.com</code>下的所有二级以上域名共享cookie</p><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service</code>包中定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserAuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(String username, String password, HttpServletResponse response)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service.impl</code>包中定义实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.service.UserAuthService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.constants.JwtConstants;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exception.LyException;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.client.UserClient;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> feign.FeignException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAuthServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserAuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserAuthServiceImpl</span><span class="params">(UserClient userClient, JwtUtils jwtUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userClient = userClient;</span><br><span class="line">        <span class="keyword">this</span>.jwtUtils = jwtUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username, String password, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.授权中心携带用户名密码，到用户中心查询用户</span></span><br><span class="line">            UserDTO user = userClient.queryUserByUsernameAndPassword(username, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.校验查询结果</span></span><br><span class="line">            <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.如果正确，生成JWT凭证，查询错误则返回400</span></span><br><span class="line">            <span class="comment">// 3.1.准备用户信息</span></span><br><span class="line">            UserDetail userDetails = UserDetail.of(user.getId(), user.getUsername());</span><br><span class="line">            <span class="comment">// 3.2.生成jwt</span></span><br><span class="line">            String jwt = jwtUtils.createJwt(userDetails);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 4.把JWT写入用户cookie</span></span><br><span class="line">            writeCookie(response, jwt);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FeignException e) &#123;</span><br><span class="line">            <span class="comment">// 把远程调用异常转换抛出</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(e.status(), e.contentUTF8());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeCookie</span><span class="params">(HttpServletResponse response, String token)</span> </span>&#123;</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(JwtConstants.COOKIE_NAME, token);</span><br><span class="line">        <span class="comment">// cookie的作用域</span></span><br><span class="line">        cookie.setDomain(JwtConstants.DOMAIN);<span class="comment">//#######域名+路径 符合配置，那么就会带着jwt访问微服务。</span></span><br><span class="line">        <span class="comment">// 是否禁止JS操作cookie，避免XSS攻击</span></span><br><span class="line">        cookie.setHttpOnly(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// cookie有效期，-1就是跟随当前会话，浏览器关闭就消失</span></span><br><span class="line">        cookie.setMaxAge(-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// cookie作用的路径，/代表一切路径,表示任何路径都会携带cookie令牌过来。</span></span><br><span class="line">        cookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-5-测试"><a href="#3-5-测试" class="headerlink" title="3.5.测试"></a>3.5.测试</h2><p>在登录页面填写信息，登录后跳转到首页，发现token成功写入了：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527521423469.png" alt="1527521423469"></p><p>小思考：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">微服务会保存密钥吗？？？</span></span><br><span class="line"><span class="attr">（1）微服务向auth微服务发送密钥请求，如果授权中心信任这个微服务，</span></span><br><span class="line"><span class="attr">（校验微服务请求密钥时带过来的名称密码参数，</span></span><br><span class="line"><span class="attr">校验数据库的微服务名称以及微服务密码，一致则表明信任该微服务）</span></span><br><span class="line"><span class="attr">那么auth就会返回密钥给微服务。</span></span><br><span class="line"><span class="attr">微服务拿到密钥后就可以在微服本地进行jwt本解密校验了。</span></span><br><span class="line"><span class="attr">（2）有不被信任的微服，只能带着用户端的jwt去授权中心验证，直接得到认证结果</span></span><br><span class="line"><span class="attr">2</span> <span class="string">微服务中，JWT校验的流程原理？？</span></span><br><span class="line"><span class="meta">拿到secret密钥后，对签名</span> <span class="string">解密，跟jwt前面两部分内容比对，一致，那么就表名身份合法。</span></span><br><span class="line"><span class="attr">或者说：可以利用JWT前两段，用同一套哈希算法和同一个secret计算一个签名值，</span></span><br><span class="line"><span class="attr">然后把计算出来的签名值和收到的JWT第三段比较，如果相同则认证通过。</span></span><br><span class="line"><span class="attr">3</span> <span class="string">微服务知道了我的身份合法，拿到我的身份信息，跟数据库连接，查询，就可以进行业务处理啦，哈哈哈！！！</span></span><br></pre></td></tr></table></figure><h1 id="4-秘钥管理"><a href="#4-秘钥管理" class="headerlink" title="4.秘钥管理"></a>4.秘钥管理</h1><p>用户访问微服务的时候会携带JWT，而微服务中需要对JWT做校验和解析，这个时候就会用到秘钥。</p><p>但是秘钥保存在ly-auth这个授权服务中，我们不能随意暴露秘钥，否则就会有秘钥泄露的风险。</p><p>那么，<strong>该如何管理秘钥，让我们的微服务安全获取秘钥呢</strong>？</p><h2 id="4-1-思路分析"><a href="#4-1-思路分析" class="headerlink" title="4.1.思路分析"></a>4.1.思路分析</h2><p>微服务要想安全获取秘钥，必须经过<code>ly-auth</code>的身份验证。因此，我们可以给每一个微服务都定义一份“<strong>身份信息</strong>”，这些身份信息保存在数据库中，结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for tb_client_info</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `tb_client_info`;</span><br><span class="line">CREATE TABLE `tb_client_info`  (</span><br><span class="line">  `id` int(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `client_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT &#x27;服务名称&#x27;,</span><br><span class="line">  `secret` varchar(60) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT &#x27;密钥&#x27;,</span><br><span class="line">  `info` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;服务介绍&#x27;,</span><br><span class="line">  `create_time` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_time` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  UNIQUE INDEX `uq_key_service_name`(`client_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = &#x27;服务信息表，记录微服务的id，名称，密文，用来做服务认证&#x27; ROW_FORMAT = Compact;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of tb_client_info</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (1, &#x27;user-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;用户微服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:16&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (2, &#x27;item-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;商品微服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:17&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (3, &#x27;page-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;静态页微服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:18&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (4, &#x27;search-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;搜索微服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:19&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (5, &#x27;cart-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;购物车微服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:20&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (6, &#x27;trade-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;订单微服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:20&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (7, &#x27;api-gateway&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;网关服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:21&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (8, &#x27;auth-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;授权服务&#x27;, &#x27;2019-04-10 15:55:11&#x27;, &#x27;2020-06-14 21:12:22&#x27;);</span><br><span class="line">INSERT INTO `tb_client_info` VALUES (9, &#x27;pay-service&#x27;, &#x27;$2a$10$LjOQwjNv.4cO0uftZkvZzOfhpXQxqU.XrHL5Ut6m3G4OXBkQQQdBe&#x27;, &#x27;支付微服务&#x27;, &#x27;2019-04-10 15:56:38&#x27;, &#x27;2020-06-14 21:12:24&#x27;);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>核心字段介绍：</p><ul><li>clientId：微服务的客户端id，每个微服务都有唯一id</li><li>secret：客户端秘钥(密码)，微服务身份验证会用到</li></ul><p>一旦微服务有了<strong>身份</strong>，那么微服务申请秘钥的时候，ly-auth就可以<strong>对身份做验证</strong>，验证通过才发放秘钥，否则拿不到秘钥，流程如下：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200614210546978.png" alt="image-20200614210546978"></p><p>微服务申请秘钥流程：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">1.服务启动时向ly-auth申请秘钥，携带配置好的clientId和secret</span></span><br><span class="line"><span class="meta">-</span> <span class="string">2.ly-auth接收请求，根据clientId去数据库查询</span></span><br><span class="line"><span class="meta">-</span> <span class="string">3.验证clientId和secret</span></span><br><span class="line"><span class="meta">-</span> <span class="string">4.如果验证通过，则返回秘钥</span></span><br></pre></td></tr></table></figure><p>我们需要做的准备包括：</p><ul><li>在ly-auth服务中提供一个接口，微服务调用时可以获取秘钥</li><li>微服务启动后，向ly-auth发送请求，获取秘钥</li></ul><h2 id="4-2-基本代码"><a href="#4-2-基本代码" class="headerlink" title="4.2.基本代码"></a>4.2.基本代码</h2><p>首先是client信息表相关的基本代码，包括实体类、mapper、service等。</p><h3 id="4-2-1-引入依赖"><a href="#4-2-1-引入依赖" class="headerlink" title="4.2.1.引入依赖"></a>4.2.1.引入依赖</h3><p>既然要访问数据库，需要在<code>ly-auth-service</code>中引入数据库访问所需要的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-配置文件"><a href="#4-2-2-配置文件" class="headerlink" title="4.2.2.配置文件"></a>4.2.2.配置文件</h3><p>然后是在<code>ly-auth-service</code>的yaml文件中添加数据库配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ly-mysql:3306/heima?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="attr">insert-strategy:</span> <span class="string">not_null</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.auth.entity</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-实体类"><a href="#4-2-3-实体类" class="headerlink" title="4.2.3.实体类"></a>4.2.3.实体类</h3><p>首先在<code>ly-auth-service</code>的<code>com.leyou.auth.entity</code>包中添加实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_client_info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientInfo</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-4-mapper"><a href="#4-2-4-mapper" class="headerlink" title="4.2.4.mapper"></a>4.2.4.mapper</h3><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.mapper</code>包中添加mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.entity.ClientInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClientMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">ClientInfo</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-5-service"><a href="#4-2-5-service" class="headerlink" title="4.2.5.service"></a>4.2.5.service</h3><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service</code>包中添加接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.entity.ClientInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClientService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">ClientInfo</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service.impl</code>包中添加接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.entity.ClientInfo;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.mapper.ClientMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.service.ClientService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">ClientMapper</span>, <span class="title">ClientInfo</span>&gt; <span class="keyword">implements</span> <span class="title">ClientService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-6-扫描包"><a href="#4-2-6-扫描包" class="headerlink" title="4.2.6.扫描包"></a>4.2.6.扫描包</h3><p>在<code>ly-auth-service</code>的启动类上添加注解，完成mapper扫描：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.leyou.auth.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.leyou.user.client&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.auth&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyAuthApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyAuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-7-密码加密"><a href="#4-2-7-密码加密" class="headerlink" title="4.2.7.密码加密"></a>4.2.7.密码加密</h3><p>数据库中的密码加密采用的是Bcrypt算法，这里也需要配置加密工具。</p><p>我们在<code>ly-auth-service</code>的<code>com.leyou.auth.config</code>包的<code>JwtConfig</code>中添加一个新的bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-申请秘钥的接口"><a href="#4-3-申请秘钥的接口" class="headerlink" title="4.3.申请秘钥的接口"></a>4.3.申请秘钥的接口</h2><p>我们在ly-auth中提供一个接口，提供给微服务调用，获取秘钥。</p><h3 id="4-2-1-定义接口"><a href="#4-2-1-定义接口" class="headerlink" title="4.2.1.定义接口"></a>4.2.1.定义接口</h3><p>在<code>ly-auth-api</code>中定义一个接口，格式如下：</p><ul><li>请求方式：Get</li><li>请求路径：/client/key</li><li>请求参数：<ul><li>clientId：微服务id</li><li>secret：微服务秘钥</li></ul></li><li>返回值：秘钥对象，SecretKey</li></ul><p>在<code>ly-auth-api</code>的pom文件中引入feign依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-openfeign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>com.leyou.auth.client</code>包中定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;auth-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/client/key&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">getSecretKey</span><span class="params">(<span class="meta">@RequestParam(&quot;clientId&quot;)</span> String clientId,<span class="meta">@RequestParam(&quot;secret&quot;)</span> String secret)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-controller"><a href="#4-2-2-controller" class="headerlink" title="4.2.2.controller"></a>4.2.2.controller</h3><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.web</code>包中定义controller，实现接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.service.ClientService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;client&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClientService clientService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientController</span><span class="params">(ClientService clientService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clientService = clientService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;key&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">getSecretKey</span><span class="params">(<span class="meta">@RequestParam(&quot;clientId&quot;)</span> String clientId, <span class="meta">@RequestParam(&quot;secret&quot;)</span> String secret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(clientService.getSecretKey(clientId, secret));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-3-Service"><a href="#4-2-3-Service" class="headerlink" title="4.2.3.Service"></a>4.2.3.Service</h3><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service</code>包中添加接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.entity.ClientInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClientService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">ClientInfo</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getSecretKey</span><span class="params">(String clientId, String secret)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-auth-service</code>的<code>com.leyou.auth.service.impl</code>包中添加接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.entity.ClientInfo;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.mapper.ClientMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.service.ClientService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exceptions.LyException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">ClientMapper</span>, <span class="title">ClientInfo</span>&gt; <span class="keyword">implements</span> <span class="title">ClientService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ly.jwt.key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientServiceImpl</span><span class="params">(PasswordEncoder passwordEncoder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.passwordEncoder = passwordEncoder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSecretKey</span><span class="params">(String clientId, String secret)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.查询client信息</span></span><br><span class="line">        ClientInfo client = query().eq(<span class="string">&quot;client_id&quot;</span>, clientId).one();</span><br><span class="line">        <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">401</span>, <span class="string">&quot;客户端的信息有误，&quot;</span> + clientId + <span class="string">&quot;不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.校验client的secret</span></span><br><span class="line">        <span class="keyword">if</span> (!passwordEncoder.matches(secret, client.getSecret())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">401</span>, <span class="string">&quot;客户端的信息有误，secret不正确！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.返回秘钥</span></span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-申请秘钥"><a href="#4-4-申请秘钥" class="headerlink" title="4.4.申请秘钥"></a>4.4.申请秘钥</h2><p>我们把申请秘钥的功能写到<code>ly-auth-api</code>中，供其它微服务使用。<strong>其它微服务引入该依赖后，就会根据配置的clientId和secret，!!自动!!向<code>ly-auth</code>发起请求，申请秘钥</strong>。</p><p>我们<strong>约定</strong>微服务要在application.yml中配置自己的clientId和secret，格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">  <span class="attr">clientId:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><p>因此我们要在<code>ly-auth-api</code>的<code>com.leyou.auth.config</code>包中定义一个属性类，读取这两个属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;ly.auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外，我们需要在读取到clientId和secret以后，向<code>ly-auth</code>发出请求，申请秘钥，因此我们在<code>ly-auth-api</code>中定义一个配置类，完成秘钥加载，并完成对JwtUtils的初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.client.AuthClient;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;ly.auth&quot;, name = &#123;&quot;clientId&quot;, &quot;secret&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ClientProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthClient authClient;</span><br><span class="line">    <span class="keyword">private</span> ClientProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthConfiguration</span><span class="params">(AuthClient authClient, ClientProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authClient = authClient;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtUtils <span class="title">jwtUtils</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 查询秘钥</span></span><br><span class="line">            String key = authClient.getSecretKey(properties.getClientId(), properties.getSecret());</span><br><span class="line">            <span class="comment">// 创建JwtUtils</span></span><br><span class="line">            JwtUtils jwtUtils = <span class="keyword">new</span> JwtUtils(key);</span><br><span class="line">            log.info(<span class="string">&quot;秘钥加载成功。&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> jwtUtils;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;初始化JwtUtils失败，&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在配置类上的一个条件值的关注：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;ly.auth&quot;, name = &#123;&quot;clientId&quot;, &quot;secret&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p>条件注解，意思是环境中必须有<code>ly.auth</code>开头的属性，属性名称必须叫<code>clientId</code>和<code>secret</code>，确保<strong>使用者会在yml中配置clientId和secret时，当前配置才会生效</strong>。</p><p>还有这个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.leyou.auth.client&quot;)</span></span><br></pre></td></tr></table></figure><p>目的是引入刚刚编写的<code>AuthClient</code>，方便查询秘钥</p><p>最后，为了让这个配置被SpringBoot加载，我们需要在<code>ly-auth-api</code>的resources目录中创建一个文件夹：META-INF，然后创建一个文件：spring.factories，然后填写内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">com.leyou.auth.config.AuthConfiguration</span></span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200620083641159.png" alt="image-20200620083641159"> </p><p>另外，这样用户写yaml时是没有提示的，为了有提示，需要在META-INF下新建一个文件：<code>spring-configuration-metadata.json</code>，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;groups&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ly.auth&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;com.leyou.auth.config.ClientProperties&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;com.leyou.auth.config.ClientProperties&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ly.auth.clientId&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;com.leyou.auth.config.ClientProperties&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;授权客户端的id&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ly.auth.secret&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;com.leyou.auth.config.ClientProperties&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;授权客户端的secret&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ly.auth.includeFilterPaths&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;com.leyou.auth.config.ClientProperties&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;登录拦截要包含的路径&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ly.auth.secret&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.excludeFilterPaths&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;com.leyou.auth.config.ClientProperties&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;登录拦截放行的路径&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;hints&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5.测试"></a>4.5.测试</h2><p>我们在<code>ly-user</code>中测试下这个功能。</p><p>首先，在<code>ly-user-service</code>中引入相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ly-auth的API--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着，在<code>ly-user-service</code>的application.yml中配置客户端信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">user-service</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><p>修改启动类,添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># ...</span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyUserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyUserApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启<code>ly-user-service</code>，应该能看到日志输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2030-06-20 08:29:26.519  INFO 12232 --- [           main] com.leyou.auth.config.AuthConfig         : 秘钥加载成功。</span><br></pre></td></tr></table></figure><h3 id="思考总结："><a href="#思考总结：" class="headerlink" title="思考总结："></a>思考总结：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">办理业务的微服务想要向授权中心获取密钥，来解析前端用户带过来的jwt是否有效</span></span><br><span class="line"><span class="attr">可以在微服务本地写一个类来实现，但是想一想，每一个办理业务的微服务都需要jwt验证，</span></span><br><span class="line"><span class="attr">都需要这么一个类，那不是代码冗余嘛！！！这是失败的方式</span></span><br><span class="line"><span class="attr">因此我们将“获取jwt校验用的密钥”的公共代码抽取授权中心，</span></span><br><span class="line"><span class="meta">抽取到一个具有条件加载的配置类</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix</span> = <span class="string">&quot;ly.auth&quot;, name = &#123;&quot;clientId&quot;, &quot;secret&quot;&#125;)</span></span><br><span class="line">    <span class="attr">@EnableConfigurationProperties(ClientProperties.class)</span></span><br><span class="line">    <span class="attr">public</span> <span class="string">class AuthConfiguration &#123;</span></span><br><span class="line">    <span class="attr">...</span></span><br><span class="line"><span class="attr">那么，想要办理业务，向授权中心获取密钥的微服务，就可以导入授权中心的依赖库，</span></span><br><span class="line"><span class="meta">并在微服务本地配置文件中配置了ly.auth.clientId</span>   <span class="string">ly.auth.secret,</span></span><br><span class="line"></span><br><span class="line"><span class="meta">那么授权中心中的配置类就会被注入</span> <span class="string">AuthConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="meta">至于能不能返回密钥（微服务受不受信任），就要看配置的ly.auth.clientId</span>   <span class="string">ly.auth.secret</span></span><br><span class="line"><span class="attr">能否在微服务表格查找的到对象记录哈！！！</span></span><br></pre></td></tr></table></figure><h1 id="5-登录验证"><a href="#5-登录验证" class="headerlink" title="5.登录验证"></a>5.登录验证</h1><p>用户登录后，会携带JWT访问微服务，而微服务需要验证当前访问者的身份，如果验证通过则执行后续业务，验证失败，则拦截请求：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200620090019046.png" alt="image-20200620090019046"> </p><p>很多微服务都需要做用户登录状态验证，因此我们可以<strong>把这部分拦截和判断写到<code>ly-auth-api</code>中，作为工具</strong>。</p><h2 id="5-1-登录拦截器"><a href="#5-1-登录拦截器" class="headerlink" title="5.1.登录拦截器"></a>5.1.登录拦截器</h2><p>在<code>ly-auth-api</code>引入编写拦截器所需依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>ly-auth-api</code>的<code>com.leyou.auth.interceptors</code>中编写一个拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.constants.JwtConstants;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.Payload;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exception.LyException;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.CookieUtils;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginInterceptor</span><span class="params">(JwtUtils jwtUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jwtUtils = jwtUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取cookie中的jwt</span></span><br><span class="line">            String jwt = CookieUtils.getCookieValue(request, JwtConstants.COOKIE_NAME);</span><br><span class="line">            <span class="comment">// 验证并解析</span></span><br><span class="line">            Payload payload = jwtUtils.parseJwt(jwt);</span><br><span class="line">            <span class="comment">// 获取用户</span></span><br><span class="line">            UserDetail userDetail = payload.getUserDetail();</span><br><span class="line">            log.info(<span class="string">&quot;用户&#123;&#125;正在访问。&quot;</span>, userDetail.getUsername());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">401</span>, <span class="string">&quot;JWT无效或过期!&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">401</span>, <span class="string">&quot;用户未登录!&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-配置拦截器"><a href="#5-2-配置拦截器" class="headerlink" title="5.2.配置拦截器"></a>5.2.配置拦截器</h2><p>拦截器编写了还需要注册到SpringMVC中，因此我们<strong>编写配置类，完成拦截器注册</strong>。不过，拦截器的注册可能需要指定两个参数：</p><ul><li>拦截路径：指定拦截器对哪些路径生效</li><li>放行路径：指定拦截器对哪些路径放行</li></ul><p>我们<strong>约定</strong>用户会在application.yml中配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">user-service</span> <span class="comment"># 客户端id</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="number">1234</span> <span class="comment"># 客户端秘钥</span></span><br><span class="line">    <span class="attr">excludeFilterPaths:</span> <span class="comment"># 放行的路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/aa/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/bb/**</span></span><br><span class="line">    <span class="attr">includeFilterPaths:</span> <span class="comment"># 拦截的路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/xx/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/yy/**</span></span><br></pre></td></tr></table></figure><p>因此，我们要在ClientProperties中添加两个属性，来读取其中的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;ly.auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端秘钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截器拦截路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; includeFilterPaths;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截器放行路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; excludeFilterPaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>ly-auth-api</code>中的<code>com.leyou.auth.config</code>包下编写一个配置类，配置拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.interceptors.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JwtUtils jwtUtils;</span><br><span class="line">    <span class="keyword">private</span> ClientProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里产生了依赖循环，因此要加上@Lazy注解，JwtUtils使用到时才去注入。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MvcConfiguration</span><span class="params">(<span class="meta">@Lazy</span> JwtUtils jwtUtils, ClientProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jwtUtils = jwtUtils;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册拦截器，并得到拦截器注册器</span></span><br><span class="line">        InterceptorRegistration registration = registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor(jwtUtils));</span><br><span class="line">        <span class="comment">// 判断用户是否配置了拦截路径，如果没配置走默认，就是拦截 /**</span></span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(properties.getIncludeFilterPaths()))&#123;</span><br><span class="line">            registration.addPathPatterns(properties.getIncludeFilterPaths());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断用户是否配置了放行路径，如果没配置就是空</span></span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(properties.getExcludeFilterPaths()))&#123;</span><br><span class="line">            registration.excludePathPatterns(properties.getExcludeFilterPaths());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-拦截器开关"><a href="#5-3-拦截器开关" class="headerlink" title="5.3.拦截器开关"></a>5.3.拦截器开关</h2><p>我们通过自定义的<code>MvcConfiguration</code>向mvc中配置了拦截器，但是<code>MvcConfiguration</code>并没有被Spring扫描，因此<strong>配置并未生效</strong>。</p><p>要想让配置生效，必须得让spring扫描到<code>MvcConfiguration</code>这个类。</p><p>但是引用ly-auth-api的服务可能只是需要JwtUtils，不需要做登录拦截，因此我们需要<strong>定义一个开关，用来开启或关闭拦截器功能。</strong></p><p>在<code>ly-auth-api</code>的<code>com.leyou.auth.annotation</code>包中定义一个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.config.MvcConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启用JWT验证开关，会通过mvc的拦截器拦截用户请求，并获取用户信息，存入UserContext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(MvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableJwtVerification &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个注解通过<code>@Import(MvcConfiguration.class)</code>来加载<code>MvcConfiguration</code>类，因此<strong>任何项目只要引入了<code>@EnableJwtVerification</code>就可以使得<code>MvcConfiguration</code>生效，从而使拦截器生效</strong>。</p><h2 id="5-4-测试"><a href="#5-4-测试" class="headerlink" title="5.4.测试"></a>5.4.测试</h2><p>现在，我们在<code>ly-user-service</code>测试拦截器。</p><p>首先，在<code>ly-user-service</code>的启动类上，添加<code>@EnableJwtVerification</code>注解，开启登录拦截器功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.annotation.EnableJwtVerification;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableJwtVerification</span><span class="comment">//开启登录拦截器的支持！</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.leyou.auth.client&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.user&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.leyou.user.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyUserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyUserApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>ly-user-service</code>的<code>com.leyou.user.web</code>包中添加一个controller，方便测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;address&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;上海浦东新区航头镇航头路18号传智播客&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>ly-user-service</code>的<code>application.yml</code>中配置拦截和放行路径：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">user-service</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="number">1234</span></span><br><span class="line">    <span class="attr">includeFilterPaths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/address/**</span> <span class="comment"># 拦截 /address开头的地址</span></span><br></pre></td></tr></table></figure><p>重启<code>ly-user-service</code>服务，浏览器中访问地址：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200627152500736.png" alt="image-20200627152500736"> </p><p>然后登录一下，再次访问：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200627152512444.png" alt="image-20200627152512444"></p><p><strong>登录验证过程总结：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">用户登录后，会携带JWT访问微服务，</span></span><br><span class="line"><span class="attr">很多微服务都需要做用户登录状态验证，</span></span><br><span class="line"><span class="attr">因此我们可以把这部分拦截和判断抽离到`ly-auth-api`中，作为工具</span></span><br><span class="line"></span><br><span class="line"><span class="attr">2</span> <span class="string">在`ly-auth-api`的`com.leyou.auth.interceptors`中编写一个拦截器：（并导入响应依赖包）</span></span><br><span class="line"><span class="attr">拦截器里面能校验jwt，并且获取到UserDetail</span></span><br><span class="line"></span><br><span class="line"><span class="attr">3</span> <span class="string">拦截器编写了还需要注册到SpringMVC中，因此我们**编写配置类，完成拦截器注册**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">在ClientProperties中添加两个属性</span></span><br><span class="line"><span class="attr">package</span> <span class="string">com.leyou.auth.config;</span></span><br><span class="line"><span class="attr">@Data</span></span><br><span class="line"><span class="attr">@ConfigurationProperties(&quot;ly.auth&quot;)</span></span><br><span class="line"><span class="attr">public</span> <span class="string">class ClientProperties &#123;。。。</span></span><br><span class="line"><span class="attr">（这个属性类是给使用“要使用jwt登录认证”的微服务使用的。</span></span><br><span class="line"><span class="attr">微服务想要使用该功能，就要导入ly-auth依赖，然后会在application.yml中配置：</span></span><br><span class="line"><span class="attr">ly</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">auth</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">clientId</span>: <span class="string">user-service # 客户端id</span></span><br><span class="line">    <span class="attr">secret</span>: <span class="string">1234 # 客户端秘钥</span></span><br><span class="line">    <span class="attr">excludeFilterPaths</span>: <span class="string"># 放行的路径</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">/aa/**</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">/bb/**</span></span><br><span class="line">    <span class="attr">includeFilterPaths</span>: <span class="string"># 拦截的路径</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">/xx/**</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">/yy/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">4</span>  <span class="string">然后在`ly-auth-api`中的`com.leyou.auth.config`包下编写一个配置类，配置拦截器：</span></span><br><span class="line"><span class="attr">public</span> <span class="string">class MvcConfiguration implements WebMvcConfigurer &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">5</span> <span class="string">定义一个开关（添加一个注解），用来开启或关闭拦截器功能</span></span><br><span class="line"><span class="attr">package</span> <span class="string">com.leyou.auth.annotation;</span></span><br><span class="line"><span class="attr">@Import(MvcConfiguration.class)</span></span><br><span class="line"><span class="attr">public</span> <span class="string">@interface EnableJwtVerification &#123;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">任何项目只要引入了注解`@EnableJwtVerification`</span></span><br><span class="line"><span class="attr">就可以使得`MvcConfiguration`生效，从而使拦截器生效</span></span><br><span class="line"></span><br><span class="line"><span class="attr">6</span> <span class="string">微服务想要使用auth的登录拦截功能：</span></span><br><span class="line"><span class="meta">（0)</span> <span class="string">导入auth依赖。</span></span><br><span class="line"><span class="meta">（1）在微服务的启动类中</span> <span class="string"></span></span><br><span class="line"><span class="attr">添加`@EnableJwtVerification`注解，开启auth的登录拦截器功能</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages</span> = <span class="string">&quot;com.leyou.auth.client&quot;)微服之间调用需要这个注解</span></span><br><span class="line"><span class="attr">（2）微服务yml配置文件中配置好拦截和放行路径</span></span><br><span class="line"><span class="attr">ly</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">auth</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">clientId</span>: <span class="string">user-service</span></span><br><span class="line">    <span class="attr">secret</span>: <span class="string">1234</span></span><br><span class="line">    <span class="attr">includeFilterPaths</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">/address/** # 拦截 /address开头的地址</span></span><br><span class="line"><span class="attr">（3）微服务器中添加controller代码（路径是配置中的拦截路径，当前端访问该微服务的这个路径是，</span></span><br><span class="line"><span class="attr">就会被auth微服拦截，完成是否登录，以及登录后的jwt校验）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">理解误区：微服A导入了微服B的依赖，并且添加相关注释就可以使用微服B的相关方法，工具，</span></span><br><span class="line"><span class="attr">比如第四章，“微服将jwt带给auth，返回密钥”，一些工具可以使用auth的，</span></span><br><span class="line"><span class="attr">但是返回的密钥key还是要从远端的auth返回过来，并不是利用auth工具直接生成的哦。</span></span><br></pre></td></tr></table></figure><p>小思考：</p><p>这验证都在auth api里面完成了，第四章“密钥管理”不是说了：由授权中心返回密钥，然后在微服务本地进行验证嘛？？？？</p><h1 id="6-页面获取用户信息"><a href="#6-页面获取用户信息" class="headerlink" title="6.页面获取用户信息"></a>6.页面获取用户信息</h1><p>虽然cookie已经成功写入，但是我们首页的顶部，登录状态依然没能判断出用户信息：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527521794580.png" alt="1527521794580"></p><p>我们思考一下，应该如何获取用户信息呢？</p><h2 id="6-1-步骤分析"><a href="#6-1-步骤分析" class="headerlink" title="6.1.步骤分析"></a>6.1.步骤分析</h2><p>我们现在使用的是无状态登录，用户身份写入了jwt，解析JWT即可获取用户信息。但是jwt需要通过秘钥解析才知道是否有效，才可以解析用户身份。因此查询用户信息一定要发请求到服务端。</p><p>分析一下步骤：</p><ul><li>1）页面向后台发起请求，携带cookie</li><li>2）后台获取cookie中的jwt</li><li>3）校验jwt是否有效<ul><li>无效：登录失效或未登录，返回错误信息</li><li>有效：解析出里面的用户信息并返回</li></ul></li></ul><p>接下来，我们就分步实现上述功能。</p><h2 id="6-2-页面JS代码"><a href="#6-2-页面JS代码" class="headerlink" title="6.2.页面JS代码"></a>6.2.页面JS代码</h2><p>首先是页面发起请求，校验cookie。</p><p>页面的顶部已经被我们封装为一个独立的Vue组件，在<code>/js/pages/shortcut.js</code>中</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527522039407.png" alt="1527522039407"></p><p>打开js，发现里面已经定义好了Vue组件，并且在created函数中，查询用户信息：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200620104716345.png" alt="image-20200620104716345"></p><p>因为jwt在cookie中，因此本次请求肯定会携带jwt信息在cookie中。</p><h2 id="6-3-查询当前用户的接口"><a href="#6-3-查询当前用户的接口" class="headerlink" title="6.3.查询当前用户的接口"></a>6.3.查询当前用户的接口</h2><p>我们在<code>ly-user-service</code>中定义用户的校验接口，通过cookie获取jwt，然后校验通过返回用户信息。</p><ul><li>请求方式：GET</li><li>请求路径：/info/me</li><li>请求参数：无，不过我们需要从cookie中获取jwt信息</li><li>返回结果：校验成功返回用户；校验失败，则返回401</li></ul><p>在<code>ly-user-service</code>的<code>com.leyou.user.web</code>包的<code>UserController</code>中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前登录的用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;me&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserDetail&gt; <span class="title">me</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改ly-user-service:的application.yml添加拦截路径，最新yml内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ly-mysql:3306/heima?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-mq</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="attr">insert-strategy:</span> <span class="string">not_null</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.user.entity</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">encoder:</span></span><br><span class="line">    <span class="attr">crypt:</span></span><br><span class="line">      <span class="attr">secret:</span> <span class="string">$&#123;random.uuid&#125;</span> <span class="comment"># 随机的密钥，使用uuid</span></span><br><span class="line">      <span class="attr">strength:</span> <span class="number">6</span> <span class="comment"># 加密强度4~31，决定盐加密时的运算强度，超过10以后加密耗时会显著增加</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">user-service</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="number">1234</span></span><br><span class="line">    <span class="attr">includeFilterPaths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/address/**</span> <span class="comment"># 拦截 /address开头的地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/info/me</span> <span class="comment"># 展示用户登录信息时需要拦截器生效</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-4-用户上下文"><a href="#6-4-用户上下文" class="headerlink" title="6.4.用户上下文"></a>6.4.用户上下文</h2><p>现在，我们接收了用户的请求，但是该如何获取当前登录用户信息呢？</p><h3 id="6-4-1-思路分析"><a href="#6-4-1-思路分析" class="headerlink" title="6.4.1.思路分析"></a>6.4.1.思路分析</h3><p>其实，在<code>ly-user-service</code>中已经引入了<code>ly-auth-api</code>的依赖，而<code>ly-auth-api</code>中提供了一个拦截器<code>LoginInterceptor</code>，已经拦截请求并且获取了用户信息。</p><p>拦截器放行后才会进入<code>UserController</code>的方法<code>me()</code>中。那么，我们为什么不能<strong>把拦截器中获取的用户信息，保存起来，然后在<code>UserController</code>中直接获取并使用</strong>呢，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/image-20200620111630238.png" alt="image-20200620111630238"></p><p>步骤如下：</p><ul><li>1.前端发出请求到服务端，查询登录用户信息</li><li>2.拦截器拦截请求，验证并解析JWT，得到用户信息UserDetails</li><li>3.<strong>将用户信息存入UserContext（需要自己实现）上下文</strong>，放行请求</li><li>4.controller处理请求，从UserContext获取用后，返回给前端</li></ul><h3 id="6-4-2-UserContext"><a href="#6-4-2-UserContext" class="headerlink" title="6.4.2.UserContext"></a>6.4.2.UserContext</h3><p>UserContext用来存储当前的用户信息，但是该如何保存呢？</p><p>要知道用户的请求肯定是<strong>多线程</strong>并发访问的，如果直接将UserDetail存入UserContext的成员变量，会存在<strong>线程并发安全问题</strong>。我们必须保证每一个请求（一个线程）都有自己的用户信息，互不干扰！</p><h4 id="1）ThreadLocal"><a href="#1）ThreadLocal" class="headerlink" title="1）ThreadLocal"></a>1）ThreadLocal</h4><p><code>ThreadLocal</code>恰好满足这个需求，那么ThreadLocal是如何实现这一需求的呢？</p><p>看下这幅图：</p><p>  <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1554964371849.png" alt="1554964371849"></p><p>关键点：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">每个线程（`Thread`）内部都持有一个`ThreadLocalMap`对象。</span></span><br><span class="line"><span class="meta">-</span> <span class="string">`ThreadLocalMap`的Key是某个`ThreadLocal`对象，值是任意Object。</span></span><br><span class="line"><span class="meta">-</span> <span class="string">不同线程，内部有自己的`ThreadLocalMap`，因此各线程资源互相不会干扰。</span></span><br></pre></td></tr></table></figure><p>当我们使用ThreadLocal存储数据时，ThreadLocal会先得到当前线程（currentThread)对象，然后获取线程中的<code>ThreadLocalMap</code>对象，接着把数据存储到这个<code>ThreadLocalMap</code>对象中，因此<strong>每个线程的用户都在线程自己的<code>ThreadLocalMap</code>对象中，互不干扰</strong>。</p><h4 id="2）UserContext"><a href="#2）UserContext" class="headerlink" title="2）UserContext"></a>2）UserContext</h4><p>接下来，我们实现UserContext。在<code>ly-auth-api</code>中的<code>com.leyou.auth.utils</code>定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserDetail&gt; TL = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储一个用户到当前线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(UserDetail user)</span> </span>&#123;</span><br><span class="line">        TL.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从当前线程获取一个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDetail <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TL.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从当前线程移除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TL.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-3-存储用户"><a href="#6-4-3-存储用户" class="headerlink" title="6.4.3.存储用户"></a>6.4.3.存储用户</h3><p>接下来，我们修改拦截器逻辑，获取用户后把用户存储在UserContext中。</p><p>修改<code>ly-auth-api</code>中的<code>LoginInterceptor</code>，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.auth.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.constants.JwtConstants;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.Payload;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.dto.UserDetail;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> com.leyou.auth.utils.UserContext;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exception.LyException;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.CookieUtils;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginInterceptor</span><span class="params">(JwtUtils jwtUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jwtUtils = jwtUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取cookie中的jwt</span></span><br><span class="line">            String jwt = CookieUtils.getCookieValue(request, JwtConstants.COOKIE_NAME);</span><br><span class="line">            <span class="comment">// 验证并解析</span></span><br><span class="line">            Payload payload = jwtUtils.parseJwt(jwt);</span><br><span class="line">            <span class="comment">// 获取用户</span></span><br><span class="line">            UserDetail userDetails = payload.getUserDetail();</span><br><span class="line">            log.info(<span class="string">&quot;用户&#123;&#125;正在访问。&quot;</span>, userDetails.getUsername());</span><br><span class="line">            <span class="comment">// 保存用户</span></span><br><span class="line">            UserContext.setUser(userDetails);<span class="comment">//###########将获取到的用户信息放到</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">401</span>, <span class="string">&quot;JWT无效或过期!&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">401</span>, <span class="string">&quot;用户未登录!&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 业务结束后，移除用户</span></span><br><span class="line">        UserContext.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-5-完成controller逻辑"><a href="#6-5-完成controller逻辑" class="headerlink" title="6.5.完成controller逻辑"></a>6.5.完成controller逻辑</h2><p>现在，让我们补充完成<code>ly-user-service</code>中的<code>UserController</code>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前登录的用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;me&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserDetails&gt; <span class="title">me</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(UserContext.getUser());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-6-测试"><a href="#6-6-测试" class="headerlink" title="6.6.测试"></a>6.6.测试</h2><p> 重启<code>ly-auth-service</code>后测试。</p><p>页面效果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11JWT%E7%99%BB%E5%BD%9501/1527554017189.png" alt="1527554017189"></p><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">状态bean,bean中存了共享信息,并且是可変化的共享信息状态</span></span><br><span class="line"><span class="attr">bean会带来的问题是?数据污染例bean线程共享,线程不安全,</span></span><br><span class="line"></span><br><span class="line"><span class="meta">综上,我们直接把</span> <span class="string">userdetail作为状态bean的属性,不可以</span></span><br><span class="line"><span class="meta">状态bean,单例bean</span>=<span class="string">=&gt;单线程 ok</span></span><br><span class="line"><span class="meta">状态bean,单例bean,多线程</span>=<span class="string">=&gt;bug</span></span><br><span class="line"><span class="meta">状态bean,中的状态属存入</span> <span class="string">Threadlocal,单例bean,多线程==&gt;OK</span></span><br><span class="line"></span><br><span class="line"><span class="meta">ThreadLocal,持点</span>:<span class="string">一次请求,一个线程,每一个线程对应的一个独立的 threadlocal</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="JWT" scheme="http://example.com/tags/JWT/"/>
    
    <category term="登录" scheme="http://example.com/tags/%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-用户中心-注册</title>
    <link href="http://example.com/2022/06/30/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/"/>
    <id>http://example.com/2022/06/30/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/</id>
    <published>2022-06-30T03:13:05.000Z</published>
    <updated>2022-06-30T08:06:59.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户中心-注册"><a href="#用户中心-注册" class="headerlink" title="用户中心-注册"></a>用户中心-注册</h1><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">阿里SMS</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现数据校验功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现短信发送功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现注册功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">实现根据用户名和密码查询用户功能</span></span><br></pre></td></tr></table></figure><h1 id="1-阿里短信服务"><a href="#1-阿里短信服务" class="headerlink" title="1.阿里短信服务"></a>1.阿里短信服务</h1><p>之前我们已经学习过了阿里短信服务，但是大家真的掌握了企业中短信发送的正确方式吗？来看看我们在乐优商城中，如何实现短信发送功能。</p><h2 id="1-1-demo"><a href="#1-1-demo" class="headerlink" title="1.1.demo"></a>1.1.demo</h2><p>注册页面上有短信发送的按钮，当用户点击发送短信，我们需要生成验证码，发送给用户。我们将使用阿里提供的阿里大于来实现短信发送。</p><p>参考课前资料的《阿里短信.md》学习demo入门</p><h2 id="1-2-创建短信微服务"><a href="#1-2-创建短信微服务" class="headerlink" title="1.2.创建短信微服务"></a>1.2.创建短信微服务</h2><p>在以前，我们都是把发送短信功能抽取一个工具类，任何地方需要，直接调用工具类发送短信即可。这样的方式存在以下缺点：</p><ul><li>发送短信代码与业务代码耦合</li><li>短信发送功能会影响业务功能执行</li></ul><p>如果在业务代码中，嵌入发送短信的代码，那就是功能的耦合，不方便后期的维护。而且</p><p>因为短信发送是调用第三方的云服务，API调用成功与否、执行时长都是不确定的。如果执行发短信时，因为网络问题导致阻塞，那么我们自己的业务也会阻塞。</p><p>为了解决上述问题，提高程序的响应速度，短信发送我们都将采用异步发送方式，即：</p><ul><li>短信服务监听MQ消息</li><li>收到消息后发送短信，根据消息<code>routing_key</code>不同，发送不同类型的短信</li><li>其它服务要发送短信时，通过MQ通知短信微服务。</li></ul><h3 id="1-2-1-创建module"><a href="#1-2-1-创建module" class="headerlink" title="1.2.1.创建module"></a>1.2.1.创建module</h3><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1553781676879.png" alt="1553781676879"></p><h3 id="1-2-2-pom"><a href="#1-2-2-pom" class="headerlink" title="1.2.2.pom"></a>1.2.2.pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-sms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-编写启动类"><a href="#1-2-3-编写启动类" class="headerlink" title="1.2.3.编写启动类"></a>1.2.3.编写启动类</h3><p>我们在<code>ly-sms</code>的<code>com.leyou.sms</code>包下，新建一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.sms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.sms&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LySmsApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LySmsApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-编写application-yml"><a href="#1-2-4-编写application-yml" class="headerlink" title="1.2.4.编写application.yml"></a>1.2.4.编写application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sms-service</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-mq</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><h2 id="1-3-编写短信工具类"><a href="#1-3-编写短信工具类" class="headerlink" title="1.3.编写短信工具类"></a>1.3.编写短信工具类</h2><p>接下来，我们把刚刚学习的Demo中代码抽取成一个工具，方便后期使用</p><h3 id="1-3-1-属性抽取"><a href="#1-3-1-属性抽取" class="headerlink" title="1.3.1.属性抽取"></a>1.3.1.属性抽取</h3><p>我们首先把一些常量抽取到application.yml中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">sms:</span></span><br><span class="line">    <span class="attr">accessKeyID:</span> <span class="string">LTAIfmmL26haCK0b</span> <span class="comment"># 你自己的accessKeyId</span></span><br><span class="line">    <span class="attr">accessKeySecret:</span> <span class="string">pX3RQns9ZwXs75M6Isae9sMgBLXDfY</span> <span class="comment"># 你自己的AccessKeySecret</span></span><br><span class="line">    <span class="attr">signName:</span> <span class="string">乐优商城</span> <span class="comment"># 签名名称</span></span><br><span class="line">    <span class="attr">verifyCodeTemplate:</span> <span class="string">SMS_143719983</span> <span class="comment"># 模板名称</span></span><br><span class="line">    <span class="attr">domain:</span> <span class="string">dysmsapi.aliyuncs.com</span> <span class="comment"># 域名</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">SendSMS</span> <span class="comment"># API类型，发送短信</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">2017-05-25</span> <span class="comment"># API版本，固定值</span></span><br><span class="line">    <span class="attr">regionID:</span> <span class="string">cn-hangzhou</span> <span class="comment"># 区域id</span></span><br></pre></td></tr></table></figure><p>然后在<code>com.leyou.sms.config</code>包下，定义一个类，读取yml文件的属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.sms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;ly.sms&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String accessKeyID;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String accessKeySecret;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String signName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String verifyCodeTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信请求的域名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String domain;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * API版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String version;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * API类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String action;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区域</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String regionID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-阿里客户端"><a href="#1-3-2-阿里客户端" class="headerlink" title="1.3.2.阿里客户端"></a>1.3.2.阿里客户端</h3><p>然后通过java配置，将发请求需要的客户端注册到Spring容器。</p><p>在<code>com.leyou.sms.config</code>包定义一个配置类，标记为<code>@Configuration</code>，并通过<code>@Bean</code>注册阿里客户端到Spring：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.sms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SmsProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAcsClient <span class="title">acsClient</span><span class="params">(SmsProperties prop)</span></span>&#123;</span><br><span class="line">        DefaultProfile profile = DefaultProfile.getProfile(</span><br><span class="line">                prop.getRegionID(), prop.getAccessKeyID(), prop.getAccessKeySecret());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-工具类"><a href="#1-3-3-工具类" class="headerlink" title="1.3.3.工具类"></a>1.3.3.工具类</h3><p>我们把阿里提供的demo进行简化和抽取，封装一个工具类。</p><p>在<code>com.leyou.sms.utils</code>包下，新建工具类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.sms.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.CommonRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.CommonResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ServerException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.http.MethodType;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.http.ProtocolType;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.JsonUtils;</span><br><span class="line"><span class="keyword">import</span> com.leyou.sms.config.SmsProperties;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.sms.constants.SmsConstants.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IAcsClient client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SmsProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsUtils</span><span class="params">(IAcsClient client, SmsProperties prop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">        <span class="keyword">this</span>.prop = prop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信验证码的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code  验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendVerifyCode</span><span class="params">(String phone, String code)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数</span></span><br><span class="line">        String param = String.format(VERIFY_CODE_PARAM_TEMPLATE, code);</span><br><span class="line">        <span class="comment">// 发送短信</span></span><br><span class="line">        sendMessage(phone, prop.getSignName(), prop.getVerifyCodeTemplate(), param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用的发送短信的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone    手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signName 签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> template 模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param    模板参数，json风格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String phone, String signName, String template, String param)</span> </span>&#123;</span><br><span class="line">        CommonRequest request = <span class="keyword">new</span> CommonRequest();</span><br><span class="line">        request.setProtocol(ProtocolType.HTTPS);</span><br><span class="line">        request.setMethod(MethodType.POST);</span><br><span class="line">        request.setDomain(prop.getDomain());</span><br><span class="line">        request.setVersion(prop.getVersion());</span><br><span class="line">        request.setAction(prop.getAction());</span><br><span class="line">        request.putQueryParameter(SMS_PARAM_KEY_PHONE, phone);</span><br><span class="line">        request.putQueryParameter(SMS_PARAM_KEY_SIGN_NAME, signName);</span><br><span class="line">        request.putQueryParameter(SMS_PARAM_KEY_TEMPLATE_CODE, template);</span><br><span class="line">        request.putQueryParameter(SMS_PARAM_KEY_TEMPLATE_PARAM, param);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CommonResponse response = client.getCommonResponse(request);</span><br><span class="line">            <span class="keyword">if</span> (response.getHttpStatus() &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;【SMS服务】发送短信失败。响应信息：&#123;&#125;&quot;</span>, response.getData());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取响应体</span></span><br><span class="line">            Map&lt;String, String&gt; resp = JsonUtils.toMap(response.getData(), String.class, String.class);</span><br><span class="line">            <span class="comment">// 判断是否是成功</span></span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.equals(OK, resp.get(SMS_RESPONSE_KEY_CODE))) &#123;</span><br><span class="line">                <span class="comment">// 不成功，</span></span><br><span class="line">                log.error(<span class="string">&quot;【SMS服务】发送短信失败，原因&#123;&#125;&quot;</span>, resp.get(SMS_RESPONSE_KEY_MESSAGE));</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;【SMS服务】发送短信成功，手机号：&#123;&#125;, 响应：&#123;&#125;&quot;</span>, phone, response.getData());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServerException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;【SMS服务】发送短信失败，服务端异常。&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;【SMS服务】发送短信失败，客户端异常。&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里把阿里SDK中会用到的一些参数KEY，响应KEY都定义成了常量，定义在<code>ly-sms</code>的<code>com.leyou.sms.constants</code>包下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.sms.constants;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsConstants</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_PARAM_KEY_PHONE = <span class="string">&quot;PhoneNumbers&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_PARAM_KEY_SIGN_NAME = <span class="string">&quot;SignName&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_PARAM_KEY_TEMPLATE_CODE = <span class="string">&quot;TemplateCode&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_PARAM_KEY_TEMPLATE_PARAM= <span class="string">&quot;TemplateParam&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_RESPONSE_KEY_CODE = <span class="string">&quot;Code&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_RESPONSE_KEY_MESSAGE = <span class="string">&quot;Message&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OK = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信验证码的参数的模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERIFY_CODE_PARAM_TEMPLATE = <span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;%s\&quot;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554515536227.png" alt="1554515536227"> </p><h2 id="1-4-编写消息监听器"><a href="#1-4-编写消息监听器" class="headerlink" title="1.4.编写消息监听器"></a>1.4.编写消息监听器</h2><p>接下来，在<code>com.leyou.sms.mq</code>包中编写消息监听器，当接收到消息后，我们发送短信。我们可以通过<code>routing_key</code>，监听不同类型消息，发送不同类型短信。</p><p>本例中，我们监听<code>VERIFY_CODE_KEY</code>，发送验证码短信。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.sms.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.RegexUtils;</span><br><span class="line"><span class="keyword">import</span> com.leyou.sms.utils.SmsUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.leyou.common.constants.MQConstants.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SmsUtils smsUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageListener</span><span class="params">(SmsUtils smsUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.smsUtils = smsUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = QueueConstants.SMS_VERIFY_CODE_QUEUE, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = ExchangeConstants.SMS_EXCHANGE_NAME, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = RoutingKeyConstants.VERIFY_CODE_KEY</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenVerifyCodeMessage</span><span class="params">(Map&lt;String,String&gt; msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(msg))&#123;</span><br><span class="line">            <span class="comment">// 如果消息为空，不处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 手机号</span></span><br><span class="line">        String phone = msg.get(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!RegexUtils.isPhone(phone)) &#123;</span><br><span class="line">            <span class="comment">// 手机号有误，不处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 验证码</span></span><br><span class="line">        String code = msg.get(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!RegexUtils.isCodeValid(code)) &#123;</span><br><span class="line">            <span class="comment">// 验证码有误，不处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发送短信</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            smsUtils.sendVerifyCode(phone, code);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 短信发送失败，我不想重试，异常捕获</span></span><br><span class="line">            log.error(<span class="string">&quot;【SMS服务】短信验证码发送失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到，消息体是一个Map，里面有两个属性：</p><ul><li>phone：电话号码</li><li>code：短信验证码</li></ul><h2 id="1-5-启动"><a href="#1-5-启动" class="headerlink" title="1.5.启动"></a>1.5.启动</h2><p>启动项目，然后查看RabbitMQ控制台，发现交换机已经创建：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1527239600218.png" alt="1527239600218"></p><h2 id="1-6-单元测试"><a href="#1-6-单元测试" class="headerlink" title="1.6.单元测试"></a>1.6.单元测试</h2><p>编写一个测试类，尝试发送一条短信消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;13000000000&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;ly.sms.exchange&quot;</span>, <span class="string">&quot;sms.verify.code&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">上面讲的都是测试后端给阿里云的短信服务发送短信验证功能，</span></span><br><span class="line"><span class="attr">至于阿里云sms服务的开通，请参考网上教程。</span></span><br><span class="line"><span class="attr">一定要学会看阿里云的官网里的SMS短信服务里面的详细教程,</span></span><br><span class="line"><span class="attr">里面还有让我们导入的java依赖包，java代码；这是我们迁移学习的能力</span></span><br><span class="line"><span class="attr">要学的东西太多了，以后还有很多第三方服务需要接入我们的项目，我们要学会如何上手，使用别人的服务！</span></span><br></pre></td></tr></table></figure><h1 id="2-创建用户中心"><a href="#2-创建用户中心" class="headerlink" title="2.创建用户中心"></a>2.创建用户中心</h1><p>用户搜索到自己心仪的商品，接下来就要去购买，但是购买必须先登录。所以接下来我们编写用户中心，实现用户的登录和注册功能。</p><p>用户中心的提供的服务：</p><ul><li>用户的注册</li><li>用户个人信息管理</li><li>修改密码</li><li>修改手机</li><li>用户地址管理</li><li>用户收藏管理</li><li>…</li></ul><p>这里我们暂时先实现基本的：<code>注册和登录</code>功能，其它功能大家可以自行补充完整。</p><p>因为用户中心的服务其它微服务也会调用，因此这里我们做聚合：</p><ul><li>ly-user：父工程，包含3个子工程：<ul><li>ly-user-api：接口</li><li>ly-user-pojo:实体</li><li>ly-user-service：业务和服务</li></ul></li></ul><h2 id="2-1-创建父module"><a href="#2-1-创建父module" class="headerlink" title="2.1.创建父module"></a>2.1.创建父module</h2><p>创建</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554386667625.png" alt="1554386667625"></p><p>位置：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554386686948.png" alt="1554386686948"></p><h2 id="2-1-创建ly-user-pojo"><a href="#2-1-创建ly-user-pojo" class="headerlink" title="2.1.创建ly-user-pojo"></a>2.1.创建ly-user-pojo</h2><p>项目坐标：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554386749299.png" alt="1554386749299"> </p><p>保存的位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554386775550.png" alt="1554386775550"></p><p>pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-创建ly-user-api"><a href="#2-2-创建ly-user-api" class="headerlink" title="2.2.创建ly-user-api"></a>2.2.创建ly-user-api</h2><p>创建module：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/image-20200316202316961.png" alt="image-20200316202316961"></p><p>位置：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/image-20200316202327368.png" alt="image-20200316202327368"></p><p>pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-创建ly-user-service"><a href="#2-3-创建ly-user-service" class="headerlink" title="2.3.创建ly-user-service"></a>2.3.创建ly-user-service</h2><p>创建module</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554386965099.png" alt="1554386965099"></p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554386981284.png" alt="1554386981284"></p><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>ly-user</code>的<code>com.leyou.user</code>包下创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.user&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.leyou.user.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyUserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyUserApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在application.yml文件中编写配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ly-mysql:3306/heima?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="attr">insert-strategy:</span> <span class="string">not_null</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.user.entity</span></span><br></pre></td></tr></table></figure><p>父工程ly-user的pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ly-user-pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ly-user-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ly-user-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-添加网关路由"><a href="#2-4-添加网关路由" class="headerlink" title="2.4.添加网关路由"></a>2.4.添加网关路由</h2><p>我们修改<code>ly-gateway</code>，添加路由规则，对<code>user-service</code>进行路由:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ly-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># ...略</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment"># ...略</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 用户服务</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br></pre></td></tr></table></figure><h1 id="3-用户中心功能"><a href="#3-用户中心功能" class="headerlink" title="3.用户中心功能"></a>3.用户中心功能</h1><h2 id="3-1-接口文档"><a href="#3-1-接口文档" class="headerlink" title="3.1.接口文档"></a>3.1.接口文档</h2><p>在我们的接口文档中，可以选择查看用户服务的接口：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/image-20200316214623458.png" alt="image-20200316214623458"></p><p>包含下面内容：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/image-20200316214541277.png" alt="image-20200316214541277"> </p><h2 id="3-2-数据结构"><a href="#3-2-数据结构" class="headerlink" title="3.2.数据结构"></a>3.2.数据结构</h2><p>大家把数据库中的<code>tb_user</code>删除，然后重新运行下面的SQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_user` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(32) NOT NULL COMMENT &#x27;用户名&#x27;,</span><br><span class="line">  `password` varchar(60) NOT NULL COMMENT &#x27;密码，加密存储&#x27;,</span><br><span class="line">  `phone` varchar(11) DEFAULT NULL COMMENT &#x27;注册手机号&#x27;,</span><br><span class="line">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `username` (`username`) USING BTREE,</span><br><span class="line">  UNIQUE KEY `phone` (`phone`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 COMMENT=&#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure><p>数据结构比较简单，因为根据用户名查询的频率较高，所以我们给用户名创建了索引</p><h2 id="3-3-基本代码"><a href="#3-3-基本代码" class="headerlink" title="3.3.基本代码"></a>3.3.基本代码</h2><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>在<code>ly-user-service</code>的<code>com.leyou.user.entity</code>包下，创建实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><p>在<code>ly-user-service</code>的<code>com.leyou.user.mapper</code>包下，创建Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>在<code>ly-user-service</code>的<code>com.leyou.user.service</code>包下，创建Service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-user-service</code>的<code>com.leyou.user.service.impl</code>包下，创建Service的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.service.UserService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-查询数据是否存在"><a href="#3-4-查询数据是否存在" class="headerlink" title="3.4.查询数据是否存在"></a>3.4.查询数据是否存在</h2><h3 id="3-4-1-接口说明："><a href="#3-4-1-接口说明：" class="headerlink" title="3.4.1.接口说明："></a>3.4.1.接口说明：</h3><p>用户注册时，用户输入自己的手机号或者用户名，此时我们前端会把数据发送到服务端，服务端查询数据库，判断数据是否存在，把结果返回到前端，提示用户。</p><p>接口路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /info/exists/&#123;data&#125;/&#123;type&#125;</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>data</td><td>要校验的数据，可能是手机或用户名</td><td>是</td><td>String</td><td>无</td></tr><tr><td>type</td><td>数据类型，1代表用户名，2代表手机</td><td>是</td><td>Integer</td><td>无</td></tr></tbody></table><p>返回结果：</p><p>返回布尔类型结果：</p><ul><li>true：存在</li><li>false：不存在</li></ul><p>状态码：</p><ul><li>200：校验成功</li><li>400：参数有误，比如type传递了3</li><li>500：服务器内部异常</li></ul><h3 id="3-4-2-controller"><a href="#3-4-2-controller" class="headerlink" title="3.4.2.controller"></a>3.4.2.controller</h3><p>根据接口文档信息，我们可以确定：</p><ul><li>请求方式：GET</li><li>请求路径：/info/exists/{data}/{type}</li><li>请求参数：data,type</li><li>返回结果：true或false</li></ul><p>在<code>ly-user-service</code>的<code>com.leyou.user.web</code>包中，创建一个<code>UserController</code>，并编写接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.user.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.leyou.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验手机号或用户名是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 用户名或手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 数据类型：1是用户名；2是手机；其它是参数有误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：可以使用; false：不可使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/exists/&#123;data&#125;/&#123;type&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Boolean&gt; <span class="title">exists</span><span class="params">(<span class="meta">@PathVariable(&quot;data&quot;)</span> String data, <span class="meta">@PathVariable(&quot;type&quot;)</span> Integer type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userService.exists(data, type));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-Service"><a href="#3-4-3-Service" class="headerlink" title="3.4.3.Service"></a>3.4.3.Service</h3><p>首先，在<code>ly-user</code>的<code>com.leyou.user.service</code>包中的<code>UserService</code>接口中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Boolean <span class="title">exists</span><span class="params">(String data, Integer type)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-user</code>的<code>com.leyou.user.service.impl</code>包中的<code>UserServiceImpl</code>接口中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">exists</span><span class="params">(String data, Integer type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(type != <span class="number">1</span> &amp;&amp; type != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;请求参数有误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 校验手机或用户名是否存在</span></span><br><span class="line">    <span class="keyword">return</span> query()</span><br><span class="line">        .eq(type == <span class="number">1</span>, <span class="string">&quot;username&quot;</span>, data)</span><br><span class="line">        .eq(type == <span class="number">2</span>, <span class="string">&quot;phone&quot;</span>, data)</span><br><span class="line">        .count() == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-发送短信功能"><a href="#3-5-发送短信功能" class="headerlink" title="3.5.发送短信功能"></a>3.5.发送短信功能</h2><h3 id="3-5-1-接口说明"><a href="#3-5-1-接口说明" class="headerlink" title="3.5.1.接口说明"></a>3.5.1.接口说明</h3><p>当用户输入手机号以后，点击发送短信验证码功能，前端会把用户手机号码发送到服务端，服务端需要生成一个验证码，然后发送到指定的手机号。</p><p>生成的验证码需要在服务端保存，下次用户提交验证码时，方便做校验。</p><p><strong>接口路径</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Post /info/code</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><p>form表单请求参数：</p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>phone</td><td>发短信的目标手机号码</td><td>是</td><td>String</td><td>无</td></tr></tbody></table><p><strong>返回结果：</strong></p><p>无</p><p><strong>状态码：</strong></p><ul><li>204：发送成功</li><li>400：参数有误</li><li>500：服务器内部异常</li></ul><p>这里的业务逻辑是这样的：</p><ul><li>1）我们接收页面发送来的手机号码</li><li>2）生成一个随机验证码</li><li>3）将验证码保存在服务端（要用redis代替session）</li><li>4）发送短信，将验证码发送到用户手机（向MQ发送消息）</li></ul><p>那么问题来了：验证码保存在哪里呢？</p><p>验证码有一定有效期，一般是5分钟，我们可以利用Redis的过期机制来保存。</p><h3 id="3-5-2-controller"><a href="#3-5-2-controller" class="headerlink" title="3.5.2.controller"></a>3.5.2.controller</h3><p>在<code>ly-user-service</code>的<code>com.leyou.user.web</code>包中的<code>UserController</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/code&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone)</span></span>&#123;</span><br><span class="line">    userService.sendCode(phone);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-Service"><a href="#3-5-3-Service" class="headerlink" title="3.5.3.Service"></a>3.5.3.Service</h3><p>这里的逻辑会稍微复杂：</p><ul><li>生成随机验证码</li><li>将验证码保存到Redis中，用来在注册的时候验证</li><li>发送验证码到<code>ly-sms-service</code>服务，发送短信</li></ul><p>因此，我们需要引入Redis和AMQP：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加RabbitMQ和Redis配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-mq</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><p>然后，在<code>ly-user</code>的<code>com.leyou.user.service</code>包中的<code>UserService</code>接口中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(String phone)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-user</code>的<code>com.leyou.user.service.impl</code>包中的<code>UserServiceImpl</code>中添加方法：</p><p>先引入<code>RedisTemplate</code>和<code>AmqpTemplate</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(StringRedisTemplate redisTemplate, AmqpTemplate amqpTemplate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    <span class="keyword">this</span>.amqpTemplate = amqpTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是业务代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.验证手机号格式</span></span><br><span class="line">    <span class="keyword">if</span> (!RegexUtils.isPhone(phone)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;请求参数有误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.使用Apache的工具类生成6位数字验证码</span></span><br><span class="line">    String code = RandomStringUtils.randomNumeric(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.保存验证码到redis</span></span><br><span class="line">    redisTemplate.opsForValue().set(KEY_PREFIX + phone, code, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.发送RabbitMQ消息到ly-sms</span></span><br><span class="line">    Map&lt;String, String&gt; msg = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;phone&quot;</span>, phone);</span><br><span class="line">    msg.put(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">    amqpTemplate.convertAndSend(SMS_EXCHANGE_NAME, VERIFY_CODE_KEY, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>手机号校验使用了ly-common中定义的正则工具类</li><li>要设置短信验证码在Redis的缓存有效时间</li></ul><p>拓展知识：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">我们利用阿里的短信发送服务，可以直接在后端向阿里云短信服务发请求（将验证码跟手机号作为参数带过去）</span></span><br><span class="line"><span class="attr">但如果并发量上来，阿里云短信服务容易产生问题时，验证码短信服务就会失败</span></span><br><span class="line"></span><br><span class="line"><span class="attr">为了提高我们的系统的健壮性，先随机生成验证码，将验证码保存到redis中并设置有效期5分钟，</span></span><br><span class="line"><span class="attr">然后将验证码跟手机号发给我们的MQ服务，</span></span><br><span class="line"><span class="attr">再写一个SMS微服务监听MQ，</span></span><br><span class="line"><span class="attr">SMS微服务监听到MQ有消息来之后，再向阿里短信服务发送请求，变成异步的。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">因此我们平时点击发送验证码，几乎不会看到究竟有没有发送验证码成功，或者延迟挺久才发送成功</span></span><br><span class="line"><span class="attr">因为将消息发送给了MQ就可以了，至于阿里云第三方有没有短信发送，我们前端是看不到的。</span></span><br></pre></td></tr></table></figure><h2 id="3-6-注册功能"><a href="#3-6-注册功能" class="headerlink" title="3.6.注册功能"></a>3.6.注册功能</h2><h3 id="3-6-1-接口说明"><a href="#3-6-1-接口说明" class="headerlink" title="3.6.1.接口说明"></a>3.6.1.接口说明</h3><p><strong>功能说明</strong></p><p>用户页面填写数据，发送表单到服务端，服务端对用户输入的短信验证码进行校验，对用户数据做校验，另外还需要对用户密码进行加密存储，使用MD5加密，加密过程中使用随机码作为salt加盐，步骤如下：</p><ul><li>验证短信验证码</li><li>校验用户数据</li><li>对密码加密</li><li>写入数据库</li></ul><p><strong>接口路径</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /info</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><p>form表单格式</p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>username</td><td>用户名，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr><tr><td>password</td><td>用户密码，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr><tr><td>phone</td><td>手机号码</td><td>是</td><td>String</td><td>无</td></tr><tr><td>code</td><td>短信验证码</td><td>是</td><td>String</td><td>无</td></tr></tbody></table><p><strong>返回结果：</strong></p><p>无返回值。</p><p>状态码：</p><ul><li>201：注册成功</li><li>400：参数有误，注册失败</li><li>500：服务器内部异常，注册失败</li></ul><h3 id="3-6-2-controller"><a href="#3-6-2-controller" class="headerlink" title="3.6.2.controller"></a>3.6.2.controller</h3><p>在<code>ly-user-service</code>的<code>com.leyou.user.web</code>包中的<code>UserController</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">register</span><span class="params">(User user, <span class="meta">@RequestParam(&quot;code&quot;)</span> String code)</span></span>&#123;</span><br><span class="line">    userService.register(user, code);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-3-Service"><a href="#3-6-3-Service" class="headerlink" title="3.6.3.Service"></a>3.6.3.Service</h3><p>基本逻辑：</p><ul><li>1）校验短信验证码</li><li>2）对密码加密</li><li>3）写入数据库</li></ul><p>密码加密：</p><p>密码加密使用传统的MD5加密并不安全，这里我们使用的是<strong>Spring提供的BCryptPasswordEncoder加密算法</strong>，分成加密和验证两个过程：</p><ul><li><p>加密：算法会对明文密码随机生成一个salt，使用salt结合密码来加密，得到最终的密文。</p></li><li><p>验证密码：需要先拿到加密后的密码和要验证的密码，根据已加密的密码来推测出salt，然后利用相同的算法和salt对要验证码的密码加密，与已加密的密码对比即可。</p></li></ul><p>为了防止有人能根据密文推测出salt，我们需要在使用BCryptPasswordEncoder时配置随即密钥，在<code>com.leyou.user.config</code>包中创建一个配置类，注册<code>BCryptPasswordEncoder</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;ly.encoder.crypt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> strength;</span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 利用密钥生成随机安全码</span></span><br><span class="line">        SecureRandom secureRandom = <span class="keyword">new</span> SecureRandom(secret.getBytes());</span><br><span class="line">        <span class="comment">// 初始化BCryptPasswordEncoder</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder(strength, secureRandom);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中配置属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">encoder:</span></span><br><span class="line">    <span class="attr">crypt:</span></span><br><span class="line">      <span class="attr">secret:</span> <span class="string">$&#123;random.uuid&#125;</span> <span class="comment"># 随机的密钥，使用uuid</span></span><br><span class="line">      <span class="attr">strength:</span> <span class="number">6</span> <span class="comment"># 加密强度4~31，决定盐加密时的运算强度，超过10以后加密耗时会显著增加</span></span><br></pre></td></tr></table></figure><p>然后，在<code>ly-user</code>的<code>com.leyou.user.service</code>包中的<code>UserService</code>接口中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(User user, String code)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-user</code>的<code>com.leyou.user.service.impl</code>包中的<code>UserServiceImpl</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user, String code)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.校验验证码</span></span><br><span class="line">    <span class="comment">// 1.1 取出redis中的验证码</span></span><br><span class="line">    String cacheCode = redisTemplate.opsForValue().get(KEY_PREFIX + user.getPhone());</span><br><span class="line">    <span class="comment">// 1.2 比较验证码</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.equals(code, cacheCode)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.对密码加密</span></span><br><span class="line">    user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.写入数据库</span></span><br><span class="line">    save(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-服务端数据校验"><a href="#3-7-服务端数据校验" class="headerlink" title="3.7.服务端数据校验"></a>3.7.服务端数据校验</h2><p>刚才虽然实现了注册，但是服务端并没有进行数据校验，而前端的校验是很容易被有心人绕过的。所以我们必须在后台添加数据校验功能：</p><p>我们这里会使用Hibernate-Validator框架完成数据校验：</p><p>而SpringBoot的web启动器中已经集成了相关依赖：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1527244265451.png" alt="1527244265451"></p><h3 id="3-7-1-什么是Hibernate-Validator"><a href="#3-7-1-什么是Hibernate-Validator" class="headerlink" title="3.7.1.什么是Hibernate Validator"></a>3.7.1.什么是Hibernate Validator</h3><p>Hibernate Validator是Hibernate提供的一个开源框架，使用注解方式非常方便的实现服务端的数据校验。</p><p>官网：<a href="http://hibernate.org/validator/">http://hibernate.org/validator/</a></p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1527244393041.png" alt="1527244393041"></p><p><strong>hibernate Validator</strong> 是 Bean Validation 的参考实现 。</p><p>Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint（约束） 的实现，除此之外还有一些附加的 constraint。</p><p>在日常开发中，Hibernate Validator经常用来验证bean的字段，基于注解，方便快捷高效。</p><h3 id="3-7-2-Bean校验的注解"><a href="#3-7-2-Bean校验的注解" class="headerlink" title="3.7.2.Bean校验的注解"></a>3.7.2.Bean校验的注解</h3><p>常用注解如下：</p><table><thead><tr><th><strong>Constraint</strong></th><th><strong>详细信息</strong></th></tr></thead><tbody><tr><td><strong>@Valid</strong></td><td>被注释的元素是一个对象，需要检查此对象的所有字段值</td></tr><tr><td><strong>@Null</strong></td><td>被注释的元素必须为 null</td></tr><tr><td><strong>@NotNull</strong></td><td>被注释的元素必须不为 null</td></tr><tr><td><strong>@AssertTrue</strong></td><td>被注释的元素必须为 true</td></tr><tr><td><strong>@AssertFalse</strong></td><td>被注释的元素必须为 false</td></tr><tr><td><strong>@Min(value)</strong></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><strong>@Max(value)</strong></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><strong>@DecimalMin(value)</strong></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><strong>@DecimalMax(value)</strong></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><strong>@Size(max,   min)</strong></td><td>被注释的元素的大小必须在指定的范围内</td></tr><tr><td><strong>@Digits   (integer, fraction)</strong></td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td><strong>@Past</strong></td><td>被注释的元素必须是一个过去的日期</td></tr><tr><td><strong>@Future</strong></td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td><strong>@Pattern(value)</strong></td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td><strong>@Email</strong></td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td><strong>@Length</strong></td><td>被注释的字符串的大小必须在指定的范围内</td></tr><tr><td><strong>@NotEmpty</strong></td><td>被注释的字符串的必须非空</td></tr><tr><td><strong>@Range</strong></td><td>被注释的元素必须在合适的范围内</td></tr><tr><td><strong>@NotBlank</strong></td><td>被注释的字符串的必须非空</td></tr><tr><td><strong>@URL(protocol=,host=,   port=,regexp=, flags=)</strong></td><td>被注释的字符串必须是一个有效的url</td></tr><tr><td><strong>@CreditCardNumber</strong></td><td>被注释的字符串必须通过Luhn校验算法，银行卡，信用卡等号码一般都用Luhn计算合法性</td></tr></tbody></table><h3 id="3-7-3-给User添加校验"><a href="#3-7-3-给User添加校验" class="headerlink" title="3.7.3.给User添加校验"></a>3.7.3.给User添加校验</h3><p>我们在User对象的部分属性上添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.constants.RegexPatterns;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Pattern(regexp = RegexPatterns.USERNAME_REGEX, message = &quot;用户名格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Pattern(regexp = RegexPatterns.USERNAME_REGEX, message = &quot;密码格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Pattern(regexp = RegexPatterns.PHONE_REGEX, message = &quot;手机号格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>RegexPatterns</code>是我们在<code>ly-common</code>中定义的正则表达式常量，其中还包括：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.common.constants;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexPatterns</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号正则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PHONE_REGEX = <span class="string">&quot;^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d&#123;8&#125;$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱正则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EMAIL_REGEX = <span class="string">&quot;^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名正则。4~32位的字母、数字、下划线</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME_REGEX = <span class="string">&quot;^\\w&#123;4,32&#125;$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码正则。4~32位的字母、数字、下划线</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD_REGEX = <span class="string">&quot;^\\w&#123;4,32&#125;$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码正则, 6位数字或字母</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERIFY_CODE_REGEX = <span class="string">&quot;^[a-zA-Z\\d]&#123;6&#125;$&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-4-在controller上进行控制"><a href="#3-7-4-在controller上进行控制" class="headerlink" title="3.7.4.在controller上进行控制"></a>3.7.4.在controller上进行控制</h3><p>在controller中只需要给User添加 @Valid注解即可。</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/image-20200316211916679.png" alt="image-20200316211916679"></p><h3 id="3-7-5-测试"><a href="#3-7-5-测试" class="headerlink" title="3.7.5.测试"></a>3.7.5.测试</h3><p>我们故意填错：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1527247422251.png" alt="1527247422251"></p><p>然后SpringMVC会自动返回错误信息：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1527247492172.png" alt="1527247492172"></p><p>如果需要自定义返回结果，可以这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;register&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">register</span><span class="params">(<span class="meta">@Valid</span> User user, BindingResult result, <span class="meta">@RequestParam(&quot;code&quot;)</span> String code)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        String msg = result.getFieldErrors().stream().map(FieldError::getDefaultMessage)</span><br><span class="line">            .collect(Collectors.joining(<span class="string">&quot;|&quot;</span>));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    userService.register(user, code);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在User参数后面跟一个BindingResult参数，不管校验是否通过，都会进入方法内部。如何判断校验是否通过呢？</p><p>BindingResult中会封装错误结果，我们通过result.hashErrors来判断是否有错误，然后荣光result.getFieldErrors来获取错误信息。</p><p>再次测试：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554547576246.png" alt="1554547576246"></p><p>结果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C/1554547592656.png" alt="1554547592656"></p><h2 id="3-8-根据用户名和密码查询用户"><a href="#3-8-根据用户名和密码查询用户" class="headerlink" title="3.8.根据用户名和密码查询用户"></a>3.8.根据用户名和密码查询用户</h2><h3 id="3-8-1-接口说明"><a href="#3-8-1-接口说明" class="headerlink" title="3.8.1.接口说明"></a>3.8.1.接口说明</h3><h4 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h4><p>查询功能，根据参数中的用户名和密码查询指定用户，验证用户名和密码是否正确，如果正确我们返回用户信息，如果不正确，返回异常</p><h4 id="接口路径"><a href="#接口路径" class="headerlink" title="接口路径"></a>接口路径</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /info</span><br></pre></td></tr></table></figure><h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><p>form表单格式</p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>username</td><td>用户名，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr><tr><td>password</td><td>用户密码，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr></tbody></table><h4 id="返回结果："><a href="#返回结果：" class="headerlink" title="返回结果："></a>返回结果：</h4><p>用户的json格式数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">6572312</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>:<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;phone&quot;</span>:<span class="string">&quot;13000000000&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态码：</p><ul><li>200：查询成功</li><li>400：用户名或密码错误</li><li>500：服务器内部异常，查询失败</li></ul><p>这里要返回的结果与数据库字段不一致，需要在<code>ly-user-pojo</code>中定义一个dto：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.user.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.dto.BaseDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDTO</span> <span class="keyword">extends</span> <span class="title">BaseDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDTO</span><span class="params">(BaseEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">List&lt;UserDTO&gt; <span class="title">convertEntityList</span><span class="params">(Collection&lt;T&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.stream().map(UserDTO::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-2-controller"><a href="#3-8-2-controller" class="headerlink" title="3.8.2.controller"></a>3.8.2.controller</h3><p>在<code>ly-user-service</code>的<code>com.leyou.user.web</code>包中的<code>UserController</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据手机号和密码查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserDTO&gt; <span class="title">queryUserByPhoneAndPassword</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userService.queryUserByPhoneAndPassword(username, password));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-3-service"><a href="#3-8-3-service" class="headerlink" title="3.8.3.service"></a>3.8.3.service</h3><p>然后，在<code>ly-user</code>的<code>com.leyou.user.service</code>包中的<code>UserService</code>接口中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UserDTO <span class="title">queryUserByPhoneAndPassword</span><span class="params">(String phone, String password)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>ly-user</code>的<code>com.leyou.user.service.impl</code>包中的<code>UserServiceImpl</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> UserDTO <span class="title">queryUserByPhoneAndPassword</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.根据用户名查询</span></span><br><span class="line">    User user = getOne(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().eq(<span class="string">&quot;username&quot;</span>, username));</span><br><span class="line">    <span class="comment">// 2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户名错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.校验密码</span></span><br><span class="line">    <span class="keyword">if</span>(!passwordEncoder.matches(password, user.getPassword()))&#123;</span><br><span class="line">        <span class="comment">// 密码错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(<span class="number">400</span>, <span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.转换DTO</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserDTO(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意，<strong>查询时也要对密码进行加密后判断是否一致</strong>。</p><p><strong>注册业务总结：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">注册业务：</span></span><br><span class="line"><span class="attr">1</span> <span class="string">前端输入手机号，用户名，要先校验是否已经存在过手机或者用户名，</span></span><br><span class="line"><span class="attr">（通过查询用户表便可知道是否存在，很容易实现）</span></span><br><span class="line"><span class="attr">2</span> <span class="string">前端只有都不存在时前端才允许点击“发送验证码”；</span></span><br><span class="line"><span class="attr">3</span> <span class="string">点击“发送验证码”之后，后端保存验证码到redis中（并设置5分钟有效），同时通过阿里第三方发送短信</span></span><br><span class="line"></span><br><span class="line"><span class="attr">4</span> <span class="string">前端填好验证码之后点击注册，将手机号，用户名，密码，验证码带给后端</span></span><br><span class="line"></span><br><span class="line"><span class="attr">5</span> <span class="string">后端首先校验验证码，是否存在key，key的value对不对</span></span><br><span class="line"><span class="attr">6</span> <span class="string">验证码校验成功后就可以删除redis中的验证码了（节省内存）</span></span><br><span class="line"><span class="attr">7</span> <span class="string">然后将手机号，用户名，密码 保存到用户表中完成注册，当然密码要先加密。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">8</span> <span class="string">加密方式是Spring提供的BCryptPasswordEncoder加密算法。加盐加密。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">9</span> <span class="string">盐分为静态盐和动态盐，但是动态盐是的盐不同，得到的密文也不同</span></span><br><span class="line"><span class="attr">因此Spring保证了随机因子是一样的（配置文件中配置了随机因子），</span></span><br><span class="line"><span class="attr">因此由随机因子产生的动态盐是一样的。</span></span><br><span class="line"><span class="attr">只要服务器不重启，那么配置文件的随机因子就不会变，每次产生的盐就不会变。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">10最后：登录查询校验密码时：spring根据密码获取上次的盐，跟明文再次加密，然后才去数据库用户表校验密码</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用户中心-注册&quot;&gt;&lt;a href=&quot;#用户中心-注册&quot; class=&quot;headerlink&quot; title=&quot;用户中心-注册&quot;&gt;&lt;/a&gt;用户中心-注册&lt;/h1&gt;&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="阿里短信服务" scheme="http://example.com/tags/%E9%98%BF%E9%87%8C%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="md5加密" scheme="http://example.com/tags/md5%E5%8A%A0%E5%AF%86/"/>
    
    <category term="注册" scheme="http://example.com/tags/%E6%B3%A8%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城项目-OpenResty与商品详情页</title>
    <link href="http://example.com/2022/06/28/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-OpenResty%E4%B8%8E%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/"/>
    <id>http://example.com/2022/06/28/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE-OpenResty%E4%B8%8E%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/</id>
    <published>2022-06-28T14:10:45.000Z</published>
    <updated>2022-06-29T13:12:34.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="商品详情页"><a href="#商品详情页" class="headerlink" title="商品详情页"></a>商品详情页</h1><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">实现商品详情页几种解决办法</span></span><br><span class="line"><span class="meta">-</span> <span class="string">学会OpenResty的使用</span></span><br><span class="line"><span class="meta">-</span> <span class="string">学会Lua的基本语法</span></span><br><span class="line"><span class="meta">-</span> <span class="string">理解Nginx模板渲染功能</span></span><br><span class="line"><span class="meta">-</span> <span class="string">学会OpenResty操作Redis</span></span><br><span class="line"><span class="meta">-</span> <span class="string">学会Canal的使用</span></span><br></pre></td></tr></table></figure><h1 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1.实现思路"></a>1.实现思路</h1><p>用户搜索到商品后，就会点击商品，查看商品详情内容，就会访问到商品详情页。商品详情页是展示商品详细信息的一个页面，承载在网站的大部分流量和订单的入口。</p><p>因此，商品详情页必须能够应对高并发的压力。那么如何才能实现一个满足千万级并发量的商品详情页面呢？</p><p>接下来，我们就一起分析下商品详情页的设计思路。</p><h2 id="1-1-传统模式"><a href="#1-1-传统模式" class="headerlink" title="1.1.传统模式"></a>1.1.传统模式</h2><p>首先，来看下传统模式下，一个页面的加载和渲染过程：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310173422202.png" alt="image-20200310173422202"></p><p>基本流程如下：</p><ul><li>用户请求Nginx服务，获取到静态页面</li><li>然后页面发起ajax，向Tomcat服务获取数据</li><li>Tomcat查询数据库</li><li>页面渲染</li></ul><p>这种模式下，数据库称为了瓶颈，高并发情况下， 数据库难以支撑，因此我们可能会在服务之前加入缓存，减小数据库压力：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310173700012.png" alt="image-20200310173700012"></p><p>此时，整个服务的并发能力，就受限于Tomcat了，业务经常受到依赖的服务不稳定而导致的性能抖动。</p><h2 id="1-2-静态化页面"><a href="#1-2-静态化页面" class="headerlink" title="1.2.静态化页面"></a>1.2.静态化页面</h2><p>为了解决上述问题，就有了页面静态化方案，如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310174506082.png" alt="image-20200310174506082"></p><p>基本流程：</p><ul><li>商品修改发送消息到MQ</li><li>微服务监听MQ，得知商品变化，渲染并生成一个静态页面</li><li>用户请求Nginx</li><li>Nginx直接返回渲染好的静态Html</li></ul><p>优点：</p><ul><li>用户请求渲染好的Html，响应速度快</li><li>通过MQ异步更新，保证数据同步</li></ul><p>缺陷：</p><ul><li>小部分数据如价格变更，整个静态页都要重新生成</li><li>随着商品数量增加，页面会越来越多</li><li>页面模板变更，所有商品的静态页都要重新生成，非常困难</li></ul><p><strong>分析方法总结：</strong>（两种方案都不行，然后提出两种优化方法）</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/313d024d6eed3ba52bf255e109e39f1.png" alt="313d024d6eed3ba52bf255e109e39f1"></p><h2 id="1-3-动态模板，静态化数据"><a href="#1-3-动态模板，静态化数据" class="headerlink" title="1.3.动态模板，静态化数据"></a>1.3.动态模板，静态化数据</h2><p>我们要解决的问题：</p><ul><li>能迅速响瞬变的需求，和各种变态需求；</li><li>支持各种垂直化页面改版；</li><li>页面模块化；</li><li>高性能、水平扩容；</li></ul><p>怎么办？</p><ul><li>如何做到动态响应需求变化，页面变化？<ul><li>将页面模板动态化，需要的数据静态化</li></ul></li><li>如何避免整个页面的全量更新？<ul><li>我们把页面分成几部分：如顶部面包屑、商品SKU展示、商品描述、商品评论等，形成多个页面模板（模块）。对应的数据也分成几部分，这些数据可能来自不同的微服务。这样可以减少因局部变更引起的整个页面重新生成。</li></ul></li><li>如何应对Tomcat的并发能力低问题？<ul><li>将模板渲染、数据放到nginx中做，利用nginx的高并发能力提高系统吞吐量</li></ul></li><li>如何实现数据静态化？<ul><li>需要的数据可以缓存在Nginx的本地共享词典中（长期不会修改的数据），如果命中则直接渲染并返回。如果未命中，则查询Redis集群，获取数据。如果Redis集群依然未命中，再去查询后台微服务，由微服务获取数据，然后写入缓存中，保证下次Nginx可以从缓存中拿到数据。这样可以减少服务端压力。</li></ul></li><li>如何保证数据一致性？<ul><li>为了保证Redis数据与数据库数据一致，我们还要用到Canal技术，监听数据库变化，及时更新Redis数据。</li></ul></li></ul><p>流程图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310181707858.png" alt="image-20200310181707858"></p><p>因此，我们需要做的事情包括：</p><ul><li>静态页数据服务：一个收集商品相关数据，并更新Redis缓存的数据服务</li><li>Nginx服务：接收用户请求，查询模板数据，利用模板渲染商品页面</li><li>Canal服务：监听数据库变化，同步通知静态页数据服务，更新Redis数据</li></ul><p>上图中，如果redis有想要的缓存数据，直接返回给nginx</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">相比上上图的传统缓冲，使用redis性能大大提高</span></span><br><span class="line"><span class="attr">2</span> <span class="string">以前redis都是与后端代码交互的（这里更新写入时也是哈）</span></span><br><span class="line"><span class="attr">但是访问时，直接由nginx访问，都不用经过后端，效率可想而知！</span></span><br></pre></td></tr></table></figure><h1 id="2-静态页数据服务"><a href="#2-静态页数据服务" class="headerlink" title="2.静态页数据服务"></a>2.静态页数据服务</h1><p>我们搭建一个微服务，来做静态页数据处理。事实上，这样的页面静态化功能可以拓展至任何数据更新不频繁的其它页面，都可以在我们这个微服务完成数据处理。</p><h2 id="2-1-搭建微服务"><a href="#2-1-搭建微服务" class="headerlink" title="2.1.搭建微服务"></a>2.1.搭建微服务</h2><p>项目坐标：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310183315470.png" alt="image-20200310183315470"></p><p>位置：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310183319641.png" alt="image-20200310183319641"></p><p>依赖：</p><p>修改项目中的<code>pom.xml</code>文件，添加下面依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--商品微服务接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka客户端--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类：</p><p>在<code>ly-page</code>的<code>com.leyou.page</code>包下，添加一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.leyou.item.client&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.leyou.page&quot;, &quot;com.leyou.common.advice&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyPageApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyPageApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件application.yml中，添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">page-service</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ly-redis</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://ly-registry:10086/eureka</span></span><br></pre></td></tr></table></figure><h2 id="2-2-数据分析"><a href="#2-2-数据分析" class="headerlink" title="2.2.数据分析"></a>2.2.数据分析</h2><p>商品详情页渲染过程中，需要哪些数据呢？</p><h3 id="2-2-1-需要的数据"><a href="#2-2-1-需要的数据" class="headerlink" title="2.2.1.需要的数据"></a>2.2.1.需要的数据</h3><p>来看这张图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310183805526.png" alt="image-20200310183805526"></p><p>其中包含的如：商品三级分类、商品品牌、商品名称，这些数据主要是在<code>tb_spu</code>表中</p><p>而像：标题、价格、库存、特有规格参数、图片等数据，来自于<code>tb_sku</code>表</p><p>再往下看：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310184017361.png" alt="image-20200310184017361"></p><p>这里的商品介绍、规格保证、售后保障、通用的规格参数等数据，来自于<code>tb_spu_detail</code>表，当然，规格参数的名字是在<code>tb_spec_param</code>表中查询的，规格组信息是在<code>tb_spec_group</code>表。</p><h3 id="2-2-2-数据的格式"><a href="#2-2-2-数据的格式" class="headerlink" title="2.2.2.数据的格式"></a>2.2.2.数据的格式</h3><p>我们需要的数据在很多表中，不过我们希望将来不同的数据库更新，只更新对应的缓存数据。因此我们不能将这些数据一次从商品服务查询并放入缓存，而是分开来做。</p><p>1）与SPU有关的信息：</p><ul><li>id：spu的id</li><li>name：商品名称</li><li>cid1\cid2\cid3：分类的三级id</li><li>brandId：品牌id</li></ul><p>2）分类</p><ul><li>categories：商品有关的三级分类对象的集合，对象只包含id和name</li></ul><p>3）品牌</p><ul><li>brand：商品相关的品牌对象，id和name</li></ul><p>4）spu下的所有sku集合</p><p>5）spu的SpuDetail信息</p><p>6）规格组及组内的参数集合</p><ul><li><p>因为页面渲染知道<strong>参数名称、id</strong>，还有<strong>规格组名称</strong>：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310190549005.png" alt="image-20200310190549005"> </p></li></ul><h2 id="2-3-查询商品信息，存入Redis"><a href="#2-3-查询商品信息，存入Redis" class="headerlink" title="2.3.查询商品信息，存入Redis"></a>2.3.查询商品信息，存入Redis</h2><p>接下来，我们在静态页数据服务中，提供对Nginx访问的接口。当Nginx访问时，我们查询商品信息，存入Redis，然后把结果返回给Nginx。</p><h3 id="2-3-1-业务分析"><a href="#2-3-1-业务分析" class="headerlink" title="2.3.1.业务分析"></a>2.3.1.业务分析</h3><p>service业务中，我们需要做的事情包括：</p><ul><li>根据spuId查询spu</li><li>根据spuId查询detail</li><li>根据spuId查询Sku</li><li>根据categoryId集合查询Category对象集合</li><li>根据brandId查询Brand</li><li>根据categoryId查询规格组及组内参数</li><li>把上述数据<code>分别</code>存入Redis</li></ul><p>为了保证将来可以做到数据的局部修改，我们处理数据要分开到不同的业务方法中，分别查询、分别存储。</p><h3 id="2-3-2-DTO"><a href="#2-3-2-DTO" class="headerlink" title="2.3.2.DTO"></a>2.3.2.DTO</h3><p>缓存到redis的数据要尽可能简化，因此我们不能直接把从商品微服务查询的数据写入Redis，而是要简单处理下。</p><p>我们从商品微服务查询的规格参数信息数据较臃肿，这里要处理一下，封装到两个新的DTO中。</p><p>规格参数的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecParamNameDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean numeric;</span><br><span class="line">    <span class="keyword">private</span> Boolean generic;</span><br><span class="line">    <span class="keyword">private</span> String unit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规格组的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecGroupNameDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;SpecParamNameDTO&gt; params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-定义Service"><a href="#2-3-3-定义Service" class="headerlink" title="2.3.3.定义Service"></a>2.3.3.定义Service</h3><p>在<code>ly-page</code>的<code>com.leyou.page.service</code>包下的<code>GoodsPageService</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsPageService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载spu到redis中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId 商品id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">loadSpuData</span><span class="params">(Long spuId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载spuDetail到redis中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId 商品id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">loadSpuDetailData</span><span class="params">(Long spuId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载sku信息到redis中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId 商品id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">loadSkuListData</span><span class="params">(Long spuId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载分类信息到redis中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids 商品分类的三级分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">loadCategoriesData</span><span class="params">(List&lt;Long&gt; ids)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载品牌信息到redis中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brandId 品牌id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">loadBrandData</span><span class="params">(Long brandId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载规格参数信息到redis中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId 商品第三级分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">loadSpecData</span><span class="params">(Long categoryId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-page</code>的<code>com.leyou.page.service</code>包下的<code>GoodsPageServiceImpl</code>中，添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.BeanHelper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.utils.JsonUtils;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.client.ItemClient;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.dto.*;</span><br><span class="line"><span class="keyword">import</span> com.leyou.page.service.GoodsPageService;</span><br><span class="line"><span class="keyword">import</span> com.leyou.page.service.dto.SpecGroupNameDTO;</span><br><span class="line"><span class="keyword">import</span> com.leyou.page.service.dto.SpecParamNameDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsPageServiceImpl</span> <span class="keyword">implements</span> <span class="title">GoodsPageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ItemClient itemClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX_SPU = <span class="string">&quot;page:spu:id:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX_SKU = <span class="string">&quot;page:sku:id:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX_DETAIL = <span class="string">&quot;page:detail:id:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX_CATEGORY = <span class="string">&quot;page:category:id:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX_BRAND = <span class="string">&quot;page:brand:id:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX_SPEC = <span class="string">&quot;page:spec:id:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GoodsPageServiceImpl</span><span class="params">(ItemClient itemClient, StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.itemClient = itemClient;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loadSpuData</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询信息</span></span><br><span class="line">        SpuDTO spu = itemClient.querySpuById(spuId);</span><br><span class="line">        <span class="comment">// 组织数据</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, spu.getId());</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, spu.getName());</span><br><span class="line">        map.put(<span class="string">&quot;categoryIds&quot;</span>, spu.getCategoryIds());</span><br><span class="line">        map.put(<span class="string">&quot;brandId&quot;</span>, spu.getBrandId());</span><br><span class="line">        String json = JsonUtils.toJson(map);</span><br><span class="line">        <span class="comment">// 存入redis, 如果数据量逐渐增多，可以用SSDB代替</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY_PREFIX_SPU + spuId, json);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loadSpuDetailData</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询信息</span></span><br><span class="line">        SpuDetailDTO detail = itemClient.querySpuDetailById(spuId);</span><br><span class="line">        String json = JsonUtils.toJson(detail);</span><br><span class="line">        <span class="comment">// 存入redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY_PREFIX_DETAIL + spuId, json);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loadSkuListData</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询信息</span></span><br><span class="line">        List&lt;SkuDTO&gt; skuList = itemClient.querySkuBySpuId(spuId);</span><br><span class="line">        String json = JsonUtils.toJson(skuList);</span><br><span class="line">        <span class="comment">// 存入redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY_PREFIX_SKU + spuId, json);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loadCategoriesData</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询信息</span></span><br><span class="line">        List&lt;CategoryDTO&gt; list = itemClient.queryCategoryByIds(ids);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; categoryList = list.stream().map(categoryDTO -&gt; &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;id&quot;</span>, categoryDTO.getId());</span><br><span class="line">            map.put(<span class="string">&quot;name&quot;</span>, categoryDTO.getName());</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        String json = JsonUtils.toJson(categoryList);</span><br><span class="line">        <span class="comment">// 存入Redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY_PREFIX_CATEGORY + ids.get(<span class="number">2</span>), json);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loadBrandData</span><span class="params">(Long brandId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询信息</span></span><br><span class="line">        BrandDTO brand = itemClient.queryBrandById(brandId);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, brand.getId());</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, brand.getName());</span><br><span class="line">        String json = JsonUtils.toJson(map);</span><br><span class="line">        <span class="comment">// 存入Redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY_PREFIX_BRAND + brandId, json);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loadSpecData</span><span class="params">(Long categoryId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询信息</span></span><br><span class="line">        List&lt;SpecGroupDTO&gt; list = itemClient.querySpecList(categoryId);</span><br><span class="line"></span><br><span class="line">        List&lt;SpecGroupNameDTO&gt; groupList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SpecGroupDTO groupDTO : list) &#123;</span><br><span class="line">            SpecGroupNameDTO nameDTO = <span class="keyword">new</span> SpecGroupNameDTO();</span><br><span class="line">            nameDTO.setName(groupDTO.getName());</span><br><span class="line">            nameDTO.setParams(BeanHelper.copyWithCollection(groupDTO.getParams(), SpecParamNameDTO.class));</span><br><span class="line">            groupList.add(nameDTO);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String json = JsonUtils.toJson(groupList);</span><br><span class="line">        <span class="comment">// 存入Redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY_PREFIX_SPEC + categoryId, json);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-定义controller"><a href="#2-3-4-定义controller" class="headerlink" title="2.3.4.定义controller"></a>2.3.4.定义controller</h3><p>在<code>ly-page</code>的<code>com.leyou.page.web</code>中，添加一个<code>PageController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.page.service.GoodsPageService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GoodsPageService goodsPageService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageController</span><span class="params">(GoodsPageService goodsPageService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.goodsPageService = goodsPageService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品spu数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> spu数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/spu/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">querySpuPageData</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long spuId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsPageService.loadSpuData(spuId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品sku数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> sku数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sku/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">querySkuPageData</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long spuId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsPageService.loadSkuListData(spuId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品spuDetail数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> spu数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/detail/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">queryDetailPageData</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long spuId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsPageService.loadSpuDetailData(spuId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品分类数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids 商品分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/categories&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">queryCategoryPageData</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsPageService.loadCategoriesData(ids));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询品牌数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 品牌id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> spu数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/brand/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">queryBrandPageData</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsPageService.loadBrandData(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询规格数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 规格参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/spec/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">queryGoodsPageData</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long categoryId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsPageService.loadSpecData(categoryId));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-OpenResty渲染静态页"><a href="#3-OpenResty渲染静态页" class="headerlink" title="3.OpenResty渲染静态页"></a>3.OpenResty渲染静态页</h1><p>之前分析中，我们计划使用Nginx来完成<strong>静态页面模板的渲染</strong>，不过我们之前学习过Nginx的web服务器功能、反向代理功能、负载均衡功能。</p><p>但是如何利用Nginx查询Redis缓存？如何利用Nginx完成页面模板渲染？</p><p>nginx中有一个模块叫做<strong>ngx_lua</strong>，可以将Lua嵌入到Nginx中，从而可以使用Lua来编写脚本，这样就可以<strong>使用Lua编写应用逻辑，操作Redis、MySQL</strong>等等；这样就可以使用Lua语言开发高性能Web应用了。</p><p>那么OpenResty是什么呢？</p><h2 id="3-1-介绍OpenResty"><a href="#3-1-介绍OpenResty" class="headerlink" title="3.1.介绍OpenResty"></a>3.1.介绍OpenResty</h2><p>OpenResty官网地址：<a href="http://openresty.org/cn/">http://openresty.org/cn/</a></p><p>OpenResty® 是一个基于 <a href="http://openresty.org/cn/nginx.html">Nginx</a> 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p><p>OpenResty® 通过汇聚各种设计精良的 <a href="http://openresty.org/cn/nginx.html">Nginx</a> 模块（主要由 OpenResty 团队自主开发），从而将 <a href="http://openresty.org/cn/nginx.html">Nginx</a> 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 <a href="http://openresty.org/cn/nginx.html">Nginx</a> 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 <strong>1000K 以上单机并发</strong>连接的高性能 Web 应用系统。</p><p><strong>OpenResty® 的目标是让你的Web服务直接跑在 <a href="http://openresty.org/cn/nginx.html">Nginx</a> 服务内部</strong>，充分利用 <a href="http://openresty.org/cn/nginx.html">Nginx</a> 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。性能这么高，那以后Tomcat不得被完全取代了？？？</p><h2 id="3-2-安装OpenResty（先拍照！！！）"><a href="#3-2-安装OpenResty（先拍照！！！）" class="headerlink" title="3.2.安装OpenResty（先拍照！！！）"></a>3.2.安装OpenResty（先拍照！！！）</h2><p><strong>形成好习惯，安装前都要拍照。</strong></p><p>首先你的Linux虚拟机必须联网，这里建议大家统一使用CentOS7版本。</p><p>1）安装开发库:</p><p>首先要安装OpenResty的依赖开发库，执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre-devel openssl-devel gcc curl</span><br></pre></td></tr></table></figure><p>2）安装OpenResty仓库</p><p>你可以在你的 CentOS 系统中添加 <code>openresty</code> 仓库，这样就可以便于未来安装或更新我们的软件包（通过 <code>yum check-update</code> 命令）。运行下面的命令就可以添加我们的仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo</span><br></pre></td></tr></table></figure><p>3）安装OpenResty</p><p>然后就可以像下面这样安装软件包，比如 <code>openresty</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openresty</span><br></pre></td></tr></table></figure><p>4）安装opm工具</p><p>opm是OpenResty的一个管理工具，可以帮助我们安装一个第三方的Lua模块。</p><p>如果你想安装命令行工具 <code>opm</code>，那么可以像下面这样安装 <code>openresty-opm</code> 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openresty-opm</span><br></pre></td></tr></table></figure><p>5）目录结构</p><p>默认情况下，OpenResty安装的目录是：/usr/local/openresty</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200310225539214.png" alt="image-20200310225539214"> </p><p>看到里面的nginx目录了吗，<strong>OpenResty就是在Nginx基础上集成了一些Lua模块</strong>。</p><p><strong>4）配置nginx的环境变量</strong></p><p>打开配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>在最下面加入两行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NGINX_HOME=/usr/<span class="built_in">local</span>/openresty/nginx</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;NGINX_HOME&#125;</span>/sbin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>NGINX_HOME：后面是OpenResty安装目录下的nginx的目录</p><p>然后让配置生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="3-3-Lua语言"><a href="#3-3-Lua语言" class="headerlink" title="3.3.Lua语言"></a>3.3.Lua语言</h2><p>OpenResty的开发和使用离不开Lua脚本，那么Lua又是什么呢？</p><h3 id="3-3-1-Lua介绍"><a href="#3-3-1-Lua介绍" class="headerlink" title="3.3.1.Lua介绍"></a>3.3.1.Lua介绍</h3><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p>Lua 是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组于 1993 年开发的，该小组成员有：Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo。</p><h3 id="3-3-2-语法入门"><a href="#3-3-2-语法入门" class="headerlink" title="3.3.2.语法入门"></a>3.3.2.语法入门</h3><p>Lua的详细语法大家可以参考网站上的一些教学，例如：<a href="https://www.runoob.com/lua/lua-tutorial.html">Lua菜鸟教程</a>，任何语言都是从基本的如：变量、数据类型、循环、逻辑判断、运算、数组等入手。相信熟悉java的你应该可以快速上手Lua。</p><p>因此我们从这几块入手，看一些简单命令即可：</p><p>1）变量声明</p><p>声明一个局部变量，用local关键字即可：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义数字</span></span><br><span class="line"><span class="keyword">local</span> a = <span class="number">123</span></span><br><span class="line"><span class="comment">-- 定义字符串</span></span><br><span class="line"><span class="keyword">local</span> b = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment">-- 定义数组</span></span><br><span class="line"><span class="keyword">local</span> c = &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;lua&quot;</span>&#125;</span><br><span class="line"><span class="comment">-- 定义table</span></span><br><span class="line"><span class="keyword">local</span> d = &#123;</span><br><span class="line">    name = <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    age = <span class="number">21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）打印结果</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3）条件控制</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( 布尔表达式 <span class="number">1</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="comment">--[ 在布尔表达式 1 为 true 时执行该语句块 --]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elseif</span>( 布尔表达式 <span class="number">2</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="comment">--[ 在布尔表达式 2 为 true 时执行该语句块 --]</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">   <span class="comment">--[ 如果以上布尔表达式都不为 true 则执行该语句块 --]</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>4）循环语句：</p><p>遍历数字</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>遍历数组：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--打印数组a的所有值  </span></span><br><span class="line"><span class="keyword">local</span> a = &#123;<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i, v)</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">-- 遍历时，i是角标，v是元素。Lua中数组角标从1开始</span></span><br></pre></td></tr></table></figure><p>遍历table：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义table</span></span><br><span class="line"><span class="keyword">local</span> b = &#123;</span><br><span class="line">    name = <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    age = <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(b) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">-- 遍历时，k是key，v是值。</span></span><br></pre></td></tr></table></figure><h2 id="3-4-OpenResty快速入门"><a href="#3-4-OpenResty快速入门" class="headerlink" title="3.4.OpenResty快速入门"></a>3.4.OpenResty快速入门</h2><p>为了不影响OpenResty安装目录的结构，我们在新的目录中来启动和配置。</p><h3 id="3-4-1-基本配置"><a href="#3-4-1-基本配置" class="headerlink" title="3.4.1.基本配置"></a>3.4.1.基本配置</h3><p>我们创建一个新的目录：/usr/resty</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr</span><br><span class="line">mkdir resty</span><br></pre></td></tr></table></figure><p>然后在这个目录下创建几个新目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> resty</span><br><span class="line">mkdir conf logs lua</span><br></pre></td></tr></table></figure><p>然后新建一个配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/resty</span><br><span class="line">vi conf/nginx.conf</span><br></pre></td></tr></table></figure><p>添加下面的内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="attribute">error_log</span> logs/error.log;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">lua_package_path</span> <span class="string">&quot;/usr/local/openresty/lualib/?.lua;;&quot;</span>;  <span class="comment">#lua 模块  </span></span><br><span class="line">    <span class="attribute">lua_package_cpath</span> <span class="string">&quot;/usr/local/openresty/lualib/?.so;;&quot;</span>;  <span class="comment">#c模块 </span></span><br><span class="line"><span class="attribute">lua_shared_dict</span> item_local_cache <span class="number">50m</span>; <span class="comment">#共享全局变量，在所有worker间共享</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">default_type</span>  text/html; <span class="comment"># 默认响应类型是html</span></span><br><span class="line">    <span class="attribute">include</span> lua.conf;    <span class="comment"># 引入一个lua.conf文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过include导入另一个配置，不在nginx.conf中写入太多内容。</p><h3 id="3-4-2-监听端口"><a href="#3-4-2-监听端口" class="headerlink" title="3.4.2.监听端口"></a>3.4.2.监听端口</h3><p>现在，<code>lua.conf</code>已经被引入，我们的所有配置都写到这个里面。</p><p>新建一个文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/resty</span><br><span class="line">vi conf/lua.conf</span><br></pre></td></tr></table></figure><p>添加下面的内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 响应数据由 lua/test.lua这个文件来指定</span></span><br><span class="line">        <span class="attribute">content_by_lua_file</span> lua/test.lua;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3第一个lua脚本"><a href="#3-4-3第一个lua脚本" class="headerlink" title="3.4.3第一个lua脚本"></a>3.4.3第一个lua脚本</h3><p>现在，响应数据已经交给 <code>lua/test.lua</code>来处理了，我们编写<code>lua/test.lua</code>文件，返回你想返回的任何内容即可。</p><p>新建一个文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/resty</span><br><span class="line">vi lua/test.lua</span><br></pre></td></tr></table></figure><p>写入下面内容：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx.say(<span class="string">&quot;&lt;h1&gt;hello, &lt;/h1&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>ngx.say()</code>可以理解成<code>HttpServletResponse</code>中的<code>response.getWriter().println()</code></p><h3 id="3-4-4-启动并访问"><a href="#3-4-4-启动并访问" class="headerlink" title="3.4.4.启动并访问"></a>3.4.4.启动并访问</h3><p>当前必须在<code>/usr/resty</code>目录中，然后执行命令</p><p>运行启动命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf</span><br></pre></td></tr></table></figure><ul><li><code>-p `pwd` </code>：-p 指定运行时路径前缀，pwd代表当前路径</li><li><code>-c conf/nginx.conf</code>：-c 指定运行时配置文件，这里指定了<code>conf/nginx.conf</code></li></ul><p>重新加载配置命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><p>停止命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s stop</span><br></pre></td></tr></table></figure><p>访问你的虚拟机地址，例如：<a href="http://192.168.206.99/%EF%BC%8C%E7%9C%8B%E5%88%B0%E8%BF%99%E4%B8%AA%E8%AF%B4%E6%98%8E%E6%88%90%E5%8A%9F%E4%BA%86%EF%BC%9A">http://192.168.206.99/，看到这个说明成功了：</a></p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200724220724841.png" alt="image-20200724220724841"></p><h2 id="3-5-获取请求参数"><a href="#3-5-获取请求参数" class="headerlink" title="3.5.获取请求参数"></a>3.5.获取请求参数</h2><p>Nginx接收到请求后，会帮我们解析并存储到内置变量中，只需要调用这些变量或方法就可以拿到。</p><ul><li><p><code>ngx.var</code> ： nginx变量，如果要赋值如ngx.var.b = 2，此变量必须提前声明；另外对于nginx location中使用正则捕获的捕获组可以使用ngx.var[捕获组数字]获取；</p></li><li><p><code>ngx.req.get_headers()</code>：获取请求头，获取带中划线的请求头时请使用如headers.user_agent这种方式；如果一个请求头有多个值，则返回的是table；</p></li><li><p><code>ngx.req.get_uri_args()</code>：获取url请求参数，其用法和<code>get_headers</code>类似；?name=jack</p></li><li><p><code>ngx.req.get_post_args()</code>：获取post请求内容体，其用法和<code>get_headers</code>类似，但是必须提前调用<code>ngx.req.read_body()</code>来读取body体（也可以选择在nginx配置文件使用<code>lua_need_request_body</code> on;开启读取body体，但是官方不推荐）；</p></li><li><p><code>ngx.req.get_body_data()</code>：为解析的请求body体内容字符串。</p></li></ul><h3 id="3-5-1-编写映射规则"><a href="#3-5-1-编写映射规则" class="headerlink" title="3.5.1.编写映射规则"></a>3.5.1.编写映射规则</h3><p>现在，我们在lua.conf中编写一条规则，来监听请求：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用正则表达式映射路径，有两个(\d+)，分别是第1组、第2组正则</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /lua_request/(\d+)/(\d+)</span> &#123;  </span><br><span class="line">    <span class="comment"># $1代表获取第1组正则捕获的内容，set $a $1代表把$1的值赋值给$a这个变量</span></span><br><span class="line">    <span class="attribute">set</span> $a <span class="variable">$1</span>;</span><br><span class="line">    <span class="comment"># $2代表获取第2组正则捕获的内容，set $b $2代表把$2的值赋值给$b这个变量</span></span><br><span class="line">    <span class="attribute">set</span> $b <span class="variable">$2</span>; </span><br><span class="line">    <span class="comment">#nginx内容处理  </span></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> lua/test_request.lua;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-编写脚本"><a href="#3-5-2-编写脚本" class="headerlink" title="3.5.2.编写脚本"></a>3.5.2.编写脚本</h3><p>然后在新建test_request.lua文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/resty</span><br><span class="line">vi lua/test_request.lua</span><br></pre></td></tr></table></figure><p>添加内容：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义一个函数，打印table数据,,-- 获取路径占位符中通过正则得到的参数,,-- 获取请求url参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayTables</span><span class="params">(val)</span></span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(val) <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">ngx.say(k, <span class="string">&quot; : &quot;</span>, <span class="built_in">table</span>.<span class="built_in">concat</span>(v, <span class="string">&quot;, &quot;</span>), <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ngx.say(k, <span class="string">&quot; : &quot;</span>, v, <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ngx.say(<span class="string">&#x27;&lt;header&gt;&#x27;</span>)</span><br><span class="line">ngx.say(<span class="string">&#x27;&lt;meta charset=&quot;utf-8&quot;&gt;&#x27;</span>)</span><br><span class="line">ngx.say(<span class="string">&#x27;&lt;/header&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ngx.say(<span class="string">&quot;&lt;h1&gt; -----请求路径占位符参数------- &lt;/h1&gt;&quot;</span>);</span><br><span class="line">ngx.say(<span class="string">&quot;&lt;h4&gt;&quot;</span>)</span><br><span class="line">ngx.say(<span class="string">&quot;ngx.var.a : &quot;</span>, ngx.var.a, <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br><span class="line">ngx.say(<span class="string">&quot;ngx.var.b : &quot;</span>, ngx.var.b, <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br><span class="line">ngx.say(<span class="string">&quot;ngx.var[1] : &quot;</span>, ngx.var[<span class="number">1</span>], <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br><span class="line">ngx.say(<span class="string">&quot;ngx.var[2] : &quot;</span>, ngx.var[<span class="number">2</span>], <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br><span class="line">ngx.say(<span class="string">&quot;&lt;/h4&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ngx.say(<span class="string">&quot;&lt;h1&gt; -----请求url参数------- &lt;/h1&gt;&quot;</span>);</span><br><span class="line">ngx.say(<span class="string">&quot;&lt;h4&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> params = ngx.req.get_uri_args()</span><br><span class="line">sayTables(params)</span><br><span class="line">ngx.say(<span class="string">&quot;&lt;/h4&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ngx.<span class="built_in">exit</span>(<span class="number">200</span>) </span><br></pre></td></tr></table></figure><h3 id="3-5-3-重启测试"><a href="#3-5-3-重启测试" class="headerlink" title="3.5.3.重启测试"></a>3.5.3.重启测试</h3><p>重启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><p>通过浏览器访问：</p><p><a href="http://192.168.206.99/lua_request/110/120?name=jack&amp;age=22">http://192.168.206.99/lua_request/110/120?name=jack&amp;age=22</a></p><p>结果：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200724221338944.png" alt="image-20200724221338944"></p><h2 id="3-6-OpenResty模板渲染模块"><a href="#3-6-OpenResty模板渲染模块" class="headerlink" title="3.6.OpenResty模板渲染模块"></a>3.6.OpenResty模板渲染模块</h2><p>动态web网页开发是Web开发中一个常见的场景，我们的商品详情页就需要nginx来完成页面的动态渲染，这要用到模板渲染模块。</p><p>我们会使用<a href="https://github.com/bungle/lua-resty-template">lua-resty-template</a>来完成。</p><h3 id="3-6-1-安装模板渲染模块"><a href="#3-6-1-安装模板渲染模块" class="headerlink" title="3.6.1.安装模板渲染模块"></a>3.6.1.安装模板渲染模块</h3><p>模板渲染组件并不是OpenResty自带的，需要我们自己来安装。</p><p>确保自己已经安装过OPM命令（参考安装OpenResty部分）。</p><p>输入命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opm get bungle/lua-resty-template</span><br></pre></td></tr></table></figure><h3 id="3-6-2-定义模板位置"><a href="#3-6-2-定义模板位置" class="headerlink" title="3.6.2.定义模板位置"></a>3.6.2.定义模板位置</h3><p>模板渲染与服务端的JSP类似，需要知道的信息包括：</p><ul><li>模板文件的位置</li><li>模板中的数据（上下文Context）</li></ul><p>我们先在<code>lua.conf</code>文件的server部分，定义全局的模板文件位置信息：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">set</span> $template_root <span class="string">&quot;/usr/resty/templates&quot;</span>; </span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200311121942817.png" alt="image-20200311121942817"></p><p>然后需要在<code>/usr/resty</code>目录下创建<code>templates</code>目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/resty</span><br><span class="line">mkdir templates</span><br></pre></td></tr></table></figure><h3 id="3-6-3-模板渲染"><a href="#3-6-3-模板渲染" class="headerlink" title="3.6.3.模板渲染"></a>3.6.3.模板渲染</h3><p>在<code>/usr/resty/conf/lua.conf</code>中定义一个location映射：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ /lua_template/(.*)</span> &#123;</span><br><span class="line">    <span class="comment"># 关闭lua代码缓存</span></span><br><span class="line">    <span class="attribute">lua_code_cache</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 指定请求交给lua/test_template.lua脚本来处理</span></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> lua/test_template.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建<code>test_template.lua</code>文件，编写脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/resty</span><br><span class="line">vi lua/test_template.lua</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入template模块,类似java导包</span></span><br><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">&quot;resty.template&quot;</span>)  </span><br><span class="line"><span class="comment">--渲染模板需要的上下文(数据)  </span></span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">    title = <span class="string">&quot;template test&quot;</span>, </span><br><span class="line">    msg = <span class="string">&quot;&lt;h1&gt;hello,&quot;</span>..ngx.var[<span class="number">1</span>]..<span class="string">&quot;&lt;/h1&gt;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--渲染模板 ，指定模板文件名称，指定所需要的数据，table格式</span></span><br><span class="line">template.render(<span class="string">&quot;t1.html&quot;</span>, context)  </span><br></pre></td></tr></table></figure><p>在<code>/usr/resty/templates</code>下新建模板文件：<code>t1.html</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/resty/templates/t1.html</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;*msg*&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-6-4-测试"><a href="#3-6-4-测试" class="headerlink" title="3.6.4.测试"></a>3.6.4.测试</h3><p>重启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><p>通过浏览器访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.206.99/lua_template/社会我拓哥</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200724221823448.png" alt="image-20200724221823448">  </p><h2 id="3-7-OpenResty的Redis模块"><a href="#3-7-OpenResty的Redis模块" class="headerlink" title="3.7.OpenResty的Redis模块"></a>3.7.OpenResty的Redis模块</h2><p>渲染页面时，需要的数据要从redis中获取，而OpenResty中整合了操作Redis的模块，可以直接使用。</p><p>前置条件：你的Linux上已经安装了Redis</p><p>如果你的redis装在windows，关闭windows防火墙，知道window的ip地址</p><h3 id="3-7-1-定义映射规则"><a href="#3-7-1-定义映射规则" class="headerlink" title="3.7.1.定义映射规则"></a>3.7.1.定义映射规则</h3><p>现在，我们在<code>lua.conf</code>中编写一条规则，来监听请求：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ /lua_redis/(.*)</span> &#123;</span><br><span class="line">    <span class="comment"># 关闭lua代码缓存</span></span><br><span class="line"><span class="attribute">lua_code_cache</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 指定请求交给lua/test_template.lua脚本来处理</span></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> lua/test_redis.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-2-使用Redis模块功能"><a href="#3-7-2-使用Redis模块功能" class="headerlink" title="3.7.2.使用Redis模块功能"></a>3.7.2.使用Redis模块功能</h3><p>然后在<code>lua</code>目录下创建文件：<code>test_redis.lua</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/resty/lua/test_redis.lua</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入redis模块</span></span><br><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span>(<span class="string">&quot;resty.redis&quot;</span>)</span><br><span class="line"><span class="comment">-- 定义释放redis连接的方法</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">close_redis</span><span class="params">(red)</span></span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> red <span class="keyword">then</span>  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="keyword">local</span> ok, err = red:<span class="built_in">close</span>()  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">        ngx.say(<span class="string">&quot;close redis error : &quot;</span>, err)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">--创建实例  </span></span><br><span class="line"><span class="keyword">local</span> red = redis:new()  </span><br><span class="line"><span class="comment">--设置超时（毫秒）  </span></span><br><span class="line">red:set_timeout(<span class="number">1000</span>)  </span><br><span class="line"><span class="comment">--建立连接 ,这里要指定redis的安装的ip和端口</span></span><br><span class="line"><span class="keyword">local</span> ip = <span class="string">&quot;127.0.0.1&quot;</span>  </span><br><span class="line"><span class="keyword">local</span> port = <span class="number">6379</span>  </span><br><span class="line"><span class="keyword">local</span> ok, err = red:connect(ip, port)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">    ngx.say(<span class="string">&quot;connect to redis error : &quot;</span>, err)  </span><br><span class="line">    <span class="keyword">return</span> close_redis(red)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">--调用API进行处理  </span></span><br><span class="line">ok, err = red:set(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello,&quot;</span>..ngx.var[<span class="number">1</span>])  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">    ngx.say(<span class="string">&quot;set msg error : &quot;</span>, err)  </span><br><span class="line">    <span class="keyword">return</span> close_redis(red)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">--调用API获取数据  </span></span><br><span class="line"><span class="keyword">local</span> resp, err = red:get(<span class="string">&quot;msg&quot;</span>)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span>  </span><br><span class="line">    ngx.say(<span class="string">&quot;get msg error : &quot;</span>, err)  </span><br><span class="line">    <span class="keyword">return</span> close_redis(red)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">--得到的数据为空处理  </span></span><br><span class="line"><span class="keyword">if</span> resp == ngx.null <span class="keyword">then</span>  </span><br><span class="line">    resp = <span class="string">&#x27;default&#x27;</span>  <span class="comment">--比如默认值  </span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">ngx.say(<span class="string">&quot;msg : &quot;</span>, resp)  </span><br><span class="line">  </span><br><span class="line">close_redis(red)  </span><br></pre></td></tr></table></figure><h3 id="3-7-3-测试"><a href="#3-7-3-测试" class="headerlink" title="3.7.3.测试"></a>3.7.3.测试</h3><p>重启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><p>通过浏览器访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.206.99/lua_redis/jack</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200724222028688.png" alt="image-20200724222028688"></p><h2 id="3-8-OpenResty-内部-请求代理"><a href="#3-8-OpenResty-内部-请求代理" class="headerlink" title="3.8.OpenResty  内部  请求代理"></a>3.8.OpenResty  内部  请求代理</h2><p>按照之前分析的实现原理，获取页面渲染数据时，我们先从redis拿，如果获取失败则请求tomcat，也就是之前我们准备的<code>ly-page</code>服务。</p><p>小结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">至此，浏览器发送请求，到达了windows的nginx，然后由第三方的openresty（安装在linux上）进行页面渲染</span></span><br><span class="line"><span class="attr">进行渲染前要先获取数据，要么从linux上的redis获取，这由上面的lua脚本语言可以实现。</span></span><br><span class="line"><span class="attr">但是当redis没有对应的缓存数据时，openresty需要从windows上的Tomcat服务器获取数据，这可如何是好？？？？</span></span><br></pre></td></tr></table></figure><p>那么<strong>如何在OpenResty内部主动发送一个http请求呢？</strong></p><h3 id="3-8-1-两种实现方案"><a href="#3-8-1-两种实现方案" class="headerlink" title="3.8.1.两种实现方案"></a>3.8.1.两种实现方案</h3><p>在OpenResty中有两种主动发送http请求的方案：</p><ul><li>利用http模块：利用第三方提供的http模块工具，模拟一个http请求</li><li>利用内部请求代理：利用nginx自带的capture功能</li></ul><p>这里我们使用nginx的capture功能，也就是<strong>内部请求代理</strong></p><h3 id="3-8-2-内部请求代理"><a href="#3-8-2-内部请求代理" class="headerlink" title="3.8.2.内部请求代理"></a>3.8.2.内部请求代理</h3><p>nginx的capture功能语法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> resp = ngx.location.capture(<span class="string">&quot;/path&quot;</span>,&#123;</span><br><span class="line">    method = ngx.HTTP_GET,   #请求方式</span><br><span class="line">    args = &#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;,  #get方式传参数</span><br><span class="line">    body = <span class="string">&quot;c=3&amp;d=4&quot;</span> #post方式传参数</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回的响应内容包括：</p><ul><li>resp.status：响应状态码</li><li>resp.header：响应头，是一个table</li><li>resp.body：响应体，就是响应数据</li></ul><p>不过，capture功能发起的请求<strong>只能指向nginx的内部，不能访问外部请求</strong>（例如百度）。该怎么解决？</p><p>我们可以<strong>将capture请求的地址指向一个内部的location，然后在这个location中做反向代理，指向目标地址</strong>（外部网站地址）。</p><h3 id="3-8-3-示例"><a href="#3-8-3-示例" class="headerlink" title="3.8.3.示例"></a>3.8.3.示例</h3><p>假设我们希望在nginx内部向百度发请求，然后把结果输出到页面，大概思路是这样的：</p><ul><li>利用capture向某个路径发请求，指向内部的一个location，比如 <code>/baidu</code></li><li>定义个location，接收 <code>/baidu</code>开头的请求</li><li>将请求反向代理到 <a href="https://www.baidu.com/">https://www.baidu.com</a></li></ul><p>1）定义location</p><p>我们先定义一个内部的location，用来处理内部请求，然后反向代理到百度。修改lua.conf文件，添加内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ /baidu/(.*)</span> &#123;</span><br><span class="line">    <span class="comment"># 重写路径，去掉路径前面的 /baidu</span></span><br><span class="line">    <span class="attribute">rewrite</span> /baidu(/.*) <span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">    <span class="comment"># 禁止响应体压缩</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Accept-Encoding <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment"># 反向代理到百度</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> https://www.baidu.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）内部代理</p><p>然后我们再次修改lua.conf，添加一个location，作为测试接口：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ /lua_http/(.*)</span> &#123;</span><br><span class="line">    <span class="comment"># 关闭lua代码缓存</span></span><br><span class="line">    <span class="attribute">lua_code_cache</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 指定请求交给lua/test_http.lua脚本来处理</span></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> lua/test_http.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里接收请求，并执行<code>lua/test_http.lua</code>这个文件。我们新建一个<code>lua/test_http.lua</code>文件，内容如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 向 /baidu 这个location发请求，并且携带请求参数</span></span><br><span class="line"><span class="keyword">local</span> resp = ngx.location.capture(<span class="string">&quot;/baidu/s?wd=&quot;</span>..ngx.var[<span class="number">1</span>], &#123;  </span><br><span class="line">method = ngx.HTTP_GET</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询失败的处理</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span></span><br><span class="line">ngx.say(<span class="string">&quot;request error&quot;</span>); </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">-- 查询成功的处理，这里是打印响应体</span></span><br><span class="line">ngx.say(resp.body)</span><br></pre></td></tr></table></figure><p>3）测试</p><p>打开浏览器，访问：<a href="http://192.168.206.99/lua_http/hello%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%86%85%E5%AE%B9%EF%BC%9A">http://192.168.206.99/lua_http/hello，可以看到内容：</a></p><p><img src="image-20200724222759304.png" alt="image-20200724222759304"></p><p>承接上面的小结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">至此，我们想要实现的步骤：浏览器发送请求，到达了windows的nginx，</span></span><br><span class="line"><span class="attr">然后转到第三方的openresty（安装在linux上）进行页面渲染（上图是直接访问linux的openresty了）</span></span><br><span class="line"><span class="attr">进行渲染前要先获取数据，要么从linux上的redis获取，这由上面的lua脚本语言可以实现。</span></span><br><span class="line"><span class="attr">但是当redis没有对应的缓存数据时，openresty需要从windows上的Tomcat服务器获取数据，这可如何是好？？？？</span></span><br><span class="line"></span><br><span class="line"><span class="attr">使用nginx自带的capture功能来实现。</span></span><br><span class="line"><span class="attr">当请求达到openresty时，匹配lua_http路径，到达指定的test_http.lua文件，然后利用capture指向一个内部的location，然后反向代理到百度网址，百度网址拼接上子路径以及参数作为完整的url去访问百度！！</span></span><br></pre></td></tr></table></figure><h2 id="3-8-实现商品详情页渲染"><a href="#3-8-实现商品详情页渲染" class="headerlink" title="3.8.实现商品详情页渲染"></a>3.8.实现商品详情页渲染</h2><p>接下来我们利用OpenResty实现商品详情页渲染，大概需要这样的步骤：</p><ul><li>监听用户请求，进入定义好的lua脚本</li><li>lua脚本中尝试读取redis数据</li><li>读取数据失败，尝试从<code>ly-page</code>微服务读取数据<ul><li>获取数据失败：返回404</li><li>获取数据成功：开始渲染</li></ul></li><li>把数据和模板交给template模块渲染，然后返回</li></ul><p>我们要做的事情包括：</p><ul><li><p>配置内部请求代理</p></li><li><p>定义通用工具模块：</p><ul><li>访问Redis的工具</li><li>访问<code>ly-page</code>的http工具</li></ul></li><li><p>定义商品详情页面模板</p></li><li><p>编写商品页面请求的路径映射</p></li><li><p>编写处理请求，查询数据，处理数据，渲染模板的lua脚本</p></li></ul><h3 id="3-8-1-内部请求代理配置"><a href="#3-8-1-内部请求代理配置" class="headerlink" title="3.8.1.内部请求代理配置"></a>3.8.1.内部请求代理配置</h3><p>我们计划采用内部请求代理实现对微服务的访问，因此需要定义一个location，拦截内部请求，转发到<code>ly-page</code>微服务。这里我们约定，这个内部的location地址为：<code>/backend/*</code></p><p>为了与之前的demo分离，我们修改<code>nginx.conf</code>，注释以前的<code>lua.conf</code>文件，并添加一个新的<code>leyou.conf</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/resty/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="attribute">error_log</span> logs/error.log;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123; </span><br><span class="line">    <span class="attribute">lua_package_path</span> <span class="string">&quot;/usr/local/openresty/lualib/?.lua;;&quot;</span>;  <span class="comment">#lua 模块  </span></span><br><span class="line">    <span class="attribute">lua_package_cpath</span> <span class="string">&quot;/usr/local/openresty/lualib/?.so;;&quot;</span>;  <span class="comment">#c模块 </span></span><br><span class="line"><span class="attribute">lua_shared_dict</span> shared_data <span class="number">20m</span>; <span class="comment">#共享全局变量，在所有worker间共享</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">default_type</span>  text/html; <span class="comment"># 默认响应类型是html</span></span><br><span class="line">    <span class="comment">#include lua.conf;    # 引入一个lua.conf文件</span></span><br><span class="line">    <span class="attribute">include</span> leyou.conf;    <span class="comment"># 引入一个leyou.conf文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>/usr/resty/conf/leyou.conf</code>中编写location监听：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/resty/conf/leyou.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;  </span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8084</span> max_fails=<span class="number">5</span> fail_timeout=<span class="number">10s</span> weight=<span class="number">1</span>;    </span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">100</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>; </span><br><span class="line"><span class="attribute">set</span> $template_root <span class="string">&quot;/usr/resty/templates&quot;</span>; </span><br><span class="line">  <span class="comment"># 我们要求内部请求以 /backend开头，与其他请求区分</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /backend/(.*)</span> &#123;  </span><br><span class="line">        <span class="comment">#internal;  </span></span><br><span class="line">        <span class="attribute">keepalive_timeout</span>   <span class="number">30s</span>;  </span><br><span class="line">        <span class="attribute">keepalive_requests</span>  <span class="number">1000</span>;  </span><br><span class="line">        <span class="comment">#支持keep-alive  </span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;  </span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="attribute">rewrite</span> /backend(/.*) <span class="variable">$1</span> <span class="literal">break</span>;  </span><br><span class="line">        <span class="attribute">proxy_pass_request_headers</span> <span class="literal">off</span>;  </span><br><span class="line">        <span class="comment">#more_clear_input_headers Accept-Encoding;  </span></span><br><span class="line">        <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout;  </span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，上面配置的backend集群中，ip地址必须是你<strong>自己的宿主机地址,VM-NET8的虚拟主机地址，一般地址为:网段.1</strong>，不要直接拷贝。</p><p>请求处理大概过程：</p><ul><li><p>假如我们内部访问：/backend/page/spu/1</p></li><li><p>地址被监听到后，会处理成：<a href="http://backend/page/spu/1">http://backend/page/spu/1</a></p></li><li><p>而后进入 backend的upstream集群</p><ul><li>集群默认利用轮询策略对集群负载均衡，例如本例中的地址：192.168.206.99:8084</li><li>发送请求到：http//192.168.206.99:8084/page/spu/1，就是宿主机</li></ul></li><li><p>这样就被宿主机的<code>ly-page</code>微服务接收到了</p></li></ul><p>重启nginx：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><p>测试，在浏览器访问：<a href="http://192.168.206.99/backend/page/spu/5">http://192.168.206.99/backend/page/spu/5</a></p><p> <img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200724224019970.png" alt="image-20200724224019970"> </p><p><strong>注意注意注意：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">要将六个API都测一遍哦，不要偷懒了！</span></span><br><span class="line"><span class="attr">注意注意：linux系统上有一个openresty，里面已经包含nginx了，这里要卸载原来的nginx哦。</span></span><br></pre></td></tr></table></figure><h3 id="3-8-2-编写通用工具模块"><a href="#3-8-2-编写通用工具模块" class="headerlink" title="3.8.2.编写通用工具模块"></a>3.8.2.编写通用工具模块</h3><p>接下来，编写一个通用的工具模块，方便后期连接Redis，查询tomcat</p><p>脚本要定义到<code>/usr/local/openresty/lualib</code>目录，因为这里的lua会被扫描到模块库，供其它脚本共享使用。</p><p>新建脚本文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/openresty/lualib/common.lua</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入redis模块</span></span><br><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span>(<span class="string">&quot;resty.redis&quot;</span>)  </span><br><span class="line"><span class="comment">-- 日志</span></span><br><span class="line"><span class="keyword">local</span> ngx_log = ngx.<span class="built_in">log</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_ERR = ngx.ERR  </span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">close_redis</span><span class="params">(red)</span></span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> red <span class="keyword">then</span>  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="comment">--释放连接(连接池实现)  </span></span><br><span class="line">    <span class="keyword">local</span> pool_max_idle_time = <span class="number">10000</span> <span class="comment">--毫秒  </span></span><br><span class="line">    <span class="keyword">local</span> pool_size = <span class="number">100</span> <span class="comment">--连接池大小  </span></span><br><span class="line">    <span class="keyword">local</span> ok, err = red:set_keepalive(pool_max_idle_time, pool_size)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;set redis keepalive error : &quot;</span>, err)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">-- 查询redis的方法 ip和port是redis地址，keys是查询的key，数组格式</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_redis</span><span class="params">(ip, port, keys)</span></span>  </span><br><span class="line"><span class="comment">-- 获取一个连接</span></span><br><span class="line">    <span class="keyword">local</span> red = redis:new()  </span><br><span class="line">    red:set_timeout(<span class="number">1000</span>)  </span><br><span class="line">    <span class="keyword">local</span> ok, err = red:connect(ip, port)  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;connect to redis error : &quot;</span>, err)  </span><br><span class="line">        <span class="keyword">return</span> close_redis(red)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="keyword">local</span> resp = <span class="literal">nil</span></span><br><span class="line"><span class="comment">-- 判断key数量，如果多个key，就利用mget批量查询</span></span><br><span class="line">    <span class="keyword">if</span> #keys == <span class="number">1</span> <span class="keyword">then</span>  </span><br><span class="line">        resp, err = red:get(keys[<span class="number">1</span>])  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        resp, err = red:mget(keys)  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 查询失败处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;get redis content error : &quot;</span>, err)  </span><br><span class="line">        <span class="keyword">return</span> close_redis(red)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">--得到的数据为空处理  </span></span><br><span class="line">    <span class="keyword">if</span> resp == ngx.null <span class="keyword">then</span>  </span><br><span class="line">        resp = <span class="literal">nil</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    close_redis(red)  </span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">-- 查询http请求的方法，path是请求路径，args是参数，table格式</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_http</span><span class="params">(path, args)</span></span> </span><br><span class="line"><span class="comment">-- 默认查询地址走 /backend/page/,内部转发到8084端口</span></span><br><span class="line">    <span class="keyword">local</span> resp = ngx.location.capture(<span class="string">&quot;/backend/page&quot;</span>..<span class="built_in">path</span>, &#123;  </span><br><span class="line">        method = ngx.HTTP_GET,  </span><br><span class="line">        args = args  </span><br><span class="line">    &#125;)  </span><br><span class="line"><span class="comment">-- 查询失败的处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;request error&quot;</span>)  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 返回状态码不是200就报错</span></span><br><span class="line">    <span class="keyword">if</span> resp.<span class="built_in">status</span> ~= <span class="number">200</span> <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;request error, status :&quot;</span>, resp.<span class="built_in">status</span>)  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> resp.body  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">-- 将方法导出</span></span><br><span class="line"><span class="keyword">local</span> _M = &#123;  </span><br><span class="line">    read_redis = read_redis,  </span><br><span class="line">    read_http = read_http  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> _M </span><br></pre></td></tr></table></figure><p>核心方法有两个：</p><ul><li>read_redis(ip, port, keys)：查询redis数据，参数：<ul><li>ip：就是redis的ip地址</li><li>port：就是redis的端口</li><li>keys：查询用到的key，数组，可以同时查询多个</li></ul></li><li>read_http(path, args)：http请求查询，内部会转发到<code>ly-page</code>参数：<ul><li>path：请求路径，方法内部会在path前拼接：/backend/page</li><li>args：请求参数，table类型</li></ul></li></ul><h3 id="3-8-3-页面模板"><a href="#3-8-3-页面模板" class="headerlink" title="3.8.3.页面模板"></a>3.8.3.页面模板</h3><p>我已经提前写好了一个页面模板，在课前资料中获取：item.html,<strong>上传item.html到 /usr/resty/templates</strong></p><p>其中需要的参数包括：</p><ul><li>spu：商品spu，需要的是spu中的name，分类id、品牌id</li><li>skuList：商品spu下的sku</li><li>spuDetail：商品详情</li><li>categories：商品分类</li><li>brand：品牌</li><li>specs：规格组包含规格参数</li></ul><h3 id="3-8-4-数据处理脚本"><a href="#3-8-4-数据处理脚本" class="headerlink" title="3.8.4.数据处理脚本"></a>3.8.4.数据处理脚本</h3><p>下面，我们编写数据处理的脚本。</p><p>新建脚本文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/resty/lua/item.lua</span><br></pre></td></tr></table></figure><p>内容：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入模块</span></span><br><span class="line"><span class="keyword">local</span> common = <span class="built_in">require</span>(<span class="string">&quot;common&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> read_redis = common.read_redis  </span><br><span class="line"><span class="keyword">local</span> read_http = common.read_http</span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span>(<span class="string">&quot;cjson&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">&quot;resty.template&quot;</span>)  </span><br><span class="line"><span class="comment">-- 常用变量和方法</span></span><br><span class="line"><span class="keyword">local</span> ngx_log = ngx.<span class="built_in">log</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_ERR = ngx.ERR  </span><br><span class="line"><span class="keyword">local</span> ngx_exit = ngx.<span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_print = ngx.<span class="built_in">print</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_re_match = ngx.re.<span class="built_in">match</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取商品id</span></span><br><span class="line"><span class="keyword">local</span> spuId = ngx.var.spuId</span><br><span class="line"><span class="comment">-- 获取spu</span></span><br><span class="line"><span class="keyword">local</span> spuKey = <span class="string">&quot;page:spu:id:&quot;</span>..spuId </span><br><span class="line"><span class="keyword">local</span> spuInfoStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, &#123;spuKey&#125;)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> spuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found spu info, back to http, spuId : &quot;</span>, spuId)  </span><br><span class="line">   spuInfoStr = read_http(<span class="string">&quot;/spu/&quot;</span>..spuId, &#123;&#125;)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> spuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found spuInfoStr info, spuId : &quot;</span>, spuId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取sku</span></span><br><span class="line"><span class="keyword">local</span> skuKey = <span class="string">&quot;page:sku:id:&quot;</span>..spuId </span><br><span class="line"><span class="keyword">local</span> skuInfoStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, &#123;skuKey&#125;)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> skuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found sku info, back to http, spuId : &quot;</span>, spuId)  </span><br><span class="line">   skuInfoStr = read_http(<span class="string">&quot;/sku/&quot;</span>..spuId, &#123;&#125;)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> skuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found skuInfoStr info, spuId : &quot;</span>, spuId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取spuDetail</span></span><br><span class="line"><span class="keyword">local</span> detailKey = <span class="string">&quot;page:detail:id:&quot;</span>..spuId </span><br><span class="line"><span class="keyword">local</span> detailInfoStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, &#123;detailKey&#125;)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> detailInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found detail info, back to http, spuId : &quot;</span>, spuId)  </span><br><span class="line">   detailInfoStr = read_http(<span class="string">&quot;/detail/&quot;</span>..spuId, &#123;&#125;)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> detailInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found detailInfoStr info, spuId : &quot;</span>, spuId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取categories</span></span><br><span class="line"><span class="keyword">local</span> spuInfo = cjson.decode(spuInfoStr)  </span><br><span class="line"><span class="keyword">local</span> cid3 = spuInfo[<span class="string">&quot;categoryIds&quot;</span>][<span class="number">3</span>]</span><br><span class="line"><span class="keyword">local</span> categoryKey = <span class="string">&quot;page:category:id:&quot;</span>..cid3 </span><br><span class="line"><span class="keyword">local</span> categoryStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, &#123;categoryKey&#125;)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> categoryStr <span class="keyword">then</span>  </span><br><span class="line">   <span class="keyword">local</span> idStr = <span class="built_in">table</span>.<span class="built_in">concat</span>(spuInfo[<span class="string">&quot;categoryIds&quot;</span>],<span class="string">&quot;,&quot;</span>);</span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found category info, back to http, categoryIds : &quot;</span>, idStr)  </span><br><span class="line">   categoryStr = read_http(<span class="string">&quot;/categories/&quot;</span>, &#123;ids  = idStr&#125;)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> categoryStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found categoryStr info, categoryId : &quot;</span>, cid3)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取品牌  </span></span><br><span class="line"><span class="keyword">local</span> brandId = spuInfo[<span class="string">&quot;brandId&quot;</span>]</span><br><span class="line"><span class="keyword">local</span> brandKey = <span class="string">&quot;page:brand:id:&quot;</span>..brandId </span><br><span class="line"><span class="keyword">local</span> brandStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, &#123;brandKey&#125;)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> brandStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found brand info, back to http, brandId : &quot;</span>, brandId)  </span><br><span class="line">   brandStr = read_http(<span class="string">&quot;/brand/&quot;</span>..brandId, &#123;&#125;)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> brandStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found brandStr info, brandId : &quot;</span>, brandId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取规格</span></span><br><span class="line"><span class="keyword">local</span> specKey = <span class="string">&quot;page:spec:id:&quot;</span>..cid3 </span><br><span class="line"><span class="keyword">local</span> specStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, &#123;specKey&#125;)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> specStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found spec info, back to http, cid3 : &quot;</span>, cid3)  </span><br><span class="line">   specStr = read_http(<span class="string">&quot;/spec/&quot;</span>..cid3, &#123;&#125;)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> specStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found specStr info, cid3 : &quot;</span>, cid3)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 组织数据</span></span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">name = spuInfo[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">skuList =  skuInfoStr,</span><br><span class="line">detail =  detailInfoStr,</span><br><span class="line">categories =  categoryStr,</span><br><span class="line">brand =  brandStr,</span><br><span class="line">specs =  specStr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--渲染模板  ##########################################</span></span><br><span class="line">template.render(<span class="string">&quot;item.html&quot;</span>, context)</span><br></pre></td></tr></table></figure><h3 id="3-8-5-路径映射"><a href="#3-8-5-路径映射" class="headerlink" title="3.8.5.路径映射"></a>3.8.5.路径映射</h3><p>最后，我们监听页面请求，把商品页面交给模板来处理.</p><p>在<code>/usr/resty/conf/leyou.conf</code>中添加映射：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ /item/(\d+).html$</span> &#123;</span><br><span class="line">    <span class="comment"># 获取路径参数</span></span><br><span class="line">    <span class="attribute">set</span> $spuId <span class="variable">$1</span>;</span><br><span class="line">    <span class="comment"># 禁止除了www.leyou.com以外的请求访问</span></span><br><span class="line">    <span class="attribute">if</span> ($host !<span class="regexp">~ &quot;^www\.leyou\.com$&quot;)</span> &#123;  </span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 关闭缓存/打开缓存</span></span><br><span class="line">    <span class="attribute">lua_code_cache</span> <span class="literal">on</span>; </span><br><span class="line">    <span class="attribute">default_type</span> <span class="string">&#x27;text/html&#x27;</span>;  </span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    <span class="comment"># 指定请求交给lua/item.lua脚本来处理</span></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> lua/item.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-6-修改宿主机路径映射"><a href="#3-8-6-修改宿主机路径映射" class="headerlink" title="3.8.6.修改宿主机路径映射"></a>3.8.6.修改宿主机路径映射</h3><p>现在，OpenResty已经准备就绪，不过我们在浏览器中输入：</p><p><a href="http://www.leyou.com/item/141.html">http://www.leyou.com/item/141.html</a></p><p>这个商品地址时，目前依然走的是<code>ly-portal</code>。我们需要把请求地址修改到你的虚拟机地址，例如我的地址是：<code>192.168.206.99</code></p><p>修改宿主机中的<code>leyou.conf</code>文件，修改原来的 <a href="http://www.leyou.com的域名解析部分：">www.leyou.com的域名解析部分：</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  www.leyou.com;</span><br><span class="line"><span class="attribute">location</span> /item &#123;</span><br><span class="line"><span class="comment"># 携带hosts地址，避免因代理导致host丢失</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> Host       $host;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://192.168.206.99;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> C:\develop\idea-space\leyou3\leyou-portal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><p>通过浏览器访问：</p><p><a href="http://www.leyou.com/item/127.html">http://www.leyou.com/item/127.html</a></p><p>结果：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200311202533350.png" alt="image-20200311202533350"></p><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">请求url中的127.html</span> <span class="string">的127就是商品的spuid，</span></span><br><span class="line"><span class="attr">根据这个spuid可以得到spu，spudetail，skus，brand，category，spec六种数据</span></span><br><span class="line"></span><br><span class="line"><span class="attr">浏览器发起请求，请求先到达本地nginx，接着反向代理到centos的openresty，</span></span><br><span class="line"><span class="attr">通过openresty相关配置文件的location进行路径映射，交由指定的lua脚本文件执行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">在lua脚本文件中，先尝试去centos的redis访问，访问到就先保存数据</span></span><br><span class="line"><span class="attr">访问不到就发送http请求，需要借助capture来将web请求路径转发到指定location，</span></span><br><span class="line"><span class="attr">再反向代理到page微服务，从而获取到上面说的六种数据</span></span><br><span class="line"><span class="attr">获取到的数据存放redis中，并组织六种数据，给openresty的模板页面item.html，</span></span><br><span class="line"><span class="attr">然后将渲染之后的页面返回给浏览器！</span></span><br></pre></td></tr></table></figure><h3 id="3-8-7-优化（理解即可）"><a href="#3-8-7-优化（理解即可）" class="headerlink" title="3.8.7.优化（理解即可）"></a>3.8.7.优化（理解即可）</h3><p>虽然已经实现了页面静态化，不过依然有值得优化的地方：</p><ul><li>在Nginx中设置本地缓存，把几乎不变的数据直接存储在nginx内部，例如：<ul><li>商品分类数据</li><li>品牌数据</li><li>规格参数数据</li></ul></li><li>在nginx中对生成的页面做缓存或静态化，做CDN服务，页面不变的时候，减少渲染对CPU的消耗</li><li>随着商品数据的日益增多，Redis可能难以支持海量商品信息，此时可以用SSDB来代替，SSDB存储基于磁盘存储，查询性能与Redis差不多，因此可以作为海量数据的缓存库</li></ul><p>参考：本地缓存的实现：</p><p>修改nginx.conf，配置本地缓存大小和名称：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="attribute">error_log</span> logs/error.log;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">lua_package_path</span> <span class="string">&quot;/usr/local/openresty/lualib/?.lua;;&quot;</span>;  <span class="comment">#lua 模块  </span></span><br><span class="line">    <span class="attribute">lua_package_cpath</span> <span class="string">&quot;/usr/local/openresty/lualib/?.so;;&quot;</span>;  <span class="comment">#c模块 </span></span><br><span class="line">    <span class="comment">#本地缓存，名称叫做：item_local_cache，大小50m</span></span><br><span class="line"><span class="attribute">lua_shared_dict</span> item_local_cache <span class="number">50m</span>; </span><br><span class="line"></span><br><span class="line">    <span class="attribute">default_type</span>  text/html; <span class="comment"># 默认响应类型是html</span></span><br><span class="line">    <span class="comment">#include lua.conf;    # 引入一个lua.conf文件</span></span><br><span class="line">    <span class="attribute">include</span> leyou.conf;    <span class="comment"># 引入一个leyou.conf文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改common.lua，添加数据查询方法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入redis模块</span></span><br><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span>(<span class="string">&quot;resty.redis&quot;</span>) </span><br><span class="line"><span class="comment">-- 配置商品的本地缓存 </span></span><br><span class="line"><span class="keyword">local</span> local_cache = ngx.shared.item_local_cache</span><br><span class="line"><span class="comment">-- 日志</span></span><br><span class="line"><span class="keyword">local</span> ngx_log = ngx.<span class="built_in">log</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_ERR = ngx.ERR</span><br><span class="line"><span class="comment">-- 读取本地缓存</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">cache_get</span><span class="params">(key)</span></span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> local_cache <span class="keyword">then</span>  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="keyword">return</span> local_cache:get(key)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 写入本地缓存</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">cache_set</span><span class="params">(key, value)</span></span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> local_cache <span class="keyword">then</span>  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="keyword">return</span> local_cache:set(key, value, <span class="number">10</span> * <span class="number">60</span>) <span class="comment">--10分钟  </span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">close_redis</span><span class="params">(red)</span></span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> red <span class="keyword">then</span>  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="comment">--释放连接(连接池实现)  </span></span><br><span class="line">    <span class="keyword">local</span> pool_max_idle_time = <span class="number">10000</span> <span class="comment">--毫秒  </span></span><br><span class="line">    <span class="keyword">local</span> pool_size = <span class="number">100</span> <span class="comment">--连接池大小  </span></span><br><span class="line">    <span class="keyword">local</span> ok, err = red:set_keepalive(pool_max_idle_time, pool_size)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;set redis keepalive error : &quot;</span>, err)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">-- 查询本地缓存，没有则查询redis, ip和port是redis地址，key是查询的key</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_cache</span><span class="params">(ip, port, key)</span></span> </span><br><span class="line"><span class="comment">-- 尝试读本地缓存</span></span><br><span class="line"><span class="keyword">local</span> resp = cache_get(key)</span><br><span class="line"><span class="comment">-- ngx_log(ngx_ERR, &quot;debug local cache data : &quot;, resp) </span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span></span><br><span class="line">ngx_log(ngx_ERR, <span class="string">&quot;read local cache fail , key&quot;</span>, key)</span><br><span class="line"><span class="comment">-- 获取一个redis连接</span></span><br><span class="line"><span class="keyword">local</span> red = redis:new()  </span><br><span class="line">red:set_timeout(<span class="number">1000</span>)  </span><br><span class="line"><span class="keyword">local</span> ok, err = red:connect(ip, port)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">ngx_log(ngx_ERR, <span class="string">&quot;connect to redis error : &quot;</span>, err)  </span><br><span class="line"><span class="keyword">return</span> close_redis(red)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 利用get查询</span></span><br><span class="line">resp, err = red:get(key) </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 查询失败处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;get redis content error : &quot;</span>, err)  </span><br><span class="line">        <span class="keyword">return</span> close_redis(red)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">--得到的数据为空处理  </span></span><br><span class="line">    <span class="keyword">if</span> resp == ngx.null <span class="keyword">then</span>  </span><br><span class="line">        resp = <span class="literal">nil</span>  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">cache_set(key, resp)</span><br><span class="line">    close_redis(red)  </span><br><span class="line">    <span class="keyword">return</span> resp  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 查询redis的方法 ip和port是redis地址，keys是查询的key，数组格式</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_redis</span><span class="params">(ip, port, key)</span></span>  </span><br><span class="line"><span class="comment">-- 获取一个连接</span></span><br><span class="line">    <span class="keyword">local</span> red = redis:new()  </span><br><span class="line">    red:set_timeout(<span class="number">1000</span>)  </span><br><span class="line">    <span class="keyword">local</span> ok, err = red:connect(ip, port)  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;connect to redis error : &quot;</span>, err)  </span><br><span class="line">        <span class="keyword">return</span> close_redis(red)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="keyword">local</span> resp = <span class="literal">nil</span></span><br><span class="line"><span class="comment">-- 利用get查询 </span></span><br><span class="line">    resp, err = red:get(key)  </span><br><span class="line"><span class="comment">-- 查询失败处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;get redis content error : &quot;</span>, err)  </span><br><span class="line">        <span class="keyword">return</span> close_redis(red)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">--得到的数据为空处理  </span></span><br><span class="line">    <span class="keyword">if</span> resp == ngx.null <span class="keyword">then</span>  </span><br><span class="line">        resp = <span class="literal">nil</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    close_redis(red)  </span><br><span class="line">    <span class="keyword">return</span> resp  </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">-- 查询http请求的方法，path是请求路径，args是参数，table格式</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_http</span><span class="params">(path, args)</span></span> </span><br><span class="line"><span class="comment">-- 默认查询地址走 /backend/page/,内部转发到8083端口</span></span><br><span class="line">    <span class="keyword">local</span> resp = ngx.location.capture(<span class="string">&quot;/backend/page&quot;</span>..<span class="built_in">path</span>, &#123;  </span><br><span class="line">        method = ngx.HTTP_GET,  </span><br><span class="line">        args = args  </span><br><span class="line">    &#125;)  </span><br><span class="line"><span class="comment">-- 查询失败的处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;request error&quot;</span>)  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 返回状态码不是200就报错</span></span><br><span class="line">    <span class="keyword">if</span> resp.<span class="built_in">status</span> ~= <span class="number">200</span> <span class="keyword">then</span>  </span><br><span class="line">        ngx_log(ngx_ERR, <span class="string">&quot;request error, status :&quot;</span>, resp.<span class="built_in">status</span>)  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> resp.body  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">-- 将方法导出</span></span><br><span class="line"><span class="keyword">local</span> _M = &#123;  </span><br><span class="line">    read_redis = read_redis,  </span><br><span class="line">    read_cache = read_cache,  </span><br><span class="line">    read_http = read_http  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> _M </span><br></pre></td></tr></table></figure><p>改造<code>item.lua</code>，将分类、品牌、规格查询走本地缓存</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入模块</span></span><br><span class="line"><span class="keyword">local</span> common = <span class="built_in">require</span>(<span class="string">&quot;common&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> read_redis = common.read_redis  </span><br><span class="line"><span class="keyword">local</span> read_http = common.read_http</span><br><span class="line"><span class="keyword">local</span> read_cache = common.read_cache</span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span>(<span class="string">&quot;cjson&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">&quot;resty.template&quot;</span>)  </span><br><span class="line"><span class="comment">-- 常用变量和方法</span></span><br><span class="line"><span class="keyword">local</span> ngx_log = ngx.<span class="built_in">log</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_ERR = ngx.ERR  </span><br><span class="line"><span class="keyword">local</span> ngx_exit = ngx.<span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_print = ngx.<span class="built_in">print</span>  </span><br><span class="line"><span class="keyword">local</span> ngx_re_match = ngx.re.<span class="built_in">match</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取商品id</span></span><br><span class="line"><span class="keyword">local</span> spuId = ngx.var.spuId</span><br><span class="line"><span class="comment">-- 获取spu</span></span><br><span class="line"><span class="keyword">local</span> spuKey = <span class="string">&quot;page:spu:id:&quot;</span>..spuId </span><br><span class="line"><span class="keyword">local</span> spuInfoStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, spuKey)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> spuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found spu info, back to http, spuId : &quot;</span>, spuId)  </span><br><span class="line">   spuInfoStr = read_http(<span class="string">&quot;/spu/&quot;</span>..spuId, &#123;&#125;)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> spuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found spuInfoStr info, spuId : &quot;</span>, spuId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取sku</span></span><br><span class="line"><span class="keyword">local</span> skuKey = <span class="string">&quot;page:sku:id:&quot;</span>..spuId </span><br><span class="line"><span class="keyword">local</span> skuInfoStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, skuKey)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> skuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found sku info, back to http, spuId : &quot;</span>, spuId)  </span><br><span class="line">   skuInfoStr = read_http(<span class="string">&quot;/sku/&quot;</span>..spuId, &#123;&#125;)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> skuInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found skuInfoStr info, spuId : &quot;</span>, spuId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取spuDetail</span></span><br><span class="line"><span class="keyword">local</span> detailKey = <span class="string">&quot;page:detail:id:&quot;</span>..spuId </span><br><span class="line"><span class="keyword">local</span> detailInfoStr = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, detailKey)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> detailInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found detail info, back to http, spuId : &quot;</span>, spuId)  </span><br><span class="line">   detailInfoStr = read_http(<span class="string">&quot;/detail/&quot;</span>..spuId, &#123;&#125;)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> detailInfoStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found detailInfoStr info, spuId : &quot;</span>, spuId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取categories</span></span><br><span class="line"><span class="keyword">local</span> spuInfo = cjson.decode(spuInfoStr)  </span><br><span class="line"><span class="keyword">local</span> cid3 = spuInfo[<span class="string">&quot;categoryIds&quot;</span>][<span class="number">3</span>]</span><br><span class="line"><span class="keyword">local</span> categoryKey = <span class="string">&quot;page:category:id:&quot;</span>..cid3 </span><br><span class="line"><span class="keyword">local</span> categoryStr = read_cache(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, categoryKey)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> categoryStr <span class="keyword">then</span>  </span><br><span class="line">   <span class="keyword">local</span> idStr = <span class="built_in">table</span>.<span class="built_in">concat</span>(spuInfo[<span class="string">&quot;categoryIds&quot;</span>],<span class="string">&quot;,&quot;</span>);</span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found category info, back to http, categoryIds : &quot;</span>, idStr)  </span><br><span class="line">   categoryStr = read_http(<span class="string">&quot;/categories/&quot;</span>, &#123;ids  = idStr&#125;)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> categoryStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found categoryStr info, categoryId : &quot;</span>, cid3)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取品牌  </span></span><br><span class="line"><span class="keyword">local</span> brandId = spuInfo[<span class="string">&quot;brandId&quot;</span>]</span><br><span class="line"><span class="keyword">local</span> brandKey = <span class="string">&quot;page:brand:id:&quot;</span>..brandId </span><br><span class="line"><span class="keyword">local</span> brandStr = read_cache(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, brandKey)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> brandStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found brand info, back to http, brandId : &quot;</span>, brandId)  </span><br><span class="line">   brandStr = read_http(<span class="string">&quot;/brand/&quot;</span>..brandId, &#123;&#125;)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> brandStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found brandStr info, brandId : &quot;</span>, brandId)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 获取规格</span></span><br><span class="line"><span class="keyword">local</span> specKey = <span class="string">&quot;page:spec:id:&quot;</span>..cid3 </span><br><span class="line"><span class="keyword">local</span> specStr = read_cache(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, specKey)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> specStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;redis not found spec info, back to http, cid3 : &quot;</span>, cid3)  </span><br><span class="line">   specStr = read_http(<span class="string">&quot;/spec/&quot;</span>..cid3, &#123;&#125;)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> specStr <span class="keyword">then</span>  </span><br><span class="line">   ngx_log(ngx_ERR, <span class="string">&quot;http not found specStr info, cid3 : &quot;</span>, cid3)  </span><br><span class="line">   <span class="keyword">return</span> ngx_exit(<span class="number">404</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 组织数据1</span></span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">name = spuInfo[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">skuList =  skuInfoStr,</span><br><span class="line">detail =  detailInfoStr,</span><br><span class="line">categories =  categoryStr,</span><br><span class="line">brand =  brandStr,</span><br><span class="line">specs =  specStr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--渲染模板  1</span></span><br><span class="line">template.render(<span class="string">&quot;item.html&quot;</span>, context)  </span><br></pre></td></tr></table></figure><h1 id="4-缓存数据同步"><a href="#4-缓存数据同步" class="headerlink" title="4.缓存数据同步"></a>4.缓存数据同步</h1><p>当商品、分类、品牌、规格等数据改变时，<strong>mysql数据会变化，Redis中数据也必须同步改变</strong>，如何做到呢？</p><p>这里我们会采用Canal这个框架来实现</p><h2 id="4-1-什么是Canal"><a href="#4-1-什么是Canal" class="headerlink" title="4.1.什么是Canal"></a>4.1.什么是Canal</h2><p>**canal [kə’næl]**，译意为水道/管道/沟渠，canal是阿里巴巴旗下的一款开源项目，基于Java开发。基于数据库增量日志解析，提供增量数据订阅&amp;消费。</p><p>基于日志增量订阅和消费的业务包括</p><ul><li>数据库镜像</li><li>数据库实时备份</li><li>索引构建和实时维护(拆分异构索引、倒排索引等)</li><li>业务 cache 刷新</li><li>带业务逻辑的增量数据处理</li></ul><p>当前的 canal 支持源端 MySQL 版本包括 5.1.x , 5.5.x , 5.6.x , 5.7.x , 8.0.x</p><p>在GitHub的地址：<a href="https://github.com/alibaba/canal">https://github.com/alibaba/canal</a></p><p>基本原理如下图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200311220739591.png" alt="image-20200311220739591"></p><p>MySQL主备复制原理</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">MySQL master 将**数据变更**写入二进制日志( binary log, 其中记录叫做二进制日志事件binary log events，</span></span><br><span class="line"><span class="meta">可以通过</span> <span class="string">show binlog events 进行查看)</span></span><br><span class="line"><span class="meta">-</span> <span class="string">MySQL slave 将 master 的 binary log events 拷贝到它的中继日志(relay log)</span></span><br><span class="line"><span class="meta">-</span> <span class="string">MySQL slave 重放 relay log 中事件，将数据变更反映它自己的数据</span></span><br></pre></td></tr></table></figure><p>canal 工作原理</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-</span> <span class="string">canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议</span></span><br><span class="line"><span class="meta">-</span> <span class="string">MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</span></span><br><span class="line"><span class="meta">-</span> <span class="string">canal 解析 binary log 对象(原始为 byte 流)</span></span><br></pre></td></tr></table></figure><h2 id="4-2-设置主从同步"><a href="#4-2-设置主从同步" class="headerlink" title="4.2.设置主从同步"></a>4.2.设置主从同步</h2><p>下面我们就开启mysql的主从同步机制，让Canal来模拟salve</p><p>这里以linux版本的mysql为例</p><h3 id="4-2-1-设置binary-log"><a href="#4-2-1-设置binary-log" class="headerlink" title="4.2.1.设置binary log"></a>4.2.1.设置binary log</h3><p>根据上面介绍的原理，我们首先要开启mysql的binary log日志。</p><p>打开mysql容器挂载的日志文件，我的在<code>/home/leyou/mysql/conf</code>目录:</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200311221433314.png" alt="image-20200311221433314"> </p><p>修改文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/leyou/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure><p>最新内容为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line">skip-name-resolve</span><br><span class="line"><span class="attr">character_set_server</span>=utf8</span><br><span class="line"><span class="attr">datadir</span>=/var/lib/mysql</span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log-bin</span>=/var/lib/mysql/mysql-bin</span><br><span class="line"><span class="attr">binlog-do-db</span>=heima</span><br></pre></td></tr></table></figure><p>配置解读：</p><ul><li><code>log-bin=/var/lib/mysql/mysql-bin</code>：设置binary log文件的存放地址</li><li><code>server-id=1000</code>：设置当前服务id</li><li><code>binlog-do-db=heima</code>：设置生成binary log的database名称，这里设置的是heima</li></ul><p>效果截图：</p><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200725214927404.png" alt="image-20200725214927404"> </p><h3 id="4-2-2-设置账号权限"><a href="#4-2-2-设置账号权限" class="headerlink" title="4.2.2.设置账号权限"></a>4.2.2.设置账号权限</h3><p>接下来添加一个仅用于数据同步的账户，出于安全考虑，这里仅提供对heima这个库的操作权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it ly-mysql /bin/bash</span><br></pre></td></tr></table></figure><p>链接mysql:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user canal@&#x27;%&#x27; IDENTIFIED by &#x27;canal&#x27;;</span><br><span class="line">GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT,SUPER ON *.* TO &#x27;canal&#x27;@&#x27;%&#x27; identified by &#x27;canal&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>两次<code>exit</code>退出mysql，退出容器,到宿主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>重启mysql容器即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure><p>测试设置是否成功：在mysql控制台，或者Navicat中，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p><img src="/img/java/06%E9%98%B6%E6%AE%B5%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/9%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5/image-20200327094735948.png" alt="image-20200327094735948"> </p><h2 id="4-3-安装canal"><a href="#4-3-安装canal" class="headerlink" title="4.3.安装canal"></a>4.3.安装canal</h2><p>拉取镜像：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull canal/canal-server</span><br></pre></td></tr></table></figure><p>运行容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 11111:11111 --name canal \</span><br><span class="line">-e canal.destinations=<span class="built_in">test</span> \</span><br><span class="line">-e canal.instance.master.address=172.17.0.5:3306 \</span><br><span class="line">-e canal.instance.dbUsername=canal \</span><br><span class="line">-e canal.instance.dbPassword=canal \</span><br><span class="line">-e canal.instance.connectionCharset=UTF-8 \</span><br><span class="line">-e canal.instance.tsdb.enable=<span class="literal">true</span> \</span><br><span class="line">-e canal.instance.gtidon=<span class="literal">false</span>  \</span><br><span class="line">-e canal.instance.filter.regex=heima.tb_spu,heima.tb_sku,heima.tb_spu_detail,heima.tb_category,heima.tb_brand,heima.tb_spec_param \</span><br><span class="line">--network bridge \</span><br><span class="line">-d canal/canal-server</span><br></pre></td></tr></table></figure><p>说明:</p><ul><li><code>-p 11111:11111</code>：这是canal的默认监听端口</li><li><code>-e canal.instance.master.address=172.17.0.4:3306</code>：数据库地址和端口，如果不知道mysql容器地址，可以通过<code>docker inspect 容器id</code>来查看</li><li><code>-e canal.instance.dbUsername=canal</code>：数据库用户名</li><li><code>-e canal.instance.dbPassword=canal</code> ：数据库密码</li><li><code>-e canal.instance.filter.regex=</code>：要监听的表名称</li></ul><p>表名称监听支持的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql 数据解析关注的表，Perl正则表达式.</span><br><span class="line">多个正则之间以逗号(,)分隔，转义符需要双斜杠(\\) </span><br><span class="line">常见例子：</span><br><span class="line">1.  所有表：.*   or  .*\\..*</span><br><span class="line">2.  canal schema下所有表： canal\\..*</span><br><span class="line">3.  canal下的以canal打头的表：canal\\.canal.*</span><br><span class="line">4.  canal schema下的一张表：canal.test1</span><br><span class="line">5.  多个规则组合使用然后以逗号隔开：canal\\..*,mysql.test1,mysql.test2 </span><br></pre></td></tr></table></figure><p>设置canal的自动启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=always canal</span><br></pre></td></tr></table></figure><p>现在，canal就会去监听我们的数据库变化，并通知canal客户端。</p><h2 id="4-4-编写canal客户端"><a href="#4-4-编写canal客户端" class="headerlink" title="4.4.编写canal客户端"></a>4.4.编写canal客户端</h2><p>我们在<code>ly-page</code>中配置canal客户端，当数据库变化时我们就能得到通知。</p><h3 id="4-4-1引入依赖"><a href="#4-4-1引入依赖" class="headerlink" title="4.4.1引入依赖"></a>4.4.1引入依赖</h3><p>在<code>ly-page</code>的<code>pom.xml</code>中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.javatool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写<code>ly-page</code>的配置文件<code>application.yml</code>，指定canal服务端地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># top.javatool.canal: warn # 关闭心跳日志</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span> <span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">canal:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">test</span>  <span class="comment">############这里要跟启动canal容器时的destination一致。</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">ly-canal:11111</span> <span class="comment"># canal地址    ####注意要去hosts文件配置ly-canal 域名的ip地址。</span></span><br></pre></td></tr></table></figure><h3 id="4-4-2-添加Redis操作方法"><a href="#4-4-2-添加Redis操作方法" class="headerlink" title="4.4.2.添加Redis操作方法"></a>4.4.2.添加Redis操作方法</h3><p>等会监听到表的操作包括：增、删、改</p><ul><li>增、改：我们写入数据到redis</li><li>删：我们把数据从redis删除</li></ul><p>这里要监听的数据比较多，业务代码较多，我们以sku为例来给大家介绍。</p><p>给<code>ly-page</code>中的<code>GoodsPageService</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把Sku从Redis删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function">Boolean <span class="title">deleteSku</span><span class="params">(Long spuId)</span></span>;</span><br></pre></td></tr></table></figure><p>然后在<code>GoodsPageServiceImpl</code>中实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">deleteSku</span><span class="params">(Long spuId)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.delete(KEY_PREFIX_SKU + spuId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-编写监听器"><a href="#4-4-2-编写监听器" class="headerlink" title="4.4.2.编写监听器"></a>4.4.2.编写监听器</h3><p>我们在ly-page的<code>com.leyou.page.canal</code>包下，新增一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.page.canal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.page.service.GoodsPageService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> top.javatool.canal.client.annotation.CanalTable;</span><br><span class="line"><span class="keyword">import</span> top.javatool.canal.client.context.CanalContext;</span><br><span class="line"><span class="keyword">import</span> top.javatool.canal.client.handler.EntryHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CanalTable(value = &quot;all&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanalHandler</span> <span class="keyword">implements</span> <span class="title">EntryHandler</span>&lt;<span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">String</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsPageService goodsPageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Map&lt;String,String&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取表的名称</span></span><br><span class="line">        String table = CanalContext.getModel().getTable();</span><br><span class="line">        <span class="comment">// 如果表是tb_sku</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;tb_sku&quot;</span>.equals(table))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;sku新增了&#123;&#125;&quot;</span>, model);</span><br><span class="line">            goodsPageService.loadSkuListData(Long.valueOf(model.get(<span class="string">&quot;spu_id&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Map&lt;String,String&gt; before, Map&lt;String,String&gt; after)</span> </span>&#123;</span><br><span class="line">        String table = CanalContext.getModel().getTable();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;tb_sku&quot;</span>.equals(table))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;sku修改了&#123;&#125;&quot;</span>, after);</span><br><span class="line">            goodsPageService.loadSkuListData(Long.valueOf(after.get(<span class="string">&quot;spu_id&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Map&lt;String,String&gt; model)</span> </span>&#123;</span><br><span class="line">        String table = CanalContext.getModel().getTable();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;tb_sku&quot;</span>.equals(table))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;sku删除了&#123;&#125;&quot;</span>, model);</span><br><span class="line">            goodsPageService.deleteSku(Long.valueOf(model.get(<span class="string">&quot;spu_id&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">将mysql中的heima数据库设置为master</span></span><br><span class="line"><span class="attr">2</span> <span class="string">在centos中安装canal 模拟mysql的slave，向master发送请求</span></span><br><span class="line"><span class="attr">3</span> <span class="string">canal将请求放到test中，供客户端访问（只要heima数据库有增删改就会更新test内容）</span></span><br><span class="line"><span class="attr">4</span> <span class="string">page微服务器就是客户端，经过canal依赖包以及一些配置绑定canal的test，然后编写监听器</span></span><br><span class="line"><span class="attr">只要test内容变化，就将监听到的增删改变化更新到redis中。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;商品详情页&quot;&gt;&lt;a href=&quot;#商品详情页&quot; class=&quot;headerlink&quot; title=&quot;商品详情页&quot;&gt;&lt;/a&gt;商品详情页&lt;/h1&gt;&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;</summary>
      
    
    
    
    <category term="乐优商城项目" scheme="http://example.com/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Canal" scheme="http://example.com/tags/Canal/"/>
    
    <category term="OpenResty" scheme="http://example.com/tags/OpenResty/"/>
    
    <category term="Lua" scheme="http://example.com/tags/Lua/"/>
    
  </entry>
  
</feed>
